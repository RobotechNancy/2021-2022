
STM32_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003914  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a04  08003a04  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003a04  08003a04  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a04  08003a04  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000014  08003a20  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003a20  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d7  00000000  00000000  0002ac6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f1  00000000  00000000  0002d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af18  00000000  00000000  00047021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ded  00000000  00000000  00051f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002518  00000000  00000000  000e8d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039bc 	.word	0x080039bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080039bc 	.word	0x080039bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CAN_Config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CAN_Config(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000226:	003b      	movs	r3, r7
 8000228:	2200      	movs	r2, #0
 800022a:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 800022c:	003b      	movs	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 8000232:	003b      	movs	r3, r7
 8000234:	2201      	movs	r2, #1
 8000236:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x325 << 5; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000238:	003b      	movs	r3, r7
 800023a:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <CAN_Config+0x88>)
 800023c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0; //
 800023e:	003b      	movs	r3, r7
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFF << 5; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000244:	003b      	movs	r3, r7
 8000246:	4a19      	ldr	r2, [pc, #100]	; (80002ac <CAN_Config+0x8c>)
 8000248:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800024a:	003b      	movs	r3, r7
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000256:	003b      	movs	r3, r7
 8000258:	2201      	movs	r2, #1
 800025a:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800025c:	003b      	movs	r3, r7
 800025e:	220e      	movs	r2, #14
 8000260:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000262:	003a      	movs	r2, r7
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <CAN_Config+0x90>)
 8000266:	0011      	movs	r1, r2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fe0b 	bl	8000e84 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <CAN_Config+0x90>)
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fef9 	bl	8001068 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <CAN_Config+0x90>)
 8000278:	2102      	movs	r1, #2
 800027a:	0018      	movs	r0, r3
 800027c:	f001 f934 	bl	80014e8 <HAL_CAN_ActivateNotification>

	RxHeader.StdId = 0x324; //adresse dans l'en-tête du mesage reçu
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <CAN_Config+0x94>)
 8000282:	22c9      	movs	r2, #201	; 0xc9
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]
	RxHeader.FilterMatchIndex = 0; //degré de concordance entre l'entête et les informations renseignées.
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <CAN_Config+0x94>)
 800028a:	2200      	movs	r2, #0
 800028c:	619a      	str	r2, [r3, #24]
	RxHeader.DLC = 2; // taille de la donnée
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <CAN_Config+0x94>)
 8000290:	2202      	movs	r2, #2
 8000292:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD; //type d'identifieur can
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <CAN_Config+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA; //type de message (ici data)
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <CAN_Config+0x94>)
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]

	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)

}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b00a      	add	sp, #40	; 0x28
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	000064a0 	.word	0x000064a0
 80002ac:	0001ffe0 	.word	0x0001ffe0
 80002b0:	2000007c 	.word	0x2000007c
 80002b4:	2000011c 	.word	0x2000011c

080002b8 <HAL_CAN_RxFifo0MsgPendingCallback>:

//fct interrupt (qd stm reçoit msg)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	//HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
	// Traitement des données
	uint8_t RxData[8];
	//réception du message
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80002c0:	2408      	movs	r4, #8
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	2100      	movs	r1, #0
 80002ca:	f000 fff1 	bl	80012b0 <HAL_CAN_GetRxMessage>

	//transmit(); //(accusé de réception)

	stop(RxData[0]);
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fa66 	bl	80007a4 <stop>
	change_dir(RxData[1]);
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	785b      	ldrb	r3, [r3, #1]
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fa79 	bl	80007d4 <change_dir>
	change_step(RxData[2]);
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	789b      	ldrb	r3, [r3, #2]
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 fa94 	bl	8000814 <change_step>
	cnt=0;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
	target = RxData[3];
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	78db      	ldrb	r3, [r3, #3]
 80002f6:	001a      	movs	r2, r3
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80002fa:	601a      	str	r2, [r3, #0]
	transmit2(target);
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	0018      	movs	r0, r3
 8000302:	f000 f80b 	bl	800031c <transmit2>
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b005      	add	sp, #20
 800030c:	bd90      	pop	{r4, r7, pc}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	2000011c 	.word	0x2000011c
 8000314:	20000004 	.word	0x20000004
 8000318:	20000000 	.word	0x20000000

0800031c <transmit2>:
	HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &TxMailbox); //Ajouter le message (avec en-tête) à l'une des mailbox (disponible).

	//HAL_CAN_AddTxMessage(&hcan, (uint8_t*)data, sizeof(data), 1000);

}
void transmit2(int msg) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	; 0x28
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	//Définition de l'en-tête de transmission:
		CAN_TxHeaderTypeDef txHeader;

		txHeader.DLC = 3; // taille des données à transmettre en octets
 8000324:	2110      	movs	r1, #16
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2203      	movs	r2, #3
 800032a:	611a      	str	r2, [r3, #16]
		txHeader.StdId = 0x324; //adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage
 800032c:	187b      	adds	r3, r7, r1
 800032e:	22c9      	movs	r2, #201	; 0xc9
 8000330:	0092      	lsls	r2, r2, #2
 8000332:	601a      	str	r2, [r3, #0]
		txHeader.IDE = CAN_ID_STD; //on choisit l'adressage standard
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
		txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
		txHeader.TransmitGlobalTime = DISABLE;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	751a      	strb	r2, [r3, #20]

		uint8_t data[3] = { 0x00, 0, msg }; // création du message
 8000346:	200c      	movs	r0, #12
 8000348:	183b      	adds	r3, r7, r0
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	183b      	adds	r3, r7, r0
 8000350:	2200      	movs	r2, #0
 8000352:	705a      	strb	r2, [r3, #1]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	183b      	adds	r3, r7, r0
 800035a:	709a      	strb	r2, [r3, #2]

		uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

		HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &TxMailbox); //Ajouter le message (avec en-tête) à l'une des mailbox (disponible).
 800035c:	2308      	movs	r3, #8
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	183a      	adds	r2, r7, r0
 8000362:	1879      	adds	r1, r7, r1
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <transmit2+0x58>)
 8000366:	f000 fec5 	bl	80010f4 <HAL_CAN_AddTxMessage>

		//HAL_CAN_AddTxMessage(&hcan, (uint8_t*)data, sizeof(data), 1000);


}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b00a      	add	sp, #40	; 0x28
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	2000007c 	.word	0x2000007c

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037c:	f000 fc20 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000380:	f000 f838 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000384:	f000 f9c4 	bl	8000710 <MX_GPIO_Init>
  MX_TIM14_Init();
 8000388:	f000 f8b8 	bl	80004fc <MX_TIM14_Init>
  MX_CAN_Init();
 800038c:	f000 f87e 	bl	800048c <MX_CAN_Init>
  MX_TIM15_Init();
 8000390:	f000 f906 	bl	80005a0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
	CAN_Config();
 8000394:	f7ff ff44 	bl	8000220 <CAN_Config>

	//start timer
	HAL_TIM_Base_Start_IT(&htim14);
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <main+0x74>)
 800039a:	0018      	movs	r0, r3
 800039c:	f002 faa2 	bl	80028e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <main+0x74>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	0018      	movs	r0, r3
 80003a6:	f002 fb47 	bl	8002a38 <HAL_TIM_PWM_Start>

	//HAL_TIM_Base_Start_IT(&htim15);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80003aa:	2390      	movs	r3, #144	; 0x90
 80003ac:	05db      	lsls	r3, r3, #23
 80003ae:	2200      	movs	r2, #0
 80003b0:	2120      	movs	r1, #32
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 fd2c 	bl	8001e10 <HAL_GPIO_WritePin>
	//Driver 1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	0099      	lsls	r1, r3, #2
 80003bc:	2390      	movs	r3, #144	; 0x90
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	2200      	movs	r2, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 fd24 	bl	8001e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	00d9      	lsls	r1, r3, #3
 80003cc:	2390      	movs	r3, #144	; 0x90
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	2200      	movs	r2, #0
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fd1c 	bl	8001e10 <HAL_GPIO_WritePin>

	TIM14->ARR = 1000;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <main+0x78>)
 80003da:	22fa      	movs	r2, #250	; 0xfa
 80003dc:	0092      	lsls	r2, r2, #2
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = 800;
 80003e0:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <main+0x78>)
 80003e2:	22c8      	movs	r2, #200	; 0xc8
 80003e4:	0092      	lsls	r2, r2, #2
 80003e6:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    //transmit();
    while (1)
 80003e8:	e7fe      	b.n	80003e8 <main+0x70>
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	200000bc 	.word	0x200000bc
 80003f0:	40002000 	.word	0x40002000

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b093      	sub	sp, #76	; 0x4c
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	2414      	movs	r4, #20
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2334      	movs	r3, #52	; 0x34
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f003 fad1 	bl	80039ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	0018      	movs	r0, r3
 800040e:	2310      	movs	r3, #16
 8000410:	001a      	movs	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f003 faca 	bl	80039ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000418:	0021      	movs	r1, r4
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2202      	movs	r2, #2
 800041e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2201      	movs	r2, #1
 8000424:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2210      	movs	r2, #16
 800042a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2202      	movs	r2, #2
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	0212      	lsls	r2, r2, #8
 8000438:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	0352      	lsls	r2, r2, #13
 8000440:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000448:	187b      	adds	r3, r7, r1
 800044a:	0018      	movs	r0, r3
 800044c:	f001 fd18 	bl	8001e80 <HAL_RCC_OscConfig>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000454:	f000 f9f0 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2207      	movs	r2, #7
 800045c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2202      	movs	r2, #2
 8000462:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2101      	movs	r1, #1
 8000474:	0018      	movs	r0, r3
 8000476:	f002 f889 	bl	800258c <HAL_RCC_ClockConfig>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800047e:	f000 f9db 	bl	8000838 <Error_Handler>
  }
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b013      	add	sp, #76	; 0x4c
 8000488:	bd90      	pop	{r4, r7, pc}
	...

0800048c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_CAN_Init+0x68>)
 8000492:	4a19      	ldr	r2, [pc, #100]	; (80004f8 <MX_CAN_Init+0x6c>)
 8000494:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <MX_CAN_Init+0x68>)
 8000498:	220c      	movs	r2, #12
 800049a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_CAN_Init+0x68>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_CAN_Init+0x68>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <MX_CAN_Init+0x68>)
 80004aa:	22e0      	movs	r2, #224	; 0xe0
 80004ac:	02d2      	lsls	r2, r2, #11
 80004ae:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_CAN_Init+0x68>)
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	0352      	lsls	r2, r2, #13
 80004b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004b8:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_CAN_Init+0x68>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <MX_CAN_Init+0x68>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_CAN_Init+0x68>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <MX_CAN_Init+0x68>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_CAN_Init+0x68>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <MX_CAN_Init+0x68>)
 80004d8:	2200      	movs	r2, #0
 80004da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <MX_CAN_Init+0x68>)
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fbd2 	bl	8000c88 <HAL_CAN_Init>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004e8:	f000 f9a6 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	2000007c 	.word	0x2000007c
 80004f8:	40006400 	.word	0x40006400

080004fc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	0018      	movs	r0, r3
 8000506:	231c      	movs	r3, #28
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f003 fa4e 	bl	80039ac <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000510:	4b20      	ldr	r3, [pc, #128]	; (8000594 <MX_TIM14_Init+0x98>)
 8000512:	4a21      	ldr	r2, [pc, #132]	; (8000598 <MX_TIM14_Init+0x9c>)
 8000514:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800;
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <MX_TIM14_Init+0x98>)
 8000518:	2296      	movs	r2, #150	; 0x96
 800051a:	0152      	lsls	r2, r2, #5
 800051c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_TIM14_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_TIM14_Init+0x98>)
 8000526:	4a1d      	ldr	r2, [pc, #116]	; (800059c <MX_TIM14_Init+0xa0>)
 8000528:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_TIM14_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_TIM14_Init+0x98>)
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <MX_TIM14_Init+0x98>)
 8000538:	0018      	movs	r0, r3
 800053a:	f002 f983 	bl	8002844 <HAL_TIM_Base_Init>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8000542:	f000 f979 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_TIM14_Init+0x98>)
 8000548:	0018      	movs	r0, r3
 800054a:	f002 fa1d 	bl	8002988 <HAL_TIM_PWM_Init>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8000552:	f000 f971 	bl	8000838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2270      	movs	r2, #112	; 0x70
 800055a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	22fa      	movs	r2, #250	; 0xfa
 8000560:	00d2      	lsls	r2, r2, #3
 8000562:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000570:	1d39      	adds	r1, r7, #4
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_TIM14_Init+0x98>)
 8000574:	2200      	movs	r2, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f002 fc2c 	bl	8002dd4 <HAL_TIM_PWM_ConfigChannel>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8000580:	f000 f95a 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <MX_TIM14_Init+0x98>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fa1c 	bl	80009c4 <HAL_TIM_MspPostInit>

}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b008      	add	sp, #32
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000bc 	.word	0x200000bc
 8000598:	40002000 	.word	0x40002000
 800059c:	00002710 	.word	0x00002710

080005a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b096      	sub	sp, #88	; 0x58
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a6:	2348      	movs	r3, #72	; 0x48
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	0018      	movs	r0, r3
 80005ac:	2310      	movs	r3, #16
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f003 f9fb 	bl	80039ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b6:	2340      	movs	r3, #64	; 0x40
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	2308      	movs	r3, #8
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 f9f3 	bl	80039ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c6:	2324      	movs	r3, #36	; 0x24
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	231c      	movs	r3, #28
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 f9eb 	bl	80039ac <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	2320      	movs	r3, #32
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f003 f9e4 	bl	80039ac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80005e4:	4b47      	ldr	r3, [pc, #284]	; (8000704 <MX_TIM15_Init+0x164>)
 80005e6:	4a48      	ldr	r2, [pc, #288]	; (8000708 <MX_TIM15_Init+0x168>)
 80005e8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4800;
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <MX_TIM15_Init+0x164>)
 80005ec:	2296      	movs	r2, #150	; 0x96
 80005ee:	0152      	lsls	r2, r2, #5
 80005f0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f2:	4b44      	ldr	r3, [pc, #272]	; (8000704 <MX_TIM15_Init+0x164>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <MX_TIM15_Init+0x164>)
 80005fa:	4a44      	ldr	r2, [pc, #272]	; (800070c <MX_TIM15_Init+0x16c>)
 80005fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <MX_TIM15_Init+0x164>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000604:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <MX_TIM15_Init+0x164>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060a:	4b3e      	ldr	r3, [pc, #248]	; (8000704 <MX_TIM15_Init+0x164>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000610:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <MX_TIM15_Init+0x164>)
 8000612:	0018      	movs	r0, r3
 8000614:	f002 f916 	bl	8002844 <HAL_TIM_Base_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM15_Init+0x80>
  {
    Error_Handler();
 800061c:	f000 f90c 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000620:	2148      	movs	r1, #72	; 0x48
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0152      	lsls	r2, r2, #5
 8000628:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800062a:	187a      	adds	r2, r7, r1
 800062c:	4b35      	ldr	r3, [pc, #212]	; (8000704 <MX_TIM15_Init+0x164>)
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fc95 	bl	8002f60 <HAL_TIM_ConfigClockSource>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800063a:	f000 f8fd 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <MX_TIM15_Init+0x164>)
 8000640:	0018      	movs	r0, r3
 8000642:	f002 f9a1 	bl	8002988 <HAL_TIM_PWM_Init>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_TIM15_Init+0xae>
  {
    Error_Handler();
 800064a:	f000 f8f5 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800065c:	187a      	adds	r2, r7, r1
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <MX_TIM15_Init+0x164>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f003 f8b2 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 800066c:	f000 f8e4 	bl	8000838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000670:	2124      	movs	r1, #36	; 0x24
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2260      	movs	r2, #96	; 0x60
 8000676:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	22fa      	movs	r2, #250	; 0xfa
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	1879      	adds	r1, r7, r1
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_TIM15_Init+0x164>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fb95 	bl	8002dd4 <HAL_TIM_PWM_ConfigChannel>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80006ae:	f000 f8c3 	bl	8000838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0192      	lsls	r2, r2, #6
 80006d6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_TIM15_Init+0x164>)
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f003 f8cf 	bl	8003888 <HAL_TIMEx_ConfigBreakDeadTime>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM15_Init+0x152>
  {
    Error_Handler();
 80006ee:	f000 f8a3 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <MX_TIM15_Init+0x164>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 f965 	bl	80009c4 <HAL_TIM_MspPostInit>

}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b016      	add	sp, #88	; 0x58
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000034 	.word	0x20000034
 8000708:	40014000 	.word	0x40014000
 800070c:	00002710 	.word	0x00002710

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	240c      	movs	r4, #12
 8000718:	193b      	adds	r3, r7, r4
 800071a:	0018      	movs	r0, r3
 800071c:	2314      	movs	r3, #20
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f003 f943 	bl	80039ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000728:	695a      	ldr	r2, [r3, #20]
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_GPIO_Init+0x90>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	03c9      	lsls	r1, r1, #15
 8000730:	430a      	orrs	r2, r1
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	03db      	lsls	r3, r3, #15
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0289      	lsls	r1, r1, #10
 800074c:	430a      	orrs	r2, r1
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	029b      	lsls	r3, r3, #10
 8000758:	4013      	ands	r3, r2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800075e:	23c4      	movs	r3, #196	; 0xc4
 8000760:	00d9      	lsls	r1, r3, #3
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2200      	movs	r2, #0
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fb51 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	22c4      	movs	r2, #196	; 0xc4
 8000772:	00d2      	lsls	r2, r2, #3
 8000774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2201      	movs	r2, #1
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2201      	movs	r2, #1
 8000780:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	193a      	adds	r2, r7, r4
 800078a:	2390      	movs	r3, #144	; 0x90
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f001 f9c5 	bl	8001b20 <HAL_GPIO_Init>

}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b009      	add	sp, #36	; 0x24
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <stop>:

/* USER CODE BEGIN 4 */
void stop(int s){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if (s==0){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d103      	bne.n	80007ba <stop+0x16>
		arret = 0;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <stop+0x2c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
	}
	else if (s==1){
		arret = 1;
	}
}
 80007b8:	e005      	b.n	80007c6 <stop+0x22>
	else if (s==1){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d102      	bne.n	80007c6 <stop+0x22>
		arret = 1;
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <stop+0x2c>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000030 	.word	0x20000030

080007d4 <change_dir>:

void change_dir(int dir){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if (dir==0){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d108      	bne.n	80007f4 <change_dir+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	0099      	lsls	r1, r3, #2
 80007e6:	2390      	movs	r3, #144	; 0x90
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	2200      	movs	r2, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fb0f 	bl	8001e10 <HAL_GPIO_WritePin>
	}
	else if (dir==1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
	}
}
 80007f2:	e00a      	b.n	800080a <change_dir+0x36>
	else if (dir==1){
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d107      	bne.n	800080a <change_dir+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	0099      	lsls	r1, r3, #2
 80007fe:	2390      	movs	r3, #144	; 0x90
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	2201      	movs	r2, #1
 8000804:	0018      	movs	r0, r3
 8000806:	f001 fb03 	bl	8001e10 <HAL_GPIO_WritePin>
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <change_step>:

void change_step(int f){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	TIM14->ARR = f;
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <change_step+0x1c>)
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM14->CCR1 = 3000;
	TIM15->ARR = f;
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <change_step+0x20>)
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM15->CCR1 = 100;
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40002000 	.word	0x40002000
 8000834:	40014000 	.word	0x40014000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x44>)
 800084c:	699a      	ldr	r2, [r3, #24]
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_MspInit+0x44>)
 8000850:	2101      	movs	r1, #1
 8000852:	430a      	orrs	r2, r1
 8000854:	619a      	str	r2, [r3, #24]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x44>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	2201      	movs	r2, #1
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x44>)
 8000864:	69da      	ldr	r2, [r3, #28]
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x44>)
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	0549      	lsls	r1, r1, #21
 800086c:	430a      	orrs	r2, r1
 800086e:	61da      	str	r2, [r3, #28]
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_MspInit+0x44>)
 8000872:	69da      	ldr	r2, [r3, #28]
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	055b      	lsls	r3, r3, #21
 8000878:	4013      	ands	r3, r2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b08b      	sub	sp, #44	; 0x2c
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	2414      	movs	r4, #20
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f003 f884 	bl	80039ac <memset>
  if(hcan->Instance==CAN)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <HAL_CAN_MspInit+0xa4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d13b      	bne.n	8000926 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008b0:	69da      	ldr	r2, [r3, #28]
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0489      	lsls	r1, r1, #18
 80008b8:	430a      	orrs	r2, r1
 80008ba:	61da      	str	r2, [r3, #28]
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008be:	69da      	ldr	r2, [r3, #28]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	049b      	lsls	r3, r3, #18
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008cc:	695a      	ldr	r2, [r3, #20]
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0289      	lsls	r1, r1, #10
 80008d4:	430a      	orrs	r2, r1
 80008d6:	615a      	str	r2, [r3, #20]
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_CAN_MspInit+0xa8>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	029b      	lsls	r3, r3, #10
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	22c0      	movs	r2, #192	; 0xc0
 80008ea:	0152      	lsls	r2, r2, #5
 80008ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	0021      	movs	r1, r4
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2202      	movs	r2, #2
 80008f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2203      	movs	r2, #3
 8000900:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2204      	movs	r2, #4
 8000906:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	187a      	adds	r2, r7, r1
 800090a:	2390      	movs	r3, #144	; 0x90
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	0011      	movs	r1, r2
 8000910:	0018      	movs	r0, r3
 8000912:	f001 f905 	bl	8001b20 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	201e      	movs	r0, #30
 800091c:	f001 f8ce 	bl	8001abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000920:	201e      	movs	r0, #30
 8000922:	f001 f8e0 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b00b      	add	sp, #44	; 0x2c
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40006400 	.word	0x40006400
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <HAL_TIM_Base_MspInit+0x80>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d116      	bne.n	8000978 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_TIM_Base_MspInit+0x84>)
 800094c:	69da      	ldr	r2, [r3, #28]
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_TIM_Base_MspInit+0x84>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	0049      	lsls	r1, r1, #1
 8000954:	430a      	orrs	r2, r1
 8000956:	61da      	str	r2, [r3, #28]
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_TIM_Base_MspInit+0x84>)
 800095a:	69da      	ldr	r2, [r3, #28]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2013      	movs	r0, #19
 800096c:	f001 f8a6 	bl	8001abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000970:	2013      	movs	r0, #19
 8000972:	f001 f8b8 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000976:	e01a      	b.n	80009ae <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM15)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_TIM_Base_MspInit+0x88>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d115      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_TIM_Base_MspInit+0x84>)
 8000984:	699a      	ldr	r2, [r3, #24]
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_TIM_Base_MspInit+0x84>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0249      	lsls	r1, r1, #9
 800098c:	430a      	orrs	r2, r1
 800098e:	619a      	str	r2, [r3, #24]
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_TIM_Base_MspInit+0x84>)
 8000992:	699a      	ldr	r2, [r3, #24]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	025b      	lsls	r3, r3, #9
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2014      	movs	r0, #20
 80009a4:	f001 f88a 	bl	8001abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80009a8:	2014      	movs	r0, #20
 80009aa:	f001 f89c 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b004      	add	sp, #16
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	40002000 	.word	0x40002000
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40014000 	.word	0x40014000

080009c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b08b      	sub	sp, #44	; 0x2c
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	2414      	movs	r4, #20
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	0018      	movs	r0, r3
 80009d2:	2314      	movs	r3, #20
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f002 ffe8 	bl	80039ac <memset>
  if(htim->Instance==TIM14)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <HAL_TIM_MspPostInit+0xcc>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d125      	bne.n	8000a32 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <HAL_TIM_MspPostInit+0xd0>)
 80009e8:	695a      	ldr	r2, [r3, #20]
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <HAL_TIM_MspPostInit+0xd0>)
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	0289      	lsls	r1, r1, #10
 80009f0:	430a      	orrs	r2, r1
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <HAL_TIM_MspPostInit+0xd0>)
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	029b      	lsls	r3, r3, #10
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a02:	0021      	movs	r1, r4
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2210      	movs	r2, #16
 8000a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2204      	movs	r2, #4
 8000a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	187a      	adds	r2, r7, r1
 8000a24:	2390      	movs	r3, #144	; 0x90
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 f878 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000a30:	e029      	b.n	8000a86 <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM15)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <HAL_TIM_MspPostInit+0xd4>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d124      	bne.n	8000a86 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_TIM_MspPostInit+0xd0>)
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_TIM_MspPostInit+0xd0>)
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	0289      	lsls	r1, r1, #10
 8000a46:	430a      	orrs	r2, r1
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_TIM_MspPostInit+0xd0>)
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	029b      	lsls	r3, r3, #10
 8000a52:	4013      	ands	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a58:	2114      	movs	r1, #20
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2202      	movs	r2, #2
 8000a64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	187a      	adds	r2, r7, r1
 8000a7a:	2390      	movs	r3, #144	; 0x90
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 f84d 	bl	8001b20 <HAL_GPIO_Init>
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b00b      	add	sp, #44	; 0x2c
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40002000 	.word	0x40002000
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40014000 	.word	0x40014000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f8c6 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <TIM14_IRQHandler+0x30>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 f868 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	00da      	lsls	r2, r3, #3
 8000adc:	2390      	movs	r3, #144	; 0x90
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f001 f9b1 	bl	8001e4a <HAL_GPIO_TogglePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000ae8:	2390      	movs	r3, #144	; 0x90
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	2201      	movs	r2, #1
 8000aee:	2110      	movs	r1, #16
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 f98d 	bl	8001e10 <HAL_GPIO_WritePin>
	  transmit2(cnt);
  }*/


  /* USER CODE END TIM14_IRQn 1 */
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000bc 	.word	0x200000bc

08000b00 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <TIM15_IRQHandler+0x3c>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 f84e 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b0c:	2390      	movs	r3, #144	; 0x90
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2120      	movs	r1, #32
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 f999 	bl	8001e4a <HAL_GPIO_TogglePin>
  //transmit2(cnt);
  if (cnt<=target){
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <TIM15_IRQHandler+0x40>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <TIM15_IRQHandler+0x44>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dc05      	bgt.n	8000b30 <TIM15_IRQHandler+0x30>
	  cnt++;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <TIM15_IRQHandler+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <TIM15_IRQHandler+0x40>)
 8000b2c:	601a      	str	r2, [r3, #0]
  else{
	  stop(0);
  }

  /* USER CODE END TIM15_IRQn 1 */
}
 8000b2e:	e002      	b.n	8000b36 <TIM15_IRQHandler+0x36>
	  stop(0);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fe37 	bl	80007a4 <stop>
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000034 	.word	0x20000034
 8000b40:	20000004 	.word	0x20000004
 8000b44:	20000000 	.word	0x20000000

08000b48 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <CEC_CAN_IRQHandler+0x14>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fcf4 	bl	800153c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	2000007c 	.word	0x2000007c

08000b60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	; (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b96:	f7ff ffe3 	bl	8000b60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b9a:	f002 fee3 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff fbeb 	bl	8000378 <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   r0, =_estack
 8000ba4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bb0:	08003a0c 	.word	0x08003a0c
  ldr r2, =_sbss
 8000bb4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bb8:	2000013c 	.word	0x2000013c

08000bbc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_COMP_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_Init+0x24>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_Init+0x24>)
 8000bca:	2110      	movs	r1, #16
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f809 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd6:	f7ff fe35 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_InitTick+0x5c>)
 8000bf2:	681c      	ldr	r4, [r3, #0]
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_InitTick+0x60>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	23fa      	movs	r3, #250	; 0xfa
 8000bfc:	0098      	lsls	r0, r3, #2
 8000bfe:	f7ff fa83 	bl	8000108 <__udivsi3>
 8000c02:	0003      	movs	r3, r0
 8000c04:	0019      	movs	r1, r3
 8000c06:	0020      	movs	r0, r4
 8000c08:	f7ff fa7e 	bl	8000108 <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 ff79 	bl	8001b06 <HAL_SYSTICK_Config>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e00f      	b.n	8000c3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d80b      	bhi.n	8000c3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 ff46 	bl	8001abc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_InitTick+0x64>)
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b003      	add	sp, #12
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000010 	.word	0x20000010
 8000c4c:	2000000c 	.word	0x2000000c

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	18d2      	adds	r2, r2, r3
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_IncTick+0x20>)
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000010 	.word	0x20000010
 8000c70:	20000138 	.word	0x20000138

08000c74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000138 	.word	0x20000138

08000c88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e0f0      	b.n	8000e7c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff fdef 	bl	800088c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cbe:	f7ff ffd9 	bl	8000c74 <HAL_GetTick>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cc6:	e013      	b.n	8000cf0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc8:	f7ff ffd4 	bl	8000c74 <HAL_GetTick>
 8000ccc:	0002      	movs	r2, r0
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d90c      	bls.n	8000cf0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	0292      	lsls	r2, r2, #10
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	2105      	movs	r1, #5
 8000cea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e0c5      	b.n	8000e7c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d0e5      	beq.n	8000cc8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2102      	movs	r1, #2
 8000d08:	438a      	bics	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d0c:	f7ff ffb2 	bl	8000c74 <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d14:	e013      	b.n	8000d3e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d16:	f7ff ffad 	bl	8000c74 <HAL_GetTick>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b0a      	cmp	r3, #10
 8000d22:	d90c      	bls.n	8000d3e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0292      	lsls	r2, r2, #10
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2220      	movs	r2, #32
 8000d36:	2105      	movs	r1, #5
 8000d38:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e09e      	b.n	8000e7c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2202      	movs	r2, #2
 8000d46:	4013      	ands	r3, r2
 8000d48:	d1e5      	bne.n	8000d16 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7e1b      	ldrb	r3, [r3, #24]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d108      	bne.n	8000d64 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e007      	b.n	8000d74 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	438a      	bics	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7e5b      	ldrb	r3, [r3, #25]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2140      	movs	r1, #64	; 0x40
 8000d9a:	438a      	bics	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7e9b      	ldrb	r3, [r3, #26]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d108      	bne.n	8000db8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2120      	movs	r1, #32
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	438a      	bics	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7edb      	ldrb	r3, [r3, #27]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2110      	movs	r1, #16
 8000ddc:	438a      	bics	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2110      	movs	r1, #16
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7f1b      	ldrb	r3, [r3, #28]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2108      	movs	r1, #8
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2108      	movs	r1, #8
 8000e18:	438a      	bics	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7f5b      	ldrb	r3, [r3, #29]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d108      	bne.n	8000e36 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2104      	movs	r1, #4
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e007      	b.n	8000e46 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2104      	movs	r1, #4
 8000e42:	438a      	bics	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	1e5a      	subs	r2, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2220      	movs	r2, #32
 8000e76:	2101      	movs	r1, #1
 8000e78:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e94:	2013      	movs	r0, #19
 8000e96:	183b      	adds	r3, r7, r0
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	5c52      	ldrb	r2, [r2, r1]
 8000e9e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	18bb      	adds	r3, r7, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d004      	beq.n	8000eb4 <HAL_CAN_ConfigFilter+0x30>
 8000eaa:	18bb      	adds	r3, r7, r2
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d000      	beq.n	8000eb4 <HAL_CAN_ConfigFilter+0x30>
 8000eb2:	e0cd      	b.n	8001050 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	58d3      	ldr	r3, [r2, r3]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	221f      	movs	r2, #31
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	2387      	movs	r3, #135	; 0x87
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	58d3      	ldr	r3, [r2, r3]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	43d2      	mvns	r2, r2
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	0011      	movs	r1, r2
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	2387      	movs	r3, #135	; 0x87
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d129      	bne.n	8000f4e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	2383      	movs	r3, #131	; 0x83
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	58d3      	ldr	r3, [r2, r3]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	43d2      	mvns	r2, r2
 8000f06:	401a      	ands	r2, r3
 8000f08:	0011      	movs	r1, r2
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	2383      	movs	r3, #131	; 0x83
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f24:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3248      	adds	r2, #72	; 0x48
 8000f2a:	00d2      	lsls	r2, r2, #3
 8000f2c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	041b      	lsls	r3, r3, #16
 8000f3a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f42:	6979      	ldr	r1, [r7, #20]
 8000f44:	3348      	adds	r3, #72	; 0x48
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	18cb      	adds	r3, r1, r3
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d128      	bne.n	8000fa8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	2383      	movs	r3, #131	; 0x83
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	58d2      	ldr	r2, [r2, r3]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	0011      	movs	r1, r2
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	2383      	movs	r3, #131	; 0x83
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f7e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3248      	adds	r2, #72	; 0x48
 8000f84:	00d2      	lsls	r2, r2, #3
 8000f86:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	041b      	lsls	r3, r3, #16
 8000f94:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f9c:	6979      	ldr	r1, [r7, #20]
 8000f9e:	3348      	adds	r3, #72	; 0x48
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	18cb      	adds	r3, r1, r3
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10c      	bne.n	8000fca <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	2381      	movs	r3, #129	; 0x81
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	58d3      	ldr	r3, [r2, r3]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	43d2      	mvns	r2, r2
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	2381      	movs	r3, #129	; 0x81
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	50d1      	str	r1, [r2, r3]
 8000fc8:	e00a      	b.n	8000fe0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	2381      	movs	r3, #129	; 0x81
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	58d2      	ldr	r2, [r2, r3]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	2381      	movs	r3, #129	; 0x81
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10c      	bne.n	8001002 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	2385      	movs	r3, #133	; 0x85
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	58d3      	ldr	r3, [r2, r3]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	43d2      	mvns	r2, r2
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	2385      	movs	r3, #133	; 0x85
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	50d1      	str	r1, [r2, r3]
 8001000:	e00a      	b.n	8001018 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	2385      	movs	r3, #133	; 0x85
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	58d2      	ldr	r2, [r2, r3]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	431a      	orrs	r2, r3
 800100e:	0011      	movs	r1, r2
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	2385      	movs	r3, #133	; 0x85
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d10a      	bne.n	8001036 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	2387      	movs	r3, #135	; 0x87
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	58d2      	ldr	r2, [r2, r3]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	431a      	orrs	r2, r3
 800102c:	0011      	movs	r1, r2
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	2387      	movs	r3, #135	; 0x87
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	58d3      	ldr	r3, [r2, r3]
 800103e:	2201      	movs	r2, #1
 8001040:	4393      	bics	r3, r2
 8001042:	0019      	movs	r1, r3
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	e007      	b.n	8001060 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	02d2      	lsls	r2, r2, #11
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
  }
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b006      	add	sp, #24
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d12f      	bne.n	80010dc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	2102      	movs	r1, #2
 8001082:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2101      	movs	r1, #1
 8001090:	438a      	bics	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001094:	f7ff fdee 	bl	8000c74 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800109c:	e013      	b.n	80010c6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800109e:	f7ff fde9 	bl	8000c74 <HAL_GetTick>
 80010a2:	0002      	movs	r2, r0
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b0a      	cmp	r3, #10
 80010aa:	d90c      	bls.n	80010c6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0292      	lsls	r2, r2, #10
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2220      	movs	r2, #32
 80010be:	2105      	movs	r1, #5
 80010c0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e012      	b.n	80010ec <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	4013      	ands	r3, r2
 80010d0:	d1e5      	bne.n	800109e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	e007      	b.n	80010ec <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	0312      	lsls	r2, r2, #12
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
  }
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b004      	add	sp, #16
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001102:	201f      	movs	r0, #31
 8001104:	183b      	adds	r3, r7, r0
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	2120      	movs	r1, #32
 800110a:	5c52      	ldrb	r2, [r2, r1]
 800110c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001116:	183b      	adds	r3, r7, r0
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d004      	beq.n	8001128 <HAL_CAN_AddTxMessage+0x34>
 800111e:	183b      	adds	r3, r7, r0
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d000      	beq.n	8001128 <HAL_CAN_AddTxMessage+0x34>
 8001126:	e0b7      	b.n	8001298 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	04db      	lsls	r3, r3, #19
 800112e:	4013      	ands	r3, r2
 8001130:	d10a      	bne.n	8001148 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	051b      	lsls	r3, r3, #20
 8001138:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800113a:	d105      	bne.n	8001148 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	055b      	lsls	r3, r3, #21
 8001142:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001144:	d100      	bne.n	8001148 <HAL_CAN_AddTxMessage+0x54>
 8001146:	e09e      	b.n	8001286 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	0e1b      	lsrs	r3, r3, #24
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
 8001150:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d908      	bls.n	800116a <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	0412      	lsls	r2, r2, #16
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e09e      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10c      	bne.n	8001196 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4311      	orrs	r1, r2
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	3218      	adds	r2, #24
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	50d1      	str	r1, [r2, r3]
 8001194:	e00f      	b.n	80011b6 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a0:	431a      	orrs	r2, r3
 80011a2:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80011ac:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	3218      	adds	r2, #24
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3318      	adds	r3, #24
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	18cb      	adds	r3, r1, r3
 80011c6:	3304      	adds	r3, #4
 80011c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	7d1b      	ldrb	r3, [r3, #20]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d112      	bne.n	80011f8 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3318      	adds	r3, #24
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	18d3      	adds	r3, r2, r3
 80011de:	3304      	adds	r3, #4
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3318      	adds	r3, #24
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	18cb      	adds	r3, r1, r3
 80011f4:	3304      	adds	r3, #4
 80011f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3307      	adds	r3, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	061a      	lsls	r2, r3, #24
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3306      	adds	r3, #6
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3305      	adds	r3, #5
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3304      	adds	r3, #4
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0019      	movs	r1, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	6979      	ldr	r1, [r7, #20]
 8001224:	23c6      	movs	r3, #198	; 0xc6
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	0109      	lsls	r1, r1, #4
 800122a:	1841      	adds	r1, r0, r1
 800122c:	18cb      	adds	r3, r1, r3
 800122e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3303      	adds	r3, #3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	061a      	lsls	r2, r3, #24
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3302      	adds	r3, #2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	041b      	lsls	r3, r3, #16
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3301      	adds	r3, #1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	0019      	movs	r1, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	6979      	ldr	r1, [r7, #20]
 800125a:	23c4      	movs	r3, #196	; 0xc4
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	0109      	lsls	r1, r1, #4
 8001260:	1841      	adds	r1, r0, r1
 8001262:	18cb      	adds	r3, r1, r3
 8001264:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	3218      	adds	r2, #24
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	58d2      	ldr	r2, [r2, r3]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2101      	movs	r1, #1
 8001278:	4311      	orrs	r1, r2
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	3218      	adds	r2, #24
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e010      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	0392      	lsls	r2, r2, #14
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e007      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	02d2      	lsls	r2, r2, #11
 80012a0:	431a      	orrs	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
  }
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b008      	add	sp, #32
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012be:	2017      	movs	r0, #23
 80012c0:	183b      	adds	r3, r7, r0
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	2120      	movs	r1, #32
 80012c6:	5c52      	ldrb	r2, [r2, r1]
 80012c8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012ca:	0002      	movs	r2, r0
 80012cc:	18bb      	adds	r3, r7, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d004      	beq.n	80012de <HAL_CAN_GetRxMessage+0x2e>
 80012d4:	18bb      	adds	r3, r7, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d000      	beq.n	80012de <HAL_CAN_GetRxMessage+0x2e>
 80012dc:	e0f8      	b.n	80014d0 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10e      	bne.n	8001302 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2203      	movs	r2, #3
 80012ec:	4013      	ands	r3, r2
 80012ee:	d117      	bne.n	8001320 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	0392      	lsls	r2, r2, #14
 80012f8:	431a      	orrs	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0ee      	b.n	80014e0 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
 800130c:	d108      	bne.n	8001320 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	0392      	lsls	r2, r2, #14
 8001316:	431a      	orrs	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0df      	b.n	80014e0 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	321b      	adds	r2, #27
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	58d3      	ldr	r3, [r2, r3]
 800132c:	2204      	movs	r2, #4
 800132e:	401a      	ands	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10b      	bne.n	8001354 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	321b      	adds	r2, #27
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	58d3      	ldr	r3, [r2, r3]
 8001348:	0d5b      	lsrs	r3, r3, #21
 800134a:	055b      	lsls	r3, r3, #21
 800134c:	0d5a      	lsrs	r2, r3, #21
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e00a      	b.n	800136a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	321b      	adds	r2, #27
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	58d3      	ldr	r3, [r2, r3]
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	321b      	adds	r2, #27
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	58d3      	ldr	r3, [r2, r3]
 8001376:	2202      	movs	r2, #2
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	331b      	adds	r3, #27
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	18d3      	adds	r3, r2, r3
 800138a:	3304      	adds	r3, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	220f      	movs	r2, #15
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	331b      	adds	r3, #27
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	3304      	adds	r3, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	22ff      	movs	r2, #255	; 0xff
 80013aa:	401a      	ands	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	331b      	adds	r3, #27
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	18d3      	adds	r3, r2, r3
 80013bc:	3304      	adds	r3, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0c1b      	lsrs	r3, r3, #16
 80013c2:	041b      	lsls	r3, r3, #16
 80013c4:	0c1a      	lsrs	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	23dc      	movs	r3, #220	; 0xdc
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	188a      	adds	r2, r1, r2
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6819      	ldr	r1, [r3, #0]
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	23dc      	movs	r3, #220	; 0xdc
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	188a      	adds	r2, r1, r2
 80013f0:	18d3      	adds	r3, r2, r3
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0a1a      	lsrs	r2, r3, #8
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	23dc      	movs	r3, #220	; 0xdc
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	188a      	adds	r2, r1, r2
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0c1a      	lsrs	r2, r3, #16
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	3302      	adds	r3, #2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	23dc      	movs	r3, #220	; 0xdc
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	188a      	adds	r2, r1, r2
 8001428:	18d3      	adds	r3, r2, r3
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	0e1a      	lsrs	r2, r3, #24
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3303      	adds	r3, #3
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6819      	ldr	r1, [r3, #0]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	23de      	movs	r3, #222	; 0xde
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	188a      	adds	r2, r1, r2
 8001444:	18d3      	adds	r3, r2, r3
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3304      	adds	r3, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	23de      	movs	r3, #222	; 0xde
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	188a      	adds	r2, r1, r2
 800145e:	18d3      	adds	r3, r2, r3
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0a1a      	lsrs	r2, r3, #8
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3305      	adds	r3, #5
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	23de      	movs	r3, #222	; 0xde
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	188a      	adds	r2, r1, r2
 800147a:	18d3      	adds	r3, r2, r3
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0c1a      	lsrs	r2, r3, #16
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3306      	adds	r3, #6
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6819      	ldr	r1, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	23de      	movs	r3, #222	; 0xde
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	188a      	adds	r2, r1, r2
 8001496:	18d3      	adds	r3, r2, r3
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0e1a      	lsrs	r2, r3, #24
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3307      	adds	r3, #7
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d108      	bne.n	80014bc <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2120      	movs	r1, #32
 80014b6:	430a      	orrs	r2, r1
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	e007      	b.n	80014cc <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2120      	movs	r1, #32
 80014c8:	430a      	orrs	r2, r1
 80014ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e007      	b.n	80014e0 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	02d2      	lsls	r2, r2, #11
 80014d8:	431a      	orrs	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
  }
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b006      	add	sp, #24
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f2:	200f      	movs	r0, #15
 80014f4:	183b      	adds	r3, r7, r0
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	2120      	movs	r1, #32
 80014fa:	5c52      	ldrb	r2, [r2, r1]
 80014fc:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014fe:	0002      	movs	r2, r0
 8001500:	18bb      	adds	r3, r7, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d003      	beq.n	8001510 <HAL_CAN_ActivateNotification+0x28>
 8001508:	18bb      	adds	r3, r7, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d109      	bne.n	8001524 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6959      	ldr	r1, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	e007      	b.n	8001534 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	02d2      	lsls	r2, r2, #11
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
  }
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	2201      	movs	r2, #1
 800157c:	4013      	ands	r3, r2
 800157e:	d100      	bne.n	8001582 <HAL_CAN_IRQHandler+0x46>
 8001580:	e084      	b.n	800168c <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	d024      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2201      	movs	r2, #1
 8001590:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d004      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	0018      	movs	r0, r3
 800159e:	f000 f981 	bl	80018a4 <HAL_CAN_TxMailbox0CompleteCallback>
 80015a2:	e017      	b.n	80015d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d005      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	4313      	orrs	r3, r2
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	e00d      	b.n	80015d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2208      	movs	r2, #8
 80015bc:	4013      	ands	r3, r2
 80015be:	d005      	beq.n	80015cc <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	0152      	lsls	r2, r2, #5
 80015c6:	4313      	orrs	r3, r2
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ca:	e003      	b.n	80015d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 f980 	bl	80018d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	d028      	beq.n	8001630 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0052      	lsls	r2, r2, #1
 80015e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d004      	beq.n	80015fc <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 f95d 	bl	80018b4 <HAL_CAN_TxMailbox1CompleteCallback>
 80015fa:	e019      	b.n	8001630 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4013      	ands	r3, r2
 8001604:	d005      	beq.n	8001612 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	0192      	lsls	r2, r2, #6
 800160c:	4313      	orrs	r3, r2
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
 8001610:	e00e      	b.n	8001630 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4013      	ands	r3, r2
 800161a:	d005      	beq.n	8001628 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	01d2      	lsls	r2, r2, #7
 8001622:	4313      	orrs	r3, r2
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	e003      	b.n	8001630 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	0018      	movs	r0, r3
 800162c:	f000 f95a 	bl	80018e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	4013      	ands	r3, r2
 8001638:	d028      	beq.n	800168c <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	0252      	lsls	r2, r2, #9
 8001642:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	029b      	lsls	r3, r3, #10
 800164a:	4013      	ands	r3, r2
 800164c:	d004      	beq.n	8001658 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0018      	movs	r0, r3
 8001652:	f000 f937 	bl	80018c4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001656:	e019      	b.n	800168c <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	02db      	lsls	r3, r3, #11
 800165e:	4013      	ands	r3, r2
 8001660:	d005      	beq.n	800166e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	0212      	lsls	r2, r2, #8
 8001668:	4313      	orrs	r3, r2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
 800166c:	e00e      	b.n	800168c <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	031b      	lsls	r3, r3, #12
 8001674:	4013      	ands	r3, r2
 8001676:	d005      	beq.n	8001684 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	0252      	lsls	r2, r2, #9
 800167e:	4313      	orrs	r3, r2
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	e003      	b.n	800168c <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	0018      	movs	r0, r3
 8001688:	f000 f934 	bl	80018f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	2208      	movs	r2, #8
 8001690:	4013      	ands	r3, r2
 8001692:	d00c      	beq.n	80016ae <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2210      	movs	r2, #16
 8001698:	4013      	ands	r3, r2
 800169a:	d008      	beq.n	80016ae <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4313      	orrs	r3, r2
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2210      	movs	r2, #16
 80016ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	2204      	movs	r2, #4
 80016b2:	4013      	ands	r3, r2
 80016b4:	d00b      	beq.n	80016ce <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2208      	movs	r2, #8
 80016ba:	4013      	ands	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2208      	movs	r2, #8
 80016c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 f91b 	bl	8001904 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	2202      	movs	r2, #2
 80016d2:	4013      	ands	r3, r2
 80016d4:	d009      	beq.n	80016ea <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2203      	movs	r2, #3
 80016de:	4013      	ands	r3, r2
 80016e0:	d003      	beq.n	80016ea <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7fe fde7 	bl	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	2240      	movs	r2, #64	; 0x40
 80016ee:	4013      	ands	r3, r2
 80016f0:	d00c      	beq.n	800170c <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2210      	movs	r2, #16
 80016f6:	4013      	ands	r3, r2
 80016f8:	d008      	beq.n	800170c <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	00d2      	lsls	r2, r2, #3
 8001700:	4313      	orrs	r3, r2
 8001702:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2210      	movs	r2, #16
 800170a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	2220      	movs	r2, #32
 8001710:	4013      	ands	r3, r2
 8001712:	d00b      	beq.n	800172c <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2208      	movs	r2, #8
 8001718:	4013      	ands	r3, r2
 800171a:	d007      	beq.n	800172c <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2208      	movs	r2, #8
 8001722:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 f8fc 	bl	8001924 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	2210      	movs	r2, #16
 8001730:	4013      	ands	r3, r2
 8001732:	d009      	beq.n	8001748 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2203      	movs	r2, #3
 800173c:	4013      	ands	r3, r2
 800173e:	d003      	beq.n	8001748 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	0018      	movs	r0, r3
 8001744:	f000 f8e6 	bl	8001914 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001748:	6a3a      	ldr	r2, [r7, #32]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	029b      	lsls	r3, r3, #10
 800174e:	4013      	ands	r3, r2
 8001750:	d00b      	beq.n	800176a <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	2210      	movs	r2, #16
 8001756:	4013      	ands	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2210      	movs	r2, #16
 8001760:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	0018      	movs	r0, r3
 8001766:	f000 f8e5 	bl	8001934 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800176a:	6a3a      	ldr	r2, [r7, #32]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	4013      	ands	r3, r2
 8001772:	d00b      	beq.n	800178c <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2208      	movs	r2, #8
 8001778:	4013      	ands	r3, r2
 800177a:	d007      	beq.n	800178c <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2208      	movs	r2, #8
 8001782:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	0018      	movs	r0, r3
 8001788:	f000 f8dc 	bl	8001944 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800178c:	6a3a      	ldr	r2, [r7, #32]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	4013      	ands	r3, r2
 8001794:	d100      	bne.n	8001798 <HAL_CAN_IRQHandler+0x25c>
 8001796:	e074      	b.n	8001882 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2204      	movs	r2, #4
 800179c:	4013      	ands	r3, r2
 800179e:	d100      	bne.n	80017a2 <HAL_CAN_IRQHandler+0x266>
 80017a0:	e06b      	b.n	800187a <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017a2:	6a3a      	ldr	r2, [r7, #32]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017b2:	d003      	beq.n	80017bc <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	2201      	movs	r2, #1
 80017b8:	4313      	orrs	r3, r2
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017bc:	6a3a      	ldr	r2, [r7, #32]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4013      	ands	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017cc:	d003      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	2202      	movs	r2, #2
 80017d2:	4313      	orrs	r3, r2
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017d6:	6a3a      	ldr	r2, [r7, #32]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2204      	movs	r2, #4
 80017e4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017e6:	d003      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	2204      	movs	r2, #4
 80017ec:	4313      	orrs	r3, r2
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017f0:	6a3a      	ldr	r2, [r7, #32]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4013      	ands	r3, r2
 80017f8:	d03f      	beq.n	800187a <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2270      	movs	r2, #112	; 0x70
 80017fe:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001800:	d03b      	beq.n	800187a <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2270      	movs	r2, #112	; 0x70
 8001806:	4013      	ands	r3, r2
 8001808:	2b60      	cmp	r3, #96	; 0x60
 800180a:	d027      	beq.n	800185c <HAL_CAN_IRQHandler+0x320>
 800180c:	d82c      	bhi.n	8001868 <HAL_CAN_IRQHandler+0x32c>
 800180e:	2b50      	cmp	r3, #80	; 0x50
 8001810:	d01f      	beq.n	8001852 <HAL_CAN_IRQHandler+0x316>
 8001812:	d829      	bhi.n	8001868 <HAL_CAN_IRQHandler+0x32c>
 8001814:	2b40      	cmp	r3, #64	; 0x40
 8001816:	d017      	beq.n	8001848 <HAL_CAN_IRQHandler+0x30c>
 8001818:	d826      	bhi.n	8001868 <HAL_CAN_IRQHandler+0x32c>
 800181a:	2b30      	cmp	r3, #48	; 0x30
 800181c:	d00f      	beq.n	800183e <HAL_CAN_IRQHandler+0x302>
 800181e:	d823      	bhi.n	8001868 <HAL_CAN_IRQHandler+0x32c>
 8001820:	2b10      	cmp	r3, #16
 8001822:	d002      	beq.n	800182a <HAL_CAN_IRQHandler+0x2ee>
 8001824:	2b20      	cmp	r3, #32
 8001826:	d005      	beq.n	8001834 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001828:	e01e      	b.n	8001868 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	2208      	movs	r2, #8
 800182e:	4313      	orrs	r3, r2
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001832:	e01a      	b.n	800186a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	2210      	movs	r2, #16
 8001838:	4313      	orrs	r3, r2
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800183c:	e015      	b.n	800186a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	2220      	movs	r2, #32
 8001842:	4313      	orrs	r3, r2
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001846:	e010      	b.n	800186a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	2240      	movs	r2, #64	; 0x40
 800184c:	4313      	orrs	r3, r2
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001850:	e00b      	b.n	800186a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	4313      	orrs	r3, r2
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800185a:	e006      	b.n	800186a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	0052      	lsls	r2, r2, #1
 8001862:	4313      	orrs	r3, r2
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001866:	e000      	b.n	800186a <HAL_CAN_IRQHandler+0x32e>
            break;
 8001868:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2170      	movs	r1, #112	; 0x70
 8001876:	438a      	bics	r2, r1
 8001878:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2204      	movs	r2, #4
 8001880:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0018      	movs	r0, r3
 8001898:	f000 f85c 	bl	8001954 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b00a      	add	sp, #40	; 0x28
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	0002      	movs	r2, r0
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b7f      	cmp	r3, #127	; 0x7f
 8001976:	d809      	bhi.n	800198c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001978:	1dfb      	adds	r3, r7, #7
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	001a      	movs	r2, r3
 800197e:	231f      	movs	r3, #31
 8001980:	401a      	ands	r2, r3
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_EnableIRQ+0x30>)
 8001984:	2101      	movs	r1, #1
 8001986:	4091      	lsls	r1, r2
 8001988:	000a      	movs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
  }
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	0002      	movs	r2, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b7f      	cmp	r3, #127	; 0x7f
 80019ac:	d828      	bhi.n	8001a00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ae:	4a2f      	ldr	r2, [pc, #188]	; (8001a6c <__NVIC_SetPriority+0xd4>)
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	33c0      	adds	r3, #192	; 0xc0
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	589b      	ldr	r3, [r3, r2]
 80019be:	1dfa      	adds	r2, r7, #7
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	0011      	movs	r1, r2
 80019c4:	2203      	movs	r2, #3
 80019c6:	400a      	ands	r2, r1
 80019c8:	00d2      	lsls	r2, r2, #3
 80019ca:	21ff      	movs	r1, #255	; 0xff
 80019cc:	4091      	lsls	r1, r2
 80019ce:	000a      	movs	r2, r1
 80019d0:	43d2      	mvns	r2, r2
 80019d2:	401a      	ands	r2, r3
 80019d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	22ff      	movs	r2, #255	; 0xff
 80019dc:	401a      	ands	r2, r3
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	0018      	movs	r0, r3
 80019e4:	2303      	movs	r3, #3
 80019e6:	4003      	ands	r3, r0
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ec:	481f      	ldr	r0, [pc, #124]	; (8001a6c <__NVIC_SetPriority+0xd4>)
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	430a      	orrs	r2, r1
 80019f8:	33c0      	adds	r3, #192	; 0xc0
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019fe:	e031      	b.n	8001a64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <__NVIC_SetPriority+0xd8>)
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	0019      	movs	r1, r3
 8001a08:	230f      	movs	r3, #15
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	3b08      	subs	r3, #8
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3306      	adds	r3, #6
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	3304      	adds	r3, #4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	1dfa      	adds	r2, r7, #7
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	0011      	movs	r1, r2
 8001a20:	2203      	movs	r2, #3
 8001a22:	400a      	ands	r2, r1
 8001a24:	00d2      	lsls	r2, r2, #3
 8001a26:	21ff      	movs	r1, #255	; 0xff
 8001a28:	4091      	lsls	r1, r2
 8001a2a:	000a      	movs	r2, r1
 8001a2c:	43d2      	mvns	r2, r2
 8001a2e:	401a      	ands	r2, r3
 8001a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	019b      	lsls	r3, r3, #6
 8001a36:	22ff      	movs	r2, #255	; 0xff
 8001a38:	401a      	ands	r2, r3
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	2303      	movs	r3, #3
 8001a42:	4003      	ands	r3, r0
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a48:	4809      	ldr	r0, [pc, #36]	; (8001a70 <__NVIC_SetPriority+0xd8>)
 8001a4a:	1dfb      	adds	r3, r7, #7
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	001c      	movs	r4, r3
 8001a50:	230f      	movs	r3, #15
 8001a52:	4023      	ands	r3, r4
 8001a54:	3b08      	subs	r3, #8
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	3306      	adds	r3, #6
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	18c3      	adds	r3, r0, r3
 8001a60:	3304      	adds	r3, #4
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b003      	add	sp, #12
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	1e5a      	subs	r2, r3, #1
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	045b      	lsls	r3, r3, #17
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d301      	bcc.n	8001a8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e010      	b.n	8001aae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <SysTick_Config+0x44>)
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	3a01      	subs	r2, #1
 8001a92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a94:	2301      	movs	r3, #1
 8001a96:	425b      	negs	r3, r3
 8001a98:	2103      	movs	r1, #3
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7ff ff7c 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x44>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x44>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	1c02      	adds	r2, r0, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	0002      	movs	r2, r0
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7ff ff33 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff ffaf 	bl	8001a74 <SysTick_Config>
 8001b16:	0003      	movs	r3, r0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e155      	b.n	8001ddc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4091      	lsls	r1, r2
 8001b3a:	000a      	movs	r2, r1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d100      	bne.n	8001b48 <HAL_GPIO_Init+0x28>
 8001b46:	e146      	b.n	8001dd6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	43da      	mvns	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	409a      	lsls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	2201      	movs	r2, #1
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	43da      	mvns	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2203      	movs	r2, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	58d3      	ldr	r3, [r2, r3]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2107      	movs	r1, #7
 8001c36:	400b      	ands	r3, r1
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	6939      	ldr	r1, [r7, #16]
 8001c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	401a      	ands	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	23c0      	movs	r3, #192	; 0xc0
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d100      	bne.n	8001c94 <HAL_GPIO_Init+0x174>
 8001c92:	e0a0      	b.n	8001dd6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	4b56      	ldr	r3, [pc, #344]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	619a      	str	r2, [r3, #24]
 8001ca0:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	589b      	ldr	r3, [r3, r2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	2390      	movs	r3, #144	; 0x90
 8001cd4:	05db      	lsls	r3, r3, #23
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d019      	beq.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a47      	ldr	r2, [pc, #284]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x1ea>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a46      	ldr	r2, [pc, #280]	; (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x1e6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a45      	ldr	r2, [pc, #276]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a44      	ldr	r2, [pc, #272]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x1de>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e008      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001d02:	2303      	movs	r3, #3
 8001d04:	e004      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	2103      	movs	r1, #3
 8001d14:	400a      	ands	r2, r1
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43da      	mvns	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	025b      	lsls	r3, r3, #9
 8001d46:	4013      	ands	r3, r2
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	035b      	lsls	r3, r3, #13
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	039b      	lsls	r3, r3, #14
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	40da      	lsrs	r2, r3
 8001de4:	1e13      	subs	r3, r2, #0
 8001de6:	d000      	beq.n	8001dea <HAL_GPIO_Init+0x2ca>
 8001de8:	e6a2      	b.n	8001b30 <HAL_GPIO_Init+0x10>
  } 
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b006      	add	sp, #24
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	48000800 	.word	0x48000800
 8001e04:	48000c00 	.word	0x48000c00
 8001e08:	48001000 	.word	0x48001000
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	0008      	movs	r0, r1
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	1cbb      	adds	r3, r7, #2
 8001e1e:	1c02      	adds	r2, r0, #0
 8001e20:	801a      	strh	r2, [r3, #0]
 8001e22:	1c7b      	adds	r3, r7, #1
 8001e24:	1c0a      	adds	r2, r1, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e28:	1c7b      	adds	r3, r7, #1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e30:	1cbb      	adds	r3, r7, #2
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3a:	1cbb      	adds	r3, r7, #2
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	000a      	movs	r2, r1
 8001e54:	1cbb      	adds	r3, r7, #2
 8001e56:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5e:	1cbb      	adds	r3, r7, #2
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	1cb9      	adds	r1, r7, #2
 8001e6e:	8809      	ldrh	r1, [r1, #0]
 8001e70:	400b      	ands	r3, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b004      	add	sp, #16
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f000 fb76 	bl	8002580 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d100      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x20>
 8001e9e:	e08e      	b.n	8001fbe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ea0:	4bc5      	ldr	r3, [pc, #788]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d00e      	beq.n	8001eca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eac:	4bc2      	ldr	r3, [pc, #776]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	220c      	movs	r2, #12
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d117      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x68>
 8001eb8:	4bbf      	ldr	r3, [pc, #764]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	23c0      	movs	r3, #192	; 0xc0
 8001ebe:	025b      	lsls	r3, r3, #9
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	4bbb      	ldr	r3, [pc, #748]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	029b      	lsls	r3, r3, #10
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x58>
 8001ed6:	e071      	b.n	8001fbc <HAL_RCC_OscConfig+0x13c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d000      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x62>
 8001ee0:	e06c      	b.n	8001fbc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f000 fb4c 	bl	8002580 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_OscConfig+0x80>
 8001ef0:	4bb1      	ldr	r3, [pc, #708]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4bb0      	ldr	r3, [pc, #704]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	0249      	lsls	r1, r1, #9
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e02f      	b.n	8001f60 <HAL_RCC_OscConfig+0xe0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0xa2>
 8001f08:	4bab      	ldr	r3, [pc, #684]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4baa      	ldr	r3, [pc, #680]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f0e:	49ab      	ldr	r1, [pc, #684]	; (80021bc <HAL_RCC_OscConfig+0x33c>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	4ba8      	ldr	r3, [pc, #672]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4ba7      	ldr	r3, [pc, #668]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f1a:	49a9      	ldr	r1, [pc, #676]	; (80021c0 <HAL_RCC_OscConfig+0x340>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e01e      	b.n	8001f60 <HAL_RCC_OscConfig+0xe0>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d10e      	bne.n	8001f48 <HAL_RCC_OscConfig+0xc8>
 8001f2a:	4ba3      	ldr	r3, [pc, #652]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4ba2      	ldr	r3, [pc, #648]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	02c9      	lsls	r1, r1, #11
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	4b9f      	ldr	r3, [pc, #636]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	0249      	lsls	r1, r1, #9
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0xe0>
 8001f48:	4b9b      	ldr	r3, [pc, #620]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b9a      	ldr	r3, [pc, #616]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	499b      	ldr	r1, [pc, #620]	; (80021bc <HAL_RCC_OscConfig+0x33c>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	4b98      	ldr	r3, [pc, #608]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b97      	ldr	r3, [pc, #604]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	4999      	ldr	r1, [pc, #612]	; (80021c0 <HAL_RCC_OscConfig+0x340>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d014      	beq.n	8001f92 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fe84 	bl	8000c74 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f72:	f7fe fe7f 	bl	8000c74 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b64      	cmp	r3, #100	; 0x64
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e2fd      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f84:	4b8c      	ldr	r3, [pc, #560]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	029b      	lsls	r3, r3, #10
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0xf2>
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fe6f 	bl	8000c74 <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7fe fe6a 	bl	8000c74 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e2e8      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fae:	4b82      	ldr	r3, [pc, #520]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	029b      	lsls	r3, r3, #10
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x11c>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d100      	bne.n	8001fca <HAL_RCC_OscConfig+0x14a>
 8001fc8:	e06c      	b.n	80020a4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fca:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	220c      	movs	r2, #12
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fd4:	4b78      	ldr	r3, [pc, #480]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	220c      	movs	r2, #12
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d11f      	bne.n	8002020 <HAL_RCC_OscConfig+0x1a0>
 8001fe0:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	025b      	lsls	r3, r3, #9
 8001fe8:	401a      	ands	r2, r3
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b71      	ldr	r3, [pc, #452]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x188>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e2bb      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	22f8      	movs	r2, #248	; 0xf8
 800200e:	4393      	bics	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00da      	lsls	r2, r3, #3
 8002018:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e041      	b.n	80020a4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d024      	beq.n	8002072 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800202e:	2101      	movs	r1, #1
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fe1e 	bl	8000c74 <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203e:	f7fe fe19 	bl	8000c74 <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e297      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d0f1      	beq.n	800203e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	22f8      	movs	r2, #248	; 0xf8
 8002060:	4393      	bics	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00da      	lsls	r2, r3, #3
 800206a:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e018      	b.n	80020a4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002078:	2101      	movs	r1, #1
 800207a:	438a      	bics	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe fdf9 	bl	8000c74 <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002088:	f7fe fdf4 	bl	8000c74 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e272      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d1f1      	bne.n	8002088 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2208      	movs	r2, #8
 80020aa:	4013      	ands	r3, r2
 80020ac:	d036      	beq.n	800211c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d019      	beq.n	80020ea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ba:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020bc:	2101      	movs	r1, #1
 80020be:	430a      	orrs	r2, r1
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fdd7 	bl	8000c74 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020cc:	f7fe fdd2 	bl	8000c74 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e250      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d0f1      	beq.n	80020cc <HAL_RCC_OscConfig+0x24c>
 80020e8:	e018      	b.n	800211c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	438a      	bics	r2, r1
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7fe fdbd 	bl	8000c74 <HAL_GetTick>
 80020fa:	0003      	movs	r3, r0
 80020fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7fe fdb8 	bl	8000c74 <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e236      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d1f1      	bne.n	8002100 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2204      	movs	r2, #4
 8002122:	4013      	ands	r3, r2
 8002124:	d100      	bne.n	8002128 <HAL_RCC_OscConfig+0x2a8>
 8002126:	e0b5      	b.n	8002294 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002128:	201f      	movs	r0, #31
 800212a:	183b      	adds	r3, r7, r0
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	055b      	lsls	r3, r3, #21
 8002138:	4013      	ands	r3, r2
 800213a:	d110      	bne.n	800215e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 8002142:	2180      	movs	r1, #128	; 0x80
 8002144:	0549      	lsls	r1, r1, #21
 8002146:	430a      	orrs	r2, r1
 8002148:	61da      	str	r2, [r3, #28]
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	055b      	lsls	r3, r3, #21
 8002152:	4013      	ands	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002158:	183b      	adds	r3, r7, r0
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_OscConfig+0x344>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d11a      	bne.n	80021a0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_RCC_OscConfig+0x344>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x344>)
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	0049      	lsls	r1, r1, #1
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002178:	f7fe fd7c 	bl	8000c74 <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7fe fd77 	bl	8000c74 <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e1f5      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x344>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4013      	ands	r3, r2
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10f      	bne.n	80021c8 <HAL_RCC_OscConfig+0x348>
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80021aa:	6a1a      	ldr	r2, [r3, #32]
 80021ac:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <HAL_RCC_OscConfig+0x338>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	621a      	str	r2, [r3, #32]
 80021b4:	e036      	b.n	8002224 <HAL_RCC_OscConfig+0x3a4>
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	40021000 	.word	0x40021000
 80021bc:	fffeffff 	.word	0xfffeffff
 80021c0:	fffbffff 	.word	0xfffbffff
 80021c4:	40007000 	.word	0x40007000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x36a>
 80021d0:	4bca      	ldr	r3, [pc, #808]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	4bc9      	ldr	r3, [pc, #804]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	438a      	bics	r2, r1
 80021da:	621a      	str	r2, [r3, #32]
 80021dc:	4bc7      	ldr	r3, [pc, #796]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	4bc6      	ldr	r3, [pc, #792]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80021e2:	2104      	movs	r1, #4
 80021e4:	438a      	bics	r2, r1
 80021e6:	621a      	str	r2, [r3, #32]
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x3a4>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x38c>
 80021f2:	4bc2      	ldr	r3, [pc, #776]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	4bc1      	ldr	r3, [pc, #772]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80021f8:	2104      	movs	r1, #4
 80021fa:	430a      	orrs	r2, r1
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	4bbf      	ldr	r3, [pc, #764]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	4bbe      	ldr	r3, [pc, #760]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002204:	2101      	movs	r1, #1
 8002206:	430a      	orrs	r2, r1
 8002208:	621a      	str	r2, [r3, #32]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x3a4>
 800220c:	4bbb      	ldr	r3, [pc, #748]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800220e:	6a1a      	ldr	r2, [r3, #32]
 8002210:	4bba      	ldr	r3, [pc, #744]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002212:	2101      	movs	r1, #1
 8002214:	438a      	bics	r2, r1
 8002216:	621a      	str	r2, [r3, #32]
 8002218:	4bb8      	ldr	r3, [pc, #736]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	4bb7      	ldr	r3, [pc, #732]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800221e:	2104      	movs	r1, #4
 8002220:	438a      	bics	r2, r1
 8002222:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d014      	beq.n	8002256 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7fe fd22 	bl	8000c74 <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e009      	b.n	800224a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe fd1d 	bl	8000c74 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	4aaf      	ldr	r2, [pc, #700]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e19a      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4bac      	ldr	r3, [pc, #688]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x3b6>
 8002254:	e013      	b.n	800227e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe fd0d 	bl	8000c74 <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e009      	b.n	8002274 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe fd08 	bl	8000c74 <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	4aa5      	ldr	r2, [pc, #660]	; (8002500 <HAL_RCC_OscConfig+0x680>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e185      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	4ba1      	ldr	r3, [pc, #644]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800227e:	231f      	movs	r3, #31
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b9c      	ldr	r3, [pc, #624]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	4b9b      	ldr	r3, [pc, #620]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800228e:	499d      	ldr	r1, [pc, #628]	; (8002504 <HAL_RCC_OscConfig+0x684>)
 8002290:	400a      	ands	r2, r1
 8002292:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2210      	movs	r2, #16
 800229a:	4013      	ands	r3, r2
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12a      	bne.n	80022fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022a6:	4b95      	ldr	r3, [pc, #596]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80022a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022aa:	4b94      	ldr	r3, [pc, #592]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80022ac:	2104      	movs	r1, #4
 80022ae:	430a      	orrs	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022b2:	4b92      	ldr	r3, [pc, #584]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80022b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b6:	4b91      	ldr	r3, [pc, #580]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe fcd9 	bl	8000c74 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022c8:	f7fe fcd4 	bl	8000c74 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e152      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022da:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d0f1      	beq.n	80022c8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022e4:	4b85      	ldr	r3, [pc, #532]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	22f8      	movs	r2, #248	; 0xf8
 80022ea:	4393      	bics	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	00da      	lsls	r2, r3, #3
 80022f4:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80022f6:	430a      	orrs	r2, r1
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
 80022fa:	e034      	b.n	8002366 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	3305      	adds	r3, #5
 8002302:	d111      	bne.n	8002328 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002304:	4b7d      	ldr	r3, [pc, #500]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002308:	4b7c      	ldr	r3, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800230a:	2104      	movs	r1, #4
 800230c:	438a      	bics	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002310:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	22f8      	movs	r2, #248	; 0xf8
 8002316:	4393      	bics	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	00da      	lsls	r2, r3, #3
 8002320:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
 8002326:	e01e      	b.n	8002366 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002328:	4b74      	ldr	r3, [pc, #464]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800232a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800232c:	4b73      	ldr	r3, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800232e:	2104      	movs	r1, #4
 8002330:	430a      	orrs	r2, r1
 8002332:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002334:	4b71      	ldr	r3, [pc, #452]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002338:	4b70      	ldr	r3, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800233a:	2101      	movs	r1, #1
 800233c:	438a      	bics	r2, r1
 800233e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7fe fc98 	bl	8000c74 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800234a:	f7fe fc93 	bl	8000c74 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e111      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800235c:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d1f1      	bne.n	800234a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2220      	movs	r2, #32
 800236c:	4013      	ands	r3, r2
 800236e:	d05c      	beq.n	800242a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002370:	4b62      	ldr	r3, [pc, #392]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	220c      	movs	r2, #12
 8002376:	4013      	ands	r3, r2
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d00e      	beq.n	800239a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800237c:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	220c      	movs	r2, #12
 8002382:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002384:	2b08      	cmp	r3, #8
 8002386:	d114      	bne.n	80023b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	23c0      	movs	r3, #192	; 0xc0
 800238e:	025b      	lsls	r3, r3, #9
 8002390:	401a      	ands	r2, r3
 8002392:	23c0      	movs	r3, #192	; 0xc0
 8002394:	025b      	lsls	r3, r3, #9
 8002396:	429a      	cmp	r2, r3
 8002398:	d10b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800239a:	4b58      	ldr	r3, [pc, #352]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800239c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	025b      	lsls	r3, r3, #9
 80023a2:	4013      	ands	r3, r2
 80023a4:	d040      	beq.n	8002428 <HAL_RCC_OscConfig+0x5a8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d03c      	beq.n	8002428 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0e6      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01b      	beq.n	80023f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80023ba:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80023bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023be:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	0249      	lsls	r1, r1, #9
 80023c4:	430a      	orrs	r2, r1
 80023c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fc54 	bl	8000c74 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d2:	f7fe fc4f 	bl	8000c74 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0cd      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80023e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	4013      	ands	r3, r2
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x552>
 80023f0:	e01b      	b.n	800242a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023f2:	4b42      	ldr	r3, [pc, #264]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80023f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80023f8:	4943      	ldr	r1, [pc, #268]	; (8002508 <HAL_RCC_OscConfig+0x688>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe fc39 	bl	8000c74 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002408:	f7fe fc34 	bl	8000c74 <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0b2      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800241a:	4b38      	ldr	r3, [pc, #224]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800241c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	025b      	lsls	r3, r3, #9
 8002422:	4013      	ands	r3, r2
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x588>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002428:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	2b00      	cmp	r3, #0
 8002430:	d100      	bne.n	8002434 <HAL_RCC_OscConfig+0x5b4>
 8002432:	e0a4      	b.n	800257e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002434:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	220c      	movs	r2, #12
 800243a:	4013      	ands	r3, r2
 800243c:	2b08      	cmp	r3, #8
 800243e:	d100      	bne.n	8002442 <HAL_RCC_OscConfig+0x5c2>
 8002440:	e078      	b.n	8002534 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b02      	cmp	r3, #2
 8002448:	d14c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002450:	492e      	ldr	r1, [pc, #184]	; (800250c <HAL_RCC_OscConfig+0x68c>)
 8002452:	400a      	ands	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe fc0d 	bl	8000c74 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fc08 	bl	8000c74 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e086      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	049b      	lsls	r3, r3, #18
 800247a:	4013      	ands	r3, r2
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	220f      	movs	r2, #15
 8002484:	4393      	bics	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 800248e:	430a      	orrs	r2, r1
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <HAL_RCC_OscConfig+0x690>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	431a      	orrs	r2, r3
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0449      	lsls	r1, r1, #17
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fbdb 	bl	8000c74 <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fbd6 	bl	8000c74 <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e054      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	049b      	lsls	r3, r3, #18
 80024de:	4013      	ands	r3, r2
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x644>
 80024e2:	e04c      	b.n	800257e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <HAL_RCC_OscConfig+0x67c>)
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x68c>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fbc0 	bl	8000c74 <HAL_GetTick>
 80024f4:	0003      	movs	r3, r0
 80024f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	e015      	b.n	8002526 <HAL_RCC_OscConfig+0x6a6>
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	40021000 	.word	0x40021000
 8002500:	00001388 	.word	0x00001388
 8002504:	efffffff 	.word	0xefffffff
 8002508:	fffeffff 	.word	0xfffeffff
 800250c:	feffffff 	.word	0xfeffffff
 8002510:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fbae 	bl	8000c74 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e02c      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_RCC_OscConfig+0x708>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	049b      	lsls	r3, r3, #18
 800252e:	4013      	ands	r3, r2
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x694>
 8002532:	e024      	b.n	800257e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e01f      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_RCC_OscConfig+0x708>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_RCC_OscConfig+0x708>)
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	429a      	cmp	r2, r3
 800255a:	d10e      	bne.n	800257a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	220f      	movs	r2, #15
 8002560:	401a      	ands	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d107      	bne.n	800257a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	23f0      	movs	r3, #240	; 0xf0
 800256e:	039b      	lsls	r3, r3, #14
 8002570:	401a      	ands	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b008      	add	sp, #32
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0bf      	b.n	8002720 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_ClockConfig+0x19c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2201      	movs	r2, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d911      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_RCC_ClockConfig+0x19c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2201      	movs	r2, #1
 80025b4:	4393      	bics	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <HAL_RCC_ClockConfig+0x19c>)
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	4b59      	ldr	r3, [pc, #356]	; (8002728 <HAL_RCC_ClockConfig+0x19c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0a6      	b.n	8002720 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2202      	movs	r2, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d015      	beq.n	8002608 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2204      	movs	r2, #4
 80025e2:	4013      	ands	r3, r2
 80025e4:	d006      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025e6:	4b51      	ldr	r3, [pc, #324]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 80025ec:	21e0      	movs	r1, #224	; 0xe0
 80025ee:	00c9      	lsls	r1, r1, #3
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b4d      	ldr	r3, [pc, #308]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	22f0      	movs	r2, #240	; 0xf0
 80025fa:	4393      	bics	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d04c      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b44      	ldr	r3, [pc, #272]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	029b      	lsls	r3, r3, #10
 8002622:	4013      	ands	r3, r2
 8002624:	d120      	bne.n	8002668 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07a      	b.n	8002720 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	049b      	lsls	r3, r3, #18
 800263a:	4013      	ands	r3, r2
 800263c:	d114      	bne.n	8002668 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06e      	b.n	8002720 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 800264c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	025b      	lsls	r3, r3, #9
 8002652:	4013      	ands	r3, r2
 8002654:	d108      	bne.n	8002668 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e062      	b.n	8002720 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2202      	movs	r2, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e05b      	b.n	8002720 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	4393      	bics	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7fe fafa 	bl	8000c74 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002684:	e009      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002686:	f7fe faf5 	bl	8000c74 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_RCC_ClockConfig+0x1a4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e042      	b.n	8002720 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	220c      	movs	r2, #12
 80026a0:	401a      	ands	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1ec      	bne.n	8002686 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_RCC_ClockConfig+0x19c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2201      	movs	r2, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d211      	bcs.n	80026de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_RCC_ClockConfig+0x19c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	4393      	bics	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCC_ClockConfig+0x19c>)
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_RCC_ClockConfig+0x19c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d001      	beq.n	80026de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e020      	b.n	8002720 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2204      	movs	r2, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_RCC_ClockConfig+0x1a8>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026fc:	f000 f820 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8002700:	0001      	movs	r1, r0
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCC_ClockConfig+0x1a0>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	220f      	movs	r2, #15
 800270a:	4013      	ands	r3, r2
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x1ac>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	000a      	movs	r2, r1
 8002712:	40da      	lsrs	r2, r3
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 8002716:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002718:	2003      	movs	r0, #3
 800271a:	f7fe fa65 	bl	8000be8 <HAL_InitTick>
  
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b004      	add	sp, #16
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	00001388 	.word	0x00001388
 8002734:	fffff8ff 	.word	0xfffff8ff
 8002738:	080039f4 	.word	0x080039f4
 800273c:	20000008 	.word	0x20000008

08002740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b08f      	sub	sp, #60	; 0x3c
 8002744:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002746:	2314      	movs	r3, #20
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	4a38      	ldr	r2, [pc, #224]	; (800282c <HAL_RCC_GetSysClockFreq+0xec>)
 800274c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800274e:	c313      	stmia	r3!, {r0, r1, r4}
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	4a36      	ldr	r2, [pc, #216]	; (8002830 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002758:	ca13      	ldmia	r2!, {r0, r1, r4}
 800275a:	c313      	stmia	r3!, {r0, r1, r4}
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
 8002768:	2300      	movs	r3, #0
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002774:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	220c      	movs	r2, #12
 800277e:	4013      	ands	r3, r2
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d047      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0xd4>
 8002784:	d849      	bhi.n	800281a <HAL_RCC_GetSysClockFreq+0xda>
 8002786:	2b04      	cmp	r3, #4
 8002788:	d002      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x50>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d003      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x56>
 800278e:	e044      	b.n	800281a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002794:	e044      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	0c9b      	lsrs	r3, r3, #18
 800279a:	220f      	movs	r2, #15
 800279c:	4013      	ands	r3, r2
 800279e:	2214      	movs	r2, #20
 80027a0:	18ba      	adds	r2, r7, r2
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_RCC_GetSysClockFreq+0xf4>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	220f      	movs	r2, #15
 80027ac:	4013      	ands	r3, r2
 80027ae:	1d3a      	adds	r2, r7, #4
 80027b0:	5cd3      	ldrb	r3, [r2, r3]
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b6:	23c0      	movs	r3, #192	; 0xc0
 80027b8:	025b      	lsls	r3, r3, #9
 80027ba:	401a      	ands	r2, r3
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	025b      	lsls	r3, r3, #9
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d109      	bne.n	80027d8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c6:	481c      	ldr	r0, [pc, #112]	; (8002838 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c8:	f7fd fc9e 	bl	8000108 <__udivsi3>
 80027cc:	0003      	movs	r3, r0
 80027ce:	001a      	movs	r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	4353      	muls	r3, r2
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
 80027d6:	e01a      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80027d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027da:	23c0      	movs	r3, #192	; 0xc0
 80027dc:	025b      	lsls	r3, r3, #9
 80027de:	401a      	ands	r2, r3
 80027e0:	23c0      	movs	r3, #192	; 0xc0
 80027e2:	025b      	lsls	r3, r3, #9
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d109      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ea:	4814      	ldr	r0, [pc, #80]	; (800283c <HAL_RCC_GetSysClockFreq+0xfc>)
 80027ec:	f7fd fc8c 	bl	8000108 <__udivsi3>
 80027f0:	0003      	movs	r3, r0
 80027f2:	001a      	movs	r2, r3
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	4353      	muls	r3, r2
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
 80027fa:	e008      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027fe:	4810      	ldr	r0, [pc, #64]	; (8002840 <HAL_RCC_GetSysClockFreq+0x100>)
 8002800:	f7fd fc82 	bl	8000108 <__udivsi3>
 8002804:	0003      	movs	r3, r0
 8002806:	001a      	movs	r2, r3
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	4353      	muls	r3, r2
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002812:	e005      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002818:	e002      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_GetSysClockFreq+0x100>)
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800281e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b00f      	add	sp, #60	; 0x3c
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	080039d4 	.word	0x080039d4
 8002830:	080039e4 	.word	0x080039e4
 8002834:	40021000 	.word	0x40021000
 8002838:	01e84800 	.word	0x01e84800
 800283c:	02dc6c00 	.word	0x02dc6c00
 8002840:	007a1200 	.word	0x007a1200

08002844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e042      	b.n	80028dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	223d      	movs	r2, #61	; 0x3d
 800285a:	5c9b      	ldrb	r3, [r3, r2]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223c      	movs	r2, #60	; 0x3c
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f7fe f863 	bl	8000938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	223d      	movs	r2, #61	; 0x3d
 8002876:	2102      	movs	r1, #2
 8002878:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	0019      	movs	r1, r3
 8002884:	0010      	movs	r0, r2
 8002886:	f000 fc67 	bl	8003158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2246      	movs	r2, #70	; 0x46
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	223e      	movs	r2, #62	; 0x3e
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	223f      	movs	r2, #63	; 0x3f
 800289e:	2101      	movs	r1, #1
 80028a0:	5499      	strb	r1, [r3, r2]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2241      	movs	r2, #65	; 0x41
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2242      	movs	r2, #66	; 0x42
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2243      	movs	r2, #67	; 0x43
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2244      	movs	r2, #68	; 0x44
 80028c6:	2101      	movs	r1, #1
 80028c8:	5499      	strb	r1, [r3, r2]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2245      	movs	r2, #69	; 0x45
 80028ce:	2101      	movs	r1, #1
 80028d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	223d      	movs	r2, #61	; 0x3d
 80028d6:	2101      	movs	r1, #1
 80028d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	223d      	movs	r2, #61	; 0x3d
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d001      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e03b      	b.n	8002974 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	223d      	movs	r2, #61	; 0x3d
 8002900:	2102      	movs	r1, #2
 8002902:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2101      	movs	r1, #1
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_TIM_Base_Start_IT+0x98>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00f      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x5a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	429a      	cmp	r2, r3
 8002928:	d009      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x5a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a14      	ldr	r2, [pc, #80]	; (8002980 <HAL_TIM_Base_Start_IT+0x9c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x5a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a12      	ldr	r2, [pc, #72]	; (8002984 <HAL_TIM_Base_Start_IT+0xa0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d111      	bne.n	8002962 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2207      	movs	r2, #7
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d010      	beq.n	8002972 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002960:	e007      	b.n	8002972 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b004      	add	sp, #16
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400
 8002984:	40014000 	.word	0x40014000

08002988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e042      	b.n	8002a20 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	223d      	movs	r2, #61	; 0x3d
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	223c      	movs	r2, #60	; 0x3c
 80029aa:	2100      	movs	r1, #0
 80029ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 f839 	bl	8002a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	223d      	movs	r2, #61	; 0x3d
 80029ba:	2102      	movs	r1, #2
 80029bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	0019      	movs	r1, r3
 80029c8:	0010      	movs	r0, r2
 80029ca:	f000 fbc5 	bl	8003158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2246      	movs	r2, #70	; 0x46
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	223e      	movs	r2, #62	; 0x3e
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223f      	movs	r2, #63	; 0x3f
 80029e2:	2101      	movs	r1, #1
 80029e4:	5499      	strb	r1, [r3, r2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2240      	movs	r2, #64	; 0x40
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2241      	movs	r2, #65	; 0x41
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2242      	movs	r2, #66	; 0x42
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2243      	movs	r2, #67	; 0x43
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2244      	movs	r2, #68	; 0x44
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2245      	movs	r2, #69	; 0x45
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	223d      	movs	r2, #61	; 0x3d
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d108      	bne.n	8002a5a <HAL_TIM_PWM_Start+0x22>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	223e      	movs	r2, #62	; 0x3e
 8002a4c:	5c9b      	ldrb	r3, [r3, r2]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	4193      	sbcs	r3, r2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	e01f      	b.n	8002a9a <HAL_TIM_PWM_Start+0x62>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d108      	bne.n	8002a72 <HAL_TIM_PWM_Start+0x3a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	223f      	movs	r2, #63	; 0x3f
 8002a64:	5c9b      	ldrb	r3, [r3, r2]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	1e5a      	subs	r2, r3, #1
 8002a6c:	4193      	sbcs	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	e013      	b.n	8002a9a <HAL_TIM_PWM_Start+0x62>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d108      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x52>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	4193      	sbcs	r3, r2
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e007      	b.n	8002a9a <HAL_TIM_PWM_Start+0x62>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2241      	movs	r2, #65	; 0x41
 8002a8e:	5c9b      	ldrb	r3, [r3, r2]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	4193      	sbcs	r3, r2
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e074      	b.n	8002b8c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x7a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	223e      	movs	r2, #62	; 0x3e
 8002aac:	2102      	movs	r1, #2
 8002aae:	5499      	strb	r1, [r3, r2]
 8002ab0:	e013      	b.n	8002ada <HAL_TIM_PWM_Start+0xa2>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0x8a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	223f      	movs	r2, #63	; 0x3f
 8002abc:	2102      	movs	r1, #2
 8002abe:	5499      	strb	r1, [r3, r2]
 8002ac0:	e00b      	b.n	8002ada <HAL_TIM_PWM_Start+0xa2>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d104      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0x9a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	2102      	movs	r1, #2
 8002ace:	5499      	strb	r1, [r3, r2]
 8002ad0:	e003      	b.n	8002ada <HAL_TIM_PWM_Start+0xa2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2241      	movs	r2, #65	; 0x41
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 fe4e 	bl	8003784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <HAL_TIM_PWM_Start+0x15c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <HAL_TIM_PWM_Start+0xd8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a28      	ldr	r2, [pc, #160]	; (8002b98 <HAL_TIM_PWM_Start+0x160>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_TIM_PWM_Start+0xd8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <HAL_TIM_PWM_Start+0x164>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <HAL_TIM_PWM_Start+0xd8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <HAL_TIM_PWM_Start+0x168>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_TIM_PWM_Start+0xdc>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_TIM_PWM_Start+0xde>
 8002b14:	2300      	movs	r3, #0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0209      	lsls	r1, r1, #8
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_TIM_PWM_Start+0x15c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00f      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x11e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	05db      	lsls	r3, r3, #23
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d009      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x11e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_TIM_PWM_Start+0x16c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x11e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <HAL_TIM_PWM_Start+0x160>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d111      	bne.n	8002b7a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d010      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2101      	movs	r1, #1
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	e007      	b.n	8002b8a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b004      	add	sp, #16
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800
 8002ba4:	40000400 	.word	0x40000400

08002ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d124      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11d      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	4252      	negs	r2, r2
 8002bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2203      	movs	r2, #3
 8002be4:	4013      	ands	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 fa9c 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e007      	b.n	8002c02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fa8f 	bl	8003118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 fa9b 	bl	8003138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d125      	bne.n	8002c62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11e      	bne.n	8002c62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2205      	movs	r2, #5
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	23c0      	movs	r3, #192	; 0xc0
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 fa6f 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002c4a:	e007      	b.n	8002c5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fa62 	bl	8003118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 fa6e 	bl	8003138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d124      	bne.n	8002cba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2208      	movs	r2, #8
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11d      	bne.n	8002cba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2209      	movs	r2, #9
 8002c84:	4252      	negs	r2, r2
 8002c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2203      	movs	r2, #3
 8002c96:	4013      	ands	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 fa43 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002ca2:	e007      	b.n	8002cb4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 fa36 	bl	8003118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 fa42 	bl	8003138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d125      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2210      	movs	r2, #16
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d11e      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2211      	movs	r2, #17
 8002cdc:	4252      	negs	r2, r2
 8002cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	23c0      	movs	r3, #192	; 0xc0
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 fa16 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e007      	b.n	8002d0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 fa09 	bl	8003118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 fa15 	bl	8003138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10f      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d108      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2202      	movs	r2, #2
 8002d36:	4252      	negs	r2, r2
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 f9e3 	bl	8003108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b80      	cmp	r3, #128	; 0x80
 8002d4e:	d10f      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b80      	cmp	r3, #128	; 0x80
 8002d5c:	d108      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2281      	movs	r2, #129	; 0x81
 8002d64:	4252      	negs	r2, r2
 8002d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 fdf2 	bl	8003954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d10f      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2240      	movs	r2, #64	; 0x40
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d108      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2241      	movs	r2, #65	; 0x41
 8002d92:	4252      	negs	r2, r2
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 f9d5 	bl	8003148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2220      	movs	r2, #32
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d10f      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d108      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2221      	movs	r2, #33	; 0x21
 8002dc0:	4252      	negs	r2, r2
 8002dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 fdbc 	bl	8003944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2317      	movs	r3, #23
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	223c      	movs	r2, #60	; 0x3c
 8002dec:	5c9b      	ldrb	r3, [r3, r2]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0ad      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	223c      	movs	r2, #60	; 0x3c
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d100      	bne.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e04:	e076      	b.n	8002ef4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d900      	bls.n	8002e0e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002e0c:	e095      	b.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d04e      	beq.n	8002eb2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d900      	bls.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x48>
 8002e1a:	e08e      	b.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d021      	beq.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002e28:	e087      	b.n	8002f3a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 fa10 	bl	8003258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2108      	movs	r1, #8
 8002e44:	430a      	orrs	r2, r1
 8002e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2104      	movs	r1, #4
 8002e54:	438a      	bics	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	619a      	str	r2, [r3, #24]
      break;
 8002e6a:	e06b      	b.n	8002f44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	0011      	movs	r1, r2
 8002e74:	0018      	movs	r0, r3
 8002e76:	f000 fa77 	bl	8003368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	0109      	lsls	r1, r1, #4
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4931      	ldr	r1, [pc, #196]	; (8002f5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6999      	ldr	r1, [r3, #24]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	619a      	str	r2, [r3, #24]
      break;
 8002eb0:	e048      	b.n	8002f44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	0011      	movs	r1, r2
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fad8 	bl	8003470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2108      	movs	r1, #8
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2104      	movs	r1, #4
 8002edc:	438a      	bics	r2, r1
 8002ede:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69d9      	ldr	r1, [r3, #28]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	61da      	str	r2, [r3, #28]
      break;
 8002ef2:	e027      	b.n	8002f44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	0011      	movs	r1, r2
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 fb3d 	bl	800357c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	0109      	lsls	r1, r1, #4
 8002f10:	430a      	orrs	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	490f      	ldr	r1, [pc, #60]	; (8002f5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f20:	400a      	ands	r2, r1
 8002f22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69d9      	ldr	r1, [r3, #28]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	021a      	lsls	r2, r3, #8
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	61da      	str	r2, [r3, #28]
      break;
 8002f38:	e004      	b.n	8002f44 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002f3a:	2317      	movs	r3, #23
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
      break;
 8002f42:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	223c      	movs	r2, #60	; 0x3c
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5499      	strb	r1, [r3, r2]

  return status;
 8002f4c:	2317      	movs	r3, #23
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	781b      	ldrb	r3, [r3, #0]
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b006      	add	sp, #24
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	fffffbff 	.word	0xfffffbff

08002f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	230f      	movs	r3, #15
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	223c      	movs	r2, #60	; 0x3c
 8002f76:	5c9b      	ldrb	r3, [r3, r2]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x20>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0bc      	b.n	80030fa <HAL_TIM_ConfigClockSource+0x19a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	223c      	movs	r2, #60	; 0x3c
 8002f84:	2101      	movs	r1, #1
 8002f86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	223d      	movs	r2, #61	; 0x3d
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2277      	movs	r2, #119	; 0x77
 8002f9c:	4393      	bics	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	0192      	lsls	r2, r2, #6
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d040      	beq.n	800303e <HAL_TIM_ConfigClockSource+0xde>
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	0192      	lsls	r2, r2, #6
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d900      	bls.n	8002fc6 <HAL_TIM_ConfigClockSource+0x66>
 8002fc4:	e088      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	0152      	lsls	r2, r2, #5
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d100      	bne.n	8002fd0 <HAL_TIM_ConfigClockSource+0x70>
 8002fce:	e088      	b.n	80030e2 <HAL_TIM_ConfigClockSource+0x182>
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	0152      	lsls	r2, r2, #5
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d900      	bls.n	8002fda <HAL_TIM_ConfigClockSource+0x7a>
 8002fd8:	e07e      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
 8002fda:	2b70      	cmp	r3, #112	; 0x70
 8002fdc:	d018      	beq.n	8003010 <HAL_TIM_ConfigClockSource+0xb0>
 8002fde:	d900      	bls.n	8002fe2 <HAL_TIM_ConfigClockSource+0x82>
 8002fe0:	e07a      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
 8002fe2:	2b60      	cmp	r3, #96	; 0x60
 8002fe4:	d04f      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x126>
 8002fe6:	d900      	bls.n	8002fea <HAL_TIM_ConfigClockSource+0x8a>
 8002fe8:	e076      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
 8002fea:	2b50      	cmp	r3, #80	; 0x50
 8002fec:	d03b      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x106>
 8002fee:	d900      	bls.n	8002ff2 <HAL_TIM_ConfigClockSource+0x92>
 8002ff0:	e072      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d057      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x146>
 8002ff6:	d900      	bls.n	8002ffa <HAL_TIM_ConfigClockSource+0x9a>
 8002ff8:	e06e      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d063      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x166>
 8002ffe:	d86b      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
 8003000:	2b20      	cmp	r3, #32
 8003002:	d060      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x166>
 8003004:	d868      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d05d      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x166>
 800300a:	2b10      	cmp	r3, #16
 800300c:	d05b      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x166>
 800300e:	e063      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f000 fb90 	bl	8003744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2277      	movs	r2, #119	; 0x77
 8003030:	4313      	orrs	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
      break;
 800303c:	e052      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f000 fb79 	bl	8003744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	01c9      	lsls	r1, r1, #7
 8003060:	430a      	orrs	r2, r1
 8003062:	609a      	str	r2, [r3, #8]
      break;
 8003064:	e03e      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	001a      	movs	r2, r3
 8003074:	f000 faec 	bl	8003650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2150      	movs	r1, #80	; 0x50
 800307e:	0018      	movs	r0, r3
 8003080:	f000 fb46 	bl	8003710 <TIM_ITRx_SetConfig>
      break;
 8003084:	e02e      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	001a      	movs	r2, r3
 8003094:	f000 fb0a 	bl	80036ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2160      	movs	r1, #96	; 0x60
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fb36 	bl	8003710 <TIM_ITRx_SetConfig>
      break;
 80030a4:	e01e      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	001a      	movs	r2, r3
 80030b4:	f000 facc 	bl	8003650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2140      	movs	r1, #64	; 0x40
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fb26 	bl	8003710 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e00e      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0019      	movs	r1, r3
 80030d0:	0010      	movs	r0, r2
 80030d2:	f000 fb1d 	bl	8003710 <TIM_ITRx_SetConfig>
      break;
 80030d6:	e005      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030d8:	230f      	movs	r3, #15
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
      break;
 80030e0:	e000      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030e2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	223d      	movs	r2, #61	; 0x3d
 80030e8:	2101      	movs	r1, #1
 80030ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	223c      	movs	r2, #60	; 0x3c
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]

  return status;
 80030f4:	230f      	movs	r3, #15
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	781b      	ldrb	r3, [r3, #0]
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b004      	add	sp, #16
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	ffff00ff 	.word	0xffff00ff

08003108 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b002      	add	sp, #8
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}

08003158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a34      	ldr	r2, [pc, #208]	; (800323c <TIM_Base_SetConfig+0xe4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d008      	beq.n	8003182 <TIM_Base_SetConfig+0x2a>
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	05db      	lsls	r3, r3, #23
 8003176:	429a      	cmp	r2, r3
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0x2a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a30      	ldr	r2, [pc, #192]	; (8003240 <TIM_Base_SetConfig+0xe8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2270      	movs	r2, #112	; 0x70
 8003186:	4393      	bics	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a29      	ldr	r2, [pc, #164]	; (800323c <TIM_Base_SetConfig+0xe4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d018      	beq.n	80031ce <TIM_Base_SetConfig+0x76>
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	05db      	lsls	r3, r3, #23
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d013      	beq.n	80031ce <TIM_Base_SetConfig+0x76>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a25      	ldr	r2, [pc, #148]	; (8003240 <TIM_Base_SetConfig+0xe8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00f      	beq.n	80031ce <TIM_Base_SetConfig+0x76>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a24      	ldr	r2, [pc, #144]	; (8003244 <TIM_Base_SetConfig+0xec>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00b      	beq.n	80031ce <TIM_Base_SetConfig+0x76>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a23      	ldr	r2, [pc, #140]	; (8003248 <TIM_Base_SetConfig+0xf0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <TIM_Base_SetConfig+0x76>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a22      	ldr	r2, [pc, #136]	; (800324c <TIM_Base_SetConfig+0xf4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_Base_SetConfig+0x76>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a21      	ldr	r2, [pc, #132]	; (8003250 <TIM_Base_SetConfig+0xf8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d108      	bne.n	80031e0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a20      	ldr	r2, [pc, #128]	; (8003254 <TIM_Base_SetConfig+0xfc>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	4393      	bics	r3, r2
 80031e6:	001a      	movs	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a0c      	ldr	r2, [pc, #48]	; (800323c <TIM_Base_SetConfig+0xe4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0xce>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <TIM_Base_SetConfig+0xf0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0xce>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <TIM_Base_SetConfig+0xf4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0xce>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <TIM_Base_SetConfig+0xf8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d103      	bne.n	800322e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	615a      	str	r2, [r3, #20]
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40002000 	.word	0x40002000
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800
 8003254:	fffffcff 	.word	0xfffffcff

08003258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	2201      	movs	r2, #1
 8003268:	4393      	bics	r3, r2
 800326a:	001a      	movs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2270      	movs	r2, #112	; 0x70
 8003286:	4393      	bics	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2203      	movs	r2, #3
 800328e:	4393      	bics	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2202      	movs	r2, #2
 80032a0:	4393      	bics	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a27      	ldr	r2, [pc, #156]	; (8003350 <TIM_OC1_SetConfig+0xf8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00b      	beq.n	80032ce <TIM_OC1_SetConfig+0x76>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a26      	ldr	r2, [pc, #152]	; (8003354 <TIM_OC1_SetConfig+0xfc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <TIM_OC1_SetConfig+0x76>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a25      	ldr	r2, [pc, #148]	; (8003358 <TIM_OC1_SetConfig+0x100>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_OC1_SetConfig+0x76>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a24      	ldr	r2, [pc, #144]	; (800335c <TIM_OC1_SetConfig+0x104>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10c      	bne.n	80032e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2208      	movs	r2, #8
 80032d2:	4393      	bics	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2204      	movs	r2, #4
 80032e4:	4393      	bics	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a19      	ldr	r2, [pc, #100]	; (8003350 <TIM_OC1_SetConfig+0xf8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00b      	beq.n	8003308 <TIM_OC1_SetConfig+0xb0>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <TIM_OC1_SetConfig+0xfc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <TIM_OC1_SetConfig+0xb0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a17      	ldr	r2, [pc, #92]	; (8003358 <TIM_OC1_SetConfig+0x100>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_OC1_SetConfig+0xb0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a16      	ldr	r2, [pc, #88]	; (800335c <TIM_OC1_SetConfig+0x104>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d111      	bne.n	800332c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4a15      	ldr	r2, [pc, #84]	; (8003360 <TIM_OC1_SetConfig+0x108>)
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4a14      	ldr	r2, [pc, #80]	; (8003364 <TIM_OC1_SetConfig+0x10c>)
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b006      	add	sp, #24
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40014000 	.word	0x40014000
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800
 8003360:	fffffeff 	.word	0xfffffeff
 8003364:	fffffdff 	.word	0xfffffdff

08003368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	2210      	movs	r2, #16
 8003378:	4393      	bics	r3, r2
 800337a:	001a      	movs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a2e      	ldr	r2, [pc, #184]	; (8003450 <TIM_OC2_SetConfig+0xe8>)
 8003396:	4013      	ands	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a2d      	ldr	r2, [pc, #180]	; (8003454 <TIM_OC2_SetConfig+0xec>)
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2220      	movs	r2, #32
 80033b2:	4393      	bics	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a24      	ldr	r2, [pc, #144]	; (8003458 <TIM_OC2_SetConfig+0xf0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10d      	bne.n	80033e6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	4393      	bics	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	4393      	bics	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <TIM_OC2_SetConfig+0xf0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00b      	beq.n	8003406 <TIM_OC2_SetConfig+0x9e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1a      	ldr	r2, [pc, #104]	; (800345c <TIM_OC2_SetConfig+0xf4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <TIM_OC2_SetConfig+0x9e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a19      	ldr	r2, [pc, #100]	; (8003460 <TIM_OC2_SetConfig+0xf8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_OC2_SetConfig+0x9e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a18      	ldr	r2, [pc, #96]	; (8003464 <TIM_OC2_SetConfig+0xfc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d113      	bne.n	800342e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4a17      	ldr	r2, [pc, #92]	; (8003468 <TIM_OC2_SetConfig+0x100>)
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4a16      	ldr	r2, [pc, #88]	; (800346c <TIM_OC2_SetConfig+0x104>)
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b006      	add	sp, #24
 800344e:	bd80      	pop	{r7, pc}
 8003450:	ffff8fff 	.word	0xffff8fff
 8003454:	fffffcff 	.word	0xfffffcff
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40014000 	.word	0x40014000
 8003460:	40014400 	.word	0x40014400
 8003464:	40014800 	.word	0x40014800
 8003468:	fffffbff 	.word	0xfffffbff
 800346c:	fffff7ff 	.word	0xfffff7ff

08003470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4a35      	ldr	r2, [pc, #212]	; (8003554 <TIM_OC3_SetConfig+0xe4>)
 8003480:	401a      	ands	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2270      	movs	r2, #112	; 0x70
 800349c:	4393      	bics	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2203      	movs	r2, #3
 80034a4:	4393      	bics	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	4a28      	ldr	r2, [pc, #160]	; (8003558 <TIM_OC3_SetConfig+0xe8>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a24      	ldr	r2, [pc, #144]	; (800355c <TIM_OC3_SetConfig+0xec>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10d      	bne.n	80034ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <TIM_OC3_SetConfig+0xf0>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <TIM_OC3_SetConfig+0xf4>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1b      	ldr	r2, [pc, #108]	; (800355c <TIM_OC3_SetConfig+0xec>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_OC3_SetConfig+0x9a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <TIM_OC3_SetConfig+0xf8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <TIM_OC3_SetConfig+0x9a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1b      	ldr	r2, [pc, #108]	; (800356c <TIM_OC3_SetConfig+0xfc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC3_SetConfig+0x9a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1a      	ldr	r2, [pc, #104]	; (8003570 <TIM_OC3_SetConfig+0x100>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d113      	bne.n	8003532 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <TIM_OC3_SetConfig+0x104>)
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4a18      	ldr	r2, [pc, #96]	; (8003578 <TIM_OC3_SetConfig+0x108>)
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b006      	add	sp, #24
 8003552:	bd80      	pop	{r7, pc}
 8003554:	fffffeff 	.word	0xfffffeff
 8003558:	fffffdff 	.word	0xfffffdff
 800355c:	40012c00 	.word	0x40012c00
 8003560:	fffff7ff 	.word	0xfffff7ff
 8003564:	fffffbff 	.word	0xfffffbff
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800
 8003574:	ffffefff 	.word	0xffffefff
 8003578:	ffffdfff 	.word	0xffffdfff

0800357c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a28      	ldr	r2, [pc, #160]	; (800362c <TIM_OC4_SetConfig+0xb0>)
 800358c:	401a      	ands	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a22      	ldr	r2, [pc, #136]	; (8003630 <TIM_OC4_SetConfig+0xb4>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <TIM_OC4_SetConfig+0xb8>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <TIM_OC4_SetConfig+0xbc>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	031b      	lsls	r3, r3, #12
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <TIM_OC4_SetConfig+0xc0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <TIM_OC4_SetConfig+0x78>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a18      	ldr	r2, [pc, #96]	; (8003640 <TIM_OC4_SetConfig+0xc4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <TIM_OC4_SetConfig+0x78>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a17      	ldr	r2, [pc, #92]	; (8003644 <TIM_OC4_SetConfig+0xc8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_OC4_SetConfig+0x78>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <TIM_OC4_SetConfig+0xcc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d109      	bne.n	8003608 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	4a15      	ldr	r2, [pc, #84]	; (800364c <TIM_OC4_SetConfig+0xd0>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b006      	add	sp, #24
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	ffffefff 	.word	0xffffefff
 8003630:	ffff8fff 	.word	0xffff8fff
 8003634:	fffffcff 	.word	0xfffffcff
 8003638:	ffffdfff 	.word	0xffffdfff
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40014000 	.word	0x40014000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800
 800364c:	ffffbfff 	.word	0xffffbfff

08003650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	2201      	movs	r2, #1
 8003668:	4393      	bics	r3, r2
 800366a:	001a      	movs	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	22f0      	movs	r2, #240	; 0xf0
 800367a:	4393      	bics	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	220a      	movs	r2, #10
 800368c:	4393      	bics	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b006      	add	sp, #24
 80036aa:	bd80      	pop	{r7, pc}

080036ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	2210      	movs	r2, #16
 80036be:	4393      	bics	r3, r2
 80036c0:	001a      	movs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <TIM_TI2_ConfigInputStage+0x60>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	22a0      	movs	r2, #160	; 0xa0
 80036e8:	4393      	bics	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	ffff0fff 	.word	0xffff0fff

08003710 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2270      	movs	r2, #112	; 0x70
 8003724:	4393      	bics	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	2207      	movs	r2, #7
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	609a      	str	r2, [r3, #8]
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <TIM_ETR_SetConfig+0x3c>)
 800375c:	4013      	ands	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	431a      	orrs	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b006      	add	sp, #24
 800377e:	bd80      	pop	{r7, pc}
 8003780:	ffff00ff 	.word	0xffff00ff

08003784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	221f      	movs	r2, #31
 8003794:	4013      	ands	r3, r2
 8003796:	2201      	movs	r2, #1
 8003798:	409a      	lsls	r2, r3
 800379a:	0013      	movs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	43d2      	mvns	r2, r2
 80037a6:	401a      	ands	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	211f      	movs	r1, #31
 80037b4:	400b      	ands	r3, r1
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4099      	lsls	r1, r3
 80037ba:	000b      	movs	r3, r1
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b006      	add	sp, #24
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	223c      	movs	r2, #60	; 0x3c
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e047      	b.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	223c      	movs	r2, #60	; 0x3c
 80037e8:	2101      	movs	r1, #1
 80037ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	223d      	movs	r2, #61	; 0x3d
 80037f0:	2102      	movs	r1, #2
 80037f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2270      	movs	r2, #112	; 0x70
 8003808:	4393      	bics	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00f      	beq.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	05db      	lsls	r3, r3, #23
 8003830:	429a      	cmp	r2, r3
 8003832:	d009      	beq.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a11      	ldr	r2, [pc, #68]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a10      	ldr	r2, [pc, #64]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d10c      	bne.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	4393      	bics	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	223d      	movs	r2, #61	; 0x3d
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	223c      	movs	r2, #60	; 0x3c
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40000400 	.word	0x40000400
 8003884:	40014000 	.word	0x40014000

08003888 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	223c      	movs	r2, #60	; 0x3c
 800389a:	5c9b      	ldrb	r3, [r3, r2]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e03e      	b.n	8003922 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	223c      	movs	r2, #60	; 0x3c
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	22ff      	movs	r2, #255	; 0xff
 80038b0:	4393      	bics	r3, r2
 80038b2:	001a      	movs	r2, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a1b      	ldr	r2, [pc, #108]	; (800392c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80038c0:	401a      	ands	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80038ce:	401a      	ands	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a16      	ldr	r2, [pc, #88]	; (8003934 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80038dc:	401a      	ands	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80038ea:	401a      	ands	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a11      	ldr	r2, [pc, #68]	; (800393c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80038f8:	401a      	ands	r2, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003906:	401a      	ands	r2, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	223c      	movs	r2, #60	; 0x3c
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b004      	add	sp, #16
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	fffffcff 	.word	0xfffffcff
 8003930:	fffffbff 	.word	0xfffffbff
 8003934:	fffff7ff 	.word	0xfffff7ff
 8003938:	ffffefff 	.word	0xffffefff
 800393c:	ffffdfff 	.word	0xffffdfff
 8003940:	ffffbfff 	.word	0xffffbfff

08003944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	b002      	add	sp, #8
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	2600      	movs	r6, #0
 8003968:	4d0c      	ldr	r5, [pc, #48]	; (800399c <__libc_init_array+0x38>)
 800396a:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396c:	1b64      	subs	r4, r4, r5
 800396e:	10a4      	asrs	r4, r4, #2
 8003970:	42a6      	cmp	r6, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	2600      	movs	r6, #0
 8003976:	f000 f821 	bl	80039bc <_init>
 800397a:	4d0a      	ldr	r5, [pc, #40]	; (80039a4 <__libc_init_array+0x40>)
 800397c:	4c0a      	ldr	r4, [pc, #40]	; (80039a8 <__libc_init_array+0x44>)
 800397e:	1b64      	subs	r4, r4, r5
 8003980:	10a4      	asrs	r4, r4, #2
 8003982:	42a6      	cmp	r6, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	00b3      	lsls	r3, r6, #2
 800398a:	58eb      	ldr	r3, [r5, r3]
 800398c:	4798      	blx	r3
 800398e:	3601      	adds	r6, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	00b3      	lsls	r3, r6, #2
 8003994:	58eb      	ldr	r3, [r5, r3]
 8003996:	4798      	blx	r3
 8003998:	3601      	adds	r6, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	08003a04 	.word	0x08003a04
 80039a0:	08003a04 	.word	0x08003a04
 80039a4:	08003a04 	.word	0x08003a04
 80039a8:	08003a08 	.word	0x08003a08

080039ac <memset>:
 80039ac:	0003      	movs	r3, r0
 80039ae:	1882      	adds	r2, r0, r2
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <memset+0xa>
 80039b4:	4770      	bx	lr
 80039b6:	7019      	strb	r1, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e7f9      	b.n	80039b0 <memset+0x4>

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
