
PMW3091.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080076a8  080076a8  000176a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b04  08007b04  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007b04  08007b04  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b04  08007b04  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b04  08007b04  00017b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000534  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000071c  2000071c  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc1d  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdd  00000000  00000000  0002de35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000858  00000000  00000000  00030318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bca5  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bef5  00000000  00000000  0004c815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e6f3  00000000  00000000  0005870a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f6dfd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003590  00000000  00000000  000f6e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800768c 	.word	0x0800768c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800768c 	.word	0x0800768c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fb2f 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f869 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f911 	bl	8000ddc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f8df 	bl	8000d7c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bbe:	f000 f89f 	bl	8000d00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  Tx_len = sprintf (buffer, "init\r\n");
 8000bc2:	4927      	ldr	r1, [pc, #156]	; (8000c60 <main+0xb8>)
 8000bc4:	4827      	ldr	r0, [pc, #156]	; (8000c64 <main+0xbc>)
 8000bc6:	f004 fb35 	bl	8005234 <siprintf>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <main+0xc0>)
 8000bd0:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*) buffer, Tx_len, 100);
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <main+0xc0>)
 8000bd4:	881a      	ldrh	r2, [r3, #0]
 8000bd6:	2364      	movs	r3, #100	; 0x64
 8000bd8:	4922      	ldr	r1, [pc, #136]	; (8000c64 <main+0xbc>)
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <main+0xc4>)
 8000bdc:	f002 feae 	bl	800393c <HAL_UART_Transmit>

  status = PMW3901_Init(&PMW3901_Descriptor);
 8000be0:	4823      	ldr	r0, [pc, #140]	; (8000c70 <main+0xc8>)
 8000be2:	f003 facf 	bl	8004184 <PMW3901_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <main+0xcc>)
 8000bec:	701a      	strb	r2, [r3, #0]
  Tx_len = sprintf (buffer, "init status = %d\r\n",status);
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <main+0xcc>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4920      	ldr	r1, [pc, #128]	; (8000c78 <main+0xd0>)
 8000bf6:	481b      	ldr	r0, [pc, #108]	; (8000c64 <main+0xbc>)
 8000bf8:	f004 fb1c 	bl	8005234 <siprintf>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <main+0xc0>)
 8000c02:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100);
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <main+0xc0>)
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	4916      	ldr	r1, [pc, #88]	; (8000c64 <main+0xbc>)
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <main+0xc4>)
 8000c0e:	f002 fe95 	bl	800393c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status = PMW3901_Read_Variation(&x, &y);
 8000c12:	491a      	ldr	r1, [pc, #104]	; (8000c7c <main+0xd4>)
 8000c14:	481a      	ldr	r0, [pc, #104]	; (8000c80 <main+0xd8>)
 8000c16:	f003 fe1b 	bl	8004850 <PMW3901_Read_Variation>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <main+0xcc>)
 8000c20:	701a      	strb	r2, [r3, #0]
	  Tx_len = sprintf (buffer, "var_x = %d\tvar_y = %d\tStatus = %d\r\n",x,y,status);
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <main+0xd8>)
 8000c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <main+0xd4>)
 8000c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <main+0xcc>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4912      	ldr	r1, [pc, #72]	; (8000c84 <main+0xdc>)
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <main+0xbc>)
 8000c3e:	f004 faf9 	bl	8005234 <siprintf>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <main+0xc0>)
 8000c48:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100);
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <main+0xc0>)
 8000c4c:	881a      	ldrh	r2, [r3, #0]
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	4904      	ldr	r1, [pc, #16]	; (8000c64 <main+0xbc>)
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <main+0xc4>)
 8000c54:	f002 fe72 	bl	800393c <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000c58:	2064      	movs	r0, #100	; 0x64
 8000c5a:	f000 fb3f 	bl	80012dc <HAL_Delay>
	  status = PMW3901_Read_Variation(&x, &y);
 8000c5e:	e7d8      	b.n	8000c12 <main+0x6a>
 8000c60:	080076a8 	.word	0x080076a8
 8000c64:	20000214 	.word	0x20000214
 8000c68:	20000212 	.word	0x20000212
 8000c6c:	2000067c 	.word	0x2000067c
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000700 	.word	0x20000700
 8000c78:	080076b0 	.word	0x080076b0
 8000c7c:	20000614 	.word	0x20000614
 8000c80:	20000210 	.word	0x20000210
 8000c84:	080076c4 	.word	0x080076c4

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fe5a 	bl	8004950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fda0 	bl	8001804 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cca:	f000 f8c5 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fc94 	bl	8002614 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cf2:	f000 f8b1 	bl	8000e58 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3740      	adds	r7, #64	; 0x40
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <MX_SPI1_Init+0x78>)
 8000d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d36:	2228      	movs	r2, #40	; 0x28
 8000d38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d4e:	2207      	movs	r2, #7
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_SPI1_Init+0x74>)
 8000d60:	f001 fe8e 	bl	8002a80 <HAL_SPI_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 f875 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000618 	.word	0x20000618
 8000d78:	40013000 	.word	0x40013000

08000d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <MX_USART2_UART_Init+0x5c>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d88:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_USART2_UART_Init+0x58>)
 8000dc0:	f002 fd6e 	bl	80038a0 <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dca:	f000 f845 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000067c 	.word	0x2000067c
 8000dd8:	40004400 	.word	0x40004400

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_GPIO_Init+0x78>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <MX_GPIO_Init+0x78>)
 8000df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_GPIO_Init+0x78>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_GPIO_Init+0x78>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <MX_GPIO_Init+0x78>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_GPIO_Init+0x78>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2110      	movs	r1, #16
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f000 fcd3 	bl	80017d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f000 fb52 	bl	80014f0 <HAL_GPIO_Init>

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_SPI_MspInit+0x7c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d128      	bne.n	8000f20 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_SPI_MspInit+0x80>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_SPI_MspInit+0x80>)
 8000ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_SPI_MspInit+0x80>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_SPI_MspInit+0x80>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_SPI_MspInit+0x80>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_SPI_MspInit+0x80>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f0e:	2305      	movs	r3, #5
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f000 fae8 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40013000 	.word	0x40013000
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <HAL_UART_MspInit+0x80>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d129      	bne.n	8000fa6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_UART_MspInit+0x84>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f82:	f248 0304 	movw	r3, #32772	; 0x8004
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f94:	2307      	movs	r3, #7
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f000 faa5 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f94a 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	return 1;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_kill>:

int _kill(int pid, int sig)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001026:	f003 fc69 	bl	80048fc <__errno>
 800102a:	4603      	mov	r3, r0
 800102c:	2216      	movs	r2, #22
 800102e:	601a      	str	r2, [r3, #0]
	return -1;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_exit>:

void _exit (int status)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ffe7 	bl	800101c <_kill>
	while (1) {}		/* Make sure we hang here */
 800104e:	e7fe      	b.n	800104e <_exit+0x12>

08001050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00a      	b.n	8001078 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001062:	f3af 8000 	nop.w
 8001066:	4601      	mov	r1, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	b2ca      	uxtb	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf0      	blt.n	8001062 <_read+0x12>
	}

return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e009      	b.n	80010b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf1      	blt.n	800109c <_write+0x12>
	}
	return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_close>:

int _close(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	return -1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ea:	605a      	str	r2, [r3, #4]
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_isatty>:

int _isatty(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	return 1;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f003 fbce 	bl	80048fc <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20003000 	.word	0x20003000
 800118c:	00000400 	.word	0x00000400
 8001190:	20000204 	.word	0x20000204
 8001194:	20000720 	.word	0x20000720

08001198 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopForever+0xe>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopForever+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f003 fb8d 	bl	8004908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ee:	f7ff fcdb 	bl	8000ba8 <main>

080011f2 <LoopForever>:

LoopForever:
    b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001200:	08007b0c 	.word	0x08007b0c
  ldr r2, =_sbss
 8001204:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001208:	2000071c 	.word	0x2000071c

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>
	...

08001210 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_Init+0x28>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_Init+0x28>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f931 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f808 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff fe1a 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40022000 	.word	0x40022000

0800123c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f93b 	bl	80014d6 <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f911 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2000000c 	.word	0x2000000c
 8001294:	20000014 	.word	0x20000014
 8001298:	20000010 	.word	0x20000010

0800129c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000014 	.word	0x20000014
 80012c0:	20000704 	.word	0x20000704

080012c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000704 	.word	0x20000704

080012dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000014 	.word	0x20000014

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff47 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff5c 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffb0 	bl	8001444 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fe:	e14e      	b.n	800179e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8140 	beq.w	8001798 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d005      	beq.n	8001530 <HAL_GPIO_Init+0x40>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d130      	bne.n	8001592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001566:	2201      	movs	r2, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 0201 	and.w	r2, r3, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b03      	cmp	r3, #3
 800159c:	d017      	beq.n	80015ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d123      	bne.n	8001622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	6939      	ldr	r1, [r7, #16]
 800161e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0203 	and.w	r2, r3, #3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 809a 	beq.w	8001798 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a54      	ldr	r2, [pc, #336]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800167c:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016a6:	d013      	beq.n	80016d0 <HAL_GPIO_Init+0x1e0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_GPIO_Init+0x2d4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00d      	beq.n	80016cc <HAL_GPIO_Init+0x1dc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a45      	ldr	r2, [pc, #276]	; (80017c8 <HAL_GPIO_Init+0x2d8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d007      	beq.n	80016c8 <HAL_GPIO_Init+0x1d8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a44      	ldr	r2, [pc, #272]	; (80017cc <HAL_GPIO_Init+0x2dc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_GPIO_Init+0x1d4>
 80016c0:	2303      	movs	r3, #3
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016c4:	2305      	movs	r3, #5
 80016c6:	e004      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016d0:	2300      	movs	r3, #0
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	f002 0203 	and.w	r2, r2, #3
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4093      	lsls	r3, r2
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016e2:	4937      	ldr	r1, [pc, #220]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f0:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001714:	4a2e      	ldr	r2, [pc, #184]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800173e:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa22 f303 	lsr.w	r3, r2, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f aea9 	bne.w	8001500 <HAL_GPIO_Init+0x10>
  }
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010000 	.word	0x40010000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48000800 	.word	0x48000800
 80017cc:	48000c00 	.word	0x48000c00
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800180a:	af00      	add	r7, sp, #0
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	f000 bef4 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 816a 	beq.w	8001b02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800182e:	4bb3      	ldr	r3, [pc, #716]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d00c      	beq.n	8001854 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183a:	4bb0      	ldr	r3, [pc, #704]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d159      	bne.n	80018fa <HAL_RCC_OscConfig+0xf6>
 8001846:	4bad      	ldr	r3, [pc, #692]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d152      	bne.n	80018fa <HAL_RCC_OscConfig+0xf6>
 8001854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001858:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001868:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x82>
 8001880:	4b9e      	ldr	r3, [pc, #632]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0xae>
 8001886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018ae:	4b93      	ldr	r3, [pc, #588]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018be:	fa92 f2a2 	rbit	r2, r2
 80018c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80018c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80018ca:	fab2 f282 	clz	r2, r2
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f042 0220 	orr.w	r2, r2, #32
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	f002 021f 	and.w	r2, r2, #31
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 810c 	beq.w	8001b00 <HAL_RCC_OscConfig+0x2fc>
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8106 	bne.w	8001b00 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f000 be86 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x110>
 8001906:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7c      	ldr	r2, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e030      	b.n	8001976 <HAL_RCC_OscConfig+0x172>
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x134>
 800191e:	4b77      	ldr	r3, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a76      	ldr	r2, [pc, #472]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b74      	ldr	r3, [pc, #464]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a73      	ldr	r2, [pc, #460]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01e      	b.n	8001976 <HAL_RCC_OscConfig+0x172>
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x15a>
 8001944:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6c      	ldr	r2, [pc, #432]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800194a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a69      	ldr	r2, [pc, #420]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x172>
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a66      	ldr	r2, [pc, #408]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a63      	ldr	r2, [pc, #396]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f023 020f 	bic.w	r2, r3, #15
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	495d      	ldr	r1, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001986:	4313      	orrs	r3, r2
 8001988:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d059      	beq.n	8001a48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fc96 	bl	80012c4 <HAL_GetTick>
 8001998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199e:	f7ff fc91 	bl	80012c4 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d902      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f000 be29 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80019c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_OscConfig+0x1e2>
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x20e>
 80019e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ab      	beq.n	800199e <HAL_RCC_OscConfig+0x19a>
 8001a46:	e05c      	b.n	8001b02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fc3c 	bl	80012c4 <HAL_GetTick>
 8001a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff fc37 	bl	80012c4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d902      	bls.n	8001a68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	f000 bdcf 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
 8001a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d102      	bne.n	8001a9a <HAL_RCC_OscConfig+0x296>
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x2c2>
 8001a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ab6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ace:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ad2:	fa92 f2a2 	rbit	r2, r2
 8001ad6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ada:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f042 0220 	orr.w	r2, r2, #32
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f002 021f 	and.w	r2, r2, #31
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ab      	bne.n	8001a52 <HAL_RCC_OscConfig+0x24e>
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_OscConfig+0x2fe>
 8001afc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 816f 	beq.w	8001df0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b12:	4bd0      	ldr	r3, [pc, #832]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b1e:	4bcd      	ldr	r3, [pc, #820]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d16c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x400>
 8001b2a:	4bca      	ldr	r3, [pc, #808]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d166      	bne.n	8001c04 <HAL_RCC_OscConfig+0x400>
 8001b36:	2302      	movs	r3, #2
 8001b38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_OscConfig+0x362>
 8001b60:	4bbc      	ldr	r3, [pc, #752]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e013      	b.n	8001b8e <HAL_RCC_OscConfig+0x38a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b8a:	4bb2      	ldr	r3, [pc, #712]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b98:	fa92 f2a2 	rbit	r2, r2
 8001b9c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ba0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0220 	orr.w	r2, r2, #32
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d002      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f000 bd1b 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4ba0      	ldr	r3, [pc, #640]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	21f8      	movs	r1, #248	; 0xf8
 8001be0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001be8:	fa91 f1a1 	rbit	r1, r1
 8001bec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001bf0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001bf4:	fab1 f181 	clz	r1, r1
 8001bf8:	b2c9      	uxtb	r1, r1
 8001bfa:	408b      	lsls	r3, r1
 8001bfc:	4995      	ldr	r1, [pc, #596]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e0f5      	b.n	8001df0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8085 	beq.w	8001d1a <HAL_RCC_OscConfig+0x516>
 8001c10:	2301      	movs	r3, #1
 8001c12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fb42 	bl	80012c4 <HAL_GetTick>
 8001c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fb3d 	bl	80012c4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d902      	bls.n	8001c5c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	f000 bcd5 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_RCC_OscConfig+0x488>
 8001c86:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	e013      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4b0>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ca4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cbe:	fa92 f2a2 	rbit	r2, r2
 8001cc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001cc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001cca:	fab2 f282 	clz	r2, r2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f042 0220 	orr.w	r2, r2, #32
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f002 021f 	and.w	r2, r2, #31
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0af      	beq.n	8001c46 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	21f8      	movs	r1, #248	; 0xf8
 8001cf6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cfe:	fa91 f1a1 	rbit	r1, r1
 8001d02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d0a:	fab1 f181 	clz	r1, r1
 8001d0e:	b2c9      	uxtb	r1, r1
 8001d10:	408b      	lsls	r3, r1
 8001d12:	4950      	ldr	r1, [pc, #320]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e06a      	b.n	8001df0 <HAL_RCC_OscConfig+0x5ec>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	461a      	mov	r2, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fabd 	bl	80012c4 <HAL_GetTick>
 8001d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff fab8 	bl	80012c4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d902      	bls.n	8001d66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f000 bc50 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
 8001d66:	2302      	movs	r3, #2
 8001d68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_OscConfig+0x592>
 8001d90:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	e013      	b.n	8001dbe <HAL_RCC_OscConfig+0x5ba>
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001dc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dc8:	fa92 f2a2 	rbit	r2, r2
 8001dcc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001dd0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1af      	bne.n	8001d50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80da 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d069      	beq.n	8001ede <HAL_RCC_OscConfig+0x6da>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x654>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2301      	movs	r3, #1
 8001e32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff fa46 	bl	80012c4 <HAL_GetTick>
 8001e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3c:	e00e      	b.n	8001e5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fa41 	bl	80012c4 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d906      	bls.n	8001e5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e3d9      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	10908120 	.word	0x10908120
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4ba5      	ldr	r3, [pc, #660]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	6019      	str	r1, [r3, #0]
 8001eaa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa93 f1a3 	rbit	r1, r3
 8001eb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001eb8:	6019      	str	r1, [r3, #0]
  return result;
 8001eba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0b0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x63a>
 8001edc:	e06a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7b0>
 8001ede:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	fa93 f2a3 	rbit	r2, r3
 8001ef0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ef4:	601a      	str	r2, [r3, #0]
  return result;
 8001ef6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001efa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b8c      	ldr	r3, [pc, #560]	; (8002138 <HAL_RCC_OscConfig+0x934>)
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7ff f9d8 	bl	80012c4 <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f9d3 	bl	80012c4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e36b      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 8001f2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f32:	2202      	movs	r2, #2
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f62:	2202      	movs	r2, #2
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f2a3 	rbit	r2, r3
 8001f70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f76:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f7e:	2102      	movs	r1, #2
 8001f80:	6019      	str	r1, [r3, #0]
 8001f82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f1a3 	rbit	r1, r3
 8001f8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f90:	6019      	str	r1, [r3, #0]
  return result;
 8001f92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1b2      	bne.n	8001f1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8158 	beq.w	8002274 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d112      	bne.n	8001ffc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a56      	ldr	r2, [pc, #344]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	4b4f      	ldr	r3, [pc, #316]	; (800213c <HAL_RCC_OscConfig+0x938>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d11a      	bne.n	800203e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x938>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_RCC_OscConfig+0x938>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002014:	f7ff f956 	bl	80012c4 <HAL_GetTick>
 8002018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	e009      	b.n	8002032 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7ff f951 	bl	80012c4 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e2e9      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_RCC_OscConfig+0x938>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0ef      	beq.n	800201e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x852>
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a39      	ldr	r2, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	e02f      	b.n	80020b6 <HAL_RCC_OscConfig+0x8b2>
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10c      	bne.n	800207a <HAL_RCC_OscConfig+0x876>
 8002060:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a33      	ldr	r2, [pc, #204]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a30      	ldr	r2, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002072:	f023 0304 	bic.w	r3, r3, #4
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	e01d      	b.n	80020b6 <HAL_RCC_OscConfig+0x8b2>
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x89a>
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x8b2>
 800209e:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d06b      	beq.n	8002198 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7ff f900 	bl	80012c4 <HAL_GetTick>
 80020c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	e00b      	b.n	80020e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7ff f8fb 	bl	80012c4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e291      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 80020e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020e6:	2202      	movs	r2, #2
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020fe:	2202      	movs	r2, #2
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002110:	601a      	str	r2, [r3, #0]
  return result;
 8002112:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002116:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d109      	bne.n	8002140 <HAL_RCC_OscConfig+0x93c>
 800212c:	4b01      	ldr	r3, [pc, #4]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	e014      	b.n	800215c <HAL_RCC_OscConfig+0x958>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	10908120 	.word	0x10908120
 800213c:	40007000 	.word	0x40007000
 8002140:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002144:	2202      	movs	r2, #2
 8002146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4bbb      	ldr	r3, [pc, #748]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002160:	2102      	movs	r1, #2
 8002162:	6011      	str	r1, [r2, #0]
 8002164:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	fa92 f1a2 	rbit	r1, r2
 800216e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002172:	6011      	str	r1, [r2, #0]
  return result;
 8002174:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d099      	beq.n	80020ca <HAL_RCC_OscConfig+0x8c6>
 8002196:	e063      	b.n	8002260 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff f894 	bl	80012c4 <HAL_GetTick>
 800219c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff f88f 	bl	80012c4 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e225      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 80021ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021be:	2202      	movs	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021e8:	601a      	str	r2, [r3, #0]
  return result;
 80021ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d102      	bne.n	800220a <HAL_RCC_OscConfig+0xa06>
 8002204:	4b90      	ldr	r3, [pc, #576]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	e00d      	b.n	8002226 <HAL_RCC_OscConfig+0xa22>
 800220a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	4b89      	ldr	r3, [pc, #548]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800222a:	2102      	movs	r1, #2
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	fa92 f1a2 	rbit	r1, r2
 8002238:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800223c:	6011      	str	r1, [r2, #0]
  return result;
 800223e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f002 021f 	and.w	r2, r2, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f202 	lsl.w	r2, r1, r2
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1a0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002260:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b77      	ldr	r3, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	4a76      	ldr	r2, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002272:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 81c2 	beq.w	8002604 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b71      	ldr	r3, [pc, #452]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	f000 819c 	beq.w	80025c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b02      	cmp	r3, #2
 8002296:	f040 8114 	bne.w	80024c2 <HAL_RCC_OscConfig+0xcbe>
 800229a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800229e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	fa93 f2a3 	rbit	r2, r3
 80022ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022b2:	601a      	str	r2, [r3, #0]
  return result;
 80022b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	461a      	mov	r2, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fff8 	bl	80012c4 <HAL_GetTick>
 80022d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe fff3 	bl	80012c4 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e18b      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 80022ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002306:	601a      	str	r2, [r3, #0]
  return result;
 8002308:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800230c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_RCC_OscConfig+0xb24>
 8002322:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	e01b      	b.n	8002360 <HAL_RCC_OscConfig+0xb5c>
 8002328:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800232c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002364:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002368:	6011      	str	r1, [r2, #0]
 800236a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	fa92 f1a2 	rbit	r1, r2
 8002374:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002378:	6011      	str	r1, [r2, #0]
  return result;
 800237a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	fab2 f282 	clz	r2, r2
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f042 0220 	orr.w	r2, r2, #32
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f002 021f 	and.w	r2, r2, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f202 	lsl.w	r2, r1, r2
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d19e      	bne.n	80022da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	4925      	ldr	r1, [pc, #148]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023d0:	601a      	str	r2, [r3, #0]
  return result;
 80023d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe ff69 	bl	80012c4 <HAL_GetTick>
 80023f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f6:	e009      	b.n	800240c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe ff64 	bl	80012c4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0fc      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 800240c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002424:	601a      	str	r2, [r3, #0]
  return result;
 8002426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800242a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0xc48>
 8002440:	4b01      	ldr	r3, [pc, #4]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	e01e      	b.n	8002484 <HAL_RCC_OscConfig+0xc80>
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800246a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0xe0c>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002488:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800248c:	6011      	str	r1, [r2, #0]
 800248e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	fa92 f1a2 	rbit	r1, r2
 8002498:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800249c:	6011      	str	r1, [r2, #0]
  return result;
 800249e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	fab2 f282 	clz	r2, r2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f042 0220 	orr.w	r2, r2, #32
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	f002 021f 	and.w	r2, r2, #31
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d09b      	beq.n	80023f8 <HAL_RCC_OscConfig+0xbf4>
 80024c0:	e0a0      	b.n	8002604 <HAL_RCC_OscConfig+0xe00>
 80024c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	601a      	str	r2, [r3, #0]
  return result;
 80024dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	461a      	mov	r2, r3
 80024f4:	2300      	movs	r3, #0
 80024f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fee4 	bl	80012c4 <HAL_GetTick>
 80024fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	e009      	b.n	8002516 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe fedf 	bl	80012c4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e077      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 8002516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252e:	601a      	str	r2, [r3, #0]
  return result;
 8002530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002534:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <HAL_RCC_OscConfig+0xd4c>
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_RCC_OscConfig+0xe0c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	e01b      	b.n	8002588 <HAL_RCC_OscConfig+0xd84>
 8002550:	f107 0320 	add.w	r3, r7, #32
 8002554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f107 0320 	add.w	r3, r7, #32
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f107 0318 	add.w	r3, r7, #24
 800256e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f107 0318 	add.w	r3, r7, #24
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_OscConfig+0xe0c>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f107 0210 	add.w	r2, r7, #16
 800258c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	f107 0210 	add.w	r2, r7, #16
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fa92 f1a2 	rbit	r1, r2
 800259c:	f107 020c 	add.w	r2, r7, #12
 80025a0:	6011      	str	r1, [r2, #0]
  return result;
 80025a2:	f107 020c 	add.w	r2, r7, #12
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d19e      	bne.n	8002502 <HAL_RCC_OscConfig+0xcfe>
 80025c4:	e01e      	b.n	8002604 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e018      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_RCC_OscConfig+0xe0c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b09e      	sub	sp, #120	; 0x78
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e162      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b90      	ldr	r3, [pc, #576]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b8d      	ldr	r3, [pc, #564]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	498b      	ldr	r1, [pc, #556]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e14a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b82      	ldr	r3, [pc, #520]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	497f      	ldr	r1, [pc, #508]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80dc 	beq.w	8002840 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d13c      	bne.n	800270a <HAL_RCC_ClockConfig+0xf6>
 8002690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002694:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800269e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_ClockConfig+0xa6>
 80026b4:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	e00f      	b.n	80026da <HAL_RCC_ClockConfig+0xc6>
 80026ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	667b      	str	r3, [r7, #100]	; 0x64
 80026c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026cc:	663b      	str	r3, [r7, #96]	; 0x60
 80026ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026d6:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026de:	65ba      	str	r2, [r7, #88]	; 0x58
 80026e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026e2:	fa92 f2a2 	rbit	r2, r2
 80026e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d17b      	bne.n	80027fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0f3      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d13c      	bne.n	800278c <HAL_RCC_ClockConfig+0x178>
 8002712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002716:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_ClockConfig+0x128>
 8002736:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e00f      	b.n	800275c <HAL_RCC_ClockConfig+0x148>
 800273c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002740:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	647b      	str	r3, [r7, #68]	; 0x44
 800274a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
 8002750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002758:	4b46      	ldr	r3, [pc, #280]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002760:	63ba      	str	r2, [r7, #56]	; 0x38
 8002762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002764:	fa92 f2a2 	rbit	r2, r2
 8002768:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800276a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276c:	fab2 f282 	clz	r2, r2
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f042 0220 	orr.w	r2, r2, #32
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f002 021f 	and.w	r2, r2, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d13a      	bne.n	80027fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b2      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
 800278c:	2302      	movs	r3, #2
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x1a0>
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e00d      	b.n	80027d0 <HAL_RCC_ClockConfig+0x1bc>
 80027b4:	2302      	movs	r3, #2
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	2302      	movs	r3, #2
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	2202      	movs	r2, #2
 80027d2:	61ba      	str	r2, [r7, #24]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	fa92 f2a2 	rbit	r2, r2
 80027da:	617a      	str	r2, [r7, #20]
  return result;
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0220 	orr.w	r2, r2, #32
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e079      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	491a      	ldr	r1, [pc, #104]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7fe fd58 	bl	80012c4 <HAL_GetTick>
 8002814:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fd54 	bl	80012c4 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e061      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d214      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4906      	ldr	r1, [pc, #24]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e040      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
 8002870:	40022000 	.word	0x40022000
 8002874:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	491a      	ldr	r1, [pc, #104]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4912      	ldr	r1, [pc, #72]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028b6:	f000 f829 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028ba:	4601      	mov	r1, r0
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c4:	22f0      	movs	r2, #240	; 0xf0
 80028c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	fa92 f2a2 	rbit	r2, r2
 80028ce:	60fa      	str	r2, [r7, #12]
  return result;
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	fab2 f282 	clz	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	40d3      	lsrs	r3, r2
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x2ec>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	fa21 f303 	lsr.w	r3, r1, r3
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <HAL_RCC_ClockConfig+0x2f0>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <HAL_RCC_ClockConfig+0x2f4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fca6 	bl	800123c <HAL_InitTick>
  
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3778      	adds	r7, #120	; 0x78
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	080076e8 	.word	0x080076e8
 8002904:	2000000c 	.word	0x2000000c
 8002908:	20000010 	.word	0x20000010

0800290c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b08b      	sub	sp, #44	; 0x2c
 8002910:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x30>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x36>
 800293a:	e03c      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800293e:	623b      	str	r3, [r7, #32]
      break;
 8002940:	e03c      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002948:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800294c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	607a      	str	r2, [r7, #4]
  return result;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	fab2 f282 	clz	r2, r2
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	40d3      	lsrs	r3, r2
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	220f      	movs	r2, #15
 8002970:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	60fa      	str	r2, [r7, #12]
  return result;
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	fab2 f282 	clz	r2, r2
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	40d3      	lsrs	r3, r2
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002994:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	fbb2 f2f3 	udiv	r2, r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	e004      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	623b      	str	r3, [r7, #32]
      break;
 80029b4:	e002      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b8:	623b      	str	r3, [r7, #32]
      break;
 80029ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	372c      	adds	r7, #44	; 0x2c
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	007a1200 	.word	0x007a1200
 80029d4:	08007700 	.word	0x08007700
 80029d8:	08007710 	.word	0x08007710
 80029dc:	003d0900 	.word	0x003d0900

080029e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	2000000c 	.word	0x2000000c

080029f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029fe:	f7ff ffef 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a02:	4601      	mov	r1, r0
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	fa92 f2a2 	rbit	r2, r2
 8002a18:	603a      	str	r2, [r7, #0]
  return result;
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	40d3      	lsrs	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	080076f8 	.word	0x080076f8

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a42:	f7ff ffcd 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a46:	4601      	mov	r1, r0
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	fa92 f2a2 	rbit	r2, r2
 8002a5c:	603a      	str	r2, [r7, #0]
  return result;
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	fab2 f282 	clz	r2, r2
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	40d3      	lsrs	r3, r2
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	080076f8 	.word	0x080076f8

08002a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e095      	b.n	8002bbe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa2:	d009      	beq.n	8002ab8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
 8002aaa:	e005      	b.n	8002ab8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe f9ea 	bl	8000eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002af8:	d902      	bls.n	8002b00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	e002      	b.n	8002b06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b0e:	d007      	beq.n	8002b20 <HAL_SPI_Init+0xa0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b18:	d002      	beq.n	8002b20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	ea42 0103 	orr.w	r1, r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	0c1b      	lsrs	r3, r3, #16
 8002b7c:	f003 0204 	and.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b088      	sub	sp, #32
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_SPI_Transmit+0x22>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e158      	b.n	8002e9a <HAL_SPI_Transmit+0x2d4>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf0:	f7fe fb68 	bl	80012c4 <HAL_GetTick>
 8002bf4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d002      	beq.n	8002c0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
 8002c08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c0a:	e13d      	b.n	8002e88 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_SPI_Transmit+0x52>
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c1c:	e134      	b.n	8002e88 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c68:	d10f      	bne.n	8002c8a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d007      	beq.n	8002ca8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cb0:	d94b      	bls.n	8002d4a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_SPI_Transmit+0xfa>
 8002cba:	8afb      	ldrh	r3, [r7, #22]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d13e      	bne.n	8002d3e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	881a      	ldrh	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	1c9a      	adds	r2, r3, #2
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ce4:	e02b      	b.n	8002d3e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d112      	bne.n	8002d1a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	881a      	ldrh	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	1c9a      	adds	r2, r3, #2
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d18:	e011      	b.n	8002d3e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d1a:	f7fe fad3 	bl	80012c4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d803      	bhi.n	8002d32 <HAL_SPI_Transmit+0x16c>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d102      	bne.n	8002d38 <HAL_SPI_Transmit+0x172>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d3c:	e0a4      	b.n	8002e88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ce      	bne.n	8002ce6 <HAL_SPI_Transmit+0x120>
 8002d48:	e07c      	b.n	8002e44 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_Transmit+0x192>
 8002d52:	8afb      	ldrh	r3, [r7, #22]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d170      	bne.n	8002e3a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d912      	bls.n	8002d88 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	1c9a      	adds	r2, r3, #2
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b02      	subs	r3, #2
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d86:	e058      	b.n	8002e3a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002dae:	e044      	b.n	8002e3a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d12b      	bne.n	8002e16 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d912      	bls.n	8002dee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	881a      	ldrh	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	1c9a      	adds	r2, r3, #2
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b02      	subs	r3, #2
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dec:	e025      	b.n	8002e3a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	330c      	adds	r3, #12
 8002df8:	7812      	ldrb	r2, [r2, #0]
 8002dfa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e14:	e011      	b.n	8002e3a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e16:	f7fe fa55 	bl	80012c4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d803      	bhi.n	8002e2e <HAL_SPI_Transmit+0x268>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d102      	bne.n	8002e34 <HAL_SPI_Transmit+0x26e>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e38:	e026      	b.n	8002e88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1b5      	bne.n	8002db0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fce3 	bl	8003814 <SPI_EndRxTxTransaction>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e000      	b.n	8002e88 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002e86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b088      	sub	sp, #32
 8002ea6:	af02      	add	r7, sp, #8
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ebe:	d112      	bne.n	8002ee6 <HAL_SPI_Receive+0x44>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ed0:	88fa      	ldrh	r2, [r7, #6]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f910 	bl	8003102 <HAL_SPI_TransmitReceive>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	e109      	b.n	80030fa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_SPI_Receive+0x52>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e102      	b.n	80030fa <HAL_SPI_Receive+0x258>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002efc:	f7fe f9e2 	bl	80012c4 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d002      	beq.n	8002f14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f12:	e0e9      	b.n	80030e8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_SPI_Receive+0x7e>
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f24:	e0e0      	b.n	80030e8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f70:	d908      	bls.n	8002f84 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	e007      	b.n	8002f94 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f92:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9c:	d10f      	bne.n	8002fbe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d007      	beq.n	8002fdc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fe4:	d867      	bhi.n	80030b6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fe6:	e030      	b.n	800304a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d117      	bne.n	8003026 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f103 020c 	add.w	r2, r3, #12
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003024:	e011      	b.n	800304a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003026:	f7fe f94d 	bl	80012c4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d803      	bhi.n	800303e <HAL_SPI_Receive+0x19c>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1a2>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003048:	e04e      	b.n	80030e8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1c8      	bne.n	8002fe8 <HAL_SPI_Receive+0x146>
 8003056:	e034      	b.n	80030c2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d115      	bne.n	8003092 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	b292      	uxth	r2, r2
 8003072:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	1c9a      	adds	r2, r3, #2
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003090:	e011      	b.n	80030b6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003092:	f7fe f917 	bl	80012c4 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d803      	bhi.n	80030aa <HAL_SPI_Receive+0x208>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d102      	bne.n	80030b0 <HAL_SPI_Receive+0x20e>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030b4:	e018      	b.n	80030e8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ca      	bne.n	8003058 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fb4c 	bl	8003764 <SPI_EndRxTransaction>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
 80030e4:	e000      	b.n	80030e8 <HAL_SPI_Receive+0x246>
  }

error :
 80030e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b08a      	sub	sp, #40	; 0x28
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003110:	2301      	movs	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x26>
 8003124:	2302      	movs	r3, #2
 8003126:	e1fb      	b.n	8003520 <HAL_SPI_TransmitReceive+0x41e>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003130:	f7fe f8c8 	bl	80012c4 <HAL_GetTick>
 8003134:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800313c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003144:	887b      	ldrh	r3, [r7, #2]
 8003146:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800314c:	7efb      	ldrb	r3, [r7, #27]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d00e      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x6e>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003158:	d106      	bne.n	8003168 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_SPI_TransmitReceive+0x66>
 8003162:	7efb      	ldrb	r3, [r7, #27]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d003      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003168:	2302      	movs	r3, #2
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800316e:	e1cd      	b.n	800350c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_SPI_TransmitReceive+0x80>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_SPI_TransmitReceive+0x80>
 800317c:	887b      	ldrh	r3, [r7, #2]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003188:	e1c0      	b.n	800350c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b04      	cmp	r3, #4
 8003194:	d003      	beq.n	800319e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	887a      	ldrh	r2, [r7, #2]
 80031ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	887a      	ldrh	r2, [r7, #2]
 80031b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031e0:	d802      	bhi.n	80031e8 <HAL_SPI_TransmitReceive+0xe6>
 80031e2:	8a3b      	ldrh	r3, [r7, #16]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d908      	bls.n	80031fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	e007      	b.n	800320a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003208:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d007      	beq.n	8003228 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003230:	d97c      	bls.n	800332c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x13e>
 800323a:	8a7b      	ldrh	r3, [r7, #18]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d169      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	881a      	ldrh	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003264:	e056      	b.n	8003314 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d11b      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x1aa>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_SPI_TransmitReceive+0x1aa>
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	2b01      	cmp	r3, #1
 8003282:	d113      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	1c9a      	adds	r2, r3, #2
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d11c      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x1f2>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	b292      	uxth	r2, r2
 80032d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f0:	2301      	movs	r3, #1
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032f4:	f7fd ffe6 	bl	80012c4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003300:	429a      	cmp	r2, r3
 8003302:	d807      	bhi.n	8003314 <HAL_SPI_TransmitReceive+0x212>
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d003      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003312:	e0fb      	b.n	800350c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1a3      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x164>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d19d      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x164>
 800332a:	e0df      	b.n	80034ec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_SPI_TransmitReceive+0x23a>
 8003334:	8a7b      	ldrh	r3, [r7, #18]
 8003336:	2b01      	cmp	r3, #1
 8003338:	f040 80cb 	bne.w	80034d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d912      	bls.n	800336c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	881a      	ldrh	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b02      	subs	r3, #2
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800336a:	e0b2      	b.n	80034d2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003392:	e09e      	b.n	80034d2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d134      	bne.n	800340c <HAL_SPI_TransmitReceive+0x30a>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02f      	beq.n	800340c <HAL_SPI_TransmitReceive+0x30a>
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d12c      	bne.n	800340c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d912      	bls.n	80033e2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	881a      	ldrh	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	1c9a      	adds	r2, r3, #2
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b02      	subs	r3, #2
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033e0:	e012      	b.n	8003408 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d148      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x3aa>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d042      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d923      	bls.n	800347a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	b292      	uxth	r2, r2
 800343e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	1c9a      	adds	r2, r3, #2
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b02      	subs	r3, #2
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d81f      	bhi.n	80034a8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	e016      	b.n	80034a8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f103 020c 	add.w	r2, r3, #12
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034ac:	f7fd ff0a 	bl	80012c4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d803      	bhi.n	80034c4 <HAL_SPI_TransmitReceive+0x3c2>
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d102      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x3c8>
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80034d0:	e01c      	b.n	800350c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f47f af5b 	bne.w	8003394 <HAL_SPI_TransmitReceive+0x292>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f47f af54 	bne.w	8003394 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f98f 	bl	8003814 <SPI_EndRxTxTransaction>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d006      	beq.n	800350a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	661a      	str	r2, [r3, #96]	; 0x60
 8003508:	e000      	b.n	800350c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800350a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800351c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003520:	4618      	mov	r0, r3
 8003522:	3728      	adds	r7, #40	; 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003538:	f7fd fec4 	bl	80012c4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4413      	add	r3, r2
 8003546:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003548:	f7fd febc 	bl	80012c4 <HAL_GetTick>
 800354c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800354e:	4b39      	ldr	r3, [pc, #228]	; (8003634 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	015b      	lsls	r3, r3, #5
 8003554:	0d1b      	lsrs	r3, r3, #20
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800355e:	e054      	b.n	800360a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d050      	beq.n	800360a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003568:	f7fd feac 	bl	80012c4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	429a      	cmp	r2, r3
 8003576:	d902      	bls.n	800357e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d13d      	bne.n	80035fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800358c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003596:	d111      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a0:	d004      	beq.n	80035ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035aa:	d107      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c4:	d10f      	bne.n	80035e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e017      	b.n	800362a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3b01      	subs	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d19b      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000000c 	.word	0x2000000c

08003638 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800364a:	f7fd fe3b 	bl	80012c4 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	4413      	add	r3, r2
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800365a:	f7fd fe33 	bl	80012c4 <HAL_GetTick>
 800365e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00da      	lsls	r2, r3, #3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	0d1b      	lsrs	r3, r3, #20
 8003678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003680:	e060      	b.n	8003744 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003688:	d107      	bne.n	800369a <SPI_WaitFifoStateUntilTimeout+0x62>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003698:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d050      	beq.n	8003744 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036a2:	f7fd fe0f 	bl	80012c4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d902      	bls.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d13d      	bne.n	8003734 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d0:	d111      	bne.n	80036f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036da:	d004      	beq.n	80036e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e4:	d107      	bne.n	80036f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fe:	d10f      	bne.n	8003720 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e010      	b.n	8003756 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	3b01      	subs	r3, #1
 8003742:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d196      	bne.n	8003682 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3728      	adds	r7, #40	; 0x28
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	2000000c 	.word	0x2000000c

08003764 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003778:	d111      	bne.n	800379e <SPI_EndRxTransaction+0x3a>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003782:	d004      	beq.n	800378e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	d107      	bne.n	800379e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff febd 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e023      	b.n	800380c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037cc:	d11d      	bne.n	800380a <SPI_EndRxTransaction+0xa6>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d6:	d004      	beq.n	80037e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e0:	d113      	bne.n	800380a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff ff22 	bl	8003638 <SPI_WaitFifoStateUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e000      	b.n	800380c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ff03 	bl	8003638 <SPI_WaitFifoStateUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e027      	b.n	8003898 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff fe68 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e014      	b.n	8003898 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2200      	movs	r2, #0
 8003876:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fedc 	bl	8003638 <SPI_WaitFifoStateUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e000      	b.n	8003898 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e040      	b.n	8003934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fb34 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8c0 	bl	8003a64 <UART_SetConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9ea 	bl	8003cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fa71 	bl	8003e14 <UART_CheckIdleState>
 8003932:	4603      	mov	r3, r0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003950:	2b20      	cmp	r3, #32
 8003952:	f040 8082 	bne.w	8003a5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_UART_Transmit+0x26>
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e07a      	b.n	8003a5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_UART_Transmit+0x38>
 8003970:	2302      	movs	r3, #2
 8003972:	e073      	b.n	8003a5c <HAL_UART_Transmit+0x120>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2221      	movs	r2, #33	; 0x21
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398a:	f7fd fc9b 	bl	80012c4 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d108      	bne.n	80039bc <HAL_UART_Transmit+0x80>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e003      	b.n	80039c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80039cc:	e02d      	b.n	8003a2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fa64 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e039      	b.n	8003a5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10b      	bne.n	8003a06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fa:	b292      	uxth	r2, r2
 80039fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	3302      	adds	r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	e008      	b.n	8003a18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1cb      	bne.n	80039ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2140      	movs	r1, #64	; 0x40
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fa30 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e005      	b.n	8003a5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b8a      	ldr	r3, [pc, #552]	; (8003cb8 <UART_SetConfig+0x254>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	6979      	ldr	r1, [r7, #20]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a78      	ldr	r2, [pc, #480]	; (8003cbc <UART_SetConfig+0x258>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d120      	bne.n	8003b22 <UART_SetConfig+0xbe>
 8003ae0:	4b77      	ldr	r3, [pc, #476]	; (8003cc0 <UART_SetConfig+0x25c>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d817      	bhi.n	8003b1c <UART_SetConfig+0xb8>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <UART_SetConfig+0x90>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b11 	.word	0x08003b11
 8003afc:	08003b17 	.word	0x08003b17
 8003b00:	08003b0b 	.word	0x08003b0b
 8003b04:	2300      	movs	r3, #0
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e01d      	b.n	8003b46 <UART_SetConfig+0xe2>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e01a      	b.n	8003b46 <UART_SetConfig+0xe2>
 8003b10:	2304      	movs	r3, #4
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e017      	b.n	8003b46 <UART_SetConfig+0xe2>
 8003b16:	2308      	movs	r3, #8
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e014      	b.n	8003b46 <UART_SetConfig+0xe2>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e011      	b.n	8003b46 <UART_SetConfig+0xe2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a67      	ldr	r2, [pc, #412]	; (8003cc4 <UART_SetConfig+0x260>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d102      	bne.n	8003b32 <UART_SetConfig+0xce>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e009      	b.n	8003b46 <UART_SetConfig+0xe2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a64      	ldr	r2, [pc, #400]	; (8003cc8 <UART_SetConfig+0x264>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d102      	bne.n	8003b42 <UART_SetConfig+0xde>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e001      	b.n	8003b46 <UART_SetConfig+0xe2>
 8003b42:	2310      	movs	r3, #16
 8003b44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4e:	d15b      	bne.n	8003c08 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003b50:	7ffb      	ldrb	r3, [r7, #31]
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d827      	bhi.n	8003ba6 <UART_SetConfig+0x142>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0xf8>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe ff3a 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8003b84:	61b8      	str	r0, [r7, #24]
        break;
 8003b86:	e013      	b.n	8003bb0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe ff58 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003b8c:	61b8      	str	r0, [r7, #24]
        break;
 8003b8e:	e00f      	b.n	8003bb0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b4e      	ldr	r3, [pc, #312]	; (8003ccc <UART_SetConfig+0x268>)
 8003b92:	61bb      	str	r3, [r7, #24]
        break;
 8003b94:	e00c      	b.n	8003bb0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe feb9 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8003b9a:	61b8      	str	r0, [r7, #24]
        break;
 8003b9c:	e008      	b.n	8003bb0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	61bb      	str	r3, [r7, #24]
        break;
 8003ba4:	e004      	b.n	8003bb0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	77bb      	strb	r3, [r7, #30]
        break;
 8003bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d074      	beq.n	8003ca0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	005a      	lsls	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b0f      	cmp	r3, #15
 8003bd2:	d916      	bls.n	8003c02 <UART_SetConfig+0x19e>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d212      	bcs.n	8003c02 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f023 030f 	bic.w	r3, r3, #15
 8003be4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	89fa      	ldrh	r2, [r7, #14]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	e04e      	b.n	8003ca0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	77bb      	strb	r3, [r7, #30]
 8003c06:	e04b      	b.n	8003ca0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c08:	7ffb      	ldrb	r3, [r7, #31]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d827      	bhi.n	8003c5e <UART_SetConfig+0x1fa>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0x1b0>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c39 	.word	0x08003c39
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c49 	.word	0x08003c49
 8003c20:	08003c5f 	.word	0x08003c5f
 8003c24:	08003c4f 	.word	0x08003c4f
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c5f 	.word	0x08003c5f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c38:	f7fe fede 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8003c3c:	61b8      	str	r0, [r7, #24]
        break;
 8003c3e:	e013      	b.n	8003c68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7fe fefc 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003c44:	61b8      	str	r0, [r7, #24]
        break;
 8003c46:	e00f      	b.n	8003c68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <UART_SetConfig+0x268>)
 8003c4a:	61bb      	str	r3, [r7, #24]
        break;
 8003c4c:	e00c      	b.n	8003c68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fe5d 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8003c52:	61b8      	str	r0, [r7, #24]
        break;
 8003c54:	e008      	b.n	8003c68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5a:	61bb      	str	r3, [r7, #24]
        break;
 8003c5c:	e004      	b.n	8003c68 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	77bb      	strb	r3, [r7, #30]
        break;
 8003c66:	bf00      	nop
    }

    if (pclk != 0U)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d018      	beq.n	8003ca0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	085a      	lsrs	r2, r3, #1
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	441a      	add	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	d908      	bls.n	8003c9c <UART_SetConfig+0x238>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d204      	bcs.n	8003c9c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	e001      	b.n	8003ca0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cac:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	efff69f3 	.word	0xefff69f3
 8003cbc:	40013800 	.word	0x40013800
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40004400 	.word	0x40004400
 8003cc8:	40004800 	.word	0x40004800
 8003ccc:	007a1200 	.word	0x007a1200

08003cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01a      	beq.n	8003de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dce:	d10a      	bne.n	8003de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  }
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e24:	f7fd fa4e 	bl	80012c4 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d10e      	bne.n	8003e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f82d 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e023      	b.n	8003e9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d10e      	bne.n	8003e82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f817 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e00d      	b.n	8003e9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b09c      	sub	sp, #112	; 0x70
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	e0a5      	b.n	8004004 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	f000 80a1 	beq.w	8004004 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fd f9ff 	bl	80012c4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d13e      	bne.n	8003f56 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eec:	667b      	str	r3, [r7, #100]	; 0x64
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003efc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e6      	bne.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	663b      	str	r3, [r7, #96]	; 0x60
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e067      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d04f      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f72:	d147      	bne.n	8004004 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e6      	bne.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3308      	adds	r3, #8
 8003fce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fd0:	623a      	str	r2, [r7, #32]
 8003fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	69f9      	ldr	r1, [r7, #28]
 8003fd6:	6a3a      	ldr	r2, [r7, #32]
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e010      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	429a      	cmp	r2, r3
 8004020:	f43f af4a 	beq.w	8003eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3770      	adds	r7, #112	; 0x70
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <PMW3901_RegWrite>:

PMW3901_Descriptor_t *Descriptor;


PMW3901_Status_t PMW3901_RegWrite(uint8_t reg, uint8_t val)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	460a      	mov	r2, r1
 800403a:	71fb      	strb	r3, [r7, #7]
 800403c:	4613      	mov	r3, r2
 800403e:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef SPI_status;

	reg |= 0x80;
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004046:	71fb      	strb	r3, [r7, #7]
	uint8_t send[2]={reg,val};
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	733b      	strb	r3, [r7, #12]
 800404c:	79bb      	ldrb	r3, [r7, #6]
 800404e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <PMW3901_RegWrite+0x74>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6858      	ldr	r0, [r3, #4]
 8004056:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <PMW3901_RegWrite+0x74>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	891b      	ldrh	r3, [r3, #8]
 800405c:	2200      	movs	r2, #0
 800405e:	4619      	mov	r1, r3
 8004060:	f7fd fbb8 	bl	80017d4 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, send, 2, 1000);
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <PMW3901_RegWrite+0x74>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	f107 010c 	add.w	r1, r7, #12
 800406e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004072:	2202      	movs	r2, #2
 8004074:	f7fe fda7 	bl	8002bc6 <HAL_SPI_Transmit>
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <PMW3901_RegWrite+0x56>
 8004082:	2302      	movs	r3, #2
 8004084:	e00a      	b.n	800409c <PMW3901_RegWrite+0x6c>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <PMW3901_RegWrite+0x74>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6858      	ldr	r0, [r3, #4]
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <PMW3901_RegWrite+0x74>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	891b      	ldrh	r3, [r3, #8]
 8004092:	2201      	movs	r2, #1
 8004094:	4619      	mov	r1, r3
 8004096:	f7fd fb9d 	bl	80017d4 <HAL_GPIO_WritePin>

	return PMW3901_SUCCESS;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000708 	.word	0x20000708

080040a8 <PMW3901_RegRead>:

PMW3901_Status_t PMW3901_RegRead(uint8_t reg, uint8_t *dest)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef SPI_status;

	uint8_t value;

	reg &= ~0x80;
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80040be:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <PMW3901_RegRead+0x90>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6858      	ldr	r0, [r3, #4]
 80040c4:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <PMW3901_RegRead+0x90>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	891b      	ldrh	r3, [r3, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fd fb81 	bl	80017d4 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, &reg, 1, 1000);
 80040d2:	4b19      	ldr	r3, [pc, #100]	; (8004138 <PMW3901_RegRead+0x90>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	1df9      	adds	r1, r7, #7
 80040da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040de:	2201      	movs	r2, #1
 80040e0:	f7fe fd71 	bl	8002bc6 <HAL_SPI_Transmit>
 80040e4:	4603      	mov	r3, r0
 80040e6:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <PMW3901_RegRead+0x4a>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e01e      	b.n	8004130 <PMW3901_RegRead+0x88>

	SPI_status = HAL_SPI_Receive(HSPI, &value, 1, 1000);
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <PMW3901_RegRead+0x90>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	f107 010e 	add.w	r1, r7, #14
 80040fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004100:	2201      	movs	r2, #1
 8004102:	f7fe fece 	bl	8002ea2 <HAL_SPI_Receive>
 8004106:	4603      	mov	r3, r0
 8004108:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <PMW3901_RegRead+0x6c>
 8004110:	2302      	movs	r3, #2
 8004112:	e00d      	b.n	8004130 <PMW3901_RegRead+0x88>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <PMW3901_RegRead+0x90>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6858      	ldr	r0, [r3, #4]
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <PMW3901_RegRead+0x90>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	891b      	ldrh	r3, [r3, #8]
 8004120:	2201      	movs	r2, #1
 8004122:	4619      	mov	r1, r3
 8004124:	f7fd fb56 	bl	80017d4 <HAL_GPIO_WritePin>

	*dest = value;
 8004128:	7bba      	ldrb	r2, [r7, #14]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	701a      	strb	r2, [r3, #0]

	return PMW3901_SUCCESS;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000708 	.word	0x20000708

0800413c <PMW3901_SetLed>:

PMW3901_Status_t PMW3901_SetLed()
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
	PMW3901_Status_t status;

	status = PMW3901_RegWrite(0x7f, 0x14);
 8004142:	2114      	movs	r1, #20
 8004144:	207f      	movs	r0, #127	; 0x7f
 8004146:	f7ff ff73 	bl	8004030 <PMW3901_RegWrite>
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <PMW3901_SetLed+0x1c>
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	e011      	b.n	800417c <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x6f, 0x1c);
 8004158:	211c      	movs	r1, #28
 800415a:	206f      	movs	r0, #111	; 0x6f
 800415c:	f7ff ff68 	bl	8004030 <PMW3901_RegWrite>
 8004160:	4603      	mov	r3, r0
 8004162:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <PMW3901_SetLed+0x32>
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	e006      	b.n	800417c <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x7f, 0x00);
 800416e:	2100      	movs	r1, #0
 8004170:	207f      	movs	r0, #127	; 0x7f
 8004172:	f7ff ff5d 	bl	8004030 <PMW3901_RegWrite>
 8004176:	4603      	mov	r3, r0
 8004178:	71fb      	strb	r3, [r7, #7]
	return status;
 800417a:	79fb      	ldrb	r3, [r7, #7]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <PMW3901_Init>:

PMW3901_Status_t PMW3901_Init(PMW3901_Descriptor_t *_Descriptor)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	PMW3901_Status_t status;

	uint8_t Product_ID;
	uint8_t Inverse_Product_ID;

	Descriptor = _Descriptor;
 800418c:	4ab8      	ldr	r2, [pc, #736]	; (8004470 <PMW3901_Init+0x2ec>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6013      	str	r3, [r2, #0]

	status = PMW3901_RegRead(0x00, &Product_ID);
 8004192:	f107 030e 	add.w	r3, r7, #14
 8004196:	4619      	mov	r1, r3
 8004198:	2000      	movs	r0, #0
 800419a:	f7ff ff85 	bl	80040a8 <PMW3901_RegRead>
 800419e:	4603      	mov	r3, r0
 80041a0:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <PMW3901_Init+0x28>
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	e34c      	b.n	8004846 <PMW3901_Init+0x6c2>

	if(Product_ID != PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 80041ac:	7bbb      	ldrb	r3, [r7, #14]
 80041ae:	2b49      	cmp	r3, #73	; 0x49
 80041b0:	d001      	beq.n	80041b6 <PMW3901_Init+0x32>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e347      	b.n	8004846 <PMW3901_Init+0x6c2>

	status = PMW3901_RegRead(0x5F, &Inverse_Product_ID);
 80041b6:	f107 030d 	add.w	r3, r7, #13
 80041ba:	4619      	mov	r1, r3
 80041bc:	205f      	movs	r0, #95	; 0x5f
 80041be:	f7ff ff73 	bl	80040a8 <PMW3901_RegRead>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <PMW3901_Init+0x4c>
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	e33a      	b.n	8004846 <PMW3901_Init+0x6c2>

	if(Inverse_Product_ID != INVERSE_PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 80041d0:	7b7b      	ldrb	r3, [r7, #13]
 80041d2:	2bb6      	cmp	r3, #182	; 0xb6
 80041d4:	d001      	beq.n	80041da <PMW3901_Init+0x56>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e335      	b.n	8004846 <PMW3901_Init+0x6c2>

	status = PMW3901_RegWrite(0x3A, 0x00); if(status) return status;
 80041da:	2100      	movs	r1, #0
 80041dc:	203a      	movs	r0, #58	; 0x3a
 80041de:	f7ff ff27 	bl	8004030 <PMW3901_RegWrite>
 80041e2:	4603      	mov	r3, r0
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <PMW3901_Init+0x6c>
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	e32a      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 80041f0:	2100      	movs	r1, #0
 80041f2:	207f      	movs	r0, #127	; 0x7f
 80041f4:	f7ff ff1c 	bl	8004030 <PMW3901_RegWrite>
 80041f8:	4603      	mov	r3, r0
 80041fa:	73fb      	strb	r3, [r7, #15]
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <PMW3901_Init+0x82>
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	e31f      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0xAD); if(status) return status;
 8004206:	21ad      	movs	r1, #173	; 0xad
 8004208:	2061      	movs	r0, #97	; 0x61
 800420a:	f7ff ff11 	bl	8004030 <PMW3901_RegWrite>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <PMW3901_Init+0x98>
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	e314      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x03); if(status) return status;
 800421c:	2103      	movs	r1, #3
 800421e:	207f      	movs	r0, #127	; 0x7f
 8004220:	f7ff ff06 	bl	8004030 <PMW3901_RegWrite>
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <PMW3901_Init+0xae>
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	e309      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x00); if(status) return status;
 8004232:	2100      	movs	r1, #0
 8004234:	2040      	movs	r0, #64	; 0x40
 8004236:	f7ff fefb 	bl	8004030 <PMW3901_RegWrite>
 800423a:	4603      	mov	r3, r0
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <PMW3901_Init+0xc4>
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	e2fe      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x05); if(status) return status;
 8004248:	2105      	movs	r1, #5
 800424a:	207f      	movs	r0, #127	; 0x7f
 800424c:	f7ff fef0 	bl	8004030 <PMW3901_RegWrite>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <PMW3901_Init+0xda>
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	e2f3      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0xB3); if(status) return status;
 800425e:	21b3      	movs	r1, #179	; 0xb3
 8004260:	2041      	movs	r0, #65	; 0x41
 8004262:	f7ff fee5 	bl	8004030 <PMW3901_RegWrite>
 8004266:	4603      	mov	r3, r0
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <PMW3901_Init+0xf0>
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	e2e8      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0xF1); if(status) return status;
 8004274:	21f1      	movs	r1, #241	; 0xf1
 8004276:	2043      	movs	r0, #67	; 0x43
 8004278:	f7ff feda 	bl	8004030 <PMW3901_RegWrite>
 800427c:	4603      	mov	r3, r0
 800427e:	73fb      	strb	r3, [r7, #15]
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <PMW3901_Init+0x106>
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	e2dd      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x14); if(status) return status;
 800428a:	2114      	movs	r1, #20
 800428c:	2045      	movs	r0, #69	; 0x45
 800428e:	f7ff fecf 	bl	8004030 <PMW3901_RegWrite>
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <PMW3901_Init+0x11c>
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	e2d2      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x32); if(status) return status;
 80042a0:	2132      	movs	r1, #50	; 0x32
 80042a2:	205b      	movs	r0, #91	; 0x5b
 80042a4:	f7ff fec4 	bl	8004030 <PMW3901_RegWrite>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <PMW3901_Init+0x132>
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	e2c7      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x34); if(status) return status;
 80042b6:	2134      	movs	r1, #52	; 0x34
 80042b8:	205f      	movs	r0, #95	; 0x5f
 80042ba:	f7ff feb9 	bl	8004030 <PMW3901_RegWrite>
 80042be:	4603      	mov	r3, r0
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <PMW3901_Init+0x148>
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	e2bc      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7B, 0x08); if(status) return status;
 80042cc:	2108      	movs	r1, #8
 80042ce:	207b      	movs	r0, #123	; 0x7b
 80042d0:	f7ff feae 	bl	8004030 <PMW3901_RegWrite>
 80042d4:	4603      	mov	r3, r0
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <PMW3901_Init+0x15e>
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	e2b1      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 80042e2:	2106      	movs	r1, #6
 80042e4:	207f      	movs	r0, #127	; 0x7f
 80042e6:	f7ff fea3 	bl	8004030 <PMW3901_RegWrite>
 80042ea:	4603      	mov	r3, r0
 80042ec:	73fb      	strb	r3, [r7, #15]
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <PMW3901_Init+0x174>
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	e2a6      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x1B); if(status) return status;
 80042f8:	211b      	movs	r1, #27
 80042fa:	2044      	movs	r0, #68	; 0x44
 80042fc:	f7ff fe98 	bl	8004030 <PMW3901_RegWrite>
 8004300:	4603      	mov	r3, r0
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <PMW3901_Init+0x18a>
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	e29b      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0xBF); if(status) return status;
 800430e:	21bf      	movs	r1, #191	; 0xbf
 8004310:	2040      	movs	r0, #64	; 0x40
 8004312:	f7ff fe8d 	bl	8004030 <PMW3901_RegWrite>
 8004316:	4603      	mov	r3, r0
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <PMW3901_Init+0x1a0>
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	e290      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0x3F); if(status) return status;
 8004324:	213f      	movs	r1, #63	; 0x3f
 8004326:	204e      	movs	r0, #78	; 0x4e
 8004328:	f7ff fe82 	bl	8004030 <PMW3901_RegWrite>
 800432c:	4603      	mov	r3, r0
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <PMW3901_Init+0x1b6>
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	e285      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x08); if(status) return status;
 800433a:	2108      	movs	r1, #8
 800433c:	207f      	movs	r0, #127	; 0x7f
 800433e:	f7ff fe77 	bl	8004030 <PMW3901_RegWrite>
 8004342:	4603      	mov	r3, r0
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <PMW3901_Init+0x1cc>
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	e27a      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x20); if(status) return status;
 8004350:	2120      	movs	r1, #32
 8004352:	2065      	movs	r0, #101	; 0x65
 8004354:	f7ff fe6c 	bl	8004030 <PMW3901_RegWrite>
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <PMW3901_Init+0x1e2>
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	e26f      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6A, 0x18); if(status) return status;
 8004366:	2118      	movs	r1, #24
 8004368:	206a      	movs	r0, #106	; 0x6a
 800436a:	f7ff fe61 	bl	8004030 <PMW3901_RegWrite>
 800436e:	4603      	mov	r3, r0
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <PMW3901_Init+0x1f8>
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	e264      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x09); if(status) return status;
 800437c:	2109      	movs	r1, #9
 800437e:	207f      	movs	r0, #127	; 0x7f
 8004380:	f7ff fe56 	bl	8004030 <PMW3901_RegWrite>
 8004384:	4603      	mov	r3, r0
 8004386:	73fb      	strb	r3, [r7, #15]
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <PMW3901_Init+0x20e>
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	e259      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4F, 0xAF); if(status) return status;
 8004392:	21af      	movs	r1, #175	; 0xaf
 8004394:	204f      	movs	r0, #79	; 0x4f
 8004396:	f7ff fe4b 	bl	8004030 <PMW3901_RegWrite>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <PMW3901_Init+0x224>
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	e24e      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x40); if(status) return status;
 80043a8:	2140      	movs	r1, #64	; 0x40
 80043aa:	205f      	movs	r0, #95	; 0x5f
 80043ac:	f7ff fe40 	bl	8004030 <PMW3901_RegWrite>
 80043b0:	4603      	mov	r3, r0
 80043b2:	73fb      	strb	r3, [r7, #15]
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <PMW3901_Init+0x23a>
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	e243      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x80); if(status) return status;
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	2048      	movs	r0, #72	; 0x48
 80043c2:	f7ff fe35 	bl	8004030 <PMW3901_RegWrite>
 80043c6:	4603      	mov	r3, r0
 80043c8:	73fb      	strb	r3, [r7, #15]
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <PMW3901_Init+0x250>
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	e238      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x49, 0x80); if(status) return status;
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	2049      	movs	r0, #73	; 0x49
 80043d8:	f7ff fe2a 	bl	8004030 <PMW3901_RegWrite>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <PMW3901_Init+0x266>
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	e22d      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x57, 0x77); if(status) return status;
 80043ea:	2177      	movs	r1, #119	; 0x77
 80043ec:	2057      	movs	r0, #87	; 0x57
 80043ee:	f7ff fe1f 	bl	8004030 <PMW3901_RegWrite>
 80043f2:	4603      	mov	r3, r0
 80043f4:	73fb      	strb	r3, [r7, #15]
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <PMW3901_Init+0x27c>
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	e222      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x60, 0x78); if(status) return status;
 8004400:	2178      	movs	r1, #120	; 0x78
 8004402:	2060      	movs	r0, #96	; 0x60
 8004404:	f7ff fe14 	bl	8004030 <PMW3901_RegWrite>
 8004408:	4603      	mov	r3, r0
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <PMW3901_Init+0x292>
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	e217      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0x78); if(status) return status;
 8004416:	2178      	movs	r1, #120	; 0x78
 8004418:	2061      	movs	r0, #97	; 0x61
 800441a:	f7ff fe09 	bl	8004030 <PMW3901_RegWrite>
 800441e:	4603      	mov	r3, r0
 8004420:	73fb      	strb	r3, [r7, #15]
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <PMW3901_Init+0x2a8>
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	e20c      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0x08); if(status) return status;
 800442c:	2108      	movs	r1, #8
 800442e:	2062      	movs	r0, #98	; 0x62
 8004430:	f7ff fdfe 	bl	8004030 <PMW3901_RegWrite>
 8004434:	4603      	mov	r3, r0
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <PMW3901_Init+0x2be>
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	e201      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x50); if(status) return status;
 8004442:	2150      	movs	r1, #80	; 0x50
 8004444:	2063      	movs	r0, #99	; 0x63
 8004446:	f7ff fdf3 	bl	8004030 <PMW3901_RegWrite>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <PMW3901_Init+0x2d4>
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	e1f6      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0A); if(status) return status;
 8004458:	210a      	movs	r1, #10
 800445a:	207f      	movs	r0, #127	; 0x7f
 800445c:	f7ff fde8 	bl	8004030 <PMW3901_RegWrite>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <PMW3901_Init+0x2f0>
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	e1eb      	b.n	8004846 <PMW3901_Init+0x6c2>
 800446e:	bf00      	nop
 8004470:	20000708 	.word	0x20000708
	status = PMW3901_RegWrite(0x45, 0x60); if(status) return status;
 8004474:	2160      	movs	r1, #96	; 0x60
 8004476:	2045      	movs	r0, #69	; 0x45
 8004478:	f7ff fdda 	bl	8004030 <PMW3901_RegWrite>
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <PMW3901_Init+0x306>
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	e1dd      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 800448a:	2100      	movs	r1, #0
 800448c:	207f      	movs	r0, #127	; 0x7f
 800448e:	f7ff fdcf 	bl	8004030 <PMW3901_RegWrite>
 8004492:	4603      	mov	r3, r0
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <PMW3901_Init+0x31c>
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	e1d2      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4D, 0x11); if(status) return status;
 80044a0:	2111      	movs	r1, #17
 80044a2:	204d      	movs	r0, #77	; 0x4d
 80044a4:	f7ff fdc4 	bl	8004030 <PMW3901_RegWrite>
 80044a8:	4603      	mov	r3, r0
 80044aa:	73fb      	strb	r3, [r7, #15]
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <PMW3901_Init+0x332>
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	e1c7      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x55, 0x80); if(status) return status;
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	2055      	movs	r0, #85	; 0x55
 80044ba:	f7ff fdb9 	bl	8004030 <PMW3901_RegWrite>
 80044be:	4603      	mov	r3, r0
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <PMW3901_Init+0x348>
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	e1bc      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x74, 0x1F); if(status) return status;
 80044cc:	211f      	movs	r1, #31
 80044ce:	2074      	movs	r0, #116	; 0x74
 80044d0:	f7ff fdae 	bl	8004030 <PMW3901_RegWrite>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <PMW3901_Init+0x35e>
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	e1b1      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x75, 0x1F); if(status) return status;
 80044e2:	211f      	movs	r1, #31
 80044e4:	2075      	movs	r0, #117	; 0x75
 80044e6:	f7ff fda3 	bl	8004030 <PMW3901_RegWrite>
 80044ea:	4603      	mov	r3, r0
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <PMW3901_Init+0x374>
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	e1a6      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4A, 0x78); if(status) return status;
 80044f8:	2178      	movs	r1, #120	; 0x78
 80044fa:	204a      	movs	r0, #74	; 0x4a
 80044fc:	f7ff fd98 	bl	8004030 <PMW3901_RegWrite>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <PMW3901_Init+0x38a>
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	e19b      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x78); if(status) return status;
 800450e:	2178      	movs	r1, #120	; 0x78
 8004510:	204b      	movs	r0, #75	; 0x4b
 8004512:	f7ff fd8d 	bl	8004030 <PMW3901_RegWrite>
 8004516:	4603      	mov	r3, r0
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <PMW3901_Init+0x3a0>
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	e190      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x08); if(status) return status;
 8004524:	2108      	movs	r1, #8
 8004526:	2044      	movs	r0, #68	; 0x44
 8004528:	f7ff fd82 	bl	8004030 <PMW3901_RegWrite>
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <PMW3901_Init+0x3b6>
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	e185      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x50); if(status) return status;
 800453a:	2150      	movs	r1, #80	; 0x50
 800453c:	2045      	movs	r0, #69	; 0x45
 800453e:	f7ff fd77 	bl	8004030 <PMW3901_RegWrite>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <PMW3901_Init+0x3cc>
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	e17a      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x64, 0xFF); if(status) return status;
 8004550:	21ff      	movs	r1, #255	; 0xff
 8004552:	2064      	movs	r0, #100	; 0x64
 8004554:	f7ff fd6c 	bl	8004030 <PMW3901_RegWrite>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <PMW3901_Init+0x3e2>
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	e16f      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x1F); if(status) return status;
 8004566:	211f      	movs	r1, #31
 8004568:	2065      	movs	r0, #101	; 0x65
 800456a:	f7ff fd61 	bl	8004030 <PMW3901_RegWrite>
 800456e:	4603      	mov	r3, r0
 8004570:	73fb      	strb	r3, [r7, #15]
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <PMW3901_Init+0x3f8>
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	e164      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x14); if(status) return status;
 800457c:	2114      	movs	r1, #20
 800457e:	207f      	movs	r0, #127	; 0x7f
 8004580:	f7ff fd56 	bl	8004030 <PMW3901_RegWrite>
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <PMW3901_Init+0x40e>
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	e159      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x60); if(status) return status;
 8004592:	2160      	movs	r1, #96	; 0x60
 8004594:	2065      	movs	r0, #101	; 0x65
 8004596:	f7ff fd4b 	bl	8004030 <PMW3901_RegWrite>
 800459a:	4603      	mov	r3, r0
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <PMW3901_Init+0x424>
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	e14e      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x66, 0x08); if(status) return status;
 80045a8:	2108      	movs	r1, #8
 80045aa:	2066      	movs	r0, #102	; 0x66
 80045ac:	f7ff fd40 	bl	8004030 <PMW3901_RegWrite>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <PMW3901_Init+0x43a>
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	e143      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x78); if(status) return status;
 80045be:	2178      	movs	r1, #120	; 0x78
 80045c0:	2063      	movs	r0, #99	; 0x63
 80045c2:	f7ff fd35 	bl	8004030 <PMW3901_RegWrite>
 80045c6:	4603      	mov	r3, r0
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <PMW3901_Init+0x450>
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	e138      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x15); if(status) return status;
 80045d4:	2115      	movs	r1, #21
 80045d6:	207f      	movs	r0, #127	; 0x7f
 80045d8:	f7ff fd2a 	bl	8004030 <PMW3901_RegWrite>
 80045dc:	4603      	mov	r3, r0
 80045de:	73fb      	strb	r3, [r7, #15]
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <PMW3901_Init+0x466>
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	e12d      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x58); if(status) return status;
 80045ea:	2158      	movs	r1, #88	; 0x58
 80045ec:	2048      	movs	r0, #72	; 0x48
 80045ee:	f7ff fd1f 	bl	8004030 <PMW3901_RegWrite>
 80045f2:	4603      	mov	r3, r0
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <PMW3901_Init+0x47c>
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	e122      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8004600:	2107      	movs	r1, #7
 8004602:	207f      	movs	r0, #127	; 0x7f
 8004604:	f7ff fd14 	bl	8004030 <PMW3901_RegWrite>
 8004608:	4603      	mov	r3, r0
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <PMW3901_Init+0x492>
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	e117      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0x0D); if(status) return status;
 8004616:	210d      	movs	r1, #13
 8004618:	2041      	movs	r0, #65	; 0x41
 800461a:	f7ff fd09 	bl	8004030 <PMW3901_RegWrite>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <PMW3901_Init+0x4a8>
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	e10c      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0x14); if(status) return status;
 800462c:	2114      	movs	r1, #20
 800462e:	2043      	movs	r0, #67	; 0x43
 8004630:	f7ff fcfe 	bl	8004030 <PMW3901_RegWrite>
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <PMW3901_Init+0x4be>
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	e101      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x0E); if(status) return status;
 8004642:	210e      	movs	r1, #14
 8004644:	204b      	movs	r0, #75	; 0x4b
 8004646:	f7ff fcf3 	bl	8004030 <PMW3901_RegWrite>
 800464a:	4603      	mov	r3, r0
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <PMW3901_Init+0x4d4>
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	e0f6      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x0F); if(status) return status;
 8004658:	210f      	movs	r1, #15
 800465a:	2045      	movs	r0, #69	; 0x45
 800465c:	f7ff fce8 	bl	8004030 <PMW3901_RegWrite>
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <PMW3901_Init+0x4ea>
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	e0eb      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x42); if(status) return status;
 800466e:	2142      	movs	r1, #66	; 0x42
 8004670:	2044      	movs	r0, #68	; 0x44
 8004672:	f7ff fcdd 	bl	8004030 <PMW3901_RegWrite>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <PMW3901_Init+0x500>
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	e0e0      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4C, 0x80); if(status) return status;
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	204c      	movs	r0, #76	; 0x4c
 8004688:	f7ff fcd2 	bl	8004030 <PMW3901_RegWrite>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <PMW3901_Init+0x516>
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	e0d5      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x10); if(status) return status;
 800469a:	2110      	movs	r1, #16
 800469c:	207f      	movs	r0, #127	; 0x7f
 800469e:	f7ff fcc7 	bl	8004030 <PMW3901_RegWrite>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <PMW3901_Init+0x52c>
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	e0ca      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x02); if(status) return status;
 80046b0:	2102      	movs	r1, #2
 80046b2:	205b      	movs	r0, #91	; 0x5b
 80046b4:	f7ff fcbc 	bl	8004030 <PMW3901_RegWrite>
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <PMW3901_Init+0x542>
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	e0bf      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 80046c6:	2107      	movs	r1, #7
 80046c8:	207f      	movs	r0, #127	; 0x7f
 80046ca:	f7ff fcb1 	bl	8004030 <PMW3901_RegWrite>
 80046ce:	4603      	mov	r3, r0
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <PMW3901_Init+0x558>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	e0b4      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x41); if(status) return status;
 80046dc:	2141      	movs	r1, #65	; 0x41
 80046de:	2040      	movs	r0, #64	; 0x40
 80046e0:	f7ff fca6 	bl	8004030 <PMW3901_RegWrite>
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <PMW3901_Init+0x56e>
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	e0a9      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x70, 0x00); if(status) return status;
 80046f2:	2100      	movs	r1, #0
 80046f4:	2070      	movs	r0, #112	; 0x70
 80046f6:	f7ff fc9b 	bl	8004030 <PMW3901_RegWrite>
 80046fa:	4603      	mov	r3, r0
 80046fc:	73fb      	strb	r3, [r7, #15]
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <PMW3901_Init+0x584>
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	e09e      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x32, 0x44); if(status) return status;
 8004708:	2144      	movs	r1, #68	; 0x44
 800470a:	2032      	movs	r0, #50	; 0x32
 800470c:	f7ff fc90 	bl	8004030 <PMW3901_RegWrite>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <PMW3901_Init+0x59a>
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	e093      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 800471e:	2107      	movs	r1, #7
 8004720:	207f      	movs	r0, #127	; 0x7f
 8004722:	f7ff fc85 	bl	8004030 <PMW3901_RegWrite>
 8004726:	4603      	mov	r3, r0
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <PMW3901_Init+0x5b0>
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	e088      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x40); if(status) return status;
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	2040      	movs	r0, #64	; 0x40
 8004738:	f7ff fc7a 	bl	8004030 <PMW3901_RegWrite>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <PMW3901_Init+0x5c6>
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	e07d      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 800474a:	2106      	movs	r1, #6
 800474c:	207f      	movs	r0, #127	; 0x7f
 800474e:	f7ff fc6f 	bl	8004030 <PMW3901_RegWrite>
 8004752:	4603      	mov	r3, r0
 8004754:	73fb      	strb	r3, [r7, #15]
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <PMW3901_Init+0x5dc>
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	e072      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0xf0); if(status) return status;
 8004760:	21f0      	movs	r1, #240	; 0xf0
 8004762:	2062      	movs	r0, #98	; 0x62
 8004764:	f7ff fc64 	bl	8004030 <PMW3901_RegWrite>
 8004768:	4603      	mov	r3, r0
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <PMW3901_Init+0x5f2>
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	e067      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x00); if(status) return status;
 8004776:	2100      	movs	r1, #0
 8004778:	2063      	movs	r0, #99	; 0x63
 800477a:	f7ff fc59 	bl	8004030 <PMW3901_RegWrite>
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <PMW3901_Init+0x608>
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	e05c      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0D); if(status) return status;
 800478c:	210d      	movs	r1, #13
 800478e:	207f      	movs	r0, #127	; 0x7f
 8004790:	f7ff fc4e 	bl	8004030 <PMW3901_RegWrite>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <PMW3901_Init+0x61e>
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	e051      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0xC0); if(status) return status;
 80047a2:	21c0      	movs	r1, #192	; 0xc0
 80047a4:	2048      	movs	r0, #72	; 0x48
 80047a6:	f7ff fc43 	bl	8004030 <PMW3901_RegWrite>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <PMW3901_Init+0x634>
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	e046      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6F, 0xd5); if(status) return status;
 80047b8:	21d5      	movs	r1, #213	; 0xd5
 80047ba:	206f      	movs	r0, #111	; 0x6f
 80047bc:	f7ff fc38 	bl	8004030 <PMW3901_RegWrite>
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <PMW3901_Init+0x64a>
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	e03b      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 80047ce:	2100      	movs	r1, #0
 80047d0:	207f      	movs	r0, #127	; 0x7f
 80047d2:	f7ff fc2d 	bl	8004030 <PMW3901_RegWrite>
 80047d6:	4603      	mov	r3, r0
 80047d8:	73fb      	strb	r3, [r7, #15]
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <PMW3901_Init+0x660>
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	e030      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0xa0); if(status) return status;
 80047e4:	21a0      	movs	r1, #160	; 0xa0
 80047e6:	205b      	movs	r0, #91	; 0x5b
 80047e8:	f7ff fc22 	bl	8004030 <PMW3901_RegWrite>
 80047ec:	4603      	mov	r3, r0
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <PMW3901_Init+0x676>
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	e025      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0xA8); if(status) return status;
 80047fa:	21a8      	movs	r1, #168	; 0xa8
 80047fc:	204e      	movs	r0, #78	; 0x4e
 80047fe:	f7ff fc17 	bl	8004030 <PMW3901_RegWrite>
 8004802:	4603      	mov	r3, r0
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <PMW3901_Init+0x68c>
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	e01a      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5A, 0x50); if(status) return status;
 8004810:	2150      	movs	r1, #80	; 0x50
 8004812:	205a      	movs	r0, #90	; 0x5a
 8004814:	f7ff fc0c 	bl	8004030 <PMW3901_RegWrite>
 8004818:	4603      	mov	r3, r0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <PMW3901_Init+0x6a2>
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	e00f      	b.n	8004846 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x80); if(status) return status;
 8004826:	2180      	movs	r1, #128	; 0x80
 8004828:	2040      	movs	r0, #64	; 0x40
 800482a:	f7ff fc01 	bl	8004030 <PMW3901_RegWrite>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <PMW3901_Init+0x6b8>
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	e004      	b.n	8004846 <PMW3901_Init+0x6c2>

	status = PMW3901_SetLed();
 800483c:	f7ff fc7e 	bl	800413c <PMW3901_SetLed>
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]

	return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop

08004850 <PMW3901_Read_Variation>:

PMW3901_Status_t PMW3901_Read_Variation(int16_t *x, int16_t *y)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]

	PMW3901_Status_t status;
	PMW3901_Unify_2x8_to_16_t data;
	uint8_t truc_inconnu;

	status = PMW3901_RegRead(0x02, &truc_inconnu);
 800485a:	f107 030b 	add.w	r3, r7, #11
 800485e:	4619      	mov	r1, r3
 8004860:	2002      	movs	r0, #2
 8004862:	f7ff fc21 	bl	80040a8 <PMW3901_RegRead>
 8004866:	4603      	mov	r3, r0
 8004868:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <PMW3901_Read_Variation+0x24>
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	e03e      	b.n	80048f2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_H, &data.raw[1]);
 8004874:	f107 030c 	add.w	r3, r7, #12
 8004878:	3301      	adds	r3, #1
 800487a:	4619      	mov	r1, r3
 800487c:	2004      	movs	r0, #4
 800487e:	f7ff fc13 	bl	80040a8 <PMW3901_RegRead>
 8004882:	4603      	mov	r3, r0
 8004884:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <PMW3901_Read_Variation+0x40>
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	e030      	b.n	80048f2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_L, &data.raw[0]);
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	4619      	mov	r1, r3
 8004896:	2003      	movs	r0, #3
 8004898:	f7ff fc06 	bl	80040a8 <PMW3901_RegRead>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <PMW3901_Read_Variation+0x5a>
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	e023      	b.n	80048f2 <PMW3901_Read_Variation+0xa2>

	*x = data.unified;
 80048aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	801a      	strh	r2, [r3, #0]

	status = PMW3901_RegRead(DELTA_Y_H, &data.raw[1]);
 80048b2:	f107 030c 	add.w	r3, r7, #12
 80048b6:	3301      	adds	r3, #1
 80048b8:	4619      	mov	r1, r3
 80048ba:	2006      	movs	r0, #6
 80048bc:	f7ff fbf4 	bl	80040a8 <PMW3901_RegRead>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <PMW3901_Read_Variation+0x7e>
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	e011      	b.n	80048f2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_Y_L, &data.raw[0]);
 80048ce:	f107 030c 	add.w	r3, r7, #12
 80048d2:	4619      	mov	r1, r3
 80048d4:	2005      	movs	r0, #5
 80048d6:	f7ff fbe7 	bl	80040a8 <PMW3901_RegRead>
 80048da:	4603      	mov	r3, r0
 80048dc:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <PMW3901_Read_Variation+0x98>
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	e004      	b.n	80048f2 <PMW3901_Read_Variation+0xa2>

	*y = data.unified;
 80048e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	801a      	strh	r2, [r3, #0]

	return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <__errno>:
 80048fc:	4b01      	ldr	r3, [pc, #4]	; (8004904 <__errno+0x8>)
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000018 	.word	0x20000018

08004908 <__libc_init_array>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4d0d      	ldr	r5, [pc, #52]	; (8004940 <__libc_init_array+0x38>)
 800490c:	4c0d      	ldr	r4, [pc, #52]	; (8004944 <__libc_init_array+0x3c>)
 800490e:	1b64      	subs	r4, r4, r5
 8004910:	10a4      	asrs	r4, r4, #2
 8004912:	2600      	movs	r6, #0
 8004914:	42a6      	cmp	r6, r4
 8004916:	d109      	bne.n	800492c <__libc_init_array+0x24>
 8004918:	4d0b      	ldr	r5, [pc, #44]	; (8004948 <__libc_init_array+0x40>)
 800491a:	4c0c      	ldr	r4, [pc, #48]	; (800494c <__libc_init_array+0x44>)
 800491c:	f002 feb6 	bl	800768c <_init>
 8004920:	1b64      	subs	r4, r4, r5
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	2600      	movs	r6, #0
 8004926:	42a6      	cmp	r6, r4
 8004928:	d105      	bne.n	8004936 <__libc_init_array+0x2e>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004930:	4798      	blx	r3
 8004932:	3601      	adds	r6, #1
 8004934:	e7ee      	b.n	8004914 <__libc_init_array+0xc>
 8004936:	f855 3b04 	ldr.w	r3, [r5], #4
 800493a:	4798      	blx	r3
 800493c:	3601      	adds	r6, #1
 800493e:	e7f2      	b.n	8004926 <__libc_init_array+0x1e>
 8004940:	08007b04 	.word	0x08007b04
 8004944:	08007b04 	.word	0x08007b04
 8004948:	08007b04 	.word	0x08007b04
 800494c:	08007b08 	.word	0x08007b08

08004950 <memset>:
 8004950:	4402      	add	r2, r0
 8004952:	4603      	mov	r3, r0
 8004954:	4293      	cmp	r3, r2
 8004956:	d100      	bne.n	800495a <memset+0xa>
 8004958:	4770      	bx	lr
 800495a:	f803 1b01 	strb.w	r1, [r3], #1
 800495e:	e7f9      	b.n	8004954 <memset+0x4>

08004960 <__cvt>:
 8004960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	ec55 4b10 	vmov	r4, r5, d0
 8004968:	2d00      	cmp	r5, #0
 800496a:	460e      	mov	r6, r1
 800496c:	4619      	mov	r1, r3
 800496e:	462b      	mov	r3, r5
 8004970:	bfbb      	ittet	lt
 8004972:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004976:	461d      	movlt	r5, r3
 8004978:	2300      	movge	r3, #0
 800497a:	232d      	movlt	r3, #45	; 0x2d
 800497c:	700b      	strb	r3, [r1, #0]
 800497e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004980:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004984:	4691      	mov	r9, r2
 8004986:	f023 0820 	bic.w	r8, r3, #32
 800498a:	bfbc      	itt	lt
 800498c:	4622      	movlt	r2, r4
 800498e:	4614      	movlt	r4, r2
 8004990:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004994:	d005      	beq.n	80049a2 <__cvt+0x42>
 8004996:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800499a:	d100      	bne.n	800499e <__cvt+0x3e>
 800499c:	3601      	adds	r6, #1
 800499e:	2102      	movs	r1, #2
 80049a0:	e000      	b.n	80049a4 <__cvt+0x44>
 80049a2:	2103      	movs	r1, #3
 80049a4:	ab03      	add	r3, sp, #12
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	ab02      	add	r3, sp, #8
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	ec45 4b10 	vmov	d0, r4, r5
 80049b0:	4653      	mov	r3, sl
 80049b2:	4632      	mov	r2, r6
 80049b4:	f000 fcec 	bl	8005390 <_dtoa_r>
 80049b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049bc:	4607      	mov	r7, r0
 80049be:	d102      	bne.n	80049c6 <__cvt+0x66>
 80049c0:	f019 0f01 	tst.w	r9, #1
 80049c4:	d022      	beq.n	8004a0c <__cvt+0xac>
 80049c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ca:	eb07 0906 	add.w	r9, r7, r6
 80049ce:	d110      	bne.n	80049f2 <__cvt+0x92>
 80049d0:	783b      	ldrb	r3, [r7, #0]
 80049d2:	2b30      	cmp	r3, #48	; 0x30
 80049d4:	d10a      	bne.n	80049ec <__cvt+0x8c>
 80049d6:	2200      	movs	r2, #0
 80049d8:	2300      	movs	r3, #0
 80049da:	4620      	mov	r0, r4
 80049dc:	4629      	mov	r1, r5
 80049de:	f7fc f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80049e2:	b918      	cbnz	r0, 80049ec <__cvt+0x8c>
 80049e4:	f1c6 0601 	rsb	r6, r6, #1
 80049e8:	f8ca 6000 	str.w	r6, [sl]
 80049ec:	f8da 3000 	ldr.w	r3, [sl]
 80049f0:	4499      	add	r9, r3
 80049f2:	2200      	movs	r2, #0
 80049f4:	2300      	movs	r3, #0
 80049f6:	4620      	mov	r0, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	f7fc f865 	bl	8000ac8 <__aeabi_dcmpeq>
 80049fe:	b108      	cbz	r0, 8004a04 <__cvt+0xa4>
 8004a00:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a04:	2230      	movs	r2, #48	; 0x30
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	454b      	cmp	r3, r9
 8004a0a:	d307      	bcc.n	8004a1c <__cvt+0xbc>
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a10:	1bdb      	subs	r3, r3, r7
 8004a12:	4638      	mov	r0, r7
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	b004      	add	sp, #16
 8004a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1c:	1c59      	adds	r1, r3, #1
 8004a1e:	9103      	str	r1, [sp, #12]
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	e7f0      	b.n	8004a06 <__cvt+0xa6>

08004a24 <__exponent>:
 8004a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a26:	4603      	mov	r3, r0
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	bfb8      	it	lt
 8004a2c:	4249      	neglt	r1, r1
 8004a2e:	f803 2b02 	strb.w	r2, [r3], #2
 8004a32:	bfb4      	ite	lt
 8004a34:	222d      	movlt	r2, #45	; 0x2d
 8004a36:	222b      	movge	r2, #43	; 0x2b
 8004a38:	2909      	cmp	r1, #9
 8004a3a:	7042      	strb	r2, [r0, #1]
 8004a3c:	dd2a      	ble.n	8004a94 <__exponent+0x70>
 8004a3e:	f10d 0407 	add.w	r4, sp, #7
 8004a42:	46a4      	mov	ip, r4
 8004a44:	270a      	movs	r7, #10
 8004a46:	46a6      	mov	lr, r4
 8004a48:	460a      	mov	r2, r1
 8004a4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a4e:	fb07 1516 	mls	r5, r7, r6, r1
 8004a52:	3530      	adds	r5, #48	; 0x30
 8004a54:	2a63      	cmp	r2, #99	; 0x63
 8004a56:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a5e:	4631      	mov	r1, r6
 8004a60:	dcf1      	bgt.n	8004a46 <__exponent+0x22>
 8004a62:	3130      	adds	r1, #48	; 0x30
 8004a64:	f1ae 0502 	sub.w	r5, lr, #2
 8004a68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a6c:	1c44      	adds	r4, r0, #1
 8004a6e:	4629      	mov	r1, r5
 8004a70:	4561      	cmp	r1, ip
 8004a72:	d30a      	bcc.n	8004a8a <__exponent+0x66>
 8004a74:	f10d 0209 	add.w	r2, sp, #9
 8004a78:	eba2 020e 	sub.w	r2, r2, lr
 8004a7c:	4565      	cmp	r5, ip
 8004a7e:	bf88      	it	hi
 8004a80:	2200      	movhi	r2, #0
 8004a82:	4413      	add	r3, r2
 8004a84:	1a18      	subs	r0, r3, r0
 8004a86:	b003      	add	sp, #12
 8004a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a92:	e7ed      	b.n	8004a70 <__exponent+0x4c>
 8004a94:	2330      	movs	r3, #48	; 0x30
 8004a96:	3130      	adds	r1, #48	; 0x30
 8004a98:	7083      	strb	r3, [r0, #2]
 8004a9a:	70c1      	strb	r1, [r0, #3]
 8004a9c:	1d03      	adds	r3, r0, #4
 8004a9e:	e7f1      	b.n	8004a84 <__exponent+0x60>

08004aa0 <_printf_float>:
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	ed2d 8b02 	vpush	{d8}
 8004aa8:	b08d      	sub	sp, #52	; 0x34
 8004aaa:	460c      	mov	r4, r1
 8004aac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ab0:	4616      	mov	r6, r2
 8004ab2:	461f      	mov	r7, r3
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	f001 fa57 	bl	8005f68 <_localeconv_r>
 8004aba:	f8d0 a000 	ldr.w	sl, [r0]
 8004abe:	4650      	mov	r0, sl
 8004ac0:	f7fb fb86 	bl	80001d0 <strlen>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	9305      	str	r3, [sp, #20]
 8004acc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ad4:	3307      	adds	r3, #7
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	f103 0208 	add.w	r2, r3, #8
 8004ade:	f8c8 2000 	str.w	r2, [r8]
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004aea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004aee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004af2:	9307      	str	r3, [sp, #28]
 8004af4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004af8:	ee08 0a10 	vmov	s16, r0
 8004afc:	4b9f      	ldr	r3, [pc, #636]	; (8004d7c <_printf_float+0x2dc>)
 8004afe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	f7fc f811 	bl	8000b2c <__aeabi_dcmpun>
 8004b0a:	bb88      	cbnz	r0, 8004b70 <_printf_float+0xd0>
 8004b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b10:	4b9a      	ldr	r3, [pc, #616]	; (8004d7c <_printf_float+0x2dc>)
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	f7fb ffeb 	bl	8000af0 <__aeabi_dcmple>
 8004b1a:	bb48      	cbnz	r0, 8004b70 <_printf_float+0xd0>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2300      	movs	r3, #0
 8004b20:	4640      	mov	r0, r8
 8004b22:	4649      	mov	r1, r9
 8004b24:	f7fb ffda 	bl	8000adc <__aeabi_dcmplt>
 8004b28:	b110      	cbz	r0, 8004b30 <_printf_float+0x90>
 8004b2a:	232d      	movs	r3, #45	; 0x2d
 8004b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b30:	4b93      	ldr	r3, [pc, #588]	; (8004d80 <_printf_float+0x2e0>)
 8004b32:	4894      	ldr	r0, [pc, #592]	; (8004d84 <_printf_float+0x2e4>)
 8004b34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b38:	bf94      	ite	ls
 8004b3a:	4698      	movls	r8, r3
 8004b3c:	4680      	movhi	r8, r0
 8004b3e:	2303      	movs	r3, #3
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	9b05      	ldr	r3, [sp, #20]
 8004b44:	f023 0204 	bic.w	r2, r3, #4
 8004b48:	6022      	str	r2, [r4, #0]
 8004b4a:	f04f 0900 	mov.w	r9, #0
 8004b4e:	9700      	str	r7, [sp, #0]
 8004b50:	4633      	mov	r3, r6
 8004b52:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b54:	4621      	mov	r1, r4
 8004b56:	4628      	mov	r0, r5
 8004b58:	f000 f9d8 	bl	8004f0c <_printf_common>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f040 8090 	bne.w	8004c82 <_printf_float+0x1e2>
 8004b62:	f04f 30ff 	mov.w	r0, #4294967295
 8004b66:	b00d      	add	sp, #52	; 0x34
 8004b68:	ecbd 8b02 	vpop	{d8}
 8004b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b70:	4642      	mov	r2, r8
 8004b72:	464b      	mov	r3, r9
 8004b74:	4640      	mov	r0, r8
 8004b76:	4649      	mov	r1, r9
 8004b78:	f7fb ffd8 	bl	8000b2c <__aeabi_dcmpun>
 8004b7c:	b140      	cbz	r0, 8004b90 <_printf_float+0xf0>
 8004b7e:	464b      	mov	r3, r9
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bfbc      	itt	lt
 8004b84:	232d      	movlt	r3, #45	; 0x2d
 8004b86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b8a:	487f      	ldr	r0, [pc, #508]	; (8004d88 <_printf_float+0x2e8>)
 8004b8c:	4b7f      	ldr	r3, [pc, #508]	; (8004d8c <_printf_float+0x2ec>)
 8004b8e:	e7d1      	b.n	8004b34 <_printf_float+0x94>
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b96:	9206      	str	r2, [sp, #24]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	d13f      	bne.n	8004c1c <_printf_float+0x17c>
 8004b9c:	2306      	movs	r3, #6
 8004b9e:	6063      	str	r3, [r4, #4]
 8004ba0:	9b05      	ldr	r3, [sp, #20]
 8004ba2:	6861      	ldr	r1, [r4, #4]
 8004ba4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9303      	str	r3, [sp, #12]
 8004bac:	ab0a      	add	r3, sp, #40	; 0x28
 8004bae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bb2:	ab09      	add	r3, sp, #36	; 0x24
 8004bb4:	ec49 8b10 	vmov	d0, r8, r9
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	6022      	str	r2, [r4, #0]
 8004bbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f7ff fecd 	bl	8004960 <__cvt>
 8004bc6:	9b06      	ldr	r3, [sp, #24]
 8004bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bca:	2b47      	cmp	r3, #71	; 0x47
 8004bcc:	4680      	mov	r8, r0
 8004bce:	d108      	bne.n	8004be2 <_printf_float+0x142>
 8004bd0:	1cc8      	adds	r0, r1, #3
 8004bd2:	db02      	blt.n	8004bda <_printf_float+0x13a>
 8004bd4:	6863      	ldr	r3, [r4, #4]
 8004bd6:	4299      	cmp	r1, r3
 8004bd8:	dd41      	ble.n	8004c5e <_printf_float+0x1be>
 8004bda:	f1ab 0b02 	sub.w	fp, fp, #2
 8004bde:	fa5f fb8b 	uxtb.w	fp, fp
 8004be2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004be6:	d820      	bhi.n	8004c2a <_printf_float+0x18a>
 8004be8:	3901      	subs	r1, #1
 8004bea:	465a      	mov	r2, fp
 8004bec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bf0:	9109      	str	r1, [sp, #36]	; 0x24
 8004bf2:	f7ff ff17 	bl	8004a24 <__exponent>
 8004bf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bf8:	1813      	adds	r3, r2, r0
 8004bfa:	2a01      	cmp	r2, #1
 8004bfc:	4681      	mov	r9, r0
 8004bfe:	6123      	str	r3, [r4, #16]
 8004c00:	dc02      	bgt.n	8004c08 <_printf_float+0x168>
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	07d2      	lsls	r2, r2, #31
 8004c06:	d501      	bpl.n	8004c0c <_printf_float+0x16c>
 8004c08:	3301      	adds	r3, #1
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d09c      	beq.n	8004b4e <_printf_float+0xae>
 8004c14:	232d      	movs	r3, #45	; 0x2d
 8004c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1a:	e798      	b.n	8004b4e <_printf_float+0xae>
 8004c1c:	9a06      	ldr	r2, [sp, #24]
 8004c1e:	2a47      	cmp	r2, #71	; 0x47
 8004c20:	d1be      	bne.n	8004ba0 <_printf_float+0x100>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1bc      	bne.n	8004ba0 <_printf_float+0x100>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e7b9      	b.n	8004b9e <_printf_float+0xfe>
 8004c2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c2e:	d118      	bne.n	8004c62 <_printf_float+0x1c2>
 8004c30:	2900      	cmp	r1, #0
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	dd0b      	ble.n	8004c4e <_printf_float+0x1ae>
 8004c36:	6121      	str	r1, [r4, #16]
 8004c38:	b913      	cbnz	r3, 8004c40 <_printf_float+0x1a0>
 8004c3a:	6822      	ldr	r2, [r4, #0]
 8004c3c:	07d0      	lsls	r0, r2, #31
 8004c3e:	d502      	bpl.n	8004c46 <_printf_float+0x1a6>
 8004c40:	3301      	adds	r3, #1
 8004c42:	440b      	add	r3, r1
 8004c44:	6123      	str	r3, [r4, #16]
 8004c46:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c48:	f04f 0900 	mov.w	r9, #0
 8004c4c:	e7de      	b.n	8004c0c <_printf_float+0x16c>
 8004c4e:	b913      	cbnz	r3, 8004c56 <_printf_float+0x1b6>
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	07d2      	lsls	r2, r2, #31
 8004c54:	d501      	bpl.n	8004c5a <_printf_float+0x1ba>
 8004c56:	3302      	adds	r3, #2
 8004c58:	e7f4      	b.n	8004c44 <_printf_float+0x1a4>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7f2      	b.n	8004c44 <_printf_float+0x1a4>
 8004c5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c64:	4299      	cmp	r1, r3
 8004c66:	db05      	blt.n	8004c74 <_printf_float+0x1d4>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	6121      	str	r1, [r4, #16]
 8004c6c:	07d8      	lsls	r0, r3, #31
 8004c6e:	d5ea      	bpl.n	8004c46 <_printf_float+0x1a6>
 8004c70:	1c4b      	adds	r3, r1, #1
 8004c72:	e7e7      	b.n	8004c44 <_printf_float+0x1a4>
 8004c74:	2900      	cmp	r1, #0
 8004c76:	bfd4      	ite	le
 8004c78:	f1c1 0202 	rsble	r2, r1, #2
 8004c7c:	2201      	movgt	r2, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	e7e0      	b.n	8004c44 <_printf_float+0x1a4>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	055a      	lsls	r2, r3, #21
 8004c86:	d407      	bmi.n	8004c98 <_printf_float+0x1f8>
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	d12c      	bne.n	8004cf0 <_printf_float+0x250>
 8004c96:	e764      	b.n	8004b62 <_printf_float+0xc2>
 8004c98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c9c:	f240 80e0 	bls.w	8004e60 <_printf_float+0x3c0>
 8004ca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f7fb ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d034      	beq.n	8004d1a <_printf_float+0x27a>
 8004cb0:	4a37      	ldr	r2, [pc, #220]	; (8004d90 <_printf_float+0x2f0>)
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af51 	beq.w	8004b62 <_printf_float+0xc2>
 8004cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	db02      	blt.n	8004cce <_printf_float+0x22e>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07d8      	lsls	r0, r3, #31
 8004ccc:	d510      	bpl.n	8004cf0 <_printf_float+0x250>
 8004cce:	ee18 3a10 	vmov	r3, s16
 8004cd2:	4652      	mov	r2, sl
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f af41 	beq.w	8004b62 <_printf_float+0xc2>
 8004ce0:	f04f 0800 	mov.w	r8, #0
 8004ce4:	f104 091a 	add.w	r9, r4, #26
 8004ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	4543      	cmp	r3, r8
 8004cee:	dc09      	bgt.n	8004d04 <_printf_float+0x264>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	079b      	lsls	r3, r3, #30
 8004cf4:	f100 8105 	bmi.w	8004f02 <_printf_float+0x462>
 8004cf8:	68e0      	ldr	r0, [r4, #12]
 8004cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cfc:	4298      	cmp	r0, r3
 8004cfe:	bfb8      	it	lt
 8004d00:	4618      	movlt	r0, r3
 8004d02:	e730      	b.n	8004b66 <_printf_float+0xc6>
 8004d04:	2301      	movs	r3, #1
 8004d06:	464a      	mov	r2, r9
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f af27 	beq.w	8004b62 <_printf_float+0xc2>
 8004d14:	f108 0801 	add.w	r8, r8, #1
 8004d18:	e7e6      	b.n	8004ce8 <_printf_float+0x248>
 8004d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dc39      	bgt.n	8004d94 <_printf_float+0x2f4>
 8004d20:	4a1b      	ldr	r2, [pc, #108]	; (8004d90 <_printf_float+0x2f0>)
 8004d22:	2301      	movs	r3, #1
 8004d24:	4631      	mov	r1, r6
 8004d26:	4628      	mov	r0, r5
 8004d28:	47b8      	blx	r7
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	f43f af19 	beq.w	8004b62 <_printf_float+0xc2>
 8004d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d34:	4313      	orrs	r3, r2
 8004d36:	d102      	bne.n	8004d3e <_printf_float+0x29e>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	07d9      	lsls	r1, r3, #31
 8004d3c:	d5d8      	bpl.n	8004cf0 <_printf_float+0x250>
 8004d3e:	ee18 3a10 	vmov	r3, s16
 8004d42:	4652      	mov	r2, sl
 8004d44:	4631      	mov	r1, r6
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f43f af09 	beq.w	8004b62 <_printf_float+0xc2>
 8004d50:	f04f 0900 	mov.w	r9, #0
 8004d54:	f104 0a1a 	add.w	sl, r4, #26
 8004d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5a:	425b      	negs	r3, r3
 8004d5c:	454b      	cmp	r3, r9
 8004d5e:	dc01      	bgt.n	8004d64 <_printf_float+0x2c4>
 8004d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d62:	e792      	b.n	8004c8a <_printf_float+0x1ea>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4652      	mov	r2, sl
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	47b8      	blx	r7
 8004d6e:	3001      	adds	r0, #1
 8004d70:	f43f aef7 	beq.w	8004b62 <_printf_float+0xc2>
 8004d74:	f109 0901 	add.w	r9, r9, #1
 8004d78:	e7ee      	b.n	8004d58 <_printf_float+0x2b8>
 8004d7a:	bf00      	nop
 8004d7c:	7fefffff 	.word	0x7fefffff
 8004d80:	08007724 	.word	0x08007724
 8004d84:	08007728 	.word	0x08007728
 8004d88:	08007730 	.word	0x08007730
 8004d8c:	0800772c 	.word	0x0800772c
 8004d90:	08007734 	.word	0x08007734
 8004d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	bfa8      	it	ge
 8004d9c:	461a      	movge	r2, r3
 8004d9e:	2a00      	cmp	r2, #0
 8004da0:	4691      	mov	r9, r2
 8004da2:	dc37      	bgt.n	8004e14 <_printf_float+0x374>
 8004da4:	f04f 0b00 	mov.w	fp, #0
 8004da8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dac:	f104 021a 	add.w	r2, r4, #26
 8004db0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004db2:	9305      	str	r3, [sp, #20]
 8004db4:	eba3 0309 	sub.w	r3, r3, r9
 8004db8:	455b      	cmp	r3, fp
 8004dba:	dc33      	bgt.n	8004e24 <_printf_float+0x384>
 8004dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	db3b      	blt.n	8004e3c <_printf_float+0x39c>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	07da      	lsls	r2, r3, #31
 8004dc8:	d438      	bmi.n	8004e3c <_printf_float+0x39c>
 8004dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dcc:	9b05      	ldr	r3, [sp, #20]
 8004dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	eba2 0901 	sub.w	r9, r2, r1
 8004dd6:	4599      	cmp	r9, r3
 8004dd8:	bfa8      	it	ge
 8004dda:	4699      	movge	r9, r3
 8004ddc:	f1b9 0f00 	cmp.w	r9, #0
 8004de0:	dc35      	bgt.n	8004e4e <_printf_float+0x3ae>
 8004de2:	f04f 0800 	mov.w	r8, #0
 8004de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dea:	f104 0a1a 	add.w	sl, r4, #26
 8004dee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	eba3 0309 	sub.w	r3, r3, r9
 8004df8:	4543      	cmp	r3, r8
 8004dfa:	f77f af79 	ble.w	8004cf0 <_printf_float+0x250>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4652      	mov	r2, sl
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f aeaa 	beq.w	8004b62 <_printf_float+0xc2>
 8004e0e:	f108 0801 	add.w	r8, r8, #1
 8004e12:	e7ec      	b.n	8004dee <_printf_float+0x34e>
 8004e14:	4613      	mov	r3, r2
 8004e16:	4631      	mov	r1, r6
 8004e18:	4642      	mov	r2, r8
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d1c0      	bne.n	8004da4 <_printf_float+0x304>
 8004e22:	e69e      	b.n	8004b62 <_printf_float+0xc2>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	9205      	str	r2, [sp, #20]
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f ae97 	beq.w	8004b62 <_printf_float+0xc2>
 8004e34:	9a05      	ldr	r2, [sp, #20]
 8004e36:	f10b 0b01 	add.w	fp, fp, #1
 8004e3a:	e7b9      	b.n	8004db0 <_printf_float+0x310>
 8004e3c:	ee18 3a10 	vmov	r3, s16
 8004e40:	4652      	mov	r2, sl
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d1be      	bne.n	8004dca <_printf_float+0x32a>
 8004e4c:	e689      	b.n	8004b62 <_printf_float+0xc2>
 8004e4e:	9a05      	ldr	r2, [sp, #20]
 8004e50:	464b      	mov	r3, r9
 8004e52:	4442      	add	r2, r8
 8004e54:	4631      	mov	r1, r6
 8004e56:	4628      	mov	r0, r5
 8004e58:	47b8      	blx	r7
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d1c1      	bne.n	8004de2 <_printf_float+0x342>
 8004e5e:	e680      	b.n	8004b62 <_printf_float+0xc2>
 8004e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e62:	2a01      	cmp	r2, #1
 8004e64:	dc01      	bgt.n	8004e6a <_printf_float+0x3ca>
 8004e66:	07db      	lsls	r3, r3, #31
 8004e68:	d538      	bpl.n	8004edc <_printf_float+0x43c>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b8      	blx	r7
 8004e74:	3001      	adds	r0, #1
 8004e76:	f43f ae74 	beq.w	8004b62 <_printf_float+0xc2>
 8004e7a:	ee18 3a10 	vmov	r3, s16
 8004e7e:	4652      	mov	r2, sl
 8004e80:	4631      	mov	r1, r6
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b8      	blx	r7
 8004e86:	3001      	adds	r0, #1
 8004e88:	f43f ae6b 	beq.w	8004b62 <_printf_float+0xc2>
 8004e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e90:	2200      	movs	r2, #0
 8004e92:	2300      	movs	r3, #0
 8004e94:	f7fb fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e98:	b9d8      	cbnz	r0, 8004ed2 <_printf_float+0x432>
 8004e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e9c:	f108 0201 	add.w	r2, r8, #1
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d10e      	bne.n	8004eca <_printf_float+0x42a>
 8004eac:	e659      	b.n	8004b62 <_printf_float+0xc2>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4652      	mov	r2, sl
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f43f ae52 	beq.w	8004b62 <_printf_float+0xc2>
 8004ebe:	f108 0801 	add.w	r8, r8, #1
 8004ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	4543      	cmp	r3, r8
 8004ec8:	dcf1      	bgt.n	8004eae <_printf_float+0x40e>
 8004eca:	464b      	mov	r3, r9
 8004ecc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ed0:	e6dc      	b.n	8004c8c <_printf_float+0x1ec>
 8004ed2:	f04f 0800 	mov.w	r8, #0
 8004ed6:	f104 0a1a 	add.w	sl, r4, #26
 8004eda:	e7f2      	b.n	8004ec2 <_printf_float+0x422>
 8004edc:	2301      	movs	r3, #1
 8004ede:	4642      	mov	r2, r8
 8004ee0:	e7df      	b.n	8004ea2 <_printf_float+0x402>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	464a      	mov	r2, r9
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b8      	blx	r7
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f ae38 	beq.w	8004b62 <_printf_float+0xc2>
 8004ef2:	f108 0801 	add.w	r8, r8, #1
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004efa:	1a5b      	subs	r3, r3, r1
 8004efc:	4543      	cmp	r3, r8
 8004efe:	dcf0      	bgt.n	8004ee2 <_printf_float+0x442>
 8004f00:	e6fa      	b.n	8004cf8 <_printf_float+0x258>
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	f104 0919 	add.w	r9, r4, #25
 8004f0a:	e7f4      	b.n	8004ef6 <_printf_float+0x456>

08004f0c <_printf_common>:
 8004f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f10:	4616      	mov	r6, r2
 8004f12:	4699      	mov	r9, r3
 8004f14:	688a      	ldr	r2, [r1, #8]
 8004f16:	690b      	ldr	r3, [r1, #16]
 8004f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	bfb8      	it	lt
 8004f20:	4613      	movlt	r3, r2
 8004f22:	6033      	str	r3, [r6, #0]
 8004f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f28:	4607      	mov	r7, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	b10a      	cbz	r2, 8004f32 <_printf_common+0x26>
 8004f2e:	3301      	adds	r3, #1
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	0699      	lsls	r1, r3, #26
 8004f36:	bf42      	ittt	mi
 8004f38:	6833      	ldrmi	r3, [r6, #0]
 8004f3a:	3302      	addmi	r3, #2
 8004f3c:	6033      	strmi	r3, [r6, #0]
 8004f3e:	6825      	ldr	r5, [r4, #0]
 8004f40:	f015 0506 	ands.w	r5, r5, #6
 8004f44:	d106      	bne.n	8004f54 <_printf_common+0x48>
 8004f46:	f104 0a19 	add.w	sl, r4, #25
 8004f4a:	68e3      	ldr	r3, [r4, #12]
 8004f4c:	6832      	ldr	r2, [r6, #0]
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	dc26      	bgt.n	8004fa2 <_printf_common+0x96>
 8004f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f58:	1e13      	subs	r3, r2, #0
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	bf18      	it	ne
 8004f5e:	2301      	movne	r3, #1
 8004f60:	0692      	lsls	r2, r2, #26
 8004f62:	d42b      	bmi.n	8004fbc <_printf_common+0xb0>
 8004f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	47c0      	blx	r8
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d01e      	beq.n	8004fb0 <_printf_common+0xa4>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	68e5      	ldr	r5, [r4, #12]
 8004f76:	6832      	ldr	r2, [r6, #0]
 8004f78:	f003 0306 	and.w	r3, r3, #6
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	bf08      	it	eq
 8004f80:	1aad      	subeq	r5, r5, r2
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	6922      	ldr	r2, [r4, #16]
 8004f86:	bf0c      	ite	eq
 8004f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f8c:	2500      	movne	r5, #0
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bfc4      	itt	gt
 8004f92:	1a9b      	subgt	r3, r3, r2
 8004f94:	18ed      	addgt	r5, r5, r3
 8004f96:	2600      	movs	r6, #0
 8004f98:	341a      	adds	r4, #26
 8004f9a:	42b5      	cmp	r5, r6
 8004f9c:	d11a      	bne.n	8004fd4 <_printf_common+0xc8>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e008      	b.n	8004fb4 <_printf_common+0xa8>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	4638      	mov	r0, r7
 8004faa:	47c0      	blx	r8
 8004fac:	3001      	adds	r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_printf_common+0xac>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	3501      	adds	r5, #1
 8004fba:	e7c6      	b.n	8004f4a <_printf_common+0x3e>
 8004fbc:	18e1      	adds	r1, r4, r3
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	2030      	movs	r0, #48	; 0x30
 8004fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fc6:	4422      	add	r2, r4
 8004fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	e7c7      	b.n	8004f64 <_printf_common+0x58>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4638      	mov	r0, r7
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0e6      	beq.n	8004fb0 <_printf_common+0xa4>
 8004fe2:	3601      	adds	r6, #1
 8004fe4:	e7d9      	b.n	8004f9a <_printf_common+0x8e>
	...

08004fe8 <_printf_i>:
 8004fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	460c      	mov	r4, r1
 8004fee:	4691      	mov	r9, r2
 8004ff0:	7e27      	ldrb	r7, [r4, #24]
 8004ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ff4:	2f78      	cmp	r7, #120	; 0x78
 8004ff6:	4680      	mov	r8, r0
 8004ff8:	469a      	mov	sl, r3
 8004ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ffe:	d807      	bhi.n	8005010 <_printf_i+0x28>
 8005000:	2f62      	cmp	r7, #98	; 0x62
 8005002:	d80a      	bhi.n	800501a <_printf_i+0x32>
 8005004:	2f00      	cmp	r7, #0
 8005006:	f000 80d8 	beq.w	80051ba <_printf_i+0x1d2>
 800500a:	2f58      	cmp	r7, #88	; 0x58
 800500c:	f000 80a3 	beq.w	8005156 <_printf_i+0x16e>
 8005010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005018:	e03a      	b.n	8005090 <_printf_i+0xa8>
 800501a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800501e:	2b15      	cmp	r3, #21
 8005020:	d8f6      	bhi.n	8005010 <_printf_i+0x28>
 8005022:	a001      	add	r0, pc, #4	; (adr r0, 8005028 <_printf_i+0x40>)
 8005024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005028:	08005081 	.word	0x08005081
 800502c:	08005095 	.word	0x08005095
 8005030:	08005011 	.word	0x08005011
 8005034:	08005011 	.word	0x08005011
 8005038:	08005011 	.word	0x08005011
 800503c:	08005011 	.word	0x08005011
 8005040:	08005095 	.word	0x08005095
 8005044:	08005011 	.word	0x08005011
 8005048:	08005011 	.word	0x08005011
 800504c:	08005011 	.word	0x08005011
 8005050:	08005011 	.word	0x08005011
 8005054:	080051a1 	.word	0x080051a1
 8005058:	080050c5 	.word	0x080050c5
 800505c:	08005183 	.word	0x08005183
 8005060:	08005011 	.word	0x08005011
 8005064:	08005011 	.word	0x08005011
 8005068:	080051c3 	.word	0x080051c3
 800506c:	08005011 	.word	0x08005011
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005011 	.word	0x08005011
 8005078:	08005011 	.word	0x08005011
 800507c:	0800518b 	.word	0x0800518b
 8005080:	680b      	ldr	r3, [r1, #0]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	600a      	str	r2, [r1, #0]
 8005088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800508c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005090:	2301      	movs	r3, #1
 8005092:	e0a3      	b.n	80051dc <_printf_i+0x1f4>
 8005094:	6825      	ldr	r5, [r4, #0]
 8005096:	6808      	ldr	r0, [r1, #0]
 8005098:	062e      	lsls	r6, r5, #24
 800509a:	f100 0304 	add.w	r3, r0, #4
 800509e:	d50a      	bpl.n	80050b6 <_printf_i+0xce>
 80050a0:	6805      	ldr	r5, [r0, #0]
 80050a2:	600b      	str	r3, [r1, #0]
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	da03      	bge.n	80050b0 <_printf_i+0xc8>
 80050a8:	232d      	movs	r3, #45	; 0x2d
 80050aa:	426d      	negs	r5, r5
 80050ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b0:	485e      	ldr	r0, [pc, #376]	; (800522c <_printf_i+0x244>)
 80050b2:	230a      	movs	r3, #10
 80050b4:	e019      	b.n	80050ea <_printf_i+0x102>
 80050b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80050ba:	6805      	ldr	r5, [r0, #0]
 80050bc:	600b      	str	r3, [r1, #0]
 80050be:	bf18      	it	ne
 80050c0:	b22d      	sxthne	r5, r5
 80050c2:	e7ef      	b.n	80050a4 <_printf_i+0xbc>
 80050c4:	680b      	ldr	r3, [r1, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	1d18      	adds	r0, r3, #4
 80050ca:	6008      	str	r0, [r1, #0]
 80050cc:	0628      	lsls	r0, r5, #24
 80050ce:	d501      	bpl.n	80050d4 <_printf_i+0xec>
 80050d0:	681d      	ldr	r5, [r3, #0]
 80050d2:	e002      	b.n	80050da <_printf_i+0xf2>
 80050d4:	0669      	lsls	r1, r5, #25
 80050d6:	d5fb      	bpl.n	80050d0 <_printf_i+0xe8>
 80050d8:	881d      	ldrh	r5, [r3, #0]
 80050da:	4854      	ldr	r0, [pc, #336]	; (800522c <_printf_i+0x244>)
 80050dc:	2f6f      	cmp	r7, #111	; 0x6f
 80050de:	bf0c      	ite	eq
 80050e0:	2308      	moveq	r3, #8
 80050e2:	230a      	movne	r3, #10
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ea:	6866      	ldr	r6, [r4, #4]
 80050ec:	60a6      	str	r6, [r4, #8]
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	bfa2      	ittt	ge
 80050f2:	6821      	ldrge	r1, [r4, #0]
 80050f4:	f021 0104 	bicge.w	r1, r1, #4
 80050f8:	6021      	strge	r1, [r4, #0]
 80050fa:	b90d      	cbnz	r5, 8005100 <_printf_i+0x118>
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	d04d      	beq.n	800519c <_printf_i+0x1b4>
 8005100:	4616      	mov	r6, r2
 8005102:	fbb5 f1f3 	udiv	r1, r5, r3
 8005106:	fb03 5711 	mls	r7, r3, r1, r5
 800510a:	5dc7      	ldrb	r7, [r0, r7]
 800510c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005110:	462f      	mov	r7, r5
 8005112:	42bb      	cmp	r3, r7
 8005114:	460d      	mov	r5, r1
 8005116:	d9f4      	bls.n	8005102 <_printf_i+0x11a>
 8005118:	2b08      	cmp	r3, #8
 800511a:	d10b      	bne.n	8005134 <_printf_i+0x14c>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	07df      	lsls	r7, r3, #31
 8005120:	d508      	bpl.n	8005134 <_printf_i+0x14c>
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	6861      	ldr	r1, [r4, #4]
 8005126:	4299      	cmp	r1, r3
 8005128:	bfde      	ittt	le
 800512a:	2330      	movle	r3, #48	; 0x30
 800512c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005130:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005134:	1b92      	subs	r2, r2, r6
 8005136:	6122      	str	r2, [r4, #16]
 8005138:	f8cd a000 	str.w	sl, [sp]
 800513c:	464b      	mov	r3, r9
 800513e:	aa03      	add	r2, sp, #12
 8005140:	4621      	mov	r1, r4
 8005142:	4640      	mov	r0, r8
 8005144:	f7ff fee2 	bl	8004f0c <_printf_common>
 8005148:	3001      	adds	r0, #1
 800514a:	d14c      	bne.n	80051e6 <_printf_i+0x1fe>
 800514c:	f04f 30ff 	mov.w	r0, #4294967295
 8005150:	b004      	add	sp, #16
 8005152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005156:	4835      	ldr	r0, [pc, #212]	; (800522c <_printf_i+0x244>)
 8005158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	680e      	ldr	r6, [r1, #0]
 8005160:	061f      	lsls	r7, r3, #24
 8005162:	f856 5b04 	ldr.w	r5, [r6], #4
 8005166:	600e      	str	r6, [r1, #0]
 8005168:	d514      	bpl.n	8005194 <_printf_i+0x1ac>
 800516a:	07d9      	lsls	r1, r3, #31
 800516c:	bf44      	itt	mi
 800516e:	f043 0320 	orrmi.w	r3, r3, #32
 8005172:	6023      	strmi	r3, [r4, #0]
 8005174:	b91d      	cbnz	r5, 800517e <_printf_i+0x196>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	f023 0320 	bic.w	r3, r3, #32
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	2310      	movs	r3, #16
 8005180:	e7b0      	b.n	80050e4 <_printf_i+0xfc>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	f043 0320 	orr.w	r3, r3, #32
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	2378      	movs	r3, #120	; 0x78
 800518c:	4828      	ldr	r0, [pc, #160]	; (8005230 <_printf_i+0x248>)
 800518e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005192:	e7e3      	b.n	800515c <_printf_i+0x174>
 8005194:	065e      	lsls	r6, r3, #25
 8005196:	bf48      	it	mi
 8005198:	b2ad      	uxthmi	r5, r5
 800519a:	e7e6      	b.n	800516a <_printf_i+0x182>
 800519c:	4616      	mov	r6, r2
 800519e:	e7bb      	b.n	8005118 <_printf_i+0x130>
 80051a0:	680b      	ldr	r3, [r1, #0]
 80051a2:	6826      	ldr	r6, [r4, #0]
 80051a4:	6960      	ldr	r0, [r4, #20]
 80051a6:	1d1d      	adds	r5, r3, #4
 80051a8:	600d      	str	r5, [r1, #0]
 80051aa:	0635      	lsls	r5, r6, #24
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	d501      	bpl.n	80051b4 <_printf_i+0x1cc>
 80051b0:	6018      	str	r0, [r3, #0]
 80051b2:	e002      	b.n	80051ba <_printf_i+0x1d2>
 80051b4:	0671      	lsls	r1, r6, #25
 80051b6:	d5fb      	bpl.n	80051b0 <_printf_i+0x1c8>
 80051b8:	8018      	strh	r0, [r3, #0]
 80051ba:	2300      	movs	r3, #0
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	4616      	mov	r6, r2
 80051c0:	e7ba      	b.n	8005138 <_printf_i+0x150>
 80051c2:	680b      	ldr	r3, [r1, #0]
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	600a      	str	r2, [r1, #0]
 80051c8:	681e      	ldr	r6, [r3, #0]
 80051ca:	6862      	ldr	r2, [r4, #4]
 80051cc:	2100      	movs	r1, #0
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7fb f806 	bl	80001e0 <memchr>
 80051d4:	b108      	cbz	r0, 80051da <_printf_i+0x1f2>
 80051d6:	1b80      	subs	r0, r0, r6
 80051d8:	6060      	str	r0, [r4, #4]
 80051da:	6863      	ldr	r3, [r4, #4]
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	2300      	movs	r3, #0
 80051e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e4:	e7a8      	b.n	8005138 <_printf_i+0x150>
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	4632      	mov	r2, r6
 80051ea:	4649      	mov	r1, r9
 80051ec:	4640      	mov	r0, r8
 80051ee:	47d0      	blx	sl
 80051f0:	3001      	adds	r0, #1
 80051f2:	d0ab      	beq.n	800514c <_printf_i+0x164>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	079b      	lsls	r3, r3, #30
 80051f8:	d413      	bmi.n	8005222 <_printf_i+0x23a>
 80051fa:	68e0      	ldr	r0, [r4, #12]
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	4298      	cmp	r0, r3
 8005200:	bfb8      	it	lt
 8005202:	4618      	movlt	r0, r3
 8005204:	e7a4      	b.n	8005150 <_printf_i+0x168>
 8005206:	2301      	movs	r3, #1
 8005208:	4632      	mov	r2, r6
 800520a:	4649      	mov	r1, r9
 800520c:	4640      	mov	r0, r8
 800520e:	47d0      	blx	sl
 8005210:	3001      	adds	r0, #1
 8005212:	d09b      	beq.n	800514c <_printf_i+0x164>
 8005214:	3501      	adds	r5, #1
 8005216:	68e3      	ldr	r3, [r4, #12]
 8005218:	9903      	ldr	r1, [sp, #12]
 800521a:	1a5b      	subs	r3, r3, r1
 800521c:	42ab      	cmp	r3, r5
 800521e:	dcf2      	bgt.n	8005206 <_printf_i+0x21e>
 8005220:	e7eb      	b.n	80051fa <_printf_i+0x212>
 8005222:	2500      	movs	r5, #0
 8005224:	f104 0619 	add.w	r6, r4, #25
 8005228:	e7f5      	b.n	8005216 <_printf_i+0x22e>
 800522a:	bf00      	nop
 800522c:	08007736 	.word	0x08007736
 8005230:	08007747 	.word	0x08007747

08005234 <siprintf>:
 8005234:	b40e      	push	{r1, r2, r3}
 8005236:	b500      	push	{lr}
 8005238:	b09c      	sub	sp, #112	; 0x70
 800523a:	ab1d      	add	r3, sp, #116	; 0x74
 800523c:	9002      	str	r0, [sp, #8]
 800523e:	9006      	str	r0, [sp, #24]
 8005240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005244:	4809      	ldr	r0, [pc, #36]	; (800526c <siprintf+0x38>)
 8005246:	9107      	str	r1, [sp, #28]
 8005248:	9104      	str	r1, [sp, #16]
 800524a:	4909      	ldr	r1, [pc, #36]	; (8005270 <siprintf+0x3c>)
 800524c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005250:	9105      	str	r1, [sp, #20]
 8005252:	6800      	ldr	r0, [r0, #0]
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	a902      	add	r1, sp, #8
 8005258:	f001 fb34 	bl	80068c4 <_svfiprintf_r>
 800525c:	9b02      	ldr	r3, [sp, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	b01c      	add	sp, #112	; 0x70
 8005264:	f85d eb04 	ldr.w	lr, [sp], #4
 8005268:	b003      	add	sp, #12
 800526a:	4770      	bx	lr
 800526c:	20000018 	.word	0x20000018
 8005270:	ffff0208 	.word	0xffff0208

08005274 <quorem>:
 8005274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	6903      	ldr	r3, [r0, #16]
 800527a:	690c      	ldr	r4, [r1, #16]
 800527c:	42a3      	cmp	r3, r4
 800527e:	4607      	mov	r7, r0
 8005280:	f2c0 8081 	blt.w	8005386 <quorem+0x112>
 8005284:	3c01      	subs	r4, #1
 8005286:	f101 0814 	add.w	r8, r1, #20
 800528a:	f100 0514 	add.w	r5, r0, #20
 800528e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800529c:	3301      	adds	r3, #1
 800529e:	429a      	cmp	r2, r3
 80052a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052ac:	d331      	bcc.n	8005312 <quorem+0x9e>
 80052ae:	f04f 0e00 	mov.w	lr, #0
 80052b2:	4640      	mov	r0, r8
 80052b4:	46ac      	mov	ip, r5
 80052b6:	46f2      	mov	sl, lr
 80052b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80052bc:	b293      	uxth	r3, r2
 80052be:	fb06 e303 	mla	r3, r6, r3, lr
 80052c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	ebaa 0303 	sub.w	r3, sl, r3
 80052cc:	0c12      	lsrs	r2, r2, #16
 80052ce:	f8dc a000 	ldr.w	sl, [ip]
 80052d2:	fb06 e202 	mla	r2, r6, r2, lr
 80052d6:	fa13 f38a 	uxtah	r3, r3, sl
 80052da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052de:	fa1f fa82 	uxth.w	sl, r2
 80052e2:	f8dc 2000 	ldr.w	r2, [ip]
 80052e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80052ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052f4:	4581      	cmp	r9, r0
 80052f6:	f84c 3b04 	str.w	r3, [ip], #4
 80052fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052fe:	d2db      	bcs.n	80052b8 <quorem+0x44>
 8005300:	f855 300b 	ldr.w	r3, [r5, fp]
 8005304:	b92b      	cbnz	r3, 8005312 <quorem+0x9e>
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	3b04      	subs	r3, #4
 800530a:	429d      	cmp	r5, r3
 800530c:	461a      	mov	r2, r3
 800530e:	d32e      	bcc.n	800536e <quorem+0xfa>
 8005310:	613c      	str	r4, [r7, #16]
 8005312:	4638      	mov	r0, r7
 8005314:	f001 f8c0 	bl	8006498 <__mcmp>
 8005318:	2800      	cmp	r0, #0
 800531a:	db24      	blt.n	8005366 <quorem+0xf2>
 800531c:	3601      	adds	r6, #1
 800531e:	4628      	mov	r0, r5
 8005320:	f04f 0c00 	mov.w	ip, #0
 8005324:	f858 2b04 	ldr.w	r2, [r8], #4
 8005328:	f8d0 e000 	ldr.w	lr, [r0]
 800532c:	b293      	uxth	r3, r2
 800532e:	ebac 0303 	sub.w	r3, ip, r3
 8005332:	0c12      	lsrs	r2, r2, #16
 8005334:	fa13 f38e 	uxtah	r3, r3, lr
 8005338:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800533c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005340:	b29b      	uxth	r3, r3
 8005342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005346:	45c1      	cmp	r9, r8
 8005348:	f840 3b04 	str.w	r3, [r0], #4
 800534c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005350:	d2e8      	bcs.n	8005324 <quorem+0xb0>
 8005352:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800535a:	b922      	cbnz	r2, 8005366 <quorem+0xf2>
 800535c:	3b04      	subs	r3, #4
 800535e:	429d      	cmp	r5, r3
 8005360:	461a      	mov	r2, r3
 8005362:	d30a      	bcc.n	800537a <quorem+0x106>
 8005364:	613c      	str	r4, [r7, #16]
 8005366:	4630      	mov	r0, r6
 8005368:	b003      	add	sp, #12
 800536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	3b04      	subs	r3, #4
 8005372:	2a00      	cmp	r2, #0
 8005374:	d1cc      	bne.n	8005310 <quorem+0x9c>
 8005376:	3c01      	subs	r4, #1
 8005378:	e7c7      	b.n	800530a <quorem+0x96>
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	3b04      	subs	r3, #4
 800537e:	2a00      	cmp	r2, #0
 8005380:	d1f0      	bne.n	8005364 <quorem+0xf0>
 8005382:	3c01      	subs	r4, #1
 8005384:	e7eb      	b.n	800535e <quorem+0xea>
 8005386:	2000      	movs	r0, #0
 8005388:	e7ee      	b.n	8005368 <quorem+0xf4>
 800538a:	0000      	movs	r0, r0
 800538c:	0000      	movs	r0, r0
	...

08005390 <_dtoa_r>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	ed2d 8b02 	vpush	{d8}
 8005398:	ec57 6b10 	vmov	r6, r7, d0
 800539c:	b095      	sub	sp, #84	; 0x54
 800539e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053a4:	9105      	str	r1, [sp, #20]
 80053a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80053aa:	4604      	mov	r4, r0
 80053ac:	9209      	str	r2, [sp, #36]	; 0x24
 80053ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80053b0:	b975      	cbnz	r5, 80053d0 <_dtoa_r+0x40>
 80053b2:	2010      	movs	r0, #16
 80053b4:	f000 fddc 	bl	8005f70 <malloc>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6260      	str	r0, [r4, #36]	; 0x24
 80053bc:	b920      	cbnz	r0, 80053c8 <_dtoa_r+0x38>
 80053be:	4bb2      	ldr	r3, [pc, #712]	; (8005688 <_dtoa_r+0x2f8>)
 80053c0:	21ea      	movs	r1, #234	; 0xea
 80053c2:	48b2      	ldr	r0, [pc, #712]	; (800568c <_dtoa_r+0x2fc>)
 80053c4:	f001 fb8e 	bl	8006ae4 <__assert_func>
 80053c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053cc:	6005      	str	r5, [r0, #0]
 80053ce:	60c5      	str	r5, [r0, #12]
 80053d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	b151      	cbz	r1, 80053ec <_dtoa_r+0x5c>
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	604a      	str	r2, [r1, #4]
 80053da:	2301      	movs	r3, #1
 80053dc:	4093      	lsls	r3, r2
 80053de:	608b      	str	r3, [r1, #8]
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 fe1b 	bl	800601c <_Bfree>
 80053e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	1e3b      	subs	r3, r7, #0
 80053ee:	bfb9      	ittee	lt
 80053f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	9303      	strlt	r3, [sp, #12]
 80053f6:	2300      	movge	r3, #0
 80053f8:	f8c8 3000 	strge.w	r3, [r8]
 80053fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005400:	4ba3      	ldr	r3, [pc, #652]	; (8005690 <_dtoa_r+0x300>)
 8005402:	bfbc      	itt	lt
 8005404:	2201      	movlt	r2, #1
 8005406:	f8c8 2000 	strlt.w	r2, [r8]
 800540a:	ea33 0309 	bics.w	r3, r3, r9
 800540e:	d11b      	bne.n	8005448 <_dtoa_r+0xb8>
 8005410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005412:	f242 730f 	movw	r3, #9999	; 0x270f
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800541c:	4333      	orrs	r3, r6
 800541e:	f000 857a 	beq.w	8005f16 <_dtoa_r+0xb86>
 8005422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005424:	b963      	cbnz	r3, 8005440 <_dtoa_r+0xb0>
 8005426:	4b9b      	ldr	r3, [pc, #620]	; (8005694 <_dtoa_r+0x304>)
 8005428:	e024      	b.n	8005474 <_dtoa_r+0xe4>
 800542a:	4b9b      	ldr	r3, [pc, #620]	; (8005698 <_dtoa_r+0x308>)
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	9800      	ldr	r0, [sp, #0]
 8005436:	b015      	add	sp, #84	; 0x54
 8005438:	ecbd 8b02 	vpop	{d8}
 800543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005440:	4b94      	ldr	r3, [pc, #592]	; (8005694 <_dtoa_r+0x304>)
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	3303      	adds	r3, #3
 8005446:	e7f3      	b.n	8005430 <_dtoa_r+0xa0>
 8005448:	ed9d 7b02 	vldr	d7, [sp, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	ec51 0b17 	vmov	r0, r1, d7
 8005452:	2300      	movs	r3, #0
 8005454:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005458:	f7fb fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800545c:	4680      	mov	r8, r0
 800545e:	b158      	cbz	r0, 8005478 <_dtoa_r+0xe8>
 8005460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005462:	2301      	movs	r3, #1
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8551 	beq.w	8005f10 <_dtoa_r+0xb80>
 800546e:	488b      	ldr	r0, [pc, #556]	; (800569c <_dtoa_r+0x30c>)
 8005470:	6018      	str	r0, [r3, #0]
 8005472:	1e43      	subs	r3, r0, #1
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	e7dd      	b.n	8005434 <_dtoa_r+0xa4>
 8005478:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800547c:	aa12      	add	r2, sp, #72	; 0x48
 800547e:	a913      	add	r1, sp, #76	; 0x4c
 8005480:	4620      	mov	r0, r4
 8005482:	f001 f8ad 	bl	80065e0 <__d2b>
 8005486:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800548a:	4683      	mov	fp, r0
 800548c:	2d00      	cmp	r5, #0
 800548e:	d07c      	beq.n	800558a <_dtoa_r+0x1fa>
 8005490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005492:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800549a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800549e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054aa:	4b7d      	ldr	r3, [pc, #500]	; (80056a0 <_dtoa_r+0x310>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	f7fa fee9 	bl	8000288 <__aeabi_dsub>
 80054b6:	a36e      	add	r3, pc, #440	; (adr r3, 8005670 <_dtoa_r+0x2e0>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f7fb f89c 	bl	80005f8 <__aeabi_dmul>
 80054c0:	a36d      	add	r3, pc, #436	; (adr r3, 8005678 <_dtoa_r+0x2e8>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f7fa fee1 	bl	800028c <__adddf3>
 80054ca:	4606      	mov	r6, r0
 80054cc:	4628      	mov	r0, r5
 80054ce:	460f      	mov	r7, r1
 80054d0:	f7fb f828 	bl	8000524 <__aeabi_i2d>
 80054d4:	a36a      	add	r3, pc, #424	; (adr r3, 8005680 <_dtoa_r+0x2f0>)
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f7fb f88d 	bl	80005f8 <__aeabi_dmul>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4630      	mov	r0, r6
 80054e4:	4639      	mov	r1, r7
 80054e6:	f7fa fed1 	bl	800028c <__adddf3>
 80054ea:	4606      	mov	r6, r0
 80054ec:	460f      	mov	r7, r1
 80054ee:	f7fb fb33 	bl	8000b58 <__aeabi_d2iz>
 80054f2:	2200      	movs	r2, #0
 80054f4:	4682      	mov	sl, r0
 80054f6:	2300      	movs	r3, #0
 80054f8:	4630      	mov	r0, r6
 80054fa:	4639      	mov	r1, r7
 80054fc:	f7fb faee 	bl	8000adc <__aeabi_dcmplt>
 8005500:	b148      	cbz	r0, 8005516 <_dtoa_r+0x186>
 8005502:	4650      	mov	r0, sl
 8005504:	f7fb f80e 	bl	8000524 <__aeabi_i2d>
 8005508:	4632      	mov	r2, r6
 800550a:	463b      	mov	r3, r7
 800550c:	f7fb fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005510:	b908      	cbnz	r0, 8005516 <_dtoa_r+0x186>
 8005512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005516:	f1ba 0f16 	cmp.w	sl, #22
 800551a:	d854      	bhi.n	80055c6 <_dtoa_r+0x236>
 800551c:	4b61      	ldr	r3, [pc, #388]	; (80056a4 <_dtoa_r+0x314>)
 800551e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800552a:	f7fb fad7 	bl	8000adc <__aeabi_dcmplt>
 800552e:	2800      	cmp	r0, #0
 8005530:	d04b      	beq.n	80055ca <_dtoa_r+0x23a>
 8005532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005536:	2300      	movs	r3, #0
 8005538:	930e      	str	r3, [sp, #56]	; 0x38
 800553a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800553c:	1b5d      	subs	r5, r3, r5
 800553e:	1e6b      	subs	r3, r5, #1
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	bf43      	ittte	mi
 8005544:	2300      	movmi	r3, #0
 8005546:	f1c5 0801 	rsbmi	r8, r5, #1
 800554a:	9304      	strmi	r3, [sp, #16]
 800554c:	f04f 0800 	movpl.w	r8, #0
 8005550:	f1ba 0f00 	cmp.w	sl, #0
 8005554:	db3b      	blt.n	80055ce <_dtoa_r+0x23e>
 8005556:	9b04      	ldr	r3, [sp, #16]
 8005558:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800555c:	4453      	add	r3, sl
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	2300      	movs	r3, #0
 8005562:	9306      	str	r3, [sp, #24]
 8005564:	9b05      	ldr	r3, [sp, #20]
 8005566:	2b09      	cmp	r3, #9
 8005568:	d869      	bhi.n	800563e <_dtoa_r+0x2ae>
 800556a:	2b05      	cmp	r3, #5
 800556c:	bfc4      	itt	gt
 800556e:	3b04      	subgt	r3, #4
 8005570:	9305      	strgt	r3, [sp, #20]
 8005572:	9b05      	ldr	r3, [sp, #20]
 8005574:	f1a3 0302 	sub.w	r3, r3, #2
 8005578:	bfcc      	ite	gt
 800557a:	2500      	movgt	r5, #0
 800557c:	2501      	movle	r5, #1
 800557e:	2b03      	cmp	r3, #3
 8005580:	d869      	bhi.n	8005656 <_dtoa_r+0x2c6>
 8005582:	e8df f003 	tbb	[pc, r3]
 8005586:	4e2c      	.short	0x4e2c
 8005588:	5a4c      	.short	0x5a4c
 800558a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800558e:	441d      	add	r5, r3
 8005590:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005594:	2b20      	cmp	r3, #32
 8005596:	bfc1      	itttt	gt
 8005598:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800559c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80055a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055a8:	bfda      	itte	le
 80055aa:	f1c3 0320 	rsble	r3, r3, #32
 80055ae:	fa06 f003 	lslle.w	r0, r6, r3
 80055b2:	4318      	orrgt	r0, r3
 80055b4:	f7fa ffa6 	bl	8000504 <__aeabi_ui2d>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4606      	mov	r6, r0
 80055bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80055c0:	3d01      	subs	r5, #1
 80055c2:	9310      	str	r3, [sp, #64]	; 0x40
 80055c4:	e771      	b.n	80054aa <_dtoa_r+0x11a>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e7b6      	b.n	8005538 <_dtoa_r+0x1a8>
 80055ca:	900e      	str	r0, [sp, #56]	; 0x38
 80055cc:	e7b5      	b.n	800553a <_dtoa_r+0x1aa>
 80055ce:	f1ca 0300 	rsb	r3, sl, #0
 80055d2:	9306      	str	r3, [sp, #24]
 80055d4:	2300      	movs	r3, #0
 80055d6:	eba8 080a 	sub.w	r8, r8, sl
 80055da:	930d      	str	r3, [sp, #52]	; 0x34
 80055dc:	e7c2      	b.n	8005564 <_dtoa_r+0x1d4>
 80055de:	2300      	movs	r3, #0
 80055e0:	9308      	str	r3, [sp, #32]
 80055e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dc39      	bgt.n	800565c <_dtoa_r+0x2cc>
 80055e8:	f04f 0901 	mov.w	r9, #1
 80055ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80055f0:	464b      	mov	r3, r9
 80055f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80055f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80055f8:	2200      	movs	r2, #0
 80055fa:	6042      	str	r2, [r0, #4]
 80055fc:	2204      	movs	r2, #4
 80055fe:	f102 0614 	add.w	r6, r2, #20
 8005602:	429e      	cmp	r6, r3
 8005604:	6841      	ldr	r1, [r0, #4]
 8005606:	d92f      	bls.n	8005668 <_dtoa_r+0x2d8>
 8005608:	4620      	mov	r0, r4
 800560a:	f000 fcc7 	bl	8005f9c <_Balloc>
 800560e:	9000      	str	r0, [sp, #0]
 8005610:	2800      	cmp	r0, #0
 8005612:	d14b      	bne.n	80056ac <_dtoa_r+0x31c>
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <_dtoa_r+0x318>)
 8005616:	4602      	mov	r2, r0
 8005618:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800561c:	e6d1      	b.n	80053c2 <_dtoa_r+0x32>
 800561e:	2301      	movs	r3, #1
 8005620:	e7de      	b.n	80055e0 <_dtoa_r+0x250>
 8005622:	2300      	movs	r3, #0
 8005624:	9308      	str	r3, [sp, #32]
 8005626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005628:	eb0a 0903 	add.w	r9, sl, r3
 800562c:	f109 0301 	add.w	r3, r9, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	bfb8      	it	lt
 8005636:	2301      	movlt	r3, #1
 8005638:	e7dd      	b.n	80055f6 <_dtoa_r+0x266>
 800563a:	2301      	movs	r3, #1
 800563c:	e7f2      	b.n	8005624 <_dtoa_r+0x294>
 800563e:	2501      	movs	r5, #1
 8005640:	2300      	movs	r3, #0
 8005642:	9305      	str	r3, [sp, #20]
 8005644:	9508      	str	r5, [sp, #32]
 8005646:	f04f 39ff 	mov.w	r9, #4294967295
 800564a:	2200      	movs	r2, #0
 800564c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005650:	2312      	movs	r3, #18
 8005652:	9209      	str	r2, [sp, #36]	; 0x24
 8005654:	e7cf      	b.n	80055f6 <_dtoa_r+0x266>
 8005656:	2301      	movs	r3, #1
 8005658:	9308      	str	r3, [sp, #32]
 800565a:	e7f4      	b.n	8005646 <_dtoa_r+0x2b6>
 800565c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005660:	f8cd 9004 	str.w	r9, [sp, #4]
 8005664:	464b      	mov	r3, r9
 8005666:	e7c6      	b.n	80055f6 <_dtoa_r+0x266>
 8005668:	3101      	adds	r1, #1
 800566a:	6041      	str	r1, [r0, #4]
 800566c:	0052      	lsls	r2, r2, #1
 800566e:	e7c6      	b.n	80055fe <_dtoa_r+0x26e>
 8005670:	636f4361 	.word	0x636f4361
 8005674:	3fd287a7 	.word	0x3fd287a7
 8005678:	8b60c8b3 	.word	0x8b60c8b3
 800567c:	3fc68a28 	.word	0x3fc68a28
 8005680:	509f79fb 	.word	0x509f79fb
 8005684:	3fd34413 	.word	0x3fd34413
 8005688:	08007765 	.word	0x08007765
 800568c:	0800777c 	.word	0x0800777c
 8005690:	7ff00000 	.word	0x7ff00000
 8005694:	08007761 	.word	0x08007761
 8005698:	08007758 	.word	0x08007758
 800569c:	08007735 	.word	0x08007735
 80056a0:	3ff80000 	.word	0x3ff80000
 80056a4:	08007878 	.word	0x08007878
 80056a8:	080077db 	.word	0x080077db
 80056ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ae:	9a00      	ldr	r2, [sp, #0]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	2b0e      	cmp	r3, #14
 80056b6:	f200 80ad 	bhi.w	8005814 <_dtoa_r+0x484>
 80056ba:	2d00      	cmp	r5, #0
 80056bc:	f000 80aa 	beq.w	8005814 <_dtoa_r+0x484>
 80056c0:	f1ba 0f00 	cmp.w	sl, #0
 80056c4:	dd36      	ble.n	8005734 <_dtoa_r+0x3a4>
 80056c6:	4ac3      	ldr	r2, [pc, #780]	; (80059d4 <_dtoa_r+0x644>)
 80056c8:	f00a 030f 	and.w	r3, sl, #15
 80056cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056d0:	ed93 7b00 	vldr	d7, [r3]
 80056d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80056d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80056dc:	eeb0 8a47 	vmov.f32	s16, s14
 80056e0:	eef0 8a67 	vmov.f32	s17, s15
 80056e4:	d016      	beq.n	8005714 <_dtoa_r+0x384>
 80056e6:	4bbc      	ldr	r3, [pc, #752]	; (80059d8 <_dtoa_r+0x648>)
 80056e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056f0:	f7fb f8ac 	bl	800084c <__aeabi_ddiv>
 80056f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056f8:	f007 070f 	and.w	r7, r7, #15
 80056fc:	2503      	movs	r5, #3
 80056fe:	4eb6      	ldr	r6, [pc, #728]	; (80059d8 <_dtoa_r+0x648>)
 8005700:	b957      	cbnz	r7, 8005718 <_dtoa_r+0x388>
 8005702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005706:	ec53 2b18 	vmov	r2, r3, d8
 800570a:	f7fb f89f 	bl	800084c <__aeabi_ddiv>
 800570e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005712:	e029      	b.n	8005768 <_dtoa_r+0x3d8>
 8005714:	2502      	movs	r5, #2
 8005716:	e7f2      	b.n	80056fe <_dtoa_r+0x36e>
 8005718:	07f9      	lsls	r1, r7, #31
 800571a:	d508      	bpl.n	800572e <_dtoa_r+0x39e>
 800571c:	ec51 0b18 	vmov	r0, r1, d8
 8005720:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005724:	f7fa ff68 	bl	80005f8 <__aeabi_dmul>
 8005728:	ec41 0b18 	vmov	d8, r0, r1
 800572c:	3501      	adds	r5, #1
 800572e:	107f      	asrs	r7, r7, #1
 8005730:	3608      	adds	r6, #8
 8005732:	e7e5      	b.n	8005700 <_dtoa_r+0x370>
 8005734:	f000 80a6 	beq.w	8005884 <_dtoa_r+0x4f4>
 8005738:	f1ca 0600 	rsb	r6, sl, #0
 800573c:	4ba5      	ldr	r3, [pc, #660]	; (80059d4 <_dtoa_r+0x644>)
 800573e:	4fa6      	ldr	r7, [pc, #664]	; (80059d8 <_dtoa_r+0x648>)
 8005740:	f006 020f 	and.w	r2, r6, #15
 8005744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005750:	f7fa ff52 	bl	80005f8 <__aeabi_dmul>
 8005754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005758:	1136      	asrs	r6, r6, #4
 800575a:	2300      	movs	r3, #0
 800575c:	2502      	movs	r5, #2
 800575e:	2e00      	cmp	r6, #0
 8005760:	f040 8085 	bne.w	800586e <_dtoa_r+0x4de>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1d2      	bne.n	800570e <_dtoa_r+0x37e>
 8005768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 808c 	beq.w	8005888 <_dtoa_r+0x4f8>
 8005770:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005774:	4b99      	ldr	r3, [pc, #612]	; (80059dc <_dtoa_r+0x64c>)
 8005776:	2200      	movs	r2, #0
 8005778:	4630      	mov	r0, r6
 800577a:	4639      	mov	r1, r7
 800577c:	f7fb f9ae 	bl	8000adc <__aeabi_dcmplt>
 8005780:	2800      	cmp	r0, #0
 8005782:	f000 8081 	beq.w	8005888 <_dtoa_r+0x4f8>
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d07d      	beq.n	8005888 <_dtoa_r+0x4f8>
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	dd3c      	ble.n	800580c <_dtoa_r+0x47c>
 8005792:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005796:	9307      	str	r3, [sp, #28]
 8005798:	2200      	movs	r2, #0
 800579a:	4b91      	ldr	r3, [pc, #580]	; (80059e0 <_dtoa_r+0x650>)
 800579c:	4630      	mov	r0, r6
 800579e:	4639      	mov	r1, r7
 80057a0:	f7fa ff2a 	bl	80005f8 <__aeabi_dmul>
 80057a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a8:	3501      	adds	r5, #1
 80057aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80057ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7fa feb6 	bl	8000524 <__aeabi_i2d>
 80057b8:	4632      	mov	r2, r6
 80057ba:	463b      	mov	r3, r7
 80057bc:	f7fa ff1c 	bl	80005f8 <__aeabi_dmul>
 80057c0:	4b88      	ldr	r3, [pc, #544]	; (80059e4 <_dtoa_r+0x654>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	f7fa fd62 	bl	800028c <__adddf3>
 80057c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80057cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057d0:	9303      	str	r3, [sp, #12]
 80057d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d15c      	bne.n	8005892 <_dtoa_r+0x502>
 80057d8:	4b83      	ldr	r3, [pc, #524]	; (80059e8 <_dtoa_r+0x658>)
 80057da:	2200      	movs	r2, #0
 80057dc:	4630      	mov	r0, r6
 80057de:	4639      	mov	r1, r7
 80057e0:	f7fa fd52 	bl	8000288 <__aeabi_dsub>
 80057e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057e8:	4606      	mov	r6, r0
 80057ea:	460f      	mov	r7, r1
 80057ec:	f7fb f994 	bl	8000b18 <__aeabi_dcmpgt>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f040 8296 	bne.w	8005d22 <_dtoa_r+0x992>
 80057f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80057fa:	4630      	mov	r0, r6
 80057fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005800:	4639      	mov	r1, r7
 8005802:	f7fb f96b 	bl	8000adc <__aeabi_dcmplt>
 8005806:	2800      	cmp	r0, #0
 8005808:	f040 8288 	bne.w	8005d1c <_dtoa_r+0x98c>
 800580c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005816:	2b00      	cmp	r3, #0
 8005818:	f2c0 8158 	blt.w	8005acc <_dtoa_r+0x73c>
 800581c:	f1ba 0f0e 	cmp.w	sl, #14
 8005820:	f300 8154 	bgt.w	8005acc <_dtoa_r+0x73c>
 8005824:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <_dtoa_r+0x644>)
 8005826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800582a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800582e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	f280 80e3 	bge.w	80059fc <_dtoa_r+0x66c>
 8005836:	9b01      	ldr	r3, [sp, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f300 80df 	bgt.w	80059fc <_dtoa_r+0x66c>
 800583e:	f040 826d 	bne.w	8005d1c <_dtoa_r+0x98c>
 8005842:	4b69      	ldr	r3, [pc, #420]	; (80059e8 <_dtoa_r+0x658>)
 8005844:	2200      	movs	r2, #0
 8005846:	4640      	mov	r0, r8
 8005848:	4649      	mov	r1, r9
 800584a:	f7fa fed5 	bl	80005f8 <__aeabi_dmul>
 800584e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005852:	f7fb f957 	bl	8000b04 <__aeabi_dcmpge>
 8005856:	9e01      	ldr	r6, [sp, #4]
 8005858:	4637      	mov	r7, r6
 800585a:	2800      	cmp	r0, #0
 800585c:	f040 8243 	bne.w	8005ce6 <_dtoa_r+0x956>
 8005860:	9d00      	ldr	r5, [sp, #0]
 8005862:	2331      	movs	r3, #49	; 0x31
 8005864:	f805 3b01 	strb.w	r3, [r5], #1
 8005868:	f10a 0a01 	add.w	sl, sl, #1
 800586c:	e23f      	b.n	8005cee <_dtoa_r+0x95e>
 800586e:	07f2      	lsls	r2, r6, #31
 8005870:	d505      	bpl.n	800587e <_dtoa_r+0x4ee>
 8005872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005876:	f7fa febf 	bl	80005f8 <__aeabi_dmul>
 800587a:	3501      	adds	r5, #1
 800587c:	2301      	movs	r3, #1
 800587e:	1076      	asrs	r6, r6, #1
 8005880:	3708      	adds	r7, #8
 8005882:	e76c      	b.n	800575e <_dtoa_r+0x3ce>
 8005884:	2502      	movs	r5, #2
 8005886:	e76f      	b.n	8005768 <_dtoa_r+0x3d8>
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	f8cd a01c 	str.w	sl, [sp, #28]
 800588e:	930c      	str	r3, [sp, #48]	; 0x30
 8005890:	e78d      	b.n	80057ae <_dtoa_r+0x41e>
 8005892:	9900      	ldr	r1, [sp, #0]
 8005894:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005898:	4b4e      	ldr	r3, [pc, #312]	; (80059d4 <_dtoa_r+0x644>)
 800589a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800589e:	4401      	add	r1, r0
 80058a0:	9102      	str	r1, [sp, #8]
 80058a2:	9908      	ldr	r1, [sp, #32]
 80058a4:	eeb0 8a47 	vmov.f32	s16, s14
 80058a8:	eef0 8a67 	vmov.f32	s17, s15
 80058ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058b4:	2900      	cmp	r1, #0
 80058b6:	d045      	beq.n	8005944 <_dtoa_r+0x5b4>
 80058b8:	494c      	ldr	r1, [pc, #304]	; (80059ec <_dtoa_r+0x65c>)
 80058ba:	2000      	movs	r0, #0
 80058bc:	f7fa ffc6 	bl	800084c <__aeabi_ddiv>
 80058c0:	ec53 2b18 	vmov	r2, r3, d8
 80058c4:	f7fa fce0 	bl	8000288 <__aeabi_dsub>
 80058c8:	9d00      	ldr	r5, [sp, #0]
 80058ca:	ec41 0b18 	vmov	d8, r0, r1
 80058ce:	4639      	mov	r1, r7
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7fb f941 	bl	8000b58 <__aeabi_d2iz>
 80058d6:	900c      	str	r0, [sp, #48]	; 0x30
 80058d8:	f7fa fe24 	bl	8000524 <__aeabi_i2d>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4630      	mov	r0, r6
 80058e2:	4639      	mov	r1, r7
 80058e4:	f7fa fcd0 	bl	8000288 <__aeabi_dsub>
 80058e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058ea:	3330      	adds	r3, #48	; 0x30
 80058ec:	f805 3b01 	strb.w	r3, [r5], #1
 80058f0:	ec53 2b18 	vmov	r2, r3, d8
 80058f4:	4606      	mov	r6, r0
 80058f6:	460f      	mov	r7, r1
 80058f8:	f7fb f8f0 	bl	8000adc <__aeabi_dcmplt>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d165      	bne.n	80059cc <_dtoa_r+0x63c>
 8005900:	4632      	mov	r2, r6
 8005902:	463b      	mov	r3, r7
 8005904:	4935      	ldr	r1, [pc, #212]	; (80059dc <_dtoa_r+0x64c>)
 8005906:	2000      	movs	r0, #0
 8005908:	f7fa fcbe 	bl	8000288 <__aeabi_dsub>
 800590c:	ec53 2b18 	vmov	r2, r3, d8
 8005910:	f7fb f8e4 	bl	8000adc <__aeabi_dcmplt>
 8005914:	2800      	cmp	r0, #0
 8005916:	f040 80b9 	bne.w	8005a8c <_dtoa_r+0x6fc>
 800591a:	9b02      	ldr	r3, [sp, #8]
 800591c:	429d      	cmp	r5, r3
 800591e:	f43f af75 	beq.w	800580c <_dtoa_r+0x47c>
 8005922:	4b2f      	ldr	r3, [pc, #188]	; (80059e0 <_dtoa_r+0x650>)
 8005924:	ec51 0b18 	vmov	r0, r1, d8
 8005928:	2200      	movs	r2, #0
 800592a:	f7fa fe65 	bl	80005f8 <__aeabi_dmul>
 800592e:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <_dtoa_r+0x650>)
 8005930:	ec41 0b18 	vmov	d8, r0, r1
 8005934:	2200      	movs	r2, #0
 8005936:	4630      	mov	r0, r6
 8005938:	4639      	mov	r1, r7
 800593a:	f7fa fe5d 	bl	80005f8 <__aeabi_dmul>
 800593e:	4606      	mov	r6, r0
 8005940:	460f      	mov	r7, r1
 8005942:	e7c4      	b.n	80058ce <_dtoa_r+0x53e>
 8005944:	ec51 0b17 	vmov	r0, r1, d7
 8005948:	f7fa fe56 	bl	80005f8 <__aeabi_dmul>
 800594c:	9b02      	ldr	r3, [sp, #8]
 800594e:	9d00      	ldr	r5, [sp, #0]
 8005950:	930c      	str	r3, [sp, #48]	; 0x30
 8005952:	ec41 0b18 	vmov	d8, r0, r1
 8005956:	4639      	mov	r1, r7
 8005958:	4630      	mov	r0, r6
 800595a:	f7fb f8fd 	bl	8000b58 <__aeabi_d2iz>
 800595e:	9011      	str	r0, [sp, #68]	; 0x44
 8005960:	f7fa fde0 	bl	8000524 <__aeabi_i2d>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4630      	mov	r0, r6
 800596a:	4639      	mov	r1, r7
 800596c:	f7fa fc8c 	bl	8000288 <__aeabi_dsub>
 8005970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005972:	3330      	adds	r3, #48	; 0x30
 8005974:	f805 3b01 	strb.w	r3, [r5], #1
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	429d      	cmp	r5, r3
 800597c:	4606      	mov	r6, r0
 800597e:	460f      	mov	r7, r1
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	d134      	bne.n	80059f0 <_dtoa_r+0x660>
 8005986:	4b19      	ldr	r3, [pc, #100]	; (80059ec <_dtoa_r+0x65c>)
 8005988:	ec51 0b18 	vmov	r0, r1, d8
 800598c:	f7fa fc7e 	bl	800028c <__adddf3>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4630      	mov	r0, r6
 8005996:	4639      	mov	r1, r7
 8005998:	f7fb f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800599c:	2800      	cmp	r0, #0
 800599e:	d175      	bne.n	8005a8c <_dtoa_r+0x6fc>
 80059a0:	ec53 2b18 	vmov	r2, r3, d8
 80059a4:	4911      	ldr	r1, [pc, #68]	; (80059ec <_dtoa_r+0x65c>)
 80059a6:	2000      	movs	r0, #0
 80059a8:	f7fa fc6e 	bl	8000288 <__aeabi_dsub>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fb f892 	bl	8000adc <__aeabi_dcmplt>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	f43f af27 	beq.w	800580c <_dtoa_r+0x47c>
 80059be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059c0:	1e6b      	subs	r3, r5, #1
 80059c2:	930c      	str	r3, [sp, #48]	; 0x30
 80059c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059c8:	2b30      	cmp	r3, #48	; 0x30
 80059ca:	d0f8      	beq.n	80059be <_dtoa_r+0x62e>
 80059cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80059d0:	e04a      	b.n	8005a68 <_dtoa_r+0x6d8>
 80059d2:	bf00      	nop
 80059d4:	08007878 	.word	0x08007878
 80059d8:	08007850 	.word	0x08007850
 80059dc:	3ff00000 	.word	0x3ff00000
 80059e0:	40240000 	.word	0x40240000
 80059e4:	401c0000 	.word	0x401c0000
 80059e8:	40140000 	.word	0x40140000
 80059ec:	3fe00000 	.word	0x3fe00000
 80059f0:	4baf      	ldr	r3, [pc, #700]	; (8005cb0 <_dtoa_r+0x920>)
 80059f2:	f7fa fe01 	bl	80005f8 <__aeabi_dmul>
 80059f6:	4606      	mov	r6, r0
 80059f8:	460f      	mov	r7, r1
 80059fa:	e7ac      	b.n	8005956 <_dtoa_r+0x5c6>
 80059fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a00:	9d00      	ldr	r5, [sp, #0]
 8005a02:	4642      	mov	r2, r8
 8005a04:	464b      	mov	r3, r9
 8005a06:	4630      	mov	r0, r6
 8005a08:	4639      	mov	r1, r7
 8005a0a:	f7fa ff1f 	bl	800084c <__aeabi_ddiv>
 8005a0e:	f7fb f8a3 	bl	8000b58 <__aeabi_d2iz>
 8005a12:	9002      	str	r0, [sp, #8]
 8005a14:	f7fa fd86 	bl	8000524 <__aeabi_i2d>
 8005a18:	4642      	mov	r2, r8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	f7fa fdec 	bl	80005f8 <__aeabi_dmul>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4630      	mov	r0, r6
 8005a26:	4639      	mov	r1, r7
 8005a28:	f7fa fc2e 	bl	8000288 <__aeabi_dsub>
 8005a2c:	9e02      	ldr	r6, [sp, #8]
 8005a2e:	9f01      	ldr	r7, [sp, #4]
 8005a30:	3630      	adds	r6, #48	; 0x30
 8005a32:	f805 6b01 	strb.w	r6, [r5], #1
 8005a36:	9e00      	ldr	r6, [sp, #0]
 8005a38:	1bae      	subs	r6, r5, r6
 8005a3a:	42b7      	cmp	r7, r6
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	d137      	bne.n	8005ab2 <_dtoa_r+0x722>
 8005a42:	f7fa fc23 	bl	800028c <__adddf3>
 8005a46:	4642      	mov	r2, r8
 8005a48:	464b      	mov	r3, r9
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	f7fb f863 	bl	8000b18 <__aeabi_dcmpgt>
 8005a52:	b9c8      	cbnz	r0, 8005a88 <_dtoa_r+0x6f8>
 8005a54:	4642      	mov	r2, r8
 8005a56:	464b      	mov	r3, r9
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	f7fb f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a60:	b110      	cbz	r0, 8005a68 <_dtoa_r+0x6d8>
 8005a62:	9b02      	ldr	r3, [sp, #8]
 8005a64:	07d9      	lsls	r1, r3, #31
 8005a66:	d40f      	bmi.n	8005a88 <_dtoa_r+0x6f8>
 8005a68:	4620      	mov	r0, r4
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	f000 fad6 	bl	800601c <_Bfree>
 8005a70:	2300      	movs	r3, #0
 8005a72:	702b      	strb	r3, [r5, #0]
 8005a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a76:	f10a 0001 	add.w	r0, sl, #1
 8005a7a:	6018      	str	r0, [r3, #0]
 8005a7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f43f acd8 	beq.w	8005434 <_dtoa_r+0xa4>
 8005a84:	601d      	str	r5, [r3, #0]
 8005a86:	e4d5      	b.n	8005434 <_dtoa_r+0xa4>
 8005a88:	f8cd a01c 	str.w	sl, [sp, #28]
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	461d      	mov	r5, r3
 8005a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a94:	2a39      	cmp	r2, #57	; 0x39
 8005a96:	d108      	bne.n	8005aaa <_dtoa_r+0x71a>
 8005a98:	9a00      	ldr	r2, [sp, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d1f7      	bne.n	8005a8e <_dtoa_r+0x6fe>
 8005a9e:	9a07      	ldr	r2, [sp, #28]
 8005aa0:	9900      	ldr	r1, [sp, #0]
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	9207      	str	r2, [sp, #28]
 8005aa6:	2230      	movs	r2, #48	; 0x30
 8005aa8:	700a      	strb	r2, [r1, #0]
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	3201      	adds	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e78c      	b.n	80059cc <_dtoa_r+0x63c>
 8005ab2:	4b7f      	ldr	r3, [pc, #508]	; (8005cb0 <_dtoa_r+0x920>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f7fa fd9f 	bl	80005f8 <__aeabi_dmul>
 8005aba:	2200      	movs	r2, #0
 8005abc:	2300      	movs	r3, #0
 8005abe:	4606      	mov	r6, r0
 8005ac0:	460f      	mov	r7, r1
 8005ac2:	f7fb f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d09b      	beq.n	8005a02 <_dtoa_r+0x672>
 8005aca:	e7cd      	b.n	8005a68 <_dtoa_r+0x6d8>
 8005acc:	9a08      	ldr	r2, [sp, #32]
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	f000 80c4 	beq.w	8005c5c <_dtoa_r+0x8cc>
 8005ad4:	9a05      	ldr	r2, [sp, #20]
 8005ad6:	2a01      	cmp	r2, #1
 8005ad8:	f300 80a8 	bgt.w	8005c2c <_dtoa_r+0x89c>
 8005adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ade:	2a00      	cmp	r2, #0
 8005ae0:	f000 80a0 	beq.w	8005c24 <_dtoa_r+0x894>
 8005ae4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ae8:	9e06      	ldr	r6, [sp, #24]
 8005aea:	4645      	mov	r5, r8
 8005aec:	9a04      	ldr	r2, [sp, #16]
 8005aee:	2101      	movs	r1, #1
 8005af0:	441a      	add	r2, r3
 8005af2:	4620      	mov	r0, r4
 8005af4:	4498      	add	r8, r3
 8005af6:	9204      	str	r2, [sp, #16]
 8005af8:	f000 fb4c 	bl	8006194 <__i2b>
 8005afc:	4607      	mov	r7, r0
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	dd0b      	ble.n	8005b1a <_dtoa_r+0x78a>
 8005b02:	9b04      	ldr	r3, [sp, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd08      	ble.n	8005b1a <_dtoa_r+0x78a>
 8005b08:	42ab      	cmp	r3, r5
 8005b0a:	9a04      	ldr	r2, [sp, #16]
 8005b0c:	bfa8      	it	ge
 8005b0e:	462b      	movge	r3, r5
 8005b10:	eba8 0803 	sub.w	r8, r8, r3
 8005b14:	1aed      	subs	r5, r5, r3
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	9b06      	ldr	r3, [sp, #24]
 8005b1c:	b1fb      	cbz	r3, 8005b5e <_dtoa_r+0x7ce>
 8005b1e:	9b08      	ldr	r3, [sp, #32]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 809f 	beq.w	8005c64 <_dtoa_r+0x8d4>
 8005b26:	2e00      	cmp	r6, #0
 8005b28:	dd11      	ble.n	8005b4e <_dtoa_r+0x7be>
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	4632      	mov	r2, r6
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 fbec 	bl	800630c <__pow5mult>
 8005b34:	465a      	mov	r2, fp
 8005b36:	4601      	mov	r1, r0
 8005b38:	4607      	mov	r7, r0
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fb40 	bl	80061c0 <__multiply>
 8005b40:	4659      	mov	r1, fp
 8005b42:	9007      	str	r0, [sp, #28]
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fa69 	bl	800601c <_Bfree>
 8005b4a:	9b07      	ldr	r3, [sp, #28]
 8005b4c:	469b      	mov	fp, r3
 8005b4e:	9b06      	ldr	r3, [sp, #24]
 8005b50:	1b9a      	subs	r2, r3, r6
 8005b52:	d004      	beq.n	8005b5e <_dtoa_r+0x7ce>
 8005b54:	4659      	mov	r1, fp
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fbd8 	bl	800630c <__pow5mult>
 8005b5c:	4683      	mov	fp, r0
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fb17 	bl	8006194 <__i2b>
 8005b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	dd7c      	ble.n	8005c68 <_dtoa_r+0x8d8>
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4601      	mov	r1, r0
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 fbca 	bl	800630c <__pow5mult>
 8005b78:	9b05      	ldr	r3, [sp, #20]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	dd76      	ble.n	8005c6e <_dtoa_r+0x8de>
 8005b80:	2300      	movs	r3, #0
 8005b82:	9306      	str	r3, [sp, #24]
 8005b84:	6933      	ldr	r3, [r6, #16]
 8005b86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b8a:	6918      	ldr	r0, [r3, #16]
 8005b8c:	f000 fab2 	bl	80060f4 <__hi0bits>
 8005b90:	f1c0 0020 	rsb	r0, r0, #32
 8005b94:	9b04      	ldr	r3, [sp, #16]
 8005b96:	4418      	add	r0, r3
 8005b98:	f010 001f 	ands.w	r0, r0, #31
 8005b9c:	f000 8086 	beq.w	8005cac <_dtoa_r+0x91c>
 8005ba0:	f1c0 0320 	rsb	r3, r0, #32
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	dd7f      	ble.n	8005ca8 <_dtoa_r+0x918>
 8005ba8:	f1c0 001c 	rsb	r0, r0, #28
 8005bac:	9b04      	ldr	r3, [sp, #16]
 8005bae:	4403      	add	r3, r0
 8005bb0:	4480      	add	r8, r0
 8005bb2:	4405      	add	r5, r0
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	f1b8 0f00 	cmp.w	r8, #0
 8005bba:	dd05      	ble.n	8005bc8 <_dtoa_r+0x838>
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 fbfd 	bl	80063c0 <__lshift>
 8005bc6:	4683      	mov	fp, r0
 8005bc8:	9b04      	ldr	r3, [sp, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dd05      	ble.n	8005bda <_dtoa_r+0x84a>
 8005bce:	4631      	mov	r1, r6
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 fbf4 	bl	80063c0 <__lshift>
 8005bd8:	4606      	mov	r6, r0
 8005bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d069      	beq.n	8005cb4 <_dtoa_r+0x924>
 8005be0:	4631      	mov	r1, r6
 8005be2:	4658      	mov	r0, fp
 8005be4:	f000 fc58 	bl	8006498 <__mcmp>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	da63      	bge.n	8005cb4 <_dtoa_r+0x924>
 8005bec:	2300      	movs	r3, #0
 8005bee:	4659      	mov	r1, fp
 8005bf0:	220a      	movs	r2, #10
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fa34 	bl	8006060 <__multadd>
 8005bf8:	9b08      	ldr	r3, [sp, #32]
 8005bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bfe:	4683      	mov	fp, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 818f 	beq.w	8005f24 <_dtoa_r+0xb94>
 8005c06:	4639      	mov	r1, r7
 8005c08:	2300      	movs	r3, #0
 8005c0a:	220a      	movs	r2, #10
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f000 fa27 	bl	8006060 <__multadd>
 8005c12:	f1b9 0f00 	cmp.w	r9, #0
 8005c16:	4607      	mov	r7, r0
 8005c18:	f300 808e 	bgt.w	8005d38 <_dtoa_r+0x9a8>
 8005c1c:	9b05      	ldr	r3, [sp, #20]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	dc50      	bgt.n	8005cc4 <_dtoa_r+0x934>
 8005c22:	e089      	b.n	8005d38 <_dtoa_r+0x9a8>
 8005c24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c2a:	e75d      	b.n	8005ae8 <_dtoa_r+0x758>
 8005c2c:	9b01      	ldr	r3, [sp, #4]
 8005c2e:	1e5e      	subs	r6, r3, #1
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	42b3      	cmp	r3, r6
 8005c34:	bfbf      	itttt	lt
 8005c36:	9b06      	ldrlt	r3, [sp, #24]
 8005c38:	9606      	strlt	r6, [sp, #24]
 8005c3a:	1af2      	sublt	r2, r6, r3
 8005c3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005c3e:	bfb6      	itet	lt
 8005c40:	189b      	addlt	r3, r3, r2
 8005c42:	1b9e      	subge	r6, r3, r6
 8005c44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	bfb8      	it	lt
 8005c4a:	2600      	movlt	r6, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfb5      	itete	lt
 8005c50:	eba8 0503 	sublt.w	r5, r8, r3
 8005c54:	9b01      	ldrge	r3, [sp, #4]
 8005c56:	2300      	movlt	r3, #0
 8005c58:	4645      	movge	r5, r8
 8005c5a:	e747      	b.n	8005aec <_dtoa_r+0x75c>
 8005c5c:	9e06      	ldr	r6, [sp, #24]
 8005c5e:	9f08      	ldr	r7, [sp, #32]
 8005c60:	4645      	mov	r5, r8
 8005c62:	e74c      	b.n	8005afe <_dtoa_r+0x76e>
 8005c64:	9a06      	ldr	r2, [sp, #24]
 8005c66:	e775      	b.n	8005b54 <_dtoa_r+0x7c4>
 8005c68:	9b05      	ldr	r3, [sp, #20]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	dc18      	bgt.n	8005ca0 <_dtoa_r+0x910>
 8005c6e:	9b02      	ldr	r3, [sp, #8]
 8005c70:	b9b3      	cbnz	r3, 8005ca0 <_dtoa_r+0x910>
 8005c72:	9b03      	ldr	r3, [sp, #12]
 8005c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c78:	b9a3      	cbnz	r3, 8005ca4 <_dtoa_r+0x914>
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c80:	0d1b      	lsrs	r3, r3, #20
 8005c82:	051b      	lsls	r3, r3, #20
 8005c84:	b12b      	cbz	r3, 8005c92 <_dtoa_r+0x902>
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	9304      	str	r3, [sp, #16]
 8005c8c:	f108 0801 	add.w	r8, r8, #1
 8005c90:	2301      	movs	r3, #1
 8005c92:	9306      	str	r3, [sp, #24]
 8005c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f47f af74 	bne.w	8005b84 <_dtoa_r+0x7f4>
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	e779      	b.n	8005b94 <_dtoa_r+0x804>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e7f6      	b.n	8005c92 <_dtoa_r+0x902>
 8005ca4:	9b02      	ldr	r3, [sp, #8]
 8005ca6:	e7f4      	b.n	8005c92 <_dtoa_r+0x902>
 8005ca8:	d085      	beq.n	8005bb6 <_dtoa_r+0x826>
 8005caa:	4618      	mov	r0, r3
 8005cac:	301c      	adds	r0, #28
 8005cae:	e77d      	b.n	8005bac <_dtoa_r+0x81c>
 8005cb0:	40240000 	.word	0x40240000
 8005cb4:	9b01      	ldr	r3, [sp, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dc38      	bgt.n	8005d2c <_dtoa_r+0x99c>
 8005cba:	9b05      	ldr	r3, [sp, #20]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	dd35      	ble.n	8005d2c <_dtoa_r+0x99c>
 8005cc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005cc4:	f1b9 0f00 	cmp.w	r9, #0
 8005cc8:	d10d      	bne.n	8005ce6 <_dtoa_r+0x956>
 8005cca:	4631      	mov	r1, r6
 8005ccc:	464b      	mov	r3, r9
 8005cce:	2205      	movs	r2, #5
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 f9c5 	bl	8006060 <__multadd>
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	4606      	mov	r6, r0
 8005cda:	4658      	mov	r0, fp
 8005cdc:	f000 fbdc 	bl	8006498 <__mcmp>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	f73f adbd 	bgt.w	8005860 <_dtoa_r+0x4d0>
 8005ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce8:	9d00      	ldr	r5, [sp, #0]
 8005cea:	ea6f 0a03 	mvn.w	sl, r3
 8005cee:	f04f 0800 	mov.w	r8, #0
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 f991 	bl	800601c <_Bfree>
 8005cfa:	2f00      	cmp	r7, #0
 8005cfc:	f43f aeb4 	beq.w	8005a68 <_dtoa_r+0x6d8>
 8005d00:	f1b8 0f00 	cmp.w	r8, #0
 8005d04:	d005      	beq.n	8005d12 <_dtoa_r+0x982>
 8005d06:	45b8      	cmp	r8, r7
 8005d08:	d003      	beq.n	8005d12 <_dtoa_r+0x982>
 8005d0a:	4641      	mov	r1, r8
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 f985 	bl	800601c <_Bfree>
 8005d12:	4639      	mov	r1, r7
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 f981 	bl	800601c <_Bfree>
 8005d1a:	e6a5      	b.n	8005a68 <_dtoa_r+0x6d8>
 8005d1c:	2600      	movs	r6, #0
 8005d1e:	4637      	mov	r7, r6
 8005d20:	e7e1      	b.n	8005ce6 <_dtoa_r+0x956>
 8005d22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005d24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d28:	4637      	mov	r7, r6
 8005d2a:	e599      	b.n	8005860 <_dtoa_r+0x4d0>
 8005d2c:	9b08      	ldr	r3, [sp, #32]
 8005d2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 80fd 	beq.w	8005f32 <_dtoa_r+0xba2>
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	dd05      	ble.n	8005d48 <_dtoa_r+0x9b8>
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	462a      	mov	r2, r5
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fb3d 	bl	80063c0 <__lshift>
 8005d46:	4607      	mov	r7, r0
 8005d48:	9b06      	ldr	r3, [sp, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d05c      	beq.n	8005e08 <_dtoa_r+0xa78>
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 f923 	bl	8005f9c <_Balloc>
 8005d56:	4605      	mov	r5, r0
 8005d58:	b928      	cbnz	r0, 8005d66 <_dtoa_r+0x9d6>
 8005d5a:	4b80      	ldr	r3, [pc, #512]	; (8005f5c <_dtoa_r+0xbcc>)
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d62:	f7ff bb2e 	b.w	80053c2 <_dtoa_r+0x32>
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	3202      	adds	r2, #2
 8005d6a:	0092      	lsls	r2, r2, #2
 8005d6c:	f107 010c 	add.w	r1, r7, #12
 8005d70:	300c      	adds	r0, #12
 8005d72:	f000 f905 	bl	8005f80 <memcpy>
 8005d76:	2201      	movs	r2, #1
 8005d78:	4629      	mov	r1, r5
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 fb20 	bl	80063c0 <__lshift>
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	9b00      	ldr	r3, [sp, #0]
 8005d88:	444b      	add	r3, r9
 8005d8a:	9307      	str	r3, [sp, #28]
 8005d8c:	9b02      	ldr	r3, [sp, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	46b8      	mov	r8, r7
 8005d94:	9306      	str	r3, [sp, #24]
 8005d96:	4607      	mov	r7, r0
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	4658      	mov	r0, fp
 8005da0:	9302      	str	r3, [sp, #8]
 8005da2:	f7ff fa67 	bl	8005274 <quorem>
 8005da6:	4603      	mov	r3, r0
 8005da8:	3330      	adds	r3, #48	; 0x30
 8005daa:	9004      	str	r0, [sp, #16]
 8005dac:	4641      	mov	r1, r8
 8005dae:	4658      	mov	r0, fp
 8005db0:	9308      	str	r3, [sp, #32]
 8005db2:	f000 fb71 	bl	8006498 <__mcmp>
 8005db6:	463a      	mov	r2, r7
 8005db8:	4681      	mov	r9, r0
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 fb87 	bl	80064d0 <__mdiff>
 8005dc2:	68c2      	ldr	r2, [r0, #12]
 8005dc4:	9b08      	ldr	r3, [sp, #32]
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	bb02      	cbnz	r2, 8005e0c <_dtoa_r+0xa7c>
 8005dca:	4601      	mov	r1, r0
 8005dcc:	4658      	mov	r0, fp
 8005dce:	f000 fb63 	bl	8006498 <__mcmp>
 8005dd2:	9b08      	ldr	r3, [sp, #32]
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4620      	mov	r0, r4
 8005dda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005dde:	f000 f91d 	bl	800601c <_Bfree>
 8005de2:	9b05      	ldr	r3, [sp, #20]
 8005de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de6:	9d01      	ldr	r5, [sp, #4]
 8005de8:	ea43 0102 	orr.w	r1, r3, r2
 8005dec:	9b06      	ldr	r3, [sp, #24]
 8005dee:	430b      	orrs	r3, r1
 8005df0:	9b08      	ldr	r3, [sp, #32]
 8005df2:	d10d      	bne.n	8005e10 <_dtoa_r+0xa80>
 8005df4:	2b39      	cmp	r3, #57	; 0x39
 8005df6:	d029      	beq.n	8005e4c <_dtoa_r+0xabc>
 8005df8:	f1b9 0f00 	cmp.w	r9, #0
 8005dfc:	dd01      	ble.n	8005e02 <_dtoa_r+0xa72>
 8005dfe:	9b04      	ldr	r3, [sp, #16]
 8005e00:	3331      	adds	r3, #49	; 0x31
 8005e02:	9a02      	ldr	r2, [sp, #8]
 8005e04:	7013      	strb	r3, [r2, #0]
 8005e06:	e774      	b.n	8005cf2 <_dtoa_r+0x962>
 8005e08:	4638      	mov	r0, r7
 8005e0a:	e7b9      	b.n	8005d80 <_dtoa_r+0x9f0>
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	e7e2      	b.n	8005dd6 <_dtoa_r+0xa46>
 8005e10:	f1b9 0f00 	cmp.w	r9, #0
 8005e14:	db06      	blt.n	8005e24 <_dtoa_r+0xa94>
 8005e16:	9905      	ldr	r1, [sp, #20]
 8005e18:	ea41 0909 	orr.w	r9, r1, r9
 8005e1c:	9906      	ldr	r1, [sp, #24]
 8005e1e:	ea59 0101 	orrs.w	r1, r9, r1
 8005e22:	d120      	bne.n	8005e66 <_dtoa_r+0xad6>
 8005e24:	2a00      	cmp	r2, #0
 8005e26:	ddec      	ble.n	8005e02 <_dtoa_r+0xa72>
 8005e28:	4659      	mov	r1, fp
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	f000 fac6 	bl	80063c0 <__lshift>
 8005e34:	4631      	mov	r1, r6
 8005e36:	4683      	mov	fp, r0
 8005e38:	f000 fb2e 	bl	8006498 <__mcmp>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	dc02      	bgt.n	8005e48 <_dtoa_r+0xab8>
 8005e42:	d1de      	bne.n	8005e02 <_dtoa_r+0xa72>
 8005e44:	07da      	lsls	r2, r3, #31
 8005e46:	d5dc      	bpl.n	8005e02 <_dtoa_r+0xa72>
 8005e48:	2b39      	cmp	r3, #57	; 0x39
 8005e4a:	d1d8      	bne.n	8005dfe <_dtoa_r+0xa6e>
 8005e4c:	9a02      	ldr	r2, [sp, #8]
 8005e4e:	2339      	movs	r3, #57	; 0x39
 8005e50:	7013      	strb	r3, [r2, #0]
 8005e52:	462b      	mov	r3, r5
 8005e54:	461d      	mov	r5, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e5c:	2a39      	cmp	r2, #57	; 0x39
 8005e5e:	d050      	beq.n	8005f02 <_dtoa_r+0xb72>
 8005e60:	3201      	adds	r2, #1
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e745      	b.n	8005cf2 <_dtoa_r+0x962>
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	dd03      	ble.n	8005e72 <_dtoa_r+0xae2>
 8005e6a:	2b39      	cmp	r3, #57	; 0x39
 8005e6c:	d0ee      	beq.n	8005e4c <_dtoa_r+0xabc>
 8005e6e:	3301      	adds	r3, #1
 8005e70:	e7c7      	b.n	8005e02 <_dtoa_r+0xa72>
 8005e72:	9a01      	ldr	r2, [sp, #4]
 8005e74:	9907      	ldr	r1, [sp, #28]
 8005e76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e7a:	428a      	cmp	r2, r1
 8005e7c:	d02a      	beq.n	8005ed4 <_dtoa_r+0xb44>
 8005e7e:	4659      	mov	r1, fp
 8005e80:	2300      	movs	r3, #0
 8005e82:	220a      	movs	r2, #10
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f8eb 	bl	8006060 <__multadd>
 8005e8a:	45b8      	cmp	r8, r7
 8005e8c:	4683      	mov	fp, r0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	f04f 020a 	mov.w	r2, #10
 8005e96:	4641      	mov	r1, r8
 8005e98:	4620      	mov	r0, r4
 8005e9a:	d107      	bne.n	8005eac <_dtoa_r+0xb1c>
 8005e9c:	f000 f8e0 	bl	8006060 <__multadd>
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	4607      	mov	r7, r0
 8005ea4:	9b01      	ldr	r3, [sp, #4]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	e775      	b.n	8005d98 <_dtoa_r+0xa08>
 8005eac:	f000 f8d8 	bl	8006060 <__multadd>
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	220a      	movs	r2, #10
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 f8d1 	bl	8006060 <__multadd>
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	e7f0      	b.n	8005ea4 <_dtoa_r+0xb14>
 8005ec2:	f1b9 0f00 	cmp.w	r9, #0
 8005ec6:	9a00      	ldr	r2, [sp, #0]
 8005ec8:	bfcc      	ite	gt
 8005eca:	464d      	movgt	r5, r9
 8005ecc:	2501      	movle	r5, #1
 8005ece:	4415      	add	r5, r2
 8005ed0:	f04f 0800 	mov.w	r8, #0
 8005ed4:	4659      	mov	r1, fp
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	4620      	mov	r0, r4
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f000 fa70 	bl	80063c0 <__lshift>
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4683      	mov	fp, r0
 8005ee4:	f000 fad8 	bl	8006498 <__mcmp>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	dcb2      	bgt.n	8005e52 <_dtoa_r+0xac2>
 8005eec:	d102      	bne.n	8005ef4 <_dtoa_r+0xb64>
 8005eee:	9b01      	ldr	r3, [sp, #4]
 8005ef0:	07db      	lsls	r3, r3, #31
 8005ef2:	d4ae      	bmi.n	8005e52 <_dtoa_r+0xac2>
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005efc:	2a30      	cmp	r2, #48	; 0x30
 8005efe:	d0fa      	beq.n	8005ef6 <_dtoa_r+0xb66>
 8005f00:	e6f7      	b.n	8005cf2 <_dtoa_r+0x962>
 8005f02:	9a00      	ldr	r2, [sp, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1a5      	bne.n	8005e54 <_dtoa_r+0xac4>
 8005f08:	f10a 0a01 	add.w	sl, sl, #1
 8005f0c:	2331      	movs	r3, #49	; 0x31
 8005f0e:	e779      	b.n	8005e04 <_dtoa_r+0xa74>
 8005f10:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <_dtoa_r+0xbd0>)
 8005f12:	f7ff baaf 	b.w	8005474 <_dtoa_r+0xe4>
 8005f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f47f aa86 	bne.w	800542a <_dtoa_r+0x9a>
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <_dtoa_r+0xbd4>)
 8005f20:	f7ff baa8 	b.w	8005474 <_dtoa_r+0xe4>
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	dc03      	bgt.n	8005f32 <_dtoa_r+0xba2>
 8005f2a:	9b05      	ldr	r3, [sp, #20]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	f73f aec9 	bgt.w	8005cc4 <_dtoa_r+0x934>
 8005f32:	9d00      	ldr	r5, [sp, #0]
 8005f34:	4631      	mov	r1, r6
 8005f36:	4658      	mov	r0, fp
 8005f38:	f7ff f99c 	bl	8005274 <quorem>
 8005f3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f40:	f805 3b01 	strb.w	r3, [r5], #1
 8005f44:	9a00      	ldr	r2, [sp, #0]
 8005f46:	1aaa      	subs	r2, r5, r2
 8005f48:	4591      	cmp	r9, r2
 8005f4a:	ddba      	ble.n	8005ec2 <_dtoa_r+0xb32>
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	2300      	movs	r3, #0
 8005f50:	220a      	movs	r2, #10
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 f884 	bl	8006060 <__multadd>
 8005f58:	4683      	mov	fp, r0
 8005f5a:	e7eb      	b.n	8005f34 <_dtoa_r+0xba4>
 8005f5c:	080077db 	.word	0x080077db
 8005f60:	08007734 	.word	0x08007734
 8005f64:	08007758 	.word	0x08007758

08005f68 <_localeconv_r>:
 8005f68:	4800      	ldr	r0, [pc, #0]	; (8005f6c <_localeconv_r+0x4>)
 8005f6a:	4770      	bx	lr
 8005f6c:	2000016c 	.word	0x2000016c

08005f70 <malloc>:
 8005f70:	4b02      	ldr	r3, [pc, #8]	; (8005f7c <malloc+0xc>)
 8005f72:	4601      	mov	r1, r0
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	f000 bbef 	b.w	8006758 <_malloc_r>
 8005f7a:	bf00      	nop
 8005f7c:	20000018 	.word	0x20000018

08005f80 <memcpy>:
 8005f80:	440a      	add	r2, r1
 8005f82:	4291      	cmp	r1, r2
 8005f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f88:	d100      	bne.n	8005f8c <memcpy+0xc>
 8005f8a:	4770      	bx	lr
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f96:	4291      	cmp	r1, r2
 8005f98:	d1f9      	bne.n	8005f8e <memcpy+0xe>
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <_Balloc>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	b976      	cbnz	r6, 8005fc4 <_Balloc+0x28>
 8005fa6:	2010      	movs	r0, #16
 8005fa8:	f7ff ffe2 	bl	8005f70 <malloc>
 8005fac:	4602      	mov	r2, r0
 8005fae:	6260      	str	r0, [r4, #36]	; 0x24
 8005fb0:	b920      	cbnz	r0, 8005fbc <_Balloc+0x20>
 8005fb2:	4b18      	ldr	r3, [pc, #96]	; (8006014 <_Balloc+0x78>)
 8005fb4:	4818      	ldr	r0, [pc, #96]	; (8006018 <_Balloc+0x7c>)
 8005fb6:	2166      	movs	r1, #102	; 0x66
 8005fb8:	f000 fd94 	bl	8006ae4 <__assert_func>
 8005fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fc0:	6006      	str	r6, [r0, #0]
 8005fc2:	60c6      	str	r6, [r0, #12]
 8005fc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fc6:	68f3      	ldr	r3, [r6, #12]
 8005fc8:	b183      	cbz	r3, 8005fec <_Balloc+0x50>
 8005fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fd2:	b9b8      	cbnz	r0, 8006004 <_Balloc+0x68>
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8005fda:	1d72      	adds	r2, r6, #5
 8005fdc:	0092      	lsls	r2, r2, #2
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 fb5a 	bl	8006698 <_calloc_r>
 8005fe4:	b160      	cbz	r0, 8006000 <_Balloc+0x64>
 8005fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fea:	e00e      	b.n	800600a <_Balloc+0x6e>
 8005fec:	2221      	movs	r2, #33	; 0x21
 8005fee:	2104      	movs	r1, #4
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 fb51 	bl	8006698 <_calloc_r>
 8005ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff8:	60f0      	str	r0, [r6, #12]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e4      	bne.n	8005fca <_Balloc+0x2e>
 8006000:	2000      	movs	r0, #0
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	6802      	ldr	r2, [r0, #0]
 8006006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800600a:	2300      	movs	r3, #0
 800600c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006010:	e7f7      	b.n	8006002 <_Balloc+0x66>
 8006012:	bf00      	nop
 8006014:	08007765 	.word	0x08007765
 8006018:	080077ec 	.word	0x080077ec

0800601c <_Bfree>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006020:	4605      	mov	r5, r0
 8006022:	460c      	mov	r4, r1
 8006024:	b976      	cbnz	r6, 8006044 <_Bfree+0x28>
 8006026:	2010      	movs	r0, #16
 8006028:	f7ff ffa2 	bl	8005f70 <malloc>
 800602c:	4602      	mov	r2, r0
 800602e:	6268      	str	r0, [r5, #36]	; 0x24
 8006030:	b920      	cbnz	r0, 800603c <_Bfree+0x20>
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <_Bfree+0x3c>)
 8006034:	4809      	ldr	r0, [pc, #36]	; (800605c <_Bfree+0x40>)
 8006036:	218a      	movs	r1, #138	; 0x8a
 8006038:	f000 fd54 	bl	8006ae4 <__assert_func>
 800603c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006040:	6006      	str	r6, [r0, #0]
 8006042:	60c6      	str	r6, [r0, #12]
 8006044:	b13c      	cbz	r4, 8006056 <_Bfree+0x3a>
 8006046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006048:	6862      	ldr	r2, [r4, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006050:	6021      	str	r1, [r4, #0]
 8006052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	08007765 	.word	0x08007765
 800605c:	080077ec 	.word	0x080077ec

08006060 <__multadd>:
 8006060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006064:	690e      	ldr	r6, [r1, #16]
 8006066:	4607      	mov	r7, r0
 8006068:	4698      	mov	r8, r3
 800606a:	460c      	mov	r4, r1
 800606c:	f101 0014 	add.w	r0, r1, #20
 8006070:	2300      	movs	r3, #0
 8006072:	6805      	ldr	r5, [r0, #0]
 8006074:	b2a9      	uxth	r1, r5
 8006076:	fb02 8101 	mla	r1, r2, r1, r8
 800607a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800607e:	0c2d      	lsrs	r5, r5, #16
 8006080:	fb02 c505 	mla	r5, r2, r5, ip
 8006084:	b289      	uxth	r1, r1
 8006086:	3301      	adds	r3, #1
 8006088:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800608c:	429e      	cmp	r6, r3
 800608e:	f840 1b04 	str.w	r1, [r0], #4
 8006092:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006096:	dcec      	bgt.n	8006072 <__multadd+0x12>
 8006098:	f1b8 0f00 	cmp.w	r8, #0
 800609c:	d022      	beq.n	80060e4 <__multadd+0x84>
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	42b3      	cmp	r3, r6
 80060a2:	dc19      	bgt.n	80060d8 <__multadd+0x78>
 80060a4:	6861      	ldr	r1, [r4, #4]
 80060a6:	4638      	mov	r0, r7
 80060a8:	3101      	adds	r1, #1
 80060aa:	f7ff ff77 	bl	8005f9c <_Balloc>
 80060ae:	4605      	mov	r5, r0
 80060b0:	b928      	cbnz	r0, 80060be <__multadd+0x5e>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <__multadd+0x8c>)
 80060b6:	480e      	ldr	r0, [pc, #56]	; (80060f0 <__multadd+0x90>)
 80060b8:	21b5      	movs	r1, #181	; 0xb5
 80060ba:	f000 fd13 	bl	8006ae4 <__assert_func>
 80060be:	6922      	ldr	r2, [r4, #16]
 80060c0:	3202      	adds	r2, #2
 80060c2:	f104 010c 	add.w	r1, r4, #12
 80060c6:	0092      	lsls	r2, r2, #2
 80060c8:	300c      	adds	r0, #12
 80060ca:	f7ff ff59 	bl	8005f80 <memcpy>
 80060ce:	4621      	mov	r1, r4
 80060d0:	4638      	mov	r0, r7
 80060d2:	f7ff ffa3 	bl	800601c <_Bfree>
 80060d6:	462c      	mov	r4, r5
 80060d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80060dc:	3601      	adds	r6, #1
 80060de:	f8c3 8014 	str.w	r8, [r3, #20]
 80060e2:	6126      	str	r6, [r4, #16]
 80060e4:	4620      	mov	r0, r4
 80060e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ea:	bf00      	nop
 80060ec:	080077db 	.word	0x080077db
 80060f0:	080077ec 	.word	0x080077ec

080060f4 <__hi0bits>:
 80060f4:	0c03      	lsrs	r3, r0, #16
 80060f6:	041b      	lsls	r3, r3, #16
 80060f8:	b9d3      	cbnz	r3, 8006130 <__hi0bits+0x3c>
 80060fa:	0400      	lsls	r0, r0, #16
 80060fc:	2310      	movs	r3, #16
 80060fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006102:	bf04      	itt	eq
 8006104:	0200      	lsleq	r0, r0, #8
 8006106:	3308      	addeq	r3, #8
 8006108:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800610c:	bf04      	itt	eq
 800610e:	0100      	lsleq	r0, r0, #4
 8006110:	3304      	addeq	r3, #4
 8006112:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006116:	bf04      	itt	eq
 8006118:	0080      	lsleq	r0, r0, #2
 800611a:	3302      	addeq	r3, #2
 800611c:	2800      	cmp	r0, #0
 800611e:	db05      	blt.n	800612c <__hi0bits+0x38>
 8006120:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006124:	f103 0301 	add.w	r3, r3, #1
 8006128:	bf08      	it	eq
 800612a:	2320      	moveq	r3, #32
 800612c:	4618      	mov	r0, r3
 800612e:	4770      	bx	lr
 8006130:	2300      	movs	r3, #0
 8006132:	e7e4      	b.n	80060fe <__hi0bits+0xa>

08006134 <__lo0bits>:
 8006134:	6803      	ldr	r3, [r0, #0]
 8006136:	f013 0207 	ands.w	r2, r3, #7
 800613a:	4601      	mov	r1, r0
 800613c:	d00b      	beq.n	8006156 <__lo0bits+0x22>
 800613e:	07da      	lsls	r2, r3, #31
 8006140:	d424      	bmi.n	800618c <__lo0bits+0x58>
 8006142:	0798      	lsls	r0, r3, #30
 8006144:	bf49      	itett	mi
 8006146:	085b      	lsrmi	r3, r3, #1
 8006148:	089b      	lsrpl	r3, r3, #2
 800614a:	2001      	movmi	r0, #1
 800614c:	600b      	strmi	r3, [r1, #0]
 800614e:	bf5c      	itt	pl
 8006150:	600b      	strpl	r3, [r1, #0]
 8006152:	2002      	movpl	r0, #2
 8006154:	4770      	bx	lr
 8006156:	b298      	uxth	r0, r3
 8006158:	b9b0      	cbnz	r0, 8006188 <__lo0bits+0x54>
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	2010      	movs	r0, #16
 800615e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006162:	bf04      	itt	eq
 8006164:	0a1b      	lsreq	r3, r3, #8
 8006166:	3008      	addeq	r0, #8
 8006168:	071a      	lsls	r2, r3, #28
 800616a:	bf04      	itt	eq
 800616c:	091b      	lsreq	r3, r3, #4
 800616e:	3004      	addeq	r0, #4
 8006170:	079a      	lsls	r2, r3, #30
 8006172:	bf04      	itt	eq
 8006174:	089b      	lsreq	r3, r3, #2
 8006176:	3002      	addeq	r0, #2
 8006178:	07da      	lsls	r2, r3, #31
 800617a:	d403      	bmi.n	8006184 <__lo0bits+0x50>
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	f100 0001 	add.w	r0, r0, #1
 8006182:	d005      	beq.n	8006190 <__lo0bits+0x5c>
 8006184:	600b      	str	r3, [r1, #0]
 8006186:	4770      	bx	lr
 8006188:	4610      	mov	r0, r2
 800618a:	e7e8      	b.n	800615e <__lo0bits+0x2a>
 800618c:	2000      	movs	r0, #0
 800618e:	4770      	bx	lr
 8006190:	2020      	movs	r0, #32
 8006192:	4770      	bx	lr

08006194 <__i2b>:
 8006194:	b510      	push	{r4, lr}
 8006196:	460c      	mov	r4, r1
 8006198:	2101      	movs	r1, #1
 800619a:	f7ff feff 	bl	8005f9c <_Balloc>
 800619e:	4602      	mov	r2, r0
 80061a0:	b928      	cbnz	r0, 80061ae <__i2b+0x1a>
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <__i2b+0x24>)
 80061a4:	4805      	ldr	r0, [pc, #20]	; (80061bc <__i2b+0x28>)
 80061a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061aa:	f000 fc9b 	bl	8006ae4 <__assert_func>
 80061ae:	2301      	movs	r3, #1
 80061b0:	6144      	str	r4, [r0, #20]
 80061b2:	6103      	str	r3, [r0, #16]
 80061b4:	bd10      	pop	{r4, pc}
 80061b6:	bf00      	nop
 80061b8:	080077db 	.word	0x080077db
 80061bc:	080077ec 	.word	0x080077ec

080061c0 <__multiply>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	4614      	mov	r4, r2
 80061c6:	690a      	ldr	r2, [r1, #16]
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	bfb8      	it	lt
 80061ce:	460b      	movlt	r3, r1
 80061d0:	460d      	mov	r5, r1
 80061d2:	bfbc      	itt	lt
 80061d4:	4625      	movlt	r5, r4
 80061d6:	461c      	movlt	r4, r3
 80061d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80061dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80061e0:	68ab      	ldr	r3, [r5, #8]
 80061e2:	6869      	ldr	r1, [r5, #4]
 80061e4:	eb0a 0709 	add.w	r7, sl, r9
 80061e8:	42bb      	cmp	r3, r7
 80061ea:	b085      	sub	sp, #20
 80061ec:	bfb8      	it	lt
 80061ee:	3101      	addlt	r1, #1
 80061f0:	f7ff fed4 	bl	8005f9c <_Balloc>
 80061f4:	b930      	cbnz	r0, 8006204 <__multiply+0x44>
 80061f6:	4602      	mov	r2, r0
 80061f8:	4b42      	ldr	r3, [pc, #264]	; (8006304 <__multiply+0x144>)
 80061fa:	4843      	ldr	r0, [pc, #268]	; (8006308 <__multiply+0x148>)
 80061fc:	f240 115d 	movw	r1, #349	; 0x15d
 8006200:	f000 fc70 	bl	8006ae4 <__assert_func>
 8006204:	f100 0614 	add.w	r6, r0, #20
 8006208:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800620c:	4633      	mov	r3, r6
 800620e:	2200      	movs	r2, #0
 8006210:	4543      	cmp	r3, r8
 8006212:	d31e      	bcc.n	8006252 <__multiply+0x92>
 8006214:	f105 0c14 	add.w	ip, r5, #20
 8006218:	f104 0314 	add.w	r3, r4, #20
 800621c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006220:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006224:	9202      	str	r2, [sp, #8]
 8006226:	ebac 0205 	sub.w	r2, ip, r5
 800622a:	3a15      	subs	r2, #21
 800622c:	f022 0203 	bic.w	r2, r2, #3
 8006230:	3204      	adds	r2, #4
 8006232:	f105 0115 	add.w	r1, r5, #21
 8006236:	458c      	cmp	ip, r1
 8006238:	bf38      	it	cc
 800623a:	2204      	movcc	r2, #4
 800623c:	9201      	str	r2, [sp, #4]
 800623e:	9a02      	ldr	r2, [sp, #8]
 8006240:	9303      	str	r3, [sp, #12]
 8006242:	429a      	cmp	r2, r3
 8006244:	d808      	bhi.n	8006258 <__multiply+0x98>
 8006246:	2f00      	cmp	r7, #0
 8006248:	dc55      	bgt.n	80062f6 <__multiply+0x136>
 800624a:	6107      	str	r7, [r0, #16]
 800624c:	b005      	add	sp, #20
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	f843 2b04 	str.w	r2, [r3], #4
 8006256:	e7db      	b.n	8006210 <__multiply+0x50>
 8006258:	f8b3 a000 	ldrh.w	sl, [r3]
 800625c:	f1ba 0f00 	cmp.w	sl, #0
 8006260:	d020      	beq.n	80062a4 <__multiply+0xe4>
 8006262:	f105 0e14 	add.w	lr, r5, #20
 8006266:	46b1      	mov	r9, r6
 8006268:	2200      	movs	r2, #0
 800626a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800626e:	f8d9 b000 	ldr.w	fp, [r9]
 8006272:	b2a1      	uxth	r1, r4
 8006274:	fa1f fb8b 	uxth.w	fp, fp
 8006278:	fb0a b101 	mla	r1, sl, r1, fp
 800627c:	4411      	add	r1, r2
 800627e:	f8d9 2000 	ldr.w	r2, [r9]
 8006282:	0c24      	lsrs	r4, r4, #16
 8006284:	0c12      	lsrs	r2, r2, #16
 8006286:	fb0a 2404 	mla	r4, sl, r4, r2
 800628a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800628e:	b289      	uxth	r1, r1
 8006290:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006294:	45f4      	cmp	ip, lr
 8006296:	f849 1b04 	str.w	r1, [r9], #4
 800629a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800629e:	d8e4      	bhi.n	800626a <__multiply+0xaa>
 80062a0:	9901      	ldr	r1, [sp, #4]
 80062a2:	5072      	str	r2, [r6, r1]
 80062a4:	9a03      	ldr	r2, [sp, #12]
 80062a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062aa:	3304      	adds	r3, #4
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	d01f      	beq.n	80062f2 <__multiply+0x132>
 80062b2:	6834      	ldr	r4, [r6, #0]
 80062b4:	f105 0114 	add.w	r1, r5, #20
 80062b8:	46b6      	mov	lr, r6
 80062ba:	f04f 0a00 	mov.w	sl, #0
 80062be:	880a      	ldrh	r2, [r1, #0]
 80062c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80062c4:	fb09 b202 	mla	r2, r9, r2, fp
 80062c8:	4492      	add	sl, r2
 80062ca:	b2a4      	uxth	r4, r4
 80062cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80062d0:	f84e 4b04 	str.w	r4, [lr], #4
 80062d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80062d8:	f8be 2000 	ldrh.w	r2, [lr]
 80062dc:	0c24      	lsrs	r4, r4, #16
 80062de:	fb09 2404 	mla	r4, r9, r4, r2
 80062e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80062e6:	458c      	cmp	ip, r1
 80062e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80062ec:	d8e7      	bhi.n	80062be <__multiply+0xfe>
 80062ee:	9a01      	ldr	r2, [sp, #4]
 80062f0:	50b4      	str	r4, [r6, r2]
 80062f2:	3604      	adds	r6, #4
 80062f4:	e7a3      	b.n	800623e <__multiply+0x7e>
 80062f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1a5      	bne.n	800624a <__multiply+0x8a>
 80062fe:	3f01      	subs	r7, #1
 8006300:	e7a1      	b.n	8006246 <__multiply+0x86>
 8006302:	bf00      	nop
 8006304:	080077db 	.word	0x080077db
 8006308:	080077ec 	.word	0x080077ec

0800630c <__pow5mult>:
 800630c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006310:	4615      	mov	r5, r2
 8006312:	f012 0203 	ands.w	r2, r2, #3
 8006316:	4606      	mov	r6, r0
 8006318:	460f      	mov	r7, r1
 800631a:	d007      	beq.n	800632c <__pow5mult+0x20>
 800631c:	4c25      	ldr	r4, [pc, #148]	; (80063b4 <__pow5mult+0xa8>)
 800631e:	3a01      	subs	r2, #1
 8006320:	2300      	movs	r3, #0
 8006322:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006326:	f7ff fe9b 	bl	8006060 <__multadd>
 800632a:	4607      	mov	r7, r0
 800632c:	10ad      	asrs	r5, r5, #2
 800632e:	d03d      	beq.n	80063ac <__pow5mult+0xa0>
 8006330:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006332:	b97c      	cbnz	r4, 8006354 <__pow5mult+0x48>
 8006334:	2010      	movs	r0, #16
 8006336:	f7ff fe1b 	bl	8005f70 <malloc>
 800633a:	4602      	mov	r2, r0
 800633c:	6270      	str	r0, [r6, #36]	; 0x24
 800633e:	b928      	cbnz	r0, 800634c <__pow5mult+0x40>
 8006340:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <__pow5mult+0xac>)
 8006342:	481e      	ldr	r0, [pc, #120]	; (80063bc <__pow5mult+0xb0>)
 8006344:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006348:	f000 fbcc 	bl	8006ae4 <__assert_func>
 800634c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006350:	6004      	str	r4, [r0, #0]
 8006352:	60c4      	str	r4, [r0, #12]
 8006354:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006358:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800635c:	b94c      	cbnz	r4, 8006372 <__pow5mult+0x66>
 800635e:	f240 2171 	movw	r1, #625	; 0x271
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ff16 	bl	8006194 <__i2b>
 8006368:	2300      	movs	r3, #0
 800636a:	f8c8 0008 	str.w	r0, [r8, #8]
 800636e:	4604      	mov	r4, r0
 8006370:	6003      	str	r3, [r0, #0]
 8006372:	f04f 0900 	mov.w	r9, #0
 8006376:	07eb      	lsls	r3, r5, #31
 8006378:	d50a      	bpl.n	8006390 <__pow5mult+0x84>
 800637a:	4639      	mov	r1, r7
 800637c:	4622      	mov	r2, r4
 800637e:	4630      	mov	r0, r6
 8006380:	f7ff ff1e 	bl	80061c0 <__multiply>
 8006384:	4639      	mov	r1, r7
 8006386:	4680      	mov	r8, r0
 8006388:	4630      	mov	r0, r6
 800638a:	f7ff fe47 	bl	800601c <_Bfree>
 800638e:	4647      	mov	r7, r8
 8006390:	106d      	asrs	r5, r5, #1
 8006392:	d00b      	beq.n	80063ac <__pow5mult+0xa0>
 8006394:	6820      	ldr	r0, [r4, #0]
 8006396:	b938      	cbnz	r0, 80063a8 <__pow5mult+0x9c>
 8006398:	4622      	mov	r2, r4
 800639a:	4621      	mov	r1, r4
 800639c:	4630      	mov	r0, r6
 800639e:	f7ff ff0f 	bl	80061c0 <__multiply>
 80063a2:	6020      	str	r0, [r4, #0]
 80063a4:	f8c0 9000 	str.w	r9, [r0]
 80063a8:	4604      	mov	r4, r0
 80063aa:	e7e4      	b.n	8006376 <__pow5mult+0x6a>
 80063ac:	4638      	mov	r0, r7
 80063ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b2:	bf00      	nop
 80063b4:	08007940 	.word	0x08007940
 80063b8:	08007765 	.word	0x08007765
 80063bc:	080077ec 	.word	0x080077ec

080063c0 <__lshift>:
 80063c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c4:	460c      	mov	r4, r1
 80063c6:	6849      	ldr	r1, [r1, #4]
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063ce:	68a3      	ldr	r3, [r4, #8]
 80063d0:	4607      	mov	r7, r0
 80063d2:	4691      	mov	r9, r2
 80063d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063d8:	f108 0601 	add.w	r6, r8, #1
 80063dc:	42b3      	cmp	r3, r6
 80063de:	db0b      	blt.n	80063f8 <__lshift+0x38>
 80063e0:	4638      	mov	r0, r7
 80063e2:	f7ff fddb 	bl	8005f9c <_Balloc>
 80063e6:	4605      	mov	r5, r0
 80063e8:	b948      	cbnz	r0, 80063fe <__lshift+0x3e>
 80063ea:	4602      	mov	r2, r0
 80063ec:	4b28      	ldr	r3, [pc, #160]	; (8006490 <__lshift+0xd0>)
 80063ee:	4829      	ldr	r0, [pc, #164]	; (8006494 <__lshift+0xd4>)
 80063f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80063f4:	f000 fb76 	bl	8006ae4 <__assert_func>
 80063f8:	3101      	adds	r1, #1
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	e7ee      	b.n	80063dc <__lshift+0x1c>
 80063fe:	2300      	movs	r3, #0
 8006400:	f100 0114 	add.w	r1, r0, #20
 8006404:	f100 0210 	add.w	r2, r0, #16
 8006408:	4618      	mov	r0, r3
 800640a:	4553      	cmp	r3, sl
 800640c:	db33      	blt.n	8006476 <__lshift+0xb6>
 800640e:	6920      	ldr	r0, [r4, #16]
 8006410:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006414:	f104 0314 	add.w	r3, r4, #20
 8006418:	f019 091f 	ands.w	r9, r9, #31
 800641c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006420:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006424:	d02b      	beq.n	800647e <__lshift+0xbe>
 8006426:	f1c9 0e20 	rsb	lr, r9, #32
 800642a:	468a      	mov	sl, r1
 800642c:	2200      	movs	r2, #0
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	fa00 f009 	lsl.w	r0, r0, r9
 8006434:	4302      	orrs	r2, r0
 8006436:	f84a 2b04 	str.w	r2, [sl], #4
 800643a:	f853 2b04 	ldr.w	r2, [r3], #4
 800643e:	459c      	cmp	ip, r3
 8006440:	fa22 f20e 	lsr.w	r2, r2, lr
 8006444:	d8f3      	bhi.n	800642e <__lshift+0x6e>
 8006446:	ebac 0304 	sub.w	r3, ip, r4
 800644a:	3b15      	subs	r3, #21
 800644c:	f023 0303 	bic.w	r3, r3, #3
 8006450:	3304      	adds	r3, #4
 8006452:	f104 0015 	add.w	r0, r4, #21
 8006456:	4584      	cmp	ip, r0
 8006458:	bf38      	it	cc
 800645a:	2304      	movcc	r3, #4
 800645c:	50ca      	str	r2, [r1, r3]
 800645e:	b10a      	cbz	r2, 8006464 <__lshift+0xa4>
 8006460:	f108 0602 	add.w	r6, r8, #2
 8006464:	3e01      	subs	r6, #1
 8006466:	4638      	mov	r0, r7
 8006468:	612e      	str	r6, [r5, #16]
 800646a:	4621      	mov	r1, r4
 800646c:	f7ff fdd6 	bl	800601c <_Bfree>
 8006470:	4628      	mov	r0, r5
 8006472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006476:	f842 0f04 	str.w	r0, [r2, #4]!
 800647a:	3301      	adds	r3, #1
 800647c:	e7c5      	b.n	800640a <__lshift+0x4a>
 800647e:	3904      	subs	r1, #4
 8006480:	f853 2b04 	ldr.w	r2, [r3], #4
 8006484:	f841 2f04 	str.w	r2, [r1, #4]!
 8006488:	459c      	cmp	ip, r3
 800648a:	d8f9      	bhi.n	8006480 <__lshift+0xc0>
 800648c:	e7ea      	b.n	8006464 <__lshift+0xa4>
 800648e:	bf00      	nop
 8006490:	080077db 	.word	0x080077db
 8006494:	080077ec 	.word	0x080077ec

08006498 <__mcmp>:
 8006498:	b530      	push	{r4, r5, lr}
 800649a:	6902      	ldr	r2, [r0, #16]
 800649c:	690c      	ldr	r4, [r1, #16]
 800649e:	1b12      	subs	r2, r2, r4
 80064a0:	d10e      	bne.n	80064c0 <__mcmp+0x28>
 80064a2:	f100 0314 	add.w	r3, r0, #20
 80064a6:	3114      	adds	r1, #20
 80064a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80064ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80064b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80064b8:	42a5      	cmp	r5, r4
 80064ba:	d003      	beq.n	80064c4 <__mcmp+0x2c>
 80064bc:	d305      	bcc.n	80064ca <__mcmp+0x32>
 80064be:	2201      	movs	r2, #1
 80064c0:	4610      	mov	r0, r2
 80064c2:	bd30      	pop	{r4, r5, pc}
 80064c4:	4283      	cmp	r3, r0
 80064c6:	d3f3      	bcc.n	80064b0 <__mcmp+0x18>
 80064c8:	e7fa      	b.n	80064c0 <__mcmp+0x28>
 80064ca:	f04f 32ff 	mov.w	r2, #4294967295
 80064ce:	e7f7      	b.n	80064c0 <__mcmp+0x28>

080064d0 <__mdiff>:
 80064d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	460c      	mov	r4, r1
 80064d6:	4606      	mov	r6, r0
 80064d8:	4611      	mov	r1, r2
 80064da:	4620      	mov	r0, r4
 80064dc:	4617      	mov	r7, r2
 80064de:	f7ff ffdb 	bl	8006498 <__mcmp>
 80064e2:	1e05      	subs	r5, r0, #0
 80064e4:	d110      	bne.n	8006508 <__mdiff+0x38>
 80064e6:	4629      	mov	r1, r5
 80064e8:	4630      	mov	r0, r6
 80064ea:	f7ff fd57 	bl	8005f9c <_Balloc>
 80064ee:	b930      	cbnz	r0, 80064fe <__mdiff+0x2e>
 80064f0:	4b39      	ldr	r3, [pc, #228]	; (80065d8 <__mdiff+0x108>)
 80064f2:	4602      	mov	r2, r0
 80064f4:	f240 2132 	movw	r1, #562	; 0x232
 80064f8:	4838      	ldr	r0, [pc, #224]	; (80065dc <__mdiff+0x10c>)
 80064fa:	f000 faf3 	bl	8006ae4 <__assert_func>
 80064fe:	2301      	movs	r3, #1
 8006500:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006508:	bfa4      	itt	ge
 800650a:	463b      	movge	r3, r7
 800650c:	4627      	movge	r7, r4
 800650e:	4630      	mov	r0, r6
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	bfa6      	itte	ge
 8006514:	461c      	movge	r4, r3
 8006516:	2500      	movge	r5, #0
 8006518:	2501      	movlt	r5, #1
 800651a:	f7ff fd3f 	bl	8005f9c <_Balloc>
 800651e:	b920      	cbnz	r0, 800652a <__mdiff+0x5a>
 8006520:	4b2d      	ldr	r3, [pc, #180]	; (80065d8 <__mdiff+0x108>)
 8006522:	4602      	mov	r2, r0
 8006524:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006528:	e7e6      	b.n	80064f8 <__mdiff+0x28>
 800652a:	693e      	ldr	r6, [r7, #16]
 800652c:	60c5      	str	r5, [r0, #12]
 800652e:	6925      	ldr	r5, [r4, #16]
 8006530:	f107 0114 	add.w	r1, r7, #20
 8006534:	f104 0914 	add.w	r9, r4, #20
 8006538:	f100 0e14 	add.w	lr, r0, #20
 800653c:	f107 0210 	add.w	r2, r7, #16
 8006540:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006544:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006548:	46f2      	mov	sl, lr
 800654a:	2700      	movs	r7, #0
 800654c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006550:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006554:	fa1f f883 	uxth.w	r8, r3
 8006558:	fa17 f78b 	uxtah	r7, r7, fp
 800655c:	0c1b      	lsrs	r3, r3, #16
 800655e:	eba7 0808 	sub.w	r8, r7, r8
 8006562:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006566:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800656a:	fa1f f888 	uxth.w	r8, r8
 800656e:	141f      	asrs	r7, r3, #16
 8006570:	454d      	cmp	r5, r9
 8006572:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006576:	f84a 3b04 	str.w	r3, [sl], #4
 800657a:	d8e7      	bhi.n	800654c <__mdiff+0x7c>
 800657c:	1b2b      	subs	r3, r5, r4
 800657e:	3b15      	subs	r3, #21
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	3304      	adds	r3, #4
 8006586:	3415      	adds	r4, #21
 8006588:	42a5      	cmp	r5, r4
 800658a:	bf38      	it	cc
 800658c:	2304      	movcc	r3, #4
 800658e:	4419      	add	r1, r3
 8006590:	4473      	add	r3, lr
 8006592:	469e      	mov	lr, r3
 8006594:	460d      	mov	r5, r1
 8006596:	4565      	cmp	r5, ip
 8006598:	d30e      	bcc.n	80065b8 <__mdiff+0xe8>
 800659a:	f10c 0203 	add.w	r2, ip, #3
 800659e:	1a52      	subs	r2, r2, r1
 80065a0:	f022 0203 	bic.w	r2, r2, #3
 80065a4:	3903      	subs	r1, #3
 80065a6:	458c      	cmp	ip, r1
 80065a8:	bf38      	it	cc
 80065aa:	2200      	movcc	r2, #0
 80065ac:	441a      	add	r2, r3
 80065ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80065b2:	b17b      	cbz	r3, 80065d4 <__mdiff+0x104>
 80065b4:	6106      	str	r6, [r0, #16]
 80065b6:	e7a5      	b.n	8006504 <__mdiff+0x34>
 80065b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80065bc:	fa17 f488 	uxtah	r4, r7, r8
 80065c0:	1422      	asrs	r2, r4, #16
 80065c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80065c6:	b2a4      	uxth	r4, r4
 80065c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80065cc:	f84e 4b04 	str.w	r4, [lr], #4
 80065d0:	1417      	asrs	r7, r2, #16
 80065d2:	e7e0      	b.n	8006596 <__mdiff+0xc6>
 80065d4:	3e01      	subs	r6, #1
 80065d6:	e7ea      	b.n	80065ae <__mdiff+0xde>
 80065d8:	080077db 	.word	0x080077db
 80065dc:	080077ec 	.word	0x080077ec

080065e0 <__d2b>:
 80065e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065e4:	4689      	mov	r9, r1
 80065e6:	2101      	movs	r1, #1
 80065e8:	ec57 6b10 	vmov	r6, r7, d0
 80065ec:	4690      	mov	r8, r2
 80065ee:	f7ff fcd5 	bl	8005f9c <_Balloc>
 80065f2:	4604      	mov	r4, r0
 80065f4:	b930      	cbnz	r0, 8006604 <__d2b+0x24>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <__d2b+0xb0>)
 80065fa:	4826      	ldr	r0, [pc, #152]	; (8006694 <__d2b+0xb4>)
 80065fc:	f240 310a 	movw	r1, #778	; 0x30a
 8006600:	f000 fa70 	bl	8006ae4 <__assert_func>
 8006604:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800660c:	bb35      	cbnz	r5, 800665c <__d2b+0x7c>
 800660e:	2e00      	cmp	r6, #0
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	d028      	beq.n	8006666 <__d2b+0x86>
 8006614:	4668      	mov	r0, sp
 8006616:	9600      	str	r6, [sp, #0]
 8006618:	f7ff fd8c 	bl	8006134 <__lo0bits>
 800661c:	9900      	ldr	r1, [sp, #0]
 800661e:	b300      	cbz	r0, 8006662 <__d2b+0x82>
 8006620:	9a01      	ldr	r2, [sp, #4]
 8006622:	f1c0 0320 	rsb	r3, r0, #32
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	430b      	orrs	r3, r1
 800662c:	40c2      	lsrs	r2, r0
 800662e:	6163      	str	r3, [r4, #20]
 8006630:	9201      	str	r2, [sp, #4]
 8006632:	9b01      	ldr	r3, [sp, #4]
 8006634:	61a3      	str	r3, [r4, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	bf14      	ite	ne
 800663a:	2202      	movne	r2, #2
 800663c:	2201      	moveq	r2, #1
 800663e:	6122      	str	r2, [r4, #16]
 8006640:	b1d5      	cbz	r5, 8006678 <__d2b+0x98>
 8006642:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006646:	4405      	add	r5, r0
 8006648:	f8c9 5000 	str.w	r5, [r9]
 800664c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006650:	f8c8 0000 	str.w	r0, [r8]
 8006654:	4620      	mov	r0, r4
 8006656:	b003      	add	sp, #12
 8006658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800665c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006660:	e7d5      	b.n	800660e <__d2b+0x2e>
 8006662:	6161      	str	r1, [r4, #20]
 8006664:	e7e5      	b.n	8006632 <__d2b+0x52>
 8006666:	a801      	add	r0, sp, #4
 8006668:	f7ff fd64 	bl	8006134 <__lo0bits>
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	6163      	str	r3, [r4, #20]
 8006670:	2201      	movs	r2, #1
 8006672:	6122      	str	r2, [r4, #16]
 8006674:	3020      	adds	r0, #32
 8006676:	e7e3      	b.n	8006640 <__d2b+0x60>
 8006678:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800667c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006680:	f8c9 0000 	str.w	r0, [r9]
 8006684:	6918      	ldr	r0, [r3, #16]
 8006686:	f7ff fd35 	bl	80060f4 <__hi0bits>
 800668a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800668e:	e7df      	b.n	8006650 <__d2b+0x70>
 8006690:	080077db 	.word	0x080077db
 8006694:	080077ec 	.word	0x080077ec

08006698 <_calloc_r>:
 8006698:	b513      	push	{r0, r1, r4, lr}
 800669a:	434a      	muls	r2, r1
 800669c:	4611      	mov	r1, r2
 800669e:	9201      	str	r2, [sp, #4]
 80066a0:	f000 f85a 	bl	8006758 <_malloc_r>
 80066a4:	4604      	mov	r4, r0
 80066a6:	b118      	cbz	r0, 80066b0 <_calloc_r+0x18>
 80066a8:	9a01      	ldr	r2, [sp, #4]
 80066aa:	2100      	movs	r1, #0
 80066ac:	f7fe f950 	bl	8004950 <memset>
 80066b0:	4620      	mov	r0, r4
 80066b2:	b002      	add	sp, #8
 80066b4:	bd10      	pop	{r4, pc}
	...

080066b8 <_free_r>:
 80066b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ba:	2900      	cmp	r1, #0
 80066bc:	d048      	beq.n	8006750 <_free_r+0x98>
 80066be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c2:	9001      	str	r0, [sp, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f1a1 0404 	sub.w	r4, r1, #4
 80066ca:	bfb8      	it	lt
 80066cc:	18e4      	addlt	r4, r4, r3
 80066ce:	f000 fa65 	bl	8006b9c <__malloc_lock>
 80066d2:	4a20      	ldr	r2, [pc, #128]	; (8006754 <_free_r+0x9c>)
 80066d4:	9801      	ldr	r0, [sp, #4]
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	4615      	mov	r5, r2
 80066da:	b933      	cbnz	r3, 80066ea <_free_r+0x32>
 80066dc:	6063      	str	r3, [r4, #4]
 80066de:	6014      	str	r4, [r2, #0]
 80066e0:	b003      	add	sp, #12
 80066e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066e6:	f000 ba5f 	b.w	8006ba8 <__malloc_unlock>
 80066ea:	42a3      	cmp	r3, r4
 80066ec:	d90b      	bls.n	8006706 <_free_r+0x4e>
 80066ee:	6821      	ldr	r1, [r4, #0]
 80066f0:	1862      	adds	r2, r4, r1
 80066f2:	4293      	cmp	r3, r2
 80066f4:	bf04      	itt	eq
 80066f6:	681a      	ldreq	r2, [r3, #0]
 80066f8:	685b      	ldreq	r3, [r3, #4]
 80066fa:	6063      	str	r3, [r4, #4]
 80066fc:	bf04      	itt	eq
 80066fe:	1852      	addeq	r2, r2, r1
 8006700:	6022      	streq	r2, [r4, #0]
 8006702:	602c      	str	r4, [r5, #0]
 8006704:	e7ec      	b.n	80066e0 <_free_r+0x28>
 8006706:	461a      	mov	r2, r3
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	b10b      	cbz	r3, 8006710 <_free_r+0x58>
 800670c:	42a3      	cmp	r3, r4
 800670e:	d9fa      	bls.n	8006706 <_free_r+0x4e>
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	1855      	adds	r5, r2, r1
 8006714:	42a5      	cmp	r5, r4
 8006716:	d10b      	bne.n	8006730 <_free_r+0x78>
 8006718:	6824      	ldr	r4, [r4, #0]
 800671a:	4421      	add	r1, r4
 800671c:	1854      	adds	r4, r2, r1
 800671e:	42a3      	cmp	r3, r4
 8006720:	6011      	str	r1, [r2, #0]
 8006722:	d1dd      	bne.n	80066e0 <_free_r+0x28>
 8006724:	681c      	ldr	r4, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	6053      	str	r3, [r2, #4]
 800672a:	4421      	add	r1, r4
 800672c:	6011      	str	r1, [r2, #0]
 800672e:	e7d7      	b.n	80066e0 <_free_r+0x28>
 8006730:	d902      	bls.n	8006738 <_free_r+0x80>
 8006732:	230c      	movs	r3, #12
 8006734:	6003      	str	r3, [r0, #0]
 8006736:	e7d3      	b.n	80066e0 <_free_r+0x28>
 8006738:	6825      	ldr	r5, [r4, #0]
 800673a:	1961      	adds	r1, r4, r5
 800673c:	428b      	cmp	r3, r1
 800673e:	bf04      	itt	eq
 8006740:	6819      	ldreq	r1, [r3, #0]
 8006742:	685b      	ldreq	r3, [r3, #4]
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	bf04      	itt	eq
 8006748:	1949      	addeq	r1, r1, r5
 800674a:	6021      	streq	r1, [r4, #0]
 800674c:	6054      	str	r4, [r2, #4]
 800674e:	e7c7      	b.n	80066e0 <_free_r+0x28>
 8006750:	b003      	add	sp, #12
 8006752:	bd30      	pop	{r4, r5, pc}
 8006754:	20000208 	.word	0x20000208

08006758 <_malloc_r>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	1ccd      	adds	r5, r1, #3
 800675c:	f025 0503 	bic.w	r5, r5, #3
 8006760:	3508      	adds	r5, #8
 8006762:	2d0c      	cmp	r5, #12
 8006764:	bf38      	it	cc
 8006766:	250c      	movcc	r5, #12
 8006768:	2d00      	cmp	r5, #0
 800676a:	4606      	mov	r6, r0
 800676c:	db01      	blt.n	8006772 <_malloc_r+0x1a>
 800676e:	42a9      	cmp	r1, r5
 8006770:	d903      	bls.n	800677a <_malloc_r+0x22>
 8006772:	230c      	movs	r3, #12
 8006774:	6033      	str	r3, [r6, #0]
 8006776:	2000      	movs	r0, #0
 8006778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677a:	f000 fa0f 	bl	8006b9c <__malloc_lock>
 800677e:	4921      	ldr	r1, [pc, #132]	; (8006804 <_malloc_r+0xac>)
 8006780:	680a      	ldr	r2, [r1, #0]
 8006782:	4614      	mov	r4, r2
 8006784:	b99c      	cbnz	r4, 80067ae <_malloc_r+0x56>
 8006786:	4f20      	ldr	r7, [pc, #128]	; (8006808 <_malloc_r+0xb0>)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	b923      	cbnz	r3, 8006796 <_malloc_r+0x3e>
 800678c:	4621      	mov	r1, r4
 800678e:	4630      	mov	r0, r6
 8006790:	f000 f998 	bl	8006ac4 <_sbrk_r>
 8006794:	6038      	str	r0, [r7, #0]
 8006796:	4629      	mov	r1, r5
 8006798:	4630      	mov	r0, r6
 800679a:	f000 f993 	bl	8006ac4 <_sbrk_r>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d123      	bne.n	80067ea <_malloc_r+0x92>
 80067a2:	230c      	movs	r3, #12
 80067a4:	6033      	str	r3, [r6, #0]
 80067a6:	4630      	mov	r0, r6
 80067a8:	f000 f9fe 	bl	8006ba8 <__malloc_unlock>
 80067ac:	e7e3      	b.n	8006776 <_malloc_r+0x1e>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	1b5b      	subs	r3, r3, r5
 80067b2:	d417      	bmi.n	80067e4 <_malloc_r+0x8c>
 80067b4:	2b0b      	cmp	r3, #11
 80067b6:	d903      	bls.n	80067c0 <_malloc_r+0x68>
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	441c      	add	r4, r3
 80067bc:	6025      	str	r5, [r4, #0]
 80067be:	e004      	b.n	80067ca <_malloc_r+0x72>
 80067c0:	6863      	ldr	r3, [r4, #4]
 80067c2:	42a2      	cmp	r2, r4
 80067c4:	bf0c      	ite	eq
 80067c6:	600b      	streq	r3, [r1, #0]
 80067c8:	6053      	strne	r3, [r2, #4]
 80067ca:	4630      	mov	r0, r6
 80067cc:	f000 f9ec 	bl	8006ba8 <__malloc_unlock>
 80067d0:	f104 000b 	add.w	r0, r4, #11
 80067d4:	1d23      	adds	r3, r4, #4
 80067d6:	f020 0007 	bic.w	r0, r0, #7
 80067da:	1ac2      	subs	r2, r0, r3
 80067dc:	d0cc      	beq.n	8006778 <_malloc_r+0x20>
 80067de:	1a1b      	subs	r3, r3, r0
 80067e0:	50a3      	str	r3, [r4, r2]
 80067e2:	e7c9      	b.n	8006778 <_malloc_r+0x20>
 80067e4:	4622      	mov	r2, r4
 80067e6:	6864      	ldr	r4, [r4, #4]
 80067e8:	e7cc      	b.n	8006784 <_malloc_r+0x2c>
 80067ea:	1cc4      	adds	r4, r0, #3
 80067ec:	f024 0403 	bic.w	r4, r4, #3
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d0e3      	beq.n	80067bc <_malloc_r+0x64>
 80067f4:	1a21      	subs	r1, r4, r0
 80067f6:	4630      	mov	r0, r6
 80067f8:	f000 f964 	bl	8006ac4 <_sbrk_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d1dd      	bne.n	80067bc <_malloc_r+0x64>
 8006800:	e7cf      	b.n	80067a2 <_malloc_r+0x4a>
 8006802:	bf00      	nop
 8006804:	20000208 	.word	0x20000208
 8006808:	2000020c 	.word	0x2000020c

0800680c <__ssputs_r>:
 800680c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	688e      	ldr	r6, [r1, #8]
 8006812:	429e      	cmp	r6, r3
 8006814:	4682      	mov	sl, r0
 8006816:	460c      	mov	r4, r1
 8006818:	4690      	mov	r8, r2
 800681a:	461f      	mov	r7, r3
 800681c:	d838      	bhi.n	8006890 <__ssputs_r+0x84>
 800681e:	898a      	ldrh	r2, [r1, #12]
 8006820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006824:	d032      	beq.n	800688c <__ssputs_r+0x80>
 8006826:	6825      	ldr	r5, [r4, #0]
 8006828:	6909      	ldr	r1, [r1, #16]
 800682a:	eba5 0901 	sub.w	r9, r5, r1
 800682e:	6965      	ldr	r5, [r4, #20]
 8006830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006838:	3301      	adds	r3, #1
 800683a:	444b      	add	r3, r9
 800683c:	106d      	asrs	r5, r5, #1
 800683e:	429d      	cmp	r5, r3
 8006840:	bf38      	it	cc
 8006842:	461d      	movcc	r5, r3
 8006844:	0553      	lsls	r3, r2, #21
 8006846:	d531      	bpl.n	80068ac <__ssputs_r+0xa0>
 8006848:	4629      	mov	r1, r5
 800684a:	f7ff ff85 	bl	8006758 <_malloc_r>
 800684e:	4606      	mov	r6, r0
 8006850:	b950      	cbnz	r0, 8006868 <__ssputs_r+0x5c>
 8006852:	230c      	movs	r3, #12
 8006854:	f8ca 3000 	str.w	r3, [sl]
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	f04f 30ff 	mov.w	r0, #4294967295
 8006864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006868:	6921      	ldr	r1, [r4, #16]
 800686a:	464a      	mov	r2, r9
 800686c:	f7ff fb88 	bl	8005f80 <memcpy>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	6126      	str	r6, [r4, #16]
 800687e:	6165      	str	r5, [r4, #20]
 8006880:	444e      	add	r6, r9
 8006882:	eba5 0509 	sub.w	r5, r5, r9
 8006886:	6026      	str	r6, [r4, #0]
 8006888:	60a5      	str	r5, [r4, #8]
 800688a:	463e      	mov	r6, r7
 800688c:	42be      	cmp	r6, r7
 800688e:	d900      	bls.n	8006892 <__ssputs_r+0x86>
 8006890:	463e      	mov	r6, r7
 8006892:	4632      	mov	r2, r6
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	4641      	mov	r1, r8
 8006898:	f000 f966 	bl	8006b68 <memmove>
 800689c:	68a3      	ldr	r3, [r4, #8]
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	1b9b      	subs	r3, r3, r6
 80068a2:	4432      	add	r2, r6
 80068a4:	60a3      	str	r3, [r4, #8]
 80068a6:	6022      	str	r2, [r4, #0]
 80068a8:	2000      	movs	r0, #0
 80068aa:	e7db      	b.n	8006864 <__ssputs_r+0x58>
 80068ac:	462a      	mov	r2, r5
 80068ae:	f000 f981 	bl	8006bb4 <_realloc_r>
 80068b2:	4606      	mov	r6, r0
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d1e1      	bne.n	800687c <__ssputs_r+0x70>
 80068b8:	6921      	ldr	r1, [r4, #16]
 80068ba:	4650      	mov	r0, sl
 80068bc:	f7ff fefc 	bl	80066b8 <_free_r>
 80068c0:	e7c7      	b.n	8006852 <__ssputs_r+0x46>
	...

080068c4 <_svfiprintf_r>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	4698      	mov	r8, r3
 80068ca:	898b      	ldrh	r3, [r1, #12]
 80068cc:	061b      	lsls	r3, r3, #24
 80068ce:	b09d      	sub	sp, #116	; 0x74
 80068d0:	4607      	mov	r7, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	4614      	mov	r4, r2
 80068d6:	d50e      	bpl.n	80068f6 <_svfiprintf_r+0x32>
 80068d8:	690b      	ldr	r3, [r1, #16]
 80068da:	b963      	cbnz	r3, 80068f6 <_svfiprintf_r+0x32>
 80068dc:	2140      	movs	r1, #64	; 0x40
 80068de:	f7ff ff3b 	bl	8006758 <_malloc_r>
 80068e2:	6028      	str	r0, [r5, #0]
 80068e4:	6128      	str	r0, [r5, #16]
 80068e6:	b920      	cbnz	r0, 80068f2 <_svfiprintf_r+0x2e>
 80068e8:	230c      	movs	r3, #12
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	e0d1      	b.n	8006a96 <_svfiprintf_r+0x1d2>
 80068f2:	2340      	movs	r3, #64	; 0x40
 80068f4:	616b      	str	r3, [r5, #20]
 80068f6:	2300      	movs	r3, #0
 80068f8:	9309      	str	r3, [sp, #36]	; 0x24
 80068fa:	2320      	movs	r3, #32
 80068fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006900:	f8cd 800c 	str.w	r8, [sp, #12]
 8006904:	2330      	movs	r3, #48	; 0x30
 8006906:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ab0 <_svfiprintf_r+0x1ec>
 800690a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800690e:	f04f 0901 	mov.w	r9, #1
 8006912:	4623      	mov	r3, r4
 8006914:	469a      	mov	sl, r3
 8006916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800691a:	b10a      	cbz	r2, 8006920 <_svfiprintf_r+0x5c>
 800691c:	2a25      	cmp	r2, #37	; 0x25
 800691e:	d1f9      	bne.n	8006914 <_svfiprintf_r+0x50>
 8006920:	ebba 0b04 	subs.w	fp, sl, r4
 8006924:	d00b      	beq.n	800693e <_svfiprintf_r+0x7a>
 8006926:	465b      	mov	r3, fp
 8006928:	4622      	mov	r2, r4
 800692a:	4629      	mov	r1, r5
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff ff6d 	bl	800680c <__ssputs_r>
 8006932:	3001      	adds	r0, #1
 8006934:	f000 80aa 	beq.w	8006a8c <_svfiprintf_r+0x1c8>
 8006938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800693a:	445a      	add	r2, fp
 800693c:	9209      	str	r2, [sp, #36]	; 0x24
 800693e:	f89a 3000 	ldrb.w	r3, [sl]
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 80a2 	beq.w	8006a8c <_svfiprintf_r+0x1c8>
 8006948:	2300      	movs	r3, #0
 800694a:	f04f 32ff 	mov.w	r2, #4294967295
 800694e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006952:	f10a 0a01 	add.w	sl, sl, #1
 8006956:	9304      	str	r3, [sp, #16]
 8006958:	9307      	str	r3, [sp, #28]
 800695a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800695e:	931a      	str	r3, [sp, #104]	; 0x68
 8006960:	4654      	mov	r4, sl
 8006962:	2205      	movs	r2, #5
 8006964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006968:	4851      	ldr	r0, [pc, #324]	; (8006ab0 <_svfiprintf_r+0x1ec>)
 800696a:	f7f9 fc39 	bl	80001e0 <memchr>
 800696e:	9a04      	ldr	r2, [sp, #16]
 8006970:	b9d8      	cbnz	r0, 80069aa <_svfiprintf_r+0xe6>
 8006972:	06d0      	lsls	r0, r2, #27
 8006974:	bf44      	itt	mi
 8006976:	2320      	movmi	r3, #32
 8006978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800697c:	0711      	lsls	r1, r2, #28
 800697e:	bf44      	itt	mi
 8006980:	232b      	movmi	r3, #43	; 0x2b
 8006982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006986:	f89a 3000 	ldrb.w	r3, [sl]
 800698a:	2b2a      	cmp	r3, #42	; 0x2a
 800698c:	d015      	beq.n	80069ba <_svfiprintf_r+0xf6>
 800698e:	9a07      	ldr	r2, [sp, #28]
 8006990:	4654      	mov	r4, sl
 8006992:	2000      	movs	r0, #0
 8006994:	f04f 0c0a 	mov.w	ip, #10
 8006998:	4621      	mov	r1, r4
 800699a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800699e:	3b30      	subs	r3, #48	; 0x30
 80069a0:	2b09      	cmp	r3, #9
 80069a2:	d94e      	bls.n	8006a42 <_svfiprintf_r+0x17e>
 80069a4:	b1b0      	cbz	r0, 80069d4 <_svfiprintf_r+0x110>
 80069a6:	9207      	str	r2, [sp, #28]
 80069a8:	e014      	b.n	80069d4 <_svfiprintf_r+0x110>
 80069aa:	eba0 0308 	sub.w	r3, r0, r8
 80069ae:	fa09 f303 	lsl.w	r3, r9, r3
 80069b2:	4313      	orrs	r3, r2
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	46a2      	mov	sl, r4
 80069b8:	e7d2      	b.n	8006960 <_svfiprintf_r+0x9c>
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	1d19      	adds	r1, r3, #4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	9103      	str	r1, [sp, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bfbb      	ittet	lt
 80069c6:	425b      	neglt	r3, r3
 80069c8:	f042 0202 	orrlt.w	r2, r2, #2
 80069cc:	9307      	strge	r3, [sp, #28]
 80069ce:	9307      	strlt	r3, [sp, #28]
 80069d0:	bfb8      	it	lt
 80069d2:	9204      	strlt	r2, [sp, #16]
 80069d4:	7823      	ldrb	r3, [r4, #0]
 80069d6:	2b2e      	cmp	r3, #46	; 0x2e
 80069d8:	d10c      	bne.n	80069f4 <_svfiprintf_r+0x130>
 80069da:	7863      	ldrb	r3, [r4, #1]
 80069dc:	2b2a      	cmp	r3, #42	; 0x2a
 80069de:	d135      	bne.n	8006a4c <_svfiprintf_r+0x188>
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	1d1a      	adds	r2, r3, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	9203      	str	r2, [sp, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bfb8      	it	lt
 80069ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80069f0:	3402      	adds	r4, #2
 80069f2:	9305      	str	r3, [sp, #20]
 80069f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ac0 <_svfiprintf_r+0x1fc>
 80069f8:	7821      	ldrb	r1, [r4, #0]
 80069fa:	2203      	movs	r2, #3
 80069fc:	4650      	mov	r0, sl
 80069fe:	f7f9 fbef 	bl	80001e0 <memchr>
 8006a02:	b140      	cbz	r0, 8006a16 <_svfiprintf_r+0x152>
 8006a04:	2340      	movs	r3, #64	; 0x40
 8006a06:	eba0 000a 	sub.w	r0, r0, sl
 8006a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8006a0e:	9b04      	ldr	r3, [sp, #16]
 8006a10:	4303      	orrs	r3, r0
 8006a12:	3401      	adds	r4, #1
 8006a14:	9304      	str	r3, [sp, #16]
 8006a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1a:	4826      	ldr	r0, [pc, #152]	; (8006ab4 <_svfiprintf_r+0x1f0>)
 8006a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a20:	2206      	movs	r2, #6
 8006a22:	f7f9 fbdd 	bl	80001e0 <memchr>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d038      	beq.n	8006a9c <_svfiprintf_r+0x1d8>
 8006a2a:	4b23      	ldr	r3, [pc, #140]	; (8006ab8 <_svfiprintf_r+0x1f4>)
 8006a2c:	bb1b      	cbnz	r3, 8006a76 <_svfiprintf_r+0x1b2>
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	3307      	adds	r3, #7
 8006a32:	f023 0307 	bic.w	r3, r3, #7
 8006a36:	3308      	adds	r3, #8
 8006a38:	9303      	str	r3, [sp, #12]
 8006a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a3c:	4433      	add	r3, r6
 8006a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a40:	e767      	b.n	8006912 <_svfiprintf_r+0x4e>
 8006a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a46:	460c      	mov	r4, r1
 8006a48:	2001      	movs	r0, #1
 8006a4a:	e7a5      	b.n	8006998 <_svfiprintf_r+0xd4>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	3401      	adds	r4, #1
 8006a50:	9305      	str	r3, [sp, #20]
 8006a52:	4619      	mov	r1, r3
 8006a54:	f04f 0c0a 	mov.w	ip, #10
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a5e:	3a30      	subs	r2, #48	; 0x30
 8006a60:	2a09      	cmp	r2, #9
 8006a62:	d903      	bls.n	8006a6c <_svfiprintf_r+0x1a8>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0c5      	beq.n	80069f4 <_svfiprintf_r+0x130>
 8006a68:	9105      	str	r1, [sp, #20]
 8006a6a:	e7c3      	b.n	80069f4 <_svfiprintf_r+0x130>
 8006a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a70:	4604      	mov	r4, r0
 8006a72:	2301      	movs	r3, #1
 8006a74:	e7f0      	b.n	8006a58 <_svfiprintf_r+0x194>
 8006a76:	ab03      	add	r3, sp, #12
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	462a      	mov	r2, r5
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <_svfiprintf_r+0x1f8>)
 8006a7e:	a904      	add	r1, sp, #16
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7fe f80d 	bl	8004aa0 <_printf_float>
 8006a86:	1c42      	adds	r2, r0, #1
 8006a88:	4606      	mov	r6, r0
 8006a8a:	d1d6      	bne.n	8006a3a <_svfiprintf_r+0x176>
 8006a8c:	89ab      	ldrh	r3, [r5, #12]
 8006a8e:	065b      	lsls	r3, r3, #25
 8006a90:	f53f af2c 	bmi.w	80068ec <_svfiprintf_r+0x28>
 8006a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a96:	b01d      	add	sp, #116	; 0x74
 8006a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9c:	ab03      	add	r3, sp, #12
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	462a      	mov	r2, r5
 8006aa2:	4b06      	ldr	r3, [pc, #24]	; (8006abc <_svfiprintf_r+0x1f8>)
 8006aa4:	a904      	add	r1, sp, #16
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	f7fe fa9e 	bl	8004fe8 <_printf_i>
 8006aac:	e7eb      	b.n	8006a86 <_svfiprintf_r+0x1c2>
 8006aae:	bf00      	nop
 8006ab0:	0800794c 	.word	0x0800794c
 8006ab4:	08007956 	.word	0x08007956
 8006ab8:	08004aa1 	.word	0x08004aa1
 8006abc:	0800680d 	.word	0x0800680d
 8006ac0:	08007952 	.word	0x08007952

08006ac4 <_sbrk_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d06      	ldr	r5, [pc, #24]	; (8006ae0 <_sbrk_r+0x1c>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4604      	mov	r4, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	602b      	str	r3, [r5, #0]
 8006ad0:	f7fa fb2c 	bl	800112c <_sbrk>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_sbrk_r+0x1a>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_sbrk_r+0x1a>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	2000070c 	.word	0x2000070c

08006ae4 <__assert_func>:
 8006ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ae6:	4614      	mov	r4, r2
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <__assert_func+0x2c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4605      	mov	r5, r0
 8006af0:	68d8      	ldr	r0, [r3, #12]
 8006af2:	b14c      	cbz	r4, 8006b08 <__assert_func+0x24>
 8006af4:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <__assert_func+0x30>)
 8006af6:	9100      	str	r1, [sp, #0]
 8006af8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006afc:	4906      	ldr	r1, [pc, #24]	; (8006b18 <__assert_func+0x34>)
 8006afe:	462b      	mov	r3, r5
 8006b00:	f000 f80e 	bl	8006b20 <fiprintf>
 8006b04:	f000 faa4 	bl	8007050 <abort>
 8006b08:	4b04      	ldr	r3, [pc, #16]	; (8006b1c <__assert_func+0x38>)
 8006b0a:	461c      	mov	r4, r3
 8006b0c:	e7f3      	b.n	8006af6 <__assert_func+0x12>
 8006b0e:	bf00      	nop
 8006b10:	20000018 	.word	0x20000018
 8006b14:	0800795d 	.word	0x0800795d
 8006b18:	0800796a 	.word	0x0800796a
 8006b1c:	08007998 	.word	0x08007998

08006b20 <fiprintf>:
 8006b20:	b40e      	push	{r1, r2, r3}
 8006b22:	b503      	push	{r0, r1, lr}
 8006b24:	4601      	mov	r1, r0
 8006b26:	ab03      	add	r3, sp, #12
 8006b28:	4805      	ldr	r0, [pc, #20]	; (8006b40 <fiprintf+0x20>)
 8006b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2e:	6800      	ldr	r0, [r0, #0]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	f000 f88f 	bl	8006c54 <_vfiprintf_r>
 8006b36:	b002      	add	sp, #8
 8006b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b3c:	b003      	add	sp, #12
 8006b3e:	4770      	bx	lr
 8006b40:	20000018 	.word	0x20000018

08006b44 <__ascii_mbtowc>:
 8006b44:	b082      	sub	sp, #8
 8006b46:	b901      	cbnz	r1, 8006b4a <__ascii_mbtowc+0x6>
 8006b48:	a901      	add	r1, sp, #4
 8006b4a:	b142      	cbz	r2, 8006b5e <__ascii_mbtowc+0x1a>
 8006b4c:	b14b      	cbz	r3, 8006b62 <__ascii_mbtowc+0x1e>
 8006b4e:	7813      	ldrb	r3, [r2, #0]
 8006b50:	600b      	str	r3, [r1, #0]
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	1e10      	subs	r0, r2, #0
 8006b56:	bf18      	it	ne
 8006b58:	2001      	movne	r0, #1
 8006b5a:	b002      	add	sp, #8
 8006b5c:	4770      	bx	lr
 8006b5e:	4610      	mov	r0, r2
 8006b60:	e7fb      	b.n	8006b5a <__ascii_mbtowc+0x16>
 8006b62:	f06f 0001 	mvn.w	r0, #1
 8006b66:	e7f8      	b.n	8006b5a <__ascii_mbtowc+0x16>

08006b68 <memmove>:
 8006b68:	4288      	cmp	r0, r1
 8006b6a:	b510      	push	{r4, lr}
 8006b6c:	eb01 0402 	add.w	r4, r1, r2
 8006b70:	d902      	bls.n	8006b78 <memmove+0x10>
 8006b72:	4284      	cmp	r4, r0
 8006b74:	4623      	mov	r3, r4
 8006b76:	d807      	bhi.n	8006b88 <memmove+0x20>
 8006b78:	1e43      	subs	r3, r0, #1
 8006b7a:	42a1      	cmp	r1, r4
 8006b7c:	d008      	beq.n	8006b90 <memmove+0x28>
 8006b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b86:	e7f8      	b.n	8006b7a <memmove+0x12>
 8006b88:	4402      	add	r2, r0
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	428a      	cmp	r2, r1
 8006b8e:	d100      	bne.n	8006b92 <memmove+0x2a>
 8006b90:	bd10      	pop	{r4, pc}
 8006b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b9a:	e7f7      	b.n	8006b8c <memmove+0x24>

08006b9c <__malloc_lock>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <__malloc_lock+0x8>)
 8006b9e:	f000 bc17 	b.w	80073d0 <__retarget_lock_acquire_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	20000714 	.word	0x20000714

08006ba8 <__malloc_unlock>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__malloc_unlock+0x8>)
 8006baa:	f000 bc12 	b.w	80073d2 <__retarget_lock_release_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000714 	.word	0x20000714

08006bb4 <_realloc_r>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	4614      	mov	r4, r2
 8006bba:	460e      	mov	r6, r1
 8006bbc:	b921      	cbnz	r1, 8006bc8 <_realloc_r+0x14>
 8006bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	f7ff bdc8 	b.w	8006758 <_malloc_r>
 8006bc8:	b922      	cbnz	r2, 8006bd4 <_realloc_r+0x20>
 8006bca:	f7ff fd75 	bl	80066b8 <_free_r>
 8006bce:	4625      	mov	r5, r4
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd4:	f000 fc62 	bl	800749c <_malloc_usable_size_r>
 8006bd8:	42a0      	cmp	r0, r4
 8006bda:	d20f      	bcs.n	8006bfc <_realloc_r+0x48>
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4638      	mov	r0, r7
 8006be0:	f7ff fdba 	bl	8006758 <_malloc_r>
 8006be4:	4605      	mov	r5, r0
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d0f2      	beq.n	8006bd0 <_realloc_r+0x1c>
 8006bea:	4631      	mov	r1, r6
 8006bec:	4622      	mov	r2, r4
 8006bee:	f7ff f9c7 	bl	8005f80 <memcpy>
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f7ff fd5f 	bl	80066b8 <_free_r>
 8006bfa:	e7e9      	b.n	8006bd0 <_realloc_r+0x1c>
 8006bfc:	4635      	mov	r5, r6
 8006bfe:	e7e7      	b.n	8006bd0 <_realloc_r+0x1c>

08006c00 <__sfputc_r>:
 8006c00:	6893      	ldr	r3, [r2, #8]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	b410      	push	{r4}
 8006c08:	6093      	str	r3, [r2, #8]
 8006c0a:	da08      	bge.n	8006c1e <__sfputc_r+0x1e>
 8006c0c:	6994      	ldr	r4, [r2, #24]
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	db01      	blt.n	8006c16 <__sfputc_r+0x16>
 8006c12:	290a      	cmp	r1, #10
 8006c14:	d103      	bne.n	8006c1e <__sfputc_r+0x1e>
 8006c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c1a:	f000 b94b 	b.w	8006eb4 <__swbuf_r>
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	1c58      	adds	r0, r3, #1
 8006c22:	6010      	str	r0, [r2, #0]
 8006c24:	7019      	strb	r1, [r3, #0]
 8006c26:	4608      	mov	r0, r1
 8006c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <__sfputs_r>:
 8006c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c30:	4606      	mov	r6, r0
 8006c32:	460f      	mov	r7, r1
 8006c34:	4614      	mov	r4, r2
 8006c36:	18d5      	adds	r5, r2, r3
 8006c38:	42ac      	cmp	r4, r5
 8006c3a:	d101      	bne.n	8006c40 <__sfputs_r+0x12>
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e007      	b.n	8006c50 <__sfputs_r+0x22>
 8006c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c44:	463a      	mov	r2, r7
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7ff ffda 	bl	8006c00 <__sfputc_r>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d1f3      	bne.n	8006c38 <__sfputs_r+0xa>
 8006c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c54 <_vfiprintf_r>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	460d      	mov	r5, r1
 8006c5a:	b09d      	sub	sp, #116	; 0x74
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	4698      	mov	r8, r3
 8006c60:	4606      	mov	r6, r0
 8006c62:	b118      	cbz	r0, 8006c6c <_vfiprintf_r+0x18>
 8006c64:	6983      	ldr	r3, [r0, #24]
 8006c66:	b90b      	cbnz	r3, 8006c6c <_vfiprintf_r+0x18>
 8006c68:	f000 fb14 	bl	8007294 <__sinit>
 8006c6c:	4b89      	ldr	r3, [pc, #548]	; (8006e94 <_vfiprintf_r+0x240>)
 8006c6e:	429d      	cmp	r5, r3
 8006c70:	d11b      	bne.n	8006caa <_vfiprintf_r+0x56>
 8006c72:	6875      	ldr	r5, [r6, #4]
 8006c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c76:	07d9      	lsls	r1, r3, #31
 8006c78:	d405      	bmi.n	8006c86 <_vfiprintf_r+0x32>
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	059a      	lsls	r2, r3, #22
 8006c7e:	d402      	bmi.n	8006c86 <_vfiprintf_r+0x32>
 8006c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c82:	f000 fba5 	bl	80073d0 <__retarget_lock_acquire_recursive>
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	071b      	lsls	r3, r3, #28
 8006c8a:	d501      	bpl.n	8006c90 <_vfiprintf_r+0x3c>
 8006c8c:	692b      	ldr	r3, [r5, #16]
 8006c8e:	b9eb      	cbnz	r3, 8006ccc <_vfiprintf_r+0x78>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4630      	mov	r0, r6
 8006c94:	f000 f96e 	bl	8006f74 <__swsetup_r>
 8006c98:	b1c0      	cbz	r0, 8006ccc <_vfiprintf_r+0x78>
 8006c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c9c:	07dc      	lsls	r4, r3, #31
 8006c9e:	d50e      	bpl.n	8006cbe <_vfiprintf_r+0x6a>
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	b01d      	add	sp, #116	; 0x74
 8006ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006caa:	4b7b      	ldr	r3, [pc, #492]	; (8006e98 <_vfiprintf_r+0x244>)
 8006cac:	429d      	cmp	r5, r3
 8006cae:	d101      	bne.n	8006cb4 <_vfiprintf_r+0x60>
 8006cb0:	68b5      	ldr	r5, [r6, #8]
 8006cb2:	e7df      	b.n	8006c74 <_vfiprintf_r+0x20>
 8006cb4:	4b79      	ldr	r3, [pc, #484]	; (8006e9c <_vfiprintf_r+0x248>)
 8006cb6:	429d      	cmp	r5, r3
 8006cb8:	bf08      	it	eq
 8006cba:	68f5      	ldreq	r5, [r6, #12]
 8006cbc:	e7da      	b.n	8006c74 <_vfiprintf_r+0x20>
 8006cbe:	89ab      	ldrh	r3, [r5, #12]
 8006cc0:	0598      	lsls	r0, r3, #22
 8006cc2:	d4ed      	bmi.n	8006ca0 <_vfiprintf_r+0x4c>
 8006cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cc6:	f000 fb84 	bl	80073d2 <__retarget_lock_release_recursive>
 8006cca:	e7e9      	b.n	8006ca0 <_vfiprintf_r+0x4c>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cda:	2330      	movs	r3, #48	; 0x30
 8006cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ea0 <_vfiprintf_r+0x24c>
 8006ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ce4:	f04f 0901 	mov.w	r9, #1
 8006ce8:	4623      	mov	r3, r4
 8006cea:	469a      	mov	sl, r3
 8006cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cf0:	b10a      	cbz	r2, 8006cf6 <_vfiprintf_r+0xa2>
 8006cf2:	2a25      	cmp	r2, #37	; 0x25
 8006cf4:	d1f9      	bne.n	8006cea <_vfiprintf_r+0x96>
 8006cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8006cfa:	d00b      	beq.n	8006d14 <_vfiprintf_r+0xc0>
 8006cfc:	465b      	mov	r3, fp
 8006cfe:	4622      	mov	r2, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	4630      	mov	r0, r6
 8006d04:	f7ff ff93 	bl	8006c2e <__sfputs_r>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	f000 80aa 	beq.w	8006e62 <_vfiprintf_r+0x20e>
 8006d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d10:	445a      	add	r2, fp
 8006d12:	9209      	str	r2, [sp, #36]	; 0x24
 8006d14:	f89a 3000 	ldrb.w	r3, [sl]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80a2 	beq.w	8006e62 <_vfiprintf_r+0x20e>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f04f 32ff 	mov.w	r2, #4294967295
 8006d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d28:	f10a 0a01 	add.w	sl, sl, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d34:	931a      	str	r3, [sp, #104]	; 0x68
 8006d36:	4654      	mov	r4, sl
 8006d38:	2205      	movs	r2, #5
 8006d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3e:	4858      	ldr	r0, [pc, #352]	; (8006ea0 <_vfiprintf_r+0x24c>)
 8006d40:	f7f9 fa4e 	bl	80001e0 <memchr>
 8006d44:	9a04      	ldr	r2, [sp, #16]
 8006d46:	b9d8      	cbnz	r0, 8006d80 <_vfiprintf_r+0x12c>
 8006d48:	06d1      	lsls	r1, r2, #27
 8006d4a:	bf44      	itt	mi
 8006d4c:	2320      	movmi	r3, #32
 8006d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d52:	0713      	lsls	r3, r2, #28
 8006d54:	bf44      	itt	mi
 8006d56:	232b      	movmi	r3, #43	; 0x2b
 8006d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d60:	2b2a      	cmp	r3, #42	; 0x2a
 8006d62:	d015      	beq.n	8006d90 <_vfiprintf_r+0x13c>
 8006d64:	9a07      	ldr	r2, [sp, #28]
 8006d66:	4654      	mov	r4, sl
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f04f 0c0a 	mov.w	ip, #10
 8006d6e:	4621      	mov	r1, r4
 8006d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d74:	3b30      	subs	r3, #48	; 0x30
 8006d76:	2b09      	cmp	r3, #9
 8006d78:	d94e      	bls.n	8006e18 <_vfiprintf_r+0x1c4>
 8006d7a:	b1b0      	cbz	r0, 8006daa <_vfiprintf_r+0x156>
 8006d7c:	9207      	str	r2, [sp, #28]
 8006d7e:	e014      	b.n	8006daa <_vfiprintf_r+0x156>
 8006d80:	eba0 0308 	sub.w	r3, r0, r8
 8006d84:	fa09 f303 	lsl.w	r3, r9, r3
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	46a2      	mov	sl, r4
 8006d8e:	e7d2      	b.n	8006d36 <_vfiprintf_r+0xe2>
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	1d19      	adds	r1, r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	9103      	str	r1, [sp, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfbb      	ittet	lt
 8006d9c:	425b      	neglt	r3, r3
 8006d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8006da2:	9307      	strge	r3, [sp, #28]
 8006da4:	9307      	strlt	r3, [sp, #28]
 8006da6:	bfb8      	it	lt
 8006da8:	9204      	strlt	r2, [sp, #16]
 8006daa:	7823      	ldrb	r3, [r4, #0]
 8006dac:	2b2e      	cmp	r3, #46	; 0x2e
 8006dae:	d10c      	bne.n	8006dca <_vfiprintf_r+0x176>
 8006db0:	7863      	ldrb	r3, [r4, #1]
 8006db2:	2b2a      	cmp	r3, #42	; 0x2a
 8006db4:	d135      	bne.n	8006e22 <_vfiprintf_r+0x1ce>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	1d1a      	adds	r2, r3, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	9203      	str	r2, [sp, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfb8      	it	lt
 8006dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dc6:	3402      	adds	r4, #2
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006eb0 <_vfiprintf_r+0x25c>
 8006dce:	7821      	ldrb	r1, [r4, #0]
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	f7f9 fa04 	bl	80001e0 <memchr>
 8006dd8:	b140      	cbz	r0, 8006dec <_vfiprintf_r+0x198>
 8006dda:	2340      	movs	r3, #64	; 0x40
 8006ddc:	eba0 000a 	sub.w	r0, r0, sl
 8006de0:	fa03 f000 	lsl.w	r0, r3, r0
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	4303      	orrs	r3, r0
 8006de8:	3401      	adds	r4, #1
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df0:	482c      	ldr	r0, [pc, #176]	; (8006ea4 <_vfiprintf_r+0x250>)
 8006df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006df6:	2206      	movs	r2, #6
 8006df8:	f7f9 f9f2 	bl	80001e0 <memchr>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d03f      	beq.n	8006e80 <_vfiprintf_r+0x22c>
 8006e00:	4b29      	ldr	r3, [pc, #164]	; (8006ea8 <_vfiprintf_r+0x254>)
 8006e02:	bb1b      	cbnz	r3, 8006e4c <_vfiprintf_r+0x1f8>
 8006e04:	9b03      	ldr	r3, [sp, #12]
 8006e06:	3307      	adds	r3, #7
 8006e08:	f023 0307 	bic.w	r3, r3, #7
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e12:	443b      	add	r3, r7
 8006e14:	9309      	str	r3, [sp, #36]	; 0x24
 8006e16:	e767      	b.n	8006ce8 <_vfiprintf_r+0x94>
 8006e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	2001      	movs	r0, #1
 8006e20:	e7a5      	b.n	8006d6e <_vfiprintf_r+0x11a>
 8006e22:	2300      	movs	r3, #0
 8006e24:	3401      	adds	r4, #1
 8006e26:	9305      	str	r3, [sp, #20]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	f04f 0c0a 	mov.w	ip, #10
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e34:	3a30      	subs	r2, #48	; 0x30
 8006e36:	2a09      	cmp	r2, #9
 8006e38:	d903      	bls.n	8006e42 <_vfiprintf_r+0x1ee>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0c5      	beq.n	8006dca <_vfiprintf_r+0x176>
 8006e3e:	9105      	str	r1, [sp, #20]
 8006e40:	e7c3      	b.n	8006dca <_vfiprintf_r+0x176>
 8006e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e46:	4604      	mov	r4, r0
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e7f0      	b.n	8006e2e <_vfiprintf_r+0x1da>
 8006e4c:	ab03      	add	r3, sp, #12
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	462a      	mov	r2, r5
 8006e52:	4b16      	ldr	r3, [pc, #88]	; (8006eac <_vfiprintf_r+0x258>)
 8006e54:	a904      	add	r1, sp, #16
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7fd fe22 	bl	8004aa0 <_printf_float>
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	1c78      	adds	r0, r7, #1
 8006e60:	d1d6      	bne.n	8006e10 <_vfiprintf_r+0x1bc>
 8006e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e64:	07d9      	lsls	r1, r3, #31
 8006e66:	d405      	bmi.n	8006e74 <_vfiprintf_r+0x220>
 8006e68:	89ab      	ldrh	r3, [r5, #12]
 8006e6a:	059a      	lsls	r2, r3, #22
 8006e6c:	d402      	bmi.n	8006e74 <_vfiprintf_r+0x220>
 8006e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e70:	f000 faaf 	bl	80073d2 <__retarget_lock_release_recursive>
 8006e74:	89ab      	ldrh	r3, [r5, #12]
 8006e76:	065b      	lsls	r3, r3, #25
 8006e78:	f53f af12 	bmi.w	8006ca0 <_vfiprintf_r+0x4c>
 8006e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e7e:	e711      	b.n	8006ca4 <_vfiprintf_r+0x50>
 8006e80:	ab03      	add	r3, sp, #12
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	462a      	mov	r2, r5
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <_vfiprintf_r+0x258>)
 8006e88:	a904      	add	r1, sp, #16
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7fe f8ac 	bl	8004fe8 <_printf_i>
 8006e90:	e7e4      	b.n	8006e5c <_vfiprintf_r+0x208>
 8006e92:	bf00      	nop
 8006e94:	08007ac4 	.word	0x08007ac4
 8006e98:	08007ae4 	.word	0x08007ae4
 8006e9c:	08007aa4 	.word	0x08007aa4
 8006ea0:	0800794c 	.word	0x0800794c
 8006ea4:	08007956 	.word	0x08007956
 8006ea8:	08004aa1 	.word	0x08004aa1
 8006eac:	08006c2f 	.word	0x08006c2f
 8006eb0:	08007952 	.word	0x08007952

08006eb4 <__swbuf_r>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	460e      	mov	r6, r1
 8006eb8:	4614      	mov	r4, r2
 8006eba:	4605      	mov	r5, r0
 8006ebc:	b118      	cbz	r0, 8006ec6 <__swbuf_r+0x12>
 8006ebe:	6983      	ldr	r3, [r0, #24]
 8006ec0:	b90b      	cbnz	r3, 8006ec6 <__swbuf_r+0x12>
 8006ec2:	f000 f9e7 	bl	8007294 <__sinit>
 8006ec6:	4b21      	ldr	r3, [pc, #132]	; (8006f4c <__swbuf_r+0x98>)
 8006ec8:	429c      	cmp	r4, r3
 8006eca:	d12b      	bne.n	8006f24 <__swbuf_r+0x70>
 8006ecc:	686c      	ldr	r4, [r5, #4]
 8006ece:	69a3      	ldr	r3, [r4, #24]
 8006ed0:	60a3      	str	r3, [r4, #8]
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	071a      	lsls	r2, r3, #28
 8006ed6:	d52f      	bpl.n	8006f38 <__swbuf_r+0x84>
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	b36b      	cbz	r3, 8006f38 <__swbuf_r+0x84>
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	6820      	ldr	r0, [r4, #0]
 8006ee0:	1ac0      	subs	r0, r0, r3
 8006ee2:	6963      	ldr	r3, [r4, #20]
 8006ee4:	b2f6      	uxtb	r6, r6
 8006ee6:	4283      	cmp	r3, r0
 8006ee8:	4637      	mov	r7, r6
 8006eea:	dc04      	bgt.n	8006ef6 <__swbuf_r+0x42>
 8006eec:	4621      	mov	r1, r4
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f93c 	bl	800716c <_fflush_r>
 8006ef4:	bb30      	cbnz	r0, 8006f44 <__swbuf_r+0x90>
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	60a3      	str	r3, [r4, #8]
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	6022      	str	r2, [r4, #0]
 8006f02:	701e      	strb	r6, [r3, #0]
 8006f04:	6963      	ldr	r3, [r4, #20]
 8006f06:	3001      	adds	r0, #1
 8006f08:	4283      	cmp	r3, r0
 8006f0a:	d004      	beq.n	8006f16 <__swbuf_r+0x62>
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	07db      	lsls	r3, r3, #31
 8006f10:	d506      	bpl.n	8006f20 <__swbuf_r+0x6c>
 8006f12:	2e0a      	cmp	r6, #10
 8006f14:	d104      	bne.n	8006f20 <__swbuf_r+0x6c>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 f927 	bl	800716c <_fflush_r>
 8006f1e:	b988      	cbnz	r0, 8006f44 <__swbuf_r+0x90>
 8006f20:	4638      	mov	r0, r7
 8006f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <__swbuf_r+0x9c>)
 8006f26:	429c      	cmp	r4, r3
 8006f28:	d101      	bne.n	8006f2e <__swbuf_r+0x7a>
 8006f2a:	68ac      	ldr	r4, [r5, #8]
 8006f2c:	e7cf      	b.n	8006ece <__swbuf_r+0x1a>
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <__swbuf_r+0xa0>)
 8006f30:	429c      	cmp	r4, r3
 8006f32:	bf08      	it	eq
 8006f34:	68ec      	ldreq	r4, [r5, #12]
 8006f36:	e7ca      	b.n	8006ece <__swbuf_r+0x1a>
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f000 f81a 	bl	8006f74 <__swsetup_r>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d0cb      	beq.n	8006edc <__swbuf_r+0x28>
 8006f44:	f04f 37ff 	mov.w	r7, #4294967295
 8006f48:	e7ea      	b.n	8006f20 <__swbuf_r+0x6c>
 8006f4a:	bf00      	nop
 8006f4c:	08007ac4 	.word	0x08007ac4
 8006f50:	08007ae4 	.word	0x08007ae4
 8006f54:	08007aa4 	.word	0x08007aa4

08006f58 <__ascii_wctomb>:
 8006f58:	b149      	cbz	r1, 8006f6e <__ascii_wctomb+0x16>
 8006f5a:	2aff      	cmp	r2, #255	; 0xff
 8006f5c:	bf85      	ittet	hi
 8006f5e:	238a      	movhi	r3, #138	; 0x8a
 8006f60:	6003      	strhi	r3, [r0, #0]
 8006f62:	700a      	strbls	r2, [r1, #0]
 8006f64:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f68:	bf98      	it	ls
 8006f6a:	2001      	movls	r0, #1
 8006f6c:	4770      	bx	lr
 8006f6e:	4608      	mov	r0, r1
 8006f70:	4770      	bx	lr
	...

08006f74 <__swsetup_r>:
 8006f74:	4b32      	ldr	r3, [pc, #200]	; (8007040 <__swsetup_r+0xcc>)
 8006f76:	b570      	push	{r4, r5, r6, lr}
 8006f78:	681d      	ldr	r5, [r3, #0]
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	b125      	cbz	r5, 8006f8a <__swsetup_r+0x16>
 8006f80:	69ab      	ldr	r3, [r5, #24]
 8006f82:	b913      	cbnz	r3, 8006f8a <__swsetup_r+0x16>
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 f985 	bl	8007294 <__sinit>
 8006f8a:	4b2e      	ldr	r3, [pc, #184]	; (8007044 <__swsetup_r+0xd0>)
 8006f8c:	429c      	cmp	r4, r3
 8006f8e:	d10f      	bne.n	8006fb0 <__swsetup_r+0x3c>
 8006f90:	686c      	ldr	r4, [r5, #4]
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f98:	0719      	lsls	r1, r3, #28
 8006f9a:	d42c      	bmi.n	8006ff6 <__swsetup_r+0x82>
 8006f9c:	06dd      	lsls	r5, r3, #27
 8006f9e:	d411      	bmi.n	8006fc4 <__swsetup_r+0x50>
 8006fa0:	2309      	movs	r3, #9
 8006fa2:	6033      	str	r3, [r6, #0]
 8006fa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	f04f 30ff 	mov.w	r0, #4294967295
 8006fae:	e03e      	b.n	800702e <__swsetup_r+0xba>
 8006fb0:	4b25      	ldr	r3, [pc, #148]	; (8007048 <__swsetup_r+0xd4>)
 8006fb2:	429c      	cmp	r4, r3
 8006fb4:	d101      	bne.n	8006fba <__swsetup_r+0x46>
 8006fb6:	68ac      	ldr	r4, [r5, #8]
 8006fb8:	e7eb      	b.n	8006f92 <__swsetup_r+0x1e>
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <__swsetup_r+0xd8>)
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	bf08      	it	eq
 8006fc0:	68ec      	ldreq	r4, [r5, #12]
 8006fc2:	e7e6      	b.n	8006f92 <__swsetup_r+0x1e>
 8006fc4:	0758      	lsls	r0, r3, #29
 8006fc6:	d512      	bpl.n	8006fee <__swsetup_r+0x7a>
 8006fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fca:	b141      	cbz	r1, 8006fde <__swsetup_r+0x6a>
 8006fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd0:	4299      	cmp	r1, r3
 8006fd2:	d002      	beq.n	8006fda <__swsetup_r+0x66>
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff fb6f 	bl	80066b8 <_free_r>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fe4:	81a3      	strh	r3, [r4, #12]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	6063      	str	r3, [r4, #4]
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	f043 0308 	orr.w	r3, r3, #8
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	b94b      	cbnz	r3, 800700e <__swsetup_r+0x9a>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007004:	d003      	beq.n	800700e <__swsetup_r+0x9a>
 8007006:	4621      	mov	r1, r4
 8007008:	4630      	mov	r0, r6
 800700a:	f000 fa07 	bl	800741c <__smakebuf_r>
 800700e:	89a0      	ldrh	r0, [r4, #12]
 8007010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007014:	f010 0301 	ands.w	r3, r0, #1
 8007018:	d00a      	beq.n	8007030 <__swsetup_r+0xbc>
 800701a:	2300      	movs	r3, #0
 800701c:	60a3      	str	r3, [r4, #8]
 800701e:	6963      	ldr	r3, [r4, #20]
 8007020:	425b      	negs	r3, r3
 8007022:	61a3      	str	r3, [r4, #24]
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	b943      	cbnz	r3, 800703a <__swsetup_r+0xc6>
 8007028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800702c:	d1ba      	bne.n	8006fa4 <__swsetup_r+0x30>
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	0781      	lsls	r1, r0, #30
 8007032:	bf58      	it	pl
 8007034:	6963      	ldrpl	r3, [r4, #20]
 8007036:	60a3      	str	r3, [r4, #8]
 8007038:	e7f4      	b.n	8007024 <__swsetup_r+0xb0>
 800703a:	2000      	movs	r0, #0
 800703c:	e7f7      	b.n	800702e <__swsetup_r+0xba>
 800703e:	bf00      	nop
 8007040:	20000018 	.word	0x20000018
 8007044:	08007ac4 	.word	0x08007ac4
 8007048:	08007ae4 	.word	0x08007ae4
 800704c:	08007aa4 	.word	0x08007aa4

08007050 <abort>:
 8007050:	b508      	push	{r3, lr}
 8007052:	2006      	movs	r0, #6
 8007054:	f000 fa52 	bl	80074fc <raise>
 8007058:	2001      	movs	r0, #1
 800705a:	f7f9 ffef 	bl	800103c <_exit>
	...

08007060 <__sflush_r>:
 8007060:	898a      	ldrh	r2, [r1, #12]
 8007062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007066:	4605      	mov	r5, r0
 8007068:	0710      	lsls	r0, r2, #28
 800706a:	460c      	mov	r4, r1
 800706c:	d458      	bmi.n	8007120 <__sflush_r+0xc0>
 800706e:	684b      	ldr	r3, [r1, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	dc05      	bgt.n	8007080 <__sflush_r+0x20>
 8007074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	dc02      	bgt.n	8007080 <__sflush_r+0x20>
 800707a:	2000      	movs	r0, #0
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007082:	2e00      	cmp	r6, #0
 8007084:	d0f9      	beq.n	800707a <__sflush_r+0x1a>
 8007086:	2300      	movs	r3, #0
 8007088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800708c:	682f      	ldr	r7, [r5, #0]
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	d032      	beq.n	80070f8 <__sflush_r+0x98>
 8007092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	075a      	lsls	r2, r3, #29
 8007098:	d505      	bpl.n	80070a6 <__sflush_r+0x46>
 800709a:	6863      	ldr	r3, [r4, #4]
 800709c:	1ac0      	subs	r0, r0, r3
 800709e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070a0:	b10b      	cbz	r3, 80070a6 <__sflush_r+0x46>
 80070a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070a4:	1ac0      	subs	r0, r0, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	4602      	mov	r2, r0
 80070aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070ac:	6a21      	ldr	r1, [r4, #32]
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b0      	blx	r6
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	d106      	bne.n	80070c6 <__sflush_r+0x66>
 80070b8:	6829      	ldr	r1, [r5, #0]
 80070ba:	291d      	cmp	r1, #29
 80070bc:	d82c      	bhi.n	8007118 <__sflush_r+0xb8>
 80070be:	4a2a      	ldr	r2, [pc, #168]	; (8007168 <__sflush_r+0x108>)
 80070c0:	40ca      	lsrs	r2, r1
 80070c2:	07d6      	lsls	r6, r2, #31
 80070c4:	d528      	bpl.n	8007118 <__sflush_r+0xb8>
 80070c6:	2200      	movs	r2, #0
 80070c8:	6062      	str	r2, [r4, #4]
 80070ca:	04d9      	lsls	r1, r3, #19
 80070cc:	6922      	ldr	r2, [r4, #16]
 80070ce:	6022      	str	r2, [r4, #0]
 80070d0:	d504      	bpl.n	80070dc <__sflush_r+0x7c>
 80070d2:	1c42      	adds	r2, r0, #1
 80070d4:	d101      	bne.n	80070da <__sflush_r+0x7a>
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	b903      	cbnz	r3, 80070dc <__sflush_r+0x7c>
 80070da:	6560      	str	r0, [r4, #84]	; 0x54
 80070dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070de:	602f      	str	r7, [r5, #0]
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d0ca      	beq.n	800707a <__sflush_r+0x1a>
 80070e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070e8:	4299      	cmp	r1, r3
 80070ea:	d002      	beq.n	80070f2 <__sflush_r+0x92>
 80070ec:	4628      	mov	r0, r5
 80070ee:	f7ff fae3 	bl	80066b8 <_free_r>
 80070f2:	2000      	movs	r0, #0
 80070f4:	6360      	str	r0, [r4, #52]	; 0x34
 80070f6:	e7c1      	b.n	800707c <__sflush_r+0x1c>
 80070f8:	6a21      	ldr	r1, [r4, #32]
 80070fa:	2301      	movs	r3, #1
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b0      	blx	r6
 8007100:	1c41      	adds	r1, r0, #1
 8007102:	d1c7      	bne.n	8007094 <__sflush_r+0x34>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0c4      	beq.n	8007094 <__sflush_r+0x34>
 800710a:	2b1d      	cmp	r3, #29
 800710c:	d001      	beq.n	8007112 <__sflush_r+0xb2>
 800710e:	2b16      	cmp	r3, #22
 8007110:	d101      	bne.n	8007116 <__sflush_r+0xb6>
 8007112:	602f      	str	r7, [r5, #0]
 8007114:	e7b1      	b.n	800707a <__sflush_r+0x1a>
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	e7ad      	b.n	800707c <__sflush_r+0x1c>
 8007120:	690f      	ldr	r7, [r1, #16]
 8007122:	2f00      	cmp	r7, #0
 8007124:	d0a9      	beq.n	800707a <__sflush_r+0x1a>
 8007126:	0793      	lsls	r3, r2, #30
 8007128:	680e      	ldr	r6, [r1, #0]
 800712a:	bf08      	it	eq
 800712c:	694b      	ldreq	r3, [r1, #20]
 800712e:	600f      	str	r7, [r1, #0]
 8007130:	bf18      	it	ne
 8007132:	2300      	movne	r3, #0
 8007134:	eba6 0807 	sub.w	r8, r6, r7
 8007138:	608b      	str	r3, [r1, #8]
 800713a:	f1b8 0f00 	cmp.w	r8, #0
 800713e:	dd9c      	ble.n	800707a <__sflush_r+0x1a>
 8007140:	6a21      	ldr	r1, [r4, #32]
 8007142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007144:	4643      	mov	r3, r8
 8007146:	463a      	mov	r2, r7
 8007148:	4628      	mov	r0, r5
 800714a:	47b0      	blx	r6
 800714c:	2800      	cmp	r0, #0
 800714e:	dc06      	bgt.n	800715e <__sflush_r+0xfe>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e78e      	b.n	800707c <__sflush_r+0x1c>
 800715e:	4407      	add	r7, r0
 8007160:	eba8 0800 	sub.w	r8, r8, r0
 8007164:	e7e9      	b.n	800713a <__sflush_r+0xda>
 8007166:	bf00      	nop
 8007168:	20400001 	.word	0x20400001

0800716c <_fflush_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	690b      	ldr	r3, [r1, #16]
 8007170:	4605      	mov	r5, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b913      	cbnz	r3, 800717c <_fflush_r+0x10>
 8007176:	2500      	movs	r5, #0
 8007178:	4628      	mov	r0, r5
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	b118      	cbz	r0, 8007186 <_fflush_r+0x1a>
 800717e:	6983      	ldr	r3, [r0, #24]
 8007180:	b90b      	cbnz	r3, 8007186 <_fflush_r+0x1a>
 8007182:	f000 f887 	bl	8007294 <__sinit>
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <_fflush_r+0x6c>)
 8007188:	429c      	cmp	r4, r3
 800718a:	d11b      	bne.n	80071c4 <_fflush_r+0x58>
 800718c:	686c      	ldr	r4, [r5, #4]
 800718e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0ef      	beq.n	8007176 <_fflush_r+0xa>
 8007196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007198:	07d0      	lsls	r0, r2, #31
 800719a:	d404      	bmi.n	80071a6 <_fflush_r+0x3a>
 800719c:	0599      	lsls	r1, r3, #22
 800719e:	d402      	bmi.n	80071a6 <_fflush_r+0x3a>
 80071a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a2:	f000 f915 	bl	80073d0 <__retarget_lock_acquire_recursive>
 80071a6:	4628      	mov	r0, r5
 80071a8:	4621      	mov	r1, r4
 80071aa:	f7ff ff59 	bl	8007060 <__sflush_r>
 80071ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071b0:	07da      	lsls	r2, r3, #31
 80071b2:	4605      	mov	r5, r0
 80071b4:	d4e0      	bmi.n	8007178 <_fflush_r+0xc>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	059b      	lsls	r3, r3, #22
 80071ba:	d4dd      	bmi.n	8007178 <_fflush_r+0xc>
 80071bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071be:	f000 f908 	bl	80073d2 <__retarget_lock_release_recursive>
 80071c2:	e7d9      	b.n	8007178 <_fflush_r+0xc>
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <_fflush_r+0x70>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d101      	bne.n	80071ce <_fflush_r+0x62>
 80071ca:	68ac      	ldr	r4, [r5, #8]
 80071cc:	e7df      	b.n	800718e <_fflush_r+0x22>
 80071ce:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <_fflush_r+0x74>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	bf08      	it	eq
 80071d4:	68ec      	ldreq	r4, [r5, #12]
 80071d6:	e7da      	b.n	800718e <_fflush_r+0x22>
 80071d8:	08007ac4 	.word	0x08007ac4
 80071dc:	08007ae4 	.word	0x08007ae4
 80071e0:	08007aa4 	.word	0x08007aa4

080071e4 <std>:
 80071e4:	2300      	movs	r3, #0
 80071e6:	b510      	push	{r4, lr}
 80071e8:	4604      	mov	r4, r0
 80071ea:	e9c0 3300 	strd	r3, r3, [r0]
 80071ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071f2:	6083      	str	r3, [r0, #8]
 80071f4:	8181      	strh	r1, [r0, #12]
 80071f6:	6643      	str	r3, [r0, #100]	; 0x64
 80071f8:	81c2      	strh	r2, [r0, #14]
 80071fa:	6183      	str	r3, [r0, #24]
 80071fc:	4619      	mov	r1, r3
 80071fe:	2208      	movs	r2, #8
 8007200:	305c      	adds	r0, #92	; 0x5c
 8007202:	f7fd fba5 	bl	8004950 <memset>
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <std+0x38>)
 8007208:	6263      	str	r3, [r4, #36]	; 0x24
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <std+0x3c>)
 800720c:	62a3      	str	r3, [r4, #40]	; 0x28
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <std+0x40>)
 8007210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <std+0x44>)
 8007214:	6224      	str	r4, [r4, #32]
 8007216:	6323      	str	r3, [r4, #48]	; 0x30
 8007218:	bd10      	pop	{r4, pc}
 800721a:	bf00      	nop
 800721c:	08007535 	.word	0x08007535
 8007220:	08007557 	.word	0x08007557
 8007224:	0800758f 	.word	0x0800758f
 8007228:	080075b3 	.word	0x080075b3

0800722c <_cleanup_r>:
 800722c:	4901      	ldr	r1, [pc, #4]	; (8007234 <_cleanup_r+0x8>)
 800722e:	f000 b8af 	b.w	8007390 <_fwalk_reent>
 8007232:	bf00      	nop
 8007234:	0800716d 	.word	0x0800716d

08007238 <__sfmoreglue>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	1e4a      	subs	r2, r1, #1
 800723c:	2568      	movs	r5, #104	; 0x68
 800723e:	4355      	muls	r5, r2
 8007240:	460e      	mov	r6, r1
 8007242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007246:	f7ff fa87 	bl	8006758 <_malloc_r>
 800724a:	4604      	mov	r4, r0
 800724c:	b140      	cbz	r0, 8007260 <__sfmoreglue+0x28>
 800724e:	2100      	movs	r1, #0
 8007250:	e9c0 1600 	strd	r1, r6, [r0]
 8007254:	300c      	adds	r0, #12
 8007256:	60a0      	str	r0, [r4, #8]
 8007258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800725c:	f7fd fb78 	bl	8004950 <memset>
 8007260:	4620      	mov	r0, r4
 8007262:	bd70      	pop	{r4, r5, r6, pc}

08007264 <__sfp_lock_acquire>:
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__sfp_lock_acquire+0x8>)
 8007266:	f000 b8b3 	b.w	80073d0 <__retarget_lock_acquire_recursive>
 800726a:	bf00      	nop
 800726c:	20000718 	.word	0x20000718

08007270 <__sfp_lock_release>:
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <__sfp_lock_release+0x8>)
 8007272:	f000 b8ae 	b.w	80073d2 <__retarget_lock_release_recursive>
 8007276:	bf00      	nop
 8007278:	20000718 	.word	0x20000718

0800727c <__sinit_lock_acquire>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__sinit_lock_acquire+0x8>)
 800727e:	f000 b8a7 	b.w	80073d0 <__retarget_lock_acquire_recursive>
 8007282:	bf00      	nop
 8007284:	20000713 	.word	0x20000713

08007288 <__sinit_lock_release>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__sinit_lock_release+0x8>)
 800728a:	f000 b8a2 	b.w	80073d2 <__retarget_lock_release_recursive>
 800728e:	bf00      	nop
 8007290:	20000713 	.word	0x20000713

08007294 <__sinit>:
 8007294:	b510      	push	{r4, lr}
 8007296:	4604      	mov	r4, r0
 8007298:	f7ff fff0 	bl	800727c <__sinit_lock_acquire>
 800729c:	69a3      	ldr	r3, [r4, #24]
 800729e:	b11b      	cbz	r3, 80072a8 <__sinit+0x14>
 80072a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a4:	f7ff bff0 	b.w	8007288 <__sinit_lock_release>
 80072a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072ac:	6523      	str	r3, [r4, #80]	; 0x50
 80072ae:	4b13      	ldr	r3, [pc, #76]	; (80072fc <__sinit+0x68>)
 80072b0:	4a13      	ldr	r2, [pc, #76]	; (8007300 <__sinit+0x6c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80072b6:	42a3      	cmp	r3, r4
 80072b8:	bf04      	itt	eq
 80072ba:	2301      	moveq	r3, #1
 80072bc:	61a3      	streq	r3, [r4, #24]
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f820 	bl	8007304 <__sfp>
 80072c4:	6060      	str	r0, [r4, #4]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f81c 	bl	8007304 <__sfp>
 80072cc:	60a0      	str	r0, [r4, #8]
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f818 	bl	8007304 <__sfp>
 80072d4:	2200      	movs	r2, #0
 80072d6:	60e0      	str	r0, [r4, #12]
 80072d8:	2104      	movs	r1, #4
 80072da:	6860      	ldr	r0, [r4, #4]
 80072dc:	f7ff ff82 	bl	80071e4 <std>
 80072e0:	68a0      	ldr	r0, [r4, #8]
 80072e2:	2201      	movs	r2, #1
 80072e4:	2109      	movs	r1, #9
 80072e6:	f7ff ff7d 	bl	80071e4 <std>
 80072ea:	68e0      	ldr	r0, [r4, #12]
 80072ec:	2202      	movs	r2, #2
 80072ee:	2112      	movs	r1, #18
 80072f0:	f7ff ff78 	bl	80071e4 <std>
 80072f4:	2301      	movs	r3, #1
 80072f6:	61a3      	str	r3, [r4, #24]
 80072f8:	e7d2      	b.n	80072a0 <__sinit+0xc>
 80072fa:	bf00      	nop
 80072fc:	08007720 	.word	0x08007720
 8007300:	0800722d 	.word	0x0800722d

08007304 <__sfp>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	4607      	mov	r7, r0
 8007308:	f7ff ffac 	bl	8007264 <__sfp_lock_acquire>
 800730c:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <__sfp+0x84>)
 800730e:	681e      	ldr	r6, [r3, #0]
 8007310:	69b3      	ldr	r3, [r6, #24]
 8007312:	b913      	cbnz	r3, 800731a <__sfp+0x16>
 8007314:	4630      	mov	r0, r6
 8007316:	f7ff ffbd 	bl	8007294 <__sinit>
 800731a:	3648      	adds	r6, #72	; 0x48
 800731c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007320:	3b01      	subs	r3, #1
 8007322:	d503      	bpl.n	800732c <__sfp+0x28>
 8007324:	6833      	ldr	r3, [r6, #0]
 8007326:	b30b      	cbz	r3, 800736c <__sfp+0x68>
 8007328:	6836      	ldr	r6, [r6, #0]
 800732a:	e7f7      	b.n	800731c <__sfp+0x18>
 800732c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007330:	b9d5      	cbnz	r5, 8007368 <__sfp+0x64>
 8007332:	4b16      	ldr	r3, [pc, #88]	; (800738c <__sfp+0x88>)
 8007334:	60e3      	str	r3, [r4, #12]
 8007336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800733a:	6665      	str	r5, [r4, #100]	; 0x64
 800733c:	f000 f847 	bl	80073ce <__retarget_lock_init_recursive>
 8007340:	f7ff ff96 	bl	8007270 <__sfp_lock_release>
 8007344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800734c:	6025      	str	r5, [r4, #0]
 800734e:	61a5      	str	r5, [r4, #24]
 8007350:	2208      	movs	r2, #8
 8007352:	4629      	mov	r1, r5
 8007354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007358:	f7fd fafa 	bl	8004950 <memset>
 800735c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007364:	4620      	mov	r0, r4
 8007366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007368:	3468      	adds	r4, #104	; 0x68
 800736a:	e7d9      	b.n	8007320 <__sfp+0x1c>
 800736c:	2104      	movs	r1, #4
 800736e:	4638      	mov	r0, r7
 8007370:	f7ff ff62 	bl	8007238 <__sfmoreglue>
 8007374:	4604      	mov	r4, r0
 8007376:	6030      	str	r0, [r6, #0]
 8007378:	2800      	cmp	r0, #0
 800737a:	d1d5      	bne.n	8007328 <__sfp+0x24>
 800737c:	f7ff ff78 	bl	8007270 <__sfp_lock_release>
 8007380:	230c      	movs	r3, #12
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	e7ee      	b.n	8007364 <__sfp+0x60>
 8007386:	bf00      	nop
 8007388:	08007720 	.word	0x08007720
 800738c:	ffff0001 	.word	0xffff0001

08007390 <_fwalk_reent>:
 8007390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007394:	4606      	mov	r6, r0
 8007396:	4688      	mov	r8, r1
 8007398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800739c:	2700      	movs	r7, #0
 800739e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a2:	f1b9 0901 	subs.w	r9, r9, #1
 80073a6:	d505      	bpl.n	80073b4 <_fwalk_reent+0x24>
 80073a8:	6824      	ldr	r4, [r4, #0]
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	d1f7      	bne.n	800739e <_fwalk_reent+0xe>
 80073ae:	4638      	mov	r0, r7
 80073b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b4:	89ab      	ldrh	r3, [r5, #12]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d907      	bls.n	80073ca <_fwalk_reent+0x3a>
 80073ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073be:	3301      	adds	r3, #1
 80073c0:	d003      	beq.n	80073ca <_fwalk_reent+0x3a>
 80073c2:	4629      	mov	r1, r5
 80073c4:	4630      	mov	r0, r6
 80073c6:	47c0      	blx	r8
 80073c8:	4307      	orrs	r7, r0
 80073ca:	3568      	adds	r5, #104	; 0x68
 80073cc:	e7e9      	b.n	80073a2 <_fwalk_reent+0x12>

080073ce <__retarget_lock_init_recursive>:
 80073ce:	4770      	bx	lr

080073d0 <__retarget_lock_acquire_recursive>:
 80073d0:	4770      	bx	lr

080073d2 <__retarget_lock_release_recursive>:
 80073d2:	4770      	bx	lr

080073d4 <__swhatbuf_r>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	460e      	mov	r6, r1
 80073d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073dc:	2900      	cmp	r1, #0
 80073de:	b096      	sub	sp, #88	; 0x58
 80073e0:	4614      	mov	r4, r2
 80073e2:	461d      	mov	r5, r3
 80073e4:	da07      	bge.n	80073f6 <__swhatbuf_r+0x22>
 80073e6:	2300      	movs	r3, #0
 80073e8:	602b      	str	r3, [r5, #0]
 80073ea:	89b3      	ldrh	r3, [r6, #12]
 80073ec:	061a      	lsls	r2, r3, #24
 80073ee:	d410      	bmi.n	8007412 <__swhatbuf_r+0x3e>
 80073f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f4:	e00e      	b.n	8007414 <__swhatbuf_r+0x40>
 80073f6:	466a      	mov	r2, sp
 80073f8:	f000 f902 	bl	8007600 <_fstat_r>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	dbf2      	blt.n	80073e6 <__swhatbuf_r+0x12>
 8007400:	9a01      	ldr	r2, [sp, #4]
 8007402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800740a:	425a      	negs	r2, r3
 800740c:	415a      	adcs	r2, r3
 800740e:	602a      	str	r2, [r5, #0]
 8007410:	e7ee      	b.n	80073f0 <__swhatbuf_r+0x1c>
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	2000      	movs	r0, #0
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	b016      	add	sp, #88	; 0x58
 800741a:	bd70      	pop	{r4, r5, r6, pc}

0800741c <__smakebuf_r>:
 800741c:	898b      	ldrh	r3, [r1, #12]
 800741e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007420:	079d      	lsls	r5, r3, #30
 8007422:	4606      	mov	r6, r0
 8007424:	460c      	mov	r4, r1
 8007426:	d507      	bpl.n	8007438 <__smakebuf_r+0x1c>
 8007428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	6123      	str	r3, [r4, #16]
 8007430:	2301      	movs	r3, #1
 8007432:	6163      	str	r3, [r4, #20]
 8007434:	b002      	add	sp, #8
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	ab01      	add	r3, sp, #4
 800743a:	466a      	mov	r2, sp
 800743c:	f7ff ffca 	bl	80073d4 <__swhatbuf_r>
 8007440:	9900      	ldr	r1, [sp, #0]
 8007442:	4605      	mov	r5, r0
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff f987 	bl	8006758 <_malloc_r>
 800744a:	b948      	cbnz	r0, 8007460 <__smakebuf_r+0x44>
 800744c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007450:	059a      	lsls	r2, r3, #22
 8007452:	d4ef      	bmi.n	8007434 <__smakebuf_r+0x18>
 8007454:	f023 0303 	bic.w	r3, r3, #3
 8007458:	f043 0302 	orr.w	r3, r3, #2
 800745c:	81a3      	strh	r3, [r4, #12]
 800745e:	e7e3      	b.n	8007428 <__smakebuf_r+0xc>
 8007460:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <__smakebuf_r+0x7c>)
 8007462:	62b3      	str	r3, [r6, #40]	; 0x28
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	9b00      	ldr	r3, [sp, #0]
 8007470:	6163      	str	r3, [r4, #20]
 8007472:	9b01      	ldr	r3, [sp, #4]
 8007474:	6120      	str	r0, [r4, #16]
 8007476:	b15b      	cbz	r3, 8007490 <__smakebuf_r+0x74>
 8007478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800747c:	4630      	mov	r0, r6
 800747e:	f000 f8d1 	bl	8007624 <_isatty_r>
 8007482:	b128      	cbz	r0, 8007490 <__smakebuf_r+0x74>
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	f023 0303 	bic.w	r3, r3, #3
 800748a:	f043 0301 	orr.w	r3, r3, #1
 800748e:	81a3      	strh	r3, [r4, #12]
 8007490:	89a0      	ldrh	r0, [r4, #12]
 8007492:	4305      	orrs	r5, r0
 8007494:	81a5      	strh	r5, [r4, #12]
 8007496:	e7cd      	b.n	8007434 <__smakebuf_r+0x18>
 8007498:	0800722d 	.word	0x0800722d

0800749c <_malloc_usable_size_r>:
 800749c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a0:	1f18      	subs	r0, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bfbc      	itt	lt
 80074a6:	580b      	ldrlt	r3, [r1, r0]
 80074a8:	18c0      	addlt	r0, r0, r3
 80074aa:	4770      	bx	lr

080074ac <_raise_r>:
 80074ac:	291f      	cmp	r1, #31
 80074ae:	b538      	push	{r3, r4, r5, lr}
 80074b0:	4604      	mov	r4, r0
 80074b2:	460d      	mov	r5, r1
 80074b4:	d904      	bls.n	80074c0 <_raise_r+0x14>
 80074b6:	2316      	movs	r3, #22
 80074b8:	6003      	str	r3, [r0, #0]
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074c2:	b112      	cbz	r2, 80074ca <_raise_r+0x1e>
 80074c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074c8:	b94b      	cbnz	r3, 80074de <_raise_r+0x32>
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 f830 	bl	8007530 <_getpid_r>
 80074d0:	462a      	mov	r2, r5
 80074d2:	4601      	mov	r1, r0
 80074d4:	4620      	mov	r0, r4
 80074d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074da:	f000 b817 	b.w	800750c <_kill_r>
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d00a      	beq.n	80074f8 <_raise_r+0x4c>
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	d103      	bne.n	80074ee <_raise_r+0x42>
 80074e6:	2316      	movs	r3, #22
 80074e8:	6003      	str	r3, [r0, #0]
 80074ea:	2001      	movs	r0, #1
 80074ec:	e7e7      	b.n	80074be <_raise_r+0x12>
 80074ee:	2400      	movs	r4, #0
 80074f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074f4:	4628      	mov	r0, r5
 80074f6:	4798      	blx	r3
 80074f8:	2000      	movs	r0, #0
 80074fa:	e7e0      	b.n	80074be <_raise_r+0x12>

080074fc <raise>:
 80074fc:	4b02      	ldr	r3, [pc, #8]	; (8007508 <raise+0xc>)
 80074fe:	4601      	mov	r1, r0
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	f7ff bfd3 	b.w	80074ac <_raise_r>
 8007506:	bf00      	nop
 8007508:	20000018 	.word	0x20000018

0800750c <_kill_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d07      	ldr	r5, [pc, #28]	; (800752c <_kill_r+0x20>)
 8007510:	2300      	movs	r3, #0
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	f7f9 fd7f 	bl	800101c <_kill>
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	d102      	bne.n	8007528 <_kill_r+0x1c>
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	b103      	cbz	r3, 8007528 <_kill_r+0x1c>
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	bd38      	pop	{r3, r4, r5, pc}
 800752a:	bf00      	nop
 800752c:	2000070c 	.word	0x2000070c

08007530 <_getpid_r>:
 8007530:	f7f9 bd6c 	b.w	800100c <_getpid>

08007534 <__sread>:
 8007534:	b510      	push	{r4, lr}
 8007536:	460c      	mov	r4, r1
 8007538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753c:	f000 f894 	bl	8007668 <_read_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	bfab      	itete	ge
 8007544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007546:	89a3      	ldrhlt	r3, [r4, #12]
 8007548:	181b      	addge	r3, r3, r0
 800754a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800754e:	bfac      	ite	ge
 8007550:	6563      	strge	r3, [r4, #84]	; 0x54
 8007552:	81a3      	strhlt	r3, [r4, #12]
 8007554:	bd10      	pop	{r4, pc}

08007556 <__swrite>:
 8007556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755a:	461f      	mov	r7, r3
 800755c:	898b      	ldrh	r3, [r1, #12]
 800755e:	05db      	lsls	r3, r3, #23
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	4616      	mov	r6, r2
 8007566:	d505      	bpl.n	8007574 <__swrite+0x1e>
 8007568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756c:	2302      	movs	r3, #2
 800756e:	2200      	movs	r2, #0
 8007570:	f000 f868 	bl	8007644 <_lseek_r>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800757a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800757e:	81a3      	strh	r3, [r4, #12]
 8007580:	4632      	mov	r2, r6
 8007582:	463b      	mov	r3, r7
 8007584:	4628      	mov	r0, r5
 8007586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	f000 b817 	b.w	80075bc <_write_r>

0800758e <__sseek>:
 800758e:	b510      	push	{r4, lr}
 8007590:	460c      	mov	r4, r1
 8007592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007596:	f000 f855 	bl	8007644 <_lseek_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	bf15      	itete	ne
 80075a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075aa:	81a3      	strheq	r3, [r4, #12]
 80075ac:	bf18      	it	ne
 80075ae:	81a3      	strhne	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__sclose>:
 80075b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b6:	f000 b813 	b.w	80075e0 <_close_r>
	...

080075bc <_write_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d07      	ldr	r5, [pc, #28]	; (80075dc <_write_r+0x20>)
 80075c0:	4604      	mov	r4, r0
 80075c2:	4608      	mov	r0, r1
 80075c4:	4611      	mov	r1, r2
 80075c6:	2200      	movs	r2, #0
 80075c8:	602a      	str	r2, [r5, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f7f9 fd5d 	bl	800108a <_write>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_write_r+0x1e>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_write_r+0x1e>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	2000070c 	.word	0x2000070c

080075e0 <_close_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d06      	ldr	r5, [pc, #24]	; (80075fc <_close_r+0x1c>)
 80075e4:	2300      	movs	r3, #0
 80075e6:	4604      	mov	r4, r0
 80075e8:	4608      	mov	r0, r1
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	f7f9 fd69 	bl	80010c2 <_close>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_close_r+0x1a>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_close_r+0x1a>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	2000070c 	.word	0x2000070c

08007600 <_fstat_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4d07      	ldr	r5, [pc, #28]	; (8007620 <_fstat_r+0x20>)
 8007604:	2300      	movs	r3, #0
 8007606:	4604      	mov	r4, r0
 8007608:	4608      	mov	r0, r1
 800760a:	4611      	mov	r1, r2
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	f7f9 fd64 	bl	80010da <_fstat>
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	d102      	bne.n	800761c <_fstat_r+0x1c>
 8007616:	682b      	ldr	r3, [r5, #0]
 8007618:	b103      	cbz	r3, 800761c <_fstat_r+0x1c>
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	bd38      	pop	{r3, r4, r5, pc}
 800761e:	bf00      	nop
 8007620:	2000070c 	.word	0x2000070c

08007624 <_isatty_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4d06      	ldr	r5, [pc, #24]	; (8007640 <_isatty_r+0x1c>)
 8007628:	2300      	movs	r3, #0
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	f7f9 fd63 	bl	80010fa <_isatty>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_isatty_r+0x1a>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	b103      	cbz	r3, 800763e <_isatty_r+0x1a>
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	2000070c 	.word	0x2000070c

08007644 <_lseek_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4d07      	ldr	r5, [pc, #28]	; (8007664 <_lseek_r+0x20>)
 8007648:	4604      	mov	r4, r0
 800764a:	4608      	mov	r0, r1
 800764c:	4611      	mov	r1, r2
 800764e:	2200      	movs	r2, #0
 8007650:	602a      	str	r2, [r5, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	f7f9 fd5c 	bl	8001110 <_lseek>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d102      	bne.n	8007662 <_lseek_r+0x1e>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	b103      	cbz	r3, 8007662 <_lseek_r+0x1e>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	2000070c 	.word	0x2000070c

08007668 <_read_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d07      	ldr	r5, [pc, #28]	; (8007688 <_read_r+0x20>)
 800766c:	4604      	mov	r4, r0
 800766e:	4608      	mov	r0, r1
 8007670:	4611      	mov	r1, r2
 8007672:	2200      	movs	r2, #0
 8007674:	602a      	str	r2, [r5, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	f7f9 fcea 	bl	8001050 <_read>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d102      	bne.n	8007686 <_read_r+0x1e>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	b103      	cbz	r3, 8007686 <_read_r+0x1e>
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	2000070c 	.word	0x2000070c

0800768c <_init>:
 800768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768e:	bf00      	nop
 8007690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007692:	bc08      	pop	{r3}
 8007694:	469e      	mov	lr, r3
 8007696:	4770      	bx	lr

08007698 <_fini>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr
