
TOF_SAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009258  08009258  00020568  2**0
                  CONTENTS
  4 .ARM          00000008  08009258  08009258  00019258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009260  08009260  00020568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009260  08009260  00019260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009264  08009264  00019264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000568  20000000  08009268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000568  080097d0  00020568  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  080097d0  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a508  00000000  00000000  00020598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e42  00000000  00000000  0003aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0003d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  0003eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b0f  00000000  00000000  0003fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170b3  00000000  00000000  00062777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c97bb  00000000  00000000  0007982a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142fe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005020  00000000  00000000  00143038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000568 	.word	0x20000568
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009144 	.word	0x08009144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000056c 	.word	0x2000056c
 80001cc:	08009144 	.word	0x08009144

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TOF_Units_t montof_0 = TOF_UNIT_0;
 800058a:	2300      	movs	r3, #0
 800058c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	TOF_Units_t montof_1 = TOF_UNIT_1;
 8000590:	2301      	movs	r3, #1
 8000592:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint16_t tentatives_max = 100;
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	86bb      	strh	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fb44 	bl	8000c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f865 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f935 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f903 	bl	80007b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005aa:	f000 f8c1 	bl	8000730 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  TOF_Status_t result_init = TOF_Init();
 80005ae:	f004 f9cb 	bl	8004948 <TOF_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if(result_init != TOF_STATUS_SUCESS){
 80005b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d012      	beq.n	80005e6 <main+0x62>
	  sprintf((char*)buf, "Erreur lors de l'initialisation : %i\r\n", ((int8_t)result_init));
 80005c0:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4925      	ldr	r1, [pc, #148]	; (800065c <main+0xd8>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	f008 f95b 	bl	8008884 <siprintf>

	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fdfd 	bl	80001d0 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29a      	uxth	r2, r3
 80005da:	1d39      	adds	r1, r7, #4
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	481f      	ldr	r0, [pc, #124]	; (8000660 <main+0xdc>)
 80005e2:	f003 fb8b 	bl	8003cfc <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	TOF_Get_Range(montof_0, tentatives_max, &range_milimeters, &range_status);
 80005e6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80005ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80005ee:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80005f0:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80005f4:	f004 f9da 	bl	80049ac <TOF_Get_Range>
	sprintf((char*)buf, "TOF n°0 | Value : %u mm | Status : %u\r\n", ((uint16_t)range_milimeters), ((uint8_t)range_status));
 80005f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80005fa:	461a      	mov	r2, r3
 80005fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4918      	ldr	r1, [pc, #96]	; (8000664 <main+0xe0>)
 8000604:	f008 f93e 	bl	8008884 <siprintf>

	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fde0 	bl	80001d0 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	4811      	ldr	r0, [pc, #68]	; (8000660 <main+0xdc>)
 800061c:	f003 fb6e 	bl	8003cfc <HAL_UART_Transmit>

	TOF_Get_Range(montof_1, tentatives_max, &range_milimeters, &range_status);
 8000620:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000624:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000628:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800062a:	f897 0036 	ldrb.w	r0, [r7, #54]	; 0x36
 800062e:	f004 f9bd 	bl	80049ac <TOF_Get_Range>
	sprintf((char*)buf, "TOF n°1 | Value : %u mm | Status : %u\r\n", ((uint16_t)range_milimeters), ((uint8_t)range_status));
 8000632:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000634:	461a      	mov	r2, r3
 8000636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800063a:	1d38      	adds	r0, r7, #4
 800063c:	490a      	ldr	r1, [pc, #40]	; (8000668 <main+0xe4>)
 800063e:	f008 f921 	bl	8008884 <siprintf>

	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fdc3 	bl	80001d0 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	1d39      	adds	r1, r7, #4
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <main+0xdc>)
 8000656:	f003 fb51 	bl	8003cfc <HAL_UART_Transmit>
	TOF_Get_Range(montof_0, tentatives_max, &range_milimeters, &range_status);
 800065a:	e7c4      	b.n	80005e6 <main+0x62>
 800065c:	0800915c 	.word	0x0800915c
 8000660:	200005d8 	.word	0x200005d8
 8000664:	08009184 	.word	0x08009184
 8000668:	080091b0 	.word	0x080091b0

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	; 0x58
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2244      	movs	r2, #68	; 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f008 f8fa 	bl	8008874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000692:	f002 f95f 	bl	8002954 <HAL_PWREx_ControlVoltageScaling>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800069c:	f000 f918 	bl	80008d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a0:	f002 f93a 	bl	8002918 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <SystemClock_Config+0xc0>)
 80006a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006aa:	4a20      	ldr	r2, [pc, #128]	; (800072c <SystemClock_Config+0xc0>)
 80006ac:	f023 0318 	bic.w	r3, r3, #24
 80006b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006b4:	2314      	movs	r3, #20
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c4:	2360      	movs	r3, #96	; 0x60
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006d4:	2310      	movs	r3, #16
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f989 	bl	8002a00 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006f4:	f000 f8ec 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2101      	movs	r1, #1
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fd89 	bl	8003228 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800071c:	f000 f8d8 	bl	80008d0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000720:	f003 f99c 	bl	8003a5c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000724:	bf00      	nop
 8000726:	3758      	adds	r7, #88	; 0x58
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_I2C1_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6010C7FF;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_I2C1_Init+0x74>)
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <MX_I2C1_Init+0x7c>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000748:	2201      	movs	r2, #1
 800074a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <MX_I2C1_Init+0x74>)
 800076c:	f000 fdd6 	bl	800131c <HAL_I2C_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000776:	f000 f8ab 	bl	80008d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <MX_I2C1_Init+0x74>)
 800077e:	f002 f833 	bl	80027e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000788:	f000 f8a2 	bl	80008d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_I2C1_Init+0x74>)
 8000790:	f002 f875 	bl	800287e <HAL_I2CEx_ConfigDigitalFilter>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 f899 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000584 	.word	0x20000584
 80007a8:	40005400 	.word	0x40005400
 80007ac:	6010c7ff 	.word	0x6010c7ff

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007f4:	f003 fa34 	bl	8003c60 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f867 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200005d8 	.word	0x200005d8
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_GPIO_Init+0xb8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <MX_GPIO_Init+0xb8>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_GPIO_Init+0xb8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_GPIO_Init+0xb8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <MX_GPIO_Init+0xb8>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_GPIO_Init+0xb8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_GPIO_Init+0xb8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_GPIO_Init+0xb8>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_GPIO_Init+0xb8>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOF1_XSHUT_Pin|TOF0_XSHUT_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2160      	movs	r1, #96	; 0x60
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f000 fd39 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <MX_GPIO_Init+0xbc>)
 8000880:	f000 fd34 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TOF1_XSHUT_Pin TOF0_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF1_XSHUT_Pin|TOF0_XSHUT_Pin;
 8000884:	2360      	movs	r3, #96	; 0x60
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 fbbb 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xbc>)
 80008ba:	f000 fbad 	bl	8001018 <HAL_GPIO_Init>

}
 80008be:	bf00      	nop
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000400 	.word	0x48000400

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	; 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09e      	sub	sp, #120	; 0x78
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	2254      	movs	r2, #84	; 0x54
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f007 ff95 	bl	8008874 <memset>
  if(hi2c->Instance==I2C1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a27      	ldr	r2, [pc, #156]	; (80009ec <HAL_I2C_MspInit+0xc8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d147      	bne.n	80009e4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000958:	2300      	movs	r3, #0
 800095a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fe85 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f7ff ffb0 	bl	80008d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <HAL_I2C_MspInit+0xcc>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <HAL_I2C_MspInit+0xcc>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HAL_I2C_MspInit+0xcc>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000988:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800098c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	2312      	movs	r3, #18
 8000990:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099a:	2304      	movs	r3, #4
 800099c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f000 fb36 	bl	8001018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_I2C_MspInit+0xcc>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <HAL_I2C_MspInit+0xcc>)
 80009b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b6:	6593      	str	r3, [r2, #88]	; 0x58
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_I2C_MspInit+0xcc>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	201f      	movs	r0, #31
 80009ca:	f000 faa0 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009ce:	201f      	movs	r0, #31
 80009d0:	f000 fab9 	bl	8000f46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2020      	movs	r0, #32
 80009da:	f000 fa98 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009de:	2020      	movs	r0, #32
 80009e0:	f000 fab1 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3778      	adds	r7, #120	; 0x78
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40005400 	.word	0x40005400
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09e      	sub	sp, #120	; 0x78
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2254      	movs	r2, #84	; 0x54
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f007 ff2d 	bl	8008874 <memset>
  if(huart->Instance==USART2)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <HAL_UART_MspInit+0xcc>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d148      	bne.n	8000ab6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fe1d 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a3c:	f7ff ff48 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a40:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <HAL_UART_MspInit+0xd0>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <HAL_UART_MspInit+0xd0>)
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_UART_MspInit+0xd0>)
 8000a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <HAL_UART_MspInit+0xd0>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_UART_MspInit+0xd0>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_UART_MspInit+0xd0>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a70:	2304      	movs	r3, #4
 8000a72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a80:	2307      	movs	r3, #7
 8000a82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f000 fac3 	bl	8001018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f000 fab1 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3778      	adds	r7, #120	; 0x78
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f8dc 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <I2C1_EV_IRQHandler+0x10>)
 8000b22:	f000 fe75 	bl	8001810 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000584 	.word	0x20000584

08000b30 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <I2C1_ER_IRQHandler+0x10>)
 8000b36:	f000 fe85 	bl	8001844 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000584 	.word	0x20000584

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f007 fe46 	bl	8008804 <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20010000 	.word	0x20010000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	2000065c 	.word	0x2000065c
 8000bac:	200006b8 	.word	0x200006b8

08000bb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd8:	f7ff ffea 	bl	8000bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bde:	490d      	ldr	r1, [pc, #52]	; (8000c14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <LoopForever+0xe>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf4:	4c0a      	ldr	r4, [pc, #40]	; (8000c20 <LoopForever+0x16>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c02:	f007 fe05 	bl	8008810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c06:	f7ff fcbd 	bl	8000584 <main>

08000c0a <LoopForever>:

LoopForever:
    b LoopForever
 8000c0a:	e7fe      	b.n	8000c0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000568 	.word	0x20000568
  ldr r2, =_sidata
 8000c18:	08009268 	.word	0x08009268
  ldr r2, =_sbss
 8000c1c:	20000568 	.word	0x20000568
  ldr r4, =_ebss
 8000c20:	200006b4 	.word	0x200006b4

08000c24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_IRQHandler>

08000c26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f961 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f80e 	bl	8000c58 <HAL_InitTick>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	e001      	b.n	8000c4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c48:	f7ff fe48 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d023      	beq.n	8000cb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_InitTick+0x70>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f96d 	bl	8000f62 <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10f      	bne.n	8000cae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d809      	bhi.n	8000ca8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f937 	bl	8000f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_InitTick+0x74>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	e007      	b.n	8000cb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e004      	b.n	8000cb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e001      	b.n	8000cb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000660 	.word	0x20000660

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000660 	.word	0x20000660

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff29 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff3e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff31 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d005      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2204      	movs	r2, #4
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e029      	b.n	8000ff2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 020e 	bic.w	r2, r2, #14
 8000fac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f003 021c 	and.w	r2, r3, #28
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
    }
  }
  return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800100a:	b2db      	uxtb	r3, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e148      	b.n	80012ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 813a 	beq.w	80012b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8094 	beq.w	80012b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	; 0x60
 8001198:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x2c4>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1d4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a43      	ldr	r2, [pc, #268]	; (80012e0 <HAL_GPIO_Init+0x2c8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1d0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1cc>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e4:	2307      	movs	r3, #7
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011ec:	2300      	movs	r3, #0
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011fe:	4937      	ldr	r1, [pc, #220]	; (80012dc <HAL_GPIO_Init+0x2c4>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120c:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001230:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001284:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f aeaf 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001308:	e002      	b.n	8001310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e081      	b.n	8001432 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff faee 	bl	8000924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2224      	movs	r2, #36	; 0x24
 800134c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800136c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800137c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d107      	bne.n	8001396 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	e006      	b.n	80013a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d104      	bne.n	80013b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69d9      	ldr	r1, [r3, #28]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1a      	ldr	r2, [r3, #32]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af02      	add	r7, sp, #8
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	461a      	mov	r2, r3
 8001448:	460b      	mov	r3, r1
 800144a:	817b      	strh	r3, [r7, #10]
 800144c:	4613      	mov	r3, r2
 800144e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b20      	cmp	r3, #32
 800145a:	f040 80da 	bne.w	8001612 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_I2C_Master_Transmit+0x30>
 8001468:	2302      	movs	r3, #2
 800146a:	e0d3      	b.n	8001614 <HAL_I2C_Master_Transmit+0x1d8>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001474:	f7ff fc40 	bl	8000cf8 <HAL_GetTick>
 8001478:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2319      	movs	r3, #25
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 fefb 	bl	8002282 <I2C_WaitOnFlagUntilTimeout>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0be      	b.n	8001614 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2221      	movs	r2, #33	; 0x21
 800149a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2210      	movs	r2, #16
 80014a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	893a      	ldrh	r2, [r7, #8]
 80014b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2bff      	cmp	r3, #255	; 0xff
 80014c6:	d90e      	bls.n	80014e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	8979      	ldrh	r1, [r7, #10]
 80014d6:	4b51      	ldr	r3, [pc, #324]	; (800161c <HAL_I2C_Master_Transmit+0x1e0>)
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f001 f8f2 	bl	80026c8 <I2C_TransferConfig>
 80014e4:	e06c      	b.n	80015c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	8979      	ldrh	r1, [r7, #10]
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <HAL_I2C_Master_Transmit+0x1e0>)
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f001 f8e1 	bl	80026c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001506:	e05b      	b.n	80015c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	6a39      	ldr	r1, [r7, #32]
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 fef8 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e07b      	b.n	8001614 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001536:	b29b      	uxth	r3, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001544:	3b01      	subs	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29b      	uxth	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d034      	beq.n	80015c0 <HAL_I2C_Master_Transmit+0x184>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155a:	2b00      	cmp	r3, #0
 800155c:	d130      	bne.n	80015c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	2200      	movs	r2, #0
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fe8a 	bl	8002282 <I2C_WaitOnFlagUntilTimeout>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e04d      	b.n	8001614 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d90e      	bls.n	80015a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	22ff      	movs	r2, #255	; 0xff
 8001586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	b2da      	uxtb	r2, r3
 800158e:	8979      	ldrh	r1, [r7, #10]
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f001 f895 	bl	80026c8 <I2C_TransferConfig>
 800159e:	e00f      	b.n	80015c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	8979      	ldrh	r1, [r7, #10]
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f001 f884 	bl	80026c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d19e      	bne.n	8001508 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	6a39      	ldr	r1, [r7, #32]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 fed7 	bl	8002382 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e01a      	b.n	8001614 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2220      	movs	r2, #32
 80015e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_I2C_Master_Transmit+0x1e4>)
 80015f2:	400b      	ands	r3, r1
 80015f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2220      	movs	r2, #32
 80015fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001612:	2302      	movs	r3, #2
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	80002000 	.word	0x80002000
 8001620:	fe00e800 	.word	0xfe00e800

08001624 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	461a      	mov	r2, r3
 8001630:	460b      	mov	r3, r1
 8001632:	817b      	strh	r3, [r7, #10]
 8001634:	4613      	mov	r3, r2
 8001636:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b20      	cmp	r3, #32
 8001642:	f040 80db 	bne.w	80017fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_I2C_Master_Receive+0x30>
 8001650:	2302      	movs	r3, #2
 8001652:	e0d4      	b.n	80017fe <HAL_I2C_Master_Receive+0x1da>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800165c:	f7ff fb4c 	bl	8000cf8 <HAL_GetTick>
 8001660:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2319      	movs	r3, #25
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fe07 	bl	8002282 <I2C_WaitOnFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0bf      	b.n	80017fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2222      	movs	r2, #34	; 0x22
 8001682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2210      	movs	r2, #16
 800168a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	893a      	ldrh	r2, [r7, #8]
 800169e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2bff      	cmp	r3, #255	; 0xff
 80016ae:	d90e      	bls.n	80016ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	22ff      	movs	r2, #255	; 0xff
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	8979      	ldrh	r1, [r7, #10]
 80016be:	4b52      	ldr	r3, [pc, #328]	; (8001808 <HAL_I2C_Master_Receive+0x1e4>)
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fffe 	bl	80026c8 <I2C_TransferConfig>
 80016cc:	e06d      	b.n	80017aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	8979      	ldrh	r1, [r7, #10]
 80016e0:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_I2C_Master_Receive+0x1e4>)
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 ffed 	bl	80026c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80016ee:	e05c      	b.n	80017aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	6a39      	ldr	r1, [r7, #32]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 fe81 	bl	80023fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e07c      	b.n	80017fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	3b01      	subs	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172c:	b29b      	uxth	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d034      	beq.n	80017aa <HAL_I2C_Master_Receive+0x186>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d130      	bne.n	80017aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	2200      	movs	r2, #0
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fd95 	bl	8002282 <I2C_WaitOnFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e04d      	b.n	80017fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	2bff      	cmp	r3, #255	; 0xff
 800176a:	d90e      	bls.n	800178a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	22ff      	movs	r2, #255	; 0xff
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	b2da      	uxtb	r2, r3
 8001778:	8979      	ldrh	r1, [r7, #10]
 800177a:	2300      	movs	r3, #0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 ffa0 	bl	80026c8 <I2C_TransferConfig>
 8001788:	e00f      	b.n	80017aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	b2da      	uxtb	r2, r3
 800179a:	8979      	ldrh	r1, [r7, #10]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 ff8f 	bl	80026c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d19d      	bne.n	80016f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	6a39      	ldr	r1, [r7, #32]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 fde2 	bl	8002382 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e01a      	b.n	80017fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2220      	movs	r2, #32
 80017ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6859      	ldr	r1, [r3, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_I2C_Master_Receive+0x1e8>)
 80017dc:	400b      	ands	r3, r1
 80017de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e000      	b.n	80017fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80017fc:	2302      	movs	r3, #2
  }
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	80002400 	.word	0x80002400
 800180c:	fe00e800 	.word	0xfe00e800

08001810 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	68f9      	ldr	r1, [r7, #12]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
  }
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d010      	beq.n	800188a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	09db      	lsrs	r3, r3, #7
 800186c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00a      	beq.n	800188a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001888:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	0a9b      	lsrs	r3, r3, #10
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	09db      	lsrs	r3, r3, #7
 800189a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f043 0208 	orr.w	r2, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	0a5b      	lsrs	r3, r3, #9
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d010      	beq.n	80018e6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	09db      	lsrs	r3, r3, #7
 80018c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0202 	orr.w	r2, r3, #2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 030b 	and.w	r3, r3, #11
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80018f6:	68f9      	ldr	r1, [r7, #12]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fb89 	bl	8002010 <I2C_ITError>
  }
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	4613      	mov	r3, r2
 800193c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <I2C_Slave_ISR_IT+0x24>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0ec      	b.n	8001b84 <I2C_Slave_ISR_IT+0x1fe>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	095b      	lsrs	r3, r3, #5
 80019c2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80019ca:	6939      	ldr	r1, [r7, #16]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f9bf 	bl	8001d50 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d04d      	beq.n	8001a7a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d047      	beq.n	8001a7a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d128      	bne.n	8001a46 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b28      	cmp	r3, #40	; 0x28
 80019fe:	d108      	bne.n	8001a12 <I2C_Slave_ISR_IT+0x8c>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a06:	d104      	bne.n	8001a12 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a08:	6939      	ldr	r1, [r7, #16]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 faaa 	bl	8001f64 <I2C_ITListenCplt>
 8001a10:	e032      	b.n	8001a78 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b29      	cmp	r3, #41	; 0x29
 8001a1c:	d10e      	bne.n	8001a3c <I2C_Slave_ISR_IT+0xb6>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a24:	d00a      	beq.n	8001a3c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fbe5 	bl	80021fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 f92d 	bl	8001c94 <I2C_ITSlaveSeqCplt>
 8001a3a:	e01d      	b.n	8001a78 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2210      	movs	r2, #16
 8001a42:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a44:	e096      	b.n	8001b74 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f043 0204 	orr.w	r2, r3, #4
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <I2C_Slave_ISR_IT+0xe4>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a66:	f040 8085 	bne.w	8001b74 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4619      	mov	r1, r3
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 facd 	bl	8002010 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a76:	e07d      	b.n	8001b74 <I2C_Slave_ISR_IT+0x1ee>
 8001a78:	e07c      	b.n	8001b74 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d030      	beq.n	8001ae8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d02a      	beq.n	8001ae8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d018      	beq.n	8001ace <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d14f      	bne.n	8001b78 <I2C_Slave_ISR_IT+0x1f2>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ade:	d04b      	beq.n	8001b78 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f8d7 	bl	8001c94 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001ae6:	e047      	b.n	8001b78 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	08db      	lsrs	r3, r3, #3
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b00:	6939      	ldr	r1, [r7, #16]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f842 	bl	8001b8c <I2C_ITAddrCplt>
 8001b08:	e037      	b.n	8001b7a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d031      	beq.n	8001b7a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d02b      	beq.n	8001b7a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d018      	beq.n	8001b5e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b5c:	e00d      	b.n	8001b7a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d002      	beq.n	8001b6c <I2C_Slave_ISR_IT+0x1e6>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d106      	bne.n	8001b7a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f891 	bl	8001c94 <I2C_ITSlaveSeqCplt>
 8001b72:	e002      	b.n	8001b7a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001b74:	bf00      	nop
 8001b76:	e000      	b.n	8001b7a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001b78:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ba2:	2b28      	cmp	r3, #40	; 0x28
 8001ba4:	d16a      	bne.n	8001c7c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001bc4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001be0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d138      	bne.n	8001c5c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001bea:	897b      	ldrh	r3, [r7, #10]
 8001bec:	09db      	lsrs	r3, r3, #7
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	89bb      	ldrh	r3, [r7, #12]
 8001bf2:	4053      	eors	r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f003 0306 	and.w	r3, r3, #6
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d11c      	bne.n	8001c38 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001bfe:	897b      	ldrh	r3, [r7, #10]
 8001c00:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d13b      	bne.n	8001c8c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2208      	movs	r2, #8
 8001c20:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c2a:	89ba      	ldrh	r2, [r7, #12]
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fe7c 	bl	800192e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001c36:	e029      	b.n	8001c8c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001c38:	893b      	ldrh	r3, [r7, #8]
 8001c3a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fd73 	bl	800272c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c4e:	89ba      	ldrh	r2, [r7, #12]
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fe6a 	bl	800192e <HAL_I2C_AddrCallback>
}
 8001c5a:	e017      	b.n	8001c8c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fd63 	bl	800272c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c6e:	89ba      	ldrh	r2, [r7, #12]
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fe5a 	bl	800192e <HAL_I2C_AddrCallback>
}
 8001c7a:	e007      	b.n	8001c8c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2208      	movs	r2, #8
 8001c82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	0b9b      	lsrs	r3, r3, #14
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e00d      	b.n	8001ce6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0bdb      	lsrs	r3, r3, #15
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b29      	cmp	r3, #41	; 0x29
 8001cf0:	d112      	bne.n	8001d18 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2228      	movs	r2, #40	; 0x28
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2221      	movs	r2, #33	; 0x21
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d00:	2101      	movs	r1, #1
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fd12 	bl	800272c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fdf8 	bl	8001906 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d16:	e017      	b.n	8001d48 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b2a      	cmp	r3, #42	; 0x2a
 8001d22:	d111      	bne.n	8001d48 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2228      	movs	r2, #40	; 0x28
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2222      	movs	r2, #34	; 0x22
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d32:	2102      	movs	r1, #2
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fcf9 	bl	800272c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fde9 	bl	800191a <HAL_I2C_SlaveRxCpltCallback>
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2220      	movs	r2, #32
 8001d74:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b21      	cmp	r3, #33	; 0x21
 8001d7a:	d002      	beq.n	8001d82 <I2C_ITSlaveCplt+0x32>
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	2b29      	cmp	r3, #41	; 0x29
 8001d80:	d108      	bne.n	8001d94 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001d82:	f248 0101 	movw	r1, #32769	; 0x8001
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fcd0 	bl	800272c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2221      	movs	r2, #33	; 0x21
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
 8001d92:	e00d      	b.n	8001db0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b22      	cmp	r3, #34	; 0x22
 8001d98:	d002      	beq.n	8001da0 <I2C_ITSlaveCplt+0x50>
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d9e:	d107      	bne.n	8001db0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001da0:	f248 0102 	movw	r1, #32770	; 0x8002
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fcc1 	bl	800272c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2222      	movs	r2, #34	; 0x22
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dbe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6859      	ldr	r1, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b64      	ldr	r3, [pc, #400]	; (8001f5c <I2C_ITSlaveCplt+0x20c>)
 8001dcc:	400b      	ands	r3, r1
 8001dce:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fa14 	bl	80021fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	0b9b      	lsrs	r3, r3, #14
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d013      	beq.n	8001e0a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001df0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d020      	beq.n	8001e3c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e08:	e018      	b.n	8001e3c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	0bdb      	lsrs	r3, r3, #15
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00c      	beq.n	8001e8a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4619      	mov	r1, r3
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f8a7 	bl	8002010 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b28      	cmp	r3, #40	; 0x28
 8001ecc:	d141      	bne.n	8001f52 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ece:	6979      	ldr	r1, [r7, #20]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f847 	bl	8001f64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ed6:	e03c      	b.n	8001f52 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ee0:	d014      	beq.n	8001f0c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fed6 	bl	8001c94 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <I2C_ITSlaveCplt+0x210>)
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fd20 	bl	800194a <HAL_I2C_ListenCpltCallback>
}
 8001f0a:	e022      	b.n	8001f52 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b22      	cmp	r3, #34	; 0x22
 8001f16:	d10e      	bne.n	8001f36 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fcf3 	bl	800191a <HAL_I2C_SlaveRxCpltCallback>
}
 8001f34:	e00d      	b.n	8001f52 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fcda 	bl	8001906 <HAL_I2C_SlaveTxCpltCallback>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	fe00e800 	.word	0xfe00e800
 8001f60:	ffff0000 	.word	0xffff0000

08001f64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <I2C_ITListenCplt+0xa8>)
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d022      	beq.n	8001fe2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f043 0204 	orr.w	r2, r3, #4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fe2:	f248 0103 	movw	r1, #32771	; 0x8003
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fba0 	bl	800272c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fca4 	bl	800194a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	ffff0000 	.word	0xffff0000

08002010 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <I2C_ITError+0x194>)
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b28      	cmp	r3, #40	; 0x28
 8002046:	d005      	beq.n	8002054 <I2C_ITError+0x44>
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b29      	cmp	r3, #41	; 0x29
 800204c:	d002      	beq.n	8002054 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b2a      	cmp	r3, #42	; 0x2a
 8002052:	d10b      	bne.n	800206c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002054:	2103      	movs	r1, #3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fb68 	bl	800272c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2228      	movs	r2, #40	; 0x28
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <I2C_ITError+0x198>)
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
 800206a:	e011      	b.n	8002090 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800206c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fb5b 	bl	800272c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b60      	cmp	r3, #96	; 0x60
 8002080:	d003      	beq.n	800208a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	2b00      	cmp	r3, #0
 800209c:	d039      	beq.n	8002112 <I2C_ITError+0x102>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b11      	cmp	r3, #17
 80020a2:	d002      	beq.n	80020aa <I2C_ITError+0x9a>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b21      	cmp	r3, #33	; 0x21
 80020a8:	d133      	bne.n	8002112 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020b8:	d107      	bne.n	80020ca <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe ff94 	bl	8000ffc <HAL_DMA_GetState>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d017      	beq.n	800210a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	4a33      	ldr	r2, [pc, #204]	; (80021ac <I2C_ITError+0x19c>)
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe ff43 	bl	8000f7a <HAL_DMA_Abort_IT>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04d      	beq.n	8002196 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002104:	4610      	mov	r0, r2
 8002106:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002108:	e045      	b.n	8002196 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f850 	bl	80021b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002110:	e041      	b.n	8002196 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d039      	beq.n	800218e <I2C_ITError+0x17e>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b12      	cmp	r3, #18
 800211e:	d002      	beq.n	8002126 <I2C_ITError+0x116>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b22      	cmp	r3, #34	; 0x22
 8002124:	d133      	bne.n	800218e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002134:	d107      	bne.n	8002146 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002144:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe ff56 	bl	8000ffc <HAL_DMA_GetState>
 8002150:	4603      	mov	r3, r0
 8002152:	2b01      	cmp	r3, #1
 8002154:	d017      	beq.n	8002186 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	4a14      	ldr	r2, [pc, #80]	; (80021ac <I2C_ITError+0x19c>)
 800215c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe ff05 	bl	8000f7a <HAL_DMA_Abort_IT>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d011      	beq.n	800219a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002180:	4610      	mov	r0, r2
 8002182:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002184:	e009      	b.n	800219a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f812 	bl	80021b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800218c:	e005      	b.n	800219a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f80e 	bl	80021b0 <I2C_TreatErrorCallback>
  }
}
 8002194:	e002      	b.n	800219c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002196:	bf00      	nop
 8002198:	e000      	b.n	800219c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800219a:	bf00      	nop
}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	ffff0000 	.word	0xffff0000
 80021a8:	08001987 	.word	0x08001987
 80021ac:	08002247 	.word	0x08002247

080021b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b60      	cmp	r3, #96	; 0x60
 80021c2:	d10e      	bne.n	80021e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fbc9 	bl	8001972 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021e0:	e009      	b.n	80021f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fbb4 	bl	800195e <HAL_I2C_ErrorCallback>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b02      	cmp	r3, #2
 8002212:	d103      	bne.n	800221c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d007      	beq.n	800223a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	619a      	str	r2, [r3, #24]
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	2200      	movs	r2, #0
 8002262:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	2200      	movs	r2, #0
 8002272:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ff9b 	bl	80021b0 <I2C_TreatErrorCallback>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4613      	mov	r3, r2
 8002290:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002292:	e022      	b.n	80022da <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d01e      	beq.n	80022da <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229c:	f7fe fd2c 	bl	8000cf8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d302      	bcc.n	80022b2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d113      	bne.n	80022da <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f043 0220 	orr.w	r2, r3, #32
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4013      	ands	r3, r2
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d0cd      	beq.n	8002294 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800230e:	e02c      	b.n	800236a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f8eb 	bl	80024f0 <I2C_IsErrorOccurred>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e02a      	b.n	800237a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d01e      	beq.n	800236a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232c:	f7fe fce4 	bl	8000cf8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d302      	bcc.n	8002342 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d113      	bne.n	800236a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d1cb      	bne.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800238e:	e028      	b.n	80023e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f8ab 	bl	80024f0 <I2C_IsErrorOccurred>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e026      	b.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a4:	f7fe fca8 	bl	8000cf8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d302      	bcc.n	80023ba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d113      	bne.n	80023e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f043 0220 	orr.w	r2, r3, #32
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d1cf      	bne.n	8002390 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002408:	e064      	b.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f86e 	bl	80024f0 <I2C_IsErrorOccurred>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e062      	b.n	80024e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	d138      	bne.n	800249e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d105      	bne.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e04e      	b.n	80024e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b10      	cmp	r3, #16
 8002452:	d107      	bne.n	8002464 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2210      	movs	r2, #16
 800245a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2204      	movs	r2, #4
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
 8002462:	e002      	b.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2220      	movs	r2, #32
 8002470:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800247e:	400b      	ands	r3, r1
 8002480:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e022      	b.n	80024e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7fe fc2b 	bl	8000cf8 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10f      	bne.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e007      	b.n	80024e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d193      	bne.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	fe00e800 	.word	0xfe00e800

080024f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d075      	beq.n	8002608 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2210      	movs	r2, #16
 8002522:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002524:	e056      	b.n	80025d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d052      	beq.n	80025d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7fe fbe3 	bl	8000cf8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_IsErrorOccurred+0x54>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d147      	bne.n	80025d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002556:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002566:	d12e      	bne.n	80025c6 <I2C_IsErrorOccurred+0xd6>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800256e:	d02a      	beq.n	80025c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b20      	cmp	r3, #32
 8002574:	d027      	beq.n	80025c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002584:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002586:	f7fe fbb7 	bl	8000cf8 <HAL_GetTick>
 800258a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800258c:	e01b      	b.n	80025c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800258e:	f7fe fbb3 	bl	8000cf8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b19      	cmp	r3, #25
 800259a:	d914      	bls.n	80025c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d1dc      	bne.n	800258e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d003      	beq.n	80025ea <I2C_IsErrorOccurred+0xfa>
 80025e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d09d      	beq.n	8002526 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2220      	movs	r2, #32
 80025f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00b      	beq.n	8002654 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800264c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01c      	beq.n	80026b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff fdbd 	bl	80021fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <I2C_IsErrorOccurred+0x1d4>)
 8002690:	400b      	ands	r3, r1
 8002692:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	431a      	orrs	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	fe00e800 	.word	0xfe00e800

080026c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	817b      	strh	r3, [r7, #10]
 80026d6:	4613      	mov	r3, r2
 80026d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026da:	897b      	ldrh	r3, [r7, #10]
 80026dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026e0:	7a7b      	ldrb	r3, [r7, #9]
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	0d5b      	lsrs	r3, r3, #21
 8002702:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <I2C_TransferConfig+0x60>)
 8002708:	430b      	orrs	r3, r1
 800270a:	43db      	mvns	r3, r3
 800270c:	ea02 0103 	and.w	r1, r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	03ff63ff 	.word	0x03ff63ff

0800272c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00f      	beq.n	8002766 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800274c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800275a:	2b28      	cmp	r3, #40	; 0x28
 800275c:	d003      	beq.n	8002766 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002764:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00f      	beq.n	8002790 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002776:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002784:	2b28      	cmp	r3, #40	; 0x28
 8002786:	d003      	beq.n	8002790 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800278e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002790:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002794:	2b00      	cmp	r3, #0
 8002796:	da03      	bge.n	80027a0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800279e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d103      	bne.n	80027ae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d103      	bne.n	80027bc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d103      	bne.n	80027ca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43da      	mvns	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d138      	bne.n	8002870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002808:	2302      	movs	r3, #2
 800280a:	e032      	b.n	8002872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2224      	movs	r2, #36	; 0x24
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800283a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	d139      	bne.n	8002908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800289e:	2302      	movs	r3, #2
 80028a0:	e033      	b.n	800290a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2224      	movs	r2, #36	; 0x24
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40007000 	.word	0x40007000

08002938 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_PWREx_GetVoltageRange+0x18>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002962:	d130      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800296c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002970:	d038      	beq.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2232      	movs	r2, #50	; 0x32
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9b      	lsrs	r3, r3, #18
 8002994:	3301      	adds	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002998:	e002      	b.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3b01      	subs	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d102      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f2      	bne.n	800299a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d110      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e00f      	b.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d2:	d007      	beq.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40007000 	.word	0x40007000
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 bc02 	b.w	8003218 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a14:	4b96      	ldr	r3, [pc, #600]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a1e:	4b94      	ldr	r3, [pc, #592]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80e4 	beq.w	8002bfe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4c>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	f040 808b 	bne.w	8002b5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 8087 	bne.w	8002b5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x64>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e3d9      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_RCC_OscConfig+0x7e>
 8002a74:	4b7e      	ldr	r3, [pc, #504]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7c:	e005      	b.n	8002a8a <HAL_RCC_OscConfig+0x8a>
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d223      	bcs.n	8002ad6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fd8c 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e3ba      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa2:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a72      	ldr	r2, [pc, #456]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	496d      	ldr	r1, [pc, #436]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac0:	4b6b      	ldr	r3, [pc, #428]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	4968      	ldr	r1, [pc, #416]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
 8002ad4:	e025      	b.n	8002b22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad6:	4b66      	ldr	r3, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4960      	ldr	r1, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af4:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	495b      	ldr	r1, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fd4c 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e37a      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b22:	f000 fc81 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b51      	ldr	r3, [pc, #324]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	4950      	ldr	r1, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x274>)
 8002b34:	5ccb      	ldrb	r3, [r1, r3]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	4a4e      	ldr	r2, [pc, #312]	; (8002c78 <HAL_RCC_OscConfig+0x278>)
 8002b40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b42:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <HAL_RCC_OscConfig+0x27c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe f886 	bl	8000c58 <HAL_InitTick>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d052      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	e35e      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d032      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b62:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a42      	ldr	r2, [pc, #264]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f8c3 	bl	8000cf8 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b76:	f7fe f8bf 	bl	8000cf8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e347      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a35      	ldr	r2, [pc, #212]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4930      	ldr	r1, [pc, #192]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	492b      	ldr	r1, [pc, #172]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
 8002bc6:	e01a      	b.n	8002bfe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f890 	bl	8000cf8 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bdc:	f7fe f88c 	bl	8000cf8 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e314      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1dc>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d073      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x21c>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d10e      	bne.n	8002c34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d10b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d063      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d15f      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e2f1      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x24c>
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e025      	b.n	8002c98 <HAL_RCC_OscConfig+0x298>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c54:	d114      	bne.n	8002c80 <HAL_RCC_OscConfig+0x280>
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_RCC_OscConfig+0x270>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e013      	b.n	8002c98 <HAL_RCC_OscConfig+0x298>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	080091dc 	.word	0x080091dc
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a9f      	ldr	r2, [pc, #636]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b9d      	ldr	r3, [pc, #628]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a9c      	ldr	r2, [pc, #624]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe f82a 	bl	8000cf8 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe f826 	bl	8000cf8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e2ae      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cba:	4b92      	ldr	r3, [pc, #584]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f816 	bl	8000cf8 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe f812 	bl	8000cf8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e29a      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2d0>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d060      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x310>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d116      	bne.n	8002d3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d10:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x328>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e277      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	4973      	ldr	r1, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3c:	e040      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d023      	beq.n	8002d8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6e      	ldr	r2, [pc, #440]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7fd ffd1 	bl	8000cf8 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7fd ffcd 	bl	8000cf8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e255      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6c:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	495f      	ldr	r1, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
 8002d8c:	e018      	b.n	8002dc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b5d      	ldr	r3, [pc, #372]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a5c      	ldr	r2, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fd ffad 	bl	8000cf8 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fd ffa9 	bl	8000cf8 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e231      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db4:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d03c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fd ff88 	bl	8000cf8 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fd ff84 	bl	8000cf8 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e20c      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ef      	beq.n	8002dec <HAL_RCC_OscConfig+0x3ec>
 8002e0c:	e01b      	b.n	8002e46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fd ff6b 	bl	8000cf8 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fd ff67 	bl	8000cf8 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1ef      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e38:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ef      	bne.n	8002e26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80a6 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10d      	bne.n	8002e80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d118      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e98:	f7fd ff2e 	bl	8000cf8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7fd ff2a 	bl	8000cf8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1b2      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_RCC_OscConfig+0x508>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4d8>
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed6:	e029      	b.n	8002f2c <HAL_RCC_OscConfig+0x52c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d115      	bne.n	8002f0c <HAL_RCC_OscConfig+0x50c>
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x52c>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	4b9a      	ldr	r3, [pc, #616]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	4a99      	ldr	r2, [pc, #612]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f1c:	4b96      	ldr	r3, [pc, #600]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a95      	ldr	r2, [pc, #596]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fd fee0 	bl	8000cf8 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3c:	f7fd fedc 	bl	8000cf8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e162      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f52:	4b89      	ldr	r3, [pc, #548]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ed      	beq.n	8002f3c <HAL_RCC_OscConfig+0x53c>
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fd fec9 	bl	8000cf8 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fd fec5 	bl	8000cf8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e14b      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f80:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ed      	bne.n	8002f6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f94:	4b78      	ldr	r3, [pc, #480]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f98:	4a77      	ldr	r2, [pc, #476]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d03c      	beq.n	8003026 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01c      	beq.n	8002fee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fb4:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fba:	4a6f      	ldr	r2, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fd fe98 	bl	8000cf8 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fcc:	f7fd fe94 	bl	8000cf8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e11c      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fde:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ef      	beq.n	8002fcc <HAL_RCC_OscConfig+0x5cc>
 8002fec:	e01b      	b.n	8003026 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fee:	4b62      	ldr	r3, [pc, #392]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff4:	4a60      	ldr	r2, [pc, #384]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fd fe7b 	bl	8000cf8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003006:	f7fd fe77 	bl	8000cf8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0ff      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003018:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 800301a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ef      	bne.n	8003006 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80f3 	beq.w	8003216 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	2b02      	cmp	r3, #2
 8003036:	f040 80c9 	bne.w	80031cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0203 	and.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	429a      	cmp	r2, r3
 800304c:	d12c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	3b01      	subs	r3, #1
 800305a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d123      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d11b      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d113      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d109      	bne.n	80030a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	3b01      	subs	r3, #1
 80030a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d06b      	beq.n	8003180 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d062      	beq.n	8003174 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ae:	4b32      	ldr	r3, [pc, #200]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0ac      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 80030c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030ca:	f7fd fe15 	bl	8000cf8 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fd fe11 	bl	8000cf8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e099      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e4:	4b24      	ldr	r3, [pc, #144]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_OscConfig+0x77c>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003100:	3a01      	subs	r2, #1
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800310a:	0212      	lsls	r2, r2, #8
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003112:	0852      	lsrs	r2, r2, #1
 8003114:	3a01      	subs	r2, #1
 8003116:	0552      	lsls	r2, r2, #21
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800311e:	0852      	lsrs	r2, r2, #1
 8003120:	3a01      	subs	r2, #1
 8003122:	0652      	lsls	r2, r2, #25
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800312a:	06d2      	lsls	r2, r2, #27
 800312c:	430a      	orrs	r2, r1
 800312e:	4912      	ldr	r1, [pc, #72]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8003130:	4313      	orrs	r3, r2
 8003132:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 800313a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800314c:	f7fd fdd4 	bl	8000cf8 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fd fdd0 	bl	8000cf8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e058      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <HAL_RCC_OscConfig+0x778>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003172:	e050      	b.n	8003216 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e04f      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
 8003178:	40021000 	.word	0x40021000
 800317c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d144      	bne.n	8003216 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a23      	ldr	r2, [pc, #140]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 8003192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003196:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a4:	f7fd fda8 	bl	8000cf8 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd fda4 	bl	8000cf8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e02c      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x7ac>
 80031ca:	e024      	b.n	8003216 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d01f      	beq.n	8003212 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 80031d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fd fd8b 	bl	8000cf8 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fd fd87 	bl	8000cf8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e00f      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	4905      	ldr	r1, [pc, #20]	; (8003220 <HAL_RCC_OscConfig+0x820>)
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_RCC_OscConfig+0x824>)
 800320c:	4013      	ands	r3, r2
 800320e:	60cb      	str	r3, [r1, #12]
 8003210:	e001      	b.n	8003216 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	feeefffc 	.word	0xfeeefffc

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0e7      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b75      	ldr	r3, [pc, #468]	; (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d910      	bls.n	800326c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b72      	ldr	r3, [pc, #456]	; (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4970      	ldr	r1, [pc, #448]	; (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b6e      	ldr	r3, [pc, #440]	; (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cf      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	429a      	cmp	r2, r3
 8003286:	d908      	bls.n	800329a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4960      	ldr	r1, [pc, #384]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d04c      	beq.n	8003340 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ae:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d121      	bne.n	80032fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0a6      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c6:	4b54      	ldr	r3, [pc, #336]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d115      	bne.n	80032fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e09a      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032de:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e08e      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ee:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e086      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4943      	ldr	r1, [pc, #268]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003310:	f7fd fcf2 	bl	8000cf8 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fd fcee 	bl	8000cf8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e06e      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b3a      	ldr	r3, [pc, #232]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003358:	429a      	cmp	r2, r3
 800335a:	d208      	bcs.n	800336e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	492b      	ldr	r1, [pc, #172]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336e:	4b29      	ldr	r3, [pc, #164]	; (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d210      	bcs.n	800339e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 0207 	bic.w	r2, r3, #7
 8003384:	4923      	ldr	r1, [pc, #140]	; (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <HAL_RCC_ClockConfig+0x1ec>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d001      	beq.n	800339e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e036      	b.n	800340c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4918      	ldr	r1, [pc, #96]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4910      	ldr	r1, [pc, #64]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033dc:	f000 f824 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	490b      	ldr	r1, [pc, #44]	; (800341c <HAL_RCC_ClockConfig+0x1f4>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80033fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1fc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fc29 	bl	8000c58 <HAL_InitTick>
 8003406:	4603      	mov	r3, r0
 8003408:	72fb      	strb	r3, [r7, #11]

  return status;
 800340a:	7afb      	ldrb	r3, [r7, #11]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
 800341c:	080091dc 	.word	0x080091dc
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003436:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003440:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d121      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d11e      	bne.n	800349a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800345c:	4b34      	ldr	r3, [pc, #208]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e005      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003484:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <HAL_RCC_GetSysClockFreq+0x110>)
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	e004      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <HAL_RCC_GetSysClockFreq+0x114>)
 80034ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d134      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0xa6>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d003      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xac>
 80034cc:	e005      	b.n	80034da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <HAL_RCC_GetSysClockFreq+0x110>)
 80034d0:	617b      	str	r3, [r7, #20]
      break;
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_RCC_GetSysClockFreq+0x114>)
 80034d6:	617b      	str	r3, [r7, #20]
      break;
 80034d8:	e002      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	617b      	str	r3, [r7, #20]
      break;
 80034de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	3301      	adds	r3, #1
 80034ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	fb03 f202 	mul.w	r2, r3, r2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_RCC_GetSysClockFreq+0x108>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	0e5b      	lsrs	r3, r3, #25
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	3301      	adds	r3, #1
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003520:	69bb      	ldr	r3, [r7, #24]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3724      	adds	r7, #36	; 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	080091f4 	.word	0x080091f4
 8003538:	00f42400 	.word	0x00f42400
 800353c:	007a1200 	.word	0x007a1200

08003540 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <HAL_RCC_GetHCLKFreq+0x14>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000000 	.word	0x20000000

08003558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800355c:	f7ff fff0 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4904      	ldr	r1, [pc, #16]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x28>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	080091ec 	.word	0x080091ec

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003588:	f7ff ffda 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0adb      	lsrs	r3, r3, #11
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4904      	ldr	r1, [pc, #16]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	080091ec 	.word	0x080091ec

080035b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035c8:	f7ff f9b6 	bl	8002938 <HAL_PWREx_GetVoltageRange>
 80035cc:	6178      	str	r0, [r7, #20]
 80035ce:	e014      	b.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a24      	ldr	r2, [pc, #144]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035e8:	f7ff f9a6 	bl	8002938 <HAL_PWREx_GetVoltageRange>
 80035ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d10b      	bne.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d919      	bls.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2ba0      	cmp	r3, #160	; 0xa0
 800360c:	d902      	bls.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800360e:	2302      	movs	r3, #2
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e013      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003614:	2301      	movs	r3, #1
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e010      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	d902      	bls.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003620:	2303      	movs	r3, #3
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	e00a      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d102      	bne.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800362c:	2302      	movs	r3, #2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e004      	b.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b70      	cmp	r3, #112	; 0x70
 8003636:	d101      	bne.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003638:	2301      	movs	r3, #1
 800363a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 0207 	bic.w	r2, r3, #7
 8003644:	4909      	ldr	r1, [pc, #36]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367c:	2300      	movs	r3, #0
 800367e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	d031      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003694:	d01a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003696:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800369a:	d814      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a4:	d10f      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80036a6:	4b5d      	ldr	r3, [pc, #372]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	4a5c      	ldr	r2, [pc, #368]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036b2:	e00c      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f9de 	bl	8003a7c <RCCEx_PLLSAI1_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036c4:	e003      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ca:	e000      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80036cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036d4:	4b51      	ldr	r3, [pc, #324]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	494e      	ldr	r1, [pc, #312]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ea:	e001      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 809e 	beq.w	800383a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003702:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00d      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b40      	ldr	r3, [pc, #256]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	4a3f      	ldr	r2, [pc, #252]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	6593      	str	r3, [r2, #88]	; 0x58
 8003724:	4b3d      	ldr	r3, [pc, #244]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003730:	2301      	movs	r3, #1
 8003732:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003734:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a39      	ldr	r2, [pc, #228]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003740:	f7fd fada 	bl	8000cf8 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003746:	e009      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7fd fad6 	bl	8000cf8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d902      	bls.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	74fb      	strb	r3, [r7, #19]
        break;
 800375a:	e005      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800375c:	4b30      	ldr	r3, [pc, #192]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ef      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d15a      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800376e:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003778:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01e      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	429a      	cmp	r2, r3
 8003788:	d019      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003794:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003796:	4b21      	ldr	r3, [pc, #132]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037b6:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d016      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fd fa96 	bl	8000cf8 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	e00b      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fd fa92 	bl	8000cf8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d902      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	74fb      	strb	r3, [r7, #19]
            break;
 80037e6:	e006      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ec      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380a:	4904      	ldr	r1, [pc, #16]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003812:	e009      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	74bb      	strb	r3, [r7, #18]
 8003818:	e006      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003828:	7c7b      	ldrb	r3, [r7, #17]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b8a      	ldr	r3, [pc, #552]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	4a89      	ldr	r2, [pc, #548]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003846:	4b84      	ldr	r3, [pc, #528]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f023 0203 	bic.w	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4980      	ldr	r1, [pc, #512]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003868:	4b7b      	ldr	r3, [pc, #492]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f023 020c 	bic.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	4978      	ldr	r1, [pc, #480]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800388a:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	496f      	ldr	r1, [pc, #444]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ac:	4b6a      	ldr	r3, [pc, #424]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	4967      	ldr	r1, [pc, #412]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ce:	4b62      	ldr	r3, [pc, #392]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	495e      	ldr	r1, [pc, #376]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	4956      	ldr	r1, [pc, #344]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003912:	4b51      	ldr	r3, [pc, #324]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	494d      	ldr	r1, [pc, #308]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d028      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003934:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4945      	ldr	r1, [pc, #276]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003952:	d106      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b40      	ldr	r3, [pc, #256]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a3f      	ldr	r2, [pc, #252]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e011      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396a:	d10c      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f882 	bl	8003a7c <RCCEx_PLLSAI1_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d028      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	492d      	ldr	r1, [pc, #180]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b2:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039bc:	60d3      	str	r3, [r2, #12]
 80039be:	e011      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f853 	bl	8003a7c <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01c      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fe:	4916      	ldr	r1, [pc, #88]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f830 	bl	8003a7c <RCCEx_PLLSAI1_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a44:	4904      	ldr	r1, [pc, #16]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	6013      	str	r3, [r2, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000

08003a7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a8a:	4b74      	ldr	r3, [pc, #464]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a96:	4b71      	ldr	r3, [pc, #452]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0203 	and.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d10d      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003aae:	4b6b      	ldr	r3, [pc, #428]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
       ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d047      	beq.n	8003b52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e044      	b.n	8003b52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d018      	beq.n	8003b02 <RCCEx_PLLSAI1_Config+0x86>
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d825      	bhi.n	8003b20 <RCCEx_PLLSAI1_Config+0xa4>
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d002      	beq.n	8003ade <RCCEx_PLLSAI1_Config+0x62>
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d009      	beq.n	8003af0 <RCCEx_PLLSAI1_Config+0x74>
 8003adc:	e020      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ade:	4b5f      	ldr	r3, [pc, #380]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11d      	bne.n	8003b26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aee:	e01a      	b.n	8003b26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003af0:	4b5a      	ldr	r3, [pc, #360]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d116      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b00:	e013      	b.n	8003b2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b02:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b0e:	4b53      	ldr	r3, [pc, #332]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b1e:	e006      	b.n	8003b2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      break;
 8003b24:	e004      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b26:	bf00      	nop
 8003b28:	e002      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e000      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b36:	4b49      	ldr	r3, [pc, #292]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	4943      	ldr	r1, [pc, #268]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d17c      	bne.n	8003c52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a3f      	ldr	r2, [pc, #252]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b64:	f7fd f8c8 	bl	8000cf8 <HAL_GetTick>
 8003b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b6a:	e009      	b.n	8003b80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b6c:	f7fd f8c4 	bl	8000cf8 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d902      	bls.n	8003b80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b7e:	e005      	b.n	8003b8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b80:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ef      	bne.n	8003b6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d15f      	bne.n	8003c52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d110      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b98:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ba0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6892      	ldr	r2, [r2, #8]
 8003ba8:	0211      	lsls	r1, r2, #8
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	06d2      	lsls	r2, r2, #27
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	492a      	ldr	r1, [pc, #168]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	610b      	str	r3, [r1, #16]
 8003bb8:	e027      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d112      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bc0:	4b26      	ldr	r3, [pc, #152]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6892      	ldr	r2, [r2, #8]
 8003bd0:	0211      	lsls	r1, r2, #8
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6912      	ldr	r2, [r2, #16]
 8003bd6:	0852      	lsrs	r2, r2, #1
 8003bd8:	3a01      	subs	r2, #1
 8003bda:	0552      	lsls	r2, r2, #21
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	491f      	ldr	r1, [pc, #124]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	610b      	str	r3, [r1, #16]
 8003be4:	e011      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6892      	ldr	r2, [r2, #8]
 8003bf6:	0211      	lsls	r1, r2, #8
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6952      	ldr	r2, [r2, #20]
 8003bfc:	0852      	lsrs	r2, r2, #1
 8003bfe:	3a01      	subs	r2, #1
 8003c00:	0652      	lsls	r2, r2, #25
 8003c02:	430a      	orrs	r2, r1
 8003c04:	4915      	ldr	r1, [pc, #84]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fd f86f 	bl	8000cf8 <HAL_GetTick>
 8003c1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c1c:	e009      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c1e:	f7fd f86b 	bl	8000cf8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d902      	bls.n	8003c32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	73fb      	strb	r3, [r7, #15]
          break;
 8003c30:	e005      	b.n	8003c3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0ef      	beq.n	8003c1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	4903      	ldr	r1, [pc, #12]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000

08003c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e040      	b.n	8003cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc feb6 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	; 0x24
 8003c8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8c0 	bl	8003e24 <UART_SetConfig>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e022      	b.n	8003cf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fae0 	bl	800427c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fb67 	bl	80043c0 <UART_CheckIdleState>
 8003cf2:	4603      	mov	r3, r0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	f040 8082 	bne.w	8003e1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_UART_Transmit+0x26>
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07a      	b.n	8003e1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Transmit+0x38>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e073      	b.n	8003e1c <HAL_UART_Transmit+0x120>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2221      	movs	r2, #33	; 0x21
 8003d48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d4a:	f7fc ffd5 	bl	8000cf8 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d68:	d108      	bne.n	8003d7c <HAL_UART_Transmit+0x80>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d104      	bne.n	8003d7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	e003      	b.n	8003d84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d8c:	e02d      	b.n	8003dea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2180      	movs	r1, #128	; 0x80
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fb5a 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e039      	b.n	8003e1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dba:	b292      	uxth	r2, r2
 8003dbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e008      	b.n	8003dd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b292      	uxth	r2, r2
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1cb      	bne.n	8003d8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2140      	movs	r1, #64	; 0x40
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fb26 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e005      	b.n	8003e1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
  }
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e28:	b08a      	sub	sp, #40	; 0x28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4bb4      	ldr	r3, [pc, #720]	; (8004124 <UART_SetConfig+0x300>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4aa9      	ldr	r2, [pc, #676]	; (8004128 <UART_SetConfig+0x304>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4aa0      	ldr	r2, [pc, #640]	; (800412c <UART_SetConfig+0x308>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d126      	bne.n	8003efc <UART_SetConfig+0xd8>
 8003eae:	4ba0      	ldr	r3, [pc, #640]	; (8004130 <UART_SetConfig+0x30c>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d81b      	bhi.n	8003ef4 <UART_SetConfig+0xd0>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0xa0>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ee5 	.word	0x08003ee5
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003eed 	.word	0x08003eed
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e080      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003edc:	2302      	movs	r3, #2
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e07c      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eea:	e078      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003eec:	2308      	movs	r3, #8
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef2:	e074      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efa:	e070      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a8c      	ldr	r2, [pc, #560]	; (8004134 <UART_SetConfig+0x310>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d138      	bne.n	8003f78 <UART_SetConfig+0x154>
 8003f06:	4b8a      	ldr	r3, [pc, #552]	; (8004130 <UART_SetConfig+0x30c>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	d82d      	bhi.n	8003f70 <UART_SetConfig+0x14c>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <UART_SetConfig+0xf8>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f51 	.word	0x08003f51
 8003f20:	08003f71 	.word	0x08003f71
 8003f24:	08003f71 	.word	0x08003f71
 8003f28:	08003f71 	.word	0x08003f71
 8003f2c:	08003f61 	.word	0x08003f61
 8003f30:	08003f71 	.word	0x08003f71
 8003f34:	08003f71 	.word	0x08003f71
 8003f38:	08003f71 	.word	0x08003f71
 8003f3c:	08003f59 	.word	0x08003f59
 8003f40:	08003f71 	.word	0x08003f71
 8003f44:	08003f71 	.word	0x08003f71
 8003f48:	08003f71 	.word	0x08003f71
 8003f4c:	08003f69 	.word	0x08003f69
 8003f50:	2300      	movs	r3, #0
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f56:	e042      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5e:	e03e      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003f60:	2304      	movs	r3, #4
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f66:	e03a      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003f68:	2308      	movs	r3, #8
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6e:	e036      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003f70:	2310      	movs	r3, #16
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f76:	e032      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a6a      	ldr	r2, [pc, #424]	; (8004128 <UART_SetConfig+0x304>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d12a      	bne.n	8003fd8 <UART_SetConfig+0x1b4>
 8003f82:	4b6b      	ldr	r3, [pc, #428]	; (8004130 <UART_SetConfig+0x30c>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f90:	d01a      	beq.n	8003fc8 <UART_SetConfig+0x1a4>
 8003f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f96:	d81b      	bhi.n	8003fd0 <UART_SetConfig+0x1ac>
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9c:	d00c      	beq.n	8003fb8 <UART_SetConfig+0x194>
 8003f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa2:	d815      	bhi.n	8003fd0 <UART_SetConfig+0x1ac>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <UART_SetConfig+0x18c>
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fac:	d008      	beq.n	8003fc0 <UART_SetConfig+0x19c>
 8003fae:	e00f      	b.n	8003fd0 <UART_SetConfig+0x1ac>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb6:	e012      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fbe:	e00e      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e00a      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fce:	e006      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd6:	e002      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a51      	ldr	r2, [pc, #324]	; (8004128 <UART_SetConfig+0x304>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d17a      	bne.n	80040de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d824      	bhi.n	800403a <UART_SetConfig+0x216>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x1d4>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	08004025 	.word	0x08004025
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800402b 	.word	0x0800402b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	0800403b 	.word	0x0800403b
 8004014:	0800403b 	.word	0x0800403b
 8004018:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7ff fa9c 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8004020:	61f8      	str	r0, [r7, #28]
        break;
 8004022:	e010      	b.n	8004046 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b44      	ldr	r3, [pc, #272]	; (8004138 <UART_SetConfig+0x314>)
 8004026:	61fb      	str	r3, [r7, #28]
        break;
 8004028:	e00d      	b.n	8004046 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7ff f9fd 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 800402e:	61f8      	str	r0, [r7, #28]
        break;
 8004030:	e009      	b.n	8004046 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	61fb      	str	r3, [r7, #28]
        break;
 8004038:	e005      	b.n	8004046 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004044:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8107 	beq.w	800425c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	429a      	cmp	r2, r3
 800405c:	d305      	bcc.n	800406a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	429a      	cmp	r2, r3
 8004068:	d903      	bls.n	8004072 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004070:	e0f4      	b.n	800425c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2200      	movs	r2, #0
 8004076:	461c      	mov	r4, r3
 8004078:	4615      	mov	r5, r2
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	022b      	lsls	r3, r5, #8
 8004084:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004088:	0222      	lsls	r2, r4, #8
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	6849      	ldr	r1, [r1, #4]
 800408e:	0849      	lsrs	r1, r1, #1
 8004090:	2000      	movs	r0, #0
 8004092:	4688      	mov	r8, r1
 8004094:	4681      	mov	r9, r0
 8004096:	eb12 0a08 	adds.w	sl, r2, r8
 800409a:	eb43 0b09 	adc.w	fp, r3, r9
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ac:	4650      	mov	r0, sl
 80040ae:	4659      	mov	r1, fp
 80040b0:	f7fc f8e6 	bl	8000280 <__aeabi_uldivmod>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4613      	mov	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c2:	d308      	bcc.n	80040d6 <UART_SetConfig+0x2b2>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ca:	d204      	bcs.n	80040d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	e0c2      	b.n	800425c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040dc:	e0be      	b.n	800425c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e6:	d16a      	bne.n	80041be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80040e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d834      	bhi.n	800415a <UART_SetConfig+0x336>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0x2d4>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	0800413d 	.word	0x0800413d
 8004100:	08004145 	.word	0x08004145
 8004104:	0800415b 	.word	0x0800415b
 8004108:	0800414b 	.word	0x0800414b
 800410c:	0800415b 	.word	0x0800415b
 8004110:	0800415b 	.word	0x0800415b
 8004114:	0800415b 	.word	0x0800415b
 8004118:	08004153 	.word	0x08004153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7ff fa1c 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 8004120:	61f8      	str	r0, [r7, #28]
        break;
 8004122:	e020      	b.n	8004166 <UART_SetConfig+0x342>
 8004124:	efff69f3 	.word	0xefff69f3
 8004128:	40008000 	.word	0x40008000
 800412c:	40013800 	.word	0x40013800
 8004130:	40021000 	.word	0x40021000
 8004134:	40004400 	.word	0x40004400
 8004138:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7ff fa22 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 8004140:	61f8      	str	r0, [r7, #28]
        break;
 8004142:	e010      	b.n	8004166 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004144:	4b4c      	ldr	r3, [pc, #304]	; (8004278 <UART_SetConfig+0x454>)
 8004146:	61fb      	str	r3, [r7, #28]
        break;
 8004148:	e00d      	b.n	8004166 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414a:	f7ff f96d 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 800414e:	61f8      	str	r0, [r7, #28]
        break;
 8004150:	e009      	b.n	8004166 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004156:	61fb      	str	r3, [r7, #28]
        break;
 8004158:	e005      	b.n	8004166 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d077      	beq.n	800425c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	005a      	lsls	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	441a      	add	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b0f      	cmp	r3, #15
 8004186:	d916      	bls.n	80041b6 <UART_SetConfig+0x392>
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d212      	bcs.n	80041b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f023 030f 	bic.w	r3, r3, #15
 8004198:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	8afb      	ldrh	r3, [r7, #22]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	8afa      	ldrh	r2, [r7, #22]
 80041b2:	60da      	str	r2, [r3, #12]
 80041b4:	e052      	b.n	800425c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041bc:	e04e      	b.n	800425c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d827      	bhi.n	8004216 <UART_SetConfig+0x3f2>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x3a8>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004207 	.word	0x08004207
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004217 	.word	0x08004217
 80041e8:	08004217 	.word	0x08004217
 80041ec:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7ff f9b2 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 80041f4:	61f8      	str	r0, [r7, #28]
        break;
 80041f6:	e014      	b.n	8004222 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7ff f9c4 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 80041fc:	61f8      	str	r0, [r7, #28]
        break;
 80041fe:	e010      	b.n	8004222 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <UART_SetConfig+0x454>)
 8004202:	61fb      	str	r3, [r7, #28]
        break;
 8004204:	e00d      	b.n	8004222 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7ff f90f 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 800420a:	61f8      	str	r0, [r7, #28]
        break;
 800420c:	e009      	b.n	8004222 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	61fb      	str	r3, [r7, #28]
        break;
 8004214:	e005      	b.n	8004222 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004220:	bf00      	nop
    }

    if (pclk != 0U)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d019      	beq.n	800425c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	085a      	lsrs	r2, r3, #1
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	441a      	add	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b0f      	cmp	r3, #15
 8004240:	d909      	bls.n	8004256 <UART_SetConfig+0x432>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d205      	bcs.n	8004256 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60da      	str	r2, [r3, #12]
 8004254:	e002      	b.n	800425c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004268:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800426c:	4618      	mov	r0, r3
 800426e:	3728      	adds	r7, #40	; 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004276:	bf00      	nop
 8004278:	00f42400 	.word	0x00f42400

0800427c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01a      	beq.n	8004392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437a:	d10a      	bne.n	8004392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  }
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043d0:	f7fc fc92 	bl	8000cf8 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d10e      	bne.n	8004402 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f82d 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e023      	b.n	800444a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d10e      	bne.n	800442e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f817 	bl	8004452 <UART_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e00d      	b.n	800444a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b09c      	sub	sp, #112	; 0x70
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004462:	e0a5      	b.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	f000 80a1 	beq.w	80045b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446e:	f7fc fc43 	bl	8000cf8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <UART_WaitOnFlagUntilTimeout+0x32>
 800447e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004480:	2b00      	cmp	r3, #0
 8004482:	d13e      	bne.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004498:	667b      	str	r3, [r7, #100]	; 0x64
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e6      	bne.n	8004484 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3308      	adds	r3, #8
 80044bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	663b      	str	r3, [r7, #96]	; 0x60
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3308      	adds	r3, #8
 80044d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80044d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e067      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d04f      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451e:	d147      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004528:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800453e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
 800454a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e6      	bne.n	800452a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	613b      	str	r3, [r7, #16]
   return(result);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	66bb      	str	r3, [r7, #104]	; 0x68
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800457c:	623a      	str	r2, [r7, #32]
 800457e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	69f9      	ldr	r1, [r7, #28]
 8004582:	6a3a      	ldr	r2, [r7, #32]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	61bb      	str	r3, [r7, #24]
   return(result);
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e010      	b.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	f43f af4a 	beq.w	8004464 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3770      	adds	r7, #112	; 0x70
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <TOF_XSHUT_Write>:
#define TOF_PDEV &(TOF_Devices[unit])

extern VL53L0X_Dev_t TOF_Devices[TOF_UNIT_COUNT];

void TOF_XSHUT_Write(TOF_Units_t unit, GPIO_PinState state)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	460a      	mov	r2, r1
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	4613      	mov	r3, r2
 80045ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(TOF_DEV.XSHUT_Port, TOF_DEV.XSHUT_Pin, state);
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	4a0d      	ldr	r2, [pc, #52]	; (8004624 <TOF_XSHUT_Write+0x48>)
 80045f0:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <TOF_XSHUT_Write+0x48>)
 8004604:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	79ba      	ldrb	r2, [r7, #6]
 8004616:	4619      	mov	r1, r3
 8004618:	f7fc fe68 	bl	80012ec <HAL_GPIO_WritePin>
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	2000000c 	.word	0x2000000c

08004628 <TOF_Init_I2C_Adresses>:

TOF_Status_t TOF_Init_I2C_Adresses(uint8_t *detectedDevices)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	uint16_t Id;
	uint8_t FinalAddress;

	TOF_Units_t unit;

	uint8_t deviceCount = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	757b      	strb	r3, [r7, #21]

	// Shutdown every units
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 8004634:	2300      	movs	r3, #0
 8004636:	75bb      	strb	r3, [r7, #22]
 8004638:	e007      	b.n	800464a <TOF_Init_I2C_Adresses+0x22>
		TOF_XSHUT_Write(unit, TOF_XSHUT_RESET);
 800463a:	7dbb      	ldrb	r3, [r7, #22]
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ffcc 	bl	80045dc <TOF_XSHUT_Write>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 8004644:	7dbb      	ldrb	r3, [r7, #22]
 8004646:	3301      	adds	r3, #1
 8004648:	75bb      	strb	r3, [r7, #22]
 800464a:	7dbb      	ldrb	r3, [r7, #22]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d9f4      	bls.n	800463a <TOF_Init_I2C_Adresses+0x12>

	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 8004650:	2300      	movs	r3, #0
 8004652:	75bb      	strb	r3, [r7, #22]
 8004654:	e076      	b.n	8004744 <TOF_Init_I2C_Adresses+0x11c>
	{
		Dev = &(TOF_Devices[unit]);
 8004656:	7dbb      	ldrb	r3, [r7, #22]
 8004658:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	4a45      	ldr	r2, [pc, #276]	; (8004778 <TOF_Init_I2C_Adresses+0x150>)
 8004662:	4413      	add	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
		Dev->I2cDevAddr = TOF_BASE_I2C_ADDRESS;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2252      	movs	r2, #82	; 0x52
 800466a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		Dev->Present = TOF_ABSENT;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		FinalAddress = TOF_BASE_I2C_ADDRESS + (unit+1)*2;
 8004676:	7dbb      	ldrb	r3, [r7, #22]
 8004678:	332a      	adds	r3, #42	; 0x2a
 800467a:	b2db      	uxtb	r3, r3
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]

		// Wake up one unit
		TOF_XSHUT_Write(unit, TOF_XSHUT_SET);
 8004680:	7dbb      	ldrb	r3, [r7, #22]
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ffa9 	bl	80045dc <TOF_XSHUT_Write>

		/* Set I2C standard mode (400 KHz) before doing the first register access */
		if (status == VL53L0X_ERROR_NONE) status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800468a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <TOF_Init_I2C_Adresses+0x78>
 8004692:	2200      	movs	r2, #0
 8004694:	2188      	movs	r1, #136	; 0x88
 8004696:	6938      	ldr	r0, [r7, #16]
 8004698:	f000 fa66 	bl	8004b68 <VL53L0X_WrByte>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]

		do{

			// Try to get the model ID of the device
			TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	461a      	mov	r2, r3
 80046a6:	21c0      	movs	r1, #192	; 0xc0
 80046a8:	6938      	ldr	r0, [r7, #16]
 80046aa:	f000 fb09 	bl	8004cc0 <VL53L0X_RdWord>
 80046ae:	4603      	mov	r3, r0
 80046b0:	75fb      	strb	r3, [r7, #23]
 80046b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d131      	bne.n	800471e <TOF_Init_I2C_Adresses+0xf6>

			// The device is a VL53L0X
			if(Id==TOF_BASE_ID)
 80046ba:	89bb      	ldrh	r3, [r7, #12]
 80046bc:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d133      	bne.n	800472c <TOF_Init_I2C_Adresses+0x104>
			{
				// Set the new address
				TOF_ASSERT_BREAK(VL53L0X_SetDeviceAddress(Dev,FinalAddress))
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	4619      	mov	r1, r3
 80046c8:	6938      	ldr	r0, [r7, #16]
 80046ca:	f000 fb8f 	bl	8004dec <VL53L0X_SetDeviceAddress>
 80046ce:	4603      	mov	r3, r0
 80046d0:	75fb      	strb	r3, [r7, #23]
 80046d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d123      	bne.n	8004722 <TOF_Init_I2C_Adresses+0xfa>

				// change the address of the device to the new one
				Dev->I2cDevAddr = FinalAddress;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

				// try to get the model id to verify the address change
				TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 80046e2:	f107 030c 	add.w	r3, r7, #12
 80046e6:	461a      	mov	r2, r3
 80046e8:	21c0      	movs	r1, #192	; 0xc0
 80046ea:	6938      	ldr	r0, [r7, #16]
 80046ec:	f000 fae8 	bl	8004cc0 <VL53L0X_RdWord>
 80046f0:	4603      	mov	r3, r0
 80046f2:	75fb      	strb	r3, [r7, #23]
 80046f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d114      	bne.n	8004726 <TOF_Init_I2C_Adresses+0xfe>

				// try to initialize the device data model
				status = VL53L0X_DataInit(Dev);
 80046fc:	6938      	ldr	r0, [r7, #16]
 80046fe:	f000 fb8d 	bl	8004e1c <VL53L0X_DataInit>
 8004702:	4603      	mov	r3, r0
 8004704:	75fb      	strb	r3, [r7, #23]
				if(status) 	break;
 8004706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <TOF_Init_I2C_Adresses+0x102>

				Dev->Present = TOF_PRESENT;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2201      	movs	r2, #1
 8004712:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
				deviceCount++;
 8004716:	7d7b      	ldrb	r3, [r7, #21]
 8004718:	3301      	adds	r3, #1
 800471a:	757b      	strb	r3, [r7, #21]
 800471c:	e006      	b.n	800472c <TOF_Init_I2C_Adresses+0x104>
			TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 800471e:	bf00      	nop
 8004720:	e004      	b.n	800472c <TOF_Init_I2C_Adresses+0x104>
				TOF_ASSERT_BREAK(VL53L0X_SetDeviceAddress(Dev,FinalAddress))
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <TOF_Init_I2C_Adresses+0x104>
				TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <TOF_Init_I2C_Adresses+0x104>
				if(status) 	break;
 800472a:	bf00      	nop
			}

		} while(0); // while loop to be able to exit with a simple break command. (no repetitions, just a coding trick)

		// if there is a fail, shutdown the sensor to be sure
		if(status) TOF_XSHUT_Write(unit, TOF_XSHUT_RESET);
 800472c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <TOF_Init_I2C_Adresses+0x116>
 8004734:	7dbb      	ldrb	r3, [r7, #22]
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff4f 	bl	80045dc <TOF_XSHUT_Write>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 800473e:	7dbb      	ldrb	r3, [r7, #22]
 8004740:	3301      	adds	r3, #1
 8004742:	75bb      	strb	r3, [r7, #22]
 8004744:	7dbb      	ldrb	r3, [r7, #22]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d985      	bls.n	8004656 <TOF_Init_I2C_Adresses+0x2e>

	}

	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 800474a:	2300      	movs	r3, #0
 800474c:	75bb      	strb	r3, [r7, #22]
 800474e:	e007      	b.n	8004760 <TOF_Init_I2C_Adresses+0x138>
		TOF_XSHUT_Write(unit, TOF_XSHUT_SET);
 8004750:	7dbb      	ldrb	r3, [r7, #22]
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff41 	bl	80045dc <TOF_XSHUT_Write>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 800475a:	7dbb      	ldrb	r3, [r7, #22]
 800475c:	3301      	adds	r3, #1
 800475e:	75bb      	strb	r3, [r7, #22]
 8004760:	7dbb      	ldrb	r3, [r7, #22]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d9f4      	bls.n	8004750 <TOF_Init_I2C_Adresses+0x128>

	*detectedDevices = deviceCount;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7d7a      	ldrb	r2, [r7, #21]
 800476a:	701a      	strb	r2, [r3, #0]

	return status;
 800476c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2000000c 	.word	0x2000000c

0800477c <TOF_Init_Item>:

TOF_Status_t TOF_Init_Item(TOF_Units_t unit)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Dev_t *Dev = &(TOF_Devices[unit]);
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	4a6b      	ldr	r2, [pc, #428]	; (8004940 <TOF_Init_Item+0x1c4>)
 8004792:	4413      	add	r3, r2
 8004794:	627b      	str	r3, [r7, #36]	; 0x24

    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8004796:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800479a:	623b      	str	r3, [r7, #32]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800479c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80047a0:	61fb      	str	r3, [r7, #28]
	uint32_t timingBudget = 33000;
 80047a2:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80047a6:	61bb      	str	r3, [r7, #24]
	uint8_t preRangeVcselPeriod = 14;
 80047a8:	230e      	movs	r3, #14
 80047aa:	75fb      	strb	r3, [r7, #23]
	uint8_t finalRangeVcselPeriod = 10;
 80047ac:	230a      	movs	r3, #10
 80047ae:	75bb      	strb	r3, [r7, #22]

	TOF_ASSERT(VL53L0X_DataInit(Dev))
 80047b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b2:	f000 fb33 	bl	8004e1c <VL53L0X_DataInit>
 80047b6:	4603      	mov	r3, r0
 80047b8:	757b      	strb	r3, [r7, #21]
 80047ba:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <TOF_Init_Item+0x4c>
 80047c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047c6:	e0b7      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal))
 80047c8:	f107 0213 	add.w	r2, r7, #19
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	4619      	mov	r1, r3
 80047d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047d4:	f001 f8d6 	bl	8005984 <VL53L0X_PerformRefCalibration>
 80047d8:	4603      	mov	r3, r0
 80047da:	757b      	strb	r3, [r7, #21]
 80047dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <TOF_Init_Item+0x6e>
 80047e4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047e8:	e0a6      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads))
 80047ea:	f107 020b 	add.w	r2, r7, #11
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	4619      	mov	r1, r3
 80047f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047f6:	f001 fc2f 	bl	8006058 <VL53L0X_PerformRefSpadManagement>
 80047fa:	4603      	mov	r3, r0
 80047fc:	757b      	strb	r3, [r7, #21]
 80047fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <TOF_Init_Item+0x90>
 8004806:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800480a:	e095      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING))
 800480c:	2100      	movs	r1, #0
 800480e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004810:	f000 fcf8 	bl	8005204 <VL53L0X_SetDeviceMode>
 8004814:	4603      	mov	r3, r0
 8004816:	757b      	strb	r3, [r7, #21]
 8004818:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <TOF_Init_Item+0xaa>
 8004820:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004824:	e088      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1))
 8004826:	2201      	movs	r2, #1
 8004828:	2100      	movs	r1, #0
 800482a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800482c:	f000 fea4 	bl	8005578 <VL53L0X_SetLimitCheckEnable>
 8004830:	4603      	mov	r3, r0
 8004832:	757b      	strb	r3, [r7, #21]
 8004834:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <TOF_Init_Item+0xc6>
 800483c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004840:	e07a      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1))
 8004842:	2201      	movs	r2, #1
 8004844:	2101      	movs	r1, #1
 8004846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004848:	f000 fe96 	bl	8005578 <VL53L0X_SetLimitCheckEnable>
 800484c:	4603      	mov	r3, r0
 800484e:	757b      	strb	r3, [r7, #21]
 8004850:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <TOF_Init_Item+0xe2>
 8004858:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800485c:	e06c      	b.n	8004938 <TOF_Init_Item+0x1bc>
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 800485e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004862:	623b      	str	r3, [r7, #32]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 8004864:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004868:	61fb      	str	r3, [r7, #28]
		timingBudget = 200000;
 800486a:	4b36      	ldr	r3, [pc, #216]	; (8004944 <TOF_Init_Item+0x1c8>)
 800486c:	61bb      	str	r3, [r7, #24]
		preRangeVcselPeriod = 14;
 800486e:	230e      	movs	r3, #14
 8004870:	75fb      	strb	r3, [r7, #23]
		finalRangeVcselPeriod = 10;
 8004872:	230a      	movs	r3, #10
 8004874:	75bb      	strb	r3, [r7, #22]
		break;
 8004876:	bf00      	nop
		finalRangeVcselPeriod = 10;
		break;
	default:
		return TOF_STATUS_CONFIG_UNKNOWN_RANGING_MODE;
	}
	status = TOF_STATUS_SUCESS;
 8004878:	2300      	movs	r3, #0
 800487a:	757b      	strb	r3, [r7, #21]

	TOF_ASSERT(VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit))
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	2101      	movs	r1, #1
 8004880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004882:	f000 ff29 	bl	80056d8 <VL53L0X_SetLimitCheckValue>
 8004886:	4603      	mov	r3, r0
 8004888:	757b      	strb	r3, [r7, #21]
 800488a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <TOF_Init_Item+0x11c>
 8004892:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004896:	e04f      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit))
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	2100      	movs	r1, #0
 800489c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800489e:	f000 ff1b 	bl	80056d8 <VL53L0X_SetLimitCheckValue>
 80048a2:	4603      	mov	r3, r0
 80048a4:	757b      	strb	r3, [r7, #21]
 80048a6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <TOF_Init_Item+0x138>
 80048ae:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048b2:	e041      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,  timingBudget))
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b8:	f000 fce3 	bl	8005282 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80048bc:	4603      	mov	r3, r0
 80048be:	757b      	strb	r3, [r7, #21]
 80048c0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <TOF_Init_Item+0x152>
 80048c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048cc:	e034      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod))
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	461a      	mov	r2, r3
 80048d2:	2100      	movs	r1, #0
 80048d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048d6:	f000 fcfa 	bl	80052ce <VL53L0X_SetVcselPulsePeriod>
 80048da:	4603      	mov	r3, r0
 80048dc:	757b      	strb	r3, [r7, #21]
 80048de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <TOF_Init_Item+0x170>
 80048e6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048ea:	e025      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod))
 80048ec:	7dbb      	ldrb	r3, [r7, #22]
 80048ee:	461a      	mov	r2, r3
 80048f0:	2101      	movs	r1, #1
 80048f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f4:	f000 fceb 	bl	80052ce <VL53L0X_SetVcselPulsePeriod>
 80048f8:	4603      	mov	r3, r0
 80048fa:	757b      	strb	r3, [r7, #21]
 80048fc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <TOF_Init_Item+0x18e>
 8004904:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004908:	e016      	b.n	8004938 <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal))
 800490a:	f107 0213 	add.w	r2, r7, #19
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	4619      	mov	r1, r3
 8004914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004916:	f001 f835 	bl	8005984 <VL53L0X_PerformRefCalibration>
 800491a:	4603      	mov	r3, r0
 800491c:	757b      	strb	r3, [r7, #21]
 800491e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <TOF_Init_Item+0x1b0>
 8004926:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800492a:	e005      	b.n	8004938 <TOF_Init_Item+0x1bc>

	Dev->LeakyFirst = 1;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	2201      	movs	r2, #1
 8004930:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	return status;
 8004934:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3728      	adds	r7, #40	; 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	2000000c 	.word	0x2000000c
 8004944:	00030d40 	.word	0x00030d40

08004948 <TOF_Init>:
 * Initialize all the TOFs sensors
 * @param None
 * @return TOF_Status_t error_code
 */
TOF_Status_t TOF_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
	TOF_Status_t status;
	TOF_Units_t unit;
	uint8_t devicesDetected;

	TOF_ASSERT(TOF_Init_I2C_Adresses(&devicesDetected))
 800494e:	1d7b      	adds	r3, r7, #5
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fe69 	bl	8004628 <TOF_Init_I2C_Adresses>
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <TOF_Init+0x20>
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	e01d      	b.n	80049a4 <TOF_Init+0x5c>

	if(devicesDetected<TOF_UNIT_COUNT) return TOF_STATUS_SENSORS_MISSING;
 8004968:	797b      	ldrb	r3, [r7, #5]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d802      	bhi.n	8004974 <TOF_Init+0x2c>
 800496e:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8004972:	e017      	b.n	80049a4 <TOF_Init+0x5c>

	for (unit = 0; unit<TOF_UNIT_COUNT; unit++)
 8004974:	2300      	movs	r3, #0
 8004976:	71bb      	strb	r3, [r7, #6]
 8004978:	e00f      	b.n	800499a <TOF_Init+0x52>
	{
		TOF_ASSERT(TOF_Init_Item(unit))
 800497a:	79bb      	ldrb	r3, [r7, #6]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fefd 	bl	800477c <TOF_Init_Item>
 8004982:	4603      	mov	r3, r0
 8004984:	71fb      	strb	r3, [r7, #7]
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <TOF_Init+0x4c>
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	e007      	b.n	80049a4 <TOF_Init+0x5c>
	for (unit = 0; unit<TOF_UNIT_COUNT; unit++)
 8004994:	79bb      	ldrb	r3, [r7, #6]
 8004996:	3301      	adds	r3, #1
 8004998:	71bb      	strb	r3, [r7, #6]
 800499a:	79bb      	ldrb	r3, [r7, #6]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d9ec      	bls.n	800497a <TOF_Init+0x32>
	}

	return status;
 80049a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <TOF_Get_Range>:
 *										3 : minimal value
 *										5 : communication interrupted
 * @return TOF_Status_t error_code
 */
TOF_Status_t TOF_Get_Range(TOF_Units_t unit, uint16_t max_retries, uint16_t *range_milimeters, uint8_t *range_status)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	; 0x30
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60ba      	str	r2, [r7, #8]
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	4603      	mov	r3, r0
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	460b      	mov	r3, r1
 80049bc:	81bb      	strh	r3, [r7, #12]
	TOF_Status_t status;
	VL53L0X_RangingMeasurementData_t data;
	uint16_t retries;

	for(retries=0; retries<max_retries; retries++)
 80049be:	2300      	movs	r3, #0
 80049c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80049c2:	e01d      	b.n	8004a00 <TOF_Get_Range+0x54>
	{
		TOF_ASSERT(VL53L0X_PerformSingleRangingMeasurement(TOF_PDEV, &data))
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	4a16      	ldr	r2, [pc, #88]	; (8004a28 <TOF_Get_Range+0x7c>)
 80049d0:	4413      	add	r3, r2
 80049d2:	f107 0210 	add.w	r2, r7, #16
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fa75 	bl	8005ec8 <VL53L0X_PerformSingleRangingMeasurement>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80049e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <TOF_Get_Range+0x46>
 80049ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049f0:	e015      	b.n	8004a1e <TOF_Get_Range+0x72>
		if(data.RangeStatus==1) break;
 80049f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d007      	beq.n	8004a0a <TOF_Get_Range+0x5e>
	for(retries=0; retries<max_retries; retries++)
 80049fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049fc:	3301      	adds	r3, #1
 80049fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004a00:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004a02:	89bb      	ldrh	r3, [r7, #12]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d3dd      	bcc.n	80049c4 <TOF_Get_Range+0x18>
 8004a08:	e000      	b.n	8004a0c <TOF_Get_Range+0x60>
		if(data.RangeStatus==1) break;
 8004a0a:	bf00      	nop
	}

	*range_milimeters = data.RangeMilliMeter;
 8004a0c:	8b3a      	ldrh	r2, [r7, #24]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	801a      	strh	r2, [r3, #0]
	*range_status = data.RangeStatus;
 8004a12:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	701a      	strb	r2, [r3, #0]

	return status;
 8004a1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3730      	adds	r7, #48	; 0x30
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	2000000c 	.word	0x2000000c

08004a2c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	330a      	adds	r3, #10
 8004a3c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8004a4a:	b299      	uxth	r1, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	f7fc fcf0 	bl	800143c <HAL_I2C_Master_Transmit>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8004a60:	693b      	ldr	r3, [r7, #16]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b088      	sub	sp, #32
 8004a6e:	af02      	add	r7, sp, #8
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	330a      	adds	r3, #10
 8004a7a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	b299      	uxth	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	f7fc fdc2 	bl	8001624 <HAL_I2C_Master_Receive>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8004aa4:	693b      	ldr	r3, [r7, #16]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	460b      	mov	r3, r1
 8004abe:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8004ac8:	d902      	bls.n	8004ad0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8004aca:	f06f 0303 	mvn.w	r3, #3
 8004ace:	e016      	b.n	8004afe <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8004ad0:	4a0d      	ldr	r2, [pc, #52]	; (8004b08 <VL53L0X_WriteMulti+0x58>)
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
 8004ad4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	480c      	ldr	r0, [pc, #48]	; (8004b0c <VL53L0X_WriteMulti+0x5c>)
 8004adc:	f003 febc 	bl	8008858 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4908      	ldr	r1, [pc, #32]	; (8004b08 <VL53L0X_WriteMulti+0x58>)
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff ff9f 	bl	8004a2c <_I2CWrite>
 8004aee:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004af6:	23ec      	movs	r3, #236	; 0xec
 8004af8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8004afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000664 	.word	0x20000664
 8004b0c:	20000665 	.word	0x20000665

08004b10 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004b24:	f107 030b 	add.w	r3, r7, #11
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff ff7d 	bl	8004a2c <_I2CWrite>
 8004b32:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004b3a:	23ec      	movs	r3, #236	; 0xec
 8004b3c:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004b3e:	e00c      	b.n	8004b5a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff ff90 	bl	8004a6a <_I2CRead>
 8004b4a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004b52:	23ec      	movs	r3, #236	; 0xec
 8004b54:	75fb      	strb	r3, [r7, #23]
 8004b56:	e000      	b.n	8004b5a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8004b58:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8004b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
 8004b74:	4613      	mov	r3, r2
 8004b76:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8004b7c:	4a0b      	ldr	r2, [pc, #44]	; (8004bac <VL53L0X_WrByte+0x44>)
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <VL53L0X_WrByte+0x44>)
 8004b84:	78bb      	ldrb	r3, [r7, #2]
 8004b86:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004b88:	2202      	movs	r2, #2
 8004b8a:	4908      	ldr	r1, [pc, #32]	; (8004bac <VL53L0X_WrByte+0x44>)
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff4d 	bl	8004a2c <_I2CWrite>
 8004b92:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004b9a:	23ec      	movs	r3, #236	; 0xec
 8004b9c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8004b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000664 	.word	0x20000664

08004bb0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8004bc4:	4a0e      	ldr	r2, [pc, #56]	; (8004c00 <VL53L0X_WrWord+0x50>)
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8004bca:	883b      	ldrh	r3, [r7, #0]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <VL53L0X_WrWord+0x50>)
 8004bd4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8004bd6:	883b      	ldrh	r3, [r7, #0]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <VL53L0X_WrWord+0x50>)
 8004bdc:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004bde:	2203      	movs	r2, #3
 8004be0:	4907      	ldr	r1, [pc, #28]	; (8004c00 <VL53L0X_WrWord+0x50>)
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ff22 	bl	8004a2c <_I2CWrite>
 8004be8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004bf0:	23ec      	movs	r3, #236	; 0xec
 8004bf2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8004bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000664 	.word	0x20000664

08004c04 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	70fb      	strb	r3, [r7, #3]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70bb      	strb	r3, [r7, #2]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8004c22:	f107 020e 	add.w	r2, r7, #14
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f81e 	bl	8004c6c <VL53L0X_RdByte>
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8004c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d110      	bne.n	8004c5e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8004c3c:	7bba      	ldrb	r2, [r7, #14]
 8004c3e:	78bb      	ldrb	r3, [r7, #2]
 8004c40:	4013      	ands	r3, r2
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	787b      	ldrb	r3, [r7, #1]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004c4c:	7bba      	ldrb	r2, [r7, #14]
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff88 	bl	8004b68 <VL53L0X_WrByte>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e000      	b.n	8004c60 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8004c5e:	bf00      	nop
done:
    return Status;
 8004c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	460b      	mov	r3, r1
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004c7e:	f107 030b 	add.w	r3, r7, #11
 8004c82:	2201      	movs	r2, #1
 8004c84:	4619      	mov	r1, r3
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff fed0 	bl	8004a2c <_I2CWrite>
 8004c8c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004c94:	23ec      	movs	r3, #236	; 0xec
 8004c96:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004c98:	e00c      	b.n	8004cb4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff fee3 	bl	8004a6a <_I2CRead>
 8004ca4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004cac:	23ec      	movs	r3, #236	; 0xec
 8004cae:	75fb      	strb	r3, [r7, #23]
 8004cb0:	e000      	b.n	8004cb4 <VL53L0X_RdByte+0x48>
    }
done:
 8004cb2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8004cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004cd2:	f107 030b 	add.w	r3, r7, #11
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4619      	mov	r1, r3
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff fea6 	bl	8004a2c <_I2CWrite>
 8004ce0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004ce8:	23ec      	movs	r3, #236	; 0xec
 8004cea:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004cec:	e017      	b.n	8004d1e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004cee:	2202      	movs	r2, #2
 8004cf0:	490e      	ldr	r1, [pc, #56]	; (8004d2c <VL53L0X_RdWord+0x6c>)
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff feb9 	bl	8004a6a <_I2CRead>
 8004cf8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004d00:	23ec      	movs	r3, #236	; 0xec
 8004d02:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004d04:	e00b      	b.n	8004d1e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <VL53L0X_RdWord+0x6c>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <VL53L0X_RdWord+0x6c>)
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8004d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000664 	.word	0x20000664

08004d30 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004d42:	f107 030b 	add.w	r3, r7, #11
 8004d46:	2201      	movs	r2, #1
 8004d48:	4619      	mov	r1, r3
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fe6e 	bl	8004a2c <_I2CWrite>
 8004d50:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004d58:	23ec      	movs	r3, #236	; 0xec
 8004d5a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004d5c:	e01b      	b.n	8004d96 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8004d5e:	2204      	movs	r2, #4
 8004d60:	4910      	ldr	r1, [pc, #64]	; (8004da4 <VL53L0X_RdDWord+0x74>)
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff fe81 	bl	8004a6a <_I2CRead>
 8004d68:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004d70:	23ec      	movs	r3, #236	; 0xec
 8004d72:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004d74:	e00f      	b.n	8004d96 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <VL53L0X_RdDWord+0x74>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	061a      	lsls	r2, r3, #24
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <VL53L0X_RdDWord+0x74>)
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	441a      	add	r2, r3
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <VL53L0X_RdDWord+0x74>)
 8004d86:	789b      	ldrb	r3, [r3, #2]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	4413      	add	r3, r2
 8004d8c:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <VL53L0X_RdDWord+0x74>)
 8004d8e:	78d2      	ldrb	r2, [r2, #3]
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8004d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000664 	.word	0x20000664

08004da8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8004db4:	2002      	movs	r0, #2
 8004db6:	f7fb ffab 	bl	8000d10 <HAL_Delay>
    return status;
 8004dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f001 f953 	bl	8006082 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	218a      	movs	r1, #138	; 0x8a
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff feae 	bl	8004b68 <VL53L0X_WrByte>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8004e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004e1c:	b5b0      	push	{r4, r5, r7, lr}
 8004e1e:	b096      	sub	sp, #88	; 0x58
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004e2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d107      	bne.n	8004e42 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2188      	movs	r1, #136	; 0x88
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff fe96 	bl	8004b68 <VL53L0X_WrByte>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e50:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004e5a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a9e      	ldr	r2, [pc, #632]	; (80050dc <VL53L0X_DataInit+0x2c0>)
 8004e62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a9d      	ldr	r2, [pc, #628]	; (80050e0 <VL53L0X_DataInit+0x2c4>)
 8004e6a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f932 	bl	80050e4 <VL53L0X_GetDeviceParameters>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004e86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d112      	bne.n	8004eb4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004e92:	2300      	movs	r3, #0
 8004e94:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f103 0410 	add.w	r4, r3, #16
 8004e9c:	f107 0510 	add.w	r5, r7, #16
 8004ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2264      	movs	r2, #100	; 0x64
 8004eb8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004ec2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ecc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004ed6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fe3e 	bl	8004b68 <VL53L0X_WrByte>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004efa:	2201      	movs	r2, #1
 8004efc:	21ff      	movs	r1, #255	; 0xff
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fe32 	bl	8004b68 <VL53L0X_WrByte>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461a      	mov	r2, r3
 8004f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004f12:	2200      	movs	r2, #0
 8004f14:	2100      	movs	r1, #0
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fe26 	bl	8004b68 <VL53L0X_WrByte>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004f2a:	f107 030f 	add.w	r3, r7, #15
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2191      	movs	r1, #145	; 0x91
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff fe9a 	bl	8004c6c <VL53L0X_RdByte>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2100      	movs	r1, #0
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fe08 	bl	8004b68 <VL53L0X_WrByte>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f66:	2200      	movs	r2, #0
 8004f68:	21ff      	movs	r1, #255	; 0xff
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fdfc 	bl	8004b68 <VL53L0X_WrByte>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2180      	movs	r1, #128	; 0x80
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fdf0 	bl	8004b68 <VL53L0X_WrByte>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f96:	2300      	movs	r3, #0
 8004f98:	653b      	str	r3, [r7, #80]	; 0x50
 8004f9a:	e014      	b.n	8004fc6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004f9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d114      	bne.n	8004fce <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2201      	movs	r2, #1
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fae3 	bl	8005578 <VL53L0X_SetLimitCheckEnable>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	dde7      	ble.n	8004f9c <VL53L0X_DataInit+0x180>
 8004fcc:	e000      	b.n	8004fd0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004fce:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004fd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2102      	movs	r1, #2
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 facb 	bl	8005578 <VL53L0X_SetLimitCheckEnable>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004fe8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d107      	bne.n	8005000 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2103      	movs	r1, #3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fabf 	bl	8005578 <VL53L0X_SetLimitCheckEnable>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005000:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005004:	2b00      	cmp	r3, #0
 8005006:	d107      	bne.n	8005018 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005008:	2200      	movs	r2, #0
 800500a:	2104      	movs	r1, #4
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fab3 	bl	8005578 <VL53L0X_SetLimitCheckEnable>
 8005012:	4603      	mov	r3, r0
 8005014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005018:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800501c:	2b00      	cmp	r3, #0
 800501e:	d107      	bne.n	8005030 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005020:	2200      	movs	r2, #0
 8005022:	2105      	movs	r1, #5
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 faa7 	bl	8005578 <VL53L0X_SetLimitCheckEnable>
 800502a:	4603      	mov	r3, r0
 800502c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005030:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005038:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800503c:	2100      	movs	r1, #0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fb4a 	bl	80056d8 <VL53L0X_SetLimitCheckValue>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800504a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005056:	2101      	movs	r1, #1
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb3d 	bl	80056d8 <VL53L0X_SetLimitCheckValue>
 800505e:	4603      	mov	r3, r0
 8005060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005064:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800506c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005070:	2102      	movs	r1, #2
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fb30 	bl	80056d8 <VL53L0X_SetLimitCheckValue>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800507e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005082:	2b00      	cmp	r3, #0
 8005084:	d107      	bne.n	8005096 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005086:	2200      	movs	r2, #0
 8005088:	2103      	movs	r1, #3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fb24 	bl	80056d8 <VL53L0X_SetLimitCheckValue>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005096:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10f      	bne.n	80050be <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	22ff      	movs	r2, #255	; 0xff
 80050a2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80050a6:	22ff      	movs	r2, #255	; 0xff
 80050a8:	2101      	movs	r1, #1
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fd5c 	bl	8004b68 <VL53L0X_WrByte>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80050be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d103      	bne.n	80050ce <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80050ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3758      	adds	r7, #88	; 0x58
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bdb0      	pop	{r4, r5, r7, pc}
 80050da:	bf00      	nop
 80050dc:	00016b85 	.word	0x00016b85
 80050e0:	000970a4 	.word	0x000970a4

080050e4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8b0 	bl	800525c <VL53L0X_GetDeviceMode>
 80050fc:	4603      	mov	r3, r0
 80050fe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d107      	bne.n	8005118 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	3308      	adds	r3, #8
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9b6 	bl	8005480 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d107      	bne.n	800513e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	3310      	adds	r3, #16
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f9ec 	bl	8005512 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800513a:	4603      	mov	r3, r0
 800513c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800513e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff fe3a 	bl	8004dc6 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005152:	4603      	mov	r3, r0
 8005154:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d134      	bne.n	80051c8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	e02a      	b.n	80051ba <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d12a      	bne.n	80051c2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	b299      	uxth	r1, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	3308      	adds	r3, #8
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	4413      	add	r3, r2
 800517a:	3304      	adds	r3, #4
 800517c:	461a      	mov	r2, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fb0c 	bl	800579c <VL53L0X_GetLimitCheckValue>
 8005184:	4603      	mov	r3, r0
 8005186:	461a      	mov	r2, r3
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	4313      	orrs	r3, r2
 800518c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800518e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d117      	bne.n	80051c6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	b299      	uxth	r1, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3318      	adds	r3, #24
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	4413      	add	r3, r2
 80051a2:	461a      	mov	r2, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa73 	bl	8005690 <VL53L0X_GetLimitCheckEnable>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461a      	mov	r2, r3
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b05      	cmp	r3, #5
 80051be:	ddd1      	ble.n	8005164 <VL53L0X_GetDeviceParameters+0x80>
 80051c0:	e002      	b.n	80051c8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80051c6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80051c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	333c      	adds	r3, #60	; 0x3c
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fb6e 	bl	80058b8 <VL53L0X_GetWrapAroundCheckEnable>
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80051e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d107      	bne.n	80051f8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f85a 	bl	80052a8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	2b15      	cmp	r3, #21
 8005218:	bf8c      	ite	hi
 800521a:	2201      	movhi	r2, #1
 800521c:	2200      	movls	r2, #0
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	2a00      	cmp	r2, #0
 8005222:	d10e      	bne.n	8005242 <VL53L0X_SetDeviceMode+0x3e>
 8005224:	2201      	movs	r2, #1
 8005226:	409a      	lsls	r2, r3
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <VL53L0X_SetDeviceMode+0x54>)
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	741a      	strb	r2, [r3, #16]
		break;
 8005240:	e001      	b.n	8005246 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005242:	23f8      	movs	r3, #248	; 0xf8
 8005244:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005246:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	0030000b 	.word	0x0030000b

0800525c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7c1a      	ldrb	r2, [r3, #16]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f002 faab 	bl	80077ee <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800529c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f002 fb78 	bl	80079ae <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80052be:	4603      	mov	r3, r0
 80052c0:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80052c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
 80052da:	4613      	mov	r3, r2
 80052dc:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80052e2:	78ba      	ldrb	r2, [r7, #2]
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 ffc0 	bl	800726e <VL53L0X_set_vcsel_pulse_period>
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80052f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	460b      	mov	r3, r1
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800530c:	2300      	movs	r3, #0
 800530e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005310:	7afb      	ldrb	r3, [r7, #11]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4619      	mov	r1, r3
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f002 fa32 	bl	8007780 <VL53L0X_get_vcsel_pulse_period>
 800531c:	4603      	mov	r3, r0
 800531e:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <sequence_step_enabled>:
}

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	72fb      	strb	r3, [r7, #11]
 800533a:	4613      	mov	r3, r2
 800533c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005348:	7afb      	ldrb	r3, [r7, #11]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d836      	bhi.n	80053bc <sequence_step_enabled+0x90>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <sequence_step_enabled+0x28>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005369 	.word	0x08005369
 8005358:	0800537b 	.word	0x0800537b
 800535c:	0800538d 	.word	0x0800538d
 8005360:	0800539f 	.word	0x0800539f
 8005364:	080053b1 	.word	0x080053b1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005368:	7abb      	ldrb	r3, [r7, #10]
 800536a:	111b      	asrs	r3, r3, #4
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	701a      	strb	r2, [r3, #0]
		break;
 8005378:	e022      	b.n	80053c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800537a:	7abb      	ldrb	r3, [r7, #10]
 800537c:	10db      	asrs	r3, r3, #3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	701a      	strb	r2, [r3, #0]
		break;
 800538a:	e019      	b.n	80053c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800538c:	7abb      	ldrb	r3, [r7, #10]
 800538e:	109b      	asrs	r3, r3, #2
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	701a      	strb	r2, [r3, #0]
		break;
 800539c:	e010      	b.n	80053c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800539e:	7abb      	ldrb	r3, [r7, #10]
 80053a0:	119b      	asrs	r3, r3, #6
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	701a      	strb	r2, [r3, #0]
		break;
 80053ae:	e007      	b.n	80053c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80053b0:	7abb      	ldrb	r3, [r7, #10]
 80053b2:	09db      	lsrs	r3, r3, #7
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	701a      	strb	r2, [r3, #0]
		break;
 80053ba:	e001      	b.n	80053c0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80053bc:	23fc      	movs	r3, #252	; 0xfc
 80053be:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80053e2:	f107 030e 	add.w	r3, r7, #14
 80053e6:	461a      	mov	r2, r3
 80053e8:	2101      	movs	r1, #1
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fc3e 	bl	8004c6c <VL53L0X_RdByte>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80053f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d107      	bne.n	800540c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80053fc:	7bba      	ldrb	r2, [r7, #14]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2100      	movs	r1, #0
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff ff92 	bl	800532c <sequence_step_enabled>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800540c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d108      	bne.n	8005426 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005414:	7bba      	ldrb	r2, [r7, #14]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	3302      	adds	r3, #2
 800541a:	2101      	movs	r1, #1
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff85 	bl	800532c <sequence_step_enabled>
 8005422:	4603      	mov	r3, r0
 8005424:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d108      	bne.n	8005440 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800542e:	7bba      	ldrb	r2, [r7, #14]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	3301      	adds	r3, #1
 8005434:	2102      	movs	r1, #2
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ff78 	bl	800532c <sequence_step_enabled>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d108      	bne.n	800545a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005448:	7bba      	ldrb	r2, [r7, #14]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	3303      	adds	r3, #3
 800544e:	2103      	movs	r1, #3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ff6b 	bl	800532c <sequence_step_enabled>
 8005456:	4603      	mov	r3, r0
 8005458:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800545a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d108      	bne.n	8005474 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005462:	7bba      	ldrb	r2, [r7, #14]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	3304      	adds	r3, #4
 8005468:	2104      	movs	r1, #4
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff ff5e 	bl	800532c <sequence_step_enabled>
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005474:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800548e:	f107 030c 	add.w	r3, r7, #12
 8005492:	461a      	mov	r2, r3
 8005494:	21f8      	movs	r1, #248	; 0xf8
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fc12 	bl	8004cc0 <VL53L0X_RdWord>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80054a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d108      	bne.n	80054ba <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	461a      	mov	r2, r3
 80054ae:	2104      	movs	r1, #4
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fc3d 	bl	8004d30 <VL53L0X_RdDWord>
 80054b6:	4603      	mov	r3, r0
 80054b8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80054ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10c      	bne.n	80054dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80054c2:	89bb      	ldrh	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	89ba      	ldrh	r2, [r7, #12]
 80054cc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	7f1b      	ldrb	r3, [r3, #28]
 80054fa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	7bba      	ldrb	r2, [r7, #14]
 8005500:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005502:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800551c:	2300      	movs	r3, #0
 800551e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005520:	f107 030e 	add.w	r3, r7, #14
 8005524:	461a      	mov	r2, r3
 8005526:	2120      	movs	r1, #32
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fbc9 	bl	8004cc0 <VL53L0X_RdWord>
 800552e:	4603      	mov	r3, r0
 8005530:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d118      	bne.n	800556c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	771a      	strb	r2, [r3, #28]
 8005552:	e00b      	b.n	800556c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005554:	89fb      	ldrh	r3, [r7, #14]
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800556c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	807b      	strh	r3, [r7, #2]
 8005584:	4613      	mov	r3, r2
 8005586:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005588:	2300      	movs	r3, #0
 800558a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005598:	887b      	ldrh	r3, [r7, #2]
 800559a:	2b05      	cmp	r3, #5
 800559c:	d902      	bls.n	80055a4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800559e:	23fc      	movs	r3, #252	; 0xfc
 80055a0:	75fb      	strb	r3, [r7, #23]
 80055a2:	e05b      	b.n	800565c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80055a4:	787b      	ldrb	r3, [r7, #1]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80055b2:	2301      	movs	r3, #1
 80055b4:	73bb      	strb	r3, [r7, #14]
 80055b6:	e00a      	b.n	80055ce <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80055b8:	887b      	ldrh	r3, [r7, #2]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	330c      	adds	r3, #12
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80055ce:	887b      	ldrh	r3, [r7, #2]
 80055d0:	2b05      	cmp	r3, #5
 80055d2:	d841      	bhi.n	8005658 <VL53L0X_SetLimitCheckEnable+0xe0>
 80055d4:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <VL53L0X_SetLimitCheckEnable+0x64>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055ff 	.word	0x080055ff
 80055e4:	08005615 	.word	0x08005615
 80055e8:	0800561f 	.word	0x0800561f
 80055ec:	08005629 	.word	0x08005629
 80055f0:	08005641 	.word	0x08005641

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	7bfa      	ldrb	r2, [r7, #15]
 80055f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80055fc:	e02e      	b.n	800565c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005602:	b29b      	uxth	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	2144      	movs	r1, #68	; 0x44
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fad1 	bl	8004bb0 <VL53L0X_WrWord>
 800560e:	4603      	mov	r3, r0
 8005610:	75fb      	strb	r3, [r7, #23]

			break;
 8005612:	e023      	b.n	800565c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800561c:	e01e      	b.n	800565c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	7bfa      	ldrb	r2, [r7, #15]
 8005622:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005626:	e019      	b.n	800565c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005628:	7bbb      	ldrb	r3, [r7, #14]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800562e:	7b7b      	ldrb	r3, [r7, #13]
 8005630:	22fe      	movs	r2, #254	; 0xfe
 8005632:	2160      	movs	r1, #96	; 0x60
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fae5 	bl	8004c04 <VL53L0X_UpdateByte>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800563e:	e00d      	b.n	800565c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005646:	7b7b      	ldrb	r3, [r7, #13]
 8005648:	22ef      	movs	r2, #239	; 0xef
 800564a:	2160      	movs	r1, #96	; 0x60
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fad9 	bl	8004c04 <VL53L0X_UpdateByte>
 8005652:	4603      	mov	r3, r0
 8005654:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005656:	e001      	b.n	800565c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005658:	23fc      	movs	r3, #252	; 0xfc
 800565a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800565c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10f      	bne.n	8005684 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005664:	787b      	ldrb	r3, [r7, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4413      	add	r3, r2
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005676:	e005      	b.n	8005684 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005678:	887b      	ldrh	r3, [r7, #2]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005684:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	460b      	mov	r3, r1
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800569e:	2300      	movs	r3, #0
 80056a0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80056a2:	897b      	ldrh	r3, [r7, #10]
 80056a4:	2b05      	cmp	r3, #5
 80056a6:	d905      	bls.n	80056b4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80056a8:	23fc      	movs	r3, #252	; 0xfc
 80056aa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e008      	b.n	80056c6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056b4:	897b      	ldrh	r3, [r7, #10]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056be:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	7dba      	ldrb	r2, [r7, #22]
 80056c4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80056c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	460b      	mov	r3, r1
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80056ea:	897b      	ldrh	r3, [r7, #10]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80056f6:	7dbb      	ldrb	r3, [r7, #22]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d107      	bne.n	800570c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056fc:	897b      	ldrh	r3, [r7, #10]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	330c      	adds	r3, #12
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	e040      	b.n	800578e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800570c:	897b      	ldrh	r3, [r7, #10]
 800570e:	2b05      	cmp	r3, #5
 8005710:	d830      	bhi.n	8005774 <VL53L0X_SetLimitCheckValue+0x9c>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <VL53L0X_SetLimitCheckValue+0x40>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	08005731 	.word	0x08005731
 800571c:	08005739 	.word	0x08005739
 8005720:	0800574f 	.word	0x0800574f
 8005724:	08005757 	.word	0x08005757
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800575f 	.word	0x0800575f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005736:	e01f      	b.n	8005778 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800573c:	b29b      	uxth	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	2144      	movs	r1, #68	; 0x44
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fa34 	bl	8004bb0 <VL53L0X_WrWord>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800574c:	e014      	b.n	8005778 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005754:	e010      	b.n	8005778 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800575c:	e00c      	b.n	8005778 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005762:	b29b      	uxth	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	2164      	movs	r1, #100	; 0x64
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff fa21 	bl	8004bb0 <VL53L0X_WrWord>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005772:	e001      	b.n	8005778 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005774:	23fc      	movs	r3, #252	; 0xfc
 8005776:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005780:	897b      	ldrh	r3, [r7, #10]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	330c      	adds	r3, #12
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800578e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop

0800579c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	460b      	mov	r3, r1
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80057b2:	897b      	ldrh	r3, [r7, #10]
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	d847      	bhi.n	8005848 <VL53L0X_GetLimitCheckValue+0xac>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <VL53L0X_GetLimitCheckValue+0x24>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057d9 	.word	0x080057d9
 80057c4:	080057e5 	.word	0x080057e5
 80057c8:	0800580b 	.word	0x0800580b
 80057cc:	08005817 	.word	0x08005817
 80057d0:	08005823 	.word	0x08005823
 80057d4:	08005823 	.word	0x08005823

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	77bb      	strb	r3, [r7, #30]
		break;
 80057e2:	e033      	b.n	800584c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80057e4:	f107 0316 	add.w	r3, r7, #22
 80057e8:	461a      	mov	r2, r3
 80057ea:	2144      	movs	r1, #68	; 0x44
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff fa67 	bl	8004cc0 <VL53L0X_RdWord>
 80057f2:	4603      	mov	r3, r0
 80057f4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80057f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80057fe:	8afb      	ldrh	r3, [r7, #22]
 8005800:	025b      	lsls	r3, r3, #9
 8005802:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005804:	2301      	movs	r3, #1
 8005806:	77bb      	strb	r3, [r7, #30]
		break;
 8005808:	e020      	b.n	800584c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	77bb      	strb	r3, [r7, #30]
		break;
 8005814:	e01a      	b.n	800584c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	77bb      	strb	r3, [r7, #30]
		break;
 8005820:	e014      	b.n	800584c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005822:	f107 0316 	add.w	r3, r7, #22
 8005826:	461a      	mov	r2, r3
 8005828:	2164      	movs	r1, #100	; 0x64
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fa48 	bl	8004cc0 <VL53L0X_RdWord>
 8005830:	4603      	mov	r3, r0
 8005832:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005834:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800583c:	8afb      	ldrh	r3, [r7, #22]
 800583e:	025b      	lsls	r3, r3, #9
 8005840:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	77bb      	strb	r3, [r7, #30]
		break;
 8005846:	e001      	b.n	800584c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005848:	23fc      	movs	r3, #252	; 0xfc
 800584a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800584c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d12a      	bne.n	80058aa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005854:	7fbb      	ldrb	r3, [r7, #30]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d124      	bne.n	80058a4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d110      	bne.n	8005882 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005860:	897b      	ldrh	r3, [r7, #10]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	330c      	adds	r3, #12
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005874:	897b      	ldrh	r3, [r7, #10]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005880:	e013      	b.n	80058aa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005888:	897b      	ldrh	r3, [r7, #10]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	330c      	adds	r3, #12
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005896:	897b      	ldrh	r3, [r7, #10]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80058a2:	e002      	b.n	80058aa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058aa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop

080058b8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80058c6:	f107 030e 	add.w	r3, r7, #14
 80058ca:	461a      	mov	r2, r3
 80058cc:	2101      	movs	r1, #1
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff f9cc 	bl	8004c6c <VL53L0X_RdByte>
 80058d4:	4603      	mov	r3, r0
 80058d6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80058d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10e      	bne.n	80058fe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80058e0:	7bba      	ldrb	r2, [r7, #14]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	b25b      	sxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da03      	bge.n	80058f8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e002      	b.n	80058fe <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80058fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d104      	bne.n	8005910 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005910:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005924:	2300      	movs	r3, #0
 8005926:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005928:	f107 030e 	add.w	r3, r7, #14
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fc94 	bl	800525c <VL53L0X_GetDeviceMode>
 8005934:	4603      	mov	r3, r0
 8005936:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d107      	bne.n	8005950 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005940:	7bbb      	ldrb	r3, [r7, #14]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f898 	bl	8005a7c <VL53L0X_StartMeasurement>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 f976 	bl	8006c4a <VL53L0X_measurement_poll_for_completion>
 800595e:	4603      	mov	r3, r0
 8005960:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2203      	movs	r2, #3
 8005974:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005990:	2300      	movs	r3, #0
 8005992:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005994:	2301      	movs	r3, #1
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f001 f918 	bl	8006bd0 <VL53L0X_perform_ref_calibration>
 80059a0:	4603      	mov	r3, r0
 80059a2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80059a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059bc:	2300      	movs	r3, #0
 80059be:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80059c6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80059c8:	7dbb      	ldrb	r3, [r7, #22]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d005      	beq.n	80059da <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80059ce:	7dbb      	ldrb	r3, [r7, #22]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d002      	beq.n	80059da <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80059d4:	7dbb      	ldrb	r3, [r7, #22]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d147      	bne.n	8005a6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80059da:	f107 030c 	add.w	r3, r7, #12
 80059de:	f107 0210 	add.w	r2, r7, #16
 80059e2:	2101      	movs	r1, #1
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa9f 	bl	8005f28 <VL53L0X_GetInterruptThresholds>
 80059ea:	4603      	mov	r3, r0
 80059ec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80059f4:	d803      	bhi.n	80059fe <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80059f6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80059f8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80059fc:	d935      	bls.n	8005a6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80059fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d131      	bne.n	8005a6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d006      	beq.n	8005a1a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005a0c:	491a      	ldr	r1, [pc, #104]	; (8005a78 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f002 f87e 	bl	8007b10 <VL53L0X_load_tuning_settings>
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]
 8005a18:	e027      	b.n	8005a6a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	21ff      	movs	r1, #255	; 0xff
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff f8a2 	bl	8004b68 <VL53L0X_WrByte>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2170      	movs	r1, #112	; 0x70
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff f898 	bl	8004b68 <VL53L0X_WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a42:	2200      	movs	r2, #0
 8005a44:	21ff      	movs	r1, #255	; 0xff
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff f88e 	bl	8004b68 <VL53L0X_WrByte>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005a56:	2200      	movs	r2, #0
 8005a58:	2180      	movs	r1, #128	; 0x80
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff f884 	bl	8004b68 <VL53L0X_WrByte>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	2000033c 	.word	0x2000033c

08005a7c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a8c:	f107 030e 	add.w	r3, r7, #14
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fbe2 	bl	800525c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005a98:	2201      	movs	r2, #1
 8005a9a:	2180      	movs	r1, #128	; 0x80
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff f863 	bl	8004b68 <VL53L0X_WrByte>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	21ff      	movs	r1, #255	; 0xff
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff f85c 	bl	8004b68 <VL53L0X_WrByte>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff f855 	bl	8004b68 <VL53L0X_WrByte>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2191      	movs	r1, #145	; 0x91
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff f84b 	bl	8004b68 <VL53L0X_WrByte>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	2100      	movs	r1, #0
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff f844 	bl	8004b68 <VL53L0X_WrByte>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	21ff      	movs	r1, #255	; 0xff
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff f83d 	bl	8004b68 <VL53L0X_WrByte>
 8005aee:	4603      	mov	r3, r0
 8005af0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005af2:	2200      	movs	r2, #0
 8005af4:	2180      	movs	r1, #128	; 0x80
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff f836 	bl	8004b68 <VL53L0X_WrByte>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d054      	beq.n	8005bb0 <VL53L0X_StartMeasurement+0x134>
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	dc6c      	bgt.n	8005be4 <VL53L0X_StartMeasurement+0x168>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <VL53L0X_StartMeasurement+0x98>
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d034      	beq.n	8005b7c <VL53L0X_StartMeasurement+0x100>
 8005b12:	e067      	b.n	8005be4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005b14:	2201      	movs	r2, #1
 8005b16:	2100      	movs	r1, #0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff f825 	bl	8004b68 <VL53L0X_WrByte>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d15d      	bne.n	8005bea <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005b38:	f107 030d 	add.w	r3, r7, #13
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2100      	movs	r1, #0
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff f893 	bl	8004c6c <VL53L0X_RdByte>
 8005b46:	4603      	mov	r3, r0
 8005b48:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005b50:	7b7a      	ldrb	r2, [r7, #13]
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	4013      	ands	r3, r2
 8005b56:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005b58:	7bfa      	ldrb	r2, [r7, #15]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d107      	bne.n	8005b6e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b6c:	d3e1      	bcc.n	8005b32 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b74:	d339      	bcc.n	8005bea <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005b76:	23f9      	movs	r3, #249	; 0xf9
 8005b78:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005b7a:	e036      	b.n	8005bea <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005b84:	2101      	movs	r1, #1
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff ff12 	bl	80059b0 <VL53L0X_CheckAndLoadInterruptSettings>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005b90:	2202      	movs	r2, #2
 8005b92:	2100      	movs	r1, #0
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fe ffe7 	bl	8004b68 <VL53L0X_WrByte>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d123      	bne.n	8005bee <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005bae:	e01e      	b.n	8005bee <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005bb8:	2101      	movs	r1, #1
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff fef8 	bl	80059b0 <VL53L0X_CheckAndLoadInterruptSettings>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7fe ffcd 	bl	8004b68 <VL53L0X_WrByte>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2204      	movs	r2, #4
 8005bde:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005be2:	e006      	b.n	8005bf2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005be4:	23f8      	movs	r3, #248	; 0xf8
 8005be6:	75fb      	strb	r3, [r7, #23]
 8005be8:	e004      	b.n	8005bf4 <VL53L0X_StartMeasurement+0x178>
		break;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <VL53L0X_StartMeasurement+0x178>
		break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <VL53L0X_StartMeasurement+0x178>
		break;
 8005bf2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005c14:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d112      	bne.n	8005c42 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005c1c:	f107 0308 	add.w	r3, r7, #8
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9f6 	bl	8006014 <VL53L0X_GetInterruptMaskStatus>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d103      	bne.n	8005c3a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2201      	movs	r2, #1
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	e01c      	b.n	8005c74 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e018      	b.n	8005c74 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005c42:	f107 030d 	add.w	r3, r7, #13
 8005c46:	461a      	mov	r2, r3
 8005c48:	2114      	movs	r1, #20
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff f80e 	bl	8004c6c <VL53L0X_RdByte>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005c5c:	7b7b      	ldrb	r3, [r7, #13]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e002      	b.n	8005c74 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005c80:	b5b0      	push	{r4, r5, r7, lr}
 8005c82:	b096      	sub	sp, #88	; 0x58
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005c90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c94:	230c      	movs	r3, #12
 8005c96:	2114      	movs	r1, #20
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fe ff39 	bl	8004b10 <VL53L0X_ReadMulti>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005ca4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 80d1 	bne.w	8005e50 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005cba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	4413      	add	r3, r2
 8005ccc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005cd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	025b      	lsls	r3, r3, #9
 8005cec:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005cf4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4413      	add	r3, r2
 8005d06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005d0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d0e:	025b      	lsls	r3, r3, #9
 8005d10:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005d16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005d32:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005d34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005d42:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005d4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d54:	d046      	beq.n	8005de4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005d56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d58:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d64:	4a57      	ldr	r2, [pc, #348]	; (8005ec4 <VL53L0X_GetRangingMeasurementData+0x244>)
 8005d66:	fb82 1203 	smull	r1, r2, r2, r3
 8005d6a:	1192      	asrs	r2, r2, #6
 8005d6c:	17db      	asrs	r3, r3, #31
 8005d6e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005d70:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	7f1b      	ldrb	r3, [r3, #28]
 8005d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005d82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d02c      	beq.n	8005de4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005d8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d8c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d10d      	bne.n	8005db8 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005d9c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005da4:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005da8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005dac:	e016      	b.n	8005ddc <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005dae:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005db2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005db6:	e011      	b.n	8005ddc <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005db8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dbe:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005dc2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dc4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005dcc:	121b      	asrs	r3, r3, #8
 8005dce:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005dd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005ddc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005de0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005de4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00d      	beq.n	8005e08 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005dec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005df0:	089b      	lsrs	r3, r3, #2
 8005df2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005df8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	019b      	lsls	r3, r3, #6
 8005e00:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	75da      	strb	r2, [r3, #23]
 8005e06:	e006      	b.n	8005e16 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005e0e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005e16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e1a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005e1e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f002 fb0d 	bl	800844c <VL53L0X_get_pal_range_status>
 8005e32:	4603      	mov	r3, r0
 8005e34:	461a      	mov	r2, r3
 8005e36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005e40:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005e48:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d12f      	bne.n	8005eb8 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f107 040c 	add.w	r4, r7, #12
 8005e5e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005e72:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005e80:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005e86:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005e8c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005e92:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005e98:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005e9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005ea8:	f107 050c 	add.w	r5, r7, #12
 8005eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005eb8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3750      	adds	r7, #80	; 0x50
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec4:	10624dd3 	.word	0x10624dd3

08005ec8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff f993 	bl	8005204 <VL53L0X_SetDeviceMode>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fd16 	bl	800591c <VL53L0X_PerformSingleMeasurement>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff febe 	bl	8005c80 <VL53L0X_GetRangingMeasurementData>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005f10:	2100      	movs	r1, #0
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f83e 	bl	8005f94 <VL53L0X_ClearInterruptMask>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	460b      	mov	r3, r1
 8005f36:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005f3c:	f107 0314 	add.w	r3, r7, #20
 8005f40:	461a      	mov	r2, r3
 8005f42:	210e      	movs	r1, #14
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7fe febb 	bl	8004cc0 <VL53L0X_RdWord>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005f4e:	8abb      	ldrh	r3, [r7, #20]
 8005f50:	045b      	lsls	r3, r3, #17
 8005f52:	461a      	mov	r2, r3
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <VL53L0X_GetInterruptThresholds+0x68>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10f      	bne.n	8005f84 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005f64:	f107 0314 	add.w	r3, r7, #20
 8005f68:	461a      	mov	r2, r3
 8005f6a:	210c      	movs	r1, #12
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7fe fea7 	bl	8004cc0 <VL53L0X_RdWord>
 8005f72:	4603      	mov	r3, r0
 8005f74:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005f76:	8abb      	ldrh	r3, [r7, #20]
 8005f78:	045b      	lsls	r3, r3, #17
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <VL53L0X_GetInterruptThresholds+0x68>)
 8005f7e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	1ffe0000 	.word	0x1ffe0000

08005f94 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	210b      	movs	r1, #11
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fe fddc 	bl	8004b68 <VL53L0X_WrByte>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	210b      	movs	r1, #11
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fe fdd5 	bl	8004b68 <VL53L0X_WrByte>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005fc8:	f107 030d 	add.w	r3, r7, #13
 8005fcc:	461a      	mov	r2, r3
 8005fce:	2113      	movs	r1, #19
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7fe fe4b 	bl	8004c6c <VL53L0X_RdByte>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	461a      	mov	r2, r3
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005fe6:	7b7b      	ldrb	r3, [r7, #13]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d803      	bhi.n	8005ffe <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0d3      	beq.n	8005fa6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006004:	23f4      	movs	r3, #244	; 0xf4
 8006006:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006022:	f107 030e 	add.w	r3, r7, #14
 8006026:	461a      	mov	r2, r3
 8006028:	2113      	movs	r1, #19
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fe fe1e 	bl	8004c6c <VL53L0X_RdByte>
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	f003 0207 	and.w	r2, r3, #7
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	f003 0318 	and.w	r3, r3, #24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006048:	23fa      	movs	r3, #250	; 0xfa
 800604a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800604c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006064:	2300      	movs	r3, #0
 8006066:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fa03 	bl	8006478 <VL53L0X_perform_ref_spad_management>
 8006072:	4603      	mov	r3, r0
 8006074:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8006076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800608c:	2300      	movs	r3, #0
 800608e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006090:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006094:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8006096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800609a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800609c:	f107 0308 	add.w	r3, r7, #8
 80060a0:	461a      	mov	r2, r3
 80060a2:	2128      	movs	r1, #40	; 0x28
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fe fe0b 	bl	8004cc0 <VL53L0X_RdWord>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80060ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d11e      	bne.n	80060f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80060b6:	893b      	ldrh	r3, [r7, #8]
 80060b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060bc:	b29b      	uxth	r3, r3
 80060be:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80060c0:	893b      	ldrh	r3, [r7, #8]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	dd0b      	ble.n	80060e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80060cc:	893a      	ldrh	r2, [r7, #8]
 80060ce:	897b      	ldrh	r3, [r7, #10]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	b21b      	sxth	r3, r3
 80060d6:	461a      	mov	r2, r3
					* 250;
 80060d8:	23fa      	movs	r3, #250	; 0xfa
 80060da:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e007      	b.n	80060f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80060e4:	893b      	ldrh	r3, [r7, #8]
 80060e6:	b21b      	sxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	23fa      	movs	r3, #250	; 0xfa
 80060ec:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80060f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006100:	b480      	push	{r7}
 8006102:	b08b      	sub	sp, #44	; 0x2c
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800610e:	2308      	movs	r3, #8
 8006110:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	f04f 32ff 	mov.w	r2, #4294967295
 800611c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	fbb2 f3f3 	udiv	r3, r2, r3
 8006126:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006130:	69b9      	ldr	r1, [r7, #24]
 8006132:	fb01 f202 	mul.w	r2, r1, r2
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	e030      	b.n	80061a2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	4413      	add	r3, r2
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	429a      	cmp	r2, r3
 8006154:	d11e      	bne.n	8006194 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006156:	7ffa      	ldrb	r2, [r7, #31]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	fa42 f303 	asr.w	r3, r2, r3
 800615e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006164:	e016      	b.n	8006194 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006166:	7ffb      	ldrb	r3, [r7, #31]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <get_next_good_spad+0x88>
				success = 1;
 8006170:	2301      	movs	r3, #1
 8006172:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	fb03 f202 	mul.w	r2, r3, r2
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	4413      	add	r3, r2
 8006180:	461a      	mov	r2, r3
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	601a      	str	r2, [r3, #0]
				break;
 8006186:	e009      	b.n	800619c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006188:	7ffb      	ldrb	r3, [r7, #31]
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	3301      	adds	r3, #1
 8006192:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	429a      	cmp	r2, r3
 800619a:	d3e4      	bcc.n	8006166 <get_next_good_spad+0x66>
				coarseIndex++) {
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	3301      	adds	r3, #1
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80061a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d202      	bcs.n	80061b0 <get_next_good_spad+0xb0>
 80061aa:	7fbb      	ldrb	r3, [r7, #30]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0c7      	beq.n	8006140 <get_next_good_spad+0x40>
		}
	}
}
 80061b0:	bf00      	nop
 80061b2:	372c      	adds	r7, #44	; 0x2c
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	099b      	lsrs	r3, r3, #6
 80061cc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80061ce:	4a07      	ldr	r2, [pc, #28]	; (80061ec <is_aperture+0x30>)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <is_aperture+0x22>
		isAperture = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	200004f4 	.word	0x200004f4

080061f0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	; 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80061fc:	2300      	movs	r3, #0
 80061fe:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006200:	2308      	movs	r3, #8
 8006202:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	fbb2 f3f3 	udiv	r3, r2, r3
 800620c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	fbb3 f2f2 	udiv	r2, r3, r2
 8006216:	69b9      	ldr	r1, [r7, #24]
 8006218:	fb01 f202 	mul.w	r2, r1, r2
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	429a      	cmp	r2, r3
 8006226:	d302      	bcc.n	800622e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006228:	23ce      	movs	r3, #206	; 0xce
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e010      	b.n	8006250 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b25a      	sxtb	r2, r3
 8006238:	2101      	movs	r1, #1
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	b25b      	sxtb	r3, r3
 8006242:	4313      	orrs	r3, r2
 8006244:	b259      	sxtb	r1, r3
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4413      	add	r3, r2
 800624c:	b2ca      	uxtb	r2, r1
 800624e:	701a      	strb	r2, [r3, #0]

	return status;
 8006250:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3724      	adds	r7, #36	; 0x24
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800626a:	2306      	movs	r3, #6
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	21b0      	movs	r1, #176	; 0xb0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fe fc1d 	bl	8004ab0 <VL53L0X_WriteMulti>
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800627a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006290:	2306      	movs	r3, #6
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	21b0      	movs	r1, #176	; 0xb0
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fe fc3a 	bl	8004b10 <VL53L0X_ReadMulti>
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80062a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08c      	sub	sp, #48	; 0x30
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	460b      	mov	r3, r1
 80062ba:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80062bc:	2300      	movs	r3, #0
 80062be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80062c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80062c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80062ca:	2300      	movs	r3, #0
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ce:	e02b      	b.n	8006328 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80062d0:	f107 031c 	add.w	r3, r7, #28
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ff11 	bl	8006100 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d103      	bne.n	80062ee <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80062e6:	23ce      	movs	r3, #206	; 0xce
 80062e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80062ec:	e020      	b.n	8006330 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	4413      	add	r3, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff ff60 	bl	80061bc <is_aperture>
 80062fc:	4603      	mov	r3, r0
 80062fe:	461a      	mov	r2, r3
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006306:	23ce      	movs	r3, #206	; 0xce
 8006308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800630c:	e010      	b.n	8006330 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006316:	6838      	ldr	r0, [r7, #0]
 8006318:	f7ff ff6a 	bl	80061f0 <enable_spad_bit>
		currentSpad++;
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	3301      	adds	r3, #1
 8006320:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	3301      	adds	r3, #1
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
 8006328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800632c:	429a      	cmp	r2, r3
 800632e:	d3cf      	bcc.n	80062d0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006332:	6a3a      	ldr	r2, [r7, #32]
 8006334:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006336:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7ff ff8d 	bl	8006260 <set_ref_spad_map>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800634c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006350:	2b00      	cmp	r3, #0
 8006352:	d121      	bne.n	8006398 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006354:	f107 0314 	add.w	r3, r7, #20
 8006358:	4619      	mov	r1, r3
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7ff ff93 	bl	8006286 <get_ref_spad_map>
 8006360:	4603      	mov	r3, r0
 8006362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800636a:	e011      	b.n	8006390 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	4413      	add	r3, r2
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	f107 0114 	add.w	r1, r7, #20
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	440b      	add	r3, r1
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d003      	beq.n	800638a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006382:	23ce      	movs	r3, #206	; 0xce
 8006384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006388:	e006      	b.n	8006398 <enable_ref_spads+0xec>
			}
			i++;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	3301      	adds	r3, #1
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	429a      	cmp	r2, r3
 8006396:	d3e9      	bcc.n	800636c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006398:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800639c:	4618      	mov	r0, r3
 800639e:	3730      	adds	r7, #48	; 0x30
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08a      	sub	sp, #40	; 0x28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80063c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80063c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d107      	bne.n	80063dc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80063cc:	22c0      	movs	r2, #192	; 0xc0
 80063ce:	2101      	movs	r1, #1
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fe fbc9 	bl	8004b68 <VL53L0X_WrByte>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80063dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d108      	bne.n	80063f6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80063e4:	f107 0308 	add.w	r3, r7, #8
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fd6c 	bl	8005ec8 <VL53L0X_PerformSingleRangingMeasurement>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80063f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d107      	bne.n	800640e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80063fe:	2201      	movs	r2, #1
 8006400:	21ff      	movs	r1, #255	; 0xff
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fe fbb0 	bl	8004b68 <VL53L0X_WrByte>
 8006408:	4603      	mov	r3, r0
 800640a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800640e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006412:	2b00      	cmp	r3, #0
 8006414:	d107      	bne.n	8006426 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	21b6      	movs	r1, #182	; 0xb6
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fe fc50 	bl	8004cc0 <VL53L0X_RdWord>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006426:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800642e:	2200      	movs	r2, #0
 8006430:	21ff      	movs	r1, #255	; 0xff
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fe fb98 	bl	8004b68 <VL53L0X_WrByte>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800643e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006442:	2b00      	cmp	r3, #0
 8006444:	d112      	bne.n	800646c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006446:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800644a:	461a      	mov	r2, r3
 800644c:	2101      	movs	r1, #1
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fe fb8a 	bl	8004b68 <VL53L0X_WrByte>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800645a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006468:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800646c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006470:	4618      	mov	r0, r3
 8006472:	3728      	adds	r7, #40	; 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b09d      	sub	sp, #116	; 0x74
 800647c:	af06      	add	r7, sp, #24
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006484:	2300      	movs	r3, #0
 8006486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800648a:	23b4      	movs	r3, #180	; 0xb4
 800648c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006490:	2303      	movs	r3, #3
 8006492:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006494:	232c      	movs	r3, #44	; 0x2c
 8006496:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80064a4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80064a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80064b2:	2306      	movs	r3, #6
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80064dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80064de:	2300      	movs	r3, #0
 80064e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e2:	e009      	b.n	80064f8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80064f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f4:	3301      	adds	r3, #1
 80064f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d3f1      	bcc.n	80064e4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006500:	2201      	movs	r2, #1
 8006502:	21ff      	movs	r1, #255	; 0xff
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7fe fb2f 	bl	8004b68 <VL53L0X_WrByte>
 800650a:	4603      	mov	r3, r0
 800650c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006510:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006518:	2200      	movs	r2, #0
 800651a:	214f      	movs	r1, #79	; 0x4f
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f7fe fb23 	bl	8004b68 <VL53L0X_WrByte>
 8006522:	4603      	mov	r3, r0
 8006524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006528:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800652c:	2b00      	cmp	r3, #0
 800652e:	d107      	bne.n	8006540 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006530:	222c      	movs	r2, #44	; 0x2c
 8006532:	214e      	movs	r1, #78	; 0x4e
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7fe fb17 	bl	8004b68 <VL53L0X_WrByte>
 800653a:	4603      	mov	r3, r0
 800653c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006540:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006544:	2b00      	cmp	r3, #0
 8006546:	d107      	bne.n	8006558 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006548:	2200      	movs	r2, #0
 800654a:	21ff      	movs	r1, #255	; 0xff
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7fe fb0b 	bl	8004b68 <VL53L0X_WrByte>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006558:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006560:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006564:	461a      	mov	r2, r3
 8006566:	21b6      	movs	r1, #182	; 0xb6
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7fe fafd 	bl	8004b68 <VL53L0X_WrByte>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006574:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006578:	2b00      	cmp	r3, #0
 800657a:	d107      	bne.n	800658c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800657c:	2200      	movs	r2, #0
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f7fe faf1 	bl	8004b68 <VL53L0X_WrByte>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800658c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006594:	f107 0210 	add.w	r2, r7, #16
 8006598:	f107 0111 	add.w	r1, r7, #17
 800659c:	2300      	movs	r3, #0
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fb16 	bl	8006bd0 <VL53L0X_perform_ref_calibration>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80065aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d121      	bne.n	80065f6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80065b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80065ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80065d2:	f107 0218 	add.w	r2, r7, #24
 80065d6:	9204      	str	r2, [sp, #16]
 80065d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065da:	9203      	str	r2, [sp, #12]
 80065dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065de:	9202      	str	r2, [sp, #8]
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	4623      	mov	r3, r4
 80065e8:	4602      	mov	r2, r0
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff fe5e 	bl	80062ac <enable_ref_spads>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80065f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d174      	bne.n	80066e8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006602:	f107 0312 	add.w	r3, r7, #18
 8006606:	4619      	mov	r1, r3
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fecb 	bl	80063a4 <perform_ref_signal_measurement>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006614:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006618:	2b00      	cmp	r3, #0
 800661a:	d161      	bne.n	80066e0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800661c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800661e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006620:	429a      	cmp	r2, r3
 8006622:	d25d      	bcs.n	80066e0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006624:	2300      	movs	r3, #0
 8006626:	64bb      	str	r3, [r7, #72]	; 0x48
 8006628:	e009      	b.n	800663e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662e:	4413      	add	r3, r2
 8006630:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663a:	3301      	adds	r3, #1
 800663c:	64bb      	str	r3, [r7, #72]	; 0x48
 800663e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	429a      	cmp	r2, r3
 8006644:	d3f1      	bcc.n	800662a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006646:	e002      	b.n	800664e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800664a:	3301      	adds	r3, #1
 800664c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800664e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006654:	4413      	add	r3, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fdb0 	bl	80061bc <is_aperture>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006662:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	429a      	cmp	r2, r3
 8006668:	d3ee      	bcc.n	8006648 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800666a:	2301      	movs	r3, #1
 800666c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800667e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006682:	f107 0218 	add.w	r2, r7, #24
 8006686:	9204      	str	r2, [sp, #16]
 8006688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800668a:	9203      	str	r2, [sp, #12]
 800668c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800668e:	9202      	str	r2, [sp, #8]
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4623      	mov	r3, r4
 8006698:	4602      	mov	r2, r0
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff fe06 	bl	80062ac <enable_ref_spads>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80066a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d11b      	bne.n	80066e6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80066b2:	f107 0312 	add.w	r3, r7, #18
 80066b6:	4619      	mov	r1, r3
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff fe73 	bl	80063a4 <perform_ref_signal_measurement>
 80066be:	4603      	mov	r3, r0
 80066c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80066c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10c      	bne.n	80066e6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80066cc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80066ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d208      	bcs.n	80066e6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80066de:	e002      	b.n	80066e6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e4:	e000      	b.n	80066e8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80066e6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80066e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 80af 	bne.w	8006850 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80066f2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80066f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80066f6:	429a      	cmp	r2, r3
 80066f8:	f240 80aa 	bls.w	8006850 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80066fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800670c:	f107 031c 	add.w	r3, r7, #28
 8006710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006712:	4618      	mov	r0, r3
 8006714:	f002 f8a0 	bl	8008858 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006718:	8a7b      	ldrh	r3, [r7, #18]
 800671a:	461a      	mov	r2, r3
 800671c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	bfb8      	it	lt
 8006724:	425b      	neglt	r3, r3
 8006726:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800672e:	e086      	b.n	800683e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006736:	f107 0314 	add.w	r3, r7, #20
 800673a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800673c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673e:	f7ff fcdf 	bl	8006100 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d103      	bne.n	8006752 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800674a:	23ce      	movs	r3, #206	; 0xce
 800674c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006750:	e07e      	b.n	8006850 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006752:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4413      	add	r3, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fd2e 	bl	80061bc <is_aperture>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006766:	4293      	cmp	r3, r2
 8006768:	d003      	beq.n	8006772 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006770:	e06e      	b.n	8006850 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006774:	3301      	adds	r3, #1
 8006776:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006782:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fd32 	bl	80061f0 <enable_spad_bit>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006792:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10c      	bne.n	80067b4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800679a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679c:	3301      	adds	r3, #1
 800679e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff fd59 	bl	8006260 <set_ref_spad_map>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80067b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d146      	bne.n	800684a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80067bc:	f107 0312 	add.w	r3, r7, #18
 80067c0:	4619      	mov	r1, r3
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fdee 	bl	80063a4 <perform_ref_signal_measurement>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80067ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d13b      	bne.n	800684e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80067d6:	8a7b      	ldrh	r3, [r7, #18]
 80067d8:	461a      	mov	r2, r3
 80067da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bfb8      	it	lt
 80067e2:	425b      	neglt	r3, r3
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80067e6:	8a7b      	ldrh	r3, [r7, #18]
 80067e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d21c      	bcs.n	8006828 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80067ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d914      	bls.n	8006820 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80067f6:	f107 031c 	add.w	r3, r7, #28
 80067fa:	4619      	mov	r1, r3
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff fd2f 	bl	8006260 <set_ref_spad_map>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800680e:	f107 011c 	add.w	r1, r7, #28
 8006812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006814:	4618      	mov	r0, r3
 8006816:	f002 f81f 	bl	8008858 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800681a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681c:	3b01      	subs	r3, #1
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e00a      	b.n	800683e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006832:	f107 031c 	add.w	r3, r7, #28
 8006836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006838:	4618      	mov	r0, r3
 800683a:	f002 f80d 	bl	8008858 <memcpy>
		while (!complete) {
 800683e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006842:	2b00      	cmp	r3, #0
 8006844:	f43f af74 	beq.w	8006730 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006848:	e002      	b.n	8006850 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800684e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006850:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006854:	2b00      	cmp	r3, #0
 8006856:	d115      	bne.n	8006884 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800685c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006864:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	b2da      	uxtb	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006884:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006888:	4618      	mov	r0, r3
 800688a:	375c      	adds	r7, #92	; 0x5c
 800688c:	46bd      	mov	sp, r7
 800688e:	bd90      	pop	{r4, r7, pc}

08006890 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80068a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	2100      	movs	r1, #0
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fe f957 	bl	8004b68 <VL53L0X_WrByte>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80068be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f9bf 	bl	8006c4a <VL53L0X_measurement_poll_for_completion>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80068d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80068d8:	2100      	movs	r1, #0
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fb5a 	bl	8005f94 <VL53L0X_ClearInterruptMask>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80068e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80068ec:	2200      	movs	r2, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fe f939 	bl	8004b68 <VL53L0X_WrByte>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]

	return Status;
 80068fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	4608      	mov	r0, r1
 8006910:	4611      	mov	r1, r2
 8006912:	461a      	mov	r2, r3
 8006914:	4603      	mov	r3, r0
 8006916:	70fb      	strb	r3, [r7, #3]
 8006918:	460b      	mov	r3, r1
 800691a:	70bb      	strb	r3, [r7, #2]
 800691c:	4613      	mov	r3, r2
 800691e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006928:	2201      	movs	r2, #1
 800692a:	21ff      	movs	r1, #255	; 0xff
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fe f91b 	bl	8004b68 <VL53L0X_WrByte>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	4313      	orrs	r3, r2
 800693a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800693c:	2200      	movs	r2, #0
 800693e:	2100      	movs	r1, #0
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fe f911 	bl	8004b68 <VL53L0X_WrByte>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	4313      	orrs	r3, r2
 800694e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006950:	2200      	movs	r2, #0
 8006952:	21ff      	movs	r1, #255	; 0xff
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7fe f907 	bl	8004b68 <VL53L0X_WrByte>
 800695a:	4603      	mov	r3, r0
 800695c:	461a      	mov	r2, r3
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	4313      	orrs	r3, r2
 8006962:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01e      	beq.n	80069a8 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800696a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	21cb      	movs	r1, #203	; 0xcb
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe f978 	bl	8004c6c <VL53L0X_RdByte>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	4313      	orrs	r3, r2
 8006984:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006986:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d02a      	beq.n	80069e4 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800698e:	f107 030e 	add.w	r3, r7, #14
 8006992:	461a      	mov	r2, r3
 8006994:	21ee      	movs	r1, #238	; 0xee
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fe f968 	bl	8004c6c <VL53L0X_RdByte>
 800699c:	4603      	mov	r3, r0
 800699e:	461a      	mov	r2, r3
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	73fb      	strb	r3, [r7, #15]
 80069a6:	e01d      	b.n	80069e4 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80069a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80069b0:	78bb      	ldrb	r3, [r7, #2]
 80069b2:	461a      	mov	r2, r3
 80069b4:	21cb      	movs	r1, #203	; 0xcb
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fe f8d6 	bl	8004b68 <VL53L0X_WrByte>
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80069c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80069ce:	787b      	ldrb	r3, [r7, #1]
 80069d0:	2280      	movs	r2, #128	; 0x80
 80069d2:	21ee      	movs	r1, #238	; 0xee
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fe f915 	bl	8004c04 <VL53L0X_UpdateByte>
 80069da:	4603      	mov	r3, r0
 80069dc:	461a      	mov	r2, r3
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80069e4:	2201      	movs	r2, #1
 80069e6:	21ff      	movs	r1, #255	; 0xff
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7fe f8bd 	bl	8004b68 <VL53L0X_WrByte>
 80069ee:	4603      	mov	r3, r0
 80069f0:	461a      	mov	r2, r3
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80069f8:	2201      	movs	r2, #1
 80069fa:	2100      	movs	r1, #0
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fe f8b3 	bl	8004b68 <VL53L0X_WrByte>
 8006a02:	4603      	mov	r3, r0
 8006a04:	461a      	mov	r2, r3
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	21ff      	movs	r1, #255	; 0xff
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fe f8a9 	bl	8004b68 <VL53L0X_WrByte>
 8006a16:	4603      	mov	r3, r0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	f023 0310 	bic.w	r3, r3, #16
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	701a      	strb	r2, [r3, #0]

	return Status;
 8006a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	; 0x28
 8006a3c:	af04      	add	r7, sp, #16
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4611      	mov	r1, r2
 8006a44:	461a      	mov	r2, r3
 8006a46:	460b      	mov	r3, r1
 8006a48:	71fb      	strb	r3, [r7, #7]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006a62:	79bb      	ldrb	r3, [r7, #6]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006a6e:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006a70:	2201      	movs	r2, #1
 8006a72:	2101      	movs	r1, #1
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7fe f877 	bl	8004b68 <VL53L0X_WrByte>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d105      	bne.n	8006a92 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006a86:	2140      	movs	r1, #64	; 0x40
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff ff01 	bl	8006890 <VL53L0X_perform_single_ref_calibration>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d115      	bne.n	8006ac6 <VL53L0X_perform_vhv_calibration+0x8e>
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d112      	bne.n	8006ac6 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006aa0:	7d39      	ldrb	r1, [r7, #20]
 8006aa2:	7d7a      	ldrb	r2, [r7, #21]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	9302      	str	r3, [sp, #8]
 8006aac:	f107 0313 	add.w	r3, r7, #19
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	2101      	movs	r1, #1
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7ff ff23 	bl	8006906 <VL53L0X_ref_calibration_io>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75fb      	strb	r3, [r7, #23]
 8006ac4:	e002      	b.n	8006acc <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d112      	bne.n	8006afa <VL53L0X_perform_vhv_calibration+0xc2>
 8006ad4:	79bb      	ldrb	r3, [r7, #6]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00f      	beq.n	8006afa <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006ada:	7dbb      	ldrb	r3, [r7, #22]
 8006adc:	461a      	mov	r2, r3
 8006ade:	2101      	movs	r1, #1
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7fe f841 	bl	8004b68 <VL53L0X_WrByte>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	7dba      	ldrb	r2, [r7, #22]
 8006af6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b08a      	sub	sp, #40	; 0x28
 8006b0a:	af04      	add	r7, sp, #16
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	4611      	mov	r1, r2
 8006b12:	461a      	mov	r2, r3
 8006b14:	460b      	mov	r3, r1
 8006b16:	71fb      	strb	r3, [r7, #7]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006b2c:	79bb      	ldrb	r3, [r7, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006b38:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7fe f812 	bl	8004b68 <VL53L0X_WrByte>
 8006b44:	4603      	mov	r3, r0
 8006b46:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fe9c 	bl	8006890 <VL53L0X_perform_single_ref_calibration>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d115      	bne.n	8006b90 <VL53L0X_perform_phase_calibration+0x8a>
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d112      	bne.n	8006b90 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006b6a:	7d39      	ldrb	r1, [r7, #20]
 8006b6c:	7d7a      	ldrb	r2, [r7, #21]
 8006b6e:	2301      	movs	r3, #1
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9302      	str	r3, [sp, #8]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	f107 0313 	add.w	r3, r7, #19
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	460b      	mov	r3, r1
 8006b82:	2101      	movs	r1, #1
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff febe 	bl	8006906 <VL53L0X_ref_calibration_io>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75fb      	strb	r3, [r7, #23]
 8006b8e:	e002      	b.n	8006b96 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d112      	bne.n	8006bc4 <VL53L0X_perform_phase_calibration+0xbe>
 8006b9e:	79bb      	ldrb	r3, [r7, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00f      	beq.n	8006bc4 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006ba4:	7dbb      	ldrb	r3, [r7, #22]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2101      	movs	r1, #1
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7fd ffdc 	bl	8004b68 <VL53L0X_WrByte>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006bb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	7dba      	ldrb	r2, [r7, #22]
 8006bc0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006bec:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006bee:	78fa      	ldrb	r2, [r7, #3]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff ff1f 	bl	8006a38 <VL53L0X_perform_vhv_calibration>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d107      	bne.n	8006c16 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff ff7a 	bl	8006b06 <VL53L0X_perform_phase_calibration>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10f      	bne.n	8006c3e <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006c1e:	7dbb      	ldrb	r3, [r7, #22]
 8006c20:	461a      	mov	r2, r3
 8006c22:	2101      	movs	r1, #1
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7fd ff9f 	bl	8004b68 <VL53L0X_WrByte>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	7dba      	ldrb	r2, [r7, #22]
 8006c3a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c52:	2300      	movs	r3, #0
 8006c54:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006c5e:	f107 030f 	add.w	r3, r7, #15
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fe ffcb 	bl	8005c00 <VL53L0X_GetMeasurementDataReady>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d110      	bne.n	8006c98 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d00f      	beq.n	8006c9c <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006c88:	d302      	bcc.n	8006c90 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006c8a:	23f9      	movs	r3, #249	; 0xf9
 8006c8c:	75fb      	strb	r3, [r7, #23]
			break;
 8006c8e:	e006      	b.n	8006c9e <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7fe f889 	bl	8004da8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006c96:	e7e2      	b.n	8006c5e <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8006c98:	bf00      	nop
 8006c9a:	e000      	b.n	8006c9e <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006c9c:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d06:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006d08:	e002      	b.n	8006d10 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	089b      	lsrs	r3, r3, #2
 8006d0e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d8f8      	bhi.n	8006d0a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8006d18:	e017      	b.n	8006d4a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4413      	add	r3, r2
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d30b      	bcc.n	8006d3e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	085b      	lsrs	r3, r3, #1
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4413      	add	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e002      	b.n	8006d44 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	089b      	lsrs	r3, r3, #2
 8006d48:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e4      	bne.n	8006d1a <VL53L0X_isqrt+0x24>
	}

	return res;
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <VL53L0X_calc_macro_period_ps>:
	return Status;
}


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006d6a:	f240 6277 	movw	r2, #1655	; 0x677
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8006d76:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006d7a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b087      	sub	sp, #28
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d017      	beq.n	8006de4 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006dba:	e005      	b.n	8006dc8 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006dc2:	89fb      	ldrh	r3, [r7, #14]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f4      	bne.n	8006dbc <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006de0:	4413      	add	r3, r2
 8006de2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006de4:	8afb      	ldrh	r3, [r7, #22]

}
 8006de6:	4618      	mov	r0, r3
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	4603      	mov	r3, r0
 8006dfa:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006e00:	88fb      	ldrh	r3, [r7, #6]
 8006e02:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006e04:	88fa      	ldrh	r2, [r7, #6]
 8006e06:	0a12      	lsrs	r2, r2, #8
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006e10:	68fb      	ldr	r3, [r7, #12]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
	...

08006e20 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	4619      	mov	r1, r3
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff ff91 	bl	8006d5e <VL53L0X_calc_macro_period_ps>
 8006e3c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e44:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <VL53L0X_calc_timeout_mclks+0x50>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	099b      	lsrs	r3, r3, #6
 8006e4c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e54:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	441a      	add	r2, r3
	timeout_period_mclks =
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006e66:	69fb      	ldr	r3, [r7, #28]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	10624dd3 	.word	0x10624dd3

08006e74 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	807b      	strh	r3, [r7, #2]
 8006e80:	4613      	mov	r3, r2
 8006e82:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006e88:	787b      	ldrb	r3, [r7, #1]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ff66 	bl	8006d5e <VL53L0X_calc_macro_period_ps>
 8006e92:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <VL53L0X_calc_timeout_us+0x50>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	099b      	lsrs	r3, r3, #6
 8006ea2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006ea4:	887b      	ldrh	r3, [r7, #2]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006eb0:	4a04      	ldr	r2, [pc, #16]	; (8006ec4 <VL53L0X_calc_timeout_us+0x50>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006eba:	697b      	ldr	r3, [r7, #20]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	10624dd3 	.word	0x10624dd3

08006ec8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08c      	sub	sp, #48	; 0x30
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <get_sequence_step_timeout+0x38>
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d002      	beq.n	8006f00 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006efa:	7afb      	ldrb	r3, [r7, #11]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d128      	bne.n	8006f52 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f00:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006f04:	461a      	mov	r2, r3
 8006f06:	2100      	movs	r1, #0
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7fe f9f8 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006f14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006f1c:	f107 0320 	add.w	r3, r7, #32
 8006f20:	461a      	mov	r2, r3
 8006f22:	2146      	movs	r1, #70	; 0x46
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7fd fea1 	bl	8004c6c <VL53L0X_RdByte>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006f30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff ff5b 	bl	8006df2 <VL53L0X_decode_timeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006f40:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f46:	4619      	mov	r1, r3
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff ff93 	bl	8006e74 <VL53L0X_calc_timeout_us>
 8006f4e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006f50:	e092      	b.n	8007078 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d135      	bne.n	8006fc4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	2100      	movs	r1, #0
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7fe f9cc 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006f6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f040 8081 	bne.w	8007078 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f76:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7fe f9bd 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006f8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006f92:	f107 031e 	add.w	r3, r7, #30
 8006f96:	461a      	mov	r2, r3
 8006f98:	2151      	movs	r1, #81	; 0x51
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7fd fe90 	bl	8004cc0 <VL53L0X_RdWord>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006fa6:	8bfb      	ldrh	r3, [r7, #30]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff ff22 	bl	8006df2 <VL53L0X_decode_timeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006fb2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006fb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7ff ff5a 	bl	8006e74 <VL53L0X_calc_timeout_us>
 8006fc0:	62b8      	str	r0, [r7, #40]	; 0x28
 8006fc2:	e059      	b.n	8007078 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d156      	bne.n	8007078 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006fca:	f107 0314 	add.w	r3, r7, #20
 8006fce:	4619      	mov	r1, r3
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7fe f9fd 	bl	80053d0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01d      	beq.n	800701c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006fe0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7fe f988 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006ff4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10f      	bne.n	800701c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006ffc:	f107 031e 	add.w	r3, r7, #30
 8007000:	461a      	mov	r2, r3
 8007002:	2151      	movs	r1, #81	; 0x51
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7fd fe5b 	bl	8004cc0 <VL53L0X_RdWord>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007010:	8bfb      	ldrh	r3, [r7, #30]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff feed 	bl	8006df2 <VL53L0X_decode_timeout>
 8007018:	4603      	mov	r3, r0
 800701a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800701c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007024:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007028:	461a      	mov	r2, r3
 800702a:	2101      	movs	r1, #1
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7fe f966 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007038:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10f      	bne.n	8007060 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007040:	f107 031c 	add.w	r3, r7, #28
 8007044:	461a      	mov	r2, r3
 8007046:	2171      	movs	r1, #113	; 0x71
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7fd fe39 	bl	8004cc0 <VL53L0X_RdWord>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007054:	8bbb      	ldrh	r3, [r7, #28]
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fecb 	bl	8006df2 <VL53L0X_decode_timeout>
 800705c:	4603      	mov	r3, r0
 800705e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007062:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007068:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800706c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800706e:	4619      	mov	r1, r3
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff feff 	bl	8006e74 <VL53L0X_calc_timeout_us>
 8007076:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800707c:	601a      	str	r2, [r3, #0]

	return Status;
 800707e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007082:	4618      	mov	r0, r3
 8007084:	3730      	adds	r7, #48	; 0x30
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b08a      	sub	sp, #40	; 0x28
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	460b      	mov	r3, r1
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007098:	2300      	movs	r3, #0
 800709a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800709e:	7afb      	ldrb	r3, [r7, #11]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <set_sequence_step_timeout+0x26>
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d002      	beq.n	80070b0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d138      	bne.n	8007122 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80070b0:	f107 031b 	add.w	r3, r7, #27
 80070b4:	461a      	mov	r2, r3
 80070b6:	2100      	movs	r1, #0
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7fe f920 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 80070be:	4603      	mov	r3, r0
 80070c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80070c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11a      	bne.n	8007102 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80070cc:	7efb      	ldrb	r3, [r7, #27]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff fea4 	bl	8006e20 <VL53L0X_calc_timeout_mclks>
 80070d8:	4603      	mov	r3, r0
 80070da:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80070dc:	8bbb      	ldrh	r3, [r7, #28]
 80070de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e2:	d903      	bls.n	80070ec <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80070e4:	23ff      	movs	r3, #255	; 0xff
 80070e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070ea:	e004      	b.n	80070f6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80070ec:	8bbb      	ldrh	r3, [r7, #28]
 80070ee:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80070f0:	3b01      	subs	r3, #1
 80070f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007102:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007106:	2b00      	cmp	r3, #0
 8007108:	f040 80ab 	bne.w	8007262 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800710c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007110:	461a      	mov	r2, r3
 8007112:	2146      	movs	r1, #70	; 0x46
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7fd fd27 	bl	8004b68 <VL53L0X_WrByte>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007120:	e09f      	b.n	8007262 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	2b03      	cmp	r3, #3
 8007126:	d135      	bne.n	8007194 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007128:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800712c:	2b00      	cmp	r3, #0
 800712e:	d11b      	bne.n	8007168 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007130:	f107 031b 	add.w	r3, r7, #27
 8007134:	461a      	mov	r2, r3
 8007136:	2100      	movs	r1, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7fe f8e0 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007144:	7efb      	ldrb	r3, [r7, #27]
 8007146:	461a      	mov	r2, r3
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff fe68 	bl	8006e20 <VL53L0X_calc_timeout_mclks>
 8007150:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007152:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fe1f 	bl	8006d9a <VL53L0X_encode_timeout>
 800715c:	4603      	mov	r3, r0
 800715e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007160:	8b3a      	ldrh	r2, [r7, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007168:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800716c:	2b00      	cmp	r3, #0
 800716e:	d108      	bne.n	8007182 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007170:	8b3b      	ldrh	r3, [r7, #24]
 8007172:	461a      	mov	r2, r3
 8007174:	2151      	movs	r1, #81	; 0x51
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7fd fd1a 	bl	8004bb0 <VL53L0X_WrWord>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007186:	2b00      	cmp	r3, #0
 8007188:	d16b      	bne.n	8007262 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007192:	e066      	b.n	8007262 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007194:	7afb      	ldrb	r3, [r7, #11]
 8007196:	2b04      	cmp	r3, #4
 8007198:	d160      	bne.n	800725c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800719a:	f107 0310 	add.w	r3, r7, #16
 800719e:	4619      	mov	r1, r3
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f7fe f915 	bl	80053d0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80071aa:	7cfb      	ldrb	r3, [r7, #19]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01d      	beq.n	80071ec <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80071b0:	f107 031b 	add.w	r3, r7, #27
 80071b4:	461a      	mov	r2, r3
 80071b6:	2100      	movs	r1, #0
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7fe f8a0 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80071c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10f      	bne.n	80071ec <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80071cc:	f107 0318 	add.w	r3, r7, #24
 80071d0:	461a      	mov	r2, r3
 80071d2:	2151      	movs	r1, #81	; 0x51
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7fd fd73 	bl	8004cc0 <VL53L0X_RdWord>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80071e0:	8b3b      	ldrh	r3, [r7, #24]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fe05 	bl	8006df2 <VL53L0X_decode_timeout>
 80071e8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80071ea:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80071ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80071f4:	f107 031b 	add.w	r3, r7, #27
 80071f8:	461a      	mov	r2, r3
 80071fa:	2101      	movs	r1, #1
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7fe f87e 	bl	80052fe <VL53L0X_GetVcselPulsePeriod>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800720c:	2b00      	cmp	r3, #0
 800720e:	d128      	bne.n	8007262 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007210:	7efb      	ldrb	r3, [r7, #27]
 8007212:	461a      	mov	r2, r3
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fe02 	bl	8006e20 <VL53L0X_calc_timeout_mclks>
 800721c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800721e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	4413      	add	r3, r2
 8007224:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8007226:	6a38      	ldr	r0, [r7, #32]
 8007228:	f7ff fdb7 	bl	8006d9a <VL53L0X_encode_timeout>
 800722c:	4603      	mov	r3, r0
 800722e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8007230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007234:	2b00      	cmp	r3, #0
 8007236:	d108      	bne.n	800724a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007238:	8bfb      	ldrh	r3, [r7, #30]
 800723a:	461a      	mov	r2, r3
 800723c:	2171      	movs	r1, #113	; 0x71
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f7fd fcb6 	bl	8004bb0 <VL53L0X_WrWord>
 8007244:	4603      	mov	r3, r0
 8007246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800724a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800724e:	2b00      	cmp	r3, #0
 8007250:	d107      	bne.n	8007262 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800725a:	e002      	b.n	8007262 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800725c:	23fc      	movs	r3, #252	; 0xfc
 800725e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007262:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007266:	4618      	mov	r0, r3
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b08a      	sub	sp, #40	; 0x28
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
 800727a:	4613      	mov	r3, r2
 800727c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800727e:	2300      	movs	r3, #0
 8007280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8007284:	230c      	movs	r3, #12
 8007286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800728a:	2312      	movs	r3, #18
 800728c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8007290:	2308      	movs	r3, #8
 8007292:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8007296:	230e      	movs	r3, #14
 8007298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80072a0:	78bb      	ldrb	r3, [r7, #2]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072ac:	23fc      	movs	r3, #252	; 0xfc
 80072ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072b2:	e020      	b.n	80072f6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10d      	bne.n	80072d6 <VL53L0X_set_vcsel_pulse_period+0x68>
 80072ba:	78ba      	ldrb	r2, [r7, #2]
 80072bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d304      	bcc.n	80072ce <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80072c4:	78ba      	ldrb	r2, [r7, #2]
 80072c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d903      	bls.n	80072d6 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072ce:	23fc      	movs	r3, #252	; 0xfc
 80072d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072d4:	e00f      	b.n	80072f6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80072d6:	78fb      	ldrb	r3, [r7, #3]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d10c      	bne.n	80072f6 <VL53L0X_set_vcsel_pulse_period+0x88>
 80072dc:	78ba      	ldrb	r2, [r7, #2]
 80072de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d304      	bcc.n	80072f0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80072e6:	78ba      	ldrb	r2, [r7, #2]
 80072e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d902      	bls.n	80072f6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072f0:	23fc      	movs	r3, #252	; 0xfc
 80072f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80072f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80072fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007302:	e239      	b.n	8007778 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d150      	bne.n	80073ac <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800730a:	78bb      	ldrb	r3, [r7, #2]
 800730c:	2b0c      	cmp	r3, #12
 800730e:	d110      	bne.n	8007332 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8007310:	2218      	movs	r2, #24
 8007312:	2157      	movs	r1, #87	; 0x57
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fd fc27 	bl	8004b68 <VL53L0X_WrByte>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8007320:	2208      	movs	r2, #8
 8007322:	2156      	movs	r1, #86	; 0x56
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7fd fc1f 	bl	8004b68 <VL53L0X_WrByte>
 800732a:	4603      	mov	r3, r0
 800732c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007330:	e17f      	b.n	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007332:	78bb      	ldrb	r3, [r7, #2]
 8007334:	2b0e      	cmp	r3, #14
 8007336:	d110      	bne.n	800735a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8007338:	2230      	movs	r2, #48	; 0x30
 800733a:	2157      	movs	r1, #87	; 0x57
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fd fc13 	bl	8004b68 <VL53L0X_WrByte>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8007348:	2208      	movs	r2, #8
 800734a:	2156      	movs	r1, #86	; 0x56
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fd fc0b 	bl	8004b68 <VL53L0X_WrByte>
 8007352:	4603      	mov	r3, r0
 8007354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007358:	e16b      	b.n	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800735a:	78bb      	ldrb	r3, [r7, #2]
 800735c:	2b10      	cmp	r3, #16
 800735e:	d110      	bne.n	8007382 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8007360:	2240      	movs	r2, #64	; 0x40
 8007362:	2157      	movs	r1, #87	; 0x57
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7fd fbff 	bl	8004b68 <VL53L0X_WrByte>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8007370:	2208      	movs	r2, #8
 8007372:	2156      	movs	r1, #86	; 0x56
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fd fbf7 	bl	8004b68 <VL53L0X_WrByte>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007380:	e157      	b.n	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007382:	78bb      	ldrb	r3, [r7, #2]
 8007384:	2b12      	cmp	r3, #18
 8007386:	f040 8154 	bne.w	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800738a:	2250      	movs	r2, #80	; 0x50
 800738c:	2157      	movs	r1, #87	; 0x57
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fd fbea 	bl	8004b68 <VL53L0X_WrByte>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800739a:	2208      	movs	r2, #8
 800739c:	2156      	movs	r1, #86	; 0x56
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fd fbe2 	bl	8004b68 <VL53L0X_WrByte>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073aa:	e142      	b.n	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	f040 813f 	bne.w	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80073b4:	78bb      	ldrb	r3, [r7, #2]
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d14c      	bne.n	8007454 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80073ba:	2210      	movs	r2, #16
 80073bc:	2148      	movs	r1, #72	; 0x48
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fd fbd2 	bl	8004b68 <VL53L0X_WrByte>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80073ca:	2208      	movs	r2, #8
 80073cc:	2147      	movs	r1, #71	; 0x47
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fd fbca 	bl	8004b68 <VL53L0X_WrByte>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80073da:	2202      	movs	r2, #2
 80073dc:	2132      	movs	r1, #50	; 0x32
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fd fbc2 	bl	8004b68 <VL53L0X_WrByte>
 80073e4:	4603      	mov	r3, r0
 80073e6:	461a      	mov	r2, r3
 80073e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80073f2:	220c      	movs	r2, #12
 80073f4:	2130      	movs	r1, #48	; 0x30
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fd fbb6 	bl	8004b68 <VL53L0X_WrByte>
 80073fc:	4603      	mov	r3, r0
 80073fe:	461a      	mov	r2, r3
 8007400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007404:	4313      	orrs	r3, r2
 8007406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800740a:	2201      	movs	r2, #1
 800740c:	21ff      	movs	r1, #255	; 0xff
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fd fbaa 	bl	8004b68 <VL53L0X_WrByte>
 8007414:	4603      	mov	r3, r0
 8007416:	461a      	mov	r2, r3
 8007418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800741c:	4313      	orrs	r3, r2
 800741e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007422:	2230      	movs	r2, #48	; 0x30
 8007424:	2130      	movs	r1, #48	; 0x30
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fd fb9e 	bl	8004b68 <VL53L0X_WrByte>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007434:	4313      	orrs	r3, r2
 8007436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800743a:	2200      	movs	r2, #0
 800743c:	21ff      	movs	r1, #255	; 0xff
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fd fb92 	bl	8004b68 <VL53L0X_WrByte>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800744c:	4313      	orrs	r3, r2
 800744e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007452:	e0ee      	b.n	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007454:	78bb      	ldrb	r3, [r7, #2]
 8007456:	2b0a      	cmp	r3, #10
 8007458:	d14c      	bne.n	80074f4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800745a:	2228      	movs	r2, #40	; 0x28
 800745c:	2148      	movs	r1, #72	; 0x48
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fd fb82 	bl	8004b68 <VL53L0X_WrByte>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800746a:	2208      	movs	r2, #8
 800746c:	2147      	movs	r1, #71	; 0x47
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fd fb7a 	bl	8004b68 <VL53L0X_WrByte>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800747a:	2203      	movs	r2, #3
 800747c:	2132      	movs	r1, #50	; 0x32
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fd fb72 	bl	8004b68 <VL53L0X_WrByte>
 8007484:	4603      	mov	r3, r0
 8007486:	461a      	mov	r2, r3
 8007488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800748c:	4313      	orrs	r3, r2
 800748e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007492:	2209      	movs	r2, #9
 8007494:	2130      	movs	r1, #48	; 0x30
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fd fb66 	bl	8004b68 <VL53L0X_WrByte>
 800749c:	4603      	mov	r3, r0
 800749e:	461a      	mov	r2, r3
 80074a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80074aa:	2201      	movs	r2, #1
 80074ac:	21ff      	movs	r1, #255	; 0xff
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fd fb5a 	bl	8004b68 <VL53L0X_WrByte>
 80074b4:	4603      	mov	r3, r0
 80074b6:	461a      	mov	r2, r3
 80074b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074bc:	4313      	orrs	r3, r2
 80074be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80074c2:	2220      	movs	r2, #32
 80074c4:	2130      	movs	r1, #48	; 0x30
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fd fb4e 	bl	8004b68 <VL53L0X_WrByte>
 80074cc:	4603      	mov	r3, r0
 80074ce:	461a      	mov	r2, r3
 80074d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80074da:	2200      	movs	r2, #0
 80074dc:	21ff      	movs	r1, #255	; 0xff
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fd fb42 	bl	8004b68 <VL53L0X_WrByte>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ec:	4313      	orrs	r3, r2
 80074ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074f2:	e09e      	b.n	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80074f4:	78bb      	ldrb	r3, [r7, #2]
 80074f6:	2b0c      	cmp	r3, #12
 80074f8:	d14c      	bne.n	8007594 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80074fa:	2238      	movs	r2, #56	; 0x38
 80074fc:	2148      	movs	r1, #72	; 0x48
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fd fb32 	bl	8004b68 <VL53L0X_WrByte>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800750a:	2208      	movs	r2, #8
 800750c:	2147      	movs	r1, #71	; 0x47
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fd fb2a 	bl	8004b68 <VL53L0X_WrByte>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800751a:	2203      	movs	r2, #3
 800751c:	2132      	movs	r1, #50	; 0x32
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fd fb22 	bl	8004b68 <VL53L0X_WrByte>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800752c:	4313      	orrs	r3, r2
 800752e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007532:	2208      	movs	r2, #8
 8007534:	2130      	movs	r1, #48	; 0x30
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fd fb16 	bl	8004b68 <VL53L0X_WrByte>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007544:	4313      	orrs	r3, r2
 8007546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800754a:	2201      	movs	r2, #1
 800754c:	21ff      	movs	r1, #255	; 0xff
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fd fb0a 	bl	8004b68 <VL53L0X_WrByte>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755c:	4313      	orrs	r3, r2
 800755e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007562:	2220      	movs	r2, #32
 8007564:	2130      	movs	r1, #48	; 0x30
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fd fafe 	bl	8004b68 <VL53L0X_WrByte>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007574:	4313      	orrs	r3, r2
 8007576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800757a:	2200      	movs	r2, #0
 800757c:	21ff      	movs	r1, #255	; 0xff
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fd faf2 	bl	8004b68 <VL53L0X_WrByte>
 8007584:	4603      	mov	r3, r0
 8007586:	461a      	mov	r2, r3
 8007588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800758c:	4313      	orrs	r3, r2
 800758e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007592:	e04e      	b.n	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007594:	78bb      	ldrb	r3, [r7, #2]
 8007596:	2b0e      	cmp	r3, #14
 8007598:	d14b      	bne.n	8007632 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800759a:	2248      	movs	r2, #72	; 0x48
 800759c:	2148      	movs	r1, #72	; 0x48
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fd fae2 	bl	8004b68 <VL53L0X_WrByte>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80075aa:	2208      	movs	r2, #8
 80075ac:	2147      	movs	r1, #71	; 0x47
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fd fada 	bl	8004b68 <VL53L0X_WrByte>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80075ba:	2203      	movs	r2, #3
 80075bc:	2132      	movs	r1, #50	; 0x32
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fd fad2 	bl	8004b68 <VL53L0X_WrByte>
 80075c4:	4603      	mov	r3, r0
 80075c6:	461a      	mov	r2, r3
 80075c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80075d2:	2207      	movs	r2, #7
 80075d4:	2130      	movs	r1, #48	; 0x30
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fd fac6 	bl	8004b68 <VL53L0X_WrByte>
 80075dc:	4603      	mov	r3, r0
 80075de:	461a      	mov	r2, r3
 80075e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80075ea:	2201      	movs	r2, #1
 80075ec:	21ff      	movs	r1, #255	; 0xff
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fd faba 	bl	8004b68 <VL53L0X_WrByte>
 80075f4:	4603      	mov	r3, r0
 80075f6:	461a      	mov	r2, r3
 80075f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007602:	2220      	movs	r2, #32
 8007604:	2130      	movs	r1, #48	; 0x30
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fd faae 	bl	8004b68 <VL53L0X_WrByte>
 800760c:	4603      	mov	r3, r0
 800760e:	461a      	mov	r2, r3
 8007610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007614:	4313      	orrs	r3, r2
 8007616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800761a:	2200      	movs	r2, #0
 800761c:	21ff      	movs	r1, #255	; 0xff
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fd faa2 	bl	8004b68 <VL53L0X_WrByte>
 8007624:	4603      	mov	r3, r0
 8007626:	461a      	mov	r2, r3
 8007628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800762c:	4313      	orrs	r3, r2
 800762e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007632:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007636:	2b00      	cmp	r3, #0
 8007638:	d17f      	bne.n	800773a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800763a:	78bb      	ldrb	r3, [r7, #2]
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fb47 	bl	8006cd0 <VL53L0X_encode_vcsel_period>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007648:	78fb      	ldrb	r3, [r7, #3]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800764e:	2b01      	cmp	r3, #1
 8007650:	d045      	beq.n	80076de <VL53L0X_set_vcsel_pulse_period+0x470>
 8007652:	e06e      	b.n	8007732 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	461a      	mov	r2, r3
 800765a:	2103      	movs	r1, #3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff fc33 	bl	8006ec8 <get_sequence_step_timeout>
 8007662:	4603      	mov	r3, r0
 8007664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007668:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800766c:	2b00      	cmp	r3, #0
 800766e:	d109      	bne.n	8007684 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007670:	f107 0310 	add.w	r3, r7, #16
 8007674:	461a      	mov	r2, r3
 8007676:	2102      	movs	r1, #2
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff fc25 	bl	8006ec8 <get_sequence_step_timeout>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007684:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800768c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007690:	461a      	mov	r2, r3
 8007692:	2150      	movs	r1, #80	; 0x50
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7fd fa67 	bl	8004b68 <VL53L0X_WrByte>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80076a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d108      	bne.n	80076ba <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	461a      	mov	r2, r3
 80076ac:	2103      	movs	r1, #3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff fceb 	bl	800708a <set_sequence_step_timeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80076ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d108      	bne.n	80076d4 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	461a      	mov	r2, r3
 80076c6:	2102      	movs	r1, #2
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff fcde 	bl	800708a <set_sequence_step_timeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	78ba      	ldrb	r2, [r7, #2]
 80076d8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80076dc:	e02e      	b.n	800773c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80076de:	f107 0318 	add.w	r3, r7, #24
 80076e2:	461a      	mov	r2, r3
 80076e4:	2104      	movs	r1, #4
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff fbee 	bl	8006ec8 <get_sequence_step_timeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80076f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80076fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076fe:	461a      	mov	r2, r3
 8007700:	2170      	movs	r1, #112	; 0x70
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fd fa30 	bl	8004b68 <VL53L0X_WrByte>
 8007708:	4603      	mov	r3, r0
 800770a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800770e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007712:	2b00      	cmp	r3, #0
 8007714:	d108      	bne.n	8007728 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	461a      	mov	r2, r3
 800771a:	2104      	movs	r1, #4
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fcb4 	bl	800708a <set_sequence_step_timeout>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	78ba      	ldrb	r2, [r7, #2]
 800772c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007730:	e004      	b.n	800773c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007732:	23fc      	movs	r3, #252	; 0xfc
 8007734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007738:	e000      	b.n	800773c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800773a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800773c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007740:	2b00      	cmp	r3, #0
 8007742:	d109      	bne.n	8007758 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800774a:	69f9      	ldr	r1, [r7, #28]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7fd fd98 	bl	8005282 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8007760:	f107 010f 	add.w	r1, r7, #15
 8007764:	2301      	movs	r3, #1
 8007766:	2200      	movs	r2, #0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff f9cc 	bl	8006b06 <VL53L0X_perform_phase_calibration>
 800776e:	4603      	mov	r3, r0
 8007770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007774:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007778:	4618      	mov	r0, r3
 800777a:	3728      	adds	r7, #40	; 0x28
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	460b      	mov	r3, r1
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800778e:	2300      	movs	r3, #0
 8007790:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007798:	2b01      	cmp	r3, #1
 800779a:	d00a      	beq.n	80077b2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800779c:	e013      	b.n	80077c6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800779e:	f107 0316 	add.w	r3, r7, #22
 80077a2:	461a      	mov	r2, r3
 80077a4:	2150      	movs	r1, #80	; 0x50
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7fd fa60 	bl	8004c6c <VL53L0X_RdByte>
 80077ac:	4603      	mov	r3, r0
 80077ae:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80077b0:	e00b      	b.n	80077ca <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80077b2:	f107 0316 	add.w	r3, r7, #22
 80077b6:	461a      	mov	r2, r3
 80077b8:	2170      	movs	r1, #112	; 0x70
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7fd fa56 	bl	8004c6c <VL53L0X_RdByte>
 80077c0:	4603      	mov	r3, r0
 80077c2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80077c4:	e001      	b.n	80077ca <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077c6:	23fc      	movs	r3, #252	; 0xfc
 80077c8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80077ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d107      	bne.n	80077e2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80077d2:	7dbb      	ldrb	r3, [r7, #22]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fa68 	bl	8006caa <VL53L0X_decode_vcsel_period>
 80077da:	4603      	mov	r3, r0
 80077dc:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	701a      	strb	r2, [r3, #0]

	return Status;
 80077e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b092      	sub	sp, #72	; 0x48
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80077fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007802:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007804:	f240 7376 	movw	r3, #1910	; 0x776
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800780a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800780e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007810:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8007816:	f240 234e 	movw	r3, #590	; 0x24e
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800781c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007822:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007826:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007828:	f240 2326 	movw	r3, #550	; 0x226
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8007832:	f644 6320 	movw	r3, #20000	; 0x4e20
 8007836:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	429a      	cmp	r2, r3
 8007842:	d205      	bcs.n	8007850 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007844:	23fc      	movs	r3, #252	; 0xfc
 8007846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800784a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800784e:	e0aa      	b.n	80079a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800785c:	f107 0314 	add.w	r3, r7, #20
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fd fdb4 	bl	80053d0 <VL53L0X_GetSequenceStepEnables>
 8007868:	4603      	mov	r3, r0
 800786a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800786e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007872:	2b00      	cmp	r3, #0
 8007874:	d15b      	bne.n	800792e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007876:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007878:	2b00      	cmp	r3, #0
 800787a:	d105      	bne.n	8007888 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800787c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007882:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007884:	2b00      	cmp	r3, #0
 8007886:	d052      	beq.n	800792e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007888:	f107 0310 	add.w	r3, r7, #16
 800788c:	461a      	mov	r2, r3
 800788e:	2102      	movs	r1, #2
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff fb19 	bl	8006ec8 <get_sequence_step_timeout>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800789c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80078a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80078a8:	e07d      	b.n	80079a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80078aa:	7d3b      	ldrb	r3, [r7, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00f      	beq.n	80078d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80078b0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80078b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b4:	4413      	add	r3, r2
 80078b6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078bc:	429a      	cmp	r2, r3
 80078be:	d204      	bcs.n	80078ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80078c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	643b      	str	r3, [r7, #64]	; 0x40
 80078c8:	e002      	b.n	80078d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078ca:	23fc      	movs	r3, #252	; 0xfc
 80078cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80078d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80078d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80078dc:	e063      	b.n	80079a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80078de:	7dbb      	ldrb	r3, [r7, #22]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d011      	beq.n	8007908 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	4413      	add	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d204      	bcs.n	8007900 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80078f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	643b      	str	r3, [r7, #64]	; 0x40
 80078fe:	e016      	b.n	800792e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007900:	23fc      	movs	r3, #252	; 0xfc
 8007902:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007906:	e012      	b.n	800792e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007908:	7d7b      	ldrb	r3, [r7, #21]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00f      	beq.n	800792e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007912:	4413      	add	r3, r2
 8007914:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800791a:	429a      	cmp	r2, r3
 800791c:	d204      	bcs.n	8007928 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800791e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	643b      	str	r3, [r7, #64]	; 0x40
 8007926:	e002      	b.n	800792e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007928:	23fc      	movs	r3, #252	; 0xfc
 800792a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800792e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007936:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800793a:	e034      	b.n	80079a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d019      	beq.n	8007976 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007942:	f107 030c 	add.w	r3, r7, #12
 8007946:	461a      	mov	r2, r3
 8007948:	2103      	movs	r1, #3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff fabc 	bl	8006ec8 <get_sequence_step_timeout>
 8007950:	4603      	mov	r3, r0
 8007952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800795a:	4413      	add	r3, r2
 800795c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007962:	429a      	cmp	r2, r3
 8007964:	d204      	bcs.n	8007970 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007966:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	643b      	str	r3, [r7, #64]	; 0x40
 800796e:	e002      	b.n	8007976 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007970:	23fc      	movs	r3, #252	; 0xfc
 8007972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007976:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800797a:	2b00      	cmp	r3, #0
 800797c:	d111      	bne.n	80079a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800797e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00e      	beq.n	80079a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800798c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800798e:	2104      	movs	r1, #4
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fb7a 	bl	800708a <set_sequence_step_timeout>
 8007996:	4603      	mov	r3, r0
 8007998:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80079a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3748      	adds	r7, #72	; 0x48
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b090      	sub	sp, #64	; 0x40
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80079be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80079c2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80079c4:	f240 7376 	movw	r3, #1910	; 0x776
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80079ca:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80079d0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80079d4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80079d6:	f240 234e 	movw	r3, #590	; 0x24e
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80079dc:	f240 23b2 	movw	r3, #690	; 0x2b2
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80079e2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80079e8:	f240 2326 	movw	r3, #550	; 0x226
 80079ec:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80079f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f6:	441a      	add	r2, r3
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80079fc:	f107 0318 	add.w	r3, r7, #24
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fd fce4 	bl	80053d0 <VL53L0X_GetSequenceStepEnables>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8007a0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007a16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007a1a:	e075      	b.n	8007b08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8007a1c:	7e3b      	ldrb	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d105      	bne.n	8007a2e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007a22:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007a28:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d030      	beq.n	8007a90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8007a2e:	f107 0310 	add.w	r3, r7, #16
 8007a32:	461a      	mov	r2, r3
 8007a34:	2102      	movs	r1, #2
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff fa46 	bl	8006ec8 <get_sequence_step_timeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007a42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d122      	bne.n	8007a90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007a4a:	7e3b      	ldrb	r3, [r7, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007a54:	6939      	ldr	r1, [r7, #16]
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a5a:	441a      	add	r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007a60:	7ebb      	ldrb	r3, [r7, #26]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007a6a:	6939      	ldr	r1, [r7, #16]
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	440b      	add	r3, r1
 8007a70:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a72:	441a      	add	r2, r3
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e00a      	b.n	8007a90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007a7a:	7e7b      	ldrb	r3, [r7, #25]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007a84:	6939      	ldr	r1, [r7, #16]
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a8a:	441a      	add	r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d114      	bne.n	8007ac2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007a98:	7efb      	ldrb	r3, [r7, #27]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d011      	beq.n	8007ac2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8007a9e:	f107 030c 	add.w	r3, r7, #12
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	2103      	movs	r1, #3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff fa0e 	bl	8006ec8 <get_sequence_step_timeout>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007abc:	441a      	add	r2, r3
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ac2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d114      	bne.n	8007af4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007aca:	7f3b      	ldrb	r3, [r7, #28]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d011      	beq.n	8007af4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007ad0:	f107 0314 	add.w	r3, r7, #20
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	2104      	movs	r1, #4
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff f9f5 	bl	8006ec8 <get_sequence_step_timeout>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007ae8:	6979      	ldr	r1, [r7, #20]
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007aee:	441a      	add	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007af4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d103      	bne.n	8007b04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3740      	adds	r7, #64	; 0x40
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007b22:	e0c6      	b.n	8007cb2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4413      	add	r3, r2
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	74fb      	strb	r3, [r7, #19]
		Index++;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	3301      	adds	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007b34:	7cfb      	ldrb	r3, [r7, #19]
 8007b36:	2bff      	cmp	r3, #255	; 0xff
 8007b38:	f040 808d 	bne.w	8007c56 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4413      	add	r3, r2
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	747b      	strb	r3, [r7, #17]
			Index++;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007b4c:	7c7b      	ldrb	r3, [r7, #17]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d87e      	bhi.n	8007c50 <VL53L0X_load_tuning_settings+0x140>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <VL53L0X_load_tuning_settings+0x48>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007ba3 	.word	0x08007ba3
 8007b60:	08007bdd 	.word	0x08007bdd
 8007b64:	08007c17 	.word	0x08007c17
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	743b      	strb	r3, [r7, #16]
				Index++;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	3301      	adds	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	3301      	adds	r3, #1
 8007b86:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007b88:	7c3b      	ldrb	r3, [r7, #16]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4413      	add	r3, r2
 8007b96:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	89ba      	ldrh	r2, [r7, #12]
 8007b9c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007ba0:	e087      	b.n	8007cb2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	743b      	strb	r3, [r7, #16]
				Index++;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007bc2:	7c3b      	ldrb	r3, [r7, #16]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	4413      	add	r3, r2
 8007bd0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	89ba      	ldrh	r2, [r7, #12]
 8007bd6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007bda:	e06a      	b.n	8007cb2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	4413      	add	r3, r2
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	743b      	strb	r3, [r7, #16]
				Index++;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	3301      	adds	r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007bfc:	7c3b      	ldrb	r3, [r7, #16]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4413      	add	r3, r2
 8007c0a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	89ba      	ldrh	r2, [r7, #12]
 8007c10:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007c14:	e04d      	b.n	8007cb2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	743b      	strb	r3, [r7, #16]
				Index++;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	3301      	adds	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	3301      	adds	r3, #1
 8007c34:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007c36:	7c3b      	ldrb	r3, [r7, #16]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4413      	add	r3, r2
 8007c44:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	89ba      	ldrh	r2, [r7, #12]
 8007c4a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8007c4e:	e030      	b.n	8007cb2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c50:	23fc      	movs	r3, #252	; 0xfc
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e02d      	b.n	8007cb2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007c56:	7cfb      	ldrb	r3, [r7, #19]
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d828      	bhi.n	8007cae <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	4413      	add	r3, r2
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61bb      	str	r3, [r7, #24]
 8007c70:	e00f      	b.n	8007c92 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	4413      	add	r3, r2
 8007c78:	7819      	ldrb	r1, [r3, #0]
 8007c7a:	f107 0208 	add.w	r2, r7, #8
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	4413      	add	r3, r2
 8007c82:	460a      	mov	r2, r1
 8007c84:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	7cfb      	ldrb	r3, [r7, #19]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	dbeb      	blt.n	8007c72 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007c9a:	7cfb      	ldrb	r3, [r7, #19]
 8007c9c:	f107 0208 	add.w	r2, r7, #8
 8007ca0:	7cb9      	ldrb	r1, [r7, #18]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fc ff04 	bl	8004ab0 <VL53L0X_WriteMulti>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e001      	b.n	8007cb2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007cae:	23fc      	movs	r3, #252	; 0xfc
 8007cb0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <VL53L0X_load_tuning_settings+0x1b8>
 8007cbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f43f af2e 	beq.w	8007b24 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3720      	adds	r7, #32
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007cea:	f107 0313 	add.w	r3, r7, #19
 8007cee:	4619      	mov	r1, r3
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7fd fbf9 	bl	80054e8 <VL53L0X_GetXTalkCompensationEnable>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007cfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d111      	bne.n	8007d26 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007d02:	7cfb      	ldrb	r3, [r7, #19]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	8a9b      	ldrh	r3, [r3, #20]
 8007d12:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	fb02 f303 	mul.w	r3, r2, r3
 8007d1a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	3380      	adds	r3, #128	; 0x80
 8007d20:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007d26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3720      	adds	r7, #32
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007d4a:	f107 0310 	add.w	r3, r7, #16
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff ffbe 	bl	8007cd4 <VL53L0X_get_total_xtalk_rate>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d105      	bne.n	8007d70 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	441a      	add	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]

	return Status;
 8007d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b09a      	sub	sp, #104	; 0x68
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007d8a:	2312      	movs	r3, #18
 8007d8c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007d8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d92:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007d94:	2342      	movs	r3, #66	; 0x42
 8007d96:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007d98:	2306      	movs	r3, #6
 8007d9a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007d9c:	2307      	movs	r3, #7
 8007d9e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	3380      	adds	r3, #128	; 0x80
 8007dc4:	0a1b      	lsrs	r3, r3, #8
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dcc:	fb02 f303 	mul.w	r3, r2, r3
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01a      	beq.n	8007e12 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	029b      	lsls	r3, r3, #10
 8007de0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de8:	4413      	add	r3, r2
 8007dea:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007dec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007df6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007df8:	4613      	mov	r3, r2
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	4413      	add	r3, r2
 8007dfe:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e02:	fb03 f303 	mul.w	r3, r3, r3
 8007e06:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e0a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e0e:	0c1b      	lsrs	r3, r3, #16
 8007e10:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
 8007e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e22:	0c1b      	lsrs	r3, r3, #16
 8007e24:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	fb03 f303 	mul.w	r3, r3, r3
 8007e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e34:	0c1b      	lsrs	r3, r3, #16
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e3a:	085a      	lsrs	r2, r3, #1
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	441a      	add	r2, r3
 8007e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e58:	d302      	bcc.n	8007e60 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8007e5a:	4b54      	ldr	r3, [pc, #336]	; (8007fac <VL53L0X_calc_dmax+0x230>)
 8007e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e5e:	e015      	b.n	8007e8c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e62:	085a      	lsrs	r2, r3, #1
 8007e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e66:	441a      	add	r2, r3
 8007e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
 8007e78:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e80:	0c1b      	lsrs	r3, r3, #16
 8007e82:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e86:	fb03 f303 	mul.w	r3, r3, r3
 8007e8a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e8e:	039b      	lsls	r3, r3, #14
 8007e90:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007e94:	4a46      	ldr	r2, [pc, #280]	; (8007fb0 <VL53L0X_calc_dmax+0x234>)
 8007e96:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9a:	099b      	lsrs	r3, r3, #6
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	fb03 f303 	mul.w	r3, r3, r3
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea8:	fb03 f303 	mul.w	r3, r3, r3
 8007eac:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	4413      	add	r3, r2
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007ed0:	0b9b      	lsrs	r3, r3, #14
 8007ed2:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ed8:	4413      	add	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eee:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	039b      	lsls	r3, r3, #14
 8007ef4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	085b      	lsrs	r3, r3, #1
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	4413      	add	r3, r2
 8007efe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f08:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f0e:	fb02 f303 	mul.w	r3, r2, r3
 8007f12:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007f1a:	4a25      	ldr	r2, [pc, #148]	; (8007fb0 <VL53L0X_calc_dmax+0x234>)
 8007f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f20:	099b      	lsrs	r3, r3, #6
 8007f22:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007f30:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <VL53L0X_calc_dmax+0x234>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	099b      	lsrs	r3, r3, #6
 8007f38:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3c:	3380      	adds	r3, #128	; 0x80
 8007f3e:	0a1b      	lsrs	r3, r3, #8
 8007f40:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d008      	beq.n	8007f5a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	085a      	lsrs	r2, r3, #1
 8007f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4e:	441a      	add	r2, r3
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f58:	e001      	b.n	8007f5e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007f5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007f60:	f7fe fec9 	bl	8006cf6 <VL53L0X_isqrt>
 8007f64:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d008      	beq.n	8007f7e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	085a      	lsrs	r2, r3, #1
 8007f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f72:	441a      	add	r2, r3
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f7c:	e001      	b.n	8007f82 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007f82:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007f84:	f7fe feb7 	bl	8006cf6 <VL53L0X_isqrt>
 8007f88:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d902      	bls.n	8007f9e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8007f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f9c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007f9e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3768      	adds	r7, #104	; 0x68
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	fff00000 	.word	0xfff00000
 8007fb0:	10624dd3 	.word	0x10624dd3

08007fb4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b0b4      	sub	sp, #208	; 0xd0
 8007fb8:	af04      	add	r7, sp, #16
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007fc2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007fca:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007fd2:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007fd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007fda:	f241 235c 	movw	r3, #4700	; 0x125c
 8007fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007fe2:	4b9e      	ldr	r3, [pc, #632]	; (800825c <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007fe8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007fec:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007fee:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffa:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007ffc:	4b98      	ldr	r3, [pc, #608]	; (8008260 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007ffe:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008004:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008006:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800800a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800800c:	f240 6377 	movw	r3, #1655	; 0x677
 8008010:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008012:	2300      	movs	r3, #0
 8008014:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008026:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800802a:	0c1b      	lsrs	r3, r3, #16
 800802c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008034:	f107 0310 	add.w	r3, r7, #16
 8008038:	461a      	mov	r2, r3
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fe78 	bl	8007d32 <VL53L0X_get_total_signal_rate>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	461a      	mov	r2, r3
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff fe3f 	bl	8007cd4 <VL53L0X_get_total_xtalk_rate>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008062:	fb02 f303 	mul.w	r3, r2, r3
 8008066:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800806a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800806e:	0c1b      	lsrs	r3, r3, #16
 8008070:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008078:	fb02 f303 	mul.w	r3, r2, r3
 800807c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008080:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008086:	429a      	cmp	r2, r3
 8008088:	d902      	bls.n	8008090 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800808a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800808c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008090:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008094:	2b00      	cmp	r3, #0
 8008096:	d168      	bne.n	800816a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800809e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80080a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80080ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80080b0:	461a      	mov	r2, r3
 80080b2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f7fe feb2 	bl	8006e20 <VL53L0X_calc_timeout_mclks>
 80080bc:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80080c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80080ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80080d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80080d6:	461a      	mov	r2, r3
 80080d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7fe fe9f 	bl	8006e20 <VL53L0X_calc_timeout_mclks>
 80080e2:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80080e4:	2303      	movs	r3, #3
 80080e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80080ea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	d102      	bne.n	80080f8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80080f2:	2302      	movs	r3, #2
 80080f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80080f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080fc:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80080fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008102:	fb02 f303 	mul.w	r3, r2, r3
 8008106:	02db      	lsls	r3, r3, #11
 8008108:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800810c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008110:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008114:	4a53      	ldr	r2, [pc, #332]	; (8008264 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008116:	fba2 2303 	umull	r2, r3, r2, r3
 800811a:	099b      	lsrs	r3, r3, #6
 800811c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008124:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008126:	fb02 f303 	mul.w	r3, r2, r3
 800812a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800812e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008132:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008136:	4a4b      	ldr	r2, [pc, #300]	; (8008264 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008138:	fba2 2303 	umull	r2, r3, r2, r3
 800813c:	099b      	lsrs	r3, r3, #6
 800813e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	3380      	adds	r3, #128	; 0x80
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008150:	fb02 f303 	mul.w	r3, r2, r3
 8008154:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008158:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800815c:	3380      	adds	r3, #128	; 0x80
 800815e:	0a1b      	lsrs	r3, r3, #8
 8008160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800816a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008172:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008176:	e15e      	b.n	8008436 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8008178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10c      	bne.n	8008198 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008184:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800818c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e14c      	b.n	8008432 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008198:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80081a0:	2301      	movs	r3, #1
 80081a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80081a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081aa:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80081ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ae:	041a      	lsls	r2, r3, #16
 80081b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80081ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d902      	bls.n	80081ca <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80081c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80081ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80081da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80081de:	4613      	mov	r3, r2
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fd85 	bl	8006cf6 <VL53L0X_isqrt>
 80081ec:	4603      	mov	r3, r0
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	891b      	ldrh	r3, [r3, #8]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
 80081fe:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008202:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008204:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008208:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800820a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800820c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008210:	4a14      	ldr	r2, [pc, #80]	; (8008264 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800821a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008222:	4a10      	ldr	r2, [pc, #64]	; (8008264 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008224:	fba2 2303 	umull	r2, r3, r2, r3
 8008228:	099b      	lsrs	r3, r3, #6
 800822a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	fbb2 f3f3 	udiv	r3, r2, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfb8      	it	lt
 800823e:	425b      	neglt	r3, r3
 8008240:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	7e1b      	ldrb	r3, [r3, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008258:	e033      	b.n	80082c2 <VL53L0X_calc_sigma_estimate+0x30e>
 800825a:	bf00      	nop
 800825c:	028f87ae 	.word	0x028f87ae
 8008260:	0006999a 	.word	0x0006999a
 8008264:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800826a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008278:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800827c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008280:	fb02 f303 	mul.w	r3, r2, r3
 8008284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800828c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800828e:	4413      	add	r3, r2
 8008290:	0c1b      	lsrs	r3, r3, #16
 8008292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800829a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800829e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80082a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082a6:	085b      	lsrs	r3, r3, #1
 80082a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80082ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b0:	fb03 f303 	mul.w	r3, r3, r3
 80082b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80082b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082bc:	0b9b      	lsrs	r3, r3, #14
 80082be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80082c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082c8:	fb02 f303 	mul.w	r3, r2, r3
 80082cc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80082d4:	0c1b      	lsrs	r3, r3, #16
 80082d6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	fb03 f303 	mul.w	r3, r3, r3
 80082de:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80082e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80082ec:	0c1b      	lsrs	r3, r3, #16
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	fb03 f303 	mul.w	r3, r3, r3
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80082f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	4413      	add	r3, r2
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008302:	f7fe fcf8 	bl	8006cf6 <VL53L0X_isqrt>
 8008306:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	041b      	lsls	r3, r3, #16
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	3332      	adds	r3, #50	; 0x32
 8008312:	4a4b      	ldr	r2, [pc, #300]	; (8008440 <VL53L0X_calc_sigma_estimate+0x48c>)
 8008314:	fba2 2303 	umull	r2, r3, r2, r3
 8008318:	095a      	lsrs	r2, r3, #5
 800831a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800831c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008328:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800832c:	fb02 f303 	mul.w	r3, r2, r3
 8008330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008338:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800833c:	3308      	adds	r3, #8
 800833e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008346:	4a3f      	ldr	r2, [pc, #252]	; (8008444 <VL53L0X_calc_sigma_estimate+0x490>)
 8008348:	fba2 2303 	umull	r2, r3, r2, r3
 800834c:	0b5b      	lsrs	r3, r3, #13
 800834e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008356:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008358:	429a      	cmp	r2, r3
 800835a:	d902      	bls.n	8008362 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800835c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800835e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008362:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800836a:	4413      	add	r3, r2
 800836c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008370:	4a35      	ldr	r2, [pc, #212]	; (8008448 <VL53L0X_calc_sigma_estimate+0x494>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	099b      	lsrs	r3, r3, #6
 8008378:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800837e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008382:	441a      	add	r2, r3
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	fbb2 f3f3 	udiv	r3, r2, r3
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fcb3 	bl	8006cf6 <VL53L0X_isqrt>
 8008390:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800839e:	4a2a      	ldr	r2, [pc, #168]	; (8008448 <VL53L0X_calc_sigma_estimate+0x494>)
 80083a0:	fba2 2303 	umull	r2, r3, r2, r3
 80083a4:	099b      	lsrs	r3, r3, #6
 80083a6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80083a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083ac:	fb03 f303 	mul.w	r3, r3, r3
 80083b0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	fb03 f303 	mul.w	r3, r3, r3
 80083b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80083ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	4413      	add	r3, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe fc98 	bl	8006cf6 <VL53L0X_isqrt>
 80083c6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083ce:	fb02 f303 	mul.w	r3, r2, r3
 80083d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80083d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d009      	beq.n	80083f0 <VL53L0X_calc_sigma_estimate+0x43c>
 80083dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <VL53L0X_calc_sigma_estimate+0x43c>
 80083e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80083e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d903      	bls.n	80083f8 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80083f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80083fe:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800840a:	6939      	ldr	r1, [r7, #16]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	9303      	str	r3, [sp, #12]
 8008410:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008414:	9302      	str	r3, [sp, #8]
 8008416:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800841a:	9301      	str	r3, [sp, #4]
 800841c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008424:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7ff fca8 	bl	8007d7c <VL53L0X_calc_dmax>
 800842c:	4603      	mov	r3, r0
 800842e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008432:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8008436:	4618      	mov	r0, r3
 8008438:	37c0      	adds	r7, #192	; 0xc0
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	51eb851f 	.word	0x51eb851f
 8008444:	d1b71759 	.word	0xd1b71759
 8008448:	10624dd3 	.word	0x10624dd3

0800844c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b090      	sub	sp, #64	; 0x40
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	607a      	str	r2, [r7, #4]
 8008456:	461a      	mov	r2, r3
 8008458:	460b      	mov	r3, r1
 800845a:	72fb      	strb	r3, [r7, #11]
 800845c:	4613      	mov	r3, r2
 800845e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008460:	2300      	movs	r3, #0
 8008462:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800846c:	2300      	movs	r3, #0
 800846e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800849e:	7afb      	ldrb	r3, [r7, #11]
 80084a0:	10db      	asrs	r3, r3, #3
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80084ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d017      	beq.n	80084e4 <VL53L0X_get_pal_range_status+0x98>
 80084b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084b8:	2b05      	cmp	r3, #5
 80084ba:	d013      	beq.n	80084e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 80084bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084c0:	2b07      	cmp	r3, #7
 80084c2:	d00f      	beq.n	80084e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80084c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084c8:	2b0c      	cmp	r3, #12
 80084ca:	d00b      	beq.n	80084e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80084cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084d0:	2b0d      	cmp	r3, #13
 80084d2:	d007      	beq.n	80084e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80084d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084d8:	2b0e      	cmp	r3, #14
 80084da:	d003      	beq.n	80084e4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80084dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084e0:	2b0f      	cmp	r3, #15
 80084e2:	d103      	bne.n	80084ec <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80084ea:	e002      	b.n	80084f2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80084f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80084fa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80084fe:	461a      	mov	r2, r3
 8008500:	2100      	movs	r1, #0
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7fd f8c4 	bl	8005690 <VL53L0X_GetLimitCheckEnable>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800850e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008512:	2b00      	cmp	r3, #0
 8008514:	d02e      	beq.n	8008574 <VL53L0X_get_pal_range_status+0x128>
 8008516:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800851a:	2b00      	cmp	r3, #0
 800851c:	d12a      	bne.n	8008574 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800851e:	f107 0310 	add.w	r3, r7, #16
 8008522:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008526:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff fd43 	bl	8007fb4 <VL53L0X_calc_sigma_estimate>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008534:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008538:	2b00      	cmp	r3, #0
 800853a:	d103      	bne.n	8008544 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	b29a      	uxth	r2, r3
 8008540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008542:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008544:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008548:	2b00      	cmp	r3, #0
 800854a:	d113      	bne.n	8008574 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800854c:	f107 0320 	add.w	r3, r7, #32
 8008550:	461a      	mov	r2, r3
 8008552:	2100      	movs	r1, #0
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7fd f921 	bl	800579c <VL53L0X_GetLimitCheckValue>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d006      	beq.n	8008574 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8008566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008568:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800856a:	429a      	cmp	r2, r3
 800856c:	d902      	bls.n	8008574 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008574:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008578:	2b00      	cmp	r3, #0
 800857a:	d109      	bne.n	8008590 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800857c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008580:	461a      	mov	r2, r3
 8008582:	2102      	movs	r1, #2
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7fd f883 	bl	8005690 <VL53L0X_GetLimitCheckEnable>
 800858a:	4603      	mov	r3, r0
 800858c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008590:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008594:	2b00      	cmp	r3, #0
 8008596:	d044      	beq.n	8008622 <VL53L0X_get_pal_range_status+0x1d6>
 8008598:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800859c:	2b00      	cmp	r3, #0
 800859e:	d140      	bne.n	8008622 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80085a0:	f107 031c 	add.w	r3, r7, #28
 80085a4:	461a      	mov	r2, r3
 80085a6:	2102      	movs	r1, #2
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7fd f8f7 	bl	800579c <VL53L0X_GetLimitCheckValue>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 80085b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d107      	bne.n	80085cc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80085bc:	2201      	movs	r2, #1
 80085be:	21ff      	movs	r1, #255	; 0xff
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7fc fad1 	bl	8004b68 <VL53L0X_WrByte>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80085cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d109      	bne.n	80085e8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80085d4:	f107 0316 	add.w	r3, r7, #22
 80085d8:	461a      	mov	r2, r3
 80085da:	21b6      	movs	r1, #182	; 0xb6
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f7fc fb6f 	bl	8004cc0 <VL53L0X_RdWord>
 80085e2:	4603      	mov	r3, r0
 80085e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80085e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d107      	bne.n	8008600 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80085f0:	2200      	movs	r2, #0
 80085f2:	21ff      	movs	r1, #255	; 0xff
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f7fc fab7 	bl	8004b68 <VL53L0X_WrByte>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008600:	8afb      	ldrh	r3, [r7, #22]
 8008602:	025b      	lsls	r3, r3, #9
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800860a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008614:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008618:	429a      	cmp	r2, r3
 800861a:	d902      	bls.n	8008622 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008622:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008626:	2b00      	cmp	r3, #0
 8008628:	d109      	bne.n	800863e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800862a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800862e:	461a      	mov	r2, r3
 8008630:	2103      	movs	r1, #3
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7fd f82c 	bl	8005690 <VL53L0X_GetLimitCheckEnable>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800863e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008642:	2b00      	cmp	r3, #0
 8008644:	d023      	beq.n	800868e <VL53L0X_get_pal_range_status+0x242>
 8008646:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800864a:	2b00      	cmp	r3, #0
 800864c:	d11f      	bne.n	800868e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800864e:	893b      	ldrh	r3, [r7, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	637b      	str	r3, [r7, #52]	; 0x34
 8008658:	e005      	b.n	8008666 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	021a      	lsls	r2, r3, #8
 800865e:	893b      	ldrh	r3, [r7, #8]
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008666:	f107 0318 	add.w	r3, r7, #24
 800866a:	461a      	mov	r2, r3
 800866c:	2103      	movs	r1, #3
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7fd f894 	bl	800579c <VL53L0X_GetLimitCheckValue>
 8008674:	4603      	mov	r3, r0
 8008676:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d006      	beq.n	800868e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008680:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008684:	429a      	cmp	r2, r3
 8008686:	d202      	bcs.n	800868e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008688:	2301      	movs	r3, #1
 800868a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800868e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008692:	2b00      	cmp	r3, #0
 8008694:	d14a      	bne.n	800872c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008696:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800869a:	2b01      	cmp	r3, #1
 800869c:	d103      	bne.n	80086a6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800869e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a0:	22ff      	movs	r2, #255	; 0xff
 80086a2:	701a      	strb	r2, [r3, #0]
 80086a4:	e042      	b.n	800872c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80086a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d007      	beq.n	80086be <VL53L0X_get_pal_range_status+0x272>
 80086ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d003      	beq.n	80086be <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 80086b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d103      	bne.n	80086c6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80086be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c0:	2205      	movs	r2, #5
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	e032      	b.n	800872c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80086c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086ca:	2b06      	cmp	r3, #6
 80086cc:	d003      	beq.n	80086d6 <VL53L0X_get_pal_range_status+0x28a>
 80086ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d103      	bne.n	80086de <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80086d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d8:	2204      	movs	r2, #4
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	e026      	b.n	800872c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80086de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086e2:	2b08      	cmp	r3, #8
 80086e4:	d007      	beq.n	80086f6 <VL53L0X_get_pal_range_status+0x2aa>
 80086e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086ea:	2b0a      	cmp	r3, #10
 80086ec:	d003      	beq.n	80086f6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80086ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d103      	bne.n	80086fe <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80086f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f8:	2203      	movs	r2, #3
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e016      	b.n	800872c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80086fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008702:	2b04      	cmp	r3, #4
 8008704:	d003      	beq.n	800870e <VL53L0X_get_pal_range_status+0x2c2>
 8008706:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800870a:	2b01      	cmp	r3, #1
 800870c:	d103      	bne.n	8008716 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008710:	2202      	movs	r2, #2
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	e00a      	b.n	800872c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008716:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800871a:	2b01      	cmp	r3, #1
 800871c:	d103      	bne.n	8008726 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800871e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
 8008724:	e002      	b.n	800872c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800872c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008736:	2200      	movs	r2, #0
 8008738:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800873a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800873e:	461a      	mov	r2, r3
 8008740:	2101      	movs	r1, #1
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f7fc ffa4 	bl	8005690 <VL53L0X_GetLimitCheckEnable>
 8008748:	4603      	mov	r3, r0
 800874a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800874e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008752:	2b00      	cmp	r3, #0
 8008754:	d14f      	bne.n	80087f6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008756:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <VL53L0X_get_pal_range_status+0x31a>
 800875e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008762:	2b01      	cmp	r3, #1
 8008764:	d103      	bne.n	800876e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876c:	e002      	b.n	8008774 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800877a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800877e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008782:	2b04      	cmp	r3, #4
 8008784:	d003      	beq.n	800878e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008786:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800878e:	2301      	movs	r3, #1
 8008790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008794:	e002      	b.n	800879c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80087a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80087a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <VL53L0X_get_pal_range_status+0x36a>
 80087ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d103      	bne.n	80087be <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80087b6:	2301      	movs	r3, #1
 80087b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087bc:	e002      	b.n	80087c4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80087ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80087ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <VL53L0X_get_pal_range_status+0x392>
 80087d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d103      	bne.n	80087e6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80087de:	2301      	movs	r3, #1
 80087e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087e4:	e002      	b.n	80087ec <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80087f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80087f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3740      	adds	r7, #64	; 0x40
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <__errno>:
 8008804:	4b01      	ldr	r3, [pc, #4]	; (800880c <__errno+0x8>)
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	20000504 	.word	0x20000504

08008810 <__libc_init_array>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	4d0d      	ldr	r5, [pc, #52]	; (8008848 <__libc_init_array+0x38>)
 8008814:	4c0d      	ldr	r4, [pc, #52]	; (800884c <__libc_init_array+0x3c>)
 8008816:	1b64      	subs	r4, r4, r5
 8008818:	10a4      	asrs	r4, r4, #2
 800881a:	2600      	movs	r6, #0
 800881c:	42a6      	cmp	r6, r4
 800881e:	d109      	bne.n	8008834 <__libc_init_array+0x24>
 8008820:	4d0b      	ldr	r5, [pc, #44]	; (8008850 <__libc_init_array+0x40>)
 8008822:	4c0c      	ldr	r4, [pc, #48]	; (8008854 <__libc_init_array+0x44>)
 8008824:	f000 fc8e 	bl	8009144 <_init>
 8008828:	1b64      	subs	r4, r4, r5
 800882a:	10a4      	asrs	r4, r4, #2
 800882c:	2600      	movs	r6, #0
 800882e:	42a6      	cmp	r6, r4
 8008830:	d105      	bne.n	800883e <__libc_init_array+0x2e>
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	f855 3b04 	ldr.w	r3, [r5], #4
 8008838:	4798      	blx	r3
 800883a:	3601      	adds	r6, #1
 800883c:	e7ee      	b.n	800881c <__libc_init_array+0xc>
 800883e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008842:	4798      	blx	r3
 8008844:	3601      	adds	r6, #1
 8008846:	e7f2      	b.n	800882e <__libc_init_array+0x1e>
 8008848:	08009260 	.word	0x08009260
 800884c:	08009260 	.word	0x08009260
 8008850:	08009260 	.word	0x08009260
 8008854:	08009264 	.word	0x08009264

08008858 <memcpy>:
 8008858:	440a      	add	r2, r1
 800885a:	4291      	cmp	r1, r2
 800885c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008860:	d100      	bne.n	8008864 <memcpy+0xc>
 8008862:	4770      	bx	lr
 8008864:	b510      	push	{r4, lr}
 8008866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800886a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800886e:	4291      	cmp	r1, r2
 8008870:	d1f9      	bne.n	8008866 <memcpy+0xe>
 8008872:	bd10      	pop	{r4, pc}

08008874 <memset>:
 8008874:	4402      	add	r2, r0
 8008876:	4603      	mov	r3, r0
 8008878:	4293      	cmp	r3, r2
 800887a:	d100      	bne.n	800887e <memset+0xa>
 800887c:	4770      	bx	lr
 800887e:	f803 1b01 	strb.w	r1, [r3], #1
 8008882:	e7f9      	b.n	8008878 <memset+0x4>

08008884 <siprintf>:
 8008884:	b40e      	push	{r1, r2, r3}
 8008886:	b500      	push	{lr}
 8008888:	b09c      	sub	sp, #112	; 0x70
 800888a:	ab1d      	add	r3, sp, #116	; 0x74
 800888c:	9002      	str	r0, [sp, #8]
 800888e:	9006      	str	r0, [sp, #24]
 8008890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008894:	4809      	ldr	r0, [pc, #36]	; (80088bc <siprintf+0x38>)
 8008896:	9107      	str	r1, [sp, #28]
 8008898:	9104      	str	r1, [sp, #16]
 800889a:	4909      	ldr	r1, [pc, #36]	; (80088c0 <siprintf+0x3c>)
 800889c:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a0:	9105      	str	r1, [sp, #20]
 80088a2:	6800      	ldr	r0, [r0, #0]
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	a902      	add	r1, sp, #8
 80088a8:	f000 f868 	bl	800897c <_svfiprintf_r>
 80088ac:	9b02      	ldr	r3, [sp, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	b01c      	add	sp, #112	; 0x70
 80088b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b8:	b003      	add	sp, #12
 80088ba:	4770      	bx	lr
 80088bc:	20000504 	.word	0x20000504
 80088c0:	ffff0208 	.word	0xffff0208

080088c4 <__ssputs_r>:
 80088c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c8:	688e      	ldr	r6, [r1, #8]
 80088ca:	429e      	cmp	r6, r3
 80088cc:	4682      	mov	sl, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	4690      	mov	r8, r2
 80088d2:	461f      	mov	r7, r3
 80088d4:	d838      	bhi.n	8008948 <__ssputs_r+0x84>
 80088d6:	898a      	ldrh	r2, [r1, #12]
 80088d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088dc:	d032      	beq.n	8008944 <__ssputs_r+0x80>
 80088de:	6825      	ldr	r5, [r4, #0]
 80088e0:	6909      	ldr	r1, [r1, #16]
 80088e2:	eba5 0901 	sub.w	r9, r5, r1
 80088e6:	6965      	ldr	r5, [r4, #20]
 80088e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088f0:	3301      	adds	r3, #1
 80088f2:	444b      	add	r3, r9
 80088f4:	106d      	asrs	r5, r5, #1
 80088f6:	429d      	cmp	r5, r3
 80088f8:	bf38      	it	cc
 80088fa:	461d      	movcc	r5, r3
 80088fc:	0553      	lsls	r3, r2, #21
 80088fe:	d531      	bpl.n	8008964 <__ssputs_r+0xa0>
 8008900:	4629      	mov	r1, r5
 8008902:	f000 fb55 	bl	8008fb0 <_malloc_r>
 8008906:	4606      	mov	r6, r0
 8008908:	b950      	cbnz	r0, 8008920 <__ssputs_r+0x5c>
 800890a:	230c      	movs	r3, #12
 800890c:	f8ca 3000 	str.w	r3, [sl]
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008916:	81a3      	strh	r3, [r4, #12]
 8008918:	f04f 30ff 	mov.w	r0, #4294967295
 800891c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008920:	6921      	ldr	r1, [r4, #16]
 8008922:	464a      	mov	r2, r9
 8008924:	f7ff ff98 	bl	8008858 <memcpy>
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800892e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	6126      	str	r6, [r4, #16]
 8008936:	6165      	str	r5, [r4, #20]
 8008938:	444e      	add	r6, r9
 800893a:	eba5 0509 	sub.w	r5, r5, r9
 800893e:	6026      	str	r6, [r4, #0]
 8008940:	60a5      	str	r5, [r4, #8]
 8008942:	463e      	mov	r6, r7
 8008944:	42be      	cmp	r6, r7
 8008946:	d900      	bls.n	800894a <__ssputs_r+0x86>
 8008948:	463e      	mov	r6, r7
 800894a:	6820      	ldr	r0, [r4, #0]
 800894c:	4632      	mov	r2, r6
 800894e:	4641      	mov	r1, r8
 8008950:	f000 faa8 	bl	8008ea4 <memmove>
 8008954:	68a3      	ldr	r3, [r4, #8]
 8008956:	1b9b      	subs	r3, r3, r6
 8008958:	60a3      	str	r3, [r4, #8]
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	4433      	add	r3, r6
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	2000      	movs	r0, #0
 8008962:	e7db      	b.n	800891c <__ssputs_r+0x58>
 8008964:	462a      	mov	r2, r5
 8008966:	f000 fb97 	bl	8009098 <_realloc_r>
 800896a:	4606      	mov	r6, r0
 800896c:	2800      	cmp	r0, #0
 800896e:	d1e1      	bne.n	8008934 <__ssputs_r+0x70>
 8008970:	6921      	ldr	r1, [r4, #16]
 8008972:	4650      	mov	r0, sl
 8008974:	f000 fab0 	bl	8008ed8 <_free_r>
 8008978:	e7c7      	b.n	800890a <__ssputs_r+0x46>
	...

0800897c <_svfiprintf_r>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	4698      	mov	r8, r3
 8008982:	898b      	ldrh	r3, [r1, #12]
 8008984:	061b      	lsls	r3, r3, #24
 8008986:	b09d      	sub	sp, #116	; 0x74
 8008988:	4607      	mov	r7, r0
 800898a:	460d      	mov	r5, r1
 800898c:	4614      	mov	r4, r2
 800898e:	d50e      	bpl.n	80089ae <_svfiprintf_r+0x32>
 8008990:	690b      	ldr	r3, [r1, #16]
 8008992:	b963      	cbnz	r3, 80089ae <_svfiprintf_r+0x32>
 8008994:	2140      	movs	r1, #64	; 0x40
 8008996:	f000 fb0b 	bl	8008fb0 <_malloc_r>
 800899a:	6028      	str	r0, [r5, #0]
 800899c:	6128      	str	r0, [r5, #16]
 800899e:	b920      	cbnz	r0, 80089aa <_svfiprintf_r+0x2e>
 80089a0:	230c      	movs	r3, #12
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	e0d1      	b.n	8008b4e <_svfiprintf_r+0x1d2>
 80089aa:	2340      	movs	r3, #64	; 0x40
 80089ac:	616b      	str	r3, [r5, #20]
 80089ae:	2300      	movs	r3, #0
 80089b0:	9309      	str	r3, [sp, #36]	; 0x24
 80089b2:	2320      	movs	r3, #32
 80089b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80089bc:	2330      	movs	r3, #48	; 0x30
 80089be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b68 <_svfiprintf_r+0x1ec>
 80089c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089c6:	f04f 0901 	mov.w	r9, #1
 80089ca:	4623      	mov	r3, r4
 80089cc:	469a      	mov	sl, r3
 80089ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089d2:	b10a      	cbz	r2, 80089d8 <_svfiprintf_r+0x5c>
 80089d4:	2a25      	cmp	r2, #37	; 0x25
 80089d6:	d1f9      	bne.n	80089cc <_svfiprintf_r+0x50>
 80089d8:	ebba 0b04 	subs.w	fp, sl, r4
 80089dc:	d00b      	beq.n	80089f6 <_svfiprintf_r+0x7a>
 80089de:	465b      	mov	r3, fp
 80089e0:	4622      	mov	r2, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	4638      	mov	r0, r7
 80089e6:	f7ff ff6d 	bl	80088c4 <__ssputs_r>
 80089ea:	3001      	adds	r0, #1
 80089ec:	f000 80aa 	beq.w	8008b44 <_svfiprintf_r+0x1c8>
 80089f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089f2:	445a      	add	r2, fp
 80089f4:	9209      	str	r2, [sp, #36]	; 0x24
 80089f6:	f89a 3000 	ldrb.w	r3, [sl]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 80a2 	beq.w	8008b44 <_svfiprintf_r+0x1c8>
 8008a00:	2300      	movs	r3, #0
 8008a02:	f04f 32ff 	mov.w	r2, #4294967295
 8008a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a0a:	f10a 0a01 	add.w	sl, sl, #1
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	9307      	str	r3, [sp, #28]
 8008a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a16:	931a      	str	r3, [sp, #104]	; 0x68
 8008a18:	4654      	mov	r4, sl
 8008a1a:	2205      	movs	r2, #5
 8008a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a20:	4851      	ldr	r0, [pc, #324]	; (8008b68 <_svfiprintf_r+0x1ec>)
 8008a22:	f7f7 fbdd 	bl	80001e0 <memchr>
 8008a26:	9a04      	ldr	r2, [sp, #16]
 8008a28:	b9d8      	cbnz	r0, 8008a62 <_svfiprintf_r+0xe6>
 8008a2a:	06d0      	lsls	r0, r2, #27
 8008a2c:	bf44      	itt	mi
 8008a2e:	2320      	movmi	r3, #32
 8008a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a34:	0711      	lsls	r1, r2, #28
 8008a36:	bf44      	itt	mi
 8008a38:	232b      	movmi	r3, #43	; 0x2b
 8008a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a42:	2b2a      	cmp	r3, #42	; 0x2a
 8008a44:	d015      	beq.n	8008a72 <_svfiprintf_r+0xf6>
 8008a46:	9a07      	ldr	r2, [sp, #28]
 8008a48:	4654      	mov	r4, sl
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	f04f 0c0a 	mov.w	ip, #10
 8008a50:	4621      	mov	r1, r4
 8008a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a56:	3b30      	subs	r3, #48	; 0x30
 8008a58:	2b09      	cmp	r3, #9
 8008a5a:	d94e      	bls.n	8008afa <_svfiprintf_r+0x17e>
 8008a5c:	b1b0      	cbz	r0, 8008a8c <_svfiprintf_r+0x110>
 8008a5e:	9207      	str	r2, [sp, #28]
 8008a60:	e014      	b.n	8008a8c <_svfiprintf_r+0x110>
 8008a62:	eba0 0308 	sub.w	r3, r0, r8
 8008a66:	fa09 f303 	lsl.w	r3, r9, r3
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	46a2      	mov	sl, r4
 8008a70:	e7d2      	b.n	8008a18 <_svfiprintf_r+0x9c>
 8008a72:	9b03      	ldr	r3, [sp, #12]
 8008a74:	1d19      	adds	r1, r3, #4
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	9103      	str	r1, [sp, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	bfbb      	ittet	lt
 8008a7e:	425b      	neglt	r3, r3
 8008a80:	f042 0202 	orrlt.w	r2, r2, #2
 8008a84:	9307      	strge	r3, [sp, #28]
 8008a86:	9307      	strlt	r3, [sp, #28]
 8008a88:	bfb8      	it	lt
 8008a8a:	9204      	strlt	r2, [sp, #16]
 8008a8c:	7823      	ldrb	r3, [r4, #0]
 8008a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a90:	d10c      	bne.n	8008aac <_svfiprintf_r+0x130>
 8008a92:	7863      	ldrb	r3, [r4, #1]
 8008a94:	2b2a      	cmp	r3, #42	; 0x2a
 8008a96:	d135      	bne.n	8008b04 <_svfiprintf_r+0x188>
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	1d1a      	adds	r2, r3, #4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	9203      	str	r2, [sp, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bfb8      	it	lt
 8008aa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aa8:	3402      	adds	r4, #2
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b78 <_svfiprintf_r+0x1fc>
 8008ab0:	7821      	ldrb	r1, [r4, #0]
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	f7f7 fb93 	bl	80001e0 <memchr>
 8008aba:	b140      	cbz	r0, 8008ace <_svfiprintf_r+0x152>
 8008abc:	2340      	movs	r3, #64	; 0x40
 8008abe:	eba0 000a 	sub.w	r0, r0, sl
 8008ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	4303      	orrs	r3, r0
 8008aca:	3401      	adds	r4, #1
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad2:	4826      	ldr	r0, [pc, #152]	; (8008b6c <_svfiprintf_r+0x1f0>)
 8008ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ad8:	2206      	movs	r2, #6
 8008ada:	f7f7 fb81 	bl	80001e0 <memchr>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d038      	beq.n	8008b54 <_svfiprintf_r+0x1d8>
 8008ae2:	4b23      	ldr	r3, [pc, #140]	; (8008b70 <_svfiprintf_r+0x1f4>)
 8008ae4:	bb1b      	cbnz	r3, 8008b2e <_svfiprintf_r+0x1b2>
 8008ae6:	9b03      	ldr	r3, [sp, #12]
 8008ae8:	3307      	adds	r3, #7
 8008aea:	f023 0307 	bic.w	r3, r3, #7
 8008aee:	3308      	adds	r3, #8
 8008af0:	9303      	str	r3, [sp, #12]
 8008af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af4:	4433      	add	r3, r6
 8008af6:	9309      	str	r3, [sp, #36]	; 0x24
 8008af8:	e767      	b.n	80089ca <_svfiprintf_r+0x4e>
 8008afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008afe:	460c      	mov	r4, r1
 8008b00:	2001      	movs	r0, #1
 8008b02:	e7a5      	b.n	8008a50 <_svfiprintf_r+0xd4>
 8008b04:	2300      	movs	r3, #0
 8008b06:	3401      	adds	r4, #1
 8008b08:	9305      	str	r3, [sp, #20]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	f04f 0c0a 	mov.w	ip, #10
 8008b10:	4620      	mov	r0, r4
 8008b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b16:	3a30      	subs	r2, #48	; 0x30
 8008b18:	2a09      	cmp	r2, #9
 8008b1a:	d903      	bls.n	8008b24 <_svfiprintf_r+0x1a8>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0c5      	beq.n	8008aac <_svfiprintf_r+0x130>
 8008b20:	9105      	str	r1, [sp, #20]
 8008b22:	e7c3      	b.n	8008aac <_svfiprintf_r+0x130>
 8008b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b28:	4604      	mov	r4, r0
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e7f0      	b.n	8008b10 <_svfiprintf_r+0x194>
 8008b2e:	ab03      	add	r3, sp, #12
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	462a      	mov	r2, r5
 8008b34:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <_svfiprintf_r+0x1f8>)
 8008b36:	a904      	add	r1, sp, #16
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f3af 8000 	nop.w
 8008b3e:	1c42      	adds	r2, r0, #1
 8008b40:	4606      	mov	r6, r0
 8008b42:	d1d6      	bne.n	8008af2 <_svfiprintf_r+0x176>
 8008b44:	89ab      	ldrh	r3, [r5, #12]
 8008b46:	065b      	lsls	r3, r3, #25
 8008b48:	f53f af2c 	bmi.w	80089a4 <_svfiprintf_r+0x28>
 8008b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b4e:	b01d      	add	sp, #116	; 0x74
 8008b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b54:	ab03      	add	r3, sp, #12
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	462a      	mov	r2, r5
 8008b5a:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <_svfiprintf_r+0x1f8>)
 8008b5c:	a904      	add	r1, sp, #16
 8008b5e:	4638      	mov	r0, r7
 8008b60:	f000 f87a 	bl	8008c58 <_printf_i>
 8008b64:	e7eb      	b.n	8008b3e <_svfiprintf_r+0x1c2>
 8008b66:	bf00      	nop
 8008b68:	08009224 	.word	0x08009224
 8008b6c:	0800922e 	.word	0x0800922e
 8008b70:	00000000 	.word	0x00000000
 8008b74:	080088c5 	.word	0x080088c5
 8008b78:	0800922a 	.word	0x0800922a

08008b7c <_printf_common>:
 8008b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	4616      	mov	r6, r2
 8008b82:	4699      	mov	r9, r3
 8008b84:	688a      	ldr	r2, [r1, #8]
 8008b86:	690b      	ldr	r3, [r1, #16]
 8008b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	bfb8      	it	lt
 8008b90:	4613      	movlt	r3, r2
 8008b92:	6033      	str	r3, [r6, #0]
 8008b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b98:	4607      	mov	r7, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	b10a      	cbz	r2, 8008ba2 <_printf_common+0x26>
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	6033      	str	r3, [r6, #0]
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	0699      	lsls	r1, r3, #26
 8008ba6:	bf42      	ittt	mi
 8008ba8:	6833      	ldrmi	r3, [r6, #0]
 8008baa:	3302      	addmi	r3, #2
 8008bac:	6033      	strmi	r3, [r6, #0]
 8008bae:	6825      	ldr	r5, [r4, #0]
 8008bb0:	f015 0506 	ands.w	r5, r5, #6
 8008bb4:	d106      	bne.n	8008bc4 <_printf_common+0x48>
 8008bb6:	f104 0a19 	add.w	sl, r4, #25
 8008bba:	68e3      	ldr	r3, [r4, #12]
 8008bbc:	6832      	ldr	r2, [r6, #0]
 8008bbe:	1a9b      	subs	r3, r3, r2
 8008bc0:	42ab      	cmp	r3, r5
 8008bc2:	dc26      	bgt.n	8008c12 <_printf_common+0x96>
 8008bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bc8:	1e13      	subs	r3, r2, #0
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	bf18      	it	ne
 8008bce:	2301      	movne	r3, #1
 8008bd0:	0692      	lsls	r2, r2, #26
 8008bd2:	d42b      	bmi.n	8008c2c <_printf_common+0xb0>
 8008bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bd8:	4649      	mov	r1, r9
 8008bda:	4638      	mov	r0, r7
 8008bdc:	47c0      	blx	r8
 8008bde:	3001      	adds	r0, #1
 8008be0:	d01e      	beq.n	8008c20 <_printf_common+0xa4>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	68e5      	ldr	r5, [r4, #12]
 8008be6:	6832      	ldr	r2, [r6, #0]
 8008be8:	f003 0306 	and.w	r3, r3, #6
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	bf08      	it	eq
 8008bf0:	1aad      	subeq	r5, r5, r2
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	bf0c      	ite	eq
 8008bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bfc:	2500      	movne	r5, #0
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	bfc4      	itt	gt
 8008c02:	1a9b      	subgt	r3, r3, r2
 8008c04:	18ed      	addgt	r5, r5, r3
 8008c06:	2600      	movs	r6, #0
 8008c08:	341a      	adds	r4, #26
 8008c0a:	42b5      	cmp	r5, r6
 8008c0c:	d11a      	bne.n	8008c44 <_printf_common+0xc8>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e008      	b.n	8008c24 <_printf_common+0xa8>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4652      	mov	r2, sl
 8008c16:	4649      	mov	r1, r9
 8008c18:	4638      	mov	r0, r7
 8008c1a:	47c0      	blx	r8
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d103      	bne.n	8008c28 <_printf_common+0xac>
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c28:	3501      	adds	r5, #1
 8008c2a:	e7c6      	b.n	8008bba <_printf_common+0x3e>
 8008c2c:	18e1      	adds	r1, r4, r3
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	2030      	movs	r0, #48	; 0x30
 8008c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c36:	4422      	add	r2, r4
 8008c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c40:	3302      	adds	r3, #2
 8008c42:	e7c7      	b.n	8008bd4 <_printf_common+0x58>
 8008c44:	2301      	movs	r3, #1
 8008c46:	4622      	mov	r2, r4
 8008c48:	4649      	mov	r1, r9
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	47c0      	blx	r8
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d0e6      	beq.n	8008c20 <_printf_common+0xa4>
 8008c52:	3601      	adds	r6, #1
 8008c54:	e7d9      	b.n	8008c0a <_printf_common+0x8e>
	...

08008c58 <_printf_i>:
 8008c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5c:	7e0f      	ldrb	r7, [r1, #24]
 8008c5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c60:	2f78      	cmp	r7, #120	; 0x78
 8008c62:	4691      	mov	r9, r2
 8008c64:	4680      	mov	r8, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	469a      	mov	sl, r3
 8008c6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c6e:	d807      	bhi.n	8008c80 <_printf_i+0x28>
 8008c70:	2f62      	cmp	r7, #98	; 0x62
 8008c72:	d80a      	bhi.n	8008c8a <_printf_i+0x32>
 8008c74:	2f00      	cmp	r7, #0
 8008c76:	f000 80d8 	beq.w	8008e2a <_printf_i+0x1d2>
 8008c7a:	2f58      	cmp	r7, #88	; 0x58
 8008c7c:	f000 80a3 	beq.w	8008dc6 <_printf_i+0x16e>
 8008c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c88:	e03a      	b.n	8008d00 <_printf_i+0xa8>
 8008c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c8e:	2b15      	cmp	r3, #21
 8008c90:	d8f6      	bhi.n	8008c80 <_printf_i+0x28>
 8008c92:	a101      	add	r1, pc, #4	; (adr r1, 8008c98 <_printf_i+0x40>)
 8008c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c98:	08008cf1 	.word	0x08008cf1
 8008c9c:	08008d05 	.word	0x08008d05
 8008ca0:	08008c81 	.word	0x08008c81
 8008ca4:	08008c81 	.word	0x08008c81
 8008ca8:	08008c81 	.word	0x08008c81
 8008cac:	08008c81 	.word	0x08008c81
 8008cb0:	08008d05 	.word	0x08008d05
 8008cb4:	08008c81 	.word	0x08008c81
 8008cb8:	08008c81 	.word	0x08008c81
 8008cbc:	08008c81 	.word	0x08008c81
 8008cc0:	08008c81 	.word	0x08008c81
 8008cc4:	08008e11 	.word	0x08008e11
 8008cc8:	08008d35 	.word	0x08008d35
 8008ccc:	08008df3 	.word	0x08008df3
 8008cd0:	08008c81 	.word	0x08008c81
 8008cd4:	08008c81 	.word	0x08008c81
 8008cd8:	08008e33 	.word	0x08008e33
 8008cdc:	08008c81 	.word	0x08008c81
 8008ce0:	08008d35 	.word	0x08008d35
 8008ce4:	08008c81 	.word	0x08008c81
 8008ce8:	08008c81 	.word	0x08008c81
 8008cec:	08008dfb 	.word	0x08008dfb
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	1d1a      	adds	r2, r3, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	602a      	str	r2, [r5, #0]
 8008cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d00:	2301      	movs	r3, #1
 8008d02:	e0a3      	b.n	8008e4c <_printf_i+0x1f4>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	6829      	ldr	r1, [r5, #0]
 8008d08:	0606      	lsls	r6, r0, #24
 8008d0a:	f101 0304 	add.w	r3, r1, #4
 8008d0e:	d50a      	bpl.n	8008d26 <_printf_i+0xce>
 8008d10:	680e      	ldr	r6, [r1, #0]
 8008d12:	602b      	str	r3, [r5, #0]
 8008d14:	2e00      	cmp	r6, #0
 8008d16:	da03      	bge.n	8008d20 <_printf_i+0xc8>
 8008d18:	232d      	movs	r3, #45	; 0x2d
 8008d1a:	4276      	negs	r6, r6
 8008d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d20:	485e      	ldr	r0, [pc, #376]	; (8008e9c <_printf_i+0x244>)
 8008d22:	230a      	movs	r3, #10
 8008d24:	e019      	b.n	8008d5a <_printf_i+0x102>
 8008d26:	680e      	ldr	r6, [r1, #0]
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d2e:	bf18      	it	ne
 8008d30:	b236      	sxthne	r6, r6
 8008d32:	e7ef      	b.n	8008d14 <_printf_i+0xbc>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	6820      	ldr	r0, [r4, #0]
 8008d38:	1d19      	adds	r1, r3, #4
 8008d3a:	6029      	str	r1, [r5, #0]
 8008d3c:	0601      	lsls	r1, r0, #24
 8008d3e:	d501      	bpl.n	8008d44 <_printf_i+0xec>
 8008d40:	681e      	ldr	r6, [r3, #0]
 8008d42:	e002      	b.n	8008d4a <_printf_i+0xf2>
 8008d44:	0646      	lsls	r6, r0, #25
 8008d46:	d5fb      	bpl.n	8008d40 <_printf_i+0xe8>
 8008d48:	881e      	ldrh	r6, [r3, #0]
 8008d4a:	4854      	ldr	r0, [pc, #336]	; (8008e9c <_printf_i+0x244>)
 8008d4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d4e:	bf0c      	ite	eq
 8008d50:	2308      	moveq	r3, #8
 8008d52:	230a      	movne	r3, #10
 8008d54:	2100      	movs	r1, #0
 8008d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d5a:	6865      	ldr	r5, [r4, #4]
 8008d5c:	60a5      	str	r5, [r4, #8]
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	bfa2      	ittt	ge
 8008d62:	6821      	ldrge	r1, [r4, #0]
 8008d64:	f021 0104 	bicge.w	r1, r1, #4
 8008d68:	6021      	strge	r1, [r4, #0]
 8008d6a:	b90e      	cbnz	r6, 8008d70 <_printf_i+0x118>
 8008d6c:	2d00      	cmp	r5, #0
 8008d6e:	d04d      	beq.n	8008e0c <_printf_i+0x1b4>
 8008d70:	4615      	mov	r5, r2
 8008d72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d76:	fb03 6711 	mls	r7, r3, r1, r6
 8008d7a:	5dc7      	ldrb	r7, [r0, r7]
 8008d7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d80:	4637      	mov	r7, r6
 8008d82:	42bb      	cmp	r3, r7
 8008d84:	460e      	mov	r6, r1
 8008d86:	d9f4      	bls.n	8008d72 <_printf_i+0x11a>
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d10b      	bne.n	8008da4 <_printf_i+0x14c>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	07de      	lsls	r6, r3, #31
 8008d90:	d508      	bpl.n	8008da4 <_printf_i+0x14c>
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	6861      	ldr	r1, [r4, #4]
 8008d96:	4299      	cmp	r1, r3
 8008d98:	bfde      	ittt	le
 8008d9a:	2330      	movle	r3, #48	; 0x30
 8008d9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008da0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008da4:	1b52      	subs	r2, r2, r5
 8008da6:	6122      	str	r2, [r4, #16]
 8008da8:	f8cd a000 	str.w	sl, [sp]
 8008dac:	464b      	mov	r3, r9
 8008dae:	aa03      	add	r2, sp, #12
 8008db0:	4621      	mov	r1, r4
 8008db2:	4640      	mov	r0, r8
 8008db4:	f7ff fee2 	bl	8008b7c <_printf_common>
 8008db8:	3001      	adds	r0, #1
 8008dba:	d14c      	bne.n	8008e56 <_printf_i+0x1fe>
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc0:	b004      	add	sp, #16
 8008dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc6:	4835      	ldr	r0, [pc, #212]	; (8008e9c <_printf_i+0x244>)
 8008dc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008dcc:	6829      	ldr	r1, [r5, #0]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dd4:	6029      	str	r1, [r5, #0]
 8008dd6:	061d      	lsls	r5, r3, #24
 8008dd8:	d514      	bpl.n	8008e04 <_printf_i+0x1ac>
 8008dda:	07df      	lsls	r7, r3, #31
 8008ddc:	bf44      	itt	mi
 8008dde:	f043 0320 	orrmi.w	r3, r3, #32
 8008de2:	6023      	strmi	r3, [r4, #0]
 8008de4:	b91e      	cbnz	r6, 8008dee <_printf_i+0x196>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	f023 0320 	bic.w	r3, r3, #32
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	2310      	movs	r3, #16
 8008df0:	e7b0      	b.n	8008d54 <_printf_i+0xfc>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	f043 0320 	orr.w	r3, r3, #32
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	2378      	movs	r3, #120	; 0x78
 8008dfc:	4828      	ldr	r0, [pc, #160]	; (8008ea0 <_printf_i+0x248>)
 8008dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e02:	e7e3      	b.n	8008dcc <_printf_i+0x174>
 8008e04:	0659      	lsls	r1, r3, #25
 8008e06:	bf48      	it	mi
 8008e08:	b2b6      	uxthmi	r6, r6
 8008e0a:	e7e6      	b.n	8008dda <_printf_i+0x182>
 8008e0c:	4615      	mov	r5, r2
 8008e0e:	e7bb      	b.n	8008d88 <_printf_i+0x130>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	6826      	ldr	r6, [r4, #0]
 8008e14:	6961      	ldr	r1, [r4, #20]
 8008e16:	1d18      	adds	r0, r3, #4
 8008e18:	6028      	str	r0, [r5, #0]
 8008e1a:	0635      	lsls	r5, r6, #24
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	d501      	bpl.n	8008e24 <_printf_i+0x1cc>
 8008e20:	6019      	str	r1, [r3, #0]
 8008e22:	e002      	b.n	8008e2a <_printf_i+0x1d2>
 8008e24:	0670      	lsls	r0, r6, #25
 8008e26:	d5fb      	bpl.n	8008e20 <_printf_i+0x1c8>
 8008e28:	8019      	strh	r1, [r3, #0]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	4615      	mov	r5, r2
 8008e30:	e7ba      	b.n	8008da8 <_printf_i+0x150>
 8008e32:	682b      	ldr	r3, [r5, #0]
 8008e34:	1d1a      	adds	r2, r3, #4
 8008e36:	602a      	str	r2, [r5, #0]
 8008e38:	681d      	ldr	r5, [r3, #0]
 8008e3a:	6862      	ldr	r2, [r4, #4]
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f7f7 f9ce 	bl	80001e0 <memchr>
 8008e44:	b108      	cbz	r0, 8008e4a <_printf_i+0x1f2>
 8008e46:	1b40      	subs	r0, r0, r5
 8008e48:	6060      	str	r0, [r4, #4]
 8008e4a:	6863      	ldr	r3, [r4, #4]
 8008e4c:	6123      	str	r3, [r4, #16]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e54:	e7a8      	b.n	8008da8 <_printf_i+0x150>
 8008e56:	6923      	ldr	r3, [r4, #16]
 8008e58:	462a      	mov	r2, r5
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	47d0      	blx	sl
 8008e60:	3001      	adds	r0, #1
 8008e62:	d0ab      	beq.n	8008dbc <_printf_i+0x164>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	079b      	lsls	r3, r3, #30
 8008e68:	d413      	bmi.n	8008e92 <_printf_i+0x23a>
 8008e6a:	68e0      	ldr	r0, [r4, #12]
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	4298      	cmp	r0, r3
 8008e70:	bfb8      	it	lt
 8008e72:	4618      	movlt	r0, r3
 8008e74:	e7a4      	b.n	8008dc0 <_printf_i+0x168>
 8008e76:	2301      	movs	r3, #1
 8008e78:	4632      	mov	r2, r6
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	47d0      	blx	sl
 8008e80:	3001      	adds	r0, #1
 8008e82:	d09b      	beq.n	8008dbc <_printf_i+0x164>
 8008e84:	3501      	adds	r5, #1
 8008e86:	68e3      	ldr	r3, [r4, #12]
 8008e88:	9903      	ldr	r1, [sp, #12]
 8008e8a:	1a5b      	subs	r3, r3, r1
 8008e8c:	42ab      	cmp	r3, r5
 8008e8e:	dcf2      	bgt.n	8008e76 <_printf_i+0x21e>
 8008e90:	e7eb      	b.n	8008e6a <_printf_i+0x212>
 8008e92:	2500      	movs	r5, #0
 8008e94:	f104 0619 	add.w	r6, r4, #25
 8008e98:	e7f5      	b.n	8008e86 <_printf_i+0x22e>
 8008e9a:	bf00      	nop
 8008e9c:	08009235 	.word	0x08009235
 8008ea0:	08009246 	.word	0x08009246

08008ea4 <memmove>:
 8008ea4:	4288      	cmp	r0, r1
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	eb01 0402 	add.w	r4, r1, r2
 8008eac:	d902      	bls.n	8008eb4 <memmove+0x10>
 8008eae:	4284      	cmp	r4, r0
 8008eb0:	4623      	mov	r3, r4
 8008eb2:	d807      	bhi.n	8008ec4 <memmove+0x20>
 8008eb4:	1e43      	subs	r3, r0, #1
 8008eb6:	42a1      	cmp	r1, r4
 8008eb8:	d008      	beq.n	8008ecc <memmove+0x28>
 8008eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ec2:	e7f8      	b.n	8008eb6 <memmove+0x12>
 8008ec4:	4402      	add	r2, r0
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	428a      	cmp	r2, r1
 8008eca:	d100      	bne.n	8008ece <memmove+0x2a>
 8008ecc:	bd10      	pop	{r4, pc}
 8008ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ed6:	e7f7      	b.n	8008ec8 <memmove+0x24>

08008ed8 <_free_r>:
 8008ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eda:	2900      	cmp	r1, #0
 8008edc:	d044      	beq.n	8008f68 <_free_r+0x90>
 8008ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee2:	9001      	str	r0, [sp, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eea:	bfb8      	it	lt
 8008eec:	18e4      	addlt	r4, r4, r3
 8008eee:	f000 f913 	bl	8009118 <__malloc_lock>
 8008ef2:	4a1e      	ldr	r2, [pc, #120]	; (8008f6c <_free_r+0x94>)
 8008ef4:	9801      	ldr	r0, [sp, #4]
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	b933      	cbnz	r3, 8008f08 <_free_r+0x30>
 8008efa:	6063      	str	r3, [r4, #4]
 8008efc:	6014      	str	r4, [r2, #0]
 8008efe:	b003      	add	sp, #12
 8008f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f04:	f000 b90e 	b.w	8009124 <__malloc_unlock>
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	d908      	bls.n	8008f1e <_free_r+0x46>
 8008f0c:	6825      	ldr	r5, [r4, #0]
 8008f0e:	1961      	adds	r1, r4, r5
 8008f10:	428b      	cmp	r3, r1
 8008f12:	bf01      	itttt	eq
 8008f14:	6819      	ldreq	r1, [r3, #0]
 8008f16:	685b      	ldreq	r3, [r3, #4]
 8008f18:	1949      	addeq	r1, r1, r5
 8008f1a:	6021      	streq	r1, [r4, #0]
 8008f1c:	e7ed      	b.n	8008efa <_free_r+0x22>
 8008f1e:	461a      	mov	r2, r3
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	b10b      	cbz	r3, 8008f28 <_free_r+0x50>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d9fa      	bls.n	8008f1e <_free_r+0x46>
 8008f28:	6811      	ldr	r1, [r2, #0]
 8008f2a:	1855      	adds	r5, r2, r1
 8008f2c:	42a5      	cmp	r5, r4
 8008f2e:	d10b      	bne.n	8008f48 <_free_r+0x70>
 8008f30:	6824      	ldr	r4, [r4, #0]
 8008f32:	4421      	add	r1, r4
 8008f34:	1854      	adds	r4, r2, r1
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	d1e0      	bne.n	8008efe <_free_r+0x26>
 8008f3c:	681c      	ldr	r4, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	6053      	str	r3, [r2, #4]
 8008f42:	4421      	add	r1, r4
 8008f44:	6011      	str	r1, [r2, #0]
 8008f46:	e7da      	b.n	8008efe <_free_r+0x26>
 8008f48:	d902      	bls.n	8008f50 <_free_r+0x78>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	6003      	str	r3, [r0, #0]
 8008f4e:	e7d6      	b.n	8008efe <_free_r+0x26>
 8008f50:	6825      	ldr	r5, [r4, #0]
 8008f52:	1961      	adds	r1, r4, r5
 8008f54:	428b      	cmp	r3, r1
 8008f56:	bf04      	itt	eq
 8008f58:	6819      	ldreq	r1, [r3, #0]
 8008f5a:	685b      	ldreq	r3, [r3, #4]
 8008f5c:	6063      	str	r3, [r4, #4]
 8008f5e:	bf04      	itt	eq
 8008f60:	1949      	addeq	r1, r1, r5
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	6054      	str	r4, [r2, #4]
 8008f66:	e7ca      	b.n	8008efe <_free_r+0x26>
 8008f68:	b003      	add	sp, #12
 8008f6a:	bd30      	pop	{r4, r5, pc}
 8008f6c:	200006a4 	.word	0x200006a4

08008f70 <sbrk_aligned>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	4e0e      	ldr	r6, [pc, #56]	; (8008fac <sbrk_aligned+0x3c>)
 8008f74:	460c      	mov	r4, r1
 8008f76:	6831      	ldr	r1, [r6, #0]
 8008f78:	4605      	mov	r5, r0
 8008f7a:	b911      	cbnz	r1, 8008f82 <sbrk_aligned+0x12>
 8008f7c:	f000 f8bc 	bl	80090f8 <_sbrk_r>
 8008f80:	6030      	str	r0, [r6, #0]
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 f8b7 	bl	80090f8 <_sbrk_r>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d00a      	beq.n	8008fa4 <sbrk_aligned+0x34>
 8008f8e:	1cc4      	adds	r4, r0, #3
 8008f90:	f024 0403 	bic.w	r4, r4, #3
 8008f94:	42a0      	cmp	r0, r4
 8008f96:	d007      	beq.n	8008fa8 <sbrk_aligned+0x38>
 8008f98:	1a21      	subs	r1, r4, r0
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 f8ac 	bl	80090f8 <_sbrk_r>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d101      	bne.n	8008fa8 <sbrk_aligned+0x38>
 8008fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fa8:	4620      	mov	r0, r4
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	200006a8 	.word	0x200006a8

08008fb0 <_malloc_r>:
 8008fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb4:	1ccd      	adds	r5, r1, #3
 8008fb6:	f025 0503 	bic.w	r5, r5, #3
 8008fba:	3508      	adds	r5, #8
 8008fbc:	2d0c      	cmp	r5, #12
 8008fbe:	bf38      	it	cc
 8008fc0:	250c      	movcc	r5, #12
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	db01      	blt.n	8008fcc <_malloc_r+0x1c>
 8008fc8:	42a9      	cmp	r1, r5
 8008fca:	d905      	bls.n	8008fd8 <_malloc_r+0x28>
 8008fcc:	230c      	movs	r3, #12
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	2600      	movs	r6, #0
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd8:	4e2e      	ldr	r6, [pc, #184]	; (8009094 <_malloc_r+0xe4>)
 8008fda:	f000 f89d 	bl	8009118 <__malloc_lock>
 8008fde:	6833      	ldr	r3, [r6, #0]
 8008fe0:	461c      	mov	r4, r3
 8008fe2:	bb34      	cbnz	r4, 8009032 <_malloc_r+0x82>
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f7ff ffc2 	bl	8008f70 <sbrk_aligned>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	4604      	mov	r4, r0
 8008ff0:	d14d      	bne.n	800908e <_malloc_r+0xde>
 8008ff2:	6834      	ldr	r4, [r6, #0]
 8008ff4:	4626      	mov	r6, r4
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	d140      	bne.n	800907c <_malloc_r+0xcc>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4638      	mov	r0, r7
 8009000:	eb04 0803 	add.w	r8, r4, r3
 8009004:	f000 f878 	bl	80090f8 <_sbrk_r>
 8009008:	4580      	cmp	r8, r0
 800900a:	d13a      	bne.n	8009082 <_malloc_r+0xd2>
 800900c:	6821      	ldr	r1, [r4, #0]
 800900e:	3503      	adds	r5, #3
 8009010:	1a6d      	subs	r5, r5, r1
 8009012:	f025 0503 	bic.w	r5, r5, #3
 8009016:	3508      	adds	r5, #8
 8009018:	2d0c      	cmp	r5, #12
 800901a:	bf38      	it	cc
 800901c:	250c      	movcc	r5, #12
 800901e:	4629      	mov	r1, r5
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff ffa5 	bl	8008f70 <sbrk_aligned>
 8009026:	3001      	adds	r0, #1
 8009028:	d02b      	beq.n	8009082 <_malloc_r+0xd2>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	442b      	add	r3, r5
 800902e:	6023      	str	r3, [r4, #0]
 8009030:	e00e      	b.n	8009050 <_malloc_r+0xa0>
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	1b52      	subs	r2, r2, r5
 8009036:	d41e      	bmi.n	8009076 <_malloc_r+0xc6>
 8009038:	2a0b      	cmp	r2, #11
 800903a:	d916      	bls.n	800906a <_malloc_r+0xba>
 800903c:	1961      	adds	r1, r4, r5
 800903e:	42a3      	cmp	r3, r4
 8009040:	6025      	str	r5, [r4, #0]
 8009042:	bf18      	it	ne
 8009044:	6059      	strne	r1, [r3, #4]
 8009046:	6863      	ldr	r3, [r4, #4]
 8009048:	bf08      	it	eq
 800904a:	6031      	streq	r1, [r6, #0]
 800904c:	5162      	str	r2, [r4, r5]
 800904e:	604b      	str	r3, [r1, #4]
 8009050:	4638      	mov	r0, r7
 8009052:	f104 060b 	add.w	r6, r4, #11
 8009056:	f000 f865 	bl	8009124 <__malloc_unlock>
 800905a:	f026 0607 	bic.w	r6, r6, #7
 800905e:	1d23      	adds	r3, r4, #4
 8009060:	1af2      	subs	r2, r6, r3
 8009062:	d0b6      	beq.n	8008fd2 <_malloc_r+0x22>
 8009064:	1b9b      	subs	r3, r3, r6
 8009066:	50a3      	str	r3, [r4, r2]
 8009068:	e7b3      	b.n	8008fd2 <_malloc_r+0x22>
 800906a:	6862      	ldr	r2, [r4, #4]
 800906c:	42a3      	cmp	r3, r4
 800906e:	bf0c      	ite	eq
 8009070:	6032      	streq	r2, [r6, #0]
 8009072:	605a      	strne	r2, [r3, #4]
 8009074:	e7ec      	b.n	8009050 <_malloc_r+0xa0>
 8009076:	4623      	mov	r3, r4
 8009078:	6864      	ldr	r4, [r4, #4]
 800907a:	e7b2      	b.n	8008fe2 <_malloc_r+0x32>
 800907c:	4634      	mov	r4, r6
 800907e:	6876      	ldr	r6, [r6, #4]
 8009080:	e7b9      	b.n	8008ff6 <_malloc_r+0x46>
 8009082:	230c      	movs	r3, #12
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	4638      	mov	r0, r7
 8009088:	f000 f84c 	bl	8009124 <__malloc_unlock>
 800908c:	e7a1      	b.n	8008fd2 <_malloc_r+0x22>
 800908e:	6025      	str	r5, [r4, #0]
 8009090:	e7de      	b.n	8009050 <_malloc_r+0xa0>
 8009092:	bf00      	nop
 8009094:	200006a4 	.word	0x200006a4

08009098 <_realloc_r>:
 8009098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909c:	4680      	mov	r8, r0
 800909e:	4614      	mov	r4, r2
 80090a0:	460e      	mov	r6, r1
 80090a2:	b921      	cbnz	r1, 80090ae <_realloc_r+0x16>
 80090a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a8:	4611      	mov	r1, r2
 80090aa:	f7ff bf81 	b.w	8008fb0 <_malloc_r>
 80090ae:	b92a      	cbnz	r2, 80090bc <_realloc_r+0x24>
 80090b0:	f7ff ff12 	bl	8008ed8 <_free_r>
 80090b4:	4625      	mov	r5, r4
 80090b6:	4628      	mov	r0, r5
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090bc:	f000 f838 	bl	8009130 <_malloc_usable_size_r>
 80090c0:	4284      	cmp	r4, r0
 80090c2:	4607      	mov	r7, r0
 80090c4:	d802      	bhi.n	80090cc <_realloc_r+0x34>
 80090c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090ca:	d812      	bhi.n	80090f2 <_realloc_r+0x5a>
 80090cc:	4621      	mov	r1, r4
 80090ce:	4640      	mov	r0, r8
 80090d0:	f7ff ff6e 	bl	8008fb0 <_malloc_r>
 80090d4:	4605      	mov	r5, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d0ed      	beq.n	80090b6 <_realloc_r+0x1e>
 80090da:	42bc      	cmp	r4, r7
 80090dc:	4622      	mov	r2, r4
 80090de:	4631      	mov	r1, r6
 80090e0:	bf28      	it	cs
 80090e2:	463a      	movcs	r2, r7
 80090e4:	f7ff fbb8 	bl	8008858 <memcpy>
 80090e8:	4631      	mov	r1, r6
 80090ea:	4640      	mov	r0, r8
 80090ec:	f7ff fef4 	bl	8008ed8 <_free_r>
 80090f0:	e7e1      	b.n	80090b6 <_realloc_r+0x1e>
 80090f2:	4635      	mov	r5, r6
 80090f4:	e7df      	b.n	80090b6 <_realloc_r+0x1e>
	...

080090f8 <_sbrk_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d06      	ldr	r5, [pc, #24]	; (8009114 <_sbrk_r+0x1c>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7f7 fd1e 	bl	8000b44 <_sbrk>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_sbrk_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_sbrk_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	200006ac 	.word	0x200006ac

08009118 <__malloc_lock>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__malloc_lock+0x8>)
 800911a:	f000 b811 	b.w	8009140 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	200006b0 	.word	0x200006b0

08009124 <__malloc_unlock>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__malloc_unlock+0x8>)
 8009126:	f000 b80c 	b.w	8009142 <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	200006b0 	.word	0x200006b0

08009130 <_malloc_usable_size_r>:
 8009130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009134:	1f18      	subs	r0, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfbc      	itt	lt
 800913a:	580b      	ldrlt	r3, [r1, r0]
 800913c:	18c0      	addlt	r0, r0, r3
 800913e:	4770      	bx	lr

08009140 <__retarget_lock_acquire_recursive>:
 8009140:	4770      	bx	lr

08009142 <__retarget_lock_release_recursive>:
 8009142:	4770      	bx	lr

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
