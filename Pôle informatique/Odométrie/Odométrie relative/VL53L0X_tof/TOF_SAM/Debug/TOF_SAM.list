
TOF_SAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e4  080091e4  000203d0  2**0
                  CONTENTS
  4 .ARM          00000008  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091ec  080091ec  000203d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  20000000  080091f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  200003d0  080095c4  000203d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  080095c4  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4fa  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e42  00000000  00000000  0003a8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0003d740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  0003e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000453d  00000000  00000000  0003fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001709d  00000000  00000000  00043ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9770  00000000  00000000  0005b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012480a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005020  00000000  00000000  0012485c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d0 	.word	0x200003d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009108 	.word	0x08009108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003d4 	.word	0x200003d4
 80001cc:	08009108 	.word	0x08009108

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TOF_Units_t montof = TOF_UNIT_0;
 800058a:	2300      	movs	r3, #0
 800058c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t tentatives_max = 100;
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	86bb      	strh	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fb29 	bl	8000bea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f84a 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f91a 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f8e8 	bl	8000774 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a4:	f000 f8a6 	bl	80006f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  TOF_Status_t result_init = TOF_Init();
 80005a8:	f004 f9b0 	bl	800490c <TOF_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if(result_init != TOF_STATUS_SUCESS){
 80005b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d012      	beq.n	80005e0 <main+0x5c>
	  sprintf((char*)buf, "Erreur lors de l'initialisation : %i\r\n", ((int8_t)result_init));
 80005ba:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4918      	ldr	r1, [pc, #96]	; (8000624 <main+0xa0>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f008 f940 	bl	8008848 <siprintf>

	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fe00 	bl	80001d0 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	1d39      	adds	r1, r7, #4
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0xa4>)
 80005dc:	f003 fb70 	bl	8003cc0 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		TOF_Get_Range(montof, tentatives_max, &range_milimeters, &range_status);
 80005e0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80005e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80005e8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80005ea:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80005ee:	f004 f9bf 	bl	8004970 <TOF_Get_Range>
		sprintf((char*)buf, "Value : %u mm | Status : %u\r\n", ((uint16_t)range_milimeters), ((uint8_t)range_status));
 80005f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80005f4:	461a      	mov	r2, r3
 80005f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005fa:	1d38      	adds	r0, r7, #4
 80005fc:	490b      	ldr	r1, [pc, #44]	; (800062c <main+0xa8>)
 80005fe:	f008 f923 	bl	8008848 <siprintf>

		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fde3 	bl	80001d0 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	1d39      	adds	r1, r7, #4
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0xa4>)
 8000616:	f003 fb53 	bl	8003cc0 <HAL_UART_Transmit>
		HAL_Delay(100);
 800061a:	2064      	movs	r0, #100	; 0x64
 800061c:	f000 fb5a 	bl	8000cd4 <HAL_Delay>
		TOF_Get_Range(montof, tentatives_max, &range_milimeters, &range_status);
 8000620:	e7de      	b.n	80005e0 <main+0x5c>
 8000622:	bf00      	nop
 8000624:	08009120 	.word	0x08009120
 8000628:	20000440 	.word	0x20000440
 800062c:	08009148 	.word	0x08009148

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2244      	movs	r2, #68	; 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f008 f8fa 	bl	8008838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000652:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000656:	f002 f95f 	bl	8002918 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000660:	f000 f918 	bl	8000894 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000664:	f002 f93a 	bl	80028dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemClock_Config+0xc0>)
 800066a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemClock_Config+0xc0>)
 8000670:	f023 0318 	bic.w	r3, r3, #24
 8000674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000678:	2314      	movs	r3, #20
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000690:	2301      	movs	r3, #1
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069c:	2307      	movs	r3, #7
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f989 	bl	80029c4 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006b8:	f000 f8ec 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2303      	movs	r3, #3
 80006c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	2101      	movs	r1, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fd89 	bl	80031ec <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006e0:	f000 f8d8 	bl	8000894 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006e4:	f003 f99c 	bl	8003a20 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006e8:	bf00      	nop
 80006ea:	3758      	adds	r7, #88	; 0x58
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C1_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C1_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6010C7FF;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C1_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_I2C1_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C1_Init+0x74>)
 800070c:	2201      	movs	r2, #1
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_I2C1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_I2C1_Init+0x74>)
 8000730:	f000 fdd6 	bl	80012e0 <HAL_I2C_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073a:	f000 f8ab 	bl	8000894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C1_Init+0x74>)
 8000742:	f002 f833 	bl	80027ac <HAL_I2CEx_ConfigAnalogFilter>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800074c:	f000 f8a2 	bl	8000894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_I2C1_Init+0x74>)
 8000754:	f002 f875 	bl	8002842 <HAL_I2CEx_ConfigDigitalFilter>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 f899 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200003ec 	.word	0x200003ec
 800076c:	40005400 	.word	0x40005400
 8000770:	6010c7ff 	.word	0x6010c7ff

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART2_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b8:	f003 fa34 	bl	8003c24 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f867 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000440 	.word	0x20000440
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_GPIO_Init+0xb8>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <MX_GPIO_Init+0xb8>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_GPIO_Init+0xb8>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_GPIO_Init+0xb8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a21      	ldr	r2, [pc, #132]	; (800088c <MX_GPIO_Init+0xb8>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_GPIO_Init+0xb8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xb8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_GPIO_Init+0xb8>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0xb8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF0_XSHUT_GPIO_Port, TOF0_XSHUT_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 fd39 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4813      	ldr	r0, [pc, #76]	; (8000890 <MX_GPIO_Init+0xbc>)
 8000844:	f000 fd34 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOF0_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF0_XSHUT_Pin;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF0_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f000 fbbb 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xbc>)
 800087e:	f000 fbad 	bl	8000fdc <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_MspInit+0x44>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	; 0x60
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b09e      	sub	sp, #120	; 0x78
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2254      	movs	r2, #84	; 0x54
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f007 ff95 	bl	8008838 <memset>
  if(hi2c->Instance==I2C1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a27      	ldr	r2, [pc, #156]	; (80009b0 <HAL_I2C_MspInit+0xc8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d147      	bne.n	80009a8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800091c:	2300      	movs	r3, #0
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fe85 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000930:	f7ff ffb0 	bl	8000894 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <HAL_I2C_MspInit+0xcc>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <HAL_I2C_MspInit+0xcc>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_I2C_MspInit+0xcc>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800094c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000950:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000952:	2312      	movs	r3, #18
 8000954:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000956:	2301      	movs	r3, #1
 8000958:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095e:	2304      	movs	r3, #4
 8000960:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fb36 	bl	8000fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_I2C_MspInit+0xcc>)
 8000972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_I2C_MspInit+0xcc>)
 8000976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097a:	6593      	str	r3, [r2, #88]	; 0x58
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_I2C_MspInit+0xcc>)
 800097e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	201f      	movs	r0, #31
 800098e:	f000 faa0 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000992:	201f      	movs	r0, #31
 8000994:	f000 fab9 	bl	8000f0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2020      	movs	r0, #32
 800099e:	f000 fa98 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009a2:	2020      	movs	r0, #32
 80009a4:	f000 fab1 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3778      	adds	r7, #120	; 0x78
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40005400 	.word	0x40005400
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09e      	sub	sp, #120	; 0x78
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2254      	movs	r2, #84	; 0x54
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f007 ff2d 	bl	8008838 <memset>
  if(huart->Instance==USART2)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <HAL_UART_MspInit+0xcc>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d148      	bne.n	8000a7a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fe1d 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f7ff ff48 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_UART_MspInit+0xd0>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a08:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <HAL_UART_MspInit+0xd0>)
 8000a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <HAL_UART_MspInit+0xd0>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_UART_MspInit+0xd0>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_UART_MspInit+0xd0>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_UART_MspInit+0xd0>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a34:	2304      	movs	r3, #4
 8000a36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a44:	2307      	movs	r3, #7
 8000a46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 fac3 	bl	8000fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f000 fab1 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3778      	adds	r7, #120	; 0x78
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f8dc 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <I2C1_EV_IRQHandler+0x10>)
 8000ae6:	f000 fe75 	bl	80017d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200003ec 	.word	0x200003ec

08000af4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <I2C1_ER_IRQHandler+0x10>)
 8000afa:	f000 fe85 	bl	8001808 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200003ec 	.word	0x200003ec

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f007 fe46 	bl	80087c8 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20010000 	.word	0x20010000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	200004c4 	.word	0x200004c4
 8000b70:	20000520 	.word	0x20000520

08000b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b9c:	f7ff ffea 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopForever+0xe>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopForever+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f007 fe05 	bl	80087d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bca:	f7ff fcdb 	bl	8000584 <main>

08000bce <LoopForever>:

LoopForever:
    b LoopForever
 8000bce:	e7fe      	b.n	8000bce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	200003d0 	.word	0x200003d0
  ldr r2, =_sidata
 8000bdc:	080091f4 	.word	0x080091f4
  ldr r2, =_sbss
 8000be0:	200003d0 	.word	0x200003d0
  ldr r4, =_ebss
 8000be4:	2000051c 	.word	0x2000051c

08000be8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_IRQHandler>

08000bea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f961 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f80e 	bl	8000c1c <HAL_InitTick>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	e001      	b.n	8000c10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0c:	f7ff fe48 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_InitTick+0x6c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d023      	beq.n	8000c78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_InitTick+0x70>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_InitTick+0x6c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f96d 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10f      	bne.n	8000c72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d809      	bhi.n	8000c6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f937 	bl	8000ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_InitTick+0x74>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e004      	b.n	8000c7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e001      	b.n	8000c7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	200004c8 	.word	0x200004c8

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200004c8 	.word	0x200004c8

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff3e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff31 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d005      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2204      	movs	r2, #4
 8000f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e029      	b.n	8000fb6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 020e 	bic.w	r2, r2, #14
 8000f70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0201 	bic.w	r2, r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f003 021c 	and.w	r2, r3, #28
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	4798      	blx	r3
    }
  }
  return status;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fce:	b2db      	uxtb	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e148      	b.n	800127e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 813a 	beq.w	8001278 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8094 	beq.w	8001278 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	4a51      	ldr	r2, [pc, #324]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6613      	str	r3, [r2, #96]	; 0x60
 800115c:	4b4f      	ldr	r3, [pc, #316]	; (800129c <HAL_GPIO_Init+0x2c0>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001168:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <HAL_GPIO_Init+0x2c4>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d00d      	beq.n	80011b0 <HAL_GPIO_Init+0x1d4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <HAL_GPIO_Init+0x2c8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d007      	beq.n	80011ac <HAL_GPIO_Init+0x1d0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <HAL_GPIO_Init+0x2cc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d101      	bne.n	80011a8 <HAL_GPIO_Init+0x1cc>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e004      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011a8:	2307      	movs	r3, #7
 80011aa:	e002      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011b0:	2300      	movs	r3, #0
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	f002 0203 	and.w	r2, r2, #3
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	4093      	lsls	r3, r2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c2:	4937      	ldr	r1, [pc, #220]	; (80012a0 <HAL_GPIO_Init+0x2c4>)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f4:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001248:	4a18      	ldr	r2, [pc, #96]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	f47f aeaf 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48000800 	.word	0x48000800
 80012ac:	40010400 	.word	0x40010400

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e081      	b.n	80013f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d106      	bne.n	800130c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff faee 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d107      	bne.n	800135a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e006      	b.n	8001368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d104      	bne.n	800137a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001378:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800139c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69d9      	ldr	r1, [r3, #28]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2220      	movs	r2, #32
 80013e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af02      	add	r7, sp, #8
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	461a      	mov	r2, r3
 800140c:	460b      	mov	r3, r1
 800140e:	817b      	strh	r3, [r7, #10]
 8001410:	4613      	mov	r3, r2
 8001412:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b20      	cmp	r3, #32
 800141e:	f040 80da 	bne.w	80015d6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_I2C_Master_Transmit+0x30>
 800142c:	2302      	movs	r3, #2
 800142e:	e0d3      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x1d8>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001438:	f7ff fc40 	bl	8000cbc <HAL_GetTick>
 800143c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2319      	movs	r3, #25
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 fefb 	bl	8002246 <I2C_WaitOnFlagUntilTimeout>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0be      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2221      	movs	r2, #33	; 0x21
 800145e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2210      	movs	r2, #16
 8001466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	893a      	ldrh	r2, [r7, #8]
 800147a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001486:	b29b      	uxth	r3, r3
 8001488:	2bff      	cmp	r3, #255	; 0xff
 800148a:	d90e      	bls.n	80014aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	22ff      	movs	r2, #255	; 0xff
 8001490:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001496:	b2da      	uxtb	r2, r3
 8001498:	8979      	ldrh	r1, [r7, #10]
 800149a:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f001 f8f2 	bl	800268c <I2C_TransferConfig>
 80014a8:	e06c      	b.n	8001584 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	8979      	ldrh	r1, [r7, #10]
 80014bc:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <HAL_I2C_Master_Transmit+0x1e0>)
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f001 f8e1 	bl	800268c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80014ca:	e05b      	b.n	8001584 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	6a39      	ldr	r1, [r7, #32]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fef8 	bl	80022c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e07b      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001508:	3b01      	subs	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d034      	beq.n	8001584 <HAL_I2C_Master_Transmit+0x184>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	2b00      	cmp	r3, #0
 8001520:	d130      	bne.n	8001584 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	2200      	movs	r2, #0
 800152a:	2180      	movs	r1, #128	; 0x80
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 fe8a 	bl	8002246 <I2C_WaitOnFlagUntilTimeout>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e04d      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001540:	b29b      	uxth	r3, r3
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d90e      	bls.n	8001564 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	22ff      	movs	r2, #255	; 0xff
 800154a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	b2da      	uxtb	r2, r3
 8001552:	8979      	ldrh	r1, [r7, #10]
 8001554:	2300      	movs	r3, #0
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f001 f895 	bl	800268c <I2C_TransferConfig>
 8001562:	e00f      	b.n	8001584 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001572:	b2da      	uxtb	r2, r3
 8001574:	8979      	ldrh	r1, [r7, #10]
 8001576:	2300      	movs	r3, #0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f001 f884 	bl	800268c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001588:	b29b      	uxth	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d19e      	bne.n	80014cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	6a39      	ldr	r1, [r7, #32]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 fed7 	bl	8002346 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e01a      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2220      	movs	r2, #32
 80015a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_I2C_Master_Transmit+0x1e4>)
 80015b6:	400b      	ands	r3, r1
 80015b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80015d6:	2302      	movs	r3, #2
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	80002000 	.word	0x80002000
 80015e4:	fe00e800 	.word	0xfe00e800

080015e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	817b      	strh	r3, [r7, #10]
 80015f8:	4613      	mov	r3, r2
 80015fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b20      	cmp	r3, #32
 8001606:	f040 80db 	bne.w	80017c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_I2C_Master_Receive+0x30>
 8001614:	2302      	movs	r3, #2
 8001616:	e0d4      	b.n	80017c2 <HAL_I2C_Master_Receive+0x1da>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001620:	f7ff fb4c 	bl	8000cbc <HAL_GetTick>
 8001624:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2319      	movs	r3, #25
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fe07 	bl	8002246 <I2C_WaitOnFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0bf      	b.n	80017c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2222      	movs	r2, #34	; 0x22
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2210      	movs	r2, #16
 800164e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	893a      	ldrh	r2, [r7, #8]
 8001662:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166e:	b29b      	uxth	r3, r3
 8001670:	2bff      	cmp	r3, #255	; 0xff
 8001672:	d90e      	bls.n	8001692 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	22ff      	movs	r2, #255	; 0xff
 8001678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167e:	b2da      	uxtb	r2, r3
 8001680:	8979      	ldrh	r1, [r7, #10]
 8001682:	4b52      	ldr	r3, [pc, #328]	; (80017cc <HAL_I2C_Master_Receive+0x1e4>)
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 fffe 	bl	800268c <I2C_TransferConfig>
 8001690:	e06d      	b.n	800176e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	8979      	ldrh	r1, [r7, #10]
 80016a4:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_I2C_Master_Receive+0x1e4>)
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 ffed 	bl	800268c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80016b2:	e05c      	b.n	800176e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	6a39      	ldr	r1, [r7, #32]
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 fe81 	bl	80023c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e07c      	b.n	80017c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d034      	beq.n	800176e <HAL_I2C_Master_Receive+0x186>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	d130      	bne.n	800176e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	2200      	movs	r2, #0
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 fd95 	bl	8002246 <I2C_WaitOnFlagUntilTimeout>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e04d      	b.n	80017c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2bff      	cmp	r3, #255	; 0xff
 800172e:	d90e      	bls.n	800174e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	b2da      	uxtb	r2, r3
 800173c:	8979      	ldrh	r1, [r7, #10]
 800173e:	2300      	movs	r3, #0
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 ffa0 	bl	800268c <I2C_TransferConfig>
 800174c:	e00f      	b.n	800176e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	b2da      	uxtb	r2, r3
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	2300      	movs	r3, #0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 ff8f 	bl	800268c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d19d      	bne.n	80016b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	6a39      	ldr	r1, [r7, #32]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fde2 	bl	8002346 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e01a      	b.n	80017c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2220      	movs	r2, #32
 8001792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6859      	ldr	r1, [r3, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_I2C_Master_Receive+0x1e8>)
 80017a0:	400b      	ands	r3, r1
 80017a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	80002400 	.word	0x80002400
 80017d0:	fe00e800 	.word	0xfe00e800

080017d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	68f9      	ldr	r1, [r7, #12]
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
  }
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d010      	beq.n	800184e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	09db      	lsrs	r3, r3, #7
 8001830:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00a      	beq.n	800184e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	0a9b      	lsrs	r3, r3, #10
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d010      	beq.n	800187c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	09db      	lsrs	r3, r3, #7
 800185e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00a      	beq.n	800187c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f043 0208 	orr.w	r2, r3, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	0a5b      	lsrs	r3, r3, #9
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	09db      	lsrs	r3, r3, #7
 800188c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00a      	beq.n	80018aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f043 0202 	orr.w	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 030b 	and.w	r3, r3, #11
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80018ba:	68f9      	ldr	r1, [r7, #12]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fb89 	bl	8001fd4 <I2C_ITError>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70fb      	strb	r3, [r7, #3]
 80018fe:	4613      	mov	r3, r2
 8001900:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <I2C_Slave_ISR_IT+0x24>
 800196a:	2302      	movs	r3, #2
 800196c:	e0ec      	b.n	8001b48 <I2C_Slave_ISR_IT+0x1fe>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	095b      	lsrs	r3, r3, #5
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800198e:	6939      	ldr	r1, [r7, #16]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f9bf 	bl	8001d14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d04d      	beq.n	8001a3e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d047      	beq.n	8001a3e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d128      	bne.n	8001a0a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b28      	cmp	r3, #40	; 0x28
 80019c2:	d108      	bne.n	80019d6 <I2C_Slave_ISR_IT+0x8c>
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ca:	d104      	bne.n	80019d6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 faaa 	bl	8001f28 <I2C_ITListenCplt>
 80019d4:	e032      	b.n	8001a3c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b29      	cmp	r3, #41	; 0x29
 80019e0:	d10e      	bne.n	8001a00 <I2C_Slave_ISR_IT+0xb6>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019e8:	d00a      	beq.n	8001a00 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2210      	movs	r2, #16
 80019f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fbe5 	bl	80021c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f92d 	bl	8001c58 <I2C_ITSlaveSeqCplt>
 80019fe:	e01d      	b.n	8001a3c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2210      	movs	r2, #16
 8001a06:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a08:	e096      	b.n	8001b38 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2210      	movs	r2, #16
 8001a10:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f043 0204 	orr.w	r2, r3, #4
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <I2C_Slave_ISR_IT+0xe4>
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2a:	f040 8085 	bne.w	8001b38 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4619      	mov	r1, r3
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 facd 	bl	8001fd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a3a:	e07d      	b.n	8001b38 <I2C_Slave_ISR_IT+0x1ee>
 8001a3c:	e07c      	b.n	8001b38 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d030      	beq.n	8001aac <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d02a      	beq.n	8001aac <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d018      	beq.n	8001a92 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d14f      	bne.n	8001b3c <I2C_Slave_ISR_IT+0x1f2>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aa2:	d04b      	beq.n	8001b3c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f8d7 	bl	8001c58 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001aaa:	e047      	b.n	8001b3c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00a      	beq.n	8001ace <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	08db      	lsrs	r3, r3, #3
 8001abc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ac4:	6939      	ldr	r1, [r7, #16]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f842 	bl	8001b50 <I2C_ITAddrCplt>
 8001acc:	e037      	b.n	8001b3e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d031      	beq.n	8001b3e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d02b      	beq.n	8001b3e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d018      	beq.n	8001b22 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b20:	e00d      	b.n	8001b3e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d002      	beq.n	8001b30 <I2C_Slave_ISR_IT+0x1e6>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d106      	bne.n	8001b3e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f891 	bl	8001c58 <I2C_ITSlaveSeqCplt>
 8001b36:	e002      	b.n	8001b3e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001b38:	bf00      	nop
 8001b3a:	e000      	b.n	8001b3e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001b3c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001b66:	2b28      	cmp	r3, #40	; 0x28
 8001b68:	d16a      	bne.n	8001c40 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001b88:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b96:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001ba4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d138      	bne.n	8001c20 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	09db      	lsrs	r3, r3, #7
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	89bb      	ldrh	r3, [r7, #12]
 8001bb6:	4053      	eors	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f003 0306 	and.w	r3, r3, #6
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11c      	bne.n	8001bfc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d13b      	bne.n	8001c50 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2208      	movs	r2, #8
 8001be4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001bee:	89ba      	ldrh	r2, [r7, #12]
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fe7c 	bl	80018f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001bfa:	e029      	b.n	8001c50 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001bfc:	893b      	ldrh	r3, [r7, #8]
 8001bfe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fd73 	bl	80026f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c12:	89ba      	ldrh	r2, [r7, #12]
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fe6a 	bl	80018f2 <HAL_I2C_AddrCallback>
}
 8001c1e:	e017      	b.n	8001c50 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fd63 	bl	80026f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c32:	89ba      	ldrh	r2, [r7, #12]
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fe5a 	bl	80018f2 <HAL_I2C_AddrCallback>
}
 8001c3e:	e007      	b.n	8001c50 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	0b9b      	lsrs	r3, r3, #14
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e00d      	b.n	8001caa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	0bdb      	lsrs	r3, r3, #15
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b29      	cmp	r3, #41	; 0x29
 8001cb4:	d112      	bne.n	8001cdc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2228      	movs	r2, #40	; 0x28
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2221      	movs	r2, #33	; 0x21
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fd12 	bl	80026f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fdf8 	bl	80018ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001cda:	e017      	b.n	8001d0c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ce6:	d111      	bne.n	8001d0c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2228      	movs	r2, #40	; 0x28
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2222      	movs	r2, #34	; 0x22
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fcf9 	bl	80026f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fde9 	bl	80018de <HAL_I2C_SlaveRxCpltCallback>
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d30:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2220      	movs	r2, #32
 8001d38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b21      	cmp	r3, #33	; 0x21
 8001d3e:	d002      	beq.n	8001d46 <I2C_ITSlaveCplt+0x32>
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b29      	cmp	r3, #41	; 0x29
 8001d44:	d108      	bne.n	8001d58 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001d46:	f248 0101 	movw	r1, #32769	; 0x8001
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fcd0 	bl	80026f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2221      	movs	r2, #33	; 0x21
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
 8001d56:	e00d      	b.n	8001d74 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b22      	cmp	r3, #34	; 0x22
 8001d5c:	d002      	beq.n	8001d64 <I2C_ITSlaveCplt+0x50>
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	2b2a      	cmp	r3, #42	; 0x2a
 8001d62:	d107      	bne.n	8001d74 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001d64:	f248 0102 	movw	r1, #32770	; 0x8002
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fcc1 	bl	80026f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2222      	movs	r2, #34	; 0x22
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d82:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6859      	ldr	r1, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <I2C_ITSlaveCplt+0x20c>)
 8001d90:	400b      	ands	r3, r1
 8001d92:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fa14 	bl	80021c2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	0b9b      	lsrs	r3, r3, #14
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d013      	beq.n	8001dce <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001db4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d020      	beq.n	8001e00 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dcc:	e018      	b.n	8001e00 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	0bdb      	lsrs	r3, r3, #15
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00c      	beq.n	8001e4e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f043 0204 	orr.w	r2, r3, #4
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8a7 	bl	8001fd4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b28      	cmp	r3, #40	; 0x28
 8001e90:	d141      	bne.n	8001f16 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e92:	6979      	ldr	r1, [r7, #20]
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f847 	bl	8001f28 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e9a:	e03c      	b.n	8001f16 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ea4:	d014      	beq.n	8001ed0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fed6 	bl	8001c58 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <I2C_ITSlaveCplt+0x210>)
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fd20 	bl	800190e <HAL_I2C_ListenCpltCallback>
}
 8001ece:	e022      	b.n	8001f16 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b22      	cmp	r3, #34	; 0x22
 8001eda:	d10e      	bne.n	8001efa <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fcf3 	bl	80018de <HAL_I2C_SlaveRxCpltCallback>
}
 8001ef8:	e00d      	b.n	8001f16 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fcda 	bl	80018ca <HAL_I2C_SlaveTxCpltCallback>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	fe00e800 	.word	0xfe00e800
 8001f24:	ffff0000 	.word	0xffff0000

08001f28 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a26      	ldr	r2, [pc, #152]	; (8001fd0 <I2C_ITListenCplt+0xa8>)
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d022      	beq.n	8001fa6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d012      	beq.n	8001fa6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f043 0204 	orr.w	r2, r3, #4
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fa6:	f248 0103 	movw	r1, #32771	; 0x8003
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fba0 	bl	80026f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fca4 	bl	800190e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	ffff0000 	.word	0xffff0000

08001fd4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a5d      	ldr	r2, [pc, #372]	; (8002168 <I2C_ITError+0x194>)
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	2b28      	cmp	r3, #40	; 0x28
 800200a:	d005      	beq.n	8002018 <I2C_ITError+0x44>
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b29      	cmp	r3, #41	; 0x29
 8002010:	d002      	beq.n	8002018 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b2a      	cmp	r3, #42	; 0x2a
 8002016:	d10b      	bne.n	8002030 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002018:	2103      	movs	r1, #3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fb68 	bl	80026f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2228      	movs	r2, #40	; 0x28
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a50      	ldr	r2, [pc, #320]	; (800216c <I2C_ITError+0x198>)
 800202c:	635a      	str	r2, [r3, #52]	; 0x34
 800202e:	e011      	b.n	8002054 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002030:	f248 0103 	movw	r1, #32771	; 0x8003
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fb5b 	bl	80026f0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b60      	cmp	r3, #96	; 0x60
 8002044:	d003      	beq.n	800204e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	2b00      	cmp	r3, #0
 8002060:	d039      	beq.n	80020d6 <I2C_ITError+0x102>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b11      	cmp	r3, #17
 8002066:	d002      	beq.n	800206e <I2C_ITError+0x9a>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b21      	cmp	r3, #33	; 0x21
 800206c:	d133      	bne.n	80020d6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800207c:	d107      	bne.n	800208e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800208c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe ff94 	bl	8000fc0 <HAL_DMA_GetState>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d017      	beq.n	80020ce <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	4a33      	ldr	r2, [pc, #204]	; (8002170 <I2C_ITError+0x19c>)
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe ff43 	bl	8000f3e <HAL_DMA_Abort_IT>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d04d      	beq.n	800215a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020c8:	4610      	mov	r0, r2
 80020ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020cc:	e045      	b.n	800215a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f850 	bl	8002174 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020d4:	e041      	b.n	800215a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d039      	beq.n	8002152 <I2C_ITError+0x17e>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d002      	beq.n	80020ea <I2C_ITError+0x116>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b22      	cmp	r3, #34	; 0x22
 80020e8:	d133      	bne.n	8002152 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020f8:	d107      	bne.n	800210a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002108:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe ff56 	bl	8000fc0 <HAL_DMA_GetState>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d017      	beq.n	800214a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <I2C_ITError+0x19c>)
 8002120:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe ff05 	bl	8000f3e <HAL_DMA_Abort_IT>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d011      	beq.n	800215e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002144:	4610      	mov	r0, r2
 8002146:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002148:	e009      	b.n	800215e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f812 	bl	8002174 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002150:	e005      	b.n	800215e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f80e 	bl	8002174 <I2C_TreatErrorCallback>
  }
}
 8002158:	e002      	b.n	8002160 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800215a:	bf00      	nop
 800215c:	e000      	b.n	8002160 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800215e:	bf00      	nop
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	ffff0000 	.word	0xffff0000
 800216c:	0800194b 	.word	0x0800194b
 8002170:	0800220b 	.word	0x0800220b

08002174 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b60      	cmp	r3, #96	; 0x60
 8002186:	d10e      	bne.n	80021a6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fbc9 	bl	8001936 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021a4:	e009      	b.n	80021ba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fbb4 	bl	8001922 <HAL_I2C_ErrorCallback>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d103      	bne.n	80021e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d007      	beq.n	80021fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	619a      	str	r2, [r3, #24]
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	2200      	movs	r2, #0
 8002226:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff ff9b 	bl	8002174 <I2C_TreatErrorCallback>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002256:	e022      	b.n	800229e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d01e      	beq.n	800229e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002260:	f7fe fd2c 	bl	8000cbc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d302      	bcc.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d113      	bne.n	800229e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f043 0220 	orr.w	r2, r3, #32
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00f      	b.n	80022be <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4013      	ands	r3, r2
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d0cd      	beq.n	8002258 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022d2:	e02c      	b.n	800232e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f8eb 	bl	80024b4 <I2C_IsErrorOccurred>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e02a      	b.n	800233e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d01e      	beq.n	800232e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f0:	f7fe fce4 	bl	8000cbc <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d113      	bne.n	800232e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e007      	b.n	800233e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d1cb      	bne.n	80022d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002352:	e028      	b.n	80023a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8ab 	bl	80024b4 <I2C_IsErrorOccurred>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e026      	b.n	80023b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002368:	f7fe fca8 	bl	8000cbc <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	d302      	bcc.n	800237e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d113      	bne.n	80023a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e007      	b.n	80023b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d1cf      	bne.n	8002354 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023cc:	e064      	b.n	8002498 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f86e 	bl	80024b4 <I2C_IsErrorOccurred>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e062      	b.n	80024a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d138      	bne.n	8002462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d105      	bne.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e04e      	b.n	80024a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b10      	cmp	r3, #16
 8002416:	d107      	bne.n	8002428 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2210      	movs	r2, #16
 800241e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2204      	movs	r2, #4
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
 8002426:	e002      	b.n	800242e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2220      	movs	r2, #32
 8002434:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002442:	400b      	ands	r3, r1
 8002444:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e022      	b.n	80024a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002462:	f7fe fc2b 	bl	8000cbc <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10f      	bne.n	8002498 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f043 0220 	orr.w	r2, r3, #32
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e007      	b.n	80024a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d193      	bne.n	80023ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	fe00e800 	.word	0xfe00e800

080024b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d075      	beq.n	80025cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2210      	movs	r2, #16
 80024e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024e8:	e056      	b.n	8002598 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d052      	beq.n	8002598 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024f2:	f7fe fbe3 	bl	8000cbc <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d302      	bcc.n	8002508 <I2C_IsErrorOccurred+0x54>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d147      	bne.n	8002598 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800251a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252a:	d12e      	bne.n	800258a <I2C_IsErrorOccurred+0xd6>
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002532:	d02a      	beq.n	800258a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b20      	cmp	r3, #32
 8002538:	d027      	beq.n	800258a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002548:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800254a:	f7fe fbb7 	bl	8000cbc <HAL_GetTick>
 800254e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002550:	e01b      	b.n	800258a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002552:	f7fe fbb3 	bl	8000cbc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b19      	cmp	r3, #25
 800255e:	d914      	bls.n	800258a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b20      	cmp	r3, #32
 8002596:	d1dc      	bne.n	8002552 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d003      	beq.n	80025ae <I2C_IsErrorOccurred+0xfa>
 80025a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d09d      	beq.n	80024ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2220      	movs	r2, #32
 80025bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00b      	beq.n	8002618 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002632:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800263a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01c      	beq.n	800267c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fdbd 	bl	80021c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <I2C_IsErrorOccurred+0x1d4>)
 8002654:	400b      	ands	r3, r1
 8002656:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800267c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002680:	4618      	mov	r0, r3
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	fe00e800 	.word	0xfe00e800

0800268c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	4613      	mov	r3, r2
 800269c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026a4:	7a7b      	ldrb	r3, [r7, #9]
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	0d5b      	lsrs	r3, r3, #21
 80026c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <I2C_TransferConfig+0x60>)
 80026cc:	430b      	orrs	r3, r1
 80026ce:	43db      	mvns	r3, r3
 80026d0:	ea02 0103 	and.w	r1, r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	03ff63ff 	.word	0x03ff63ff

080026f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00f      	beq.n	800272a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002710:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800271e:	2b28      	cmp	r3, #40	; 0x28
 8002720:	d003      	beq.n	800272a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002728:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00f      	beq.n	8002754 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800273a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002748:	2b28      	cmp	r3, #40	; 0x28
 800274a:	d003      	beq.n	8002754 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002752:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002754:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002758:	2b00      	cmp	r3, #0
 800275a:	da03      	bge.n	8002764 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002762:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	2b10      	cmp	r3, #16
 8002768:	d103      	bne.n	8002772 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002770:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	2b20      	cmp	r3, #32
 8002776:	d103      	bne.n	8002780 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f043 0320 	orr.w	r3, r3, #32
 800277e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d103      	bne.n	800278e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43da      	mvns	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	400a      	ands	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d138      	bne.n	8002834 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e032      	b.n	8002836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b20      	cmp	r3, #32
 8002856:	d139      	bne.n	80028cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002862:	2302      	movs	r3, #2
 8002864:	e033      	b.n	80028ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2224      	movs	r2, #36	; 0x24
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002894:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40007000 	.word	0x40007000

080028fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <HAL_PWREx_GetVoltageRange+0x18>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40007000 	.word	0x40007000

08002918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002926:	d130      	bne.n	800298a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002928:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002934:	d038      	beq.n	80029a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800293e:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002944:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2232      	movs	r2, #50	; 0x32
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	0c9b      	lsrs	r3, r3, #18
 8002958:	3301      	adds	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800295c:	e002      	b.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3b01      	subs	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002970:	d102      	bne.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f2      	bne.n	800295e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d110      	bne.n	80029a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e00f      	b.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002996:	d007      	beq.n	80029a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029a0:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40007000 	.word	0x40007000
 80029bc:	20000000 	.word	0x20000000
 80029c0:	431bde83 	.word	0x431bde83

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f000 bc02 	b.w	80031dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d8:	4b96      	ldr	r3, [pc, #600]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e2:	4b94      	ldr	r3, [pc, #592]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80e4 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4c>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	f040 808b 	bne.w	8002b1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	f040 8087 	bne.w	8002b1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a10:	4b88      	ldr	r3, [pc, #544]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_OscConfig+0x64>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e3d9      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d004      	beq.n	8002a42 <HAL_RCC_OscConfig+0x7e>
 8002a38:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a40:	e005      	b.n	8002a4e <HAL_RCC_OscConfig+0x8a>
 8002a42:	4b7c      	ldr	r3, [pc, #496]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d223      	bcs.n	8002a9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fd8c 	bl	8003574 <RCC_SetFlashLatencyFromMSIRange>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e3ba      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a66:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a72      	ldr	r2, [pc, #456]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	f043 0308 	orr.w	r3, r3, #8
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	496d      	ldr	r1, [pc, #436]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a84:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	4968      	ldr	r1, [pc, #416]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
 8002a98:	e025      	b.n	8002ae6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9a:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a65      	ldr	r2, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4960      	ldr	r1, [pc, #384]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab8:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	495b      	ldr	r1, [pc, #364]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fd4c 	bl	8003574 <RCC_SetFlashLatencyFromMSIRange>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e37a      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ae6:	f000 fc81 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	4950      	ldr	r1, [pc, #320]	; (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002af8:	5ccb      	ldrb	r3, [r1, r3]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a4e      	ldr	r2, [pc, #312]	; (8002c3c <HAL_RCC_OscConfig+0x278>)
 8002b04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_RCC_OscConfig+0x27c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f886 	bl	8000c1c <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
 8002b12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d052      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	e35e      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d032      	beq.n	8002b8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a42      	ldr	r2, [pc, #264]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b32:	f7fe f8c3 	bl	8000cbc <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b3a:	f7fe f8bf 	bl	8000cbc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e347      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b58:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a35      	ldr	r2, [pc, #212]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	f043 0308 	orr.w	r3, r3, #8
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4930      	ldr	r1, [pc, #192]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b76:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	492b      	ldr	r1, [pc, #172]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
 8002b8a:	e01a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b8c:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b98:	f7fe f890 	bl	8000cbc <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba0:	f7fe f88c 	bl	8000cbc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e314      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1dc>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d073      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_OscConfig+0x21c>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d063      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d15f      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e2f1      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d106      	bne.n	8002c10 <HAL_RCC_OscConfig+0x24c>
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e025      	b.n	8002c5c <HAL_RCC_OscConfig+0x298>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d114      	bne.n	8002c44 <HAL_RCC_OscConfig+0x280>
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a02      	ldr	r2, [pc, #8]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e013      	b.n	8002c5c <HAL_RCC_OscConfig+0x298>
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08009168 	.word	0x08009168
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004
 8002c44:	4ba0      	ldr	r3, [pc, #640]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a9f      	ldr	r2, [pc, #636]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b9d      	ldr	r3, [pc, #628]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a9c      	ldr	r2, [pc, #624]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe f82a 	bl	8000cbc <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe f826 	bl	8000cbc <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e2ae      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7e:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x2a8>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f816 	bl	8000cbc <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe f812 	bl	8000cbc <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e29a      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca6:	4b88      	ldr	r3, [pc, #544]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2d0>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d060      	beq.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x310>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d119      	bne.n	8002d02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d116      	bne.n	8002d02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd4:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_OscConfig+0x328>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e277      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	4973      	ldr	r1, [pc, #460]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d00:	e040      	b.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d023      	beq.n	8002d52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0a:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fd ffd1 	bl	8000cbc <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7fd ffcd 	bl	8000cbc <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e255      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	4b65      	ldr	r3, [pc, #404]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b62      	ldr	r3, [pc, #392]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	495f      	ldr	r1, [pc, #380]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	e018      	b.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a5c      	ldr	r2, [pc, #368]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fd ffad 	bl	8000cbc <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fd ffa9 	bl	8000cbc <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e231      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d03c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d98:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	4a4a      	ldr	r2, [pc, #296]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fd ff88 	bl	8000cbc <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fd ff84 	bl	8000cbc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e20c      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ef      	beq.n	8002db0 <HAL_RCC_OscConfig+0x3ec>
 8002dd0:	e01b      	b.n	8002e0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd8:	4a3b      	ldr	r2, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de2:	f7fd ff6b 	bl	8000cbc <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dea:	f7fd ff67 	bl	8000cbc <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1ef      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ef      	bne.n	8002dea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80a6 	beq.w	8002f64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10d      	bne.n	8002e44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e32:	6593      	str	r3, [r2, #88]	; 0x58
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <HAL_RCC_OscConfig+0x508>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d118      	bne.n	8002e82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e50:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCC_OscConfig+0x508>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x508>)
 8002e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5c:	f7fd ff2e 	bl	8000cbc <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e64:	f7fd ff2a 	bl	8000cbc <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1b2      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <HAL_RCC_OscConfig+0x508>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d108      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4d8>
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9a:	e029      	b.n	8002ef0 <HAL_RCC_OscConfig+0x52c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d115      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x50c>
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a03      	ldr	r2, [pc, #12]	; (8002ec8 <HAL_RCC_OscConfig+0x504>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec4:	e014      	b.n	8002ef0 <HAL_RCC_OscConfig+0x52c>
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	4b9a      	ldr	r3, [pc, #616]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	4a99      	ldr	r2, [pc, #612]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee0:	4b96      	ldr	r3, [pc, #600]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a95      	ldr	r2, [pc, #596]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d016      	beq.n	8002f26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7fd fee0 	bl	8000cbc <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f7fd fedc 	bl	8000cbc <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e162      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ed      	beq.n	8002f00 <HAL_RCC_OscConfig+0x53c>
 8002f24:	e015      	b.n	8002f52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fd fec9 	bl	8000cbc <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fd fec5 	bl	8000cbc <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e14b      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f44:	4b7d      	ldr	r3, [pc, #500]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ed      	bne.n	8002f2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f52:	7ffb      	ldrb	r3, [r7, #31]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f58:	4b78      	ldr	r3, [pc, #480]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4a77      	ldr	r2, [pc, #476]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d03c      	beq.n	8002fea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01c      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f78:	4b70      	ldr	r3, [pc, #448]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f7e:	4a6f      	ldr	r2, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fd fe98 	bl	8000cbc <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f90:	f7fd fe94 	bl	8000cbc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e11c      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fa2:	4b66      	ldr	r3, [pc, #408]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0ef      	beq.n	8002f90 <HAL_RCC_OscConfig+0x5cc>
 8002fb0:	e01b      	b.n	8002fea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fb2:	4b62      	ldr	r3, [pc, #392]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb8:	4a60      	ldr	r2, [pc, #384]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fd fe7b 	bl	8000cbc <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fca:	f7fd fe77 	bl	8000cbc <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0ff      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fdc:	4b57      	ldr	r3, [pc, #348]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8002fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ef      	bne.n	8002fca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80f3 	beq.w	80031da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f040 80c9 	bne.w	8003190 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ffe:	4b4f      	ldr	r3, [pc, #316]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0203 	and.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	429a      	cmp	r2, r3
 8003010:	d12c      	bne.n	800306c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	3b01      	subs	r3, #1
 800301e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d123      	bne.n	800306c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d11b      	bne.n	800306c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d113      	bne.n	800306c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	3b01      	subs	r3, #1
 8003052:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d109      	bne.n	800306c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	3b01      	subs	r3, #1
 8003066:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d06b      	beq.n	8003144 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d062      	beq.n	8003138 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003072:	4b32      	ldr	r3, [pc, #200]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0ac      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003082:	4b2e      	ldr	r3, [pc, #184]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2d      	ldr	r2, [pc, #180]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8003088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800308e:	f7fd fe15 	bl	8000cbc <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7fd fe11 	bl	8000cbc <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e099      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a8:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_RCC_OscConfig+0x778>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b4:	4b21      	ldr	r3, [pc, #132]	; (800313c <HAL_RCC_OscConfig+0x778>)
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	4b21      	ldr	r3, [pc, #132]	; (8003140 <HAL_RCC_OscConfig+0x77c>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030c4:	3a01      	subs	r2, #1
 80030c6:	0112      	lsls	r2, r2, #4
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030ce:	0212      	lsls	r2, r2, #8
 80030d0:	4311      	orrs	r1, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030d6:	0852      	lsrs	r2, r2, #1
 80030d8:	3a01      	subs	r2, #1
 80030da:	0552      	lsls	r2, r2, #21
 80030dc:	4311      	orrs	r1, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030e2:	0852      	lsrs	r2, r2, #1
 80030e4:	3a01      	subs	r2, #1
 80030e6:	0652      	lsls	r2, r2, #25
 80030e8:	4311      	orrs	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ee:	06d2      	lsls	r2, r2, #27
 80030f0:	430a      	orrs	r2, r1
 80030f2:	4912      	ldr	r1, [pc, #72]	; (800313c <HAL_RCC_OscConfig+0x778>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_RCC_OscConfig+0x778>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0f      	ldr	r2, [pc, #60]	; (800313c <HAL_RCC_OscConfig+0x778>)
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003102:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_RCC_OscConfig+0x778>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4a0c      	ldr	r2, [pc, #48]	; (800313c <HAL_RCC_OscConfig+0x778>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003110:	f7fd fdd4 	bl	8000cbc <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fd fdd0 	bl	8000cbc <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e058      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <HAL_RCC_OscConfig+0x778>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003136:	e050      	b.n	80031da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e04f      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
 800313c:	40021000 	.word	0x40021000
 8003140:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d144      	bne.n	80031da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800315c:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003168:	f7fd fda8 	bl	8000cbc <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fd fda4 	bl	8000cbc <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e02c      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x7ac>
 800318e:	e024      	b.n	80031da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d01f      	beq.n	80031d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 800319c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fd fd8b 	bl	8000cbc <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fd fd87 	bl	8000cbc <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e00f      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	4905      	ldr	r1, [pc, #20]	; (80031e4 <HAL_RCC_OscConfig+0x820>)
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCC_OscConfig+0x824>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
 80031d4:	e001      	b.n	80031da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	feeefffc 	.word	0xfeeefffc

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0e7      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4970      	ldr	r1, [pc, #448]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b6e      	ldr	r3, [pc, #440]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0cf      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003248:	429a      	cmp	r2, r3
 800324a:	d908      	bls.n	800325e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4960      	ldr	r1, [pc, #384]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d04c      	beq.n	8003304 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d121      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0a6      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328a:	4b54      	ldr	r3, [pc, #336]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d115      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e09a      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032a2:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e08e      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032b2:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e086      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4943      	ldr	r1, [pc, #268]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fd fcf2 	bl	8000cbc <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032dc:	f7fd fcee 	bl	8000cbc <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e06e      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 020c 	and.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	429a      	cmp	r2, r3
 8003302:	d1eb      	bne.n	80032dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331c:	429a      	cmp	r2, r3
 800331e:	d208      	bcs.n	8003332 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003320:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	492b      	ldr	r1, [pc, #172]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d210      	bcs.n	8003362 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 0207 	bic.w	r2, r3, #7
 8003348:	4923      	ldr	r1, [pc, #140]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d001      	beq.n	8003362 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e036      	b.n	80033d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4918      	ldr	r1, [pc, #96]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338c:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4910      	ldr	r1, [pc, #64]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 800339c:	4313      	orrs	r3, r2
 800339e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a0:	f000 f824 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <HAL_RCC_ClockConfig+0x1f0>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	490b      	ldr	r1, [pc, #44]	; (80033e0 <HAL_RCC_ClockConfig+0x1f4>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
 80033bc:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1f8>)
 80033be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1fc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fc29 	bl	8000c1c <HAL_InitTick>
 80033ca:	4603      	mov	r3, r0
 80033cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ce:	7afb      	ldrb	r3, [r7, #11]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08009168 	.word	0x08009168
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fa:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x34>
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d121      	bne.n	800345e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d11e      	bne.n	800345e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003420:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800342e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	e005      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800343c:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003448:	4a2b      	ldr	r2, [pc, #172]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10d      	bne.n	8003474 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d102      	bne.n	800346a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003464:	4b25      	ldr	r3, [pc, #148]	; (80034fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e004      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d101      	bne.n	8003474 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003470:	4b23      	ldr	r3, [pc, #140]	; (8003500 <HAL_RCC_GetSysClockFreq+0x114>)
 8003472:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d134      	bne.n	80034e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d003      	beq.n	8003492 <HAL_RCC_GetSysClockFreq+0xa6>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d003      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0xac>
 8003490:	e005      	b.n	800349e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003494:	617b      	str	r3, [r7, #20]
      break;
 8003496:	e005      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_GetSysClockFreq+0x114>)
 800349a:	617b      	str	r3, [r7, #20]
      break;
 800349c:	e002      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	617b      	str	r3, [r7, #20]
      break;
 80034a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034a4:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	3301      	adds	r3, #1
 80034b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	fb03 f202 	mul.w	r2, r3, r2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	0e5b      	lsrs	r3, r3, #25
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	3301      	adds	r3, #1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034e4:	69bb      	ldr	r3, [r7, #24]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08009180 	.word	0x08009180
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	007a1200 	.word	0x007a1200

08003504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCC_GetHCLKFreq+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003520:	f7ff fff0 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	08009178 	.word	0x08009178

08003548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800354c:	f7ff ffda 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0adb      	lsrs	r3, r3, #11
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4904      	ldr	r1, [pc, #16]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	08009178 	.word	0x08009178

08003574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003580:	4b2a      	ldr	r3, [pc, #168]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff f9b6 	bl	80028fc <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
 8003592:	e014      	b.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	4a24      	ldr	r2, [pc, #144]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359e:	6593      	str	r3, [r2, #88]	; 0x58
 80035a0:	4b22      	ldr	r3, [pc, #136]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035ac:	f7ff f9a6 	bl	80028fc <HAL_PWREx_GetVoltageRange>
 80035b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b1e      	ldr	r3, [pc, #120]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c4:	d10b      	bne.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d919      	bls.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2ba0      	cmp	r3, #160	; 0xa0
 80035d0:	d902      	bls.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d2:	2302      	movs	r3, #2
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e013      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e010      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b80      	cmp	r3, #128	; 0x80
 80035e2:	d902      	bls.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035e4:	2303      	movs	r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e00a      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d102      	bne.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f0:	2302      	movs	r3, #2
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	e004      	b.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b70      	cmp	r3, #112	; 0x70
 80035fa:	d101      	bne.n	8003600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035fc:	2301      	movs	r3, #1
 80035fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 0207 	bic.w	r2, r3, #7
 8003608:	4909      	ldr	r1, [pc, #36]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003610:	4b07      	ldr	r3, [pc, #28]	; (8003630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	40022000 	.word	0x40022000

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800363c:	2300      	movs	r3, #0
 800363e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003640:	2300      	movs	r3, #0
 8003642:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364c:	2b00      	cmp	r3, #0
 800364e:	d031      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003658:	d01a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800365a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800365e:	d814      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003668:	d10f      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800366a:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a5c      	ldr	r2, [pc, #368]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f9de 	bl	8003a40 <RCCEx_PLLSAI1_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	74fb      	strb	r3, [r7, #19]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003698:	4b51      	ldr	r3, [pc, #324]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	494e      	ldr	r1, [pc, #312]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 809e 	beq.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036c6:	4b46      	ldr	r3, [pc, #280]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a3f      	ldr	r2, [pc, #252]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
 80036e8:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f8:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a39      	ldr	r2, [pc, #228]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003704:	f7fd fada 	bl	8000cbc <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800370a:	e009      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7fd fad6 	bl	8000cbc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d902      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	74fb      	strb	r3, [r7, #19]
        break;
 800371e:	e005      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003720:	4b30      	ldr	r3, [pc, #192]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d15a      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003732:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01e      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	429a      	cmp	r2, r3
 800374c:	d019      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800375a:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800377a:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d016      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fd fa96 	bl	8000cbc <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003792:	e00b      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fd fa92 	bl	8000cbc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d902      	bls.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	74fb      	strb	r3, [r7, #19]
            break;
 80037aa:	e006      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ec      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	4904      	ldr	r1, [pc, #16]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037d6:	e009      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	74bb      	strb	r3, [r7, #18]
 80037dc:	e006      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ec:	7c7b      	ldrb	r3, [r7, #17]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d105      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f2:	4b8a      	ldr	r3, [pc, #552]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	4a89      	ldr	r2, [pc, #548]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800380a:	4b84      	ldr	r3, [pc, #528]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f023 0203 	bic.w	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4980      	ldr	r1, [pc, #512]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800382c:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f023 020c 	bic.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	4978      	ldr	r1, [pc, #480]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384e:	4b73      	ldr	r3, [pc, #460]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	496f      	ldr	r1, [pc, #444]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003870:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	4967      	ldr	r1, [pc, #412]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003892:	4b62      	ldr	r3, [pc, #392]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	495e      	ldr	r1, [pc, #376]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b4:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	4956      	ldr	r1, [pc, #344]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d6:	4b51      	ldr	r3, [pc, #324]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	494d      	ldr	r1, [pc, #308]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d028      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f8:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4945      	ldr	r1, [pc, #276]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003916:	d106      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
 8003924:	e011      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800392e:	d10c      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f882 	bl	8003a40 <RCCEx_PLLSAI1_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003956:	4b31      	ldr	r3, [pc, #196]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	492d      	ldr	r1, [pc, #180]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003974:	d106      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800397c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003980:	60d3      	str	r3, [r2, #12]
 8003982:	e011      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f853 	bl	8003a40 <RCCEx_PLLSAI1_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01c      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c2:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d2:	d10c      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	2102      	movs	r1, #2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f830 	bl	8003a40 <RCCEx_PLLSAI1_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a08:	4904      	ldr	r1, [pc, #16]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a10:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	6013      	str	r3, [r2, #0]
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000

08003a40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a4e:	4b74      	ldr	r3, [pc, #464]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a5a:	4b71      	ldr	r3, [pc, #452]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0203 	and.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10d      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a72:	4b6b      	ldr	r3, [pc, #428]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
       ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d047      	beq.n	8003b16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
 8003a8a:	e044      	b.n	8003b16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d018      	beq.n	8003ac6 <RCCEx_PLLSAI1_Config+0x86>
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d825      	bhi.n	8003ae4 <RCCEx_PLLSAI1_Config+0xa4>
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d002      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0x62>
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d009      	beq.n	8003ab4 <RCCEx_PLLSAI1_Config+0x74>
 8003aa0:	e020      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11d      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab2:	e01a      	b.n	8003aea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ab4:	4b5a      	ldr	r3, [pc, #360]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d116      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac4:	e013      	b.n	8003aee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ac6:	4b56      	ldr	r3, [pc, #344]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10f      	bne.n	8003af2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ad2:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ae2:	e006      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e004      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aea:	bf00      	nop
 8003aec:	e002      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003afa:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	4943      	ldr	r1, [pc, #268]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d17c      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b1c:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a3f      	ldr	r2, [pc, #252]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b28:	f7fd f8c8 	bl	8000cbc <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b2e:	e009      	b.n	8003b44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b30:	f7fd f8c4 	bl	8000cbc <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d902      	bls.n	8003b44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	73fb      	strb	r3, [r7, #15]
        break;
 8003b42:	e005      	b.n	8003b50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ef      	bne.n	8003b30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d15f      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d110      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b5c:	4b30      	ldr	r3, [pc, #192]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6892      	ldr	r2, [r2, #8]
 8003b6c:	0211      	lsls	r1, r2, #8
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	06d2      	lsls	r2, r2, #27
 8003b74:	430a      	orrs	r2, r1
 8003b76:	492a      	ldr	r1, [pc, #168]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	610b      	str	r3, [r1, #16]
 8003b7c:	e027      	b.n	8003bce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d112      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b84:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	0211      	lsls	r1, r2, #8
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6912      	ldr	r2, [r2, #16]
 8003b9a:	0852      	lsrs	r2, r2, #1
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	0552      	lsls	r2, r2, #21
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	491f      	ldr	r1, [pc, #124]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	610b      	str	r3, [r1, #16]
 8003ba8:	e011      	b.n	8003bce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6892      	ldr	r2, [r2, #8]
 8003bba:	0211      	lsls	r1, r2, #8
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6952      	ldr	r2, [r2, #20]
 8003bc0:	0852      	lsrs	r2, r2, #1
 8003bc2:	3a01      	subs	r2, #1
 8003bc4:	0652      	lsls	r2, r2, #25
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	4915      	ldr	r1, [pc, #84]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bd8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bda:	f7fd f86f 	bl	8000cbc <HAL_GetTick>
 8003bde:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003be0:	e009      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003be2:	f7fd f86b 	bl	8000cbc <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d902      	bls.n	8003bf6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	73fb      	strb	r3, [r7, #15]
          break;
 8003bf4:	e005      	b.n	8003c02 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ef      	beq.n	8003be2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	4903      	ldr	r1, [pc, #12]	; (8003c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000

08003c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e040      	b.n	8003cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fc feb6 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8c0 	bl	8003de8 <UART_SetConfig>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e022      	b.n	8003cb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fae0 	bl	8004240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fb67 	bl	8004384 <UART_CheckIdleState>
 8003cb6:	4603      	mov	r3, r0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	f040 8082 	bne.w	8003dde <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_UART_Transmit+0x26>
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e07a      	b.n	8003de0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UART_Transmit+0x38>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e073      	b.n	8003de0 <HAL_UART_Transmit+0x120>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2221      	movs	r2, #33	; 0x21
 8003d0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d0e:	f7fc ffd5 	bl	8000cbc <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2c:	d108      	bne.n	8003d40 <HAL_UART_Transmit+0x80>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e003      	b.n	8003d48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d50:	e02d      	b.n	8003dae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fb5a 	bl	8004416 <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e039      	b.n	8003de0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d7e:	b292      	uxth	r2, r2
 8003d80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	3302      	adds	r3, #2
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	e008      	b.n	8003d9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	b292      	uxth	r2, r2
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1cb      	bne.n	8003d52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fb26 	bl	8004416 <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e005      	b.n	8003de0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b08a      	sub	sp, #40	; 0x28
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4bb4      	ldr	r3, [pc, #720]	; (80040e8 <UART_SetConfig+0x300>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4aa9      	ldr	r2, [pc, #676]	; (80040ec <UART_SetConfig+0x304>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	4313      	orrs	r3, r2
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4aa0      	ldr	r2, [pc, #640]	; (80040f0 <UART_SetConfig+0x308>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d126      	bne.n	8003ec0 <UART_SetConfig+0xd8>
 8003e72:	4ba0      	ldr	r3, [pc, #640]	; (80040f4 <UART_SetConfig+0x30c>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d81b      	bhi.n	8003eb8 <UART_SetConfig+0xd0>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0xa0>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003ea9 	.word	0x08003ea9
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003eb1 	.word	0x08003eb1
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e080      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea6:	e07c      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e078      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb6:	e074      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	e070      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a8c      	ldr	r2, [pc, #560]	; (80040f8 <UART_SetConfig+0x310>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d138      	bne.n	8003f3c <UART_SetConfig+0x154>
 8003eca:	4b8a      	ldr	r3, [pc, #552]	; (80040f4 <UART_SetConfig+0x30c>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d82d      	bhi.n	8003f34 <UART_SetConfig+0x14c>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <UART_SetConfig+0xf8>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08003f35 	.word	0x08003f35
 8003ee8:	08003f35 	.word	0x08003f35
 8003eec:	08003f35 	.word	0x08003f35
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08003f35 	.word	0x08003f35
 8003ef8:	08003f35 	.word	0x08003f35
 8003efc:	08003f35 	.word	0x08003f35
 8003f00:	08003f1d 	.word	0x08003f1d
 8003f04:	08003f35 	.word	0x08003f35
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	08003f35 	.word	0x08003f35
 8003f10:	08003f2d 	.word	0x08003f2d
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e042      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e03e      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f24:	2304      	movs	r3, #4
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e03a      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e036      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f34:	2310      	movs	r3, #16
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e032      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a6a      	ldr	r2, [pc, #424]	; (80040ec <UART_SetConfig+0x304>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d12a      	bne.n	8003f9c <UART_SetConfig+0x1b4>
 8003f46:	4b6b      	ldr	r3, [pc, #428]	; (80040f4 <UART_SetConfig+0x30c>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f54:	d01a      	beq.n	8003f8c <UART_SetConfig+0x1a4>
 8003f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f5a:	d81b      	bhi.n	8003f94 <UART_SetConfig+0x1ac>
 8003f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f60:	d00c      	beq.n	8003f7c <UART_SetConfig+0x194>
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f66:	d815      	bhi.n	8003f94 <UART_SetConfig+0x1ac>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <UART_SetConfig+0x18c>
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f70:	d008      	beq.n	8003f84 <UART_SetConfig+0x19c>
 8003f72:	e00f      	b.n	8003f94 <UART_SetConfig+0x1ac>
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e012      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e00e      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f84:	2304      	movs	r3, #4
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8a:	e00a      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f92:	e006      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9a:	e002      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a51      	ldr	r2, [pc, #324]	; (80040ec <UART_SetConfig+0x304>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d17a      	bne.n	80040a2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d824      	bhi.n	8003ffe <UART_SetConfig+0x216>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0x1d4>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fff 	.word	0x08003fff
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003fff 	.word	0x08003fff
 8003fcc:	08003fef 	.word	0x08003fef
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	08003fff 	.word	0x08003fff
 8003fd8:	08003fff 	.word	0x08003fff
 8003fdc:	08003ff7 	.word	0x08003ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7ff fa9c 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8003fe4:	61f8      	str	r0, [r7, #28]
        break;
 8003fe6:	e010      	b.n	800400a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe8:	4b44      	ldr	r3, [pc, #272]	; (80040fc <UART_SetConfig+0x314>)
 8003fea:	61fb      	str	r3, [r7, #28]
        break;
 8003fec:	e00d      	b.n	800400a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fee:	f7ff f9fd 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003ff2:	61f8      	str	r0, [r7, #28]
        break;
 8003ff4:	e009      	b.n	800400a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffa:	61fb      	str	r3, [r7, #28]
        break;
 8003ffc:	e005      	b.n	800400a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8107 	beq.w	8004220 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4413      	add	r3, r2
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	429a      	cmp	r2, r3
 8004020:	d305      	bcc.n	800402e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	429a      	cmp	r2, r3
 800402c:	d903      	bls.n	8004036 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004034:	e0f4      	b.n	8004220 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2200      	movs	r2, #0
 800403a:	461c      	mov	r4, r3
 800403c:	4615      	mov	r5, r2
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	022b      	lsls	r3, r5, #8
 8004048:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800404c:	0222      	lsls	r2, r4, #8
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	6849      	ldr	r1, [r1, #4]
 8004052:	0849      	lsrs	r1, r1, #1
 8004054:	2000      	movs	r0, #0
 8004056:	4688      	mov	r8, r1
 8004058:	4681      	mov	r9, r0
 800405a:	eb12 0a08 	adds.w	sl, r2, r8
 800405e:	eb43 0b09 	adc.w	fp, r3, r9
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004070:	4650      	mov	r0, sl
 8004072:	4659      	mov	r1, fp
 8004074:	f7fc f904 	bl	8000280 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004086:	d308      	bcc.n	800409a <UART_SetConfig+0x2b2>
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408e:	d204      	bcs.n	800409a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e0c2      	b.n	8004220 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040a0:	e0be      	b.n	8004220 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040aa:	d16a      	bne.n	8004182 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80040ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d834      	bhi.n	800411e <UART_SetConfig+0x336>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <UART_SetConfig+0x2d4>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004109 	.word	0x08004109
 80040c8:	0800411f 	.word	0x0800411f
 80040cc:	0800410f 	.word	0x0800410f
 80040d0:	0800411f 	.word	0x0800411f
 80040d4:	0800411f 	.word	0x0800411f
 80040d8:	0800411f 	.word	0x0800411f
 80040dc:	08004117 	.word	0x08004117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e0:	f7ff fa1c 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 80040e4:	61f8      	str	r0, [r7, #28]
        break;
 80040e6:	e020      	b.n	800412a <UART_SetConfig+0x342>
 80040e8:	efff69f3 	.word	0xefff69f3
 80040ec:	40008000 	.word	0x40008000
 80040f0:	40013800 	.word	0x40013800
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40004400 	.word	0x40004400
 80040fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004100:	f7ff fa22 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 8004104:	61f8      	str	r0, [r7, #28]
        break;
 8004106:	e010      	b.n	800412a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004108:	4b4c      	ldr	r3, [pc, #304]	; (800423c <UART_SetConfig+0x454>)
 800410a:	61fb      	str	r3, [r7, #28]
        break;
 800410c:	e00d      	b.n	800412a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410e:	f7ff f96d 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8004112:	61f8      	str	r0, [r7, #28]
        break;
 8004114:	e009      	b.n	800412a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411a:	61fb      	str	r3, [r7, #28]
        break;
 800411c:	e005      	b.n	800412a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d077      	beq.n	8004220 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005a      	lsls	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	441a      	add	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d916      	bls.n	800417a <UART_SetConfig+0x392>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004152:	d212      	bcs.n	800417a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f023 030f 	bic.w	r3, r3, #15
 800415c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	b29b      	uxth	r3, r3
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	b29a      	uxth	r2, r3
 800416a:	8afb      	ldrh	r3, [r7, #22]
 800416c:	4313      	orrs	r3, r2
 800416e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	8afa      	ldrh	r2, [r7, #22]
 8004176:	60da      	str	r2, [r3, #12]
 8004178:	e052      	b.n	8004220 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004180:	e04e      	b.n	8004220 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004186:	2b08      	cmp	r3, #8
 8004188:	d827      	bhi.n	80041da <UART_SetConfig+0x3f2>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0x3a8>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041bd 	.word	0x080041bd
 8004198:	080041c5 	.word	0x080041c5
 800419c:	080041db 	.word	0x080041db
 80041a0:	080041cb 	.word	0x080041cb
 80041a4:	080041db 	.word	0x080041db
 80041a8:	080041db 	.word	0x080041db
 80041ac:	080041db 	.word	0x080041db
 80041b0:	080041d3 	.word	0x080041d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b4:	f7ff f9b2 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 80041b8:	61f8      	str	r0, [r7, #28]
        break;
 80041ba:	e014      	b.n	80041e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041bc:	f7ff f9c4 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 80041c0:	61f8      	str	r0, [r7, #28]
        break;
 80041c2:	e010      	b.n	80041e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c4:	4b1d      	ldr	r3, [pc, #116]	; (800423c <UART_SetConfig+0x454>)
 80041c6:	61fb      	str	r3, [r7, #28]
        break;
 80041c8:	e00d      	b.n	80041e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ca:	f7ff f90f 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80041ce:	61f8      	str	r0, [r7, #28]
        break;
 80041d0:	e009      	b.n	80041e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d6:	61fb      	str	r3, [r7, #28]
        break;
 80041d8:	e005      	b.n	80041e6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041e4:	bf00      	nop
    }

    if (pclk != 0U)
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d019      	beq.n	8004220 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	085a      	lsrs	r2, r3, #1
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	441a      	add	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b0f      	cmp	r3, #15
 8004204:	d909      	bls.n	800421a <UART_SetConfig+0x432>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d205      	bcs.n	800421a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	e002      	b.n	8004220 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800422c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004230:	4618      	mov	r0, r3
 8004232:	3728      	adds	r7, #40	; 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800423a:	bf00      	nop
 800423c:	00f42400 	.word	0x00f42400

08004240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01a      	beq.n	8004356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433e:	d10a      	bne.n	8004356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af02      	add	r7, sp, #8
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004394:	f7fc fc92 	bl	8000cbc <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d10e      	bne.n	80043c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f82d 	bl	8004416 <UART_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e023      	b.n	800440e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d10e      	bne.n	80043f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f817 	bl	8004416 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e00d      	b.n	800440e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b09c      	sub	sp, #112	; 0x70
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004426:	e0a5      	b.n	8004574 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	f000 80a1 	beq.w	8004574 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004432:	f7fc fc43 	bl	8000cbc <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800443e:	429a      	cmp	r2, r3
 8004440:	d302      	bcc.n	8004448 <UART_WaitOnFlagUntilTimeout+0x32>
 8004442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004444:	2b00      	cmp	r3, #0
 8004446:	d13e      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800445c:	667b      	str	r3, [r7, #100]	; 0x64
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004468:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800446c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	663b      	str	r3, [r7, #96]	; 0x60
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800449a:	64ba      	str	r2, [r7, #72]	; 0x48
 800449c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e067      	b.n	8004596 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d04f      	beq.n	8004574 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e2:	d147      	bne.n	8004574 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
 800450e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e6      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	613b      	str	r3, [r7, #16]
   return(result);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	66bb      	str	r3, [r7, #104]	; 0x68
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3308      	adds	r3, #8
 800453e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004540:	623a      	str	r2, [r7, #32]
 8004542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	69f9      	ldr	r1, [r7, #28]
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	61bb      	str	r3, [r7, #24]
   return(result);
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e010      	b.n	8004596 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4013      	ands	r3, r2
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	429a      	cmp	r2, r3
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	429a      	cmp	r2, r3
 8004590:	f43f af4a 	beq.w	8004428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3770      	adds	r7, #112	; 0x70
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <TOF_XSHUT_Write>:
#define TOF_PDEV &(TOF_Devices[unit])

extern VL53L0X_Dev_t TOF_Devices[TOF_UNIT_COUNT];

void TOF_XSHUT_Write(TOF_Units_t unit, GPIO_PinState state)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	460a      	mov	r2, r1
 80045aa:	71fb      	strb	r3, [r7, #7]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(TOF_DEV.XSHUT_Port, TOF_DEV.XSHUT_Pin, state);
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	4a0d      	ldr	r2, [pc, #52]	; (80045e8 <TOF_XSHUT_Write+0x48>)
 80045b4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <TOF_XSHUT_Write+0x48>)
 80045c8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	79ba      	ldrb	r2, [r7, #6]
 80045da:	4619      	mov	r1, r3
 80045dc:	f7fc fe68 	bl	80012b0 <HAL_GPIO_WritePin>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	2000000c 	.word	0x2000000c

080045ec <TOF_Init_I2C_Adresses>:

TOF_Status_t TOF_Init_I2C_Adresses(uint8_t *detectedDevices)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	uint16_t Id;
	uint8_t FinalAddress;

	TOF_Units_t unit;

	uint8_t deviceCount = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	757b      	strb	r3, [r7, #21]

	// Shutdown every units
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	75bb      	strb	r3, [r7, #22]
 80045fc:	e007      	b.n	800460e <TOF_Init_I2C_Adresses+0x22>
		TOF_XSHUT_Write(unit, TOF_XSHUT_RESET);
 80045fe:	7dbb      	ldrb	r3, [r7, #22]
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff ffcc 	bl	80045a0 <TOF_XSHUT_Write>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 8004608:	7dbb      	ldrb	r3, [r7, #22]
 800460a:	3301      	adds	r3, #1
 800460c:	75bb      	strb	r3, [r7, #22]
 800460e:	7dbb      	ldrb	r3, [r7, #22]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f4      	beq.n	80045fe <TOF_Init_I2C_Adresses+0x12>

	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 8004614:	2300      	movs	r3, #0
 8004616:	75bb      	strb	r3, [r7, #22]
 8004618:	e076      	b.n	8004708 <TOF_Init_I2C_Adresses+0x11c>
	{
		Dev = &(TOF_Devices[unit]);
 800461a:	7dbb      	ldrb	r3, [r7, #22]
 800461c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004620:	fb02 f303 	mul.w	r3, r2, r3
 8004624:	4a45      	ldr	r2, [pc, #276]	; (800473c <TOF_Init_I2C_Adresses+0x150>)
 8004626:	4413      	add	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
		Dev->I2cDevAddr = TOF_BASE_I2C_ADDRESS;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2252      	movs	r2, #82	; 0x52
 800462e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		Dev->Present = TOF_ABSENT;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2200      	movs	r2, #0
 8004636:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		FinalAddress = TOF_BASE_I2C_ADDRESS + (unit+1)*2;
 800463a:	7dbb      	ldrb	r3, [r7, #22]
 800463c:	332a      	adds	r3, #42	; 0x2a
 800463e:	b2db      	uxtb	r3, r3
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]

		// Wake up one unit
		TOF_XSHUT_Write(unit, TOF_XSHUT_SET);
 8004644:	7dbb      	ldrb	r3, [r7, #22]
 8004646:	2101      	movs	r1, #1
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ffa9 	bl	80045a0 <TOF_XSHUT_Write>

		/* Set I2C standard mode (400 KHz) before doing the first register access */
		if (status == VL53L0X_ERROR_NONE) status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800464e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <TOF_Init_I2C_Adresses+0x78>
 8004656:	2200      	movs	r2, #0
 8004658:	2188      	movs	r1, #136	; 0x88
 800465a:	6938      	ldr	r0, [r7, #16]
 800465c:	f000 fa66 	bl	8004b2c <VL53L0X_WrByte>
 8004660:	4603      	mov	r3, r0
 8004662:	75fb      	strb	r3, [r7, #23]

		do{

			// Try to get the model ID of the device
			TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	461a      	mov	r2, r3
 800466a:	21c0      	movs	r1, #192	; 0xc0
 800466c:	6938      	ldr	r0, [r7, #16]
 800466e:	f000 fb09 	bl	8004c84 <VL53L0X_RdWord>
 8004672:	4603      	mov	r3, r0
 8004674:	75fb      	strb	r3, [r7, #23]
 8004676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d131      	bne.n	80046e2 <TOF_Init_I2C_Adresses+0xf6>

			// The device is a VL53L0X
			if(Id==TOF_BASE_ID)
 800467e:	89bb      	ldrh	r3, [r7, #12]
 8004680:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8004684:	4293      	cmp	r3, r2
 8004686:	d133      	bne.n	80046f0 <TOF_Init_I2C_Adresses+0x104>
			{
				// Set the new address
				TOF_ASSERT_BREAK(VL53L0X_SetDeviceAddress(Dev,FinalAddress))
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	4619      	mov	r1, r3
 800468c:	6938      	ldr	r0, [r7, #16]
 800468e:	f000 fb8f 	bl	8004db0 <VL53L0X_SetDeviceAddress>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]
 8004696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d123      	bne.n	80046e6 <TOF_Init_I2C_Adresses+0xfa>

				// change the address of the device to the new one
				Dev->I2cDevAddr = FinalAddress;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

				// try to get the model id to verify the address change
				TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 80046a6:	f107 030c 	add.w	r3, r7, #12
 80046aa:	461a      	mov	r2, r3
 80046ac:	21c0      	movs	r1, #192	; 0xc0
 80046ae:	6938      	ldr	r0, [r7, #16]
 80046b0:	f000 fae8 	bl	8004c84 <VL53L0X_RdWord>
 80046b4:	4603      	mov	r3, r0
 80046b6:	75fb      	strb	r3, [r7, #23]
 80046b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d114      	bne.n	80046ea <TOF_Init_I2C_Adresses+0xfe>

				// try to initialize the device data model
				status = VL53L0X_DataInit(Dev);
 80046c0:	6938      	ldr	r0, [r7, #16]
 80046c2:	f000 fb8d 	bl	8004de0 <VL53L0X_DataInit>
 80046c6:	4603      	mov	r3, r0
 80046c8:	75fb      	strb	r3, [r7, #23]
				if(status) 	break;
 80046ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <TOF_Init_I2C_Adresses+0x102>

				Dev->Present = TOF_PRESENT;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
				deviceCount++;
 80046da:	7d7b      	ldrb	r3, [r7, #21]
 80046dc:	3301      	adds	r3, #1
 80046de:	757b      	strb	r3, [r7, #21]
 80046e0:	e006      	b.n	80046f0 <TOF_Init_I2C_Adresses+0x104>
			TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 80046e2:	bf00      	nop
 80046e4:	e004      	b.n	80046f0 <TOF_Init_I2C_Adresses+0x104>
				TOF_ASSERT_BREAK(VL53L0X_SetDeviceAddress(Dev,FinalAddress))
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <TOF_Init_I2C_Adresses+0x104>
				TOF_ASSERT_BREAK(VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id))
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <TOF_Init_I2C_Adresses+0x104>
				if(status) 	break;
 80046ee:	bf00      	nop
			}

		} while(0); // while loop to be able to exit with a simple break command. (no repetitions, just a coding trick)

		// if there is a fail, shutdown the sensor to be sure
		if(status) TOF_XSHUT_Write(unit, TOF_XSHUT_RESET);
 80046f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <TOF_Init_I2C_Adresses+0x116>
 80046f8:	7dbb      	ldrb	r3, [r7, #22]
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff4f 	bl	80045a0 <TOF_XSHUT_Write>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 8004702:	7dbb      	ldrb	r3, [r7, #22]
 8004704:	3301      	adds	r3, #1
 8004706:	75bb      	strb	r3, [r7, #22]
 8004708:	7dbb      	ldrb	r3, [r7, #22]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d085      	beq.n	800461a <TOF_Init_I2C_Adresses+0x2e>

	}

	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 800470e:	2300      	movs	r3, #0
 8004710:	75bb      	strb	r3, [r7, #22]
 8004712:	e007      	b.n	8004724 <TOF_Init_I2C_Adresses+0x138>
		TOF_XSHUT_Write(unit, TOF_XSHUT_SET);
 8004714:	7dbb      	ldrb	r3, [r7, #22]
 8004716:	2101      	movs	r1, #1
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff ff41 	bl	80045a0 <TOF_XSHUT_Write>
	for(unit=0;unit<TOF_UNIT_COUNT;unit++)
 800471e:	7dbb      	ldrb	r3, [r7, #22]
 8004720:	3301      	adds	r3, #1
 8004722:	75bb      	strb	r3, [r7, #22]
 8004724:	7dbb      	ldrb	r3, [r7, #22]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f4      	beq.n	8004714 <TOF_Init_I2C_Adresses+0x128>

	*detectedDevices = deviceCount;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	7d7a      	ldrb	r2, [r7, #21]
 800472e:	701a      	strb	r2, [r3, #0]

	return status;
 8004730:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	2000000c 	.word	0x2000000c

08004740 <TOF_Init_Item>:

TOF_Status_t TOF_Init_Item(TOF_Units_t unit)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Dev_t *Dev = &(TOF_Devices[unit]);
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	4a6b      	ldr	r2, [pc, #428]	; (8004904 <TOF_Init_Item+0x1c4>)
 8004756:	4413      	add	r3, r2
 8004758:	627b      	str	r3, [r7, #36]	; 0x24

    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800475a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800475e:	623b      	str	r3, [r7, #32]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8004760:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004764:	61fb      	str	r3, [r7, #28]
	uint32_t timingBudget = 33000;
 8004766:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800476a:	61bb      	str	r3, [r7, #24]
	uint8_t preRangeVcselPeriod = 14;
 800476c:	230e      	movs	r3, #14
 800476e:	75fb      	strb	r3, [r7, #23]
	uint8_t finalRangeVcselPeriod = 10;
 8004770:	230a      	movs	r3, #10
 8004772:	75bb      	strb	r3, [r7, #22]

	TOF_ASSERT(VL53L0X_DataInit(Dev))
 8004774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004776:	f000 fb33 	bl	8004de0 <VL53L0X_DataInit>
 800477a:	4603      	mov	r3, r0
 800477c:	757b      	strb	r3, [r7, #21]
 800477e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <TOF_Init_Item+0x4c>
 8004786:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800478a:	e0b7      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal))
 800478c:	f107 0213 	add.w	r2, r7, #19
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	4619      	mov	r1, r3
 8004796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004798:	f001 f8d6 	bl	8005948 <VL53L0X_PerformRefCalibration>
 800479c:	4603      	mov	r3, r0
 800479e:	757b      	strb	r3, [r7, #21]
 80047a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <TOF_Init_Item+0x6e>
 80047a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047ac:	e0a6      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads))
 80047ae:	f107 020b 	add.w	r2, r7, #11
 80047b2:	f107 030c 	add.w	r3, r7, #12
 80047b6:	4619      	mov	r1, r3
 80047b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ba:	f001 fc2f 	bl	800601c <VL53L0X_PerformRefSpadManagement>
 80047be:	4603      	mov	r3, r0
 80047c0:	757b      	strb	r3, [r7, #21]
 80047c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <TOF_Init_Item+0x90>
 80047ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047ce:	e095      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING))
 80047d0:	2100      	movs	r1, #0
 80047d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047d4:	f000 fcf8 	bl	80051c8 <VL53L0X_SetDeviceMode>
 80047d8:	4603      	mov	r3, r0
 80047da:	757b      	strb	r3, [r7, #21]
 80047dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <TOF_Init_Item+0xaa>
 80047e4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047e8:	e088      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1))
 80047ea:	2201      	movs	r2, #1
 80047ec:	2100      	movs	r1, #0
 80047ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047f0:	f000 fea4 	bl	800553c <VL53L0X_SetLimitCheckEnable>
 80047f4:	4603      	mov	r3, r0
 80047f6:	757b      	strb	r3, [r7, #21]
 80047f8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <TOF_Init_Item+0xc6>
 8004800:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004804:	e07a      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1))
 8004806:	2201      	movs	r2, #1
 8004808:	2101      	movs	r1, #1
 800480a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800480c:	f000 fe96 	bl	800553c <VL53L0X_SetLimitCheckEnable>
 8004810:	4603      	mov	r3, r0
 8004812:	757b      	strb	r3, [r7, #21]
 8004814:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <TOF_Init_Item+0xe2>
 800481c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004820:	e06c      	b.n	80048fc <TOF_Init_Item+0x1bc>
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 8004822:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004826:	623b      	str	r3, [r7, #32]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 8004828:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800482c:	61fb      	str	r3, [r7, #28]
		timingBudget = 200000;
 800482e:	4b36      	ldr	r3, [pc, #216]	; (8004908 <TOF_Init_Item+0x1c8>)
 8004830:	61bb      	str	r3, [r7, #24]
		preRangeVcselPeriod = 14;
 8004832:	230e      	movs	r3, #14
 8004834:	75fb      	strb	r3, [r7, #23]
		finalRangeVcselPeriod = 10;
 8004836:	230a      	movs	r3, #10
 8004838:	75bb      	strb	r3, [r7, #22]
		break;
 800483a:	bf00      	nop
		finalRangeVcselPeriod = 10;
		break;
	default:
		return TOF_STATUS_CONFIG_UNKNOWN_RANGING_MODE;
	}
	status = TOF_STATUS_SUCESS;
 800483c:	2300      	movs	r3, #0
 800483e:	757b      	strb	r3, [r7, #21]

	TOF_ASSERT(VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit))
 8004840:	6a3a      	ldr	r2, [r7, #32]
 8004842:	2101      	movs	r1, #1
 8004844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004846:	f000 ff29 	bl	800569c <VL53L0X_SetLimitCheckValue>
 800484a:	4603      	mov	r3, r0
 800484c:	757b      	strb	r3, [r7, #21]
 800484e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <TOF_Init_Item+0x11c>
 8004856:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800485a:	e04f      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit))
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	2100      	movs	r1, #0
 8004860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004862:	f000 ff1b 	bl	800569c <VL53L0X_SetLimitCheckValue>
 8004866:	4603      	mov	r3, r0
 8004868:	757b      	strb	r3, [r7, #21]
 800486a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <TOF_Init_Item+0x138>
 8004872:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004876:	e041      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,  timingBudget))
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800487c:	f000 fce3 	bl	8005246 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004880:	4603      	mov	r3, r0
 8004882:	757b      	strb	r3, [r7, #21]
 8004884:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <TOF_Init_Item+0x152>
 800488c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004890:	e034      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod))
 8004892:	7dfb      	ldrb	r3, [r7, #23]
 8004894:	461a      	mov	r2, r3
 8004896:	2100      	movs	r1, #0
 8004898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800489a:	f000 fcfa 	bl	8005292 <VL53L0X_SetVcselPulsePeriod>
 800489e:	4603      	mov	r3, r0
 80048a0:	757b      	strb	r3, [r7, #21]
 80048a2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <TOF_Init_Item+0x170>
 80048aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048ae:	e025      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod))
 80048b0:	7dbb      	ldrb	r3, [r7, #22]
 80048b2:	461a      	mov	r2, r3
 80048b4:	2101      	movs	r1, #1
 80048b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048b8:	f000 fceb 	bl	8005292 <VL53L0X_SetVcselPulsePeriod>
 80048bc:	4603      	mov	r3, r0
 80048be:	757b      	strb	r3, [r7, #21]
 80048c0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <TOF_Init_Item+0x18e>
 80048c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048cc:	e016      	b.n	80048fc <TOF_Init_Item+0x1bc>
	TOF_ASSERT(VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal))
 80048ce:	f107 0213 	add.w	r2, r7, #19
 80048d2:	f107 0314 	add.w	r3, r7, #20
 80048d6:	4619      	mov	r1, r3
 80048d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048da:	f001 f835 	bl	8005948 <VL53L0X_PerformRefCalibration>
 80048de:	4603      	mov	r3, r0
 80048e0:	757b      	strb	r3, [r7, #21]
 80048e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <TOF_Init_Item+0x1b0>
 80048ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80048ee:	e005      	b.n	80048fc <TOF_Init_Item+0x1bc>

	Dev->LeakyFirst = 1;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	2201      	movs	r2, #1
 80048f4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	return status;
 80048f8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3728      	adds	r7, #40	; 0x28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	2000000c 	.word	0x2000000c
 8004908:	00030d40 	.word	0x00030d40

0800490c <TOF_Init>:
 * Initialize all the TOFs sensors
 * @param None
 * @return TOF_Status_t error_code
 */
TOF_Status_t TOF_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
	TOF_Status_t status;
	TOF_Units_t unit;
	uint8_t devicesDetected;

	TOF_ASSERT(TOF_Init_I2C_Adresses(&devicesDetected))
 8004912:	1d7b      	adds	r3, r7, #5
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fe69 	bl	80045ec <TOF_Init_I2C_Adresses>
 800491a:	4603      	mov	r3, r0
 800491c:	71fb      	strb	r3, [r7, #7]
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <TOF_Init+0x20>
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	e01d      	b.n	8004968 <TOF_Init+0x5c>

	if(devicesDetected<TOF_UNIT_COUNT) return TOF_STATUS_SENSORS_MISSING;
 800492c:	797b      	ldrb	r3, [r7, #5]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <TOF_Init+0x2c>
 8004932:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8004936:	e017      	b.n	8004968 <TOF_Init+0x5c>

	for (unit = 0; unit<TOF_UNIT_COUNT; unit++)
 8004938:	2300      	movs	r3, #0
 800493a:	71bb      	strb	r3, [r7, #6]
 800493c:	e00f      	b.n	800495e <TOF_Init+0x52>
	{
		TOF_ASSERT(TOF_Init_Item(unit))
 800493e:	79bb      	ldrb	r3, [r7, #6]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fefd 	bl	8004740 <TOF_Init_Item>
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
 800494a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <TOF_Init+0x4c>
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	e007      	b.n	8004968 <TOF_Init+0x5c>
	for (unit = 0; unit<TOF_UNIT_COUNT; unit++)
 8004958:	79bb      	ldrb	r3, [r7, #6]
 800495a:	3301      	adds	r3, #1
 800495c:	71bb      	strb	r3, [r7, #6]
 800495e:	79bb      	ldrb	r3, [r7, #6]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0ec      	beq.n	800493e <TOF_Init+0x32>
	}

	return status;
 8004964:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <TOF_Get_Range>:
 *										3 : minimal value
 *										5 : communication interrupted
 * @return TOF_Status_t error_code
 */
TOF_Status_t TOF_Get_Range(TOF_Units_t unit, uint16_t max_retries, uint16_t *range_milimeters, uint8_t *range_status)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08c      	sub	sp, #48	; 0x30
 8004974:	af00      	add	r7, sp, #0
 8004976:	60ba      	str	r2, [r7, #8]
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	460b      	mov	r3, r1
 8004980:	81bb      	strh	r3, [r7, #12]
	TOF_Status_t status;
	VL53L0X_RangingMeasurementData_t data;
	uint16_t retries;

	for(retries=0; retries<max_retries; retries++)
 8004982:	2300      	movs	r3, #0
 8004984:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004986:	e01d      	b.n	80049c4 <TOF_Get_Range+0x54>
	{
		TOF_ASSERT(VL53L0X_PerformSingleRangingMeasurement(TOF_PDEV, &data))
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <TOF_Get_Range+0x7c>)
 8004994:	4413      	add	r3, r2
 8004996:	f107 0210 	add.w	r2, r7, #16
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fa75 	bl	8005e8c <VL53L0X_PerformSingleRangingMeasurement>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80049a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <TOF_Get_Range+0x46>
 80049b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049b4:	e015      	b.n	80049e2 <TOF_Get_Range+0x72>
		if(data.RangeStatus==1) break;
 80049b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d007      	beq.n	80049ce <TOF_Get_Range+0x5e>
	for(retries=0; retries<max_retries; retries++)
 80049be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049c0:	3301      	adds	r3, #1
 80049c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80049c4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80049c6:	89bb      	ldrh	r3, [r7, #12]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3dd      	bcc.n	8004988 <TOF_Get_Range+0x18>
 80049cc:	e000      	b.n	80049d0 <TOF_Get_Range+0x60>
		if(data.RangeStatus==1) break;
 80049ce:	bf00      	nop
	}

	*range_milimeters = data.RangeMilliMeter;
 80049d0:	8b3a      	ldrh	r2, [r7, #24]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	801a      	strh	r2, [r3, #0]
	*range_status = data.RangeStatus;
 80049d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	701a      	strb	r2, [r3, #0]

	return status;
 80049de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3730      	adds	r7, #48	; 0x30
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	2000000c 	.word	0x2000000c

080049f0 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	330a      	adds	r3, #10
 8004a00:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8004a0e:	b299      	uxth	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	f7fc fcf0 	bl	8001400 <HAL_I2C_Master_Transmit>
 8004a20:	4603      	mov	r3, r0
 8004a22:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8004a24:	693b      	ldr	r3, [r7, #16]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b088      	sub	sp, #32
 8004a32:	af02      	add	r7, sp, #8
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	330a      	adds	r3, #10
 8004a3e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	b299      	uxth	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	f7fc fdc2 	bl	80015e8 <HAL_I2C_Master_Receive>
 8004a64:	4603      	mov	r3, r0
 8004a66:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8004a68:	693b      	ldr	r3, [r7, #16]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	460b      	mov	r3, r1
 8004a82:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b3f      	cmp	r3, #63	; 0x3f
 8004a8c:	d902      	bls.n	8004a94 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8004a8e:	f06f 0303 	mvn.w	r3, #3
 8004a92:	e016      	b.n	8004ac2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8004a94:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <VL53L0X_WriteMulti+0x58>)
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	480c      	ldr	r0, [pc, #48]	; (8004ad0 <VL53L0X_WriteMulti+0x5c>)
 8004aa0:	f003 febc 	bl	800881c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4908      	ldr	r1, [pc, #32]	; (8004acc <VL53L0X_WriteMulti+0x58>)
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff ff9f 	bl	80049f0 <_I2CWrite>
 8004ab2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004aba:	23ec      	movs	r3, #236	; 0xec
 8004abc:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8004abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200004cc 	.word	0x200004cc
 8004ad0:	200004cd 	.word	0x200004cd

08004ad4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004ae8:	f107 030b 	add.w	r3, r7, #11
 8004aec:	2201      	movs	r2, #1
 8004aee:	4619      	mov	r1, r3
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff ff7d 	bl	80049f0 <_I2CWrite>
 8004af6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004afe:	23ec      	movs	r3, #236	; 0xec
 8004b00:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004b02:	e00c      	b.n	8004b1e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff ff90 	bl	8004a2e <_I2CRead>
 8004b0e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004b16:	23ec      	movs	r3, #236	; 0xec
 8004b18:	75fb      	strb	r3, [r7, #23]
 8004b1a:	e000      	b.n	8004b1e <VL53L0X_ReadMulti+0x4a>
    }
done:
 8004b1c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8004b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8004b40:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <VL53L0X_WrByte+0x44>)
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <VL53L0X_WrByte+0x44>)
 8004b48:	78bb      	ldrb	r3, [r7, #2]
 8004b4a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	4908      	ldr	r1, [pc, #32]	; (8004b70 <VL53L0X_WrByte+0x44>)
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ff4d 	bl	80049f0 <_I2CWrite>
 8004b56:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004b5e:	23ec      	movs	r3, #236	; 0xec
 8004b60:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8004b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200004cc 	.word	0x200004cc

08004b74 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
 8004b80:	4613      	mov	r3, r2
 8004b82:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8004b88:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <VL53L0X_WrWord+0x50>)
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8004b8e:	883b      	ldrh	r3, [r7, #0]
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <VL53L0X_WrWord+0x50>)
 8004b98:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8004b9a:	883b      	ldrh	r3, [r7, #0]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <VL53L0X_WrWord+0x50>)
 8004ba0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	4907      	ldr	r1, [pc, #28]	; (8004bc4 <VL53L0X_WrWord+0x50>)
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ff22 	bl	80049f0 <_I2CWrite>
 8004bac:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004bb4:	23ec      	movs	r3, #236	; 0xec
 8004bb6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8004bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	200004cc 	.word	0x200004cc

08004bc8 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	70fb      	strb	r3, [r7, #3]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70bb      	strb	r3, [r7, #2]
 8004bde:	4613      	mov	r3, r2
 8004be0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8004be6:	f107 020e 	add.w	r2, r7, #14
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f81e 	bl	8004c30 <VL53L0X_RdByte>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8004bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d110      	bne.n	8004c22 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8004c00:	7bba      	ldrb	r2, [r7, #14]
 8004c02:	78bb      	ldrb	r3, [r7, #2]
 8004c04:	4013      	ands	r3, r2
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	787b      	ldrb	r3, [r7, #1]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004c10:	7bba      	ldrb	r2, [r7, #14]
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ff88 	bl	8004b2c <VL53L0X_WrByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e000      	b.n	8004c24 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8004c22:	bf00      	nop
done:
    return Status;
 8004c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004c42:	f107 030b 	add.w	r3, r7, #11
 8004c46:	2201      	movs	r2, #1
 8004c48:	4619      	mov	r1, r3
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff fed0 	bl	80049f0 <_I2CWrite>
 8004c50:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004c58:	23ec      	movs	r3, #236	; 0xec
 8004c5a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004c5c:	e00c      	b.n	8004c78 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8004c5e:	2201      	movs	r2, #1
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fee3 	bl	8004a2e <_I2CRead>
 8004c68:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004c70:	23ec      	movs	r3, #236	; 0xec
 8004c72:	75fb      	strb	r3, [r7, #23]
 8004c74:	e000      	b.n	8004c78 <VL53L0X_RdByte+0x48>
    }
done:
 8004c76:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8004c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004c96:	f107 030b 	add.w	r3, r7, #11
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff fea6 	bl	80049f0 <_I2CWrite>
 8004ca4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004cac:	23ec      	movs	r3, #236	; 0xec
 8004cae:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004cb0:	e017      	b.n	8004ce2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	490e      	ldr	r1, [pc, #56]	; (8004cf0 <VL53L0X_RdWord+0x6c>)
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f7ff feb9 	bl	8004a2e <_I2CRead>
 8004cbc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004cc4:	23ec      	movs	r3, #236	; 0xec
 8004cc6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004cc8:	e00b      	b.n	8004ce2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <VL53L0X_RdWord+0x6c>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <VL53L0X_RdWord+0x6c>)
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	4413      	add	r3, r2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8004ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200004cc 	.word	0x200004cc

08004cf4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8004d06:	f107 030b 	add.w	r3, r7, #11
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fe6e 	bl	80049f0 <_I2CWrite>
 8004d14:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004d1c:	23ec      	movs	r3, #236	; 0xec
 8004d1e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004d20:	e01b      	b.n	8004d5a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8004d22:	2204      	movs	r2, #4
 8004d24:	4910      	ldr	r1, [pc, #64]	; (8004d68 <VL53L0X_RdDWord+0x74>)
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff fe81 	bl	8004a2e <_I2CRead>
 8004d2c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004d34:	23ec      	movs	r3, #236	; 0xec
 8004d36:	75fb      	strb	r3, [r7, #23]
        goto done;
 8004d38:	e00f      	b.n	8004d5a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <VL53L0X_RdDWord+0x74>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	061a      	lsls	r2, r3, #24
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <VL53L0X_RdDWord+0x74>)
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	441a      	add	r2, r3
 8004d48:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <VL53L0X_RdDWord+0x74>)
 8004d4a:	789b      	ldrb	r3, [r3, #2]
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	4413      	add	r3, r2
 8004d50:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <VL53L0X_RdDWord+0x74>)
 8004d52:	78d2      	ldrb	r2, [r2, #3]
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8004d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200004cc 	.word	0x200004cc

08004d6c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8004d78:	2002      	movs	r0, #2
 8004d7a:	f7fb ffab 	bl	8000cd4 <HAL_Delay>
    return status;
 8004d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f001 f953 	bl	8006046 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	218a      	movs	r1, #138	; 0x8a
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff feae 	bl	8004b2c <VL53L0X_WrByte>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8004dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004de0:	b5b0      	push	{r4, r5, r7, lr}
 8004de2:	b096      	sub	sp, #88	; 0x58
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004dee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004df6:	2200      	movs	r2, #0
 8004df8:	2188      	movs	r1, #136	; 0x88
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff fe96 	bl	8004b2c <VL53L0X_WrByte>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e14:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004e1e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a9e      	ldr	r2, [pc, #632]	; (80050a0 <VL53L0X_DataInit+0x2c0>)
 8004e26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a9d      	ldr	r2, [pc, #628]	; (80050a4 <VL53L0X_DataInit+0x2c4>)
 8004e2e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f932 	bl	80050a8 <VL53L0X_GetDeviceParameters>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004e4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d112      	bne.n	8004e78 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004e52:	2300      	movs	r3, #0
 8004e54:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004e56:	2300      	movs	r3, #0
 8004e58:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f103 0410 	add.w	r4, r3, #16
 8004e60:	f107 0510 	add.w	r5, r7, #16
 8004e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2264      	movs	r2, #100	; 0x64
 8004e7c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004e86:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e90:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004e9a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fe3e 	bl	8004b2c <VL53L0X_WrByte>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	21ff      	movs	r1, #255	; 0xff
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fe32 	bl	8004b2c <VL53L0X_WrByte>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2100      	movs	r1, #0
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fe26 	bl	8004b2c <VL53L0X_WrByte>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004eee:	f107 030f 	add.w	r3, r7, #15
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2191      	movs	r1, #145	; 0x91
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fe9a 	bl	8004c30 <VL53L0X_RdByte>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004f12:	2201      	movs	r2, #1
 8004f14:	2100      	movs	r1, #0
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fe08 	bl	8004b2c <VL53L0X_WrByte>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	21ff      	movs	r1, #255	; 0xff
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fdfc 	bl	8004b2c <VL53L0X_WrByte>
 8004f34:	4603      	mov	r3, r0
 8004f36:	461a      	mov	r2, r3
 8004f38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004f42:	2200      	movs	r2, #0
 8004f44:	2180      	movs	r1, #128	; 0x80
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fdf0 	bl	8004b2c <VL53L0X_WrByte>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f5e:	e014      	b.n	8004f8a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004f60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d114      	bne.n	8004f92 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fae3 	bl	800553c <VL53L0X_SetLimitCheckEnable>
 8004f76:	4603      	mov	r3, r0
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f86:	3301      	adds	r3, #1
 8004f88:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	dde7      	ble.n	8004f60 <VL53L0X_DataInit+0x180>
 8004f90:	e000      	b.n	8004f94 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004f92:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004f94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d107      	bne.n	8004fac <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 facb 	bl	800553c <VL53L0X_SetLimitCheckEnable>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004fac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2103      	movs	r1, #3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fabf 	bl	800553c <VL53L0X_SetLimitCheckEnable>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004fc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d107      	bne.n	8004fdc <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2104      	movs	r1, #4
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fab3 	bl	800553c <VL53L0X_SetLimitCheckEnable>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004fdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2105      	movs	r1, #5
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 faa7 	bl	800553c <VL53L0X_SetLimitCheckEnable>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ff4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d108      	bne.n	800500e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004ffc:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005000:	2100      	movs	r1, #0
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fb4a 	bl	800569c <VL53L0X_SetLimitCheckValue>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800500e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005012:	2b00      	cmp	r3, #0
 8005014:	d108      	bne.n	8005028 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800501a:	2101      	movs	r1, #1
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fb3d 	bl	800569c <VL53L0X_SetLimitCheckValue>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005028:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800502c:	2b00      	cmp	r3, #0
 800502e:	d108      	bne.n	8005042 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005030:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005034:	2102      	movs	r1, #2
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fb30 	bl	800569c <VL53L0X_SetLimitCheckValue>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005042:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005046:	2b00      	cmp	r3, #0
 8005048:	d107      	bne.n	800505a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800504a:	2200      	movs	r2, #0
 800504c:	2103      	movs	r1, #3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fb24 	bl	800569c <VL53L0X_SetLimitCheckValue>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800505a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10f      	bne.n	8005082 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800506a:	22ff      	movs	r2, #255	; 0xff
 800506c:	2101      	movs	r1, #1
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fd5c 	bl	8004b2c <VL53L0X_WrByte>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005082:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005092:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005096:	4618      	mov	r0, r3
 8005098:	3758      	adds	r7, #88	; 0x58
 800509a:	46bd      	mov	sp, r7
 800509c:	bdb0      	pop	{r4, r5, r7, pc}
 800509e:	bf00      	nop
 80050a0:	00016b85 	.word	0x00016b85
 80050a4:	000970a4 	.word	0x000970a4

080050a8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8b0 	bl	8005220 <VL53L0X_GetDeviceMode>
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80050c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d107      	bne.n	80050dc <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f9b6 	bl	8005444 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80050d8:	4603      	mov	r3, r0
 80050da:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80050dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2200      	movs	r2, #0
 80050e8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80050ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d107      	bne.n	8005102 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3310      	adds	r3, #16
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9ec 	bl	80054d6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80050fe:	4603      	mov	r3, r0
 8005100:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d107      	bne.n	800511a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	3314      	adds	r3, #20
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fe3a 	bl	8004d8a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005116:	4603      	mov	r3, r0
 8005118:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800511a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d134      	bne.n	800518c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	e02a      	b.n	800517e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d12a      	bne.n	8005186 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	b299      	uxth	r1, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3308      	adds	r3, #8
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	3304      	adds	r3, #4
 8005140:	461a      	mov	r2, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fb0c 	bl	8005760 <VL53L0X_GetLimitCheckValue>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	4313      	orrs	r3, r2
 8005150:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d117      	bne.n	800518a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	b299      	uxth	r1, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	3318      	adds	r3, #24
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	4413      	add	r3, r2
 8005166:	461a      	mov	r2, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fa73 	bl	8005654 <VL53L0X_GetLimitCheckEnable>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	4313      	orrs	r3, r2
 8005176:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	3301      	adds	r3, #1
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b05      	cmp	r3, #5
 8005182:	ddd1      	ble.n	8005128 <VL53L0X_GetDeviceParameters+0x80>
 8005184:	e002      	b.n	800518c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800518a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800518c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d107      	bne.n	80051a4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	333c      	adds	r3, #60	; 0x3c
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fb6e 	bl	800587c <VL53L0X_GetWrapAroundCheckEnable>
 80051a0:	4603      	mov	r3, r0
 80051a2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80051a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f85a 	bl	800526c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80051b8:	4603      	mov	r3, r0
 80051ba:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	2b15      	cmp	r3, #21
 80051dc:	bf8c      	ite	hi
 80051de:	2201      	movhi	r2, #1
 80051e0:	2200      	movls	r2, #0
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	d10e      	bne.n	8005206 <VL53L0X_SetDeviceMode+0x3e>
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <VL53L0X_SetDeviceMode+0x54>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	741a      	strb	r2, [r3, #16]
		break;
 8005204:	e001      	b.n	800520a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005206:	23f8      	movs	r3, #248	; 0xf8
 8005208:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800520a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	0030000b 	.word	0x0030000b

08005220 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7c1a      	ldrb	r2, [r3, #16]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f002 faab 	bl	80077b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800525c:	4603      	mov	r3, r0
 800525e:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f002 fb78 	bl	8007972 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005282:	4603      	mov	r3, r0
 8005284:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
 800529e:	4613      	mov	r3, r2
 80052a0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80052a6:	78ba      	ldrb	r2, [r7, #2]
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f001 ffc0 	bl	8007232 <VL53L0X_set_vcsel_pulse_period>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80052b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b086      	sub	sp, #24
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	460b      	mov	r3, r1
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80052d4:	7afb      	ldrb	r3, [r7, #11]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4619      	mov	r1, r3
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f002 fa32 	bl	8007744 <VL53L0X_get_vcsel_pulse_period>
 80052e0:	4603      	mov	r3, r0
 80052e2:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80052e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <sequence_step_enabled>:
}

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	72fb      	strb	r3, [r7, #11]
 80052fe:	4613      	mov	r3, r2
 8005300:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800530c:	7afb      	ldrb	r3, [r7, #11]
 800530e:	2b04      	cmp	r3, #4
 8005310:	d836      	bhi.n	8005380 <sequence_step_enabled+0x90>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <sequence_step_enabled+0x28>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	0800532d 	.word	0x0800532d
 800531c:	0800533f 	.word	0x0800533f
 8005320:	08005351 	.word	0x08005351
 8005324:	08005363 	.word	0x08005363
 8005328:	08005375 	.word	0x08005375
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800532c:	7abb      	ldrb	r3, [r7, #10]
 800532e:	111b      	asrs	r3, r3, #4
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	701a      	strb	r2, [r3, #0]
		break;
 800533c:	e022      	b.n	8005384 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800533e:	7abb      	ldrb	r3, [r7, #10]
 8005340:	10db      	asrs	r3, r3, #3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	701a      	strb	r2, [r3, #0]
		break;
 800534e:	e019      	b.n	8005384 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005350:	7abb      	ldrb	r3, [r7, #10]
 8005352:	109b      	asrs	r3, r3, #2
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	b2da      	uxtb	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	701a      	strb	r2, [r3, #0]
		break;
 8005360:	e010      	b.n	8005384 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005362:	7abb      	ldrb	r3, [r7, #10]
 8005364:	119b      	asrs	r3, r3, #6
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	b2da      	uxtb	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	701a      	strb	r2, [r3, #0]
		break;
 8005372:	e007      	b.n	8005384 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005374:	7abb      	ldrb	r3, [r7, #10]
 8005376:	09db      	lsrs	r3, r3, #7
 8005378:	b2da      	uxtb	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	701a      	strb	r2, [r3, #0]
		break;
 800537e:	e001      	b.n	8005384 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005380:	23fc      	movs	r3, #252	; 0xfc
 8005382:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80053a6:	f107 030e 	add.w	r3, r7, #14
 80053aa:	461a      	mov	r2, r3
 80053ac:	2101      	movs	r1, #1
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fc3e 	bl	8004c30 <VL53L0X_RdByte>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80053b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d107      	bne.n	80053d0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80053c0:	7bba      	ldrb	r2, [r7, #14]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2100      	movs	r1, #0
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff ff92 	bl	80052f0 <sequence_step_enabled>
 80053cc:	4603      	mov	r3, r0
 80053ce:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80053d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80053d8:	7bba      	ldrb	r2, [r7, #14]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	3302      	adds	r3, #2
 80053de:	2101      	movs	r1, #1
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff ff85 	bl	80052f0 <sequence_step_enabled>
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80053ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d108      	bne.n	8005404 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80053f2:	7bba      	ldrb	r2, [r7, #14]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	2102      	movs	r1, #2
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff ff78 	bl	80052f0 <sequence_step_enabled>
 8005400:	4603      	mov	r3, r0
 8005402:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d108      	bne.n	800541e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800540c:	7bba      	ldrb	r2, [r7, #14]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	3303      	adds	r3, #3
 8005412:	2103      	movs	r1, #3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ff6b 	bl	80052f0 <sequence_step_enabled>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800541e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d108      	bne.n	8005438 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005426:	7bba      	ldrb	r2, [r7, #14]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	3304      	adds	r3, #4
 800542c:	2104      	movs	r1, #4
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff ff5e 	bl	80052f0 <sequence_step_enabled>
 8005434:	4603      	mov	r3, r0
 8005436:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	461a      	mov	r2, r3
 8005458:	21f8      	movs	r1, #248	; 0xf8
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff fc12 	bl	8004c84 <VL53L0X_RdWord>
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800546c:	f107 0308 	add.w	r3, r7, #8
 8005470:	461a      	mov	r2, r3
 8005472:	2104      	movs	r1, #4
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fc3d 	bl	8004cf4 <VL53L0X_RdDWord>
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800547e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10c      	bne.n	80054a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8005486:	89bb      	ldrh	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	89ba      	ldrh	r2, [r7, #12]
 8005490:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	7f1b      	ldrb	r3, [r3, #28]
 80054be:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	7bba      	ldrb	r2, [r7, #14]
 80054c4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b086      	sub	sp, #24
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80054e4:	f107 030e 	add.w	r3, r7, #14
 80054e8:	461a      	mov	r2, r3
 80054ea:	2120      	movs	r1, #32
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff fbc9 	bl	8004c84 <VL53L0X_RdWord>
 80054f2:	4603      	mov	r3, r0
 80054f4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80054f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80054fe:	89fb      	ldrh	r3, [r7, #14]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	771a      	strb	r2, [r3, #28]
 8005516:	e00b      	b.n	8005530 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005518:	89fb      	ldrh	r3, [r7, #14]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
 8005548:	4613      	mov	r3, r2
 800554a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800554c:	2300      	movs	r3, #0
 800554e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800555c:	887b      	ldrh	r3, [r7, #2]
 800555e:	2b05      	cmp	r3, #5
 8005560:	d902      	bls.n	8005568 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005562:	23fc      	movs	r3, #252	; 0xfc
 8005564:	75fb      	strb	r3, [r7, #23]
 8005566:	e05b      	b.n	8005620 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005568:	787b      	ldrb	r3, [r7, #1]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8005576:	2301      	movs	r3, #1
 8005578:	73bb      	strb	r3, [r7, #14]
 800557a:	e00a      	b.n	8005592 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	330c      	adds	r3, #12
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005592:	887b      	ldrh	r3, [r7, #2]
 8005594:	2b05      	cmp	r3, #5
 8005596:	d841      	bhi.n	800561c <VL53L0X_SetLimitCheckEnable+0xe0>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <VL53L0X_SetLimitCheckEnable+0x64>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055b9 	.word	0x080055b9
 80055a4:	080055c3 	.word	0x080055c3
 80055a8:	080055d9 	.word	0x080055d9
 80055ac:	080055e3 	.word	0x080055e3
 80055b0:	080055ed 	.word	0x080055ed
 80055b4:	08005605 	.word	0x08005605

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7bfa      	ldrb	r2, [r7, #15]
 80055bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80055c0:	e02e      	b.n	8005620 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	2144      	movs	r1, #68	; 0x44
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff fad1 	bl	8004b74 <VL53L0X_WrWord>
 80055d2:	4603      	mov	r3, r0
 80055d4:	75fb      	strb	r3, [r7, #23]

			break;
 80055d6:	e023      	b.n	8005620 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	7bfa      	ldrb	r2, [r7, #15]
 80055dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80055e0:	e01e      	b.n	8005620 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	7bfa      	ldrb	r2, [r7, #15]
 80055e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80055ea:	e019      	b.n	8005620 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80055f2:	7b7b      	ldrb	r3, [r7, #13]
 80055f4:	22fe      	movs	r2, #254	; 0xfe
 80055f6:	2160      	movs	r1, #96	; 0x60
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fae5 	bl	8004bc8 <VL53L0X_UpdateByte>
 80055fe:	4603      	mov	r3, r0
 8005600:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005602:	e00d      	b.n	8005620 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800560a:	7b7b      	ldrb	r3, [r7, #13]
 800560c:	22ef      	movs	r2, #239	; 0xef
 800560e:	2160      	movs	r1, #96	; 0x60
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fad9 	bl	8004bc8 <VL53L0X_UpdateByte>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800561a:	e001      	b.n	8005620 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800561c:	23fc      	movs	r3, #252	; 0xfc
 800561e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10f      	bne.n	8005648 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005628:	787b      	ldrb	r3, [r7, #1]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800562e:	887b      	ldrh	r3, [r7, #2]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800563a:	e005      	b.n	8005648 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800563c:	887b      	ldrh	r3, [r7, #2]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	460b      	mov	r3, r1
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005666:	897b      	ldrh	r3, [r7, #10]
 8005668:	2b05      	cmp	r3, #5
 800566a:	d905      	bls.n	8005678 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800566c:	23fc      	movs	r3, #252	; 0xfc
 800566e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e008      	b.n	800568a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005678:	897b      	ldrh	r3, [r7, #10]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005682:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7dba      	ldrb	r2, [r7, #22]
 8005688:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800568a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800568e:	4618      	mov	r0, r3
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
	...

0800569c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	460b      	mov	r3, r1
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80056ae:	897b      	ldrh	r3, [r7, #10]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056b8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80056ba:	7dbb      	ldrb	r3, [r7, #22]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056c0:	897b      	ldrh	r3, [r7, #10]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	330c      	adds	r3, #12
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	e040      	b.n	8005752 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80056d0:	897b      	ldrh	r3, [r7, #10]
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d830      	bhi.n	8005738 <VL53L0X_SetLimitCheckValue+0x9c>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <VL53L0X_SetLimitCheckValue+0x40>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	080056f5 	.word	0x080056f5
 80056e0:	080056fd 	.word	0x080056fd
 80056e4:	08005713 	.word	0x08005713
 80056e8:	0800571b 	.word	0x0800571b
 80056ec:	08005723 	.word	0x08005723
 80056f0:	08005723 	.word	0x08005723

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80056fa:	e01f      	b.n	800573c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005700:	b29b      	uxth	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	2144      	movs	r1, #68	; 0x44
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fa34 	bl	8004b74 <VL53L0X_WrWord>
 800570c:	4603      	mov	r3, r0
 800570e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005710:	e014      	b.n	800573c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005718:	e010      	b.n	800573c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005720:	e00c      	b.n	800573c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005726:	b29b      	uxth	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f7ff fa21 	bl	8004b74 <VL53L0X_WrWord>
 8005732:	4603      	mov	r3, r0
 8005734:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005736:	e001      	b.n	800573c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005738:	23fc      	movs	r3, #252	; 0xfc
 800573a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800573c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005744:	897b      	ldrh	r3, [r7, #10]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	330c      	adds	r3, #12
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop

08005760 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	460b      	mov	r3, r1
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800576e:	2300      	movs	r3, #0
 8005770:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005776:	897b      	ldrh	r3, [r7, #10]
 8005778:	2b05      	cmp	r3, #5
 800577a:	d847      	bhi.n	800580c <VL53L0X_GetLimitCheckValue+0xac>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <VL53L0X_GetLimitCheckValue+0x24>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	0800579d 	.word	0x0800579d
 8005788:	080057a9 	.word	0x080057a9
 800578c:	080057cf 	.word	0x080057cf
 8005790:	080057db 	.word	0x080057db
 8005794:	080057e7 	.word	0x080057e7
 8005798:	080057e7 	.word	0x080057e7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	77bb      	strb	r3, [r7, #30]
		break;
 80057a6:	e033      	b.n	8005810 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80057a8:	f107 0316 	add.w	r3, r7, #22
 80057ac:	461a      	mov	r2, r3
 80057ae:	2144      	movs	r1, #68	; 0x44
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff fa67 	bl	8004c84 <VL53L0X_RdWord>
 80057b6:	4603      	mov	r3, r0
 80057b8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80057ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80057c2:	8afb      	ldrh	r3, [r7, #22]
 80057c4:	025b      	lsls	r3, r3, #9
 80057c6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80057c8:	2301      	movs	r3, #1
 80057ca:	77bb      	strb	r3, [r7, #30]
		break;
 80057cc:	e020      	b.n	8005810 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	77bb      	strb	r3, [r7, #30]
		break;
 80057d8:	e01a      	b.n	8005810 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	77bb      	strb	r3, [r7, #30]
		break;
 80057e4:	e014      	b.n	8005810 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80057e6:	f107 0316 	add.w	r3, r7, #22
 80057ea:	461a      	mov	r2, r3
 80057ec:	2164      	movs	r1, #100	; 0x64
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fa48 	bl	8004c84 <VL53L0X_RdWord>
 80057f4:	4603      	mov	r3, r0
 80057f6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80057f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005800:	8afb      	ldrh	r3, [r7, #22]
 8005802:	025b      	lsls	r3, r3, #9
 8005804:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	77bb      	strb	r3, [r7, #30]
		break;
 800580a:	e001      	b.n	8005810 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800580c:	23fc      	movs	r3, #252	; 0xfc
 800580e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005810:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d12a      	bne.n	800586e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005818:	7fbb      	ldrb	r3, [r7, #30]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d124      	bne.n	8005868 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d110      	bne.n	8005846 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005824:	897b      	ldrh	r3, [r7, #10]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	330c      	adds	r3, #12
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005838:	897b      	ldrh	r3, [r7, #10]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005844:	e013      	b.n	800586e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800584c:	897b      	ldrh	r3, [r7, #10]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	330c      	adds	r3, #12
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800585a:	897b      	ldrh	r3, [r7, #10]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005866:	e002      	b.n	800586e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800586e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop

0800587c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800588a:	f107 030e 	add.w	r3, r7, #14
 800588e:	461a      	mov	r2, r3
 8005890:	2101      	movs	r1, #1
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff f9cc 	bl	8004c30 <VL53L0X_RdByte>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800589c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10e      	bne.n	80058c2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80058a4:	7bba      	ldrb	r2, [r7, #14]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	b25b      	sxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da03      	bge.n	80058bc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2201      	movs	r2, #1
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e002      	b.n	80058c2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80058c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80058ec:	f107 030e 	add.w	r3, r7, #14
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fc94 	bl	8005220 <VL53L0X_GetDeviceMode>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80058fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d107      	bne.n	8005914 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005904:	7bbb      	ldrb	r3, [r7, #14]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f898 	bl	8005a40 <VL53L0X_StartMeasurement>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 f976 	bl	8006c0e <VL53L0X_measurement_poll_for_completion>
 8005922:	4603      	mov	r3, r0
 8005924:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2203      	movs	r2, #3
 8005938:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800593c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005954:	2300      	movs	r3, #0
 8005956:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005958:	2301      	movs	r3, #1
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f001 f918 	bl	8006b94 <VL53L0X_perform_ref_calibration>
 8005964:	4603      	mov	r3, r0
 8005966:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005968:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005980:	2300      	movs	r3, #0
 8005982:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800598a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800598c:	7dbb      	ldrb	r3, [r7, #22]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d005      	beq.n	800599e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005992:	7dbb      	ldrb	r3, [r7, #22]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d002      	beq.n	800599e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005998:	7dbb      	ldrb	r3, [r7, #22]
 800599a:	2b03      	cmp	r3, #3
 800599c:	d147      	bne.n	8005a2e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800599e:	f107 030c 	add.w	r3, r7, #12
 80059a2:	f107 0210 	add.w	r2, r7, #16
 80059a6:	2101      	movs	r1, #1
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fa9f 	bl	8005eec <VL53L0X_GetInterruptThresholds>
 80059ae:	4603      	mov	r3, r0
 80059b0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80059b8:	d803      	bhi.n	80059c2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80059ba:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80059bc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80059c0:	d935      	bls.n	8005a2e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80059c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d131      	bne.n	8005a2e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80059d0:	491a      	ldr	r1, [pc, #104]	; (8005a3c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f002 f87e 	bl	8007ad4 <VL53L0X_load_tuning_settings>
 80059d8:	4603      	mov	r3, r0
 80059da:	75fb      	strb	r3, [r7, #23]
 80059dc:	e027      	b.n	8005a2e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80059de:	2204      	movs	r2, #4
 80059e0:	21ff      	movs	r1, #255	; 0xff
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff f8a2 	bl	8004b2c <VL53L0X_WrByte>
 80059e8:	4603      	mov	r3, r0
 80059ea:	461a      	mov	r2, r3
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2170      	movs	r1, #112	; 0x70
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff f898 	bl	8004b2c <VL53L0X_WrByte>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a06:	2200      	movs	r2, #0
 8005a08:	21ff      	movs	r1, #255	; 0xff
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff f88e 	bl	8004b2c <VL53L0X_WrByte>
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff f884 	bl	8004b2c <VL53L0X_WrByte>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	200001a4 	.word	0x200001a4

08005a40 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a50:	f107 030e 	add.w	r3, r7, #14
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff fbe2 	bl	8005220 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff f863 	bl	8004b2c <VL53L0X_WrByte>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	21ff      	movs	r1, #255	; 0xff
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff f85c 	bl	8004b2c <VL53L0X_WrByte>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff f855 	bl	8004b2c <VL53L0X_WrByte>
 8005a82:	4603      	mov	r3, r0
 8005a84:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2191      	movs	r1, #145	; 0x91
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff f84b 	bl	8004b2c <VL53L0X_WrByte>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff f844 	bl	8004b2c <VL53L0X_WrByte>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	21ff      	movs	r1, #255	; 0xff
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff f83d 	bl	8004b2c <VL53L0X_WrByte>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2180      	movs	r1, #128	; 0x80
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff f836 	bl	8004b2c <VL53L0X_WrByte>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d054      	beq.n	8005b74 <VL53L0X_StartMeasurement+0x134>
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	dc6c      	bgt.n	8005ba8 <VL53L0X_StartMeasurement+0x168>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <VL53L0X_StartMeasurement+0x98>
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d034      	beq.n	8005b40 <VL53L0X_StartMeasurement+0x100>
 8005ad6:	e067      	b.n	8005ba8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005ad8:	2201      	movs	r2, #1
 8005ada:	2100      	movs	r1, #0
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff f825 	bl	8004b2c <VL53L0X_WrByte>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d15d      	bne.n	8005bae <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005afc:	f107 030d 	add.w	r3, r7, #13
 8005b00:	461a      	mov	r2, r3
 8005b02:	2100      	movs	r1, #0
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff f893 	bl	8004c30 <VL53L0X_RdByte>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	3301      	adds	r3, #1
 8005b12:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005b14:	7b7a      	ldrb	r2, [r7, #13]
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005b1c:	7bfa      	ldrb	r2, [r7, #15]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d107      	bne.n	8005b32 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b30:	d3e1      	bcc.n	8005af6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b38:	d339      	bcc.n	8005bae <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005b3a:	23f9      	movs	r3, #249	; 0xf9
 8005b3c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005b3e:	e036      	b.n	8005bae <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005b48:	2101      	movs	r1, #1
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff ff12 	bl	8005974 <VL53L0X_CheckAndLoadInterruptSettings>
 8005b50:	4603      	mov	r3, r0
 8005b52:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005b54:	2202      	movs	r2, #2
 8005b56:	2100      	movs	r1, #0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7fe ffe7 	bl	8004b2c <VL53L0X_WrByte>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d123      	bne.n	8005bb2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005b72:	e01e      	b.n	8005bb2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff fef8 	bl	8005974 <VL53L0X_CheckAndLoadInterruptSettings>
 8005b84:	4603      	mov	r3, r0
 8005b86:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005b88:	2204      	movs	r2, #4
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fe ffcd 	bl	8004b2c <VL53L0X_WrByte>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005ba6:	e006      	b.n	8005bb6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005ba8:	23f8      	movs	r3, #248	; 0xf8
 8005baa:	75fb      	strb	r3, [r7, #23]
 8005bac:	e004      	b.n	8005bb8 <VL53L0X_StartMeasurement+0x178>
		break;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <VL53L0X_StartMeasurement+0x178>
		break;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <VL53L0X_StartMeasurement+0x178>
		break;
 8005bb6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005bd8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d112      	bne.n	8005c06 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005be0:	f107 0308 	add.w	r3, r7, #8
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f9f6 	bl	8005fd8 <VL53L0X_GetInterruptMaskStatus>
 8005bec:	4603      	mov	r3, r0
 8005bee:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d103      	bne.n	8005bfe <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	e01c      	b.n	8005c38 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e018      	b.n	8005c38 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005c06:	f107 030d 	add.w	r3, r7, #13
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2114      	movs	r1, #20
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff f80e 	bl	8004c30 <VL53L0X_RdByte>
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005c20:	7b7b      	ldrb	r3, [r7, #13]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e002      	b.n	8005c38 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005c44:	b5b0      	push	{r4, r5, r7, lr}
 8005c46:	b096      	sub	sp, #88	; 0x58
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005c54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c58:	230c      	movs	r3, #12
 8005c5a:	2114      	movs	r1, #20
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fe ff39 	bl	8004ad4 <VL53L0X_ReadMulti>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005c68:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 80d1 	bne.w	8005e14 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2200      	movs	r2, #0
 8005c76:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005c7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005c9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	4413      	add	r3, r2
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	025b      	lsls	r3, r3, #9
 8005cb0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005cb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4413      	add	r3, r2
 8005cca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005cce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cd2:	025b      	lsls	r3, r3, #9
 8005cd4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005cda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	021b      	lsls	r3, r3, #8
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	4413      	add	r3, r2
 8005cec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005cf6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005cf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005d06:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005d0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005d12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d18:	d046      	beq.n	8005da8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005d1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d1c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005d20:	fb02 f303 	mul.w	r3, r2, r3
 8005d24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d28:	4a57      	ldr	r2, [pc, #348]	; (8005e88 <VL53L0X_GetRangingMeasurementData+0x244>)
 8005d2a:	fb82 1203 	smull	r1, r2, r2, r3
 8005d2e:	1192      	asrs	r2, r2, #6
 8005d30:	17db      	asrs	r3, r3, #31
 8005d32:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005d34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7f1b      	ldrb	r3, [r3, #28]
 8005d42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005d46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d02c      	beq.n	8005da8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005d4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d50:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d10d      	bne.n	8005d7c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005d60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005d68:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005d6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d70:	e016      	b.n	8005da0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005d72:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005d76:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d7a:	e011      	b.n	8005da0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005d7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d82:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005d86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d88:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005d90:	121b      	asrs	r3, r3, #8
 8005d92:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d96:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005d9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005da0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005da4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005da8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00d      	beq.n	8005dcc <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005db0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005db4:	089b      	lsrs	r3, r3, #2
 8005db6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005dbc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	019b      	lsls	r3, r3, #6
 8005dc4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	75da      	strb	r2, [r3, #23]
 8005dca:	e006      	b.n	8005dda <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005dd2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005dda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005dde:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005de2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f002 fb0d 	bl	8008410 <VL53L0X_get_pal_range_status>
 8005df6:	4603      	mov	r3, r0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005e04:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005e0c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e14:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d12f      	bne.n	8005e7c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f107 040c 	add.w	r4, r7, #12
 8005e22:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005e36:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005e44:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005e4a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005e50:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005e56:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005e5c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005e62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005e6c:	f107 050c 	add.w	r5, r7, #12
 8005e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e7c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3750      	adds	r7, #80	; 0x50
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bdb0      	pop	{r4, r5, r7, pc}
 8005e88:	10624dd3 	.word	0x10624dd3

08005e8c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff f993 	bl	80051c8 <VL53L0X_SetDeviceMode>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff fd16 	bl	80058e0 <VL53L0X_PerformSingleMeasurement>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d105      	bne.n	8005ecc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff febe 	bl	8005c44 <VL53L0X_GetRangingMeasurementData>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f83e 	bl	8005f58 <VL53L0X_ClearInterruptMask>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005f00:	f107 0314 	add.w	r3, r7, #20
 8005f04:	461a      	mov	r2, r3
 8005f06:	210e      	movs	r1, #14
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7fe febb 	bl	8004c84 <VL53L0X_RdWord>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005f12:	8abb      	ldrh	r3, [r7, #20]
 8005f14:	045b      	lsls	r3, r3, #17
 8005f16:	461a      	mov	r2, r3
 8005f18:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <VL53L0X_GetInterruptThresholds+0x68>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10f      	bne.n	8005f48 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005f28:	f107 0314 	add.w	r3, r7, #20
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	210c      	movs	r1, #12
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7fe fea7 	bl	8004c84 <VL53L0X_RdWord>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005f3a:	8abb      	ldrh	r3, [r7, #20]
 8005f3c:	045b      	lsls	r3, r3, #17
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <VL53L0X_GetInterruptThresholds+0x68>)
 8005f42:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	1ffe0000 	.word	0x1ffe0000

08005f58 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	210b      	movs	r1, #11
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fe fddc 	bl	8004b2c <VL53L0X_WrByte>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005f78:	2200      	movs	r2, #0
 8005f7a:	210b      	movs	r1, #11
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fe fdd5 	bl	8004b2c <VL53L0X_WrByte>
 8005f82:	4603      	mov	r3, r0
 8005f84:	461a      	mov	r2, r3
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005f8c:	f107 030d 	add.w	r3, r7, #13
 8005f90:	461a      	mov	r2, r3
 8005f92:	2113      	movs	r1, #19
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7fe fe4b 	bl	8004c30 <VL53L0X_RdByte>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005faa:	7b7b      	ldrb	r3, [r7, #13]
 8005fac:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d006      	beq.n	8005fc2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d803      	bhi.n	8005fc2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0d3      	beq.n	8005f6a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005fc8:	23f4      	movs	r3, #244	; 0xf4
 8005fca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005fe6:	f107 030e 	add.w	r3, r7, #14
 8005fea:	461a      	mov	r2, r3
 8005fec:	2113      	movs	r1, #19
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fe fe1e 	bl	8004c30 <VL53L0X_RdByte>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	f003 0207 	and.w	r2, r3, #7
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	f003 0318 	and.w	r3, r3, #24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800600c:	23fa      	movs	r3, #250	; 0xfa
 800600e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fa03 	bl	800643c <VL53L0X_perform_ref_spad_management>
 8006036:	4603      	mov	r3, r0
 8006038:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800603a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006054:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006058:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800605a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800605e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006060:	f107 0308 	add.w	r3, r7, #8
 8006064:	461a      	mov	r2, r3
 8006066:	2128      	movs	r1, #40	; 0x28
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7fe fe0b 	bl	8004c84 <VL53L0X_RdWord>
 800606e:	4603      	mov	r3, r0
 8006070:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d11e      	bne.n	80060b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800607a:	893b      	ldrh	r3, [r7, #8]
 800607c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006080:	b29b      	uxth	r3, r3
 8006082:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006084:	893b      	ldrh	r3, [r7, #8]
 8006086:	461a      	mov	r2, r3
 8006088:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800608c:	429a      	cmp	r2, r3
 800608e:	dd0b      	ble.n	80060a8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006090:	893a      	ldrh	r2, [r7, #8]
 8006092:	897b      	ldrh	r3, [r7, #10]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	b29b      	uxth	r3, r3
 8006098:	b21b      	sxth	r3, r3
 800609a:	461a      	mov	r2, r3
					* 250;
 800609c:	23fa      	movs	r3, #250	; 0xfa
 800609e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e007      	b.n	80060b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80060a8:	893b      	ldrh	r3, [r7, #8]
 80060aa:	b21b      	sxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	23fa      	movs	r3, #250	; 0xfa
 80060b0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80060b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b08b      	sub	sp, #44	; 0x2c
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80060d2:	2308      	movs	r3, #8
 80060d4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295
 80060e0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ea:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80060f4:	69b9      	ldr	r1, [r7, #24]
 80060f6:	fb01 f202 	mul.w	r2, r1, r2
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	e030      	b.n	8006166 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	4413      	add	r3, r2
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	429a      	cmp	r2, r3
 8006118:	d11e      	bne.n	8006158 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800611a:	7ffa      	ldrb	r2, [r7, #31]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	fa42 f303 	asr.w	r3, r2, r3
 8006122:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006128:	e016      	b.n	8006158 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800612a:	7ffb      	ldrb	r3, [r7, #31]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <get_next_good_spad+0x88>
				success = 1;
 8006134:	2301      	movs	r3, #1
 8006136:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	fb03 f202 	mul.w	r2, r3, r2
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	4413      	add	r3, r2
 8006144:	461a      	mov	r2, r3
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	601a      	str	r2, [r3, #0]
				break;
 800614a:	e009      	b.n	8006160 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800614c:	7ffb      	ldrb	r3, [r7, #31]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	3301      	adds	r3, #1
 8006156:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006158:	6a3a      	ldr	r2, [r7, #32]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	429a      	cmp	r2, r3
 800615e:	d3e4      	bcc.n	800612a <get_next_good_spad+0x66>
				coarseIndex++) {
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	3301      	adds	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d202      	bcs.n	8006174 <get_next_good_spad+0xb0>
 800616e:	7fbb      	ldrb	r3, [r7, #30]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0c7      	beq.n	8006104 <get_next_good_spad+0x40>
		}
	}
}
 8006174:	bf00      	nop
 8006176:	372c      	adds	r7, #44	; 0x2c
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	099b      	lsrs	r3, r3, #6
 8006190:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006192:	4a07      	ldr	r2, [pc, #28]	; (80061b0 <is_aperture+0x30>)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <is_aperture+0x22>
		isAperture = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	2000035c 	.word	0x2000035c

080061b4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80061c0:	2300      	movs	r3, #0
 80061c2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80061c4:	2308      	movs	r3, #8
 80061c6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80061da:	69b9      	ldr	r1, [r7, #24]
 80061dc:	fb01 f202 	mul.w	r2, r1, r2
 80061e0:	1a9b      	subs	r3, r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d302      	bcc.n	80061f2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80061ec:	23ce      	movs	r3, #206	; 0xce
 80061ee:	77fb      	strb	r3, [r7, #31]
 80061f0:	e010      	b.n	8006214 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4413      	add	r3, r2
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	b25a      	sxtb	r2, r3
 80061fc:	2101      	movs	r1, #1
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	fa01 f303 	lsl.w	r3, r1, r3
 8006204:	b25b      	sxtb	r3, r3
 8006206:	4313      	orrs	r3, r2
 8006208:	b259      	sxtb	r1, r3
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	4413      	add	r3, r2
 8006210:	b2ca      	uxtb	r2, r1
 8006212:	701a      	strb	r2, [r3, #0]

	return status;
 8006214:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3724      	adds	r7, #36	; 0x24
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800622e:	2306      	movs	r3, #6
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	21b0      	movs	r1, #176	; 0xb0
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fe fc1d 	bl	8004a74 <VL53L0X_WriteMulti>
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800623e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006254:	2306      	movs	r3, #6
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	21b0      	movs	r1, #176	; 0xb0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fe fc3a 	bl	8004ad4 <VL53L0X_ReadMulti>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08c      	sub	sp, #48	; 0x30
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	460b      	mov	r3, r1
 800627e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006280:	2300      	movs	r3, #0
 8006282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006288:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800628e:	2300      	movs	r3, #0
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
 8006292:	e02b      	b.n	80062ec <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006294:	f107 031c 	add.w	r3, r7, #28
 8006298:	6a3a      	ldr	r2, [r7, #32]
 800629a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff ff11 	bl	80060c4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d103      	bne.n	80062b2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80062aa:	23ce      	movs	r3, #206	; 0xce
 80062ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80062b0:	e020      	b.n	80062f4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	461a      	mov	r2, r3
 80062b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b8:	4413      	add	r3, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff ff60 	bl	8006180 <is_aperture>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	7afb      	ldrb	r3, [r7, #11]
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80062ca:	23ce      	movs	r3, #206	; 0xce
 80062cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80062d0:	e010      	b.n	80062f4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062da:	6838      	ldr	r0, [r7, #0]
 80062dc:	f7ff ff6a 	bl	80061b4 <enable_spad_bit>
		currentSpad++;
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	3301      	adds	r3, #1
 80062e4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	3301      	adds	r3, #1
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d3cf      	bcc.n	8006294 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80062f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f6:	6a3a      	ldr	r2, [r7, #32]
 80062f8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80062fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff ff8d 	bl	8006224 <set_ref_spad_map>
 800630a:	4603      	mov	r3, r0
 800630c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006310:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006314:	2b00      	cmp	r3, #0
 8006316:	d121      	bne.n	800635c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006318:	f107 0314 	add.w	r3, r7, #20
 800631c:	4619      	mov	r1, r3
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f7ff ff93 	bl	800624a <get_ref_spad_map>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800632e:	e011      	b.n	8006354 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	4413      	add	r3, r2
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	f107 0114 	add.w	r1, r7, #20
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	440b      	add	r3, r1
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d003      	beq.n	800634e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006346:	23ce      	movs	r3, #206	; 0xce
 8006348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800634c:	e006      	b.n	800635c <enable_ref_spads+0xec>
			}
			i++;
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	3301      	adds	r3, #1
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	429a      	cmp	r2, r3
 800635a:	d3e9      	bcc.n	8006330 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800635c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006360:	4618      	mov	r0, r3
 8006362:	3730      	adds	r7, #48	; 0x30
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006372:	2300      	movs	r3, #0
 8006374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006384:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800638c:	2b00      	cmp	r3, #0
 800638e:	d107      	bne.n	80063a0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006390:	22c0      	movs	r2, #192	; 0xc0
 8006392:	2101      	movs	r1, #1
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fe fbc9 	bl	8004b2c <VL53L0X_WrByte>
 800639a:	4603      	mov	r3, r0
 800639c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80063a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d108      	bne.n	80063ba <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fd6c 	bl	8005e8c <VL53L0X_PerformSingleRangingMeasurement>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80063ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d107      	bne.n	80063d2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80063c2:	2201      	movs	r2, #1
 80063c4:	21ff      	movs	r1, #255	; 0xff
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fe fbb0 	bl	8004b2c <VL53L0X_WrByte>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80063d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d107      	bne.n	80063ea <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	21b6      	movs	r1, #182	; 0xb6
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fe fc50 	bl	8004c84 <VL53L0X_RdWord>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80063ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80063f2:	2200      	movs	r2, #0
 80063f4:	21ff      	movs	r1, #255	; 0xff
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fe fb98 	bl	8004b2c <VL53L0X_WrByte>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006402:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006406:	2b00      	cmp	r3, #0
 8006408:	d112      	bne.n	8006430 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800640a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800640e:	461a      	mov	r2, r3
 8006410:	2101      	movs	r1, #1
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fe fb8a 	bl	8004b2c <VL53L0X_WrByte>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800641e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800642c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006430:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006434:	4618      	mov	r0, r3
 8006436:	3728      	adds	r7, #40	; 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800643c:	b590      	push	{r4, r7, lr}
 800643e:	b09d      	sub	sp, #116	; 0x74
 8006440:	af06      	add	r7, sp, #24
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006448:	2300      	movs	r3, #0
 800644a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800644e:	23b4      	movs	r3, #180	; 0xb4
 8006450:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006454:	2303      	movs	r3, #3
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006458:	232c      	movs	r3, #44	; 0x2c
 800645a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006468:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800646c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006476:	2306      	movs	r3, #6
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80064a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80064a2:	2300      	movs	r3, #0
 80064a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a6:	e009      	b.n	80064bc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80064b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b8:	3301      	adds	r3, #1
 80064ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80064bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d3f1      	bcc.n	80064a8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80064c4:	2201      	movs	r2, #1
 80064c6:	21ff      	movs	r1, #255	; 0xff
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7fe fb2f 	bl	8004b2c <VL53L0X_WrByte>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80064d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80064dc:	2200      	movs	r2, #0
 80064de:	214f      	movs	r1, #79	; 0x4f
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f7fe fb23 	bl	8004b2c <VL53L0X_WrByte>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80064ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80064f4:	222c      	movs	r2, #44	; 0x2c
 80064f6:	214e      	movs	r1, #78	; 0x4e
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7fe fb17 	bl	8004b2c <VL53L0X_WrByte>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006504:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006508:	2b00      	cmp	r3, #0
 800650a:	d107      	bne.n	800651c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800650c:	2200      	movs	r2, #0
 800650e:	21ff      	movs	r1, #255	; 0xff
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7fe fb0b 	bl	8004b2c <VL53L0X_WrByte>
 8006516:	4603      	mov	r3, r0
 8006518:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800651c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006524:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006528:	461a      	mov	r2, r3
 800652a:	21b6      	movs	r1, #182	; 0xb6
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7fe fafd 	bl	8004b2c <VL53L0X_WrByte>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006538:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800653c:	2b00      	cmp	r3, #0
 800653e:	d107      	bne.n	8006550 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006540:	2200      	movs	r2, #0
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7fe faf1 	bl	8004b2c <VL53L0X_WrByte>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006550:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006558:	f107 0210 	add.w	r2, r7, #16
 800655c:	f107 0111 	add.w	r1, r7, #17
 8006560:	2300      	movs	r3, #0
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fb16 	bl	8006b94 <VL53L0X_perform_ref_calibration>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800656e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006572:	2b00      	cmp	r3, #0
 8006574:	d121      	bne.n	80065ba <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800657a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006584:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006592:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006596:	f107 0218 	add.w	r2, r7, #24
 800659a:	9204      	str	r2, [sp, #16]
 800659c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800659e:	9203      	str	r2, [sp, #12]
 80065a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065a2:	9202      	str	r2, [sp, #8]
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4623      	mov	r3, r4
 80065ac:	4602      	mov	r2, r0
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7ff fe5e 	bl	8006270 <enable_ref_spads>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80065ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d174      	bne.n	80066ac <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80065c6:	f107 0312 	add.w	r3, r7, #18
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff fecb 	bl	8006368 <perform_ref_signal_measurement>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80065d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d161      	bne.n	80066a4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80065e0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80065e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d25d      	bcs.n	80066a4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80065ec:	e009      	b.n	8006602 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80065fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fe:	3301      	adds	r3, #1
 8006600:	64bb      	str	r3, [r7, #72]	; 0x48
 8006602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	429a      	cmp	r2, r3
 8006608:	d3f1      	bcc.n	80065ee <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800660a:	e002      	b.n	8006612 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800660c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660e:	3301      	adds	r3, #1
 8006610:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006612:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006618:	4413      	add	r3, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fdb0 	bl	8006180 <is_aperture>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	429a      	cmp	r2, r3
 800662c:	d3ee      	bcc.n	800660c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800662e:	2301      	movs	r3, #1
 8006630:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006634:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006642:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006646:	f107 0218 	add.w	r2, r7, #24
 800664a:	9204      	str	r2, [sp, #16]
 800664c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800664e:	9203      	str	r2, [sp, #12]
 8006650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006652:	9202      	str	r2, [sp, #8]
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	4623      	mov	r3, r4
 800665c:	4602      	mov	r2, r0
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff fe06 	bl	8006270 <enable_ref_spads>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800666a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800666e:	2b00      	cmp	r3, #0
 8006670:	d11b      	bne.n	80066aa <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006676:	f107 0312 	add.w	r3, r7, #18
 800667a:	4619      	mov	r1, r3
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff fe73 	bl	8006368 <perform_ref_signal_measurement>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006688:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10c      	bne.n	80066aa <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006690:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006692:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006694:	429a      	cmp	r2, r3
 8006696:	d208      	bcs.n	80066aa <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006698:	2301      	movs	r3, #1
 800669a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800669e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80066a2:	e002      	b.n	80066aa <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a8:	e000      	b.n	80066ac <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80066aa:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80066ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f040 80af 	bne.w	8006814 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80066b6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80066b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f240 80aa 	bls.w	8006814 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80066c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80066d0:	f107 031c 	add.w	r3, r7, #28
 80066d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d6:	4618      	mov	r0, r3
 80066d8:	f002 f8a0 	bl	800881c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80066dc:	8a7b      	ldrh	r3, [r7, #18]
 80066de:	461a      	mov	r2, r3
 80066e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bfb8      	it	lt
 80066e8:	425b      	neglt	r3, r3
 80066ea:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80066f2:	e086      	b.n	8006802 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80066fa:	f107 0314 	add.w	r3, r7, #20
 80066fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006702:	f7ff fcdf 	bl	80060c4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d103      	bne.n	8006716 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800670e:	23ce      	movs	r3, #206	; 0xce
 8006710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006714:	e07e      	b.n	8006814 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006716:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fd2e 	bl	8006180 <is_aperture>
 8006724:	4603      	mov	r3, r0
 8006726:	461a      	mov	r2, r3
 8006728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006734:	e06e      	b.n	8006814 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006738:	3301      	adds	r3, #1
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fd32 	bl	80061b4 <enable_spad_bit>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006756:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10c      	bne.n	8006778 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800675e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006760:	3301      	adds	r3, #1
 8006762:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800676a:	4619      	mov	r1, r3
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff fd59 	bl	8006224 <set_ref_spad_map>
 8006772:	4603      	mov	r3, r0
 8006774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006778:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800677c:	2b00      	cmp	r3, #0
 800677e:	d146      	bne.n	800680e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006780:	f107 0312 	add.w	r3, r7, #18
 8006784:	4619      	mov	r1, r3
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fdee 	bl	8006368 <perform_ref_signal_measurement>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006792:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006796:	2b00      	cmp	r3, #0
 8006798:	d13b      	bne.n	8006812 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800679a:	8a7b      	ldrh	r3, [r7, #18]
 800679c:	461a      	mov	r2, r3
 800679e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bfb8      	it	lt
 80067a6:	425b      	neglt	r3, r3
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80067aa:	8a7b      	ldrh	r3, [r7, #18]
 80067ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d21c      	bcs.n	80067ec <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80067b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d914      	bls.n	80067e4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80067ba:	f107 031c 	add.w	r3, r7, #28
 80067be:	4619      	mov	r1, r3
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff fd2f 	bl	8006224 <set_ref_spad_map>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80067d2:	f107 011c 	add.w	r1, r7, #28
 80067d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d8:	4618      	mov	r0, r3
 80067da:	f002 f81f 	bl	800881c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80067de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e0:	3b01      	subs	r3, #1
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ea:	e00a      	b.n	8006802 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80067f6:	f107 031c 	add.w	r3, r7, #28
 80067fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067fc:	4618      	mov	r0, r3
 80067fe:	f002 f80d 	bl	800881c <memcpy>
		while (!complete) {
 8006802:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006806:	2b00      	cmp	r3, #0
 8006808:	f43f af74 	beq.w	80066f4 <VL53L0X_perform_ref_spad_management+0x2b8>
 800680c:	e002      	b.n	8006814 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006812:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006814:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006818:	2b00      	cmp	r3, #0
 800681a:	d115      	bne.n	8006848 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006820:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006828:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006848:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800684c:	4618      	mov	r0, r3
 800684e:	375c      	adds	r7, #92	; 0x5c
 8006850:	46bd      	mov	sp, r7
 8006852:	bd90      	pop	{r4, r7, pc}

08006854 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	b2db      	uxtb	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	2100      	movs	r1, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7fe f957 	bl	8004b2c <VL53L0X_WrByte>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d104      	bne.n	8006894 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f9bf 	bl	8006c0e <VL53L0X_measurement_poll_for_completion>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff fb5a 	bl	8005f58 <VL53L0X_ClearInterruptMask>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80068a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80068b0:	2200      	movs	r2, #0
 80068b2:	2100      	movs	r1, #0
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fe f939 	bl	8004b2c <VL53L0X_WrByte>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]

	return Status;
 80068be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	4608      	mov	r0, r1
 80068d4:	4611      	mov	r1, r2
 80068d6:	461a      	mov	r2, r3
 80068d8:	4603      	mov	r3, r0
 80068da:	70fb      	strb	r3, [r7, #3]
 80068dc:	460b      	mov	r3, r1
 80068de:	70bb      	strb	r3, [r7, #2]
 80068e0:	4613      	mov	r3, r2
 80068e2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80068ec:	2201      	movs	r2, #1
 80068ee:	21ff      	movs	r1, #255	; 0xff
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fe f91b 	bl	8004b2c <VL53L0X_WrByte>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461a      	mov	r2, r3
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006900:	2200      	movs	r2, #0
 8006902:	2100      	movs	r1, #0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7fe f911 	bl	8004b2c <VL53L0X_WrByte>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	4313      	orrs	r3, r2
 8006912:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006914:	2200      	movs	r2, #0
 8006916:	21ff      	movs	r1, #255	; 0xff
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe f907 	bl	8004b2c <VL53L0X_WrByte>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	4313      	orrs	r3, r2
 8006926:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01e      	beq.n	800696c <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800692e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	21cb      	movs	r1, #203	; 0xcb
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fe f978 	bl	8004c30 <VL53L0X_RdByte>
 8006940:	4603      	mov	r3, r0
 8006942:	461a      	mov	r2, r3
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	4313      	orrs	r3, r2
 8006948:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800694a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02a      	beq.n	80069a8 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006952:	f107 030e 	add.w	r3, r7, #14
 8006956:	461a      	mov	r2, r3
 8006958:	21ee      	movs	r1, #238	; 0xee
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fe f968 	bl	8004c30 <VL53L0X_RdByte>
 8006960:	4603      	mov	r3, r0
 8006962:	461a      	mov	r2, r3
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	4313      	orrs	r3, r2
 8006968:	73fb      	strb	r3, [r7, #15]
 800696a:	e01d      	b.n	80069a8 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800696c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006974:	78bb      	ldrb	r3, [r7, #2]
 8006976:	461a      	mov	r2, r3
 8006978:	21cb      	movs	r1, #203	; 0xcb
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fe f8d6 	bl	8004b2c <VL53L0X_WrByte>
 8006980:	4603      	mov	r3, r0
 8006982:	461a      	mov	r2, r3
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	4313      	orrs	r3, r2
 8006988:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800698a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006992:	787b      	ldrb	r3, [r7, #1]
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	21ee      	movs	r1, #238	; 0xee
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fe f915 	bl	8004bc8 <VL53L0X_UpdateByte>
 800699e:	4603      	mov	r3, r0
 80069a0:	461a      	mov	r2, r3
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80069a8:	2201      	movs	r2, #1
 80069aa:	21ff      	movs	r1, #255	; 0xff
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fe f8bd 	bl	8004b2c <VL53L0X_WrByte>
 80069b2:	4603      	mov	r3, r0
 80069b4:	461a      	mov	r2, r3
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80069bc:	2201      	movs	r2, #1
 80069be:	2100      	movs	r1, #0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fe f8b3 	bl	8004b2c <VL53L0X_WrByte>
 80069c6:	4603      	mov	r3, r0
 80069c8:	461a      	mov	r2, r3
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80069d0:	2200      	movs	r2, #0
 80069d2:	21ff      	movs	r1, #255	; 0xff
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fe f8a9 	bl	8004b2c <VL53L0X_WrByte>
 80069da:	4603      	mov	r3, r0
 80069dc:	461a      	mov	r2, r3
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	f023 0310 	bic.w	r3, r3, #16
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	701a      	strb	r2, [r3, #0]

	return Status;
 80069f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af04      	add	r7, sp, #16
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	4611      	mov	r1, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	71fb      	strb	r3, [r7, #7]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006a26:	79bb      	ldrb	r3, [r7, #6]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006a32:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006a34:	2201      	movs	r2, #1
 8006a36:	2101      	movs	r1, #1
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7fe f877 	bl	8004b2c <VL53L0X_WrByte>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d105      	bne.n	8006a56 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006a4a:	2140      	movs	r1, #64	; 0x40
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff ff01 	bl	8006854 <VL53L0X_perform_single_ref_calibration>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d115      	bne.n	8006a8a <VL53L0X_perform_vhv_calibration+0x8e>
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d112      	bne.n	8006a8a <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006a64:	7d39      	ldrb	r1, [r7, #20]
 8006a66:	7d7a      	ldrb	r2, [r7, #21]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9303      	str	r3, [sp, #12]
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	9302      	str	r3, [sp, #8]
 8006a70:	f107 0313 	add.w	r3, r7, #19
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff ff23 	bl	80068ca <VL53L0X_ref_calibration_io>
 8006a84:	4603      	mov	r3, r0
 8006a86:	75fb      	strb	r3, [r7, #23]
 8006a88:	e002      	b.n	8006a90 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006a90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d112      	bne.n	8006abe <VL53L0X_perform_vhv_calibration+0xc2>
 8006a98:	79bb      	ldrb	r3, [r7, #6]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00f      	beq.n	8006abe <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006a9e:	7dbb      	ldrb	r3, [r7, #22]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7fe f841 	bl	8004b2c <VL53L0X_WrByte>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	7dba      	ldrb	r2, [r7, #22]
 8006aba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08a      	sub	sp, #40	; 0x28
 8006ace:	af04      	add	r7, sp, #16
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	460b      	mov	r3, r1
 8006ada:	71fb      	strb	r3, [r7, #7]
 8006adc:	4613      	mov	r3, r2
 8006ade:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006af0:	79bb      	ldrb	r3, [r7, #6]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006afc:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006afe:	2202      	movs	r2, #2
 8006b00:	2101      	movs	r1, #1
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7fe f812 	bl	8004b2c <VL53L0X_WrByte>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006b14:	2100      	movs	r1, #0
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff fe9c 	bl	8006854 <VL53L0X_perform_single_ref_calibration>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d115      	bne.n	8006b54 <VL53L0X_perform_phase_calibration+0x8a>
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d112      	bne.n	8006b54 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006b2e:	7d39      	ldrb	r1, [r7, #20]
 8006b30:	7d7a      	ldrb	r2, [r7, #21]
 8006b32:	2301      	movs	r3, #1
 8006b34:	9303      	str	r3, [sp, #12]
 8006b36:	2300      	movs	r3, #0
 8006b38:	9302      	str	r3, [sp, #8]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	f107 0313 	add.w	r3, r7, #19
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	460b      	mov	r3, r1
 8006b46:	2101      	movs	r1, #1
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7ff febe 	bl	80068ca <VL53L0X_ref_calibration_io>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75fb      	strb	r3, [r7, #23]
 8006b52:	e002      	b.n	8006b5a <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d112      	bne.n	8006b88 <VL53L0X_perform_phase_calibration+0xbe>
 8006b62:	79bb      	ldrb	r3, [r7, #6]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00f      	beq.n	8006b88 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006b68:	7dbb      	ldrb	r3, [r7, #22]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7fd ffdc 	bl	8004b2c <VL53L0X_WrByte>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	7dba      	ldrb	r2, [r7, #22]
 8006b84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006bb0:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff ff1f 	bl	80069fc <VL53L0X_perform_vhv_calibration>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d107      	bne.n	8006bda <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006bca:	78fa      	ldrb	r2, [r7, #3]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7ff ff7a 	bl	8006aca <VL53L0X_perform_phase_calibration>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10f      	bne.n	8006c02 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006be2:	7dbb      	ldrb	r3, [r7, #22]
 8006be4:	461a      	mov	r2, r3
 8006be6:	2101      	movs	r1, #1
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7fd ff9f 	bl	8004b2c <VL53L0X_WrByte>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d103      	bne.n	8006c02 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	7dba      	ldrb	r2, [r7, #22]
 8006bfe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006c22:	f107 030f 	add.w	r3, r7, #15
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7fe ffcb 	bl	8005bc4 <VL53L0X_GetMeasurementDataReady>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d110      	bne.n	8006c5c <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d00f      	beq.n	8006c60 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3301      	adds	r3, #1
 8006c44:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006c4c:	d302      	bcc.n	8006c54 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006c4e:	23f9      	movs	r3, #249	; 0xf9
 8006c50:	75fb      	strb	r3, [r7, #23]
			break;
 8006c52:	e006      	b.n	8006c62 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fe f889 	bl	8004d6c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006c5a:	e7e2      	b.n	8006c22 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006c60:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	4603      	mov	r3, r0
 8006c76:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cca:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006ccc:	e002      	b.n	8006cd4 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	089b      	lsrs	r3, r3, #2
 8006cd2:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d8f8      	bhi.n	8006cce <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8006cdc:	e017      	b.n	8006d0e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d30b      	bcc.n	8006d02 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4413      	add	r3, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e002      	b.n	8006d08 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e4      	bne.n	8006cde <VL53L0X_isqrt+0x24>
	}

	return res;
 8006d14:	68fb      	ldr	r3, [r7, #12]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <VL53L0X_calc_macro_period_ps>:
	return Status;
}


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b087      	sub	sp, #28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006d2e:	f240 6277 	movw	r2, #1655	; 0x677
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8006d3a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006d3e:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	fb02 f303 	mul.w	r3, r2, r3
 8006d4e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006d50:	68bb      	ldr	r3, [r7, #8]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d017      	beq.n	8006da8 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006d7e:	e005      	b.n	8006d8c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006d86:	89fb      	ldrh	r3, [r7, #14]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f4      	bne.n	8006d80 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006d96:	89fb      	ldrh	r3, [r7, #14]
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006da4:	4413      	add	r3, r2
 8006da6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006da8:	8afb      	ldrh	r3, [r7, #22]

}
 8006daa:	4618      	mov	r0, r3
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006dc8:	88fa      	ldrh	r2, [r7, #6]
 8006dca:	0a12      	lsrs	r2, r2, #8
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff ff91 	bl	8006d22 <VL53L0X_calc_macro_period_ps>
 8006e00:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e08:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <VL53L0X_calc_timeout_mclks+0x50>)
 8006e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0e:	099b      	lsrs	r3, r3, #6
 8006e10:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e18:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	441a      	add	r2, r3
	timeout_period_mclks =
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e28:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	10624dd3 	.word	0x10624dd3

08006e38 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	807b      	strh	r3, [r7, #2]
 8006e44:	4613      	mov	r3, r2
 8006e46:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006e4c:	787b      	ldrb	r3, [r7, #1]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff ff66 	bl	8006d22 <VL53L0X_calc_macro_period_ps>
 8006e56:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e5e:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <VL53L0X_calc_timeout_us+0x50>)
 8006e60:	fba2 2303 	umull	r2, r3, r2, r3
 8006e64:	099b      	lsrs	r3, r3, #6
 8006e66:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006e68:	887b      	ldrh	r3, [r7, #2]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	fb02 f303 	mul.w	r3, r2, r3
 8006e70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006e74:	4a04      	ldr	r2, [pc, #16]	; (8006e88 <VL53L0X_calc_timeout_us+0x50>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	099b      	lsrs	r3, r3, #6
 8006e7c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006e7e:	697b      	ldr	r3, [r7, #20]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	10624dd3 	.word	0x10624dd3

08006e8c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08c      	sub	sp, #48	; 0x30
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	460b      	mov	r3, r1
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006eb2:	7afb      	ldrb	r3, [r7, #11]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <get_sequence_step_timeout+0x38>
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d002      	beq.n	8006ec4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006ebe:	7afb      	ldrb	r3, [r7, #11]
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d128      	bne.n	8006f16 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ec4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2100      	movs	r1, #0
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7fe f9f8 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006ed8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006ee0:	f107 0320 	add.w	r3, r7, #32
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2146      	movs	r1, #70	; 0x46
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7fd fea1 	bl	8004c30 <VL53L0X_RdByte>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006ef4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff ff5b 	bl	8006db6 <VL53L0X_decode_timeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006f04:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff ff93 	bl	8006e38 <VL53L0X_calc_timeout_us>
 8006f12:	62b8      	str	r0, [r7, #40]	; 0x28
 8006f14:	e092      	b.n	800703c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	d135      	bne.n	8006f88 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f1c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006f20:	461a      	mov	r2, r3
 8006f22:	2100      	movs	r1, #0
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7fe f9cc 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006f30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 8081 	bne.w	800703c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f3a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006f3e:	461a      	mov	r2, r3
 8006f40:	2100      	movs	r1, #0
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7fe f9bd 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006f4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006f56:	f107 031e 	add.w	r3, r7, #30
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2151      	movs	r1, #81	; 0x51
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f7fd fe90 	bl	8004c84 <VL53L0X_RdWord>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006f6a:	8bfb      	ldrh	r3, [r7, #30]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff ff22 	bl	8006db6 <VL53L0X_decode_timeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006f76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff ff5a 	bl	8006e38 <VL53L0X_calc_timeout_us>
 8006f84:	62b8      	str	r0, [r7, #40]	; 0x28
 8006f86:	e059      	b.n	800703c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d156      	bne.n	800703c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006f8e:	f107 0314 	add.w	r3, r7, #20
 8006f92:	4619      	mov	r1, r3
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7fe f9fd 	bl	8005394 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01d      	beq.n	8006fe0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006fa4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2100      	movs	r1, #0
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7fe f988 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006fb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10f      	bne.n	8006fe0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006fc0:	f107 031e 	add.w	r3, r7, #30
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	2151      	movs	r1, #81	; 0x51
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7fd fe5b 	bl	8004c84 <VL53L0X_RdWord>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006fd4:	8bfb      	ldrh	r3, [r7, #30]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff feed 	bl	8006db6 <VL53L0X_decode_timeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006fe0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006fe8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006fec:	461a      	mov	r2, r3
 8006fee:	2101      	movs	r1, #1
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7fe f966 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006ffc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10f      	bne.n	8007024 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007004:	f107 031c 	add.w	r3, r7, #28
 8007008:	461a      	mov	r2, r3
 800700a:	2171      	movs	r1, #113	; 0x71
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7fd fe39 	bl	8004c84 <VL53L0X_RdWord>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007018:	8bbb      	ldrh	r3, [r7, #28]
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff fecb 	bl	8006db6 <VL53L0X_decode_timeout>
 8007020:	4603      	mov	r3, r0
 8007022:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007024:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800702c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007032:	4619      	mov	r1, r3
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff feff 	bl	8006e38 <VL53L0X_calc_timeout_us>
 800703a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007040:	601a      	str	r2, [r3, #0]

	return Status;
 8007042:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007046:	4618      	mov	r0, r3
 8007048:	3730      	adds	r7, #48	; 0x30
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b08a      	sub	sp, #40	; 0x28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	460b      	mov	r3, r1
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800705c:	2300      	movs	r3, #0
 800705e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <set_sequence_step_timeout+0x26>
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d002      	beq.n	8007074 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d138      	bne.n	80070e6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007074:	f107 031b 	add.w	r3, r7, #27
 8007078:	461a      	mov	r2, r3
 800707a:	2100      	movs	r1, #0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7fe f920 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800708c:	2b00      	cmp	r3, #0
 800708e:	d11a      	bne.n	80070c6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007090:	7efb      	ldrb	r3, [r7, #27]
 8007092:	461a      	mov	r2, r3
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f7ff fea4 	bl	8006de4 <VL53L0X_calc_timeout_mclks>
 800709c:	4603      	mov	r3, r0
 800709e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80070a0:	8bbb      	ldrh	r3, [r7, #28]
 80070a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a6:	d903      	bls.n	80070b0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80070a8:	23ff      	movs	r3, #255	; 0xff
 80070aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070ae:	e004      	b.n	80070ba <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80070b0:	8bbb      	ldrh	r3, [r7, #28]
 80070b2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80070b4:	3b01      	subs	r3, #1
 80070b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80070c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 80ab 	bne.w	8007226 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80070d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070d4:	461a      	mov	r2, r3
 80070d6:	2146      	movs	r1, #70	; 0x46
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f7fd fd27 	bl	8004b2c <VL53L0X_WrByte>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80070e4:	e09f      	b.n	8007226 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80070e6:	7afb      	ldrb	r3, [r7, #11]
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d135      	bne.n	8007158 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80070ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11b      	bne.n	800712c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80070f4:	f107 031b 	add.w	r3, r7, #27
 80070f8:	461a      	mov	r2, r3
 80070fa:	2100      	movs	r1, #0
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7fe f8e0 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 8007102:	4603      	mov	r3, r0
 8007104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007108:	7efb      	ldrb	r3, [r7, #27]
 800710a:	461a      	mov	r2, r3
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f7ff fe68 	bl	8006de4 <VL53L0X_calc_timeout_mclks>
 8007114:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007116:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fe1f 	bl	8006d5e <VL53L0X_encode_timeout>
 8007120:	4603      	mov	r3, r0
 8007122:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007124:	8b3a      	ldrh	r2, [r7, #24]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800712c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007130:	2b00      	cmp	r3, #0
 8007132:	d108      	bne.n	8007146 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007134:	8b3b      	ldrh	r3, [r7, #24]
 8007136:	461a      	mov	r2, r3
 8007138:	2151      	movs	r1, #81	; 0x51
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7fd fd1a 	bl	8004b74 <VL53L0X_WrWord>
 8007140:	4603      	mov	r3, r0
 8007142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007146:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800714a:	2b00      	cmp	r3, #0
 800714c:	d16b      	bne.n	8007226 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007156:	e066      	b.n	8007226 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	2b04      	cmp	r3, #4
 800715c:	d160      	bne.n	8007220 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800715e:	f107 0310 	add.w	r3, r7, #16
 8007162:	4619      	mov	r1, r3
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f7fe f915 	bl	8005394 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800716e:	7cfb      	ldrb	r3, [r7, #19]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01d      	beq.n	80071b0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007174:	f107 031b 	add.w	r3, r7, #27
 8007178:	461a      	mov	r2, r3
 800717a:	2100      	movs	r1, #0
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f7fe f8a0 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10f      	bne.n	80071b0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007190:	f107 0318 	add.w	r3, r7, #24
 8007194:	461a      	mov	r2, r3
 8007196:	2151      	movs	r1, #81	; 0x51
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7fd fd73 	bl	8004c84 <VL53L0X_RdWord>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80071a4:	8b3b      	ldrh	r3, [r7, #24]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fe05 	bl	8006db6 <VL53L0X_decode_timeout>
 80071ac:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80071ae:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80071b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d109      	bne.n	80071cc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80071b8:	f107 031b 	add.w	r3, r7, #27
 80071bc:	461a      	mov	r2, r3
 80071be:	2101      	movs	r1, #1
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7fe f87e 	bl	80052c2 <VL53L0X_GetVcselPulsePeriod>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80071cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d128      	bne.n	8007226 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80071d4:	7efb      	ldrb	r3, [r7, #27]
 80071d6:	461a      	mov	r2, r3
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fe02 	bl	8006de4 <VL53L0X_calc_timeout_mclks>
 80071e0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80071e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	4413      	add	r3, r2
 80071e8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80071ea:	6a38      	ldr	r0, [r7, #32]
 80071ec:	f7ff fdb7 	bl	8006d5e <VL53L0X_encode_timeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80071f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d108      	bne.n	800720e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80071fc:	8bfb      	ldrh	r3, [r7, #30]
 80071fe:	461a      	mov	r2, r3
 8007200:	2171      	movs	r1, #113	; 0x71
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7fd fcb6 	bl	8004b74 <VL53L0X_WrWord>
 8007208:	4603      	mov	r3, r0
 800720a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800720e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007212:	2b00      	cmp	r3, #0
 8007214:	d107      	bne.n	8007226 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800721e:	e002      	b.n	8007226 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007220:	23fc      	movs	r3, #252	; 0xfc
 8007222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007226:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800722a:	4618      	mov	r0, r3
 800722c:	3728      	adds	r7, #40	; 0x28
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b08a      	sub	sp, #40	; 0x28
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
 800723e:	4613      	mov	r3, r2
 8007240:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007242:	2300      	movs	r3, #0
 8007244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8007248:	230c      	movs	r3, #12
 800724a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800724e:	2312      	movs	r3, #18
 8007250:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8007254:	2308      	movs	r3, #8
 8007256:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800725a:	230e      	movs	r3, #14
 800725c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007264:	78bb      	ldrb	r3, [r7, #2]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007270:	23fc      	movs	r3, #252	; 0xfc
 8007272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007276:	e020      	b.n	80072ba <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10d      	bne.n	800729a <VL53L0X_set_vcsel_pulse_period+0x68>
 800727e:	78ba      	ldrb	r2, [r7, #2]
 8007280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007284:	429a      	cmp	r2, r3
 8007286:	d304      	bcc.n	8007292 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8007288:	78ba      	ldrb	r2, [r7, #2]
 800728a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800728e:	429a      	cmp	r2, r3
 8007290:	d903      	bls.n	800729a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007292:	23fc      	movs	r3, #252	; 0xfc
 8007294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007298:	e00f      	b.n	80072ba <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d10c      	bne.n	80072ba <VL53L0X_set_vcsel_pulse_period+0x88>
 80072a0:	78ba      	ldrb	r2, [r7, #2]
 80072a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d304      	bcc.n	80072b4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80072aa:	78ba      	ldrb	r2, [r7, #2]
 80072ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d902      	bls.n	80072ba <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072b4:	23fc      	movs	r3, #252	; 0xfc
 80072b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80072ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80072c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80072c6:	e239      	b.n	800773c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d150      	bne.n	8007370 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80072ce:	78bb      	ldrb	r3, [r7, #2]
 80072d0:	2b0c      	cmp	r3, #12
 80072d2:	d110      	bne.n	80072f6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80072d4:	2218      	movs	r2, #24
 80072d6:	2157      	movs	r1, #87	; 0x57
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7fd fc27 	bl	8004b2c <VL53L0X_WrByte>
 80072de:	4603      	mov	r3, r0
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80072e4:	2208      	movs	r2, #8
 80072e6:	2156      	movs	r1, #86	; 0x56
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7fd fc1f 	bl	8004b2c <VL53L0X_WrByte>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072f4:	e17f      	b.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80072f6:	78bb      	ldrb	r3, [r7, #2]
 80072f8:	2b0e      	cmp	r3, #14
 80072fa:	d110      	bne.n	800731e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80072fc:	2230      	movs	r2, #48	; 0x30
 80072fe:	2157      	movs	r1, #87	; 0x57
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fd fc13 	bl	8004b2c <VL53L0X_WrByte>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800730c:	2208      	movs	r2, #8
 800730e:	2156      	movs	r1, #86	; 0x56
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7fd fc0b 	bl	8004b2c <VL53L0X_WrByte>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800731c:	e16b      	b.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800731e:	78bb      	ldrb	r3, [r7, #2]
 8007320:	2b10      	cmp	r3, #16
 8007322:	d110      	bne.n	8007346 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8007324:	2240      	movs	r2, #64	; 0x40
 8007326:	2157      	movs	r1, #87	; 0x57
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7fd fbff 	bl	8004b2c <VL53L0X_WrByte>
 800732e:	4603      	mov	r3, r0
 8007330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8007334:	2208      	movs	r2, #8
 8007336:	2156      	movs	r1, #86	; 0x56
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fd fbf7 	bl	8004b2c <VL53L0X_WrByte>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007344:	e157      	b.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007346:	78bb      	ldrb	r3, [r7, #2]
 8007348:	2b12      	cmp	r3, #18
 800734a:	f040 8154 	bne.w	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800734e:	2250      	movs	r2, #80	; 0x50
 8007350:	2157      	movs	r1, #87	; 0x57
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fd fbea 	bl	8004b2c <VL53L0X_WrByte>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800735e:	2208      	movs	r2, #8
 8007360:	2156      	movs	r1, #86	; 0x56
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fd fbe2 	bl	8004b2c <VL53L0X_WrByte>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800736e:	e142      	b.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	2b01      	cmp	r3, #1
 8007374:	f040 813f 	bne.w	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007378:	78bb      	ldrb	r3, [r7, #2]
 800737a:	2b08      	cmp	r3, #8
 800737c:	d14c      	bne.n	8007418 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800737e:	2210      	movs	r2, #16
 8007380:	2148      	movs	r1, #72	; 0x48
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fd fbd2 	bl	8004b2c <VL53L0X_WrByte>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800738e:	2208      	movs	r2, #8
 8007390:	2147      	movs	r1, #71	; 0x47
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fd fbca 	bl	8004b2c <VL53L0X_WrByte>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800739e:	2202      	movs	r2, #2
 80073a0:	2132      	movs	r1, #50	; 0x32
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fd fbc2 	bl	8004b2c <VL53L0X_WrByte>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461a      	mov	r2, r3
 80073ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80073b6:	220c      	movs	r2, #12
 80073b8:	2130      	movs	r1, #48	; 0x30
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fd fbb6 	bl	8004b2c <VL53L0X_WrByte>
 80073c0:	4603      	mov	r3, r0
 80073c2:	461a      	mov	r2, r3
 80073c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80073ce:	2201      	movs	r2, #1
 80073d0:	21ff      	movs	r1, #255	; 0xff
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fd fbaa 	bl	8004b2c <VL53L0X_WrByte>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80073e6:	2230      	movs	r2, #48	; 0x30
 80073e8:	2130      	movs	r1, #48	; 0x30
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fd fb9e 	bl	8004b2c <VL53L0X_WrByte>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80073fe:	2200      	movs	r2, #0
 8007400:	21ff      	movs	r1, #255	; 0xff
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fd fb92 	bl	8004b2c <VL53L0X_WrByte>
 8007408:	4603      	mov	r3, r0
 800740a:	461a      	mov	r2, r3
 800740c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007410:	4313      	orrs	r3, r2
 8007412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007416:	e0ee      	b.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007418:	78bb      	ldrb	r3, [r7, #2]
 800741a:	2b0a      	cmp	r3, #10
 800741c:	d14c      	bne.n	80074b8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800741e:	2228      	movs	r2, #40	; 0x28
 8007420:	2148      	movs	r1, #72	; 0x48
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fd fb82 	bl	8004b2c <VL53L0X_WrByte>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800742e:	2208      	movs	r2, #8
 8007430:	2147      	movs	r1, #71	; 0x47
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fd fb7a 	bl	8004b2c <VL53L0X_WrByte>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800743e:	2203      	movs	r2, #3
 8007440:	2132      	movs	r1, #50	; 0x32
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fd fb72 	bl	8004b2c <VL53L0X_WrByte>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007450:	4313      	orrs	r3, r2
 8007452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007456:	2209      	movs	r2, #9
 8007458:	2130      	movs	r1, #48	; 0x30
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fd fb66 	bl	8004b2c <VL53L0X_WrByte>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007468:	4313      	orrs	r3, r2
 800746a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800746e:	2201      	movs	r2, #1
 8007470:	21ff      	movs	r1, #255	; 0xff
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fd fb5a 	bl	8004b2c <VL53L0X_WrByte>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007480:	4313      	orrs	r3, r2
 8007482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007486:	2220      	movs	r2, #32
 8007488:	2130      	movs	r1, #48	; 0x30
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fd fb4e 	bl	8004b2c <VL53L0X_WrByte>
 8007490:	4603      	mov	r3, r0
 8007492:	461a      	mov	r2, r3
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007498:	4313      	orrs	r3, r2
 800749a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800749e:	2200      	movs	r2, #0
 80074a0:	21ff      	movs	r1, #255	; 0xff
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fd fb42 	bl	8004b2c <VL53L0X_WrByte>
 80074a8:	4603      	mov	r3, r0
 80074aa:	461a      	mov	r2, r3
 80074ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074b6:	e09e      	b.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80074b8:	78bb      	ldrb	r3, [r7, #2]
 80074ba:	2b0c      	cmp	r3, #12
 80074bc:	d14c      	bne.n	8007558 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80074be:	2238      	movs	r2, #56	; 0x38
 80074c0:	2148      	movs	r1, #72	; 0x48
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fd fb32 	bl	8004b2c <VL53L0X_WrByte>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80074ce:	2208      	movs	r2, #8
 80074d0:	2147      	movs	r1, #71	; 0x47
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fd fb2a 	bl	8004b2c <VL53L0X_WrByte>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80074de:	2203      	movs	r2, #3
 80074e0:	2132      	movs	r1, #50	; 0x32
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fd fb22 	bl	8004b2c <VL53L0X_WrByte>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461a      	mov	r2, r3
 80074ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80074f6:	2208      	movs	r2, #8
 80074f8:	2130      	movs	r1, #48	; 0x30
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fd fb16 	bl	8004b2c <VL53L0X_WrByte>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007508:	4313      	orrs	r3, r2
 800750a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800750e:	2201      	movs	r2, #1
 8007510:	21ff      	movs	r1, #255	; 0xff
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fd fb0a 	bl	8004b2c <VL53L0X_WrByte>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007520:	4313      	orrs	r3, r2
 8007522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007526:	2220      	movs	r2, #32
 8007528:	2130      	movs	r1, #48	; 0x30
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fd fafe 	bl	8004b2c <VL53L0X_WrByte>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007538:	4313      	orrs	r3, r2
 800753a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800753e:	2200      	movs	r2, #0
 8007540:	21ff      	movs	r1, #255	; 0xff
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fd faf2 	bl	8004b2c <VL53L0X_WrByte>
 8007548:	4603      	mov	r3, r0
 800754a:	461a      	mov	r2, r3
 800754c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007550:	4313      	orrs	r3, r2
 8007552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007556:	e04e      	b.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007558:	78bb      	ldrb	r3, [r7, #2]
 800755a:	2b0e      	cmp	r3, #14
 800755c:	d14b      	bne.n	80075f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800755e:	2248      	movs	r2, #72	; 0x48
 8007560:	2148      	movs	r1, #72	; 0x48
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fd fae2 	bl	8004b2c <VL53L0X_WrByte>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800756e:	2208      	movs	r2, #8
 8007570:	2147      	movs	r1, #71	; 0x47
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fd fada 	bl	8004b2c <VL53L0X_WrByte>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800757e:	2203      	movs	r2, #3
 8007580:	2132      	movs	r1, #50	; 0x32
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fd fad2 	bl	8004b2c <VL53L0X_WrByte>
 8007588:	4603      	mov	r3, r0
 800758a:	461a      	mov	r2, r3
 800758c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007590:	4313      	orrs	r3, r2
 8007592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007596:	2207      	movs	r2, #7
 8007598:	2130      	movs	r1, #48	; 0x30
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7fd fac6 	bl	8004b2c <VL53L0X_WrByte>
 80075a0:	4603      	mov	r3, r0
 80075a2:	461a      	mov	r2, r3
 80075a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80075ae:	2201      	movs	r2, #1
 80075b0:	21ff      	movs	r1, #255	; 0xff
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fd faba 	bl	8004b2c <VL53L0X_WrByte>
 80075b8:	4603      	mov	r3, r0
 80075ba:	461a      	mov	r2, r3
 80075bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80075c6:	2220      	movs	r2, #32
 80075c8:	2130      	movs	r1, #48	; 0x30
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fd faae 	bl	8004b2c <VL53L0X_WrByte>
 80075d0:	4603      	mov	r3, r0
 80075d2:	461a      	mov	r2, r3
 80075d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d8:	4313      	orrs	r3, r2
 80075da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80075de:	2200      	movs	r2, #0
 80075e0:	21ff      	movs	r1, #255	; 0xff
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fd faa2 	bl	8004b2c <VL53L0X_WrByte>
 80075e8:	4603      	mov	r3, r0
 80075ea:	461a      	mov	r2, r3
 80075ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80075f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d17f      	bne.n	80076fe <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80075fe:	78bb      	ldrb	r3, [r7, #2]
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fb47 	bl	8006c94 <VL53L0X_encode_vcsel_period>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007612:	2b01      	cmp	r3, #1
 8007614:	d045      	beq.n	80076a2 <VL53L0X_set_vcsel_pulse_period+0x470>
 8007616:	e06e      	b.n	80076f6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	461a      	mov	r2, r3
 800761e:	2103      	movs	r1, #3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fc33 	bl	8006e8c <get_sequence_step_timeout>
 8007626:	4603      	mov	r3, r0
 8007628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800762c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007630:	2b00      	cmp	r3, #0
 8007632:	d109      	bne.n	8007648 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007634:	f107 0310 	add.w	r3, r7, #16
 8007638:	461a      	mov	r2, r3
 800763a:	2102      	movs	r1, #2
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fc25 	bl	8006e8c <get_sequence_step_timeout>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007648:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800764c:	2b00      	cmp	r3, #0
 800764e:	d109      	bne.n	8007664 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007650:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007654:	461a      	mov	r2, r3
 8007656:	2150      	movs	r1, #80	; 0x50
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7fd fa67 	bl	8004b2c <VL53L0X_WrByte>
 800765e:	4603      	mov	r3, r0
 8007660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007664:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007668:	2b00      	cmp	r3, #0
 800766a:	d108      	bne.n	800767e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	461a      	mov	r2, r3
 8007670:	2103      	movs	r1, #3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff fceb 	bl	800704e <set_sequence_step_timeout>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800767e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007682:	2b00      	cmp	r3, #0
 8007684:	d108      	bne.n	8007698 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	461a      	mov	r2, r3
 800768a:	2102      	movs	r1, #2
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff fcde 	bl	800704e <set_sequence_step_timeout>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	78ba      	ldrb	r2, [r7, #2]
 800769c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80076a0:	e02e      	b.n	8007700 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80076a2:	f107 0318 	add.w	r3, r7, #24
 80076a6:	461a      	mov	r2, r3
 80076a8:	2104      	movs	r1, #4
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff fbee 	bl	8006e8c <get_sequence_step_timeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80076b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80076be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076c2:	461a      	mov	r2, r3
 80076c4:	2170      	movs	r1, #112	; 0x70
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fd fa30 	bl	8004b2c <VL53L0X_WrByte>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80076d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d108      	bne.n	80076ec <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	461a      	mov	r2, r3
 80076de:	2104      	movs	r1, #4
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff fcb4 	bl	800704e <set_sequence_step_timeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	78ba      	ldrb	r2, [r7, #2]
 80076f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80076f4:	e004      	b.n	8007700 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076f6:	23fc      	movs	r3, #252	; 0xfc
 80076f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076fc:	e000      	b.n	8007700 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80076fe:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007700:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007704:	2b00      	cmp	r3, #0
 8007706:	d109      	bne.n	800771c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800770e:	69f9      	ldr	r1, [r7, #28]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fd fd98 	bl	8005246 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007716:	4603      	mov	r3, r0
 8007718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800771c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8007724:	f107 010f 	add.w	r1, r7, #15
 8007728:	2301      	movs	r3, #1
 800772a:	2200      	movs	r2, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff f9cc 	bl	8006aca <VL53L0X_perform_phase_calibration>
 8007732:	4603      	mov	r3, r0
 8007734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007738:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800773c:	4618      	mov	r0, r3
 800773e:	3728      	adds	r7, #40	; 0x28
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	460b      	mov	r3, r1
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007752:	2300      	movs	r3, #0
 8007754:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800775c:	2b01      	cmp	r3, #1
 800775e:	d00a      	beq.n	8007776 <VL53L0X_get_vcsel_pulse_period+0x32>
 8007760:	e013      	b.n	800778a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007762:	f107 0316 	add.w	r3, r7, #22
 8007766:	461a      	mov	r2, r3
 8007768:	2150      	movs	r1, #80	; 0x50
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7fd fa60 	bl	8004c30 <VL53L0X_RdByte>
 8007770:	4603      	mov	r3, r0
 8007772:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007774:	e00b      	b.n	800778e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007776:	f107 0316 	add.w	r3, r7, #22
 800777a:	461a      	mov	r2, r3
 800777c:	2170      	movs	r1, #112	; 0x70
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7fd fa56 	bl	8004c30 <VL53L0X_RdByte>
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007788:	e001      	b.n	800778e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800778a:	23fc      	movs	r3, #252	; 0xfc
 800778c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800778e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d107      	bne.n	80077a6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007796:	7dbb      	ldrb	r3, [r7, #22]
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fa68 	bl	8006c6e <VL53L0X_decode_vcsel_period>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	701a      	strb	r2, [r3, #0]

	return Status;
 80077a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b092      	sub	sp, #72	; 0x48
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80077c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80077c6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80077c8:	f240 7376 	movw	r3, #1910	; 0x776
 80077cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80077ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80077d2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80077d4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80077da:	f240 234e 	movw	r3, #590	; 0x24e
 80077de:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80077e0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80077e6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80077ec:	f240 2326 	movw	r3, #550	; 0x226
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80077f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80077fa:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	429a      	cmp	r2, r3
 8007806:	d205      	bcs.n	8007814 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007808:	23fc      	movs	r3, #252	; 0xfc
 800780a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800780e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007812:	e0aa      	b.n	800796a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007820:	f107 0314 	add.w	r3, r7, #20
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7fd fdb4 	bl	8005394 <VL53L0X_GetSequenceStepEnables>
 800782c:	4603      	mov	r3, r0
 800782e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8007832:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007836:	2b00      	cmp	r3, #0
 8007838:	d15b      	bne.n	80078f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800783a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800783c:	2b00      	cmp	r3, #0
 800783e:	d105      	bne.n	800784c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007840:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007846:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007848:	2b00      	cmp	r3, #0
 800784a:	d052      	beq.n	80078f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800784c:	f107 0310 	add.w	r3, r7, #16
 8007850:	461a      	mov	r2, r3
 8007852:	2102      	movs	r1, #2
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff fb19 	bl	8006e8c <get_sequence_step_timeout>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007860:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007868:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800786c:	e07d      	b.n	800796a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800786e:	7d3b      	ldrb	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00f      	beq.n	8007894 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007874:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007878:	4413      	add	r3, r2
 800787a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007880:	429a      	cmp	r2, r3
 8007882:	d204      	bcs.n	800788e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	643b      	str	r3, [r7, #64]	; 0x40
 800788c:	e002      	b.n	8007894 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800788e:	23fc      	movs	r3, #252	; 0xfc
 8007890:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007894:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800789c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80078a0:	e063      	b.n	800796a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80078a2:	7dbb      	ldrb	r3, [r7, #22]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d011      	beq.n	80078cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	4413      	add	r3, r2
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d204      	bcs.n	80078c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80078ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	643b      	str	r3, [r7, #64]	; 0x40
 80078c2:	e016      	b.n	80078f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078c4:	23fc      	movs	r3, #252	; 0xfc
 80078c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80078ca:	e012      	b.n	80078f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80078cc:	7d7b      	ldrb	r3, [r7, #21]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00f      	beq.n	80078f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078d6:	4413      	add	r3, r2
 80078d8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078de:	429a      	cmp	r2, r3
 80078e0:	d204      	bcs.n	80078ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80078e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	643b      	str	r3, [r7, #64]	; 0x40
 80078ea:	e002      	b.n	80078f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078ec:	23fc      	movs	r3, #252	; 0xfc
 80078ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80078f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80078fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80078fe:	e034      	b.n	800796a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d019      	beq.n	800793a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007906:	f107 030c 	add.w	r3, r7, #12
 800790a:	461a      	mov	r2, r3
 800790c:	2103      	movs	r1, #3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff fabc 	bl	8006e8c <get_sequence_step_timeout>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800791e:	4413      	add	r3, r2
 8007920:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007926:	429a      	cmp	r2, r3
 8007928:	d204      	bcs.n	8007934 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800792a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	643b      	str	r3, [r7, #64]	; 0x40
 8007932:	e002      	b.n	800793a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007934:	23fc      	movs	r3, #252	; 0xfc
 8007936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800793a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800793e:	2b00      	cmp	r3, #0
 8007940:	d111      	bne.n	8007966 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007942:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00e      	beq.n	8007966 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007952:	2104      	movs	r1, #4
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fb7a 	bl	800704e <set_sequence_step_timeout>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007966:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800796a:	4618      	mov	r0, r3
 800796c:	3748      	adds	r7, #72	; 0x48
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b090      	sub	sp, #64	; 0x40
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800797c:	2300      	movs	r3, #0
 800797e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007982:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007986:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007988:	f240 7376 	movw	r3, #1910	; 0x776
 800798c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800798e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007994:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007998:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800799a:	f240 234e 	movw	r3, #590	; 0x24e
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80079a0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80079a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80079ac:	f240 2326 	movw	r3, #550	; 0x226
 80079b0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80079b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ba:	441a      	add	r2, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80079c0:	f107 0318 	add.w	r3, r7, #24
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7fd fce4 	bl	8005394 <VL53L0X_GetSequenceStepEnables>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80079d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80079da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80079de:	e075      	b.n	8007acc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80079e0:	7e3b      	ldrb	r3, [r7, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80079e6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80079ec:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d030      	beq.n	8007a54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80079f2:	f107 0310 	add.w	r3, r7, #16
 80079f6:	461a      	mov	r2, r3
 80079f8:	2102      	movs	r1, #2
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fa46 	bl	8006e8c <get_sequence_step_timeout>
 8007a00:	4603      	mov	r3, r0
 8007a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007a06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d122      	bne.n	8007a54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007a0e:	7e3b      	ldrb	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007a18:	6939      	ldr	r1, [r7, #16]
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a1e:	441a      	add	r2, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007a24:	7ebb      	ldrb	r3, [r7, #26]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007a2e:	6939      	ldr	r1, [r7, #16]
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	440b      	add	r3, r1
 8007a34:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a36:	441a      	add	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e00a      	b.n	8007a54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007a3e:	7e7b      	ldrb	r3, [r7, #25]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007a48:	6939      	ldr	r1, [r7, #16]
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007a4e:	441a      	add	r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d114      	bne.n	8007a86 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007a5c:	7efb      	ldrb	r3, [r7, #27]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d011      	beq.n	8007a86 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	461a      	mov	r2, r3
 8007a68:	2103      	movs	r1, #3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff fa0e 	bl	8006e8c <get_sequence_step_timeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007a7a:	68f9      	ldr	r1, [r7, #12]
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007a80:	441a      	add	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d114      	bne.n	8007ab8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007a8e:	7f3b      	ldrb	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d011      	beq.n	8007ab8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007a94:	f107 0314 	add.w	r3, r7, #20
 8007a98:	461a      	mov	r2, r3
 8007a9a:	2104      	movs	r1, #4
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff f9f5 	bl	8006e8c <get_sequence_step_timeout>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007aac:	6979      	ldr	r1, [r7, #20]
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007ab2:	441a      	add	r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ab8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ac8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3740      	adds	r7, #64	; 0x40
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007ae6:	e0c6      	b.n	8007c76 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4413      	add	r3, r2
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	74fb      	strb	r3, [r7, #19]
		Index++;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	3301      	adds	r3, #1
 8007af6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007af8:	7cfb      	ldrb	r3, [r7, #19]
 8007afa:	2bff      	cmp	r3, #255	; 0xff
 8007afc:	f040 808d 	bne.w	8007c1a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4413      	add	r3, r2
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	747b      	strb	r3, [r7, #17]
			Index++;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007b10:	7c7b      	ldrb	r3, [r7, #17]
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d87e      	bhi.n	8007c14 <VL53L0X_load_tuning_settings+0x140>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <VL53L0X_load_tuning_settings+0x48>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007b67 	.word	0x08007b67
 8007b24:	08007ba1 	.word	0x08007ba1
 8007b28:	08007bdb 	.word	0x08007bdb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	4413      	add	r3, r2
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	743b      	strb	r3, [r7, #16]
				Index++;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4413      	add	r3, r2
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007b4c:	7c3b      	ldrb	r3, [r7, #16]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	4413      	add	r3, r2
 8007b5a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	89ba      	ldrh	r2, [r7, #12]
 8007b60:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007b64:	e087      	b.n	8007c76 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	743b      	strb	r3, [r7, #16]
				Index++;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	3301      	adds	r3, #1
 8007b74:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	3301      	adds	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007b86:	7c3b      	ldrb	r3, [r7, #16]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	4413      	add	r3, r2
 8007b94:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	89ba      	ldrh	r2, [r7, #12]
 8007b9a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8007b9e:	e06a      	b.n	8007c76 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	743b      	strb	r3, [r7, #16]
				Index++;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	3301      	adds	r3, #1
 8007bae:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007bc0:	7c3b      	ldrb	r3, [r7, #16]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	4413      	add	r3, r2
 8007bce:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	89ba      	ldrh	r2, [r7, #12]
 8007bd4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007bd8:	e04d      	b.n	8007c76 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	4413      	add	r3, r2
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	743b      	strb	r3, [r7, #16]
				Index++;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	3301      	adds	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	4413      	add	r3, r2
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007bfa:	7c3b      	ldrb	r3, [r7, #16]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	021b      	lsls	r3, r3, #8
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	4413      	add	r3, r2
 8007c08:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	89ba      	ldrh	r2, [r7, #12]
 8007c0e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8007c12:	e030      	b.n	8007c76 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c14:	23fc      	movs	r3, #252	; 0xfc
 8007c16:	77fb      	strb	r3, [r7, #31]
 8007c18:	e02d      	b.n	8007c76 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007c1a:	7cfb      	ldrb	r3, [r7, #19]
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d828      	bhi.n	8007c72 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	4413      	add	r3, r2
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007c30:	2300      	movs	r3, #0
 8007c32:	61bb      	str	r3, [r7, #24]
 8007c34:	e00f      	b.n	8007c56 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	7819      	ldrb	r1, [r3, #0]
 8007c3e:	f107 0208 	add.w	r2, r7, #8
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	4413      	add	r3, r2
 8007c46:	460a      	mov	r2, r1
 8007c48:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	3301      	adds	r3, #1
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	7cfb      	ldrb	r3, [r7, #19]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	dbeb      	blt.n	8007c36 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007c5e:	7cfb      	ldrb	r3, [r7, #19]
 8007c60:	f107 0208 	add.w	r2, r7, #8
 8007c64:	7cb9      	ldrb	r1, [r7, #18]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fc ff04 	bl	8004a74 <VL53L0X_WriteMulti>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e001      	b.n	8007c76 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c72:	23fc      	movs	r3, #252	; 0xfc
 8007c74:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <VL53L0X_load_tuning_settings+0x1b8>
 8007c82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f43f af2e 	beq.w	8007ae8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3720      	adds	r7, #32
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007cae:	f107 0313 	add.w	r3, r7, #19
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7fd fbf9 	bl	80054ac <VL53L0X_GetXTalkCompensationEnable>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007cbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d111      	bne.n	8007cea <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007cc6:	7cfb      	ldrb	r3, [r7, #19]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00e      	beq.n	8007cea <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	8a9b      	ldrh	r3, [r3, #20]
 8007cd6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	3380      	adds	r3, #128	; 0x80
 8007ce4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007cea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007d0e:	f107 0310 	add.w	r3, r7, #16
 8007d12:	461a      	mov	r2, r3
 8007d14:	68b9      	ldr	r1, [r7, #8]
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff ffbe 	bl	8007c98 <VL53L0X_get_total_xtalk_rate>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007d20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d105      	bne.n	8007d34 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	441a      	add	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]

	return Status;
 8007d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b09a      	sub	sp, #104	; 0x68
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007d4e:	2312      	movs	r3, #18
 8007d50:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007d52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d56:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007d58:	2342      	movs	r3, #66	; 0x42
 8007d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007d5c:	2306      	movs	r3, #6
 8007d5e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007d60:	2307      	movs	r3, #7
 8007d62:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007d78:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
 8007d82:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d86:	3380      	adds	r3, #128	; 0x80
 8007d88:	0a1b      	lsrs	r3, r3, #8
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d90:	fb02 f303 	mul.w	r3, r2, r3
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01a      	beq.n	8007dd6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	029b      	lsls	r3, r3, #10
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dac:	4413      	add	r3, r2
 8007dae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007db0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007dba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	4413      	add	r3, r2
 8007dc2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dc6:	fb03 f303 	mul.w	r3, r3, r3
 8007dca:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007dd2:	0c1b      	lsrs	r3, r3, #16
 8007dd4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	fb03 f303 	mul.w	r3, r3, r3
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007df8:	0c1b      	lsrs	r3, r3, #16
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dfe:	085a      	lsrs	r2, r3, #1
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	441a      	add	r2, r3
 8007e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1c:	d302      	bcc.n	8007e24 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8007e1e:	4b54      	ldr	r3, [pc, #336]	; (8007f70 <VL53L0X_calc_dmax+0x230>)
 8007e20:	663b      	str	r3, [r7, #96]	; 0x60
 8007e22:	e015      	b.n	8007e50 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e26:	085a      	lsrs	r2, r3, #1
 8007e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e2a:	441a      	add	r2, r3
 8007e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e32:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e44:	0c1b      	lsrs	r3, r3, #16
 8007e46:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e4a:	fb03 f303 	mul.w	r3, r3, r3
 8007e4e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e52:	039b      	lsls	r3, r3, #14
 8007e54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007e58:	4a46      	ldr	r2, [pc, #280]	; (8007f74 <VL53L0X_calc_dmax+0x234>)
 8007e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5e:	099b      	lsrs	r3, r3, #6
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	fb03 f303 	mul.w	r3, r3, r3
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6c:	fb03 f303 	mul.w	r3, r3, r3
 8007e70:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	3308      	adds	r3, #8
 8007e76:	091b      	lsrs	r3, r3, #4
 8007e78:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8007e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007e94:	0b9b      	lsrs	r3, r3, #14
 8007e96:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e9c:	4413      	add	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ea2:	085b      	lsrs	r3, r3, #1
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	039b      	lsls	r3, r3, #14
 8007eb8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	085b      	lsrs	r3, r3, #1
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ecc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ed2:	fb02 f303 	mul.w	r3, r2, r3
 8007ed6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ede:	4a25      	ldr	r2, [pc, #148]	; (8007f74 <VL53L0X_calc_dmax+0x234>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	099b      	lsrs	r3, r3, #6
 8007ee6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ef4:	4a1f      	ldr	r2, [pc, #124]	; (8007f74 <VL53L0X_calc_dmax+0x234>)
 8007ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8007efa:	099b      	lsrs	r3, r3, #6
 8007efc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f00:	3380      	adds	r3, #128	; 0x80
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d008      	beq.n	8007f1e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	085a      	lsrs	r2, r3, #1
 8007f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f12:	441a      	add	r2, r3
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f1c:	e001      	b.n	8007f22 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007f22:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007f24:	f7fe fec9 	bl	8006cba <VL53L0X_isqrt>
 8007f28:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d008      	beq.n	8007f42 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	085a      	lsrs	r2, r3, #1
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	441a      	add	r2, r3
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f40:	e001      	b.n	8007f46 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007f46:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007f48:	f7fe feb7 	bl	8006cba <VL53L0X_isqrt>
 8007f4c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d902      	bls.n	8007f62 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8007f5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f60:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007f62:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3768      	adds	r7, #104	; 0x68
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	fff00000 	.word	0xfff00000
 8007f74:	10624dd3 	.word	0x10624dd3

08007f78 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b0b4      	sub	sp, #208	; 0xd0
 8007f7c:	af04      	add	r7, sp, #16
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007f86:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007f8e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007f96:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007f9e:	f241 235c 	movw	r3, #4700	; 0x125c
 8007fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007fa6:	4b9e      	ldr	r3, [pc, #632]	; (8008220 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007fac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007fb2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbe:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007fc0:	4b98      	ldr	r3, [pc, #608]	; (8008224 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007fc2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fc8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007fca:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007fce:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007fd0:	f240 6377 	movw	r3, #1655	; 0x677
 8007fd4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007ff8:	f107 0310 	add.w	r3, r7, #16
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7ff fe78 	bl	8007cf6 <VL53L0X_get_total_signal_rate>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	461a      	mov	r2, r3
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f7ff fe3f 	bl	8007c98 <VL53L0X_get_total_xtalk_rate>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800802c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800802e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008032:	0c1b      	lsrs	r3, r3, #16
 8008034:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800803c:	fb02 f303 	mul.w	r3, r2, r3
 8008040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008044:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804a:	429a      	cmp	r2, r3
 800804c:	d902      	bls.n	8008054 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800804e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008050:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008054:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008058:	2b00      	cmp	r3, #0
 800805a:	d168      	bne.n	800812e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008062:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800806c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008070:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008074:	461a      	mov	r2, r3
 8008076:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7fe feb2 	bl	8006de4 <VL53L0X_calc_timeout_mclks>
 8008080:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008092:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008096:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800809a:	461a      	mov	r2, r3
 800809c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7fe fe9f 	bl	8006de4 <VL53L0X_calc_timeout_mclks>
 80080a6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80080a8:	2303      	movs	r3, #3
 80080aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80080ae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d102      	bne.n	80080bc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80080b6:	2302      	movs	r3, #2
 80080b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80080bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080c0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80080c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80080c6:	fb02 f303 	mul.w	r3, r2, r3
 80080ca:	02db      	lsls	r3, r3, #11
 80080cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80080d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080d8:	4a53      	ldr	r2, [pc, #332]	; (8008228 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	099b      	lsrs	r3, r3, #6
 80080e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80080e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
 80080ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80080f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080fa:	4a4b      	ldr	r2, [pc, #300]	; (8008228 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	099b      	lsrs	r3, r3, #6
 8008102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3380      	adds	r3, #128	; 0x80
 800810a:	0a1b      	lsrs	r3, r3, #8
 800810c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008114:	fb02 f303 	mul.w	r3, r2, r3
 8008118:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800811c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008120:	3380      	adds	r3, #128	; 0x80
 8008122:	0a1b      	lsrs	r3, r3, #8
 8008124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800812e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008136:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800813a:	e15e      	b.n	80083fa <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800813c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10c      	bne.n	800815c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008148:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008150:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e14c      	b.n	80083f6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800815c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008164:	2301      	movs	r3, #1
 8008166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800816a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800816e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008172:	041a      	lsls	r2, r3, #16
 8008174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008176:	fbb2 f3f3 	udiv	r3, r2, r3
 800817a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800817e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008184:	429a      	cmp	r2, r3
 8008186:	d902      	bls.n	800818e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800818a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800818e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008192:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008196:	fb02 f303 	mul.w	r3, r2, r3
 800819a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800819e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80081a2:	4613      	mov	r3, r2
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fd85 	bl	8006cba <VL53L0X_isqrt>
 80081b0:	4603      	mov	r3, r0
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	891b      	ldrh	r3, [r3, #8]
 80081ba:	461a      	mov	r2, r3
 80081bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081be:	fb02 f303 	mul.w	r3, r2, r3
 80081c2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80081c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081c6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80081c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081cc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80081ce:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80081d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80081d4:	4a14      	ldr	r2, [pc, #80]	; (8008228 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	099b      	lsrs	r3, r3, #6
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80081de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80081e6:	4a10      	ldr	r2, [pc, #64]	; (8008228 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80081e8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ec:	099b      	lsrs	r3, r3, #6
 80081ee:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80081f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80081f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfb8      	it	lt
 8008202:	425b      	neglt	r3, r3
 8008204:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	7e1b      	ldrb	r3, [r3, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800821c:	e033      	b.n	8008286 <VL53L0X_calc_sigma_estimate+0x30e>
 800821e:	bf00      	nop
 8008220:	028f87ae 	.word	0x028f87ae
 8008224:	0006999a 	.word	0x0006999a
 8008228:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800822c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800822e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008232:	fbb2 f3f3 	udiv	r3, r2, r3
 8008236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008244:	fb02 f303 	mul.w	r3, r2, r3
 8008248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800824c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008252:	4413      	add	r3, r2
 8008254:	0c1b      	lsrs	r3, r3, #16
 8008256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800825a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800825e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800826a:	085b      	lsrs	r3, r3, #1
 800826c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008274:	fb03 f303 	mul.w	r3, r3, r3
 8008278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800827c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008280:	0b9b      	lsrs	r3, r3, #14
 8008282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800828a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800828c:	fb02 f303 	mul.w	r3, r2, r3
 8008290:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008298:	0c1b      	lsrs	r3, r3, #16
 800829a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	fb03 f303 	mul.w	r3, r3, r3
 80082a2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80082a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80082b0:	0c1b      	lsrs	r3, r3, #16
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	fb03 f303 	mul.w	r3, r3, r3
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80082bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	4413      	add	r3, r2
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80082c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c6:	f7fe fcf8 	bl	8006cba <VL53L0X_isqrt>
 80082ca:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	041b      	lsls	r3, r3, #16
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	3332      	adds	r3, #50	; 0x32
 80082d6:	4a4b      	ldr	r2, [pc, #300]	; (8008404 <VL53L0X_calc_sigma_estimate+0x48c>)
 80082d8:	fba2 2303 	umull	r2, r3, r2, r3
 80082dc:	095a      	lsrs	r2, r3, #5
 80082de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80082e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082ec:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80082f0:	fb02 f303 	mul.w	r3, r2, r3
 80082f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80082f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082fc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008300:	3308      	adds	r3, #8
 8008302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800830a:	4a3f      	ldr	r2, [pc, #252]	; (8008408 <VL53L0X_calc_sigma_estimate+0x490>)
 800830c:	fba2 2303 	umull	r2, r3, r2, r3
 8008310:	0b5b      	lsrs	r3, r3, #13
 8008312:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800831a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800831c:	429a      	cmp	r2, r3
 800831e:	d902      	bls.n	8008326 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008322:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008326:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800832a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800832e:	4413      	add	r3, r2
 8008330:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008334:	4a35      	ldr	r2, [pc, #212]	; (800840c <VL53L0X_calc_sigma_estimate+0x494>)
 8008336:	fba2 2303 	umull	r2, r3, r2, r3
 800833a:	099b      	lsrs	r3, r3, #6
 800833c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008346:	441a      	add	r2, r3
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	fbb2 f3f3 	udiv	r3, r2, r3
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fcb3 	bl	8006cba <VL53L0X_isqrt>
 8008354:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008362:	4a2a      	ldr	r2, [pc, #168]	; (800840c <VL53L0X_calc_sigma_estimate+0x494>)
 8008364:	fba2 2303 	umull	r2, r3, r2, r3
 8008368:	099b      	lsrs	r3, r3, #6
 800836a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800836c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008370:	fb03 f303 	mul.w	r3, r3, r3
 8008374:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	fb03 f303 	mul.w	r3, r3, r3
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800837e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	4413      	add	r3, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fc98 	bl	8006cba <VL53L0X_isqrt>
 800838a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800839a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d009      	beq.n	80083b4 <VL53L0X_calc_sigma_estimate+0x43c>
 80083a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <VL53L0X_calc_sigma_estimate+0x43c>
 80083a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80083ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d903      	bls.n	80083bc <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80083b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80083c2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80083ce:	6939      	ldr	r1, [r7, #16]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083d8:	9302      	str	r3, [sp, #8]
 80083da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fca8 	bl	8007d40 <VL53L0X_calc_dmax>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083f6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	37c0      	adds	r7, #192	; 0xc0
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	51eb851f 	.word	0x51eb851f
 8008408:	d1b71759 	.word	0xd1b71759
 800840c:	10624dd3 	.word	0x10624dd3

08008410 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b090      	sub	sp, #64	; 0x40
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	607a      	str	r2, [r7, #4]
 800841a:	461a      	mov	r2, r3
 800841c:	460b      	mov	r3, r1
 800841e:	72fb      	strb	r3, [r7, #11]
 8008420:	4613      	mov	r3, r2
 8008422:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008424:	2300      	movs	r3, #0
 8008426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	10db      	asrs	r3, r3, #3
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008470:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d017      	beq.n	80084a8 <VL53L0X_get_pal_range_status+0x98>
 8008478:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800847c:	2b05      	cmp	r3, #5
 800847e:	d013      	beq.n	80084a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008480:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008484:	2b07      	cmp	r3, #7
 8008486:	d00f      	beq.n	80084a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008488:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800848c:	2b0c      	cmp	r3, #12
 800848e:	d00b      	beq.n	80084a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008490:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008494:	2b0d      	cmp	r3, #13
 8008496:	d007      	beq.n	80084a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008498:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800849c:	2b0e      	cmp	r3, #14
 800849e:	d003      	beq.n	80084a8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80084a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084a4:	2b0f      	cmp	r3, #15
 80084a6:	d103      	bne.n	80084b0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80084a8:	2301      	movs	r3, #1
 80084aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80084ae:	e002      	b.n	80084b6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80084b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80084be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80084c2:	461a      	mov	r2, r3
 80084c4:	2100      	movs	r1, #0
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7fd f8c4 	bl	8005654 <VL53L0X_GetLimitCheckEnable>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80084d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d02e      	beq.n	8008538 <VL53L0X_get_pal_range_status+0x128>
 80084da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12a      	bne.n	8008538 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80084e2:	f107 0310 	add.w	r3, r7, #16
 80084e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80084ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fd43 	bl	8007f78 <VL53L0X_calc_sigma_estimate>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80084f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	b29a      	uxth	r2, r3
 8008504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008506:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008508:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800850c:	2b00      	cmp	r3, #0
 800850e:	d113      	bne.n	8008538 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008510:	f107 0320 	add.w	r3, r7, #32
 8008514:	461a      	mov	r2, r3
 8008516:	2100      	movs	r1, #0
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7fd f921 	bl	8005760 <VL53L0X_GetLimitCheckValue>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d006      	beq.n	8008538 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800852a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800852e:	429a      	cmp	r2, r3
 8008530:	d902      	bls.n	8008538 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008538:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800853c:	2b00      	cmp	r3, #0
 800853e:	d109      	bne.n	8008554 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008540:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008544:	461a      	mov	r2, r3
 8008546:	2102      	movs	r1, #2
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f7fd f883 	bl	8005654 <VL53L0X_GetLimitCheckEnable>
 800854e:	4603      	mov	r3, r0
 8008550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008554:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008558:	2b00      	cmp	r3, #0
 800855a:	d044      	beq.n	80085e6 <VL53L0X_get_pal_range_status+0x1d6>
 800855c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008560:	2b00      	cmp	r3, #0
 8008562:	d140      	bne.n	80085e6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008564:	f107 031c 	add.w	r3, r7, #28
 8008568:	461a      	mov	r2, r3
 800856a:	2102      	movs	r1, #2
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7fd f8f7 	bl	8005760 <VL53L0X_GetLimitCheckValue>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008578:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800857c:	2b00      	cmp	r3, #0
 800857e:	d107      	bne.n	8008590 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008580:	2201      	movs	r2, #1
 8008582:	21ff      	movs	r1, #255	; 0xff
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7fc fad1 	bl	8004b2c <VL53L0X_WrByte>
 800858a:	4603      	mov	r3, r0
 800858c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008590:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008594:	2b00      	cmp	r3, #0
 8008596:	d109      	bne.n	80085ac <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008598:	f107 0316 	add.w	r3, r7, #22
 800859c:	461a      	mov	r2, r3
 800859e:	21b6      	movs	r1, #182	; 0xb6
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7fc fb6f 	bl	8004c84 <VL53L0X_RdWord>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80085ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80085b4:	2200      	movs	r2, #0
 80085b6:	21ff      	movs	r1, #255	; 0xff
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7fc fab7 	bl	8004b2c <VL53L0X_WrByte>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80085c4:	8afb      	ldrh	r3, [r7, #22]
 80085c6:	025b      	lsls	r3, r3, #9
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d006      	beq.n	80085e6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80085d8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80085da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085dc:	429a      	cmp	r2, r3
 80085de:	d902      	bls.n	80085e6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80085e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d109      	bne.n	8008602 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80085ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085f2:	461a      	mov	r2, r3
 80085f4:	2103      	movs	r1, #3
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7fd f82c 	bl	8005654 <VL53L0X_GetLimitCheckEnable>
 80085fc:	4603      	mov	r3, r0
 80085fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008602:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008606:	2b00      	cmp	r3, #0
 8008608:	d023      	beq.n	8008652 <VL53L0X_get_pal_range_status+0x242>
 800860a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800860e:	2b00      	cmp	r3, #0
 8008610:	d11f      	bne.n	8008652 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008612:	893b      	ldrh	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
 800861c:	e005      	b.n	800862a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	021a      	lsls	r2, r3, #8
 8008622:	893b      	ldrh	r3, [r7, #8]
 8008624:	fbb2 f3f3 	udiv	r3, r2, r3
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800862a:	f107 0318 	add.w	r3, r7, #24
 800862e:	461a      	mov	r2, r3
 8008630:	2103      	movs	r1, #3
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7fd f894 	bl	8005760 <VL53L0X_GetLimitCheckValue>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d006      	beq.n	8008652 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008644:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008648:	429a      	cmp	r2, r3
 800864a:	d202      	bcs.n	8008652 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800864c:	2301      	movs	r3, #1
 800864e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008652:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008656:	2b00      	cmp	r3, #0
 8008658:	d14a      	bne.n	80086f0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800865a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800865e:	2b01      	cmp	r3, #1
 8008660:	d103      	bne.n	800866a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008664:	22ff      	movs	r2, #255	; 0xff
 8008666:	701a      	strb	r2, [r3, #0]
 8008668:	e042      	b.n	80086f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800866a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800866e:	2b01      	cmp	r3, #1
 8008670:	d007      	beq.n	8008682 <VL53L0X_get_pal_range_status+0x272>
 8008672:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008676:	2b02      	cmp	r3, #2
 8008678:	d003      	beq.n	8008682 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800867a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800867e:	2b03      	cmp	r3, #3
 8008680:	d103      	bne.n	800868a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008684:	2205      	movs	r2, #5
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e032      	b.n	80086f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800868a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800868e:	2b06      	cmp	r3, #6
 8008690:	d003      	beq.n	800869a <VL53L0X_get_pal_range_status+0x28a>
 8008692:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008696:	2b09      	cmp	r3, #9
 8008698:	d103      	bne.n	80086a2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800869a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800869c:	2204      	movs	r2, #4
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e026      	b.n	80086f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80086a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d007      	beq.n	80086ba <VL53L0X_get_pal_range_status+0x2aa>
 80086aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086ae:	2b0a      	cmp	r3, #10
 80086b0:	d003      	beq.n	80086ba <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80086b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d103      	bne.n	80086c2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80086ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086bc:	2203      	movs	r2, #3
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	e016      	b.n	80086f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80086c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d003      	beq.n	80086d2 <VL53L0X_get_pal_range_status+0x2c2>
 80086ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d103      	bne.n	80086da <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80086d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d4:	2202      	movs	r2, #2
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	e00a      	b.n	80086f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80086da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d103      	bne.n	80086ea <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80086e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e4:	2201      	movs	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e002      	b.n	80086f0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80086ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80086f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80086f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fa:	2200      	movs	r2, #0
 80086fc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80086fe:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008702:	461a      	mov	r2, r3
 8008704:	2101      	movs	r1, #1
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7fc ffa4 	bl	8005654 <VL53L0X_GetLimitCheckEnable>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008712:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008716:	2b00      	cmp	r3, #0
 8008718:	d14f      	bne.n	80087ba <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800871a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <VL53L0X_get_pal_range_status+0x31a>
 8008722:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008726:	2b01      	cmp	r3, #1
 8008728:	d103      	bne.n	8008732 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008730:	e002      	b.n	8008738 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800873e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008742:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008746:	2b04      	cmp	r3, #4
 8008748:	d003      	beq.n	8008752 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800874a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008752:	2301      	movs	r3, #1
 8008754:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008758:	e002      	b.n	8008760 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008766:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800876a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <VL53L0X_get_pal_range_status+0x36a>
 8008772:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008776:	2b01      	cmp	r3, #1
 8008778:	d103      	bne.n	8008782 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008780:	e002      	b.n	8008788 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800878e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <VL53L0X_get_pal_range_status+0x392>
 800879a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d103      	bne.n	80087aa <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a8:	e002      	b.n	80087b0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80087b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80087ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80087be:	4618      	mov	r0, r3
 80087c0:	3740      	adds	r7, #64	; 0x40
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <__errno>:
 80087c8:	4b01      	ldr	r3, [pc, #4]	; (80087d0 <__errno+0x8>)
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	2000036c 	.word	0x2000036c

080087d4 <__libc_init_array>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	4d0d      	ldr	r5, [pc, #52]	; (800880c <__libc_init_array+0x38>)
 80087d8:	4c0d      	ldr	r4, [pc, #52]	; (8008810 <__libc_init_array+0x3c>)
 80087da:	1b64      	subs	r4, r4, r5
 80087dc:	10a4      	asrs	r4, r4, #2
 80087de:	2600      	movs	r6, #0
 80087e0:	42a6      	cmp	r6, r4
 80087e2:	d109      	bne.n	80087f8 <__libc_init_array+0x24>
 80087e4:	4d0b      	ldr	r5, [pc, #44]	; (8008814 <__libc_init_array+0x40>)
 80087e6:	4c0c      	ldr	r4, [pc, #48]	; (8008818 <__libc_init_array+0x44>)
 80087e8:	f000 fc8e 	bl	8009108 <_init>
 80087ec:	1b64      	subs	r4, r4, r5
 80087ee:	10a4      	asrs	r4, r4, #2
 80087f0:	2600      	movs	r6, #0
 80087f2:	42a6      	cmp	r6, r4
 80087f4:	d105      	bne.n	8008802 <__libc_init_array+0x2e>
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fc:	4798      	blx	r3
 80087fe:	3601      	adds	r6, #1
 8008800:	e7ee      	b.n	80087e0 <__libc_init_array+0xc>
 8008802:	f855 3b04 	ldr.w	r3, [r5], #4
 8008806:	4798      	blx	r3
 8008808:	3601      	adds	r6, #1
 800880a:	e7f2      	b.n	80087f2 <__libc_init_array+0x1e>
 800880c:	080091ec 	.word	0x080091ec
 8008810:	080091ec 	.word	0x080091ec
 8008814:	080091ec 	.word	0x080091ec
 8008818:	080091f0 	.word	0x080091f0

0800881c <memcpy>:
 800881c:	440a      	add	r2, r1
 800881e:	4291      	cmp	r1, r2
 8008820:	f100 33ff 	add.w	r3, r0, #4294967295
 8008824:	d100      	bne.n	8008828 <memcpy+0xc>
 8008826:	4770      	bx	lr
 8008828:	b510      	push	{r4, lr}
 800882a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800882e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008832:	4291      	cmp	r1, r2
 8008834:	d1f9      	bne.n	800882a <memcpy+0xe>
 8008836:	bd10      	pop	{r4, pc}

08008838 <memset>:
 8008838:	4402      	add	r2, r0
 800883a:	4603      	mov	r3, r0
 800883c:	4293      	cmp	r3, r2
 800883e:	d100      	bne.n	8008842 <memset+0xa>
 8008840:	4770      	bx	lr
 8008842:	f803 1b01 	strb.w	r1, [r3], #1
 8008846:	e7f9      	b.n	800883c <memset+0x4>

08008848 <siprintf>:
 8008848:	b40e      	push	{r1, r2, r3}
 800884a:	b500      	push	{lr}
 800884c:	b09c      	sub	sp, #112	; 0x70
 800884e:	ab1d      	add	r3, sp, #116	; 0x74
 8008850:	9002      	str	r0, [sp, #8]
 8008852:	9006      	str	r0, [sp, #24]
 8008854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008858:	4809      	ldr	r0, [pc, #36]	; (8008880 <siprintf+0x38>)
 800885a:	9107      	str	r1, [sp, #28]
 800885c:	9104      	str	r1, [sp, #16]
 800885e:	4909      	ldr	r1, [pc, #36]	; (8008884 <siprintf+0x3c>)
 8008860:	f853 2b04 	ldr.w	r2, [r3], #4
 8008864:	9105      	str	r1, [sp, #20]
 8008866:	6800      	ldr	r0, [r0, #0]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	a902      	add	r1, sp, #8
 800886c:	f000 f868 	bl	8008940 <_svfiprintf_r>
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	2200      	movs	r2, #0
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	b01c      	add	sp, #112	; 0x70
 8008878:	f85d eb04 	ldr.w	lr, [sp], #4
 800887c:	b003      	add	sp, #12
 800887e:	4770      	bx	lr
 8008880:	2000036c 	.word	0x2000036c
 8008884:	ffff0208 	.word	0xffff0208

08008888 <__ssputs_r>:
 8008888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800888c:	688e      	ldr	r6, [r1, #8]
 800888e:	429e      	cmp	r6, r3
 8008890:	4682      	mov	sl, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4690      	mov	r8, r2
 8008896:	461f      	mov	r7, r3
 8008898:	d838      	bhi.n	800890c <__ssputs_r+0x84>
 800889a:	898a      	ldrh	r2, [r1, #12]
 800889c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088a0:	d032      	beq.n	8008908 <__ssputs_r+0x80>
 80088a2:	6825      	ldr	r5, [r4, #0]
 80088a4:	6909      	ldr	r1, [r1, #16]
 80088a6:	eba5 0901 	sub.w	r9, r5, r1
 80088aa:	6965      	ldr	r5, [r4, #20]
 80088ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088b4:	3301      	adds	r3, #1
 80088b6:	444b      	add	r3, r9
 80088b8:	106d      	asrs	r5, r5, #1
 80088ba:	429d      	cmp	r5, r3
 80088bc:	bf38      	it	cc
 80088be:	461d      	movcc	r5, r3
 80088c0:	0553      	lsls	r3, r2, #21
 80088c2:	d531      	bpl.n	8008928 <__ssputs_r+0xa0>
 80088c4:	4629      	mov	r1, r5
 80088c6:	f000 fb55 	bl	8008f74 <_malloc_r>
 80088ca:	4606      	mov	r6, r0
 80088cc:	b950      	cbnz	r0, 80088e4 <__ssputs_r+0x5c>
 80088ce:	230c      	movs	r3, #12
 80088d0:	f8ca 3000 	str.w	r3, [sl]
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e4:	6921      	ldr	r1, [r4, #16]
 80088e6:	464a      	mov	r2, r9
 80088e8:	f7ff ff98 	bl	800881c <memcpy>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	6126      	str	r6, [r4, #16]
 80088fa:	6165      	str	r5, [r4, #20]
 80088fc:	444e      	add	r6, r9
 80088fe:	eba5 0509 	sub.w	r5, r5, r9
 8008902:	6026      	str	r6, [r4, #0]
 8008904:	60a5      	str	r5, [r4, #8]
 8008906:	463e      	mov	r6, r7
 8008908:	42be      	cmp	r6, r7
 800890a:	d900      	bls.n	800890e <__ssputs_r+0x86>
 800890c:	463e      	mov	r6, r7
 800890e:	6820      	ldr	r0, [r4, #0]
 8008910:	4632      	mov	r2, r6
 8008912:	4641      	mov	r1, r8
 8008914:	f000 faa8 	bl	8008e68 <memmove>
 8008918:	68a3      	ldr	r3, [r4, #8]
 800891a:	1b9b      	subs	r3, r3, r6
 800891c:	60a3      	str	r3, [r4, #8]
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	4433      	add	r3, r6
 8008922:	6023      	str	r3, [r4, #0]
 8008924:	2000      	movs	r0, #0
 8008926:	e7db      	b.n	80088e0 <__ssputs_r+0x58>
 8008928:	462a      	mov	r2, r5
 800892a:	f000 fb97 	bl	800905c <_realloc_r>
 800892e:	4606      	mov	r6, r0
 8008930:	2800      	cmp	r0, #0
 8008932:	d1e1      	bne.n	80088f8 <__ssputs_r+0x70>
 8008934:	6921      	ldr	r1, [r4, #16]
 8008936:	4650      	mov	r0, sl
 8008938:	f000 fab0 	bl	8008e9c <_free_r>
 800893c:	e7c7      	b.n	80088ce <__ssputs_r+0x46>
	...

08008940 <_svfiprintf_r>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	4698      	mov	r8, r3
 8008946:	898b      	ldrh	r3, [r1, #12]
 8008948:	061b      	lsls	r3, r3, #24
 800894a:	b09d      	sub	sp, #116	; 0x74
 800894c:	4607      	mov	r7, r0
 800894e:	460d      	mov	r5, r1
 8008950:	4614      	mov	r4, r2
 8008952:	d50e      	bpl.n	8008972 <_svfiprintf_r+0x32>
 8008954:	690b      	ldr	r3, [r1, #16]
 8008956:	b963      	cbnz	r3, 8008972 <_svfiprintf_r+0x32>
 8008958:	2140      	movs	r1, #64	; 0x40
 800895a:	f000 fb0b 	bl	8008f74 <_malloc_r>
 800895e:	6028      	str	r0, [r5, #0]
 8008960:	6128      	str	r0, [r5, #16]
 8008962:	b920      	cbnz	r0, 800896e <_svfiprintf_r+0x2e>
 8008964:	230c      	movs	r3, #12
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	f04f 30ff 	mov.w	r0, #4294967295
 800896c:	e0d1      	b.n	8008b12 <_svfiprintf_r+0x1d2>
 800896e:	2340      	movs	r3, #64	; 0x40
 8008970:	616b      	str	r3, [r5, #20]
 8008972:	2300      	movs	r3, #0
 8008974:	9309      	str	r3, [sp, #36]	; 0x24
 8008976:	2320      	movs	r3, #32
 8008978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800897c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008980:	2330      	movs	r3, #48	; 0x30
 8008982:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b2c <_svfiprintf_r+0x1ec>
 8008986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800898a:	f04f 0901 	mov.w	r9, #1
 800898e:	4623      	mov	r3, r4
 8008990:	469a      	mov	sl, r3
 8008992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008996:	b10a      	cbz	r2, 800899c <_svfiprintf_r+0x5c>
 8008998:	2a25      	cmp	r2, #37	; 0x25
 800899a:	d1f9      	bne.n	8008990 <_svfiprintf_r+0x50>
 800899c:	ebba 0b04 	subs.w	fp, sl, r4
 80089a0:	d00b      	beq.n	80089ba <_svfiprintf_r+0x7a>
 80089a2:	465b      	mov	r3, fp
 80089a4:	4622      	mov	r2, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7ff ff6d 	bl	8008888 <__ssputs_r>
 80089ae:	3001      	adds	r0, #1
 80089b0:	f000 80aa 	beq.w	8008b08 <_svfiprintf_r+0x1c8>
 80089b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089b6:	445a      	add	r2, fp
 80089b8:	9209      	str	r2, [sp, #36]	; 0x24
 80089ba:	f89a 3000 	ldrb.w	r3, [sl]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 80a2 	beq.w	8008b08 <_svfiprintf_r+0x1c8>
 80089c4:	2300      	movs	r3, #0
 80089c6:	f04f 32ff 	mov.w	r2, #4294967295
 80089ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ce:	f10a 0a01 	add.w	sl, sl, #1
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	9307      	str	r3, [sp, #28]
 80089d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089da:	931a      	str	r3, [sp, #104]	; 0x68
 80089dc:	4654      	mov	r4, sl
 80089de:	2205      	movs	r2, #5
 80089e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e4:	4851      	ldr	r0, [pc, #324]	; (8008b2c <_svfiprintf_r+0x1ec>)
 80089e6:	f7f7 fbfb 	bl	80001e0 <memchr>
 80089ea:	9a04      	ldr	r2, [sp, #16]
 80089ec:	b9d8      	cbnz	r0, 8008a26 <_svfiprintf_r+0xe6>
 80089ee:	06d0      	lsls	r0, r2, #27
 80089f0:	bf44      	itt	mi
 80089f2:	2320      	movmi	r3, #32
 80089f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f8:	0711      	lsls	r1, r2, #28
 80089fa:	bf44      	itt	mi
 80089fc:	232b      	movmi	r3, #43	; 0x2b
 80089fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a02:	f89a 3000 	ldrb.w	r3, [sl]
 8008a06:	2b2a      	cmp	r3, #42	; 0x2a
 8008a08:	d015      	beq.n	8008a36 <_svfiprintf_r+0xf6>
 8008a0a:	9a07      	ldr	r2, [sp, #28]
 8008a0c:	4654      	mov	r4, sl
 8008a0e:	2000      	movs	r0, #0
 8008a10:	f04f 0c0a 	mov.w	ip, #10
 8008a14:	4621      	mov	r1, r4
 8008a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a1a:	3b30      	subs	r3, #48	; 0x30
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	d94e      	bls.n	8008abe <_svfiprintf_r+0x17e>
 8008a20:	b1b0      	cbz	r0, 8008a50 <_svfiprintf_r+0x110>
 8008a22:	9207      	str	r2, [sp, #28]
 8008a24:	e014      	b.n	8008a50 <_svfiprintf_r+0x110>
 8008a26:	eba0 0308 	sub.w	r3, r0, r8
 8008a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	9304      	str	r3, [sp, #16]
 8008a32:	46a2      	mov	sl, r4
 8008a34:	e7d2      	b.n	80089dc <_svfiprintf_r+0x9c>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	1d19      	adds	r1, r3, #4
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	9103      	str	r1, [sp, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	bfbb      	ittet	lt
 8008a42:	425b      	neglt	r3, r3
 8008a44:	f042 0202 	orrlt.w	r2, r2, #2
 8008a48:	9307      	strge	r3, [sp, #28]
 8008a4a:	9307      	strlt	r3, [sp, #28]
 8008a4c:	bfb8      	it	lt
 8008a4e:	9204      	strlt	r2, [sp, #16]
 8008a50:	7823      	ldrb	r3, [r4, #0]
 8008a52:	2b2e      	cmp	r3, #46	; 0x2e
 8008a54:	d10c      	bne.n	8008a70 <_svfiprintf_r+0x130>
 8008a56:	7863      	ldrb	r3, [r4, #1]
 8008a58:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5a:	d135      	bne.n	8008ac8 <_svfiprintf_r+0x188>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	1d1a      	adds	r2, r3, #4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	9203      	str	r2, [sp, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	bfb8      	it	lt
 8008a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a6c:	3402      	adds	r4, #2
 8008a6e:	9305      	str	r3, [sp, #20]
 8008a70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b3c <_svfiprintf_r+0x1fc>
 8008a74:	7821      	ldrb	r1, [r4, #0]
 8008a76:	2203      	movs	r2, #3
 8008a78:	4650      	mov	r0, sl
 8008a7a:	f7f7 fbb1 	bl	80001e0 <memchr>
 8008a7e:	b140      	cbz	r0, 8008a92 <_svfiprintf_r+0x152>
 8008a80:	2340      	movs	r3, #64	; 0x40
 8008a82:	eba0 000a 	sub.w	r0, r0, sl
 8008a86:	fa03 f000 	lsl.w	r0, r3, r0
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	4303      	orrs	r3, r0
 8008a8e:	3401      	adds	r4, #1
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a96:	4826      	ldr	r0, [pc, #152]	; (8008b30 <_svfiprintf_r+0x1f0>)
 8008a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a9c:	2206      	movs	r2, #6
 8008a9e:	f7f7 fb9f 	bl	80001e0 <memchr>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d038      	beq.n	8008b18 <_svfiprintf_r+0x1d8>
 8008aa6:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <_svfiprintf_r+0x1f4>)
 8008aa8:	bb1b      	cbnz	r3, 8008af2 <_svfiprintf_r+0x1b2>
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	3307      	adds	r3, #7
 8008aae:	f023 0307 	bic.w	r3, r3, #7
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	9303      	str	r3, [sp, #12]
 8008ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab8:	4433      	add	r3, r6
 8008aba:	9309      	str	r3, [sp, #36]	; 0x24
 8008abc:	e767      	b.n	800898e <_svfiprintf_r+0x4e>
 8008abe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	2001      	movs	r0, #1
 8008ac6:	e7a5      	b.n	8008a14 <_svfiprintf_r+0xd4>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	3401      	adds	r4, #1
 8008acc:	9305      	str	r3, [sp, #20]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	f04f 0c0a 	mov.w	ip, #10
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ada:	3a30      	subs	r2, #48	; 0x30
 8008adc:	2a09      	cmp	r2, #9
 8008ade:	d903      	bls.n	8008ae8 <_svfiprintf_r+0x1a8>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d0c5      	beq.n	8008a70 <_svfiprintf_r+0x130>
 8008ae4:	9105      	str	r1, [sp, #20]
 8008ae6:	e7c3      	b.n	8008a70 <_svfiprintf_r+0x130>
 8008ae8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aec:	4604      	mov	r4, r0
 8008aee:	2301      	movs	r3, #1
 8008af0:	e7f0      	b.n	8008ad4 <_svfiprintf_r+0x194>
 8008af2:	ab03      	add	r3, sp, #12
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	462a      	mov	r2, r5
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <_svfiprintf_r+0x1f8>)
 8008afa:	a904      	add	r1, sp, #16
 8008afc:	4638      	mov	r0, r7
 8008afe:	f3af 8000 	nop.w
 8008b02:	1c42      	adds	r2, r0, #1
 8008b04:	4606      	mov	r6, r0
 8008b06:	d1d6      	bne.n	8008ab6 <_svfiprintf_r+0x176>
 8008b08:	89ab      	ldrh	r3, [r5, #12]
 8008b0a:	065b      	lsls	r3, r3, #25
 8008b0c:	f53f af2c 	bmi.w	8008968 <_svfiprintf_r+0x28>
 8008b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b12:	b01d      	add	sp, #116	; 0x74
 8008b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b18:	ab03      	add	r3, sp, #12
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <_svfiprintf_r+0x1f8>)
 8008b20:	a904      	add	r1, sp, #16
 8008b22:	4638      	mov	r0, r7
 8008b24:	f000 f87a 	bl	8008c1c <_printf_i>
 8008b28:	e7eb      	b.n	8008b02 <_svfiprintf_r+0x1c2>
 8008b2a:	bf00      	nop
 8008b2c:	080091b0 	.word	0x080091b0
 8008b30:	080091ba 	.word	0x080091ba
 8008b34:	00000000 	.word	0x00000000
 8008b38:	08008889 	.word	0x08008889
 8008b3c:	080091b6 	.word	0x080091b6

08008b40 <_printf_common>:
 8008b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	4616      	mov	r6, r2
 8008b46:	4699      	mov	r9, r3
 8008b48:	688a      	ldr	r2, [r1, #8]
 8008b4a:	690b      	ldr	r3, [r1, #16]
 8008b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	bfb8      	it	lt
 8008b54:	4613      	movlt	r3, r2
 8008b56:	6033      	str	r3, [r6, #0]
 8008b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	b10a      	cbz	r2, 8008b66 <_printf_common+0x26>
 8008b62:	3301      	adds	r3, #1
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	0699      	lsls	r1, r3, #26
 8008b6a:	bf42      	ittt	mi
 8008b6c:	6833      	ldrmi	r3, [r6, #0]
 8008b6e:	3302      	addmi	r3, #2
 8008b70:	6033      	strmi	r3, [r6, #0]
 8008b72:	6825      	ldr	r5, [r4, #0]
 8008b74:	f015 0506 	ands.w	r5, r5, #6
 8008b78:	d106      	bne.n	8008b88 <_printf_common+0x48>
 8008b7a:	f104 0a19 	add.w	sl, r4, #25
 8008b7e:	68e3      	ldr	r3, [r4, #12]
 8008b80:	6832      	ldr	r2, [r6, #0]
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	42ab      	cmp	r3, r5
 8008b86:	dc26      	bgt.n	8008bd6 <_printf_common+0x96>
 8008b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b8c:	1e13      	subs	r3, r2, #0
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	bf18      	it	ne
 8008b92:	2301      	movne	r3, #1
 8008b94:	0692      	lsls	r2, r2, #26
 8008b96:	d42b      	bmi.n	8008bf0 <_printf_common+0xb0>
 8008b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	47c0      	blx	r8
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d01e      	beq.n	8008be4 <_printf_common+0xa4>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	68e5      	ldr	r5, [r4, #12]
 8008baa:	6832      	ldr	r2, [r6, #0]
 8008bac:	f003 0306 	and.w	r3, r3, #6
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	bf08      	it	eq
 8008bb4:	1aad      	subeq	r5, r5, r2
 8008bb6:	68a3      	ldr	r3, [r4, #8]
 8008bb8:	6922      	ldr	r2, [r4, #16]
 8008bba:	bf0c      	ite	eq
 8008bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc0:	2500      	movne	r5, #0
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	bfc4      	itt	gt
 8008bc6:	1a9b      	subgt	r3, r3, r2
 8008bc8:	18ed      	addgt	r5, r5, r3
 8008bca:	2600      	movs	r6, #0
 8008bcc:	341a      	adds	r4, #26
 8008bce:	42b5      	cmp	r5, r6
 8008bd0:	d11a      	bne.n	8008c08 <_printf_common+0xc8>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	e008      	b.n	8008be8 <_printf_common+0xa8>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4652      	mov	r2, sl
 8008bda:	4649      	mov	r1, r9
 8008bdc:	4638      	mov	r0, r7
 8008bde:	47c0      	blx	r8
 8008be0:	3001      	adds	r0, #1
 8008be2:	d103      	bne.n	8008bec <_printf_common+0xac>
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295
 8008be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bec:	3501      	adds	r5, #1
 8008bee:	e7c6      	b.n	8008b7e <_printf_common+0x3e>
 8008bf0:	18e1      	adds	r1, r4, r3
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	2030      	movs	r0, #48	; 0x30
 8008bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bfa:	4422      	add	r2, r4
 8008bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c04:	3302      	adds	r3, #2
 8008c06:	e7c7      	b.n	8008b98 <_printf_common+0x58>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c0      	blx	r8
 8008c12:	3001      	adds	r0, #1
 8008c14:	d0e6      	beq.n	8008be4 <_printf_common+0xa4>
 8008c16:	3601      	adds	r6, #1
 8008c18:	e7d9      	b.n	8008bce <_printf_common+0x8e>
	...

08008c1c <_printf_i>:
 8008c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c20:	7e0f      	ldrb	r7, [r1, #24]
 8008c22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c24:	2f78      	cmp	r7, #120	; 0x78
 8008c26:	4691      	mov	r9, r2
 8008c28:	4680      	mov	r8, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	469a      	mov	sl, r3
 8008c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c32:	d807      	bhi.n	8008c44 <_printf_i+0x28>
 8008c34:	2f62      	cmp	r7, #98	; 0x62
 8008c36:	d80a      	bhi.n	8008c4e <_printf_i+0x32>
 8008c38:	2f00      	cmp	r7, #0
 8008c3a:	f000 80d8 	beq.w	8008dee <_printf_i+0x1d2>
 8008c3e:	2f58      	cmp	r7, #88	; 0x58
 8008c40:	f000 80a3 	beq.w	8008d8a <_printf_i+0x16e>
 8008c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c4c:	e03a      	b.n	8008cc4 <_printf_i+0xa8>
 8008c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c52:	2b15      	cmp	r3, #21
 8008c54:	d8f6      	bhi.n	8008c44 <_printf_i+0x28>
 8008c56:	a101      	add	r1, pc, #4	; (adr r1, 8008c5c <_printf_i+0x40>)
 8008c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c5c:	08008cb5 	.word	0x08008cb5
 8008c60:	08008cc9 	.word	0x08008cc9
 8008c64:	08008c45 	.word	0x08008c45
 8008c68:	08008c45 	.word	0x08008c45
 8008c6c:	08008c45 	.word	0x08008c45
 8008c70:	08008c45 	.word	0x08008c45
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008c45 	.word	0x08008c45
 8008c7c:	08008c45 	.word	0x08008c45
 8008c80:	08008c45 	.word	0x08008c45
 8008c84:	08008c45 	.word	0x08008c45
 8008c88:	08008dd5 	.word	0x08008dd5
 8008c8c:	08008cf9 	.word	0x08008cf9
 8008c90:	08008db7 	.word	0x08008db7
 8008c94:	08008c45 	.word	0x08008c45
 8008c98:	08008c45 	.word	0x08008c45
 8008c9c:	08008df7 	.word	0x08008df7
 8008ca0:	08008c45 	.word	0x08008c45
 8008ca4:	08008cf9 	.word	0x08008cf9
 8008ca8:	08008c45 	.word	0x08008c45
 8008cac:	08008c45 	.word	0x08008c45
 8008cb0:	08008dbf 	.word	0x08008dbf
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	1d1a      	adds	r2, r3, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	602a      	str	r2, [r5, #0]
 8008cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e0a3      	b.n	8008e10 <_printf_i+0x1f4>
 8008cc8:	6820      	ldr	r0, [r4, #0]
 8008cca:	6829      	ldr	r1, [r5, #0]
 8008ccc:	0606      	lsls	r6, r0, #24
 8008cce:	f101 0304 	add.w	r3, r1, #4
 8008cd2:	d50a      	bpl.n	8008cea <_printf_i+0xce>
 8008cd4:	680e      	ldr	r6, [r1, #0]
 8008cd6:	602b      	str	r3, [r5, #0]
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	da03      	bge.n	8008ce4 <_printf_i+0xc8>
 8008cdc:	232d      	movs	r3, #45	; 0x2d
 8008cde:	4276      	negs	r6, r6
 8008ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce4:	485e      	ldr	r0, [pc, #376]	; (8008e60 <_printf_i+0x244>)
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	e019      	b.n	8008d1e <_printf_i+0x102>
 8008cea:	680e      	ldr	r6, [r1, #0]
 8008cec:	602b      	str	r3, [r5, #0]
 8008cee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cf2:	bf18      	it	ne
 8008cf4:	b236      	sxthne	r6, r6
 8008cf6:	e7ef      	b.n	8008cd8 <_printf_i+0xbc>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	6820      	ldr	r0, [r4, #0]
 8008cfc:	1d19      	adds	r1, r3, #4
 8008cfe:	6029      	str	r1, [r5, #0]
 8008d00:	0601      	lsls	r1, r0, #24
 8008d02:	d501      	bpl.n	8008d08 <_printf_i+0xec>
 8008d04:	681e      	ldr	r6, [r3, #0]
 8008d06:	e002      	b.n	8008d0e <_printf_i+0xf2>
 8008d08:	0646      	lsls	r6, r0, #25
 8008d0a:	d5fb      	bpl.n	8008d04 <_printf_i+0xe8>
 8008d0c:	881e      	ldrh	r6, [r3, #0]
 8008d0e:	4854      	ldr	r0, [pc, #336]	; (8008e60 <_printf_i+0x244>)
 8008d10:	2f6f      	cmp	r7, #111	; 0x6f
 8008d12:	bf0c      	ite	eq
 8008d14:	2308      	moveq	r3, #8
 8008d16:	230a      	movne	r3, #10
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d1e:	6865      	ldr	r5, [r4, #4]
 8008d20:	60a5      	str	r5, [r4, #8]
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	bfa2      	ittt	ge
 8008d26:	6821      	ldrge	r1, [r4, #0]
 8008d28:	f021 0104 	bicge.w	r1, r1, #4
 8008d2c:	6021      	strge	r1, [r4, #0]
 8008d2e:	b90e      	cbnz	r6, 8008d34 <_printf_i+0x118>
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	d04d      	beq.n	8008dd0 <_printf_i+0x1b4>
 8008d34:	4615      	mov	r5, r2
 8008d36:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d3a:	fb03 6711 	mls	r7, r3, r1, r6
 8008d3e:	5dc7      	ldrb	r7, [r0, r7]
 8008d40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d44:	4637      	mov	r7, r6
 8008d46:	42bb      	cmp	r3, r7
 8008d48:	460e      	mov	r6, r1
 8008d4a:	d9f4      	bls.n	8008d36 <_printf_i+0x11a>
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d10b      	bne.n	8008d68 <_printf_i+0x14c>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	07de      	lsls	r6, r3, #31
 8008d54:	d508      	bpl.n	8008d68 <_printf_i+0x14c>
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	6861      	ldr	r1, [r4, #4]
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	bfde      	ittt	le
 8008d5e:	2330      	movle	r3, #48	; 0x30
 8008d60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d68:	1b52      	subs	r2, r2, r5
 8008d6a:	6122      	str	r2, [r4, #16]
 8008d6c:	f8cd a000 	str.w	sl, [sp]
 8008d70:	464b      	mov	r3, r9
 8008d72:	aa03      	add	r2, sp, #12
 8008d74:	4621      	mov	r1, r4
 8008d76:	4640      	mov	r0, r8
 8008d78:	f7ff fee2 	bl	8008b40 <_printf_common>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d14c      	bne.n	8008e1a <_printf_i+0x1fe>
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	b004      	add	sp, #16
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	4835      	ldr	r0, [pc, #212]	; (8008e60 <_printf_i+0x244>)
 8008d8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d90:	6829      	ldr	r1, [r5, #0]
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d98:	6029      	str	r1, [r5, #0]
 8008d9a:	061d      	lsls	r5, r3, #24
 8008d9c:	d514      	bpl.n	8008dc8 <_printf_i+0x1ac>
 8008d9e:	07df      	lsls	r7, r3, #31
 8008da0:	bf44      	itt	mi
 8008da2:	f043 0320 	orrmi.w	r3, r3, #32
 8008da6:	6023      	strmi	r3, [r4, #0]
 8008da8:	b91e      	cbnz	r6, 8008db2 <_printf_i+0x196>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f023 0320 	bic.w	r3, r3, #32
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	2310      	movs	r3, #16
 8008db4:	e7b0      	b.n	8008d18 <_printf_i+0xfc>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	f043 0320 	orr.w	r3, r3, #32
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	2378      	movs	r3, #120	; 0x78
 8008dc0:	4828      	ldr	r0, [pc, #160]	; (8008e64 <_printf_i+0x248>)
 8008dc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dc6:	e7e3      	b.n	8008d90 <_printf_i+0x174>
 8008dc8:	0659      	lsls	r1, r3, #25
 8008dca:	bf48      	it	mi
 8008dcc:	b2b6      	uxthmi	r6, r6
 8008dce:	e7e6      	b.n	8008d9e <_printf_i+0x182>
 8008dd0:	4615      	mov	r5, r2
 8008dd2:	e7bb      	b.n	8008d4c <_printf_i+0x130>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	6826      	ldr	r6, [r4, #0]
 8008dd8:	6961      	ldr	r1, [r4, #20]
 8008dda:	1d18      	adds	r0, r3, #4
 8008ddc:	6028      	str	r0, [r5, #0]
 8008dde:	0635      	lsls	r5, r6, #24
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	d501      	bpl.n	8008de8 <_printf_i+0x1cc>
 8008de4:	6019      	str	r1, [r3, #0]
 8008de6:	e002      	b.n	8008dee <_printf_i+0x1d2>
 8008de8:	0670      	lsls	r0, r6, #25
 8008dea:	d5fb      	bpl.n	8008de4 <_printf_i+0x1c8>
 8008dec:	8019      	strh	r1, [r3, #0]
 8008dee:	2300      	movs	r3, #0
 8008df0:	6123      	str	r3, [r4, #16]
 8008df2:	4615      	mov	r5, r2
 8008df4:	e7ba      	b.n	8008d6c <_printf_i+0x150>
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	1d1a      	adds	r2, r3, #4
 8008dfa:	602a      	str	r2, [r5, #0]
 8008dfc:	681d      	ldr	r5, [r3, #0]
 8008dfe:	6862      	ldr	r2, [r4, #4]
 8008e00:	2100      	movs	r1, #0
 8008e02:	4628      	mov	r0, r5
 8008e04:	f7f7 f9ec 	bl	80001e0 <memchr>
 8008e08:	b108      	cbz	r0, 8008e0e <_printf_i+0x1f2>
 8008e0a:	1b40      	subs	r0, r0, r5
 8008e0c:	6060      	str	r0, [r4, #4]
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	2300      	movs	r3, #0
 8008e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e18:	e7a8      	b.n	8008d6c <_printf_i+0x150>
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	462a      	mov	r2, r5
 8008e1e:	4649      	mov	r1, r9
 8008e20:	4640      	mov	r0, r8
 8008e22:	47d0      	blx	sl
 8008e24:	3001      	adds	r0, #1
 8008e26:	d0ab      	beq.n	8008d80 <_printf_i+0x164>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	079b      	lsls	r3, r3, #30
 8008e2c:	d413      	bmi.n	8008e56 <_printf_i+0x23a>
 8008e2e:	68e0      	ldr	r0, [r4, #12]
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	4298      	cmp	r0, r3
 8008e34:	bfb8      	it	lt
 8008e36:	4618      	movlt	r0, r3
 8008e38:	e7a4      	b.n	8008d84 <_printf_i+0x168>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4640      	mov	r0, r8
 8008e42:	47d0      	blx	sl
 8008e44:	3001      	adds	r0, #1
 8008e46:	d09b      	beq.n	8008d80 <_printf_i+0x164>
 8008e48:	3501      	adds	r5, #1
 8008e4a:	68e3      	ldr	r3, [r4, #12]
 8008e4c:	9903      	ldr	r1, [sp, #12]
 8008e4e:	1a5b      	subs	r3, r3, r1
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	dcf2      	bgt.n	8008e3a <_printf_i+0x21e>
 8008e54:	e7eb      	b.n	8008e2e <_printf_i+0x212>
 8008e56:	2500      	movs	r5, #0
 8008e58:	f104 0619 	add.w	r6, r4, #25
 8008e5c:	e7f5      	b.n	8008e4a <_printf_i+0x22e>
 8008e5e:	bf00      	nop
 8008e60:	080091c1 	.word	0x080091c1
 8008e64:	080091d2 	.word	0x080091d2

08008e68 <memmove>:
 8008e68:	4288      	cmp	r0, r1
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	eb01 0402 	add.w	r4, r1, r2
 8008e70:	d902      	bls.n	8008e78 <memmove+0x10>
 8008e72:	4284      	cmp	r4, r0
 8008e74:	4623      	mov	r3, r4
 8008e76:	d807      	bhi.n	8008e88 <memmove+0x20>
 8008e78:	1e43      	subs	r3, r0, #1
 8008e7a:	42a1      	cmp	r1, r4
 8008e7c:	d008      	beq.n	8008e90 <memmove+0x28>
 8008e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e86:	e7f8      	b.n	8008e7a <memmove+0x12>
 8008e88:	4402      	add	r2, r0
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	428a      	cmp	r2, r1
 8008e8e:	d100      	bne.n	8008e92 <memmove+0x2a>
 8008e90:	bd10      	pop	{r4, pc}
 8008e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e9a:	e7f7      	b.n	8008e8c <memmove+0x24>

08008e9c <_free_r>:
 8008e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e9e:	2900      	cmp	r1, #0
 8008ea0:	d044      	beq.n	8008f2c <_free_r+0x90>
 8008ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea6:	9001      	str	r0, [sp, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8008eae:	bfb8      	it	lt
 8008eb0:	18e4      	addlt	r4, r4, r3
 8008eb2:	f000 f913 	bl	80090dc <__malloc_lock>
 8008eb6:	4a1e      	ldr	r2, [pc, #120]	; (8008f30 <_free_r+0x94>)
 8008eb8:	9801      	ldr	r0, [sp, #4]
 8008eba:	6813      	ldr	r3, [r2, #0]
 8008ebc:	b933      	cbnz	r3, 8008ecc <_free_r+0x30>
 8008ebe:	6063      	str	r3, [r4, #4]
 8008ec0:	6014      	str	r4, [r2, #0]
 8008ec2:	b003      	add	sp, #12
 8008ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ec8:	f000 b90e 	b.w	80090e8 <__malloc_unlock>
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d908      	bls.n	8008ee2 <_free_r+0x46>
 8008ed0:	6825      	ldr	r5, [r4, #0]
 8008ed2:	1961      	adds	r1, r4, r5
 8008ed4:	428b      	cmp	r3, r1
 8008ed6:	bf01      	itttt	eq
 8008ed8:	6819      	ldreq	r1, [r3, #0]
 8008eda:	685b      	ldreq	r3, [r3, #4]
 8008edc:	1949      	addeq	r1, r1, r5
 8008ede:	6021      	streq	r1, [r4, #0]
 8008ee0:	e7ed      	b.n	8008ebe <_free_r+0x22>
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	b10b      	cbz	r3, 8008eec <_free_r+0x50>
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d9fa      	bls.n	8008ee2 <_free_r+0x46>
 8008eec:	6811      	ldr	r1, [r2, #0]
 8008eee:	1855      	adds	r5, r2, r1
 8008ef0:	42a5      	cmp	r5, r4
 8008ef2:	d10b      	bne.n	8008f0c <_free_r+0x70>
 8008ef4:	6824      	ldr	r4, [r4, #0]
 8008ef6:	4421      	add	r1, r4
 8008ef8:	1854      	adds	r4, r2, r1
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	d1e0      	bne.n	8008ec2 <_free_r+0x26>
 8008f00:	681c      	ldr	r4, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	6053      	str	r3, [r2, #4]
 8008f06:	4421      	add	r1, r4
 8008f08:	6011      	str	r1, [r2, #0]
 8008f0a:	e7da      	b.n	8008ec2 <_free_r+0x26>
 8008f0c:	d902      	bls.n	8008f14 <_free_r+0x78>
 8008f0e:	230c      	movs	r3, #12
 8008f10:	6003      	str	r3, [r0, #0]
 8008f12:	e7d6      	b.n	8008ec2 <_free_r+0x26>
 8008f14:	6825      	ldr	r5, [r4, #0]
 8008f16:	1961      	adds	r1, r4, r5
 8008f18:	428b      	cmp	r3, r1
 8008f1a:	bf04      	itt	eq
 8008f1c:	6819      	ldreq	r1, [r3, #0]
 8008f1e:	685b      	ldreq	r3, [r3, #4]
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	bf04      	itt	eq
 8008f24:	1949      	addeq	r1, r1, r5
 8008f26:	6021      	streq	r1, [r4, #0]
 8008f28:	6054      	str	r4, [r2, #4]
 8008f2a:	e7ca      	b.n	8008ec2 <_free_r+0x26>
 8008f2c:	b003      	add	sp, #12
 8008f2e:	bd30      	pop	{r4, r5, pc}
 8008f30:	2000050c 	.word	0x2000050c

08008f34 <sbrk_aligned>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	4e0e      	ldr	r6, [pc, #56]	; (8008f70 <sbrk_aligned+0x3c>)
 8008f38:	460c      	mov	r4, r1
 8008f3a:	6831      	ldr	r1, [r6, #0]
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	b911      	cbnz	r1, 8008f46 <sbrk_aligned+0x12>
 8008f40:	f000 f8bc 	bl	80090bc <_sbrk_r>
 8008f44:	6030      	str	r0, [r6, #0]
 8008f46:	4621      	mov	r1, r4
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f000 f8b7 	bl	80090bc <_sbrk_r>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	d00a      	beq.n	8008f68 <sbrk_aligned+0x34>
 8008f52:	1cc4      	adds	r4, r0, #3
 8008f54:	f024 0403 	bic.w	r4, r4, #3
 8008f58:	42a0      	cmp	r0, r4
 8008f5a:	d007      	beq.n	8008f6c <sbrk_aligned+0x38>
 8008f5c:	1a21      	subs	r1, r4, r0
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 f8ac 	bl	80090bc <_sbrk_r>
 8008f64:	3001      	adds	r0, #1
 8008f66:	d101      	bne.n	8008f6c <sbrk_aligned+0x38>
 8008f68:	f04f 34ff 	mov.w	r4, #4294967295
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}
 8008f70:	20000510 	.word	0x20000510

08008f74 <_malloc_r>:
 8008f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f78:	1ccd      	adds	r5, r1, #3
 8008f7a:	f025 0503 	bic.w	r5, r5, #3
 8008f7e:	3508      	adds	r5, #8
 8008f80:	2d0c      	cmp	r5, #12
 8008f82:	bf38      	it	cc
 8008f84:	250c      	movcc	r5, #12
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	4607      	mov	r7, r0
 8008f8a:	db01      	blt.n	8008f90 <_malloc_r+0x1c>
 8008f8c:	42a9      	cmp	r1, r5
 8008f8e:	d905      	bls.n	8008f9c <_malloc_r+0x28>
 8008f90:	230c      	movs	r3, #12
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	2600      	movs	r6, #0
 8008f96:	4630      	mov	r0, r6
 8008f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f9c:	4e2e      	ldr	r6, [pc, #184]	; (8009058 <_malloc_r+0xe4>)
 8008f9e:	f000 f89d 	bl	80090dc <__malloc_lock>
 8008fa2:	6833      	ldr	r3, [r6, #0]
 8008fa4:	461c      	mov	r4, r3
 8008fa6:	bb34      	cbnz	r4, 8008ff6 <_malloc_r+0x82>
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4638      	mov	r0, r7
 8008fac:	f7ff ffc2 	bl	8008f34 <sbrk_aligned>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	d14d      	bne.n	8009052 <_malloc_r+0xde>
 8008fb6:	6834      	ldr	r4, [r6, #0]
 8008fb8:	4626      	mov	r6, r4
 8008fba:	2e00      	cmp	r6, #0
 8008fbc:	d140      	bne.n	8009040 <_malloc_r+0xcc>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	eb04 0803 	add.w	r8, r4, r3
 8008fc8:	f000 f878 	bl	80090bc <_sbrk_r>
 8008fcc:	4580      	cmp	r8, r0
 8008fce:	d13a      	bne.n	8009046 <_malloc_r+0xd2>
 8008fd0:	6821      	ldr	r1, [r4, #0]
 8008fd2:	3503      	adds	r5, #3
 8008fd4:	1a6d      	subs	r5, r5, r1
 8008fd6:	f025 0503 	bic.w	r5, r5, #3
 8008fda:	3508      	adds	r5, #8
 8008fdc:	2d0c      	cmp	r5, #12
 8008fde:	bf38      	it	cc
 8008fe0:	250c      	movcc	r5, #12
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f7ff ffa5 	bl	8008f34 <sbrk_aligned>
 8008fea:	3001      	adds	r0, #1
 8008fec:	d02b      	beq.n	8009046 <_malloc_r+0xd2>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	442b      	add	r3, r5
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	e00e      	b.n	8009014 <_malloc_r+0xa0>
 8008ff6:	6822      	ldr	r2, [r4, #0]
 8008ff8:	1b52      	subs	r2, r2, r5
 8008ffa:	d41e      	bmi.n	800903a <_malloc_r+0xc6>
 8008ffc:	2a0b      	cmp	r2, #11
 8008ffe:	d916      	bls.n	800902e <_malloc_r+0xba>
 8009000:	1961      	adds	r1, r4, r5
 8009002:	42a3      	cmp	r3, r4
 8009004:	6025      	str	r5, [r4, #0]
 8009006:	bf18      	it	ne
 8009008:	6059      	strne	r1, [r3, #4]
 800900a:	6863      	ldr	r3, [r4, #4]
 800900c:	bf08      	it	eq
 800900e:	6031      	streq	r1, [r6, #0]
 8009010:	5162      	str	r2, [r4, r5]
 8009012:	604b      	str	r3, [r1, #4]
 8009014:	4638      	mov	r0, r7
 8009016:	f104 060b 	add.w	r6, r4, #11
 800901a:	f000 f865 	bl	80090e8 <__malloc_unlock>
 800901e:	f026 0607 	bic.w	r6, r6, #7
 8009022:	1d23      	adds	r3, r4, #4
 8009024:	1af2      	subs	r2, r6, r3
 8009026:	d0b6      	beq.n	8008f96 <_malloc_r+0x22>
 8009028:	1b9b      	subs	r3, r3, r6
 800902a:	50a3      	str	r3, [r4, r2]
 800902c:	e7b3      	b.n	8008f96 <_malloc_r+0x22>
 800902e:	6862      	ldr	r2, [r4, #4]
 8009030:	42a3      	cmp	r3, r4
 8009032:	bf0c      	ite	eq
 8009034:	6032      	streq	r2, [r6, #0]
 8009036:	605a      	strne	r2, [r3, #4]
 8009038:	e7ec      	b.n	8009014 <_malloc_r+0xa0>
 800903a:	4623      	mov	r3, r4
 800903c:	6864      	ldr	r4, [r4, #4]
 800903e:	e7b2      	b.n	8008fa6 <_malloc_r+0x32>
 8009040:	4634      	mov	r4, r6
 8009042:	6876      	ldr	r6, [r6, #4]
 8009044:	e7b9      	b.n	8008fba <_malloc_r+0x46>
 8009046:	230c      	movs	r3, #12
 8009048:	603b      	str	r3, [r7, #0]
 800904a:	4638      	mov	r0, r7
 800904c:	f000 f84c 	bl	80090e8 <__malloc_unlock>
 8009050:	e7a1      	b.n	8008f96 <_malloc_r+0x22>
 8009052:	6025      	str	r5, [r4, #0]
 8009054:	e7de      	b.n	8009014 <_malloc_r+0xa0>
 8009056:	bf00      	nop
 8009058:	2000050c 	.word	0x2000050c

0800905c <_realloc_r>:
 800905c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	4680      	mov	r8, r0
 8009062:	4614      	mov	r4, r2
 8009064:	460e      	mov	r6, r1
 8009066:	b921      	cbnz	r1, 8009072 <_realloc_r+0x16>
 8009068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	4611      	mov	r1, r2
 800906e:	f7ff bf81 	b.w	8008f74 <_malloc_r>
 8009072:	b92a      	cbnz	r2, 8009080 <_realloc_r+0x24>
 8009074:	f7ff ff12 	bl	8008e9c <_free_r>
 8009078:	4625      	mov	r5, r4
 800907a:	4628      	mov	r0, r5
 800907c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009080:	f000 f838 	bl	80090f4 <_malloc_usable_size_r>
 8009084:	4284      	cmp	r4, r0
 8009086:	4607      	mov	r7, r0
 8009088:	d802      	bhi.n	8009090 <_realloc_r+0x34>
 800908a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800908e:	d812      	bhi.n	80090b6 <_realloc_r+0x5a>
 8009090:	4621      	mov	r1, r4
 8009092:	4640      	mov	r0, r8
 8009094:	f7ff ff6e 	bl	8008f74 <_malloc_r>
 8009098:	4605      	mov	r5, r0
 800909a:	2800      	cmp	r0, #0
 800909c:	d0ed      	beq.n	800907a <_realloc_r+0x1e>
 800909e:	42bc      	cmp	r4, r7
 80090a0:	4622      	mov	r2, r4
 80090a2:	4631      	mov	r1, r6
 80090a4:	bf28      	it	cs
 80090a6:	463a      	movcs	r2, r7
 80090a8:	f7ff fbb8 	bl	800881c <memcpy>
 80090ac:	4631      	mov	r1, r6
 80090ae:	4640      	mov	r0, r8
 80090b0:	f7ff fef4 	bl	8008e9c <_free_r>
 80090b4:	e7e1      	b.n	800907a <_realloc_r+0x1e>
 80090b6:	4635      	mov	r5, r6
 80090b8:	e7df      	b.n	800907a <_realloc_r+0x1e>
	...

080090bc <_sbrk_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	; (80090d8 <_sbrk_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f7 fd1e 	bl	8000b08 <_sbrk>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_sbrk_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_sbrk_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20000514 	.word	0x20000514

080090dc <__malloc_lock>:
 80090dc:	4801      	ldr	r0, [pc, #4]	; (80090e4 <__malloc_lock+0x8>)
 80090de:	f000 b811 	b.w	8009104 <__retarget_lock_acquire_recursive>
 80090e2:	bf00      	nop
 80090e4:	20000518 	.word	0x20000518

080090e8 <__malloc_unlock>:
 80090e8:	4801      	ldr	r0, [pc, #4]	; (80090f0 <__malloc_unlock+0x8>)
 80090ea:	f000 b80c 	b.w	8009106 <__retarget_lock_release_recursive>
 80090ee:	bf00      	nop
 80090f0:	20000518 	.word	0x20000518

080090f4 <_malloc_usable_size_r>:
 80090f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090f8:	1f18      	subs	r0, r3, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfbc      	itt	lt
 80090fe:	580b      	ldrlt	r3, [r1, r0]
 8009100:	18c0      	addlt	r0, r0, r3
 8009102:	4770      	bx	lr

08009104 <__retarget_lock_acquire_recursive>:
 8009104:	4770      	bx	lr

08009106 <__retarget_lock_release_recursive>:
 8009106:	4770      	bx	lr

08009108 <_init>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	bf00      	nop
 800910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910e:	bc08      	pop	{r3}
 8009110:	469e      	mov	lr, r3
 8009112:	4770      	bx	lr

08009114 <_fini>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr
