
GYRO_ACC_SAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007be0  08007be0  00017be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008014  08008014  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800801c  0800801c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800801c  0800801c  0001801c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08008024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000218  08008238  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08008238  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010794  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248a  00000000  00000000  000309d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00032e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00033c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021403  00000000  00000000  00034950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010908  00000000  00000000  00055d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4ab1  00000000  00000000  0006665b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b10c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a44  00000000  00000000  0012b15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bc8 	.word	0x08007bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08007bc8 	.word	0x08007bc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <Gyro_Modulo>:
Gyro_State_t State = GYRO_STATE_NOT_INIT;

// private functions

void Gyro_Modulo(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	while ( Gyro_Data.integral < 0.0f || Gyro_Data.integral > 360.0f ){
 8000f50:	e027      	b.n	8000fa2 <Gyro_Modulo+0x56>
		 if(Gyro_Data.integral > 360.0f)
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <Gyro_Modulo+0x88>)
 8000f54:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f58:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000fd8 <Gyro_Modulo+0x8c>
 8000f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f64:	dd0a      	ble.n	8000f7c <Gyro_Modulo+0x30>
			 Gyro_Data.integral -= 360.0f;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <Gyro_Modulo+0x88>)
 8000f68:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f6c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fd8 <Gyro_Modulo+0x8c>
 8000f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <Gyro_Modulo+0x88>)
 8000f76:	edc3 7a07 	vstr	s15, [r3, #28]
 8000f7a:	e012      	b.n	8000fa2 <Gyro_Modulo+0x56>
		 else if (Gyro_Data.integral < 0.0f)
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <Gyro_Modulo+0x88>)
 8000f7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	d400      	bmi.n	8000f8e <Gyro_Modulo+0x42>
 8000f8c:	e009      	b.n	8000fa2 <Gyro_Modulo+0x56>
			 Gyro_Data.integral += 360.0f;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <Gyro_Modulo+0x88>)
 8000f90:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f94:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000fd8 <Gyro_Modulo+0x8c>
 8000f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <Gyro_Modulo+0x88>)
 8000f9e:	edc3 7a07 	vstr	s15, [r3, #28]
	while ( Gyro_Data.integral < 0.0f || Gyro_Data.integral > 360.0f ){
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <Gyro_Modulo+0x88>)
 8000fa4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d4cf      	bmi.n	8000f52 <Gyro_Modulo+0x6>
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <Gyro_Modulo+0x88>)
 8000fb4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fb8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000fd8 <Gyro_Modulo+0x8c>
 8000fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc4:	dcc5      	bgt.n	8000f52 <Gyro_Modulo+0x6>
	 }
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000238 	.word	0x20000238
 8000fd8:	43b40000 	.word	0x43b40000

08000fdc <Gyro_TransformData>:

void Gyro_TransformData(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	Gyro_Data.rate = (float)(Gyro_Data.raw) * Descriptor_Gyro->Config->scaler - Gyro_Data.offset;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <Gyro_TransformData+0x3c>)
 8000fe2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <Gyro_TransformData+0x40>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <Gyro_TransformData+0x3c>)
 8000ffe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <Gyro_TransformData+0x3c>)
 8001008:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000238 	.word	0x20000238
 800101c:	20000234 	.word	0x20000234

08001020 <Gyro_GetData>:

void Gyro_GetData(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	 Gyro_Data.raw = MPU6050_GetData_CF();
 8001024:	f000 fb3a 	bl	800169c <MPU6050_GetData_CF>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <Gyro_GetData+0x18>)
 800102e:	829a      	strh	r2, [r3, #20]
	 Gyro_TransformData();
 8001030:	f7ff ffd4 	bl	8000fdc <Gyro_TransformData>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000238 	.word	0x20000238

0800103c <Gyro_NewData>:

Gyro_NewData_t Gyro_NewData(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	return (Gyro_NewData_t)MPU6050_NewData();
 8001040:	f000 fb20 	bl	8001684 <MPU6050_NewData>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <Gyro_ResetAccumulator>:

void Gyro_ResetAccumulator(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	 Gyro_Data.accumulator = 0.0;
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <Gyro_ResetAccumulator+0x24>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	e9c1 2300 	strd	r2, r3, [r1]
	 Gyro_Data.counter = 0;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <Gyro_ResetAccumulator+0x24>)
 8001060:	2200      	movs	r2, #0
 8001062:	811a      	strh	r2, [r3, #8]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000238 	.word	0x20000238

08001074 <Gyro_Accumulate>:

void Gyro_Accumulate(void)
{
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	af00      	add	r7, sp, #0
	if(Gyro_NewData()==GYRO_DATA_AVAILABLE)
 8001078:	f7ff ffe0 	bl	800103c <Gyro_NewData>
 800107c:	4603      	mov	r3, r0
 800107e:	2b01      	cmp	r3, #1
 8001080:	d11a      	bne.n	80010b8 <Gyro_Accumulate+0x44>
	{
		Gyro_GetData();
 8001082:	f7ff ffcd 	bl	8001020 <Gyro_GetData>
		Gyro_Data.accumulator += (double)(Gyro_Data.rate);
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <Gyro_Accumulate+0x48>)
 8001088:	e9d3 4500 	ldrd	r4, r5, [r3]
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <Gyro_Accumulate+0x48>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa59 	bl	8000548 <__aeabi_f2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4620      	mov	r0, r4
 800109c:	4629      	mov	r1, r5
 800109e:	f7ff f8f5 	bl	800028c <__adddf3>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4905      	ldr	r1, [pc, #20]	; (80010bc <Gyro_Accumulate+0x48>)
 80010a8:	e9c1 2300 	strd	r2, r3, [r1]
		Gyro_Data.counter++;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <Gyro_Accumulate+0x48>)
 80010ae:	891b      	ldrh	r3, [r3, #8]
 80010b0:	3301      	adds	r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <Gyro_Accumulate+0x48>)
 80010b6:	811a      	strh	r2, [r3, #8]
	}
}
 80010b8:	bf00      	nop
 80010ba:	bdb0      	pop	{r4, r5, r7, pc}
 80010bc:	20000238 	.word	0x20000238

080010c0 <Gyro_SetOffset>:

void Gyro_SetOffset(void)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	Gyro_Data.offset = (float)(Gyro_Data.accumulator / (double)(Gyro_Data.counter+1));
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <Gyro_SetOffset+0x38>)
 80010c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <Gyro_SetOffset+0x38>)
 80010cc:	891b      	ldrh	r3, [r3, #8]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa27 	bl	8000524 <__aeabi_i2d>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4620      	mov	r0, r4
 80010dc:	4629      	mov	r1, r5
 80010de:	f7ff fbb5 	bl	800084c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd5d 	bl	8000ba8 <__aeabi_d2f>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a01      	ldr	r2, [pc, #4]	; (80010f8 <Gyro_SetOffset+0x38>)
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}
 80010f8:	20000238 	.word	0x20000238

080010fc <Gyro_Estimate>:

void Gyro_Estimate(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	if(Gyro_NewData()==GYRO_DATA_AVAILABLE)
 8001100:	f7ff ff9c 	bl	800103c <Gyro_NewData>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d111      	bne.n	800112e <Gyro_Estimate+0x32>
	{
		 Gyro_GetData();
 800110a:	f7ff ff89 	bl	8001020 <Gyro_GetData>
		 Gyro_Data.integral += Gyro_Data.rate - Gyro_Data.offset;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <Gyro_Estimate+0x38>)
 8001110:	ed93 7a07 	vldr	s14, [r3, #28]
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <Gyro_Estimate+0x38>)
 8001116:	edd3 6a06 	vldr	s13, [r3, #24]
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <Gyro_Estimate+0x38>)
 800111c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001120:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <Gyro_Estimate+0x38>)
 800112a:	edc3 7a07 	vstr	s15, [r3, #28]
	}
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000238 	.word	0x20000238

08001138 <Gyro_FSM>:

void Gyro_FSM(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	// actions
	switch(State)
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <Gyro_FSM+0xc4>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d821      	bhi.n	8001188 <Gyro_FSM+0x50>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <Gyro_FSM+0x14>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	08001189 	.word	0x08001189
 8001150:	08001161 	.word	0x08001161
 8001154:	08001167 	.word	0x08001167
 8001158:	0800116d 	.word	0x0800116d
 800115c:	08001173 	.word	0x08001173
	case GYRO_STATE_NOT_INIT :
		// NOP
		break;

	case GYRO_STATE_INIT :
		Gyro_ResetAccumulator();
 8001160:	f7ff ff74 	bl	800104c <Gyro_ResetAccumulator>
		break;
 8001164:	e013      	b.n	800118e <Gyro_FSM+0x56>

	case GYRO_STATE_CALIBRATION :
		Gyro_Accumulate();
 8001166:	f7ff ff85 	bl	8001074 <Gyro_Accumulate>
		break;
 800116a:	e010      	b.n	800118e <Gyro_FSM+0x56>

	case GYRO_STATE_APPLY_CALIBRATION :
		Gyro_SetOffset();
 800116c:	f7ff ffa8 	bl	80010c0 <Gyro_SetOffset>
		break;
 8001170:	e00d      	b.n	800118e <Gyro_FSM+0x56>

	case GYRO_STATE_READY:
		Gyro_Estimate();
 8001172:	f7ff ffc3 	bl	80010fc <Gyro_Estimate>
		if( Descriptor_Gyro->Config->use_modulo )
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <Gyro_FSM+0xc8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <Gyro_FSM+0x54>
			Gyro_Modulo();
 8001182:	f7ff fee3 	bl	8000f4c <Gyro_Modulo>
		break;
 8001186:	e001      	b.n	800118c <Gyro_FSM+0x54>

	default :
		break;
 8001188:	bf00      	nop
 800118a:	e000      	b.n	800118e <Gyro_FSM+0x56>
		break;
 800118c:	bf00      	nop
	}

	// transitions
	switch(State)
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <Gyro_FSM+0xc4>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b04      	cmp	r3, #4
 8001194:	d82c      	bhi.n	80011f0 <Gyro_FSM+0xb8>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <Gyro_FSM+0x64>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011f1 	.word	0x080011f1
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	080011cd 	.word	0x080011cd
 80011a8:	080011e9 	.word	0x080011e9
 80011ac:	080011f1 	.word	0x080011f1
	case GYRO_STATE_NOT_INIT :
		// NOP
		break;

	case GYRO_STATE_INIT :
		if( Descriptor_Gyro->Config->skip_calibration )
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <Gyro_FSM+0xc8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	791b      	ldrb	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <Gyro_FSM+0x8c>
			State = GYRO_STATE_READY;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <Gyro_FSM+0xc4>)
 80011be:	2204      	movs	r2, #4
 80011c0:	701a      	strb	r2, [r3, #0]
		else
			State = GYRO_STATE_CALIBRATION;
		break;
 80011c2:	e018      	b.n	80011f6 <Gyro_FSM+0xbe>
			State = GYRO_STATE_CALIBRATION;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <Gyro_FSM+0xc4>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
		break;
 80011ca:	e014      	b.n	80011f6 <Gyro_FSM+0xbe>

	case GYRO_STATE_CALIBRATION :
		if( Gyro_Data.counter >= Descriptor_Gyro->Config->mean_etimation_samples_number - 1 )
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <Gyro_FSM+0xcc>)
 80011ce:	891b      	ldrh	r3, [r3, #8]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <Gyro_FSM+0xc8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	885b      	ldrh	r3, [r3, #2]
 80011da:	3b01      	subs	r3, #1
 80011dc:	429a      	cmp	r2, r3
 80011de:	db09      	blt.n	80011f4 <Gyro_FSM+0xbc>
			State = GYRO_STATE_APPLY_CALIBRATION;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <Gyro_FSM+0xc4>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	701a      	strb	r2, [r3, #0]
		break;
 80011e6:	e005      	b.n	80011f4 <Gyro_FSM+0xbc>

	case GYRO_STATE_APPLY_CALIBRATION :
		State = GYRO_STATE_READY;
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <Gyro_FSM+0xc4>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	701a      	strb	r2, [r3, #0]
		break;
 80011ee:	e002      	b.n	80011f6 <Gyro_FSM+0xbe>
	case GYRO_STATE_READY:
		// NOP
		break;

	default :
		break;
 80011f0:	bf00      	nop
 80011f2:	e000      	b.n	80011f6 <Gyro_FSM+0xbe>
		break;
 80011f4:	bf00      	nop
	}
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000258 	.word	0x20000258
 8001200:	20000234 	.word	0x20000234
 8001204:	20000238 	.word	0x20000238

08001208 <Gyro_Init>:

// public functions implementations

void Gyro_Init(Gyro_Desciptor_t * _Descriptor_Gyro)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	Descriptor_Gyro = _Descriptor_Gyro;
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <Gyro_Init+0x28>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
	Gyro_ResetAccumulator();
 8001216:	f7ff ff19 	bl	800104c <Gyro_ResetAccumulator>
	Gyro_SetRot(0);
 800121a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001234 <Gyro_Init+0x2c>
 800121e:	f000 f831 	bl	8001284 <Gyro_SetRot>
	State = GYRO_STATE_INIT;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <Gyro_Init+0x30>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000234 	.word	0x20000234
 8001234:	00000000 	.word	0x00000000
 8001238:	20000258 	.word	0x20000258

0800123c <Gyro_Process>:

void Gyro_Process(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	Gyro_FSM();
 8001240:	f7ff ff7a 	bl	8001138 <Gyro_FSM>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <Gyro_isReady>:
	Gyro_ResetAccumulator();
	State = GYRO_STATE_CALIBRATION;
}

_bool Gyro_isReady(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	return State == GYRO_STATE_READY;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <Gyro_isReady+0x1c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b04      	cmp	r3, #4
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	20000258 	.word	0x20000258

08001268 <Gyro_GetRot>:

float Gyro_GetRot(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	return Gyro_Data.integral;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <Gyro_GetRot+0x18>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	ee07 3a90 	vmov	s15, r3
}
 8001274:	eeb0 0a67 	vmov.f32	s0, s15
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	20000238 	.word	0x20000238

08001284 <Gyro_SetRot>:

void Gyro_SetRot(float newValue)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	ed87 0a01 	vstr	s0, [r7, #4]
	 Gyro_Data.integral = newValue;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <Gyro_SetRot+0x1c>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	61d3      	str	r3, [r2, #28]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	20000238 	.word	0x20000238

080012a4 <Gyro_GetCalibrationAdvancement>:

float Gyro_GetCalibrationAdvancement(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	return (float)(Gyro_Data.counter) * 100 / (float)(Descriptor_Gyro->Config->mean_etimation_samples_number);
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <Gyro_GetCalibrationAdvancement+0x3c>)
 80012aa:	891b      	ldrh	r3, [r3, #8]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80012e4 <Gyro_GetCalibrationAdvancement+0x40>
 80012b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <Gyro_GetCalibrationAdvancement+0x44>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	885b      	ldrh	r3, [r3, #2]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20000238 	.word	0x20000238
 80012e4:	42c80000 	.word	0x42c80000
 80012e8:	20000234 	.word	0x20000234

080012ec <MPU6050_Write_Reg>:
{
	return HAL_I2C_Mem_Read(Descriptor->hi2c, (Descriptor->I2C_Addr)<<1|0x01, addr, 1, dest, 1, MPU6050_TIMEOUT);
}

HAL_StatusTypeDef MPU6050_Write_Reg(MPU6050_REG_ADDR_t addr, uint8_t value)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Write(Descriptor->hi2c, Descriptor->I2C_Addr<<1, addr, 1, &value, 1, MPU6050_TIMEOUT);
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MPU6050_Write_Reg+0x44>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MPU6050_Write_Reg+0x44>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	b29b      	uxth	r3, r3
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	b299      	uxth	r1, r3
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	b29a      	uxth	r2, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	2301      	movs	r3, #1
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	1dbb      	adds	r3, r7, #6
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2301      	movs	r3, #1
 8001322:	f001 f96d 	bl	8002600 <HAL_I2C_Mem_Write>
 8001326:	4603      	mov	r3, r0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000025c 	.word	0x2000025c

08001334 <MPU6050_Read_Gyro>:

HAL_StatusTypeDef MPU6050_Read_Gyro(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af04      	add	r7, sp, #16
	return HAL_I2C_Mem_Read(Descriptor->hi2c, (Descriptor->I2C_Addr)<<1|0x01, MPU6050_REG_G_Z_H, 1, MPU6050_Data.raw, 2, MPU6050_TIMEOUT);
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <MPU6050_Read_Gyro+0x3c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MPU6050_Read_Gyro+0x3c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	791b      	ldrb	r3, [r3, #4]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	b21b      	sxth	r3, r3
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	b21b      	sxth	r3, r3
 8001350:	b299      	uxth	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2302      	movs	r3, #2
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <MPU6050_Read_Gyro+0x40>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	2247      	movs	r2, #71	; 0x47
 8001364:	f001 fa60 	bl	8002828 <HAL_I2C_Mem_Read>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000025c 	.word	0x2000025c
 8001374:	20000260 	.word	0x20000260

08001378 <MPU6050_Configure>:

HAL_StatusTypeDef MPU6050_Configure(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef error;
	uint8_t dtw;

	// clock configuration
	dtw = Descriptor->Config->Clock_Config & 0x07;
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <MPU6050_Configure+0x1e0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	795b      	ldrb	r3, [r3, #5]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_PWR_MGMT_1, dtw))
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4619      	mov	r1, r3
 8001390:	206b      	movs	r0, #107	; 0x6b
 8001392:	f7ff ffab 	bl	80012ec <MPU6050_Write_Reg>
 8001396:	4603      	mov	r3, r0
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MPU6050_Configure+0x2c>
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	e0d5      	b.n	8001550 <MPU6050_Configure+0x1d8>

	// sample rate divider
	dtw = Descriptor->Config->SampleRateDivider;
 80013a4:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <MPU6050_Configure+0x1e0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_SMPLRT_DIV, dtw))
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4619      	mov	r1, r3
 80013b2:	2019      	movs	r0, #25
 80013b4:	f7ff ff9a 	bl	80012ec <MPU6050_Write_Reg>
 80013b8:	4603      	mov	r3, r0
 80013ba:	71bb      	strb	r3, [r7, #6]
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MPU6050_Configure+0x4e>
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	e0c4      	b.n	8001550 <MPU6050_Configure+0x1d8>

	//general config
	dtw = Descriptor->Config->DLPF_Frequency & 0x07;
 80013c6:	4b64      	ldr	r3, [pc, #400]	; (8001558 <MPU6050_Configure+0x1e0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Ext_Sync_Set << 3 & 0x38;
 80013d4:	4b60      	ldr	r3, [pc, #384]	; (8001558 <MPU6050_Configure+0x1e0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	789b      	ldrb	r3, [r3, #2]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_CONFIG, dtw))
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4619      	mov	r1, r3
 80013f4:	201a      	movs	r0, #26
 80013f6:	f7ff ff79 	bl	80012ec <MPU6050_Write_Reg>
 80013fa:	4603      	mov	r3, r0
 80013fc:	71bb      	strb	r3, [r7, #6]
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MPU6050_Configure+0x90>
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	e0a3      	b.n	8001550 <MPU6050_Configure+0x1d8>

	// gyro config
	dtw = Descriptor->Config->Gyro_Sensitivity << 3 & 0x18;
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <MPU6050_Configure+0x1e0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	78db      	ldrb	r3, [r3, #3]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 0318 	and.w	r3, r3, #24
 8001418:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_GYRO_CONFIG, dtw))
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4619      	mov	r1, r3
 800141e:	201b      	movs	r0, #27
 8001420:	f7ff ff64 	bl	80012ec <MPU6050_Write_Reg>
 8001424:	4603      	mov	r3, r0
 8001426:	71bb      	strb	r3, [r7, #6]
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MPU6050_Configure+0xba>
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	e08e      	b.n	8001550 <MPU6050_Configure+0x1d8>

	// FIFO enable
	dtw = Descriptor->Config->Use_FIFO << 4 & 0x10;
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <MPU6050_Configure+0x1e0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_FIFO_EN, dtw))
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4619      	mov	r1, r3
 8001448:	2023      	movs	r0, #35	; 0x23
 800144a:	f7ff ff4f 	bl	80012ec <MPU6050_Write_Reg>
 800144e:	4603      	mov	r3, r0
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MPU6050_Configure+0xe4>
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	e079      	b.n	8001550 <MPU6050_Configure+0x1d8>

	// INT Pin config
	dtw = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Interrupt_Config->FSYNC_en 		<< 2;
 8001460:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <MPU6050_Configure+0x1e0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	795b      	ldrb	r3, [r3, #5]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	b25a      	sxtb	r2, r3
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	4313      	orrs	r3, r2
 8001474:	b25b      	sxtb	r3, r3
 8001476:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Interrupt_Config->FSYNC_level 	<< 3;
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <MPU6050_Configure+0x1e0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	791b      	ldrb	r3, [r3, #4]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	b25a      	sxtb	r2, r3
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	4313      	orrs	r3, r2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Interrupt_Config->clear_type		<< 4;
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <MPU6050_Configure+0x1e0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	b25a      	sxtb	r2, r3
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Interrupt_Config->latch_en 		<< 5;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <MPU6050_Configure+0x1e0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	789b      	ldrb	r3, [r3, #2]
 80014b2:	015b      	lsls	r3, r3, #5
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Interrupt_Config->output_type	<< 6;
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MPU6050_Configure+0x1e0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	785b      	ldrb	r3, [r3, #1]
 80014ca:	019b      	lsls	r3, r3, #6
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Interrupt_Config->level	 		<< 7;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MPU6050_Configure+0x1e0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	01db      	lsls	r3, r3, #7
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	71fb      	strb	r3, [r7, #7]
	ASSERT_FUNC(MPU6050_Write_Reg(MPU6050_REG_INT_PIN_CFG, dtw))
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4619      	mov	r1, r3
 80014f4:	2037      	movs	r0, #55	; 0x37
 80014f6:	f7ff fef9 	bl	80012ec <MPU6050_Write_Reg>
 80014fa:	4603      	mov	r3, r0
 80014fc:	71bb      	strb	r3, [r7, #6]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MPU6050_Configure+0x190>
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	e023      	b.n	8001550 <MPU6050_Configure+0x1d8>

	// INT Enable
	dtw = Descriptor->Config->Interrupt_Config->Mask_DRDY;
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <MPU6050_Configure+0x1e0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	7a1b      	ldrb	r3, [r3, #8]
 8001512:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Interrupt_Config->Mask_MST_INT << 3;
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MPU6050_Configure+0x1e0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	79db      	ldrb	r3, [r3, #7]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	b25a      	sxtb	r2, r3
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	4313      	orrs	r3, r2
 8001528:	b25b      	sxtb	r3, r3
 800152a:	71fb      	strb	r3, [r7, #7]
	dtw |= Descriptor->Config->Interrupt_Config->Mask_FIFO << 4;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <MPU6050_Configure+0x1e0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	799b      	ldrb	r3, [r3, #6]
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	b25a      	sxtb	r2, r3
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	4313      	orrs	r3, r2
 8001540:	b25b      	sxtb	r3, r3
 8001542:	71fb      	strb	r3, [r7, #7]
	return MPU6050_Write_Reg(MPU6050_REG_INT_ENABLE, dtw);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4619      	mov	r1, r3
 8001548:	2038      	movs	r0, #56	; 0x38
 800154a:	f7ff fecf 	bl	80012ec <MPU6050_Write_Reg>
 800154e:	4603      	mov	r3, r0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	2000025c 	.word	0x2000025c

0800155c <MPU6050_FSM>:

void MPU6050_FSM(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef error;

	switch(state)
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <MPU6050_FSM+0xc0>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d829      	bhi.n	80015be <MPU6050_FSM+0x62>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <MPU6050_FSM+0x14>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	080015bf 	.word	0x080015bf
 8001574:	08001581 	.word	0x08001581
 8001578:	08001591 	.word	0x08001591
 800157c:	080015bf 	.word	0x080015bf
	{
	case MPU6050_STATE_NOT_INIT :
		//NOP
		break;
	case MPU6050_STATE_INIT :
		error = MPU6050_Configure();
 8001580:	f7ff fefa 	bl	8001378 <MPU6050_Configure>
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
		error_count = 0;
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <MPU6050_FSM+0xc4>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		break;
 800158e:	e019      	b.n	80015c4 <MPU6050_FSM+0x68>
	case MPU6050_STATE_READY :
		if(Flags.int_triggered)
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <MPU6050_FSM+0xc8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d014      	beq.n	80015c2 <MPU6050_FSM+0x66>
		{
			error = MPU6050_Read_Gyro();
 8001598:	f7ff fecc 	bl	8001334 <MPU6050_Read_Gyro>
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]

			if(error!=HAL_OK) error_count++;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <MPU6050_FSM+0x54>
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MPU6050_FSM+0xc4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <MPU6050_FSM+0xc4>)
 80015ae:	6013      	str	r3, [r2, #0]

			Flags.new_data = TRUE;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MPU6050_FSM+0xc8>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	705a      	strb	r2, [r3, #1]

			Flags.int_triggered = FALSE;
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MPU6050_FSM+0xc8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
		}
		break;
 80015bc:	e001      	b.n	80015c2 <MPU6050_FSM+0x66>
	case MPU6050_STATE_ERROR :
		//NOP
		break;
	default :
		//NOP
		break;
 80015be:	bf00      	nop
 80015c0:	e000      	b.n	80015c4 <MPU6050_FSM+0x68>
		break;
 80015c2:	bf00      	nop
	}

	switch(state)
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MPU6050_FSM+0xc0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d820      	bhi.n	800160e <MPU6050_FSM+0xb2>
 80015cc:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <MPU6050_FSM+0x78>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	0800160f 	.word	0x0800160f
 80015d8:	080015e5 	.word	0x080015e5
 80015dc:	080015fb 	.word	0x080015fb
 80015e0:	0800160f 	.word	0x0800160f
	{
	case MPU6050_STATE_NOT_INIT :
		//NOP
		break;
	case MPU6050_STATE_INIT :
		if(error==HAL_OK)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <MPU6050_FSM+0x96>
			state = MPU6050_STATE_READY;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MPU6050_FSM+0xc0>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	701a      	strb	r2, [r3, #0]
		else
			state = MPU6050_STATE_ERROR;
		break;
 80015f0:	e010      	b.n	8001614 <MPU6050_FSM+0xb8>
			state = MPU6050_STATE_ERROR;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MPU6050_FSM+0xc0>)
 80015f4:	2203      	movs	r2, #3
 80015f6:	701a      	strb	r2, [r3, #0]
		break;
 80015f8:	e00c      	b.n	8001614 <MPU6050_FSM+0xb8>
	case MPU6050_STATE_READY :
		if(error_count>MPU6050_ERROR_LIMIT)
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MPU6050_FSM+0xc4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f647 7238 	movw	r2, #32568	; 0x7f38
 8001602:	4293      	cmp	r3, r2
 8001604:	d905      	bls.n	8001612 <MPU6050_FSM+0xb6>
			state = MPU6050_STATE_ERROR;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <MPU6050_FSM+0xc0>)
 8001608:	2203      	movs	r2, #3
 800160a:	701a      	strb	r2, [r3, #0]
		break;
 800160c:	e001      	b.n	8001612 <MPU6050_FSM+0xb6>
	case MPU6050_STATE_ERROR :
		//NOP
		break;
	default :
		//NOP
		break;
 800160e:	bf00      	nop
 8001610:	e000      	b.n	8001614 <MPU6050_FSM+0xb8>
		break;
 8001612:	bf00      	nop
	}
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000267 	.word	0x20000267
 8001620:	20000268 	.word	0x20000268
 8001624:	20000264 	.word	0x20000264

08001628 <MPU6050_Init>:


// public functions implementations

void MPU6050_Init(MPU6050_Descriptor_t * _Descriptor)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	Flags.int_triggered = 0;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MPU6050_Init+0x2c>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
	Flags.new_data = 0;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MPU6050_Init+0x2c>)
 8001638:	2200      	movs	r2, #0
 800163a:	705a      	strb	r2, [r3, #1]

	Descriptor = _Descriptor;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <MPU6050_Init+0x30>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]

	state = MPU6050_STATE_INIT;
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <MPU6050_Init+0x34>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	20000264 	.word	0x20000264
 8001658:	2000025c 	.word	0x2000025c
 800165c:	20000267 	.word	0x20000267

08001660 <MPU6050_Process>:

void MPU6050_Process(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	MPU6050_FSM();
 8001664:	f7ff ff7a 	bl	800155c <MPU6050_FSM>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <MPU6050_Interrupt_Routine>:

void MPU6050_Interrupt_Routine(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	Flags.int_triggered = TRUE;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <MPU6050_Interrupt_Routine+0x14>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	20000264 	.word	0x20000264

08001684 <MPU6050_NewData>:

_bool MPU6050_NewData(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	return Flags.new_data;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <MPU6050_NewData+0x14>)
 800168a:	785b      	ldrb	r3, [r3, #1]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000264 	.word	0x20000264

0800169c <MPU6050_GetData_CF>:
{
	return MPU6050_Data.unified;
}

int16_t MPU6050_GetData_CF(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
	Flags.new_data = FALSE;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <MPU6050_GetData_CF+0x1c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	705a      	strb	r2, [r3, #1]
	return MPU6050_Data.unified;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <MPU6050_GetData_CF+0x20>)
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000264 	.word	0x20000264
 80016bc:	20000260 	.word	0x20000260

080016c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016e8:	e000      	b.n	80016ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80016ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f9      	beq.n	80016ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e009      	b.n	8001738 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ffc7 	bl	80016c0 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf1      	blt.n	8001724 <_write+0x16>
	return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001752:	f000 fb9a 	bl	8001e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001756:	f000 f863 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175a:	f000 f933 	bl	80019c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800175e:	f000 f901 	bl	8001964 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001762:	f000 f8bf 	bl	80018e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);

  MPU6050_Init(&MPU6050_Descriptor);
 8001766:	4826      	ldr	r0, [pc, #152]	; (8001800 <main+0xb4>)
 8001768:	f7ff ff5e 	bl	8001628 <MPU6050_Init>
  Gyro_Init(&Gyro_Descriptor);
 800176c:	4825      	ldr	r0, [pc, #148]	; (8001804 <main+0xb8>)
 800176e:	f7ff fd4b 	bl	8001208 <Gyro_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Process();
 8001772:	f7ff ff75 	bl	8001660 <MPU6050_Process>
	  Gyro_Process();
 8001776:	f7ff fd61 	bl	800123c <Gyro_Process>

	  if(HAL_GetTick()%100==0){
 800177a:	f000 fbef 	bl	8001f5c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <main+0xbc>)
 8001782:	fba3 1302 	umull	r1, r3, r3, r2
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2164      	movs	r1, #100	; 0x64
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ee      	bne.n	8001772 <main+0x26>
		  data = MPU6050_GetData_CF();
 8001794:	f7ff ff82 	bl	800169c <MPU6050_GetData_CF>
 8001798:	4603      	mov	r3, r0
 800179a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		  sprintf((char*)buffer, "%d\n\r", data);
 800179c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	491a      	ldr	r1, [pc, #104]	; (800180c <main+0xc0>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 ff96 	bl	80056d4 <siprintf>
		  //HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);

		  if(Gyro_isReady())
 80017a8:	f7ff fd4e 	bl	8001248 <Gyro_isReady>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <main+0x76>
			  GZ_Data = Gyro_GetRot();
 80017b2:	f7ff fd59 	bl	8001268 <Gyro_GetRot>
 80017b6:	eef0 7a40 	vmov.f32	s15, s0
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <main+0xc4>)
 80017bc:	edc3 7a00 	vstr	s15, [r3]
 80017c0:	e006      	b.n	80017d0 <main+0x84>
		  else
		  	  GZ_Data = Gyro_GetCalibrationAdvancement();
 80017c2:	f7ff fd6f 	bl	80012a4 <Gyro_GetCalibrationAdvancement>
 80017c6:	eef0 7a40 	vmov.f32	s15, s0
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <main+0xc4>)
 80017cc:	edc3 7a00 	vstr	s15, [r3]

		  sprintf((char*)txbuffer, "%f\n\r", GZ_Data);
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <main+0xc4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe feb7 	bl	8000548 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	490d      	ldr	r1, [pc, #52]	; (8001814 <main+0xc8>)
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <main+0xcc>)
 80017e2:	f003 ff77 	bl	80056d4 <siprintf>
		  HAL_UART_Transmit(&huart2, txbuffer, strlen((char*)txbuffer), HAL_MAX_DELAY);
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <main+0xcc>)
 80017e8:	f7fe fcf2 	bl	80001d0 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <main+0xcc>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <main+0xd0>)
 80017f8:	f002 fe60 	bl	80044bc <HAL_UART_Transmit>
	  MPU6050_Process();
 80017fc:	e7b9      	b.n	8001772 <main+0x26>
 80017fe:	bf00      	nop
 8001800:	20000018 	.word	0x20000018
 8001804:	20000034 	.word	0x20000034
 8001808:	51eb851f 	.word	0x51eb851f
 800180c:	08007be0 	.word	0x08007be0
 8001810:	20000364 	.word	0x20000364
 8001814:	08007be8 	.word	0x08007be8
 8001818:	20000344 	.word	0x20000344
 800181c:	200002c0 	.word	0x200002c0

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b096      	sub	sp, #88	; 0x58
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	2244      	movs	r2, #68	; 0x44
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fade 	bl	8004df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	463b      	mov	r3, r7
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001842:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001846:	f001 fc65 	bl	8003114 <HAL_PWREx_ControlVoltageScaling>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001850:	f000 f918 	bl	8001a84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001854:	f001 fc40 	bl	80030d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <SystemClock_Config+0xc0>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <SystemClock_Config+0xc0>)
 8001860:	f023 0318 	bic.w	r3, r3, #24
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001868:	2314      	movs	r3, #20
 800186a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001870:	2301      	movs	r3, #1
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001878:	2360      	movs	r3, #96	; 0x60
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	2302      	movs	r3, #2
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001880:	2301      	movs	r3, #1
 8001882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001884:	2301      	movs	r3, #1
 8001886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001888:	2310      	movs	r3, #16
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800188c:	2307      	movs	r3, #7
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001890:	2302      	movs	r3, #2
 8001892:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001894:	2302      	movs	r3, #2
 8001896:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4618      	mov	r0, r3
 800189e:	f001 fc8f 	bl	80031c0 <HAL_RCC_OscConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80018a8:	f000 f8ec 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ac:	230f      	movs	r3, #15
 80018ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b0:	2303      	movs	r3, #3
 80018b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 f88f 	bl	80039e8 <HAL_RCC_ClockConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80018d0:	f000 f8d8 	bl	8001a84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018d4:	f002 fca2 	bl	800421c <HAL_RCCEx_EnableMSIPLLMode>
}
 80018d8:	bf00      	nop
 80018da:	3758      	adds	r7, #88	; 0x58
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000

080018e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <MX_I2C1_Init+0x74>)
 80018ea:	4a1c      	ldr	r2, [pc, #112]	; (800195c <MX_I2C1_Init+0x78>)
 80018ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <MX_I2C1_Init+0x74>)
 80018f0:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <MX_I2C1_Init+0x7c>)
 80018f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <MX_I2C1_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <MX_I2C1_Init+0x74>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <MX_I2C1_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_I2C1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_I2C1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_I2C1_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_I2C1_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800191e:	480e      	ldr	r0, [pc, #56]	; (8001958 <MX_I2C1_Init+0x74>)
 8001920:	f000 fddf 	bl	80024e2 <HAL_I2C_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800192a:	f000 f8ab 	bl	8001a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800192e:	2100      	movs	r1, #0
 8001930:	4809      	ldr	r0, [pc, #36]	; (8001958 <MX_I2C1_Init+0x74>)
 8001932:	f001 fb39 	bl	8002fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800193c:	f000 f8a2 	bl	8001a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001940:	2100      	movs	r1, #0
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_I2C1_Init+0x74>)
 8001944:	f001 fb7b 	bl	800303e <HAL_I2CEx_ConfigDigitalFilter>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800194e:	f000 f899 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000026c 	.word	0x2000026c
 800195c:	40005400 	.word	0x40005400
 8001960:	00707cbb 	.word	0x00707cbb

08001964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_USART2_UART_Init+0x58>)
 800196a:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <MX_USART2_UART_Init+0x5c>)
 800196c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_USART2_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_USART2_UART_Init+0x58>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_USART2_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MX_USART2_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_USART2_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_USART2_UART_Init+0x58>)
 80019a8:	f002 fd3a 	bl	8004420 <HAL_UART_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019b2:	f000 f867 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002c0 	.word	0x200002c0
 80019c0:	40004400 	.word	0x40004400

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <MX_GPIO_Init+0xb8>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <MX_GPIO_Init+0xb8>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <MX_GPIO_Init+0xb8>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <MX_GPIO_Init+0xb8>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <MX_GPIO_Init+0xb8>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_GPIO_Init+0xb8>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_GPIO_Init+0xb8>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <MX_GPIO_Init+0xb8>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_GPIO_Init+0xb8>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2108      	movs	r1, #8
 8001a26:	4816      	ldr	r0, [pc, #88]	; (8001a80 <MX_GPIO_Init+0xbc>)
 8001a28:	f000 fd20 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a2c:	2340      	movs	r3, #64	; 0x40
 8001a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f000 fba8 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4808      	ldr	r0, [pc, #32]	; (8001a80 <MX_GPIO_Init+0xbc>)
 8001a60:	f000 fb9a 	bl	8002198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	2017      	movs	r0, #23
 8001a6a:	f000 fb5e 	bl	800212a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a6e:	2017      	movs	r0, #23
 8001a70:	f000 fb77 	bl	8002162 <HAL_NVIC_EnableIRQ>

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48000400 	.word	0x48000400

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <Error_Handler+0x8>
	...

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b09e      	sub	sp, #120	; 0x78
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	2254      	movs	r2, #84	; 0x54
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 f979 	bl	8004df0 <memset>
  if(hi2c->Instance==I2C1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_I2C_MspInit+0xa8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d137      	bne.n	8001b78 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 f98b 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b20:	f7ff ffb0 	bl	8001a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b40:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b42:	2312      	movs	r3, #18
 8001b44:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f000 fb1c 	bl	8002198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_I2C_MspInit+0xac>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3778      	adds	r7, #120	; 0x78
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b09e      	sub	sp, #120	; 0x78
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2254      	movs	r2, #84	; 0x54
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 f921 	bl	8004df0 <memset>
  if(huart->Instance==USART2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a28      	ldr	r2, [pc, #160]	; (8001c54 <HAL_UART_MspInit+0xcc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d148      	bne.n	8001c4a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 f933 	bl	8003e30 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bd0:	f7ff ff58 	bl	8001a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_UART_MspInit+0xd0>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_UART_MspInit+0xd0>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bde:	6593      	str	r3, [r2, #88]	; 0x58
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_UART_MspInit+0xd0>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_UART_MspInit+0xd0>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_UART_MspInit+0xd0>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_UART_MspInit+0xd0>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c04:	2304      	movs	r3, #4
 8001c06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c14:	2307      	movs	r3, #7
 8001c16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c22:	f000 fab9 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f000 faa7 	bl	8002198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3778      	adds	r7, #120	; 0x78
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40004400 	.word	0x40004400
 8001c58:	40021000 	.word	0x40021000

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f944 	bl	8001f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001cb4:	2040      	movs	r0, #64	; 0x40
 8001cb6:	f000 fbf1 	bl	800249c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  MPU6050_Interrupt_Routine();
 8001cba:	f7ff fcd7 	bl	800166c <MPU6050_Interrupt_Routine>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
	return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_kill>:

int _kill(int pid, int sig)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cdc:	f003 f85e 	bl	8004d9c <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2216      	movs	r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]
	return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_exit>:

void _exit (int status)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffe7 	bl	8001cd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d04:	e7fe      	b.n	8001d04 <_exit+0x12>

08001d06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e00a      	b.n	8001d2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d18:	f3af 8000 	nop.w
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	60ba      	str	r2, [r7, #8]
 8001d24:	b2ca      	uxtb	r2, r1
 8001d26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	dbf0      	blt.n	8001d18 <_read+0x12>
	}

return len;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d68:	605a      	str	r2, [r3, #4]
	return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_isatty>:

int _isatty(int file)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
	return 0;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f002 ffe0 	bl	8004d9c <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <_sbrk+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20010000 	.word	0x20010000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	20000368 	.word	0x20000368
 8001e10:	20000380 	.word	0x20000380

08001e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e3c:	f7ff ffea 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <LoopForever+0xe>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <LoopForever+0x16>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e66:	f002 ff9f 	bl	8004da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e6a:	f7ff fc6f 	bl	800174c <main>

08001e6e <LoopForever>:

LoopForever:
    b LoopForever
 8001e6e:	e7fe      	b.n	8001e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001e7c:	08008024 	.word	0x08008024
  ldr r2, =_sbss
 8001e80:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001e84:	20000380 	.word	0x20000380

08001e88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC1_IRQHandler>

08001e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f93d 	bl	8002114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f000 f80e 	bl	8001ebc <HAL_InitTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	71fb      	strb	r3, [r7, #7]
 8001eaa:	e001      	b.n	8001eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eac:	f7ff fdf0 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_InitTick+0x6c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d023      	beq.n	8001f18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_InitTick+0x70>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_InitTick+0x6c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f949 	bl	800217e <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b0f      	cmp	r3, #15
 8001ef6:	d809      	bhi.n	8001f0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f000 f913 	bl	800212a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_InitTick+0x74>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e007      	b.n	8001f1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e004      	b.n	8001f1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e001      	b.n	8001f1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000040 	.word	0x20000040
 8001f2c:	20000038 	.word	0x20000038
 8001f30:	2000003c 	.word	0x2000003c

08001f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x20>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x24>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_IncTick+0x24>)
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000040 	.word	0x20000040
 8001f58:	2000036c 	.word	0x2000036c

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000036c 	.word	0x2000036c

08001f74 <__NVIC_SetPriorityGrouping>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_GetPriorityGrouping>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0307 	and.w	r3, r3, #7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_EnableIRQ>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db0b      	blt.n	8002002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	4907      	ldr	r1, [pc, #28]	; (8002010 <__NVIC_EnableIRQ+0x38>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000e100 	.word	0xe000e100

08002014 <__NVIC_SetPriority>:
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	; (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	; (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <SysTick_Config>:
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e0:	d301      	bcc.n	80020e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00f      	b.n	8002106 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <SysTick_Config+0x40>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ee:	210f      	movs	r1, #15
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f7ff ff8e 	bl	8002014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SysTick_Config+0x40>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <SysTick_Config+0x40>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff29 	bl	8001f74 <__NVIC_SetPriorityGrouping>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800213c:	f7ff ff3e 	bl	8001fbc <__NVIC_GetPriorityGrouping>
 8002140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7ff ff8e 	bl	8002068 <NVIC_EncodePriority>
 800214c:	4602      	mov	r2, r0
 800214e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff5d 	bl	8002014 <__NVIC_SetPriority>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff31 	bl	8001fd8 <__NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffa2 	bl	80020d0 <SysTick_Config>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a6:	e148      	b.n	800243a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2101      	movs	r1, #1
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	4013      	ands	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 813a 	beq.w	8002434 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d005      	beq.n	80021d8 <HAL_GPIO_Init+0x40>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d130      	bne.n	800223a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220e:	2201      	movs	r2, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	f003 0201 	and.w	r2, r3, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b03      	cmp	r3, #3
 8002244:	d017      	beq.n	8002276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d123      	bne.n	80022ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	6939      	ldr	r1, [r7, #16]
 80022c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2203      	movs	r2, #3
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0203 	and.w	r2, r3, #3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8094 	beq.w	8002434 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230c:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_GPIO_Init+0x2c0>)
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	4a51      	ldr	r2, [pc, #324]	; (8002458 <HAL_GPIO_Init+0x2c0>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6613      	str	r3, [r2, #96]	; 0x60
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_GPIO_Init+0x2c0>)
 800231a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002324:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_GPIO_Init+0x2c4>)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800234e:	d00d      	beq.n	800236c <HAL_GPIO_Init+0x1d4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a43      	ldr	r2, [pc, #268]	; (8002460 <HAL_GPIO_Init+0x2c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <HAL_GPIO_Init+0x1d0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a42      	ldr	r2, [pc, #264]	; (8002464 <HAL_GPIO_Init+0x2cc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_GPIO_Init+0x1cc>
 8002360:	2302      	movs	r3, #2
 8002362:	e004      	b.n	800236e <HAL_GPIO_Init+0x1d6>
 8002364:	2307      	movs	r3, #7
 8002366:	e002      	b.n	800236e <HAL_GPIO_Init+0x1d6>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_GPIO_Init+0x1d6>
 800236c:	2300      	movs	r3, #0
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	4093      	lsls	r3, r2
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800237e:	4937      	ldr	r1, [pc, #220]	; (800245c <HAL_GPIO_Init+0x2c4>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023b0:	4a2d      	ldr	r2, [pc, #180]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023da:	4a23      	ldr	r2, [pc, #140]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002404:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_GPIO_Init+0x2d0>)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f aeaf 	bne.w	80021a8 <HAL_GPIO_Init+0x10>
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000
 8002460:	48000400 	.word	0x48000400
 8002464:	48000800 	.word	0x48000800
 8002468:	40010400 	.word	0x40010400

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002488:	e002      	b.n	8002490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f806 	bl	80024cc <HAL_GPIO_EXTI_Callback>
  }
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40010400 	.word	0x40010400

080024cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e081      	b.n	80025f8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff fae5 	bl	8001ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2224      	movs	r2, #36	; 0x24
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002532:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002542:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	e006      	b.n	800256a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002568:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d104      	bne.n	800257c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800257a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800258a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69d9      	ldr	r1, [r3, #28]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1a      	ldr	r2, [r3, #32]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	4608      	mov	r0, r1
 800260a:	4611      	mov	r1, r2
 800260c:	461a      	mov	r2, r3
 800260e:	4603      	mov	r3, r0
 8002610:	817b      	strh	r3, [r7, #10]
 8002612:	460b      	mov	r3, r1
 8002614:	813b      	strh	r3, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	f040 80f9 	bne.w	800281a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_I2C_Mem_Write+0x34>
 800262e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0ed      	b.n	800281c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_I2C_Mem_Write+0x4e>
 800264a:	2302      	movs	r3, #2
 800264c:	e0e6      	b.n	800281c <HAL_I2C_Mem_Write+0x21c>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002656:	f7ff fc81 	bl	8001f5c <HAL_GetTick>
 800265a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2319      	movs	r3, #25
 8002662:	2201      	movs	r2, #1
 8002664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fac3 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0d1      	b.n	800281c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2221      	movs	r2, #33	; 0x21
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a0:	88f8      	ldrh	r0, [r7, #6]
 80026a2:	893a      	ldrh	r2, [r7, #8]
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4603      	mov	r3, r0
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f9d3 	bl	8002a5c <I2C_RequestMemoryWrite>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0a9      	b.n	800281c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2bff      	cmp	r3, #255	; 0xff
 80026d0:	d90e      	bls.n	80026f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	22ff      	movs	r2, #255	; 0xff
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	8979      	ldrh	r1, [r7, #10]
 80026e0:	2300      	movs	r3, #0
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fc2b 	bl	8002f44 <I2C_TransferConfig>
 80026ee:	e00f      	b.n	8002710 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	8979      	ldrh	r1, [r7, #10]
 8002702:	2300      	movs	r3, #0
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fc1a 	bl	8002f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 faad 	bl	8002c74 <I2C_WaitOnTXISFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e07b      	b.n	800281c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d034      	beq.n	80027c8 <HAL_I2C_Mem_Write+0x1c8>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	d130      	bne.n	80027c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	2200      	movs	r2, #0
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fa3f 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e04d      	b.n	800281c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	d90e      	bls.n	80027a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	b2da      	uxtb	r2, r3
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fbcf 	bl	8002f44 <I2C_TransferConfig>
 80027a6:	e00f      	b.n	80027c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	8979      	ldrh	r1, [r7, #10]
 80027ba:	2300      	movs	r3, #0
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fbbe 	bl	8002f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d19e      	bne.n	8002710 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fa8c 	bl	8002cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e01a      	b.n	800281c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2220      	movs	r2, #32
 80027ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_I2C_Mem_Write+0x224>)
 80027fa:	400b      	ands	r3, r1
 80027fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	fe00e800 	.word	0xfe00e800

08002828 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	817b      	strh	r3, [r7, #10]
 800283a:	460b      	mov	r3, r1
 800283c:	813b      	strh	r3, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	f040 80fd 	bne.w	8002a4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_I2C_Mem_Read+0x34>
 8002856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0f1      	b.n	8002a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_I2C_Mem_Read+0x4e>
 8002872:	2302      	movs	r3, #2
 8002874:	e0ea      	b.n	8002a4c <HAL_I2C_Mem_Read+0x224>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800287e:	f7ff fb6d 	bl	8001f5c <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2319      	movs	r3, #25
 800288a:	2201      	movs	r2, #1
 800288c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f9af 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0d5      	b.n	8002a4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2222      	movs	r2, #34	; 0x22
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a3a      	ldr	r2, [r7, #32]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028c8:	88f8      	ldrh	r0, [r7, #6]
 80028ca:	893a      	ldrh	r2, [r7, #8]
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	4603      	mov	r3, r0
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f913 	bl	8002b04 <I2C_RequestMemoryRead>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0ad      	b.n	8002a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2bff      	cmp	r3, #255	; 0xff
 80028f8:	d90e      	bls.n	8002918 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	b2da      	uxtb	r2, r3
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	4b52      	ldr	r3, [pc, #328]	; (8002a54 <HAL_I2C_Mem_Read+0x22c>)
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fb17 	bl	8002f44 <I2C_TransferConfig>
 8002916:	e00f      	b.n	8002938 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	b2da      	uxtb	r2, r3
 8002928:	8979      	ldrh	r1, [r7, #10]
 800292a:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_I2C_Mem_Read+0x22c>)
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fb06 	bl	8002f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	2200      	movs	r2, #0
 8002940:	2104      	movs	r1, #4
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f956 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e07c      	b.n	8002a4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d034      	beq.n	80029f8 <HAL_I2C_Mem_Read+0x1d0>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d130      	bne.n	80029f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	2200      	movs	r2, #0
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f927 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04d      	b.n	8002a4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d90e      	bls.n	80029d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22ff      	movs	r2, #255	; 0xff
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	2300      	movs	r3, #0
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fab7 	bl	8002f44 <I2C_TransferConfig>
 80029d6:	e00f      	b.n	80029f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	8979      	ldrh	r1, [r7, #10]
 80029ea:	2300      	movs	r3, #0
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 faa6 	bl	8002f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d19a      	bne.n	8002938 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f974 	bl	8002cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01a      	b.n	8002a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_I2C_Mem_Read+0x230>)
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	80002400 	.word	0x80002400
 8002a58:	fe00e800 	.word	0xfe00e800

08002a5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	813b      	strh	r3, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	8979      	ldrh	r1, [r7, #10]
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <I2C_RequestMemoryWrite+0xa4>)
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fa5d 	bl	8002f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	69b9      	ldr	r1, [r7, #24]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f8f0 	bl	8002c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e02c      	b.n	8002af8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa4:	893b      	ldrh	r3, [r7, #8]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
 8002aae:	e015      	b.n	8002adc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ab0:	893b      	ldrh	r3, [r7, #8]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	69b9      	ldr	r1, [r7, #24]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f8d6 	bl	8002c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e012      	b.n	8002af8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f884 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	80002000 	.word	0x80002000

08002b04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <I2C_RequestMemoryRead+0xa4>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa0a 	bl	8002f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f89d 	bl	8002c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e02c      	b.n	8002b9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b4a:	893b      	ldrh	r3, [r7, #8]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
 8002b54:	e015      	b.n	8002b82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b56:	893b      	ldrh	r3, [r7, #8]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f883 	bl	8002c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e012      	b.n	8002b9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2140      	movs	r1, #64	; 0x40
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f831 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	80002000 	.word	0x80002000

08002bac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d103      	bne.n	8002bca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d007      	beq.n	8002be8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	619a      	str	r2, [r3, #24]
  }
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c04:	e022      	b.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d01e      	beq.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7ff f9a5 	bl	8001f5c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d113      	bne.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e00f      	b.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d0cd      	beq.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c80:	e02c      	b.n	8002cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f870 	bl	8002d6c <I2C_IsErrorOccurred>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e02a      	b.n	8002cec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d01e      	beq.n	8002cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7ff f95d 	bl	8001f5c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d113      	bne.n	8002cdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e007      	b.n	8002cec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d1cb      	bne.n	8002c82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d00:	e028      	b.n	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f830 	bl	8002d6c <I2C_IsErrorOccurred>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e026      	b.n	8002d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7ff f921 	bl	8001f5c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d113      	bne.n	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d1cf      	bne.n	8002d02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d075      	beq.n	8002e84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002da0:	e056      	b.n	8002e50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d052      	beq.n	8002e50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7ff f8d7 	bl	8001f5c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_IsErrorOccurred+0x54>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d147      	bne.n	8002e50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de2:	d12e      	bne.n	8002e42 <I2C_IsErrorOccurred+0xd6>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dea:	d02a      	beq.n	8002e42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d027      	beq.n	8002e42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e02:	f7ff f8ab 	bl	8001f5c <HAL_GetTick>
 8002e06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e08:	e01b      	b.n	8002e42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e0a:	f7ff f8a7 	bl	8001f5c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b19      	cmp	r3, #25
 8002e16:	d914      	bls.n	8002e42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d1dc      	bne.n	8002e0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d003      	beq.n	8002e66 <I2C_IsErrorOccurred+0xfa>
 8002e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d09d      	beq.n	8002da2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2220      	movs	r2, #32
 8002e74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01c      	beq.n	8002f34 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fe56 	bl	8002bac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <I2C_IsErrorOccurred+0x1d4>)
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	fe00e800 	.word	0xfe00e800

08002f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	4613      	mov	r3, r2
 8002f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f56:	897b      	ldrh	r3, [r7, #10]
 8002f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f5c:	7a7b      	ldrb	r3, [r7, #9]
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	0d5b      	lsrs	r3, r3, #21
 8002f7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <I2C_TransferConfig+0x60>)
 8002f84:	430b      	orrs	r3, r1
 8002f86:	43db      	mvns	r3, r3
 8002f88:	ea02 0103 	and.w	r1, r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	03ff63ff 	.word	0x03ff63ff

08002fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d138      	bne.n	8003030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e032      	b.n	8003032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	d139      	bne.n	80030c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800305e:	2302      	movs	r3, #2
 8003060:	e033      	b.n	80030ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2224      	movs	r2, #36	; 0x24
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40007000 	.word	0x40007000

080030f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <HAL_PWREx_GetVoltageRange+0x18>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40007000 	.word	0x40007000

08003114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003122:	d130      	bne.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800312c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003130:	d038      	beq.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003132:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2232      	movs	r2, #50	; 0x32
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003158:	e002      	b.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3b01      	subs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316c:	d102      	bne.n	8003174 <HAL_PWREx_ControlVoltageScaling+0x60>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f2      	bne.n	800315a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d110      	bne.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e00f      	b.n	80031a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003192:	d007      	beq.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40007000 	.word	0x40007000
 80031b8:	20000038 	.word	0x20000038
 80031bc:	431bde83 	.word	0x431bde83

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f000 bc02 	b.w	80039d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d4:	4b96      	ldr	r3, [pc, #600]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031de:	4b94      	ldr	r3, [pc, #592]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80e4 	beq.w	80033be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_RCC_OscConfig+0x4c>
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	f040 808b 	bne.w	800331a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b01      	cmp	r3, #1
 8003208:	f040 8087 	bne.w	800331a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800320c:	4b88      	ldr	r3, [pc, #544]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x64>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e3d9      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1a      	ldr	r2, [r3, #32]
 8003228:	4b81      	ldr	r3, [pc, #516]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_RCC_OscConfig+0x7e>
 8003234:	4b7e      	ldr	r3, [pc, #504]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800323c:	e005      	b.n	800324a <HAL_RCC_OscConfig+0x8a>
 800323e:	4b7c      	ldr	r3, [pc, #496]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324a:	4293      	cmp	r3, r2
 800324c:	d223      	bcs.n	8003296 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fd8c 	bl	8003d70 <RCC_SetFlashLatencyFromMSIRange>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e3ba      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003262:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a72      	ldr	r2, [pc, #456]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003268:	f043 0308 	orr.w	r3, r3, #8
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b70      	ldr	r3, [pc, #448]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	496d      	ldr	r1, [pc, #436]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003280:	4b6b      	ldr	r3, [pc, #428]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	4968      	ldr	r1, [pc, #416]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
 8003294:	e025      	b.n	80032e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003296:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a65      	ldr	r2, [pc, #404]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800329c:	f043 0308 	orr.w	r3, r3, #8
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4960      	ldr	r1, [pc, #384]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b4:	4b5e      	ldr	r3, [pc, #376]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	495b      	ldr	r1, [pc, #364]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fd4c 	bl	8003d70 <RCC_SetFlashLatencyFromMSIRange>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e37a      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e2:	f000 fc81 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b51      	ldr	r3, [pc, #324]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4950      	ldr	r1, [pc, #320]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a4e      	ldr	r2, [pc, #312]	; (8003438 <HAL_RCC_OscConfig+0x278>)
 8003300:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003302:	4b4e      	ldr	r3, [pc, #312]	; (800343c <HAL_RCC_OscConfig+0x27c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fdd8 	bl	8001ebc <HAL_InitTick>
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d052      	beq.n	80033bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	e35e      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d032      	beq.n	8003388 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003322:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a42      	ldr	r2, [pc, #264]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800332e:	f7fe fe15 	bl	8001f5c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003336:	f7fe fe11 	bl	8001f5c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e347      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003354:	4b36      	ldr	r3, [pc, #216]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a35      	ldr	r2, [pc, #212]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800335a:	f043 0308 	orr.w	r3, r3, #8
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b33      	ldr	r3, [pc, #204]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4930      	ldr	r1, [pc, #192]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003372:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	492b      	ldr	r1, [pc, #172]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
 8003386:	e01a      	b.n	80033be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003388:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003394:	f7fe fde2 	bl	8001f5c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800339c:	f7fe fdde 	bl	8001f5c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e314      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x1dc>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d073      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_OscConfig+0x21c>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d10e      	bne.n	80033f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d10b      	bne.n	80033f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d063      	beq.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d15f      	bne.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e2f1      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x24c>
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e025      	b.n	8003458 <HAL_RCC_OscConfig+0x298>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003414:	d114      	bne.n	8003440 <HAL_RCC_OscConfig+0x280>
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a02      	ldr	r2, [pc, #8]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e013      	b.n	8003458 <HAL_RCC_OscConfig+0x298>
 8003430:	40021000 	.word	0x40021000
 8003434:	08007bf0 	.word	0x08007bf0
 8003438:	20000038 	.word	0x20000038
 800343c:	2000003c 	.word	0x2000003c
 8003440:	4ba0      	ldr	r3, [pc, #640]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a9f      	ldr	r2, [pc, #636]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b9d      	ldr	r3, [pc, #628]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a9c      	ldr	r2, [pc, #624]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fd7c 	bl	8001f5c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fd78 	bl	8001f5c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e2ae      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347a:	4b92      	ldr	r3, [pc, #584]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x2a8>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fd68 	bl	8001f5c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fd64 	bl	8001f5c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e29a      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a2:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x2d0>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d060      	beq.n	8003580 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x310>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d119      	bne.n	80034fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d116      	bne.n	80034fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d0:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x328>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e277      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	4973      	ldr	r1, [pc, #460]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	e040      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d023      	beq.n	800354e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003506:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe fd23 	bl	8001f5c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7fe fd1f 	bl	8001f5c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e255      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352c:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b62      	ldr	r3, [pc, #392]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	495f      	ldr	r1, [pc, #380]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
 800354c:	e018      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5c      	ldr	r2, [pc, #368]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe fcff 	bl	8001f5c <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003562:	f7fe fcfb 	bl	8001f5c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e231      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003594:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	4a4a      	ldr	r2, [pc, #296]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe fcda 	bl	8001f5c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fe fcd6 	bl	8001f5c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e20c      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80035c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <HAL_RCC_OscConfig+0x3ec>
 80035cc:	e01b      	b.n	8003606 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fe fcbd 	bl	8001f5c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fe fcb9 	bl	8001f5c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1ef      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ef      	bne.n	80035e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80a6 	beq.w	8003760 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
 8003630:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003640:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_RCC_OscConfig+0x508>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364c:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_RCC_OscConfig+0x508>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_RCC_OscConfig+0x508>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003658:	f7fe fc80 	bl	8001f5c <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fe fc7c 	bl	8001f5c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e1b2      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_RCC_OscConfig+0x508>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d108      	bne.n	8003698 <HAL_RCC_OscConfig+0x4d8>
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003696:	e029      	b.n	80036ec <HAL_RCC_OscConfig+0x52c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d115      	bne.n	80036cc <HAL_RCC_OscConfig+0x50c>
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a03      	ldr	r2, [pc, #12]	; (80036c4 <HAL_RCC_OscConfig+0x504>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c0:	e014      	b.n	80036ec <HAL_RCC_OscConfig+0x52c>
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40007000 	.word	0x40007000
 80036cc:	4b9a      	ldr	r3, [pc, #616]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	4a99      	ldr	r2, [pc, #612]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036dc:	4b96      	ldr	r3, [pc, #600]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a95      	ldr	r2, [pc, #596]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d016      	beq.n	8003722 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fe fc32 	bl	8001f5c <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fc:	f7fe fc2e 	bl	8001f5c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e162      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b89      	ldr	r3, [pc, #548]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ed      	beq.n	80036fc <HAL_RCC_OscConfig+0x53c>
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fe fc1b 	bl	8001f5c <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fe fc17 	bl	8001f5c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e14b      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003740:	4b7d      	ldr	r3, [pc, #500]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ed      	bne.n	800372a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b78      	ldr	r3, [pc, #480]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4a77      	ldr	r2, [pc, #476]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003774:	4b70      	ldr	r3, [pc, #448]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377a:	4a6f      	ldr	r2, [pc, #444]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe fbea 	bl	8001f5c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800378c:	f7fe fbe6 	bl	8001f5c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e11c      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379e:	4b66      	ldr	r3, [pc, #408]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80037a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x5cc>
 80037ac:	e01b      	b.n	80037e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ae:	4b62      	ldr	r3, [pc, #392]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80037b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b4:	4a60      	ldr	r2, [pc, #384]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fe fbcd 	bl	8001f5c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c6:	f7fe fbc9 	bl	8001f5c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0ff      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d8:	4b57      	ldr	r3, [pc, #348]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80f3 	beq.w	80039d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f040 80c9 	bne.w	800398c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037fa:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	429a      	cmp	r2, r3
 800380c:	d12c      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	3b01      	subs	r3, #1
 800381a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d123      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d11b      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d113      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	3b01      	subs	r3, #1
 800384e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d109      	bne.n	8003868 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	3b01      	subs	r3, #1
 8003862:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d06b      	beq.n	8003940 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d062      	beq.n	8003934 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800386e:	4b32      	ldr	r3, [pc, #200]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0ac      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003888:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800388a:	f7fe fb67 	bl	8001f5c <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fe fb63 	bl	8001f5c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e099      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f0      	bne.n	8003892 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_RCC_OscConfig+0x77c>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038c0:	3a01      	subs	r2, #1
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	4311      	orrs	r1, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ca:	0212      	lsls	r2, r2, #8
 80038cc:	4311      	orrs	r1, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038d2:	0852      	lsrs	r2, r2, #1
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0552      	lsls	r2, r2, #21
 80038d8:	4311      	orrs	r1, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038de:	0852      	lsrs	r2, r2, #1
 80038e0:	3a01      	subs	r2, #1
 80038e2:	0652      	lsls	r2, r2, #25
 80038e4:	4311      	orrs	r1, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038ea:	06d2      	lsls	r2, r2, #27
 80038ec:	430a      	orrs	r2, r1
 80038ee:	4912      	ldr	r1, [pc, #72]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003900:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800390c:	f7fe fb26 	bl	8001f5c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe fb22 	bl	8001f5c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e058      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <HAL_RCC_OscConfig+0x778>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003932:	e050      	b.n	80039d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e04f      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
 8003938:	40021000 	.word	0x40021000
 800393c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d144      	bne.n	80039d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800394c:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003964:	f7fe fafa 	bl	8001f5c <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fe faf6 	bl	8001f5c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e02c      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x7ac>
 800398a:	e024      	b.n	80039d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d01f      	beq.n	80039d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 8003998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe fadd 	bl	8001f5c <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe fad9 	bl	8001f5c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e00f      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4905      	ldr	r1, [pc, #20]	; (80039e0 <HAL_RCC_OscConfig+0x820>)
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_RCC_OscConfig+0x824>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	60cb      	str	r3, [r1, #12]
 80039d0:	e001      	b.n	80039d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	feeefffc 	.word	0xfeeefffc

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0e7      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b75      	ldr	r3, [pc, #468]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d910      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b72      	ldr	r3, [pc, #456]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4970      	ldr	r1, [pc, #448]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b6e      	ldr	r3, [pc, #440]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0cf      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d908      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4960      	ldr	r1, [pc, #384]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d04c      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6e:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d121      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0a6      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a86:	4b54      	ldr	r3, [pc, #336]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d115      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e09a      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a9e:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e08e      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aae:	4b4a      	ldr	r3, [pc, #296]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e086      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b46      	ldr	r3, [pc, #280]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4943      	ldr	r1, [pc, #268]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad0:	f7fe fa44 	bl	8001f5c <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fe fa40 	bl	8001f5c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e06e      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d208      	bcs.n	8003b2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b2e      	ldr	r3, [pc, #184]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	492b      	ldr	r1, [pc, #172]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2e:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d210      	bcs.n	8003b5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 0207 	bic.w	r2, r3, #7
 8003b44:	4923      	ldr	r1, [pc, #140]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e036      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	4918      	ldr	r1, [pc, #96]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4910      	ldr	r1, [pc, #64]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b9c:	f000 f824 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	490b      	ldr	r1, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1f4>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb8:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1f8>)
 8003bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1fc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe f97b 	bl	8001ebc <HAL_InitTick>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bca:	7afb      	ldrb	r3, [r7, #11]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	08007bf0 	.word	0x08007bf0
 8003be0:	20000038 	.word	0x20000038
 8003be4:	2000003c 	.word	0x2000003c

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	; 0x24
 8003bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf6:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c00:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d121      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d11e      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c1c:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e005      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c38:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c44:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10d      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c60:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e004      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8003c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d134      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0xac>
 8003c8c:	e005      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c8e:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c90:	617b      	str	r3, [r7, #20]
      break;
 8003c92:	e005      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8003c96:	617b      	str	r3, [r7, #20]
      break;
 8003c98:	e002      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	617b      	str	r3, [r7, #20]
      break;
 8003c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	3301      	adds	r3, #1
 8003cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	0e5b      	lsrs	r3, r3, #25
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08007c08 	.word	0x08007c08
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	007a1200 	.word	0x007a1200

08003d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000038 	.word	0x20000038

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d1c:	f7ff fff0 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4904      	ldr	r1, [pc, #16]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08007c00 	.word	0x08007c00

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d48:	f7ff ffda 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0adb      	lsrs	r3, r3, #11
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4904      	ldr	r1, [pc, #16]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08007c00 	.word	0x08007c00

08003d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d88:	f7ff f9b6 	bl	80030f8 <HAL_PWREx_GetVoltageRange>
 8003d8c:	6178      	str	r0, [r7, #20]
 8003d8e:	e014      	b.n	8003dba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d9c:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003da8:	f7ff f9a6 	bl	80030f8 <HAL_PWREx_GetVoltageRange>
 8003dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dae:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc0:	d10b      	bne.n	8003dda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d919      	bls.n	8003dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2ba0      	cmp	r3, #160	; 0xa0
 8003dcc:	d902      	bls.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dce:	2302      	movs	r3, #2
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	e013      	b.n	8003dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e010      	b.n	8003dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b80      	cmp	r3, #128	; 0x80
 8003dde:	d902      	bls.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003de0:	2303      	movs	r3, #3
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	e00a      	b.n	8003dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b80      	cmp	r3, #128	; 0x80
 8003dea:	d102      	bne.n	8003df2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dec:	2302      	movs	r3, #2
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	e004      	b.n	8003dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b70      	cmp	r3, #112	; 0x70
 8003df6:	d101      	bne.n	8003dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003df8:	2301      	movs	r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f023 0207 	bic.w	r2, r3, #7
 8003e04:	4909      	ldr	r1, [pc, #36]	; (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d001      	beq.n	8003e1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40022000 	.word	0x40022000

08003e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e38:	2300      	movs	r3, #0
 8003e3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d031      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e54:	d01a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003e56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e5a:	d814      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e64:	d10f      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003e66:	4b5d      	ldr	r3, [pc, #372]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a5c      	ldr	r2, [pc, #368]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e72:	e00c      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f9de 	bl	800423c <RCCEx_PLLSAI1_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	74fb      	strb	r3, [r7, #19]
      break;
 8003e8a:	e000      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e94:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	494e      	ldr	r1, [pc, #312]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003eaa:	e001      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 809e 	beq.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ec2:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	4a3f      	ldr	r2, [pc, #252]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee4:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a39      	ldr	r2, [pc, #228]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f00:	f7fe f82c 	bl	8001f5c <HAL_GetTick>
 8003f04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f06:	e009      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fe f828 	bl	8001f5c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d902      	bls.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	74fb      	strb	r3, [r7, #19]
        break;
 8003f1a:	e005      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f1c:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ef      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d15a      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f2e:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01e      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d019      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f4a:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f56:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f66:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f76:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d016      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd ffe8 	bl	8001f5c <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fd ffe4 	bl	8001f5c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d902      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	74fb      	strb	r3, [r7, #19]
            break;
 8003fa6:	e006      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ec      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fca:	4904      	ldr	r1, [pc, #16]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fd2:	e009      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe8:	7c7b      	ldrb	r3, [r7, #17]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b8a      	ldr	r3, [pc, #552]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	4a89      	ldr	r2, [pc, #548]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004006:	4b84      	ldr	r3, [pc, #528]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4980      	ldr	r1, [pc, #512]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004028:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 020c 	bic.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	4978      	ldr	r1, [pc, #480]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800404a:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	496f      	ldr	r1, [pc, #444]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800406c:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	4967      	ldr	r1, [pc, #412]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800408e:	4b62      	ldr	r3, [pc, #392]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	495e      	ldr	r1, [pc, #376]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b0:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	4956      	ldr	r1, [pc, #344]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d2:	4b51      	ldr	r3, [pc, #324]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d028      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f4:	4b48      	ldr	r3, [pc, #288]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4945      	ldr	r1, [pc, #276]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004112:	d106      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004114:	4b40      	ldr	r3, [pc, #256]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a3f      	ldr	r2, [pc, #252]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800411a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411e:	60d3      	str	r3, [r2, #12]
 8004120:	e011      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800412a:	d10c      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2101      	movs	r1, #1
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f882 	bl	800423c <RCCEx_PLLSAI1_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d028      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	492d      	ldr	r1, [pc, #180]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004170:	d106      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004172:	4b29      	ldr	r3, [pc, #164]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4a28      	ldr	r2, [pc, #160]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417c:	60d3      	str	r3, [r2, #12]
 800417e:	e011      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004188:	d10c      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2101      	movs	r1, #1
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f853 	bl	800423c <RCCEx_PLLSAI1_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01c      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	4916      	ldr	r1, [pc, #88]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ce:	d10c      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f830 	bl	800423c <RCCEx_PLLSAI1_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004204:	4904      	ldr	r1, [pc, #16]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800420c:	7cbb      	ldrb	r3, [r7, #18]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000

0800421c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004226:	f043 0304 	orr.w	r3, r3, #4
 800422a:	6013      	str	r3, [r2, #0]
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000

0800423c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800424a:	4b74      	ldr	r3, [pc, #464]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004256:	4b71      	ldr	r3, [pc, #452]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0203 	and.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d10d      	bne.n	8004282 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
       ||
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800426e:	4b6b      	ldr	r3, [pc, #428]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
       ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d047      	beq.n	8004312 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	e044      	b.n	8004312 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d018      	beq.n	80042c2 <RCCEx_PLLSAI1_Config+0x86>
 8004290:	2b03      	cmp	r3, #3
 8004292:	d825      	bhi.n	80042e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004294:	2b01      	cmp	r3, #1
 8004296:	d002      	beq.n	800429e <RCCEx_PLLSAI1_Config+0x62>
 8004298:	2b02      	cmp	r3, #2
 800429a:	d009      	beq.n	80042b0 <RCCEx_PLLSAI1_Config+0x74>
 800429c:	e020      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800429e:	4b5f      	ldr	r3, [pc, #380]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11d      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ae:	e01a      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042b0:	4b5a      	ldr	r3, [pc, #360]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d116      	bne.n	80042ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c0:	e013      	b.n	80042ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042c2:	4b56      	ldr	r3, [pc, #344]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ce:	4b53      	ldr	r3, [pc, #332]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042de:	e006      	b.n	80042ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	e004      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042f6:	4b49      	ldr	r3, [pc, #292]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	430b      	orrs	r3, r1
 800430c:	4943      	ldr	r1, [pc, #268]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 800430e:	4313      	orrs	r3, r2
 8004310:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d17c      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004318:	4b40      	ldr	r3, [pc, #256]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3f      	ldr	r2, [pc, #252]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 800431e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004324:	f7fd fe1a 	bl	8001f5c <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800432a:	e009      	b.n	8004340 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800432c:	f7fd fe16 	bl	8001f5c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d902      	bls.n	8004340 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	73fb      	strb	r3, [r7, #15]
        break;
 800433e:	e005      	b.n	800434c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004340:	4b36      	ldr	r3, [pc, #216]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ef      	bne.n	800432c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d15f      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d110      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004358:	4b30      	ldr	r3, [pc, #192]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6892      	ldr	r2, [r2, #8]
 8004368:	0211      	lsls	r1, r2, #8
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68d2      	ldr	r2, [r2, #12]
 800436e:	06d2      	lsls	r2, r2, #27
 8004370:	430a      	orrs	r2, r1
 8004372:	492a      	ldr	r1, [pc, #168]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004374:	4313      	orrs	r3, r2
 8004376:	610b      	str	r3, [r1, #16]
 8004378:	e027      	b.n	80043ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d112      	bne.n	80043a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004380:	4b26      	ldr	r3, [pc, #152]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004388:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6892      	ldr	r2, [r2, #8]
 8004390:	0211      	lsls	r1, r2, #8
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6912      	ldr	r2, [r2, #16]
 8004396:	0852      	lsrs	r2, r2, #1
 8004398:	3a01      	subs	r2, #1
 800439a:	0552      	lsls	r2, r2, #21
 800439c:	430a      	orrs	r2, r1
 800439e:	491f      	ldr	r1, [pc, #124]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	610b      	str	r3, [r1, #16]
 80043a4:	e011      	b.n	80043ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6892      	ldr	r2, [r2, #8]
 80043b6:	0211      	lsls	r1, r2, #8
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6952      	ldr	r2, [r2, #20]
 80043bc:	0852      	lsrs	r2, r2, #1
 80043be:	3a01      	subs	r2, #1
 80043c0:	0652      	lsls	r2, r2, #25
 80043c2:	430a      	orrs	r2, r1
 80043c4:	4915      	ldr	r1, [pc, #84]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ca:	4b14      	ldr	r3, [pc, #80]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a13      	ldr	r2, [pc, #76]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fd fdc1 	bl	8001f5c <HAL_GetTick>
 80043da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043dc:	e009      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043de:	f7fd fdbd 	bl	8001f5c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d902      	bls.n	80043f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	73fb      	strb	r3, [r7, #15]
          break;
 80043f0:	e005      	b.n	80043fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043f2:	4b0a      	ldr	r3, [pc, #40]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0ef      	beq.n	80043de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4903      	ldr	r1, [pc, #12]	; (800441c <RCCEx_PLLSAI1_Config+0x1e0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000

08004420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e040      	b.n	80044b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fba0 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	; 0x24
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f8c0 	bl	80045e4 <UART_SetConfig>
 8004464:	4603      	mov	r3, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e022      	b.n	80044b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fae0 	bl	8004a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fb67 	bl	8004b80 <UART_CheckIdleState>
 80044b2:	4603      	mov	r3, r0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	f040 8082 	bne.w	80045da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_UART_Transmit+0x26>
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07a      	b.n	80045dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_UART_Transmit+0x38>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e073      	b.n	80045dc <HAL_UART_Transmit+0x120>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2221      	movs	r2, #33	; 0x21
 8004508:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450a:	f7fd fd27 	bl	8001f5c <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004528:	d108      	bne.n	800453c <HAL_UART_Transmit+0x80>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e003      	b.n	8004544 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800454c:	e02d      	b.n	80045aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fb5a 	bl	8004c12 <UART_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e039      	b.n	80045dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	881a      	ldrh	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800457a:	b292      	uxth	r2, r2
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	3302      	adds	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	e008      	b.n	8004598 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	b292      	uxth	r2, r2
 8004590:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3301      	adds	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1cb      	bne.n	800454e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	2140      	movs	r1, #64	; 0x40
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fb26 	bl	8004c12 <UART_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e005      	b.n	80045dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e000      	b.n	80045dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3720      	adds	r7, #32
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e8:	b08a      	sub	sp, #40	; 0x28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	431a      	orrs	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4313      	orrs	r3, r2
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4bb4      	ldr	r3, [pc, #720]	; (80048e4 <UART_SetConfig+0x300>)
 8004614:	4013      	ands	r3, r2
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800461c:	430b      	orrs	r3, r1
 800461e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4aa9      	ldr	r2, [pc, #676]	; (80048e8 <UART_SetConfig+0x304>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	4313      	orrs	r3, r2
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004660:	430a      	orrs	r2, r1
 8004662:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4aa0      	ldr	r2, [pc, #640]	; (80048ec <UART_SetConfig+0x308>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d126      	bne.n	80046bc <UART_SetConfig+0xd8>
 800466e:	4ba0      	ldr	r3, [pc, #640]	; (80048f0 <UART_SetConfig+0x30c>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b03      	cmp	r3, #3
 800467a:	d81b      	bhi.n	80046b4 <UART_SetConfig+0xd0>
 800467c:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <UART_SetConfig+0xa0>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	08004695 	.word	0x08004695
 8004688:	080046a5 	.word	0x080046a5
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046ad 	.word	0x080046ad
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e080      	b.n	800479e <UART_SetConfig+0x1ba>
 800469c:	2302      	movs	r3, #2
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e07c      	b.n	800479e <UART_SetConfig+0x1ba>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e078      	b.n	800479e <UART_SetConfig+0x1ba>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e074      	b.n	800479e <UART_SetConfig+0x1ba>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e070      	b.n	800479e <UART_SetConfig+0x1ba>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a8c      	ldr	r2, [pc, #560]	; (80048f4 <UART_SetConfig+0x310>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d138      	bne.n	8004738 <UART_SetConfig+0x154>
 80046c6:	4b8a      	ldr	r3, [pc, #552]	; (80048f0 <UART_SetConfig+0x30c>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f003 030c 	and.w	r3, r3, #12
 80046d0:	2b0c      	cmp	r3, #12
 80046d2:	d82d      	bhi.n	8004730 <UART_SetConfig+0x14c>
 80046d4:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0xf8>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	08004711 	.word	0x08004711
 80046e0:	08004731 	.word	0x08004731
 80046e4:	08004731 	.word	0x08004731
 80046e8:	08004731 	.word	0x08004731
 80046ec:	08004721 	.word	0x08004721
 80046f0:	08004731 	.word	0x08004731
 80046f4:	08004731 	.word	0x08004731
 80046f8:	08004731 	.word	0x08004731
 80046fc:	08004719 	.word	0x08004719
 8004700:	08004731 	.word	0x08004731
 8004704:	08004731 	.word	0x08004731
 8004708:	08004731 	.word	0x08004731
 800470c:	08004729 	.word	0x08004729
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e042      	b.n	800479e <UART_SetConfig+0x1ba>
 8004718:	2302      	movs	r3, #2
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e03e      	b.n	800479e <UART_SetConfig+0x1ba>
 8004720:	2304      	movs	r3, #4
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e03a      	b.n	800479e <UART_SetConfig+0x1ba>
 8004728:	2308      	movs	r3, #8
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472e:	e036      	b.n	800479e <UART_SetConfig+0x1ba>
 8004730:	2310      	movs	r3, #16
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e032      	b.n	800479e <UART_SetConfig+0x1ba>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a6a      	ldr	r2, [pc, #424]	; (80048e8 <UART_SetConfig+0x304>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d12a      	bne.n	8004798 <UART_SetConfig+0x1b4>
 8004742:	4b6b      	ldr	r3, [pc, #428]	; (80048f0 <UART_SetConfig+0x30c>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800474c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004750:	d01a      	beq.n	8004788 <UART_SetConfig+0x1a4>
 8004752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004756:	d81b      	bhi.n	8004790 <UART_SetConfig+0x1ac>
 8004758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475c:	d00c      	beq.n	8004778 <UART_SetConfig+0x194>
 800475e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004762:	d815      	bhi.n	8004790 <UART_SetConfig+0x1ac>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <UART_SetConfig+0x18c>
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476c:	d008      	beq.n	8004780 <UART_SetConfig+0x19c>
 800476e:	e00f      	b.n	8004790 <UART_SetConfig+0x1ac>
 8004770:	2300      	movs	r3, #0
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e012      	b.n	800479e <UART_SetConfig+0x1ba>
 8004778:	2302      	movs	r3, #2
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e00e      	b.n	800479e <UART_SetConfig+0x1ba>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e00a      	b.n	800479e <UART_SetConfig+0x1ba>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e006      	b.n	800479e <UART_SetConfig+0x1ba>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e002      	b.n	800479e <UART_SetConfig+0x1ba>
 8004798:	2310      	movs	r3, #16
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a51      	ldr	r2, [pc, #324]	; (80048e8 <UART_SetConfig+0x304>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d17a      	bne.n	800489e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d824      	bhi.n	80047fa <UART_SetConfig+0x216>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0x1d4>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	080047fb 	.word	0x080047fb
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	080047eb 	.word	0x080047eb
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047fb 	.word	0x080047fb
 80047d4:	080047fb 	.word	0x080047fb
 80047d8:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7ff fa9c 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80047e0:	61f8      	str	r0, [r7, #28]
        break;
 80047e2:	e010      	b.n	8004806 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b44      	ldr	r3, [pc, #272]	; (80048f8 <UART_SetConfig+0x314>)
 80047e6:	61fb      	str	r3, [r7, #28]
        break;
 80047e8:	e00d      	b.n	8004806 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7ff f9fd 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 80047ee:	61f8      	str	r0, [r7, #28]
        break;
 80047f0:	e009      	b.n	8004806 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	61fb      	str	r3, [r7, #28]
        break;
 80047f8:	e005      	b.n	8004806 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004804:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8107 	beq.w	8004a1c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	429a      	cmp	r2, r3
 800481c:	d305      	bcc.n	800482a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	429a      	cmp	r2, r3
 8004828:	d903      	bls.n	8004832 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004830:	e0f4      	b.n	8004a1c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2200      	movs	r2, #0
 8004836:	461c      	mov	r4, r3
 8004838:	4615      	mov	r5, r2
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	022b      	lsls	r3, r5, #8
 8004844:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004848:	0222      	lsls	r2, r4, #8
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	6849      	ldr	r1, [r1, #4]
 800484e:	0849      	lsrs	r1, r1, #1
 8004850:	2000      	movs	r0, #0
 8004852:	4688      	mov	r8, r1
 8004854:	4681      	mov	r9, r0
 8004856:	eb12 0a08 	adds.w	sl, r2, r8
 800485a:	eb43 0b09 	adc.w	fp, r3, r9
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800486c:	4650      	mov	r0, sl
 800486e:	4659      	mov	r1, fp
 8004870:	f7fc f9ea 	bl	8000c48 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004882:	d308      	bcc.n	8004896 <UART_SetConfig+0x2b2>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488a:	d204      	bcs.n	8004896 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e0c2      	b.n	8004a1c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800489c:	e0be      	b.n	8004a1c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a6:	d16a      	bne.n	800497e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80048a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d834      	bhi.n	800491a <UART_SetConfig+0x336>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x2d4>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	08004905 	.word	0x08004905
 80048c4:	0800491b 	.word	0x0800491b
 80048c8:	0800490b 	.word	0x0800490b
 80048cc:	0800491b 	.word	0x0800491b
 80048d0:	0800491b 	.word	0x0800491b
 80048d4:	0800491b 	.word	0x0800491b
 80048d8:	08004913 	.word	0x08004913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7ff fa1c 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80048e0:	61f8      	str	r0, [r7, #28]
        break;
 80048e2:	e020      	b.n	8004926 <UART_SetConfig+0x342>
 80048e4:	efff69f3 	.word	0xefff69f3
 80048e8:	40008000 	.word	0x40008000
 80048ec:	40013800 	.word	0x40013800
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40004400 	.word	0x40004400
 80048f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7ff fa22 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8004900:	61f8      	str	r0, [r7, #28]
        break;
 8004902:	e010      	b.n	8004926 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004904:	4b4c      	ldr	r3, [pc, #304]	; (8004a38 <UART_SetConfig+0x454>)
 8004906:	61fb      	str	r3, [r7, #28]
        break;
 8004908:	e00d      	b.n	8004926 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490a:	f7ff f96d 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 800490e:	61f8      	str	r0, [r7, #28]
        break;
 8004910:	e009      	b.n	8004926 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004916:	61fb      	str	r3, [r7, #28]
        break;
 8004918:	e005      	b.n	8004926 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d077      	beq.n	8004a1c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005a      	lsls	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	441a      	add	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b0f      	cmp	r3, #15
 8004946:	d916      	bls.n	8004976 <UART_SetConfig+0x392>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d212      	bcs.n	8004976 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f023 030f 	bic.w	r3, r3, #15
 8004958:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	b29b      	uxth	r3, r3
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	b29a      	uxth	r2, r3
 8004966:	8afb      	ldrh	r3, [r7, #22]
 8004968:	4313      	orrs	r3, r2
 800496a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	8afa      	ldrh	r2, [r7, #22]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	e052      	b.n	8004a1c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800497c:	e04e      	b.n	8004a1c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800497e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004982:	2b08      	cmp	r3, #8
 8004984:	d827      	bhi.n	80049d6 <UART_SetConfig+0x3f2>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <UART_SetConfig+0x3a8>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	080049d7 	.word	0x080049d7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049d7 	.word	0x080049d7
 80049a4:	080049d7 	.word	0x080049d7
 80049a8:	080049d7 	.word	0x080049d7
 80049ac:	080049cf 	.word	0x080049cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7ff f9b2 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80049b4:	61f8      	str	r0, [r7, #28]
        break;
 80049b6:	e014      	b.n	80049e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b8:	f7ff f9c4 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 80049bc:	61f8      	str	r0, [r7, #28]
        break;
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <UART_SetConfig+0x454>)
 80049c2:	61fb      	str	r3, [r7, #28]
        break;
 80049c4:	e00d      	b.n	80049e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7ff f90f 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 80049ca:	61f8      	str	r0, [r7, #28]
        break;
 80049cc:	e009      	b.n	80049e2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d2:	61fb      	str	r3, [r7, #28]
        break;
 80049d4:	e005      	b.n	80049e2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049e0:	bf00      	nop
    }

    if (pclk != 0U)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d019      	beq.n	8004a1c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	085a      	lsrs	r2, r3, #1
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d909      	bls.n	8004a16 <UART_SetConfig+0x432>
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a08:	d205      	bcs.n	8004a16 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	e002      	b.n	8004a1c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	; 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a36:	bf00      	nop
 8004a38:	00f42400 	.word	0x00f42400

08004a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01a      	beq.n	8004b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b3a:	d10a      	bne.n	8004b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b90:	f7fd f9e4 	bl	8001f5c <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d10e      	bne.n	8004bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f82d 	bl	8004c12 <UART_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e023      	b.n	8004c0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d10e      	bne.n	8004bee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f817 	bl	8004c12 <UART_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e00d      	b.n	8004c0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b09c      	sub	sp, #112	; 0x70
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c22:	e0a5      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	f000 80a1 	beq.w	8004d70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fd f995 	bl	8001f5c <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d13e      	bne.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c58:	667b      	str	r3, [r7, #100]	; 0x64
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e6      	bne.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3308      	adds	r3, #8
 8004c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c96:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e5      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e067      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d04f      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cde:	d147      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e6      	bne.n	8004cea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3308      	adds	r3, #8
 8004d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d3c:	623a      	str	r2, [r7, #32]
 8004d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	69f9      	ldr	r1, [r7, #28]
 8004d42:	6a3a      	ldr	r2, [r7, #32]
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e5      	bne.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e010      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f43f af4a 	beq.w	8004c24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3770      	adds	r7, #112	; 0x70
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <__errno>:
 8004d9c:	4b01      	ldr	r3, [pc, #4]	; (8004da4 <__errno+0x8>)
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000044 	.word	0x20000044

08004da8 <__libc_init_array>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4d0d      	ldr	r5, [pc, #52]	; (8004de0 <__libc_init_array+0x38>)
 8004dac:	4c0d      	ldr	r4, [pc, #52]	; (8004de4 <__libc_init_array+0x3c>)
 8004dae:	1b64      	subs	r4, r4, r5
 8004db0:	10a4      	asrs	r4, r4, #2
 8004db2:	2600      	movs	r6, #0
 8004db4:	42a6      	cmp	r6, r4
 8004db6:	d109      	bne.n	8004dcc <__libc_init_array+0x24>
 8004db8:	4d0b      	ldr	r5, [pc, #44]	; (8004de8 <__libc_init_array+0x40>)
 8004dba:	4c0c      	ldr	r4, [pc, #48]	; (8004dec <__libc_init_array+0x44>)
 8004dbc:	f002 ff04 	bl	8007bc8 <_init>
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	2600      	movs	r6, #0
 8004dc6:	42a6      	cmp	r6, r4
 8004dc8:	d105      	bne.n	8004dd6 <__libc_init_array+0x2e>
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd0:	4798      	blx	r3
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7ee      	b.n	8004db4 <__libc_init_array+0xc>
 8004dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dda:	4798      	blx	r3
 8004ddc:	3601      	adds	r6, #1
 8004dde:	e7f2      	b.n	8004dc6 <__libc_init_array+0x1e>
 8004de0:	0800801c 	.word	0x0800801c
 8004de4:	0800801c 	.word	0x0800801c
 8004de8:	0800801c 	.word	0x0800801c
 8004dec:	08008020 	.word	0x08008020

08004df0 <memset>:
 8004df0:	4402      	add	r2, r0
 8004df2:	4603      	mov	r3, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d100      	bne.n	8004dfa <memset+0xa>
 8004df8:	4770      	bx	lr
 8004dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfe:	e7f9      	b.n	8004df4 <memset+0x4>

08004e00 <__cvt>:
 8004e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	ec55 4b10 	vmov	r4, r5, d0
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	460e      	mov	r6, r1
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	462b      	mov	r3, r5
 8004e10:	bfbb      	ittet	lt
 8004e12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e16:	461d      	movlt	r5, r3
 8004e18:	2300      	movge	r3, #0
 8004e1a:	232d      	movlt	r3, #45	; 0x2d
 8004e1c:	700b      	strb	r3, [r1, #0]
 8004e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e24:	4691      	mov	r9, r2
 8004e26:	f023 0820 	bic.w	r8, r3, #32
 8004e2a:	bfbc      	itt	lt
 8004e2c:	4622      	movlt	r2, r4
 8004e2e:	4614      	movlt	r4, r2
 8004e30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e34:	d005      	beq.n	8004e42 <__cvt+0x42>
 8004e36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e3a:	d100      	bne.n	8004e3e <__cvt+0x3e>
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	2102      	movs	r1, #2
 8004e40:	e000      	b.n	8004e44 <__cvt+0x44>
 8004e42:	2103      	movs	r1, #3
 8004e44:	ab03      	add	r3, sp, #12
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	ab02      	add	r3, sp, #8
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	ec45 4b10 	vmov	d0, r4, r5
 8004e50:	4653      	mov	r3, sl
 8004e52:	4632      	mov	r2, r6
 8004e54:	f000 fcec 	bl	8005830 <_dtoa_r>
 8004e58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	d102      	bne.n	8004e66 <__cvt+0x66>
 8004e60:	f019 0f01 	tst.w	r9, #1
 8004e64:	d022      	beq.n	8004eac <__cvt+0xac>
 8004e66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e6a:	eb07 0906 	add.w	r9, r7, r6
 8004e6e:	d110      	bne.n	8004e92 <__cvt+0x92>
 8004e70:	783b      	ldrb	r3, [r7, #0]
 8004e72:	2b30      	cmp	r3, #48	; 0x30
 8004e74:	d10a      	bne.n	8004e8c <__cvt+0x8c>
 8004e76:	2200      	movs	r2, #0
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7fb fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e82:	b918      	cbnz	r0, 8004e8c <__cvt+0x8c>
 8004e84:	f1c6 0601 	rsb	r6, r6, #1
 8004e88:	f8ca 6000 	str.w	r6, [sl]
 8004e8c:	f8da 3000 	ldr.w	r3, [sl]
 8004e90:	4499      	add	r9, r3
 8004e92:	2200      	movs	r2, #0
 8004e94:	2300      	movs	r3, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f7fb fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e9e:	b108      	cbz	r0, 8004ea4 <__cvt+0xa4>
 8004ea0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ea4:	2230      	movs	r2, #48	; 0x30
 8004ea6:	9b03      	ldr	r3, [sp, #12]
 8004ea8:	454b      	cmp	r3, r9
 8004eaa:	d307      	bcc.n	8004ebc <__cvt+0xbc>
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb0:	1bdb      	subs	r3, r3, r7
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	b004      	add	sp, #16
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebc:	1c59      	adds	r1, r3, #1
 8004ebe:	9103      	str	r1, [sp, #12]
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e7f0      	b.n	8004ea6 <__cvt+0xa6>

08004ec4 <__exponent>:
 8004ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	bfb8      	it	lt
 8004ecc:	4249      	neglt	r1, r1
 8004ece:	f803 2b02 	strb.w	r2, [r3], #2
 8004ed2:	bfb4      	ite	lt
 8004ed4:	222d      	movlt	r2, #45	; 0x2d
 8004ed6:	222b      	movge	r2, #43	; 0x2b
 8004ed8:	2909      	cmp	r1, #9
 8004eda:	7042      	strb	r2, [r0, #1]
 8004edc:	dd2a      	ble.n	8004f34 <__exponent+0x70>
 8004ede:	f10d 0407 	add.w	r4, sp, #7
 8004ee2:	46a4      	mov	ip, r4
 8004ee4:	270a      	movs	r7, #10
 8004ee6:	46a6      	mov	lr, r4
 8004ee8:	460a      	mov	r2, r1
 8004eea:	fb91 f6f7 	sdiv	r6, r1, r7
 8004eee:	fb07 1516 	mls	r5, r7, r6, r1
 8004ef2:	3530      	adds	r5, #48	; 0x30
 8004ef4:	2a63      	cmp	r2, #99	; 0x63
 8004ef6:	f104 34ff 	add.w	r4, r4, #4294967295
 8004efa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004efe:	4631      	mov	r1, r6
 8004f00:	dcf1      	bgt.n	8004ee6 <__exponent+0x22>
 8004f02:	3130      	adds	r1, #48	; 0x30
 8004f04:	f1ae 0502 	sub.w	r5, lr, #2
 8004f08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f0c:	1c44      	adds	r4, r0, #1
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4561      	cmp	r1, ip
 8004f12:	d30a      	bcc.n	8004f2a <__exponent+0x66>
 8004f14:	f10d 0209 	add.w	r2, sp, #9
 8004f18:	eba2 020e 	sub.w	r2, r2, lr
 8004f1c:	4565      	cmp	r5, ip
 8004f1e:	bf88      	it	hi
 8004f20:	2200      	movhi	r2, #0
 8004f22:	4413      	add	r3, r2
 8004f24:	1a18      	subs	r0, r3, r0
 8004f26:	b003      	add	sp, #12
 8004f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f32:	e7ed      	b.n	8004f10 <__exponent+0x4c>
 8004f34:	2330      	movs	r3, #48	; 0x30
 8004f36:	3130      	adds	r1, #48	; 0x30
 8004f38:	7083      	strb	r3, [r0, #2]
 8004f3a:	70c1      	strb	r1, [r0, #3]
 8004f3c:	1d03      	adds	r3, r0, #4
 8004f3e:	e7f1      	b.n	8004f24 <__exponent+0x60>

08004f40 <_printf_float>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	ed2d 8b02 	vpush	{d8}
 8004f48:	b08d      	sub	sp, #52	; 0x34
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f50:	4616      	mov	r6, r2
 8004f52:	461f      	mov	r7, r3
 8004f54:	4605      	mov	r5, r0
 8004f56:	f001 fa59 	bl	800640c <_localeconv_r>
 8004f5a:	f8d0 a000 	ldr.w	sl, [r0]
 8004f5e:	4650      	mov	r0, sl
 8004f60:	f7fb f936 	bl	80001d0 <strlen>
 8004f64:	2300      	movs	r3, #0
 8004f66:	930a      	str	r3, [sp, #40]	; 0x28
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	9305      	str	r3, [sp, #20]
 8004f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f74:	3307      	adds	r3, #7
 8004f76:	f023 0307 	bic.w	r3, r3, #7
 8004f7a:	f103 0208 	add.w	r2, r3, #8
 8004f7e:	f8c8 2000 	str.w	r2, [r8]
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f92:	9307      	str	r3, [sp, #28]
 8004f94:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f98:	ee08 0a10 	vmov	s16, r0
 8004f9c:	4b9f      	ldr	r3, [pc, #636]	; (800521c <_printf_float+0x2dc>)
 8004f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa6:	f7fb fdc1 	bl	8000b2c <__aeabi_dcmpun>
 8004faa:	bb88      	cbnz	r0, 8005010 <_printf_float+0xd0>
 8004fac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fb0:	4b9a      	ldr	r3, [pc, #616]	; (800521c <_printf_float+0x2dc>)
 8004fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb6:	f7fb fd9b 	bl	8000af0 <__aeabi_dcmple>
 8004fba:	bb48      	cbnz	r0, 8005010 <_printf_float+0xd0>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	f7fb fd8a 	bl	8000adc <__aeabi_dcmplt>
 8004fc8:	b110      	cbz	r0, 8004fd0 <_printf_float+0x90>
 8004fca:	232d      	movs	r3, #45	; 0x2d
 8004fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd0:	4b93      	ldr	r3, [pc, #588]	; (8005220 <_printf_float+0x2e0>)
 8004fd2:	4894      	ldr	r0, [pc, #592]	; (8005224 <_printf_float+0x2e4>)
 8004fd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004fd8:	bf94      	ite	ls
 8004fda:	4698      	movls	r8, r3
 8004fdc:	4680      	movhi	r8, r0
 8004fde:	2303      	movs	r3, #3
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	9b05      	ldr	r3, [sp, #20]
 8004fe4:	f023 0204 	bic.w	r2, r3, #4
 8004fe8:	6022      	str	r2, [r4, #0]
 8004fea:	f04f 0900 	mov.w	r9, #0
 8004fee:	9700      	str	r7, [sp, #0]
 8004ff0:	4633      	mov	r3, r6
 8004ff2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 f9d8 	bl	80053ac <_printf_common>
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	f040 8090 	bne.w	8005122 <_printf_float+0x1e2>
 8005002:	f04f 30ff 	mov.w	r0, #4294967295
 8005006:	b00d      	add	sp, #52	; 0x34
 8005008:	ecbd 8b02 	vpop	{d8}
 800500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb fd88 	bl	8000b2c <__aeabi_dcmpun>
 800501c:	b140      	cbz	r0, 8005030 <_printf_float+0xf0>
 800501e:	464b      	mov	r3, r9
 8005020:	2b00      	cmp	r3, #0
 8005022:	bfbc      	itt	lt
 8005024:	232d      	movlt	r3, #45	; 0x2d
 8005026:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800502a:	487f      	ldr	r0, [pc, #508]	; (8005228 <_printf_float+0x2e8>)
 800502c:	4b7f      	ldr	r3, [pc, #508]	; (800522c <_printf_float+0x2ec>)
 800502e:	e7d1      	b.n	8004fd4 <_printf_float+0x94>
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005036:	9206      	str	r2, [sp, #24]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	d13f      	bne.n	80050bc <_printf_float+0x17c>
 800503c:	2306      	movs	r3, #6
 800503e:	6063      	str	r3, [r4, #4]
 8005040:	9b05      	ldr	r3, [sp, #20]
 8005042:	6861      	ldr	r1, [r4, #4]
 8005044:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005048:	2300      	movs	r3, #0
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	ab0a      	add	r3, sp, #40	; 0x28
 800504e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005052:	ab09      	add	r3, sp, #36	; 0x24
 8005054:	ec49 8b10 	vmov	d0, r8, r9
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	6022      	str	r2, [r4, #0]
 800505c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005060:	4628      	mov	r0, r5
 8005062:	f7ff fecd 	bl	8004e00 <__cvt>
 8005066:	9b06      	ldr	r3, [sp, #24]
 8005068:	9909      	ldr	r1, [sp, #36]	; 0x24
 800506a:	2b47      	cmp	r3, #71	; 0x47
 800506c:	4680      	mov	r8, r0
 800506e:	d108      	bne.n	8005082 <_printf_float+0x142>
 8005070:	1cc8      	adds	r0, r1, #3
 8005072:	db02      	blt.n	800507a <_printf_float+0x13a>
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	4299      	cmp	r1, r3
 8005078:	dd41      	ble.n	80050fe <_printf_float+0x1be>
 800507a:	f1ab 0b02 	sub.w	fp, fp, #2
 800507e:	fa5f fb8b 	uxtb.w	fp, fp
 8005082:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005086:	d820      	bhi.n	80050ca <_printf_float+0x18a>
 8005088:	3901      	subs	r1, #1
 800508a:	465a      	mov	r2, fp
 800508c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005090:	9109      	str	r1, [sp, #36]	; 0x24
 8005092:	f7ff ff17 	bl	8004ec4 <__exponent>
 8005096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005098:	1813      	adds	r3, r2, r0
 800509a:	2a01      	cmp	r2, #1
 800509c:	4681      	mov	r9, r0
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	dc02      	bgt.n	80050a8 <_printf_float+0x168>
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	07d2      	lsls	r2, r2, #31
 80050a6:	d501      	bpl.n	80050ac <_printf_float+0x16c>
 80050a8:	3301      	adds	r3, #1
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d09c      	beq.n	8004fee <_printf_float+0xae>
 80050b4:	232d      	movs	r3, #45	; 0x2d
 80050b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ba:	e798      	b.n	8004fee <_printf_float+0xae>
 80050bc:	9a06      	ldr	r2, [sp, #24]
 80050be:	2a47      	cmp	r2, #71	; 0x47
 80050c0:	d1be      	bne.n	8005040 <_printf_float+0x100>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1bc      	bne.n	8005040 <_printf_float+0x100>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e7b9      	b.n	800503e <_printf_float+0xfe>
 80050ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050ce:	d118      	bne.n	8005102 <_printf_float+0x1c2>
 80050d0:	2900      	cmp	r1, #0
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	dd0b      	ble.n	80050ee <_printf_float+0x1ae>
 80050d6:	6121      	str	r1, [r4, #16]
 80050d8:	b913      	cbnz	r3, 80050e0 <_printf_float+0x1a0>
 80050da:	6822      	ldr	r2, [r4, #0]
 80050dc:	07d0      	lsls	r0, r2, #31
 80050de:	d502      	bpl.n	80050e6 <_printf_float+0x1a6>
 80050e0:	3301      	adds	r3, #1
 80050e2:	440b      	add	r3, r1
 80050e4:	6123      	str	r3, [r4, #16]
 80050e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80050e8:	f04f 0900 	mov.w	r9, #0
 80050ec:	e7de      	b.n	80050ac <_printf_float+0x16c>
 80050ee:	b913      	cbnz	r3, 80050f6 <_printf_float+0x1b6>
 80050f0:	6822      	ldr	r2, [r4, #0]
 80050f2:	07d2      	lsls	r2, r2, #31
 80050f4:	d501      	bpl.n	80050fa <_printf_float+0x1ba>
 80050f6:	3302      	adds	r3, #2
 80050f8:	e7f4      	b.n	80050e4 <_printf_float+0x1a4>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e7f2      	b.n	80050e4 <_printf_float+0x1a4>
 80050fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005104:	4299      	cmp	r1, r3
 8005106:	db05      	blt.n	8005114 <_printf_float+0x1d4>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	6121      	str	r1, [r4, #16]
 800510c:	07d8      	lsls	r0, r3, #31
 800510e:	d5ea      	bpl.n	80050e6 <_printf_float+0x1a6>
 8005110:	1c4b      	adds	r3, r1, #1
 8005112:	e7e7      	b.n	80050e4 <_printf_float+0x1a4>
 8005114:	2900      	cmp	r1, #0
 8005116:	bfd4      	ite	le
 8005118:	f1c1 0202 	rsble	r2, r1, #2
 800511c:	2201      	movgt	r2, #1
 800511e:	4413      	add	r3, r2
 8005120:	e7e0      	b.n	80050e4 <_printf_float+0x1a4>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	055a      	lsls	r2, r3, #21
 8005126:	d407      	bmi.n	8005138 <_printf_float+0x1f8>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	4642      	mov	r2, r8
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	d12c      	bne.n	8005190 <_printf_float+0x250>
 8005136:	e764      	b.n	8005002 <_printf_float+0xc2>
 8005138:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800513c:	f240 80e0 	bls.w	8005300 <_printf_float+0x3c0>
 8005140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005144:	2200      	movs	r2, #0
 8005146:	2300      	movs	r3, #0
 8005148:	f7fb fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800514c:	2800      	cmp	r0, #0
 800514e:	d034      	beq.n	80051ba <_printf_float+0x27a>
 8005150:	4a37      	ldr	r2, [pc, #220]	; (8005230 <_printf_float+0x2f0>)
 8005152:	2301      	movs	r3, #1
 8005154:	4631      	mov	r1, r6
 8005156:	4628      	mov	r0, r5
 8005158:	47b8      	blx	r7
 800515a:	3001      	adds	r0, #1
 800515c:	f43f af51 	beq.w	8005002 <_printf_float+0xc2>
 8005160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005164:	429a      	cmp	r2, r3
 8005166:	db02      	blt.n	800516e <_printf_float+0x22e>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	07d8      	lsls	r0, r3, #31
 800516c:	d510      	bpl.n	8005190 <_printf_float+0x250>
 800516e:	ee18 3a10 	vmov	r3, s16
 8005172:	4652      	mov	r2, sl
 8005174:	4631      	mov	r1, r6
 8005176:	4628      	mov	r0, r5
 8005178:	47b8      	blx	r7
 800517a:	3001      	adds	r0, #1
 800517c:	f43f af41 	beq.w	8005002 <_printf_float+0xc2>
 8005180:	f04f 0800 	mov.w	r8, #0
 8005184:	f104 091a 	add.w	r9, r4, #26
 8005188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518a:	3b01      	subs	r3, #1
 800518c:	4543      	cmp	r3, r8
 800518e:	dc09      	bgt.n	80051a4 <_printf_float+0x264>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	079b      	lsls	r3, r3, #30
 8005194:	f100 8105 	bmi.w	80053a2 <_printf_float+0x462>
 8005198:	68e0      	ldr	r0, [r4, #12]
 800519a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800519c:	4298      	cmp	r0, r3
 800519e:	bfb8      	it	lt
 80051a0:	4618      	movlt	r0, r3
 80051a2:	e730      	b.n	8005006 <_printf_float+0xc6>
 80051a4:	2301      	movs	r3, #1
 80051a6:	464a      	mov	r2, r9
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	f43f af27 	beq.w	8005002 <_printf_float+0xc2>
 80051b4:	f108 0801 	add.w	r8, r8, #1
 80051b8:	e7e6      	b.n	8005188 <_printf_float+0x248>
 80051ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dc39      	bgt.n	8005234 <_printf_float+0x2f4>
 80051c0:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <_printf_float+0x2f0>)
 80051c2:	2301      	movs	r3, #1
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	f43f af19 	beq.w	8005002 <_printf_float+0xc2>
 80051d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051d4:	4313      	orrs	r3, r2
 80051d6:	d102      	bne.n	80051de <_printf_float+0x29e>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	07d9      	lsls	r1, r3, #31
 80051dc:	d5d8      	bpl.n	8005190 <_printf_float+0x250>
 80051de:	ee18 3a10 	vmov	r3, s16
 80051e2:	4652      	mov	r2, sl
 80051e4:	4631      	mov	r1, r6
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b8      	blx	r7
 80051ea:	3001      	adds	r0, #1
 80051ec:	f43f af09 	beq.w	8005002 <_printf_float+0xc2>
 80051f0:	f04f 0900 	mov.w	r9, #0
 80051f4:	f104 0a1a 	add.w	sl, r4, #26
 80051f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fa:	425b      	negs	r3, r3
 80051fc:	454b      	cmp	r3, r9
 80051fe:	dc01      	bgt.n	8005204 <_printf_float+0x2c4>
 8005200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005202:	e792      	b.n	800512a <_printf_float+0x1ea>
 8005204:	2301      	movs	r3, #1
 8005206:	4652      	mov	r2, sl
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	f43f aef7 	beq.w	8005002 <_printf_float+0xc2>
 8005214:	f109 0901 	add.w	r9, r9, #1
 8005218:	e7ee      	b.n	80051f8 <_printf_float+0x2b8>
 800521a:	bf00      	nop
 800521c:	7fefffff 	.word	0x7fefffff
 8005220:	08007c3c 	.word	0x08007c3c
 8005224:	08007c40 	.word	0x08007c40
 8005228:	08007c48 	.word	0x08007c48
 800522c:	08007c44 	.word	0x08007c44
 8005230:	08007c4c 	.word	0x08007c4c
 8005234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005238:	429a      	cmp	r2, r3
 800523a:	bfa8      	it	ge
 800523c:	461a      	movge	r2, r3
 800523e:	2a00      	cmp	r2, #0
 8005240:	4691      	mov	r9, r2
 8005242:	dc37      	bgt.n	80052b4 <_printf_float+0x374>
 8005244:	f04f 0b00 	mov.w	fp, #0
 8005248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800524c:	f104 021a 	add.w	r2, r4, #26
 8005250:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005252:	9305      	str	r3, [sp, #20]
 8005254:	eba3 0309 	sub.w	r3, r3, r9
 8005258:	455b      	cmp	r3, fp
 800525a:	dc33      	bgt.n	80052c4 <_printf_float+0x384>
 800525c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005260:	429a      	cmp	r2, r3
 8005262:	db3b      	blt.n	80052dc <_printf_float+0x39c>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	07da      	lsls	r2, r3, #31
 8005268:	d438      	bmi.n	80052dc <_printf_float+0x39c>
 800526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526c:	9a05      	ldr	r2, [sp, #20]
 800526e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005270:	1a9a      	subs	r2, r3, r2
 8005272:	eba3 0901 	sub.w	r9, r3, r1
 8005276:	4591      	cmp	r9, r2
 8005278:	bfa8      	it	ge
 800527a:	4691      	movge	r9, r2
 800527c:	f1b9 0f00 	cmp.w	r9, #0
 8005280:	dc35      	bgt.n	80052ee <_printf_float+0x3ae>
 8005282:	f04f 0800 	mov.w	r8, #0
 8005286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800528a:	f104 0a1a 	add.w	sl, r4, #26
 800528e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	eba3 0309 	sub.w	r3, r3, r9
 8005298:	4543      	cmp	r3, r8
 800529a:	f77f af79 	ble.w	8005190 <_printf_float+0x250>
 800529e:	2301      	movs	r3, #1
 80052a0:	4652      	mov	r2, sl
 80052a2:	4631      	mov	r1, r6
 80052a4:	4628      	mov	r0, r5
 80052a6:	47b8      	blx	r7
 80052a8:	3001      	adds	r0, #1
 80052aa:	f43f aeaa 	beq.w	8005002 <_printf_float+0xc2>
 80052ae:	f108 0801 	add.w	r8, r8, #1
 80052b2:	e7ec      	b.n	800528e <_printf_float+0x34e>
 80052b4:	4613      	mov	r3, r2
 80052b6:	4631      	mov	r1, r6
 80052b8:	4642      	mov	r2, r8
 80052ba:	4628      	mov	r0, r5
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	d1c0      	bne.n	8005244 <_printf_float+0x304>
 80052c2:	e69e      	b.n	8005002 <_printf_float+0xc2>
 80052c4:	2301      	movs	r3, #1
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	9205      	str	r2, [sp, #20]
 80052cc:	47b8      	blx	r7
 80052ce:	3001      	adds	r0, #1
 80052d0:	f43f ae97 	beq.w	8005002 <_printf_float+0xc2>
 80052d4:	9a05      	ldr	r2, [sp, #20]
 80052d6:	f10b 0b01 	add.w	fp, fp, #1
 80052da:	e7b9      	b.n	8005250 <_printf_float+0x310>
 80052dc:	ee18 3a10 	vmov	r3, s16
 80052e0:	4652      	mov	r2, sl
 80052e2:	4631      	mov	r1, r6
 80052e4:	4628      	mov	r0, r5
 80052e6:	47b8      	blx	r7
 80052e8:	3001      	adds	r0, #1
 80052ea:	d1be      	bne.n	800526a <_printf_float+0x32a>
 80052ec:	e689      	b.n	8005002 <_printf_float+0xc2>
 80052ee:	9a05      	ldr	r2, [sp, #20]
 80052f0:	464b      	mov	r3, r9
 80052f2:	4442      	add	r2, r8
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	d1c1      	bne.n	8005282 <_printf_float+0x342>
 80052fe:	e680      	b.n	8005002 <_printf_float+0xc2>
 8005300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005302:	2a01      	cmp	r2, #1
 8005304:	dc01      	bgt.n	800530a <_printf_float+0x3ca>
 8005306:	07db      	lsls	r3, r3, #31
 8005308:	d538      	bpl.n	800537c <_printf_float+0x43c>
 800530a:	2301      	movs	r3, #1
 800530c:	4642      	mov	r2, r8
 800530e:	4631      	mov	r1, r6
 8005310:	4628      	mov	r0, r5
 8005312:	47b8      	blx	r7
 8005314:	3001      	adds	r0, #1
 8005316:	f43f ae74 	beq.w	8005002 <_printf_float+0xc2>
 800531a:	ee18 3a10 	vmov	r3, s16
 800531e:	4652      	mov	r2, sl
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f ae6b 	beq.w	8005002 <_printf_float+0xc2>
 800532c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005330:	2200      	movs	r2, #0
 8005332:	2300      	movs	r3, #0
 8005334:	f7fb fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005338:	b9d8      	cbnz	r0, 8005372 <_printf_float+0x432>
 800533a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800533c:	f108 0201 	add.w	r2, r8, #1
 8005340:	3b01      	subs	r3, #1
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	d10e      	bne.n	800536a <_printf_float+0x42a>
 800534c:	e659      	b.n	8005002 <_printf_float+0xc2>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f ae52 	beq.w	8005002 <_printf_float+0xc2>
 800535e:	f108 0801 	add.w	r8, r8, #1
 8005362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005364:	3b01      	subs	r3, #1
 8005366:	4543      	cmp	r3, r8
 8005368:	dcf1      	bgt.n	800534e <_printf_float+0x40e>
 800536a:	464b      	mov	r3, r9
 800536c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005370:	e6dc      	b.n	800512c <_printf_float+0x1ec>
 8005372:	f04f 0800 	mov.w	r8, #0
 8005376:	f104 0a1a 	add.w	sl, r4, #26
 800537a:	e7f2      	b.n	8005362 <_printf_float+0x422>
 800537c:	2301      	movs	r3, #1
 800537e:	4642      	mov	r2, r8
 8005380:	e7df      	b.n	8005342 <_printf_float+0x402>
 8005382:	2301      	movs	r3, #1
 8005384:	464a      	mov	r2, r9
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f ae38 	beq.w	8005002 <_printf_float+0xc2>
 8005392:	f108 0801 	add.w	r8, r8, #1
 8005396:	68e3      	ldr	r3, [r4, #12]
 8005398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800539a:	1a5b      	subs	r3, r3, r1
 800539c:	4543      	cmp	r3, r8
 800539e:	dcf0      	bgt.n	8005382 <_printf_float+0x442>
 80053a0:	e6fa      	b.n	8005198 <_printf_float+0x258>
 80053a2:	f04f 0800 	mov.w	r8, #0
 80053a6:	f104 0919 	add.w	r9, r4, #25
 80053aa:	e7f4      	b.n	8005396 <_printf_float+0x456>

080053ac <_printf_common>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	4616      	mov	r6, r2
 80053b2:	4699      	mov	r9, r3
 80053b4:	688a      	ldr	r2, [r1, #8]
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053bc:	4293      	cmp	r3, r2
 80053be:	bfb8      	it	lt
 80053c0:	4613      	movlt	r3, r2
 80053c2:	6033      	str	r3, [r6, #0]
 80053c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c8:	4607      	mov	r7, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	b10a      	cbz	r2, 80053d2 <_printf_common+0x26>
 80053ce:	3301      	adds	r3, #1
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	6833      	ldrmi	r3, [r6, #0]
 80053da:	3302      	addmi	r3, #2
 80053dc:	6033      	strmi	r3, [r6, #0]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d106      	bne.n	80053f4 <_printf_common+0x48>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	6832      	ldr	r2, [r6, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	dc26      	bgt.n	8005442 <_printf_common+0x96>
 80053f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053f8:	1e13      	subs	r3, r2, #0
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	bf18      	it	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d42b      	bmi.n	800545c <_printf_common+0xb0>
 8005404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d01e      	beq.n	8005450 <_printf_common+0xa4>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	68e5      	ldr	r5, [r4, #12]
 8005416:	6832      	ldr	r2, [r6, #0]
 8005418:	f003 0306 	and.w	r3, r3, #6
 800541c:	2b04      	cmp	r3, #4
 800541e:	bf08      	it	eq
 8005420:	1aad      	subeq	r5, r5, r2
 8005422:	68a3      	ldr	r3, [r4, #8]
 8005424:	6922      	ldr	r2, [r4, #16]
 8005426:	bf0c      	ite	eq
 8005428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800542c:	2500      	movne	r5, #0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfc4      	itt	gt
 8005432:	1a9b      	subgt	r3, r3, r2
 8005434:	18ed      	addgt	r5, r5, r3
 8005436:	2600      	movs	r6, #0
 8005438:	341a      	adds	r4, #26
 800543a:	42b5      	cmp	r5, r6
 800543c:	d11a      	bne.n	8005474 <_printf_common+0xc8>
 800543e:	2000      	movs	r0, #0
 8005440:	e008      	b.n	8005454 <_printf_common+0xa8>
 8005442:	2301      	movs	r3, #1
 8005444:	4652      	mov	r2, sl
 8005446:	4649      	mov	r1, r9
 8005448:	4638      	mov	r0, r7
 800544a:	47c0      	blx	r8
 800544c:	3001      	adds	r0, #1
 800544e:	d103      	bne.n	8005458 <_printf_common+0xac>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	3501      	adds	r5, #1
 800545a:	e7c6      	b.n	80053ea <_printf_common+0x3e>
 800545c:	18e1      	adds	r1, r4, r3
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	2030      	movs	r0, #48	; 0x30
 8005462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005466:	4422      	add	r2, r4
 8005468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800546c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005470:	3302      	adds	r3, #2
 8005472:	e7c7      	b.n	8005404 <_printf_common+0x58>
 8005474:	2301      	movs	r3, #1
 8005476:	4622      	mov	r2, r4
 8005478:	4649      	mov	r1, r9
 800547a:	4638      	mov	r0, r7
 800547c:	47c0      	blx	r8
 800547e:	3001      	adds	r0, #1
 8005480:	d0e6      	beq.n	8005450 <_printf_common+0xa4>
 8005482:	3601      	adds	r6, #1
 8005484:	e7d9      	b.n	800543a <_printf_common+0x8e>
	...

08005488 <_printf_i>:
 8005488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	7e0f      	ldrb	r7, [r1, #24]
 800548e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005490:	2f78      	cmp	r7, #120	; 0x78
 8005492:	4691      	mov	r9, r2
 8005494:	4680      	mov	r8, r0
 8005496:	460c      	mov	r4, r1
 8005498:	469a      	mov	sl, r3
 800549a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800549e:	d807      	bhi.n	80054b0 <_printf_i+0x28>
 80054a0:	2f62      	cmp	r7, #98	; 0x62
 80054a2:	d80a      	bhi.n	80054ba <_printf_i+0x32>
 80054a4:	2f00      	cmp	r7, #0
 80054a6:	f000 80d8 	beq.w	800565a <_printf_i+0x1d2>
 80054aa:	2f58      	cmp	r7, #88	; 0x58
 80054ac:	f000 80a3 	beq.w	80055f6 <_printf_i+0x16e>
 80054b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054b8:	e03a      	b.n	8005530 <_printf_i+0xa8>
 80054ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054be:	2b15      	cmp	r3, #21
 80054c0:	d8f6      	bhi.n	80054b0 <_printf_i+0x28>
 80054c2:	a101      	add	r1, pc, #4	; (adr r1, 80054c8 <_printf_i+0x40>)
 80054c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005535 	.word	0x08005535
 80054d0:	080054b1 	.word	0x080054b1
 80054d4:	080054b1 	.word	0x080054b1
 80054d8:	080054b1 	.word	0x080054b1
 80054dc:	080054b1 	.word	0x080054b1
 80054e0:	08005535 	.word	0x08005535
 80054e4:	080054b1 	.word	0x080054b1
 80054e8:	080054b1 	.word	0x080054b1
 80054ec:	080054b1 	.word	0x080054b1
 80054f0:	080054b1 	.word	0x080054b1
 80054f4:	08005641 	.word	0x08005641
 80054f8:	08005565 	.word	0x08005565
 80054fc:	08005623 	.word	0x08005623
 8005500:	080054b1 	.word	0x080054b1
 8005504:	080054b1 	.word	0x080054b1
 8005508:	08005663 	.word	0x08005663
 800550c:	080054b1 	.word	0x080054b1
 8005510:	08005565 	.word	0x08005565
 8005514:	080054b1 	.word	0x080054b1
 8005518:	080054b1 	.word	0x080054b1
 800551c:	0800562b 	.word	0x0800562b
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	602a      	str	r2, [r5, #0]
 8005528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005530:	2301      	movs	r3, #1
 8005532:	e0a3      	b.n	800567c <_printf_i+0x1f4>
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	6829      	ldr	r1, [r5, #0]
 8005538:	0606      	lsls	r6, r0, #24
 800553a:	f101 0304 	add.w	r3, r1, #4
 800553e:	d50a      	bpl.n	8005556 <_printf_i+0xce>
 8005540:	680e      	ldr	r6, [r1, #0]
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	2e00      	cmp	r6, #0
 8005546:	da03      	bge.n	8005550 <_printf_i+0xc8>
 8005548:	232d      	movs	r3, #45	; 0x2d
 800554a:	4276      	negs	r6, r6
 800554c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005550:	485e      	ldr	r0, [pc, #376]	; (80056cc <_printf_i+0x244>)
 8005552:	230a      	movs	r3, #10
 8005554:	e019      	b.n	800558a <_printf_i+0x102>
 8005556:	680e      	ldr	r6, [r1, #0]
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800555e:	bf18      	it	ne
 8005560:	b236      	sxthne	r6, r6
 8005562:	e7ef      	b.n	8005544 <_printf_i+0xbc>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	1d19      	adds	r1, r3, #4
 800556a:	6029      	str	r1, [r5, #0]
 800556c:	0601      	lsls	r1, r0, #24
 800556e:	d501      	bpl.n	8005574 <_printf_i+0xec>
 8005570:	681e      	ldr	r6, [r3, #0]
 8005572:	e002      	b.n	800557a <_printf_i+0xf2>
 8005574:	0646      	lsls	r6, r0, #25
 8005576:	d5fb      	bpl.n	8005570 <_printf_i+0xe8>
 8005578:	881e      	ldrh	r6, [r3, #0]
 800557a:	4854      	ldr	r0, [pc, #336]	; (80056cc <_printf_i+0x244>)
 800557c:	2f6f      	cmp	r7, #111	; 0x6f
 800557e:	bf0c      	ite	eq
 8005580:	2308      	moveq	r3, #8
 8005582:	230a      	movne	r3, #10
 8005584:	2100      	movs	r1, #0
 8005586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800558a:	6865      	ldr	r5, [r4, #4]
 800558c:	60a5      	str	r5, [r4, #8]
 800558e:	2d00      	cmp	r5, #0
 8005590:	bfa2      	ittt	ge
 8005592:	6821      	ldrge	r1, [r4, #0]
 8005594:	f021 0104 	bicge.w	r1, r1, #4
 8005598:	6021      	strge	r1, [r4, #0]
 800559a:	b90e      	cbnz	r6, 80055a0 <_printf_i+0x118>
 800559c:	2d00      	cmp	r5, #0
 800559e:	d04d      	beq.n	800563c <_printf_i+0x1b4>
 80055a0:	4615      	mov	r5, r2
 80055a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055a6:	fb03 6711 	mls	r7, r3, r1, r6
 80055aa:	5dc7      	ldrb	r7, [r0, r7]
 80055ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055b0:	4637      	mov	r7, r6
 80055b2:	42bb      	cmp	r3, r7
 80055b4:	460e      	mov	r6, r1
 80055b6:	d9f4      	bls.n	80055a2 <_printf_i+0x11a>
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d10b      	bne.n	80055d4 <_printf_i+0x14c>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	07de      	lsls	r6, r3, #31
 80055c0:	d508      	bpl.n	80055d4 <_printf_i+0x14c>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	6861      	ldr	r1, [r4, #4]
 80055c6:	4299      	cmp	r1, r3
 80055c8:	bfde      	ittt	le
 80055ca:	2330      	movle	r3, #48	; 0x30
 80055cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055d4:	1b52      	subs	r2, r2, r5
 80055d6:	6122      	str	r2, [r4, #16]
 80055d8:	f8cd a000 	str.w	sl, [sp]
 80055dc:	464b      	mov	r3, r9
 80055de:	aa03      	add	r2, sp, #12
 80055e0:	4621      	mov	r1, r4
 80055e2:	4640      	mov	r0, r8
 80055e4:	f7ff fee2 	bl	80053ac <_printf_common>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d14c      	bne.n	8005686 <_printf_i+0x1fe>
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	b004      	add	sp, #16
 80055f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f6:	4835      	ldr	r0, [pc, #212]	; (80056cc <_printf_i+0x244>)
 80055f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055fc:	6829      	ldr	r1, [r5, #0]
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f851 6b04 	ldr.w	r6, [r1], #4
 8005604:	6029      	str	r1, [r5, #0]
 8005606:	061d      	lsls	r5, r3, #24
 8005608:	d514      	bpl.n	8005634 <_printf_i+0x1ac>
 800560a:	07df      	lsls	r7, r3, #31
 800560c:	bf44      	itt	mi
 800560e:	f043 0320 	orrmi.w	r3, r3, #32
 8005612:	6023      	strmi	r3, [r4, #0]
 8005614:	b91e      	cbnz	r6, 800561e <_printf_i+0x196>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	f023 0320 	bic.w	r3, r3, #32
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	2310      	movs	r3, #16
 8005620:	e7b0      	b.n	8005584 <_printf_i+0xfc>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	f043 0320 	orr.w	r3, r3, #32
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	2378      	movs	r3, #120	; 0x78
 800562c:	4828      	ldr	r0, [pc, #160]	; (80056d0 <_printf_i+0x248>)
 800562e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005632:	e7e3      	b.n	80055fc <_printf_i+0x174>
 8005634:	0659      	lsls	r1, r3, #25
 8005636:	bf48      	it	mi
 8005638:	b2b6      	uxthmi	r6, r6
 800563a:	e7e6      	b.n	800560a <_printf_i+0x182>
 800563c:	4615      	mov	r5, r2
 800563e:	e7bb      	b.n	80055b8 <_printf_i+0x130>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	6826      	ldr	r6, [r4, #0]
 8005644:	6961      	ldr	r1, [r4, #20]
 8005646:	1d18      	adds	r0, r3, #4
 8005648:	6028      	str	r0, [r5, #0]
 800564a:	0635      	lsls	r5, r6, #24
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	d501      	bpl.n	8005654 <_printf_i+0x1cc>
 8005650:	6019      	str	r1, [r3, #0]
 8005652:	e002      	b.n	800565a <_printf_i+0x1d2>
 8005654:	0670      	lsls	r0, r6, #25
 8005656:	d5fb      	bpl.n	8005650 <_printf_i+0x1c8>
 8005658:	8019      	strh	r1, [r3, #0]
 800565a:	2300      	movs	r3, #0
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	4615      	mov	r5, r2
 8005660:	e7ba      	b.n	80055d8 <_printf_i+0x150>
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	1d1a      	adds	r2, r3, #4
 8005666:	602a      	str	r2, [r5, #0]
 8005668:	681d      	ldr	r5, [r3, #0]
 800566a:	6862      	ldr	r2, [r4, #4]
 800566c:	2100      	movs	r1, #0
 800566e:	4628      	mov	r0, r5
 8005670:	f7fa fdb6 	bl	80001e0 <memchr>
 8005674:	b108      	cbz	r0, 800567a <_printf_i+0x1f2>
 8005676:	1b40      	subs	r0, r0, r5
 8005678:	6060      	str	r0, [r4, #4]
 800567a:	6863      	ldr	r3, [r4, #4]
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	2300      	movs	r3, #0
 8005680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005684:	e7a8      	b.n	80055d8 <_printf_i+0x150>
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	462a      	mov	r2, r5
 800568a:	4649      	mov	r1, r9
 800568c:	4640      	mov	r0, r8
 800568e:	47d0      	blx	sl
 8005690:	3001      	adds	r0, #1
 8005692:	d0ab      	beq.n	80055ec <_printf_i+0x164>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	079b      	lsls	r3, r3, #30
 8005698:	d413      	bmi.n	80056c2 <_printf_i+0x23a>
 800569a:	68e0      	ldr	r0, [r4, #12]
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	4298      	cmp	r0, r3
 80056a0:	bfb8      	it	lt
 80056a2:	4618      	movlt	r0, r3
 80056a4:	e7a4      	b.n	80055f0 <_printf_i+0x168>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4632      	mov	r2, r6
 80056aa:	4649      	mov	r1, r9
 80056ac:	4640      	mov	r0, r8
 80056ae:	47d0      	blx	sl
 80056b0:	3001      	adds	r0, #1
 80056b2:	d09b      	beq.n	80055ec <_printf_i+0x164>
 80056b4:	3501      	adds	r5, #1
 80056b6:	68e3      	ldr	r3, [r4, #12]
 80056b8:	9903      	ldr	r1, [sp, #12]
 80056ba:	1a5b      	subs	r3, r3, r1
 80056bc:	42ab      	cmp	r3, r5
 80056be:	dcf2      	bgt.n	80056a6 <_printf_i+0x21e>
 80056c0:	e7eb      	b.n	800569a <_printf_i+0x212>
 80056c2:	2500      	movs	r5, #0
 80056c4:	f104 0619 	add.w	r6, r4, #25
 80056c8:	e7f5      	b.n	80056b6 <_printf_i+0x22e>
 80056ca:	bf00      	nop
 80056cc:	08007c4e 	.word	0x08007c4e
 80056d0:	08007c5f 	.word	0x08007c5f

080056d4 <siprintf>:
 80056d4:	b40e      	push	{r1, r2, r3}
 80056d6:	b500      	push	{lr}
 80056d8:	b09c      	sub	sp, #112	; 0x70
 80056da:	ab1d      	add	r3, sp, #116	; 0x74
 80056dc:	9002      	str	r0, [sp, #8]
 80056de:	9006      	str	r0, [sp, #24]
 80056e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056e4:	4809      	ldr	r0, [pc, #36]	; (800570c <siprintf+0x38>)
 80056e6:	9107      	str	r1, [sp, #28]
 80056e8:	9104      	str	r1, [sp, #16]
 80056ea:	4909      	ldr	r1, [pc, #36]	; (8005710 <siprintf+0x3c>)
 80056ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80056f0:	9105      	str	r1, [sp, #20]
 80056f2:	6800      	ldr	r0, [r0, #0]
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	a902      	add	r1, sp, #8
 80056f8:	f001 fb78 	bl	8006dec <_svfiprintf_r>
 80056fc:	9b02      	ldr	r3, [sp, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	b01c      	add	sp, #112	; 0x70
 8005704:	f85d eb04 	ldr.w	lr, [sp], #4
 8005708:	b003      	add	sp, #12
 800570a:	4770      	bx	lr
 800570c:	20000044 	.word	0x20000044
 8005710:	ffff0208 	.word	0xffff0208

08005714 <quorem>:
 8005714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	6903      	ldr	r3, [r0, #16]
 800571a:	690c      	ldr	r4, [r1, #16]
 800571c:	42a3      	cmp	r3, r4
 800571e:	4607      	mov	r7, r0
 8005720:	f2c0 8081 	blt.w	8005826 <quorem+0x112>
 8005724:	3c01      	subs	r4, #1
 8005726:	f101 0814 	add.w	r8, r1, #20
 800572a:	f100 0514 	add.w	r5, r0, #20
 800572e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800573c:	3301      	adds	r3, #1
 800573e:	429a      	cmp	r2, r3
 8005740:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005744:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005748:	fbb2 f6f3 	udiv	r6, r2, r3
 800574c:	d331      	bcc.n	80057b2 <quorem+0x9e>
 800574e:	f04f 0e00 	mov.w	lr, #0
 8005752:	4640      	mov	r0, r8
 8005754:	46ac      	mov	ip, r5
 8005756:	46f2      	mov	sl, lr
 8005758:	f850 2b04 	ldr.w	r2, [r0], #4
 800575c:	b293      	uxth	r3, r2
 800575e:	fb06 e303 	mla	r3, r6, r3, lr
 8005762:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005766:	b29b      	uxth	r3, r3
 8005768:	ebaa 0303 	sub.w	r3, sl, r3
 800576c:	f8dc a000 	ldr.w	sl, [ip]
 8005770:	0c12      	lsrs	r2, r2, #16
 8005772:	fa13 f38a 	uxtah	r3, r3, sl
 8005776:	fb06 e202 	mla	r2, r6, r2, lr
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	9b00      	ldr	r3, [sp, #0]
 800577e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005782:	b292      	uxth	r2, r2
 8005784:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005788:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800578c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005790:	4581      	cmp	r9, r0
 8005792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005796:	f84c 3b04 	str.w	r3, [ip], #4
 800579a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800579e:	d2db      	bcs.n	8005758 <quorem+0x44>
 80057a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80057a4:	b92b      	cbnz	r3, 80057b2 <quorem+0x9e>
 80057a6:	9b01      	ldr	r3, [sp, #4]
 80057a8:	3b04      	subs	r3, #4
 80057aa:	429d      	cmp	r5, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	d32e      	bcc.n	800580e <quorem+0xfa>
 80057b0:	613c      	str	r4, [r7, #16]
 80057b2:	4638      	mov	r0, r7
 80057b4:	f001 f8c6 	bl	8006944 <__mcmp>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	db24      	blt.n	8005806 <quorem+0xf2>
 80057bc:	3601      	adds	r6, #1
 80057be:	4628      	mov	r0, r5
 80057c0:	f04f 0c00 	mov.w	ip, #0
 80057c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80057c8:	f8d0 e000 	ldr.w	lr, [r0]
 80057cc:	b293      	uxth	r3, r2
 80057ce:	ebac 0303 	sub.w	r3, ip, r3
 80057d2:	0c12      	lsrs	r2, r2, #16
 80057d4:	fa13 f38e 	uxtah	r3, r3, lr
 80057d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80057dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057e6:	45c1      	cmp	r9, r8
 80057e8:	f840 3b04 	str.w	r3, [r0], #4
 80057ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057f0:	d2e8      	bcs.n	80057c4 <quorem+0xb0>
 80057f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057fa:	b922      	cbnz	r2, 8005806 <quorem+0xf2>
 80057fc:	3b04      	subs	r3, #4
 80057fe:	429d      	cmp	r5, r3
 8005800:	461a      	mov	r2, r3
 8005802:	d30a      	bcc.n	800581a <quorem+0x106>
 8005804:	613c      	str	r4, [r7, #16]
 8005806:	4630      	mov	r0, r6
 8005808:	b003      	add	sp, #12
 800580a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	3b04      	subs	r3, #4
 8005812:	2a00      	cmp	r2, #0
 8005814:	d1cc      	bne.n	80057b0 <quorem+0x9c>
 8005816:	3c01      	subs	r4, #1
 8005818:	e7c7      	b.n	80057aa <quorem+0x96>
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	3b04      	subs	r3, #4
 800581e:	2a00      	cmp	r2, #0
 8005820:	d1f0      	bne.n	8005804 <quorem+0xf0>
 8005822:	3c01      	subs	r4, #1
 8005824:	e7eb      	b.n	80057fe <quorem+0xea>
 8005826:	2000      	movs	r0, #0
 8005828:	e7ee      	b.n	8005808 <quorem+0xf4>
 800582a:	0000      	movs	r0, r0
 800582c:	0000      	movs	r0, r0
	...

08005830 <_dtoa_r>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	ed2d 8b04 	vpush	{d8-d9}
 8005838:	ec57 6b10 	vmov	r6, r7, d0
 800583c:	b093      	sub	sp, #76	; 0x4c
 800583e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005840:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005844:	9106      	str	r1, [sp, #24]
 8005846:	ee10 aa10 	vmov	sl, s0
 800584a:	4604      	mov	r4, r0
 800584c:	9209      	str	r2, [sp, #36]	; 0x24
 800584e:	930c      	str	r3, [sp, #48]	; 0x30
 8005850:	46bb      	mov	fp, r7
 8005852:	b975      	cbnz	r5, 8005872 <_dtoa_r+0x42>
 8005854:	2010      	movs	r0, #16
 8005856:	f000 fddd 	bl	8006414 <malloc>
 800585a:	4602      	mov	r2, r0
 800585c:	6260      	str	r0, [r4, #36]	; 0x24
 800585e:	b920      	cbnz	r0, 800586a <_dtoa_r+0x3a>
 8005860:	4ba7      	ldr	r3, [pc, #668]	; (8005b00 <_dtoa_r+0x2d0>)
 8005862:	21ea      	movs	r1, #234	; 0xea
 8005864:	48a7      	ldr	r0, [pc, #668]	; (8005b04 <_dtoa_r+0x2d4>)
 8005866:	f001 fbd1 	bl	800700c <__assert_func>
 800586a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800586e:	6005      	str	r5, [r0, #0]
 8005870:	60c5      	str	r5, [r0, #12]
 8005872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	b151      	cbz	r1, 800588e <_dtoa_r+0x5e>
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	604a      	str	r2, [r1, #4]
 800587c:	2301      	movs	r3, #1
 800587e:	4093      	lsls	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fe1c 	bl	80064c0 <_Bfree>
 8005888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	1e3b      	subs	r3, r7, #0
 8005890:	bfaa      	itet	ge
 8005892:	2300      	movge	r3, #0
 8005894:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005898:	f8c8 3000 	strge.w	r3, [r8]
 800589c:	4b9a      	ldr	r3, [pc, #616]	; (8005b08 <_dtoa_r+0x2d8>)
 800589e:	bfbc      	itt	lt
 80058a0:	2201      	movlt	r2, #1
 80058a2:	f8c8 2000 	strlt.w	r2, [r8]
 80058a6:	ea33 030b 	bics.w	r3, r3, fp
 80058aa:	d11b      	bne.n	80058e4 <_dtoa_r+0xb4>
 80058ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058b8:	4333      	orrs	r3, r6
 80058ba:	f000 8592 	beq.w	80063e2 <_dtoa_r+0xbb2>
 80058be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058c0:	b963      	cbnz	r3, 80058dc <_dtoa_r+0xac>
 80058c2:	4b92      	ldr	r3, [pc, #584]	; (8005b0c <_dtoa_r+0x2dc>)
 80058c4:	e022      	b.n	800590c <_dtoa_r+0xdc>
 80058c6:	4b92      	ldr	r3, [pc, #584]	; (8005b10 <_dtoa_r+0x2e0>)
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	3308      	adds	r3, #8
 80058cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	9801      	ldr	r0, [sp, #4]
 80058d2:	b013      	add	sp, #76	; 0x4c
 80058d4:	ecbd 8b04 	vpop	{d8-d9}
 80058d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058dc:	4b8b      	ldr	r3, [pc, #556]	; (8005b0c <_dtoa_r+0x2dc>)
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	3303      	adds	r3, #3
 80058e2:	e7f3      	b.n	80058cc <_dtoa_r+0x9c>
 80058e4:	2200      	movs	r2, #0
 80058e6:	2300      	movs	r3, #0
 80058e8:	4650      	mov	r0, sl
 80058ea:	4659      	mov	r1, fp
 80058ec:	f7fb f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80058f0:	ec4b ab19 	vmov	d9, sl, fp
 80058f4:	4680      	mov	r8, r0
 80058f6:	b158      	cbz	r0, 8005910 <_dtoa_r+0xe0>
 80058f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058fa:	2301      	movs	r3, #1
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 856b 	beq.w	80063dc <_dtoa_r+0xbac>
 8005906:	4883      	ldr	r0, [pc, #524]	; (8005b14 <_dtoa_r+0x2e4>)
 8005908:	6018      	str	r0, [r3, #0]
 800590a:	1e43      	subs	r3, r0, #1
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	e7df      	b.n	80058d0 <_dtoa_r+0xa0>
 8005910:	ec4b ab10 	vmov	d0, sl, fp
 8005914:	aa10      	add	r2, sp, #64	; 0x40
 8005916:	a911      	add	r1, sp, #68	; 0x44
 8005918:	4620      	mov	r0, r4
 800591a:	f001 f8b9 	bl	8006a90 <__d2b>
 800591e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005922:	ee08 0a10 	vmov	s16, r0
 8005926:	2d00      	cmp	r5, #0
 8005928:	f000 8084 	beq.w	8005a34 <_dtoa_r+0x204>
 800592c:	ee19 3a90 	vmov	r3, s19
 8005930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005934:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005938:	4656      	mov	r6, sl
 800593a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800593e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005942:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005946:	4b74      	ldr	r3, [pc, #464]	; (8005b18 <_dtoa_r+0x2e8>)
 8005948:	2200      	movs	r2, #0
 800594a:	4630      	mov	r0, r6
 800594c:	4639      	mov	r1, r7
 800594e:	f7fa fc9b 	bl	8000288 <__aeabi_dsub>
 8005952:	a365      	add	r3, pc, #404	; (adr r3, 8005ae8 <_dtoa_r+0x2b8>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fe4e 	bl	80005f8 <__aeabi_dmul>
 800595c:	a364      	add	r3, pc, #400	; (adr r3, 8005af0 <_dtoa_r+0x2c0>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fc93 	bl	800028c <__adddf3>
 8005966:	4606      	mov	r6, r0
 8005968:	4628      	mov	r0, r5
 800596a:	460f      	mov	r7, r1
 800596c:	f7fa fdda 	bl	8000524 <__aeabi_i2d>
 8005970:	a361      	add	r3, pc, #388	; (adr r3, 8005af8 <_dtoa_r+0x2c8>)
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f7fa fe3f 	bl	80005f8 <__aeabi_dmul>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fa fc83 	bl	800028c <__adddf3>
 8005986:	4606      	mov	r6, r0
 8005988:	460f      	mov	r7, r1
 800598a:	f7fb f8e5 	bl	8000b58 <__aeabi_d2iz>
 800598e:	2200      	movs	r2, #0
 8005990:	9000      	str	r0, [sp, #0]
 8005992:	2300      	movs	r3, #0
 8005994:	4630      	mov	r0, r6
 8005996:	4639      	mov	r1, r7
 8005998:	f7fb f8a0 	bl	8000adc <__aeabi_dcmplt>
 800599c:	b150      	cbz	r0, 80059b4 <_dtoa_r+0x184>
 800599e:	9800      	ldr	r0, [sp, #0]
 80059a0:	f7fa fdc0 	bl	8000524 <__aeabi_i2d>
 80059a4:	4632      	mov	r2, r6
 80059a6:	463b      	mov	r3, r7
 80059a8:	f7fb f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80059ac:	b910      	cbnz	r0, 80059b4 <_dtoa_r+0x184>
 80059ae:	9b00      	ldr	r3, [sp, #0]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	9b00      	ldr	r3, [sp, #0]
 80059b6:	2b16      	cmp	r3, #22
 80059b8:	d85a      	bhi.n	8005a70 <_dtoa_r+0x240>
 80059ba:	9a00      	ldr	r2, [sp, #0]
 80059bc:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <_dtoa_r+0x2ec>)
 80059be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	ec51 0b19 	vmov	r0, r1, d9
 80059ca:	f7fb f887 	bl	8000adc <__aeabi_dcmplt>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d050      	beq.n	8005a74 <_dtoa_r+0x244>
 80059d2:	9b00      	ldr	r3, [sp, #0]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2300      	movs	r3, #0
 80059da:	930b      	str	r3, [sp, #44]	; 0x2c
 80059dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059de:	1b5d      	subs	r5, r3, r5
 80059e0:	1e6b      	subs	r3, r5, #1
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	bf45      	ittet	mi
 80059e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80059ea:	9304      	strmi	r3, [sp, #16]
 80059ec:	2300      	movpl	r3, #0
 80059ee:	2300      	movmi	r3, #0
 80059f0:	bf4c      	ite	mi
 80059f2:	9305      	strmi	r3, [sp, #20]
 80059f4:	9304      	strpl	r3, [sp, #16]
 80059f6:	9b00      	ldr	r3, [sp, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	db3d      	blt.n	8005a78 <_dtoa_r+0x248>
 80059fc:	9b05      	ldr	r3, [sp, #20]
 80059fe:	9a00      	ldr	r2, [sp, #0]
 8005a00:	920a      	str	r2, [sp, #40]	; 0x28
 8005a02:	4413      	add	r3, r2
 8005a04:	9305      	str	r3, [sp, #20]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9307      	str	r3, [sp, #28]
 8005a0a:	9b06      	ldr	r3, [sp, #24]
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	f200 8089 	bhi.w	8005b24 <_dtoa_r+0x2f4>
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	bfc4      	itt	gt
 8005a16:	3b04      	subgt	r3, #4
 8005a18:	9306      	strgt	r3, [sp, #24]
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	f1a3 0302 	sub.w	r3, r3, #2
 8005a20:	bfcc      	ite	gt
 8005a22:	2500      	movgt	r5, #0
 8005a24:	2501      	movle	r5, #1
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	f200 8087 	bhi.w	8005b3a <_dtoa_r+0x30a>
 8005a2c:	e8df f003 	tbb	[pc, r3]
 8005a30:	59383a2d 	.word	0x59383a2d
 8005a34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a38:	441d      	add	r5, r3
 8005a3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	bfc1      	itttt	gt
 8005a42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005a4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005a4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a52:	bfda      	itte	le
 8005a54:	f1c3 0320 	rsble	r3, r3, #32
 8005a58:	fa06 f003 	lslle.w	r0, r6, r3
 8005a5c:	4318      	orrgt	r0, r3
 8005a5e:	f7fa fd51 	bl	8000504 <__aeabi_ui2d>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4606      	mov	r6, r0
 8005a66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005a6a:	3d01      	subs	r5, #1
 8005a6c:	930e      	str	r3, [sp, #56]	; 0x38
 8005a6e:	e76a      	b.n	8005946 <_dtoa_r+0x116>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e7b2      	b.n	80059da <_dtoa_r+0x1aa>
 8005a74:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a76:	e7b1      	b.n	80059dc <_dtoa_r+0x1ac>
 8005a78:	9b04      	ldr	r3, [sp, #16]
 8005a7a:	9a00      	ldr	r2, [sp, #0]
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	4253      	negs	r3, r2
 8005a82:	9307      	str	r3, [sp, #28]
 8005a84:	2300      	movs	r3, #0
 8005a86:	930a      	str	r3, [sp, #40]	; 0x28
 8005a88:	e7bf      	b.n	8005a0a <_dtoa_r+0x1da>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9308      	str	r3, [sp, #32]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dc55      	bgt.n	8005b40 <_dtoa_r+0x310>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a9e:	e00c      	b.n	8005aba <_dtoa_r+0x28a>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e7f3      	b.n	8005a8c <_dtoa_r+0x25c>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aa8:	9308      	str	r3, [sp, #32]
 8005aaa:	9b00      	ldr	r3, [sp, #0]
 8005aac:	4413      	add	r3, r2
 8005aae:	9302      	str	r3, [sp, #8]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	9303      	str	r3, [sp, #12]
 8005ab6:	bfb8      	it	lt
 8005ab8:	2301      	movlt	r3, #1
 8005aba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005abc:	2200      	movs	r2, #0
 8005abe:	6042      	str	r2, [r0, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	f102 0614 	add.w	r6, r2, #20
 8005ac6:	429e      	cmp	r6, r3
 8005ac8:	6841      	ldr	r1, [r0, #4]
 8005aca:	d93d      	bls.n	8005b48 <_dtoa_r+0x318>
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 fcb7 	bl	8006440 <_Balloc>
 8005ad2:	9001      	str	r0, [sp, #4]
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d13b      	bne.n	8005b50 <_dtoa_r+0x320>
 8005ad8:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <_dtoa_r+0x2f0>)
 8005ada:	4602      	mov	r2, r0
 8005adc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ae0:	e6c0      	b.n	8005864 <_dtoa_r+0x34>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e7df      	b.n	8005aa6 <_dtoa_r+0x276>
 8005ae6:	bf00      	nop
 8005ae8:	636f4361 	.word	0x636f4361
 8005aec:	3fd287a7 	.word	0x3fd287a7
 8005af0:	8b60c8b3 	.word	0x8b60c8b3
 8005af4:	3fc68a28 	.word	0x3fc68a28
 8005af8:	509f79fb 	.word	0x509f79fb
 8005afc:	3fd34413 	.word	0x3fd34413
 8005b00:	08007c7d 	.word	0x08007c7d
 8005b04:	08007c94 	.word	0x08007c94
 8005b08:	7ff00000 	.word	0x7ff00000
 8005b0c:	08007c79 	.word	0x08007c79
 8005b10:	08007c70 	.word	0x08007c70
 8005b14:	08007c4d 	.word	0x08007c4d
 8005b18:	3ff80000 	.word	0x3ff80000
 8005b1c:	08007d88 	.word	0x08007d88
 8005b20:	08007cef 	.word	0x08007cef
 8005b24:	2501      	movs	r5, #1
 8005b26:	2300      	movs	r3, #0
 8005b28:	9306      	str	r3, [sp, #24]
 8005b2a:	9508      	str	r5, [sp, #32]
 8005b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2312      	movs	r3, #18
 8005b38:	e7b0      	b.n	8005a9c <_dtoa_r+0x26c>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	9308      	str	r3, [sp, #32]
 8005b3e:	e7f5      	b.n	8005b2c <_dtoa_r+0x2fc>
 8005b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b46:	e7b8      	b.n	8005aba <_dtoa_r+0x28a>
 8005b48:	3101      	adds	r1, #1
 8005b4a:	6041      	str	r1, [r0, #4]
 8005b4c:	0052      	lsls	r2, r2, #1
 8005b4e:	e7b8      	b.n	8005ac2 <_dtoa_r+0x292>
 8005b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b52:	9a01      	ldr	r2, [sp, #4]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	2b0e      	cmp	r3, #14
 8005b5a:	f200 809d 	bhi.w	8005c98 <_dtoa_r+0x468>
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	f000 809a 	beq.w	8005c98 <_dtoa_r+0x468>
 8005b64:	9b00      	ldr	r3, [sp, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	dd32      	ble.n	8005bd0 <_dtoa_r+0x3a0>
 8005b6a:	4ab7      	ldr	r2, [pc, #732]	; (8005e48 <_dtoa_r+0x618>)
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b78:	9b00      	ldr	r3, [sp, #0]
 8005b7a:	05d8      	lsls	r0, r3, #23
 8005b7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005b80:	d516      	bpl.n	8005bb0 <_dtoa_r+0x380>
 8005b82:	4bb2      	ldr	r3, [pc, #712]	; (8005e4c <_dtoa_r+0x61c>)
 8005b84:	ec51 0b19 	vmov	r0, r1, d9
 8005b88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b8c:	f7fa fe5e 	bl	800084c <__aeabi_ddiv>
 8005b90:	f007 070f 	and.w	r7, r7, #15
 8005b94:	4682      	mov	sl, r0
 8005b96:	468b      	mov	fp, r1
 8005b98:	2503      	movs	r5, #3
 8005b9a:	4eac      	ldr	r6, [pc, #688]	; (8005e4c <_dtoa_r+0x61c>)
 8005b9c:	b957      	cbnz	r7, 8005bb4 <_dtoa_r+0x384>
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	f7fa fe51 	bl	800084c <__aeabi_ddiv>
 8005baa:	4682      	mov	sl, r0
 8005bac:	468b      	mov	fp, r1
 8005bae:	e028      	b.n	8005c02 <_dtoa_r+0x3d2>
 8005bb0:	2502      	movs	r5, #2
 8005bb2:	e7f2      	b.n	8005b9a <_dtoa_r+0x36a>
 8005bb4:	07f9      	lsls	r1, r7, #31
 8005bb6:	d508      	bpl.n	8005bca <_dtoa_r+0x39a>
 8005bb8:	4640      	mov	r0, r8
 8005bba:	4649      	mov	r1, r9
 8005bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bc0:	f7fa fd1a 	bl	80005f8 <__aeabi_dmul>
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	4689      	mov	r9, r1
 8005bca:	107f      	asrs	r7, r7, #1
 8005bcc:	3608      	adds	r6, #8
 8005bce:	e7e5      	b.n	8005b9c <_dtoa_r+0x36c>
 8005bd0:	f000 809b 	beq.w	8005d0a <_dtoa_r+0x4da>
 8005bd4:	9b00      	ldr	r3, [sp, #0]
 8005bd6:	4f9d      	ldr	r7, [pc, #628]	; (8005e4c <_dtoa_r+0x61c>)
 8005bd8:	425e      	negs	r6, r3
 8005bda:	4b9b      	ldr	r3, [pc, #620]	; (8005e48 <_dtoa_r+0x618>)
 8005bdc:	f006 020f 	and.w	r2, r6, #15
 8005be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	ec51 0b19 	vmov	r0, r1, d9
 8005bec:	f7fa fd04 	bl	80005f8 <__aeabi_dmul>
 8005bf0:	1136      	asrs	r6, r6, #4
 8005bf2:	4682      	mov	sl, r0
 8005bf4:	468b      	mov	fp, r1
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2502      	movs	r5, #2
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	d17a      	bne.n	8005cf4 <_dtoa_r+0x4c4>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1d3      	bne.n	8005baa <_dtoa_r+0x37a>
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8082 	beq.w	8005d0e <_dtoa_r+0x4de>
 8005c0a:	4b91      	ldr	r3, [pc, #580]	; (8005e50 <_dtoa_r+0x620>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4650      	mov	r0, sl
 8005c10:	4659      	mov	r1, fp
 8005c12:	f7fa ff63 	bl	8000adc <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d079      	beq.n	8005d0e <_dtoa_r+0x4de>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d076      	beq.n	8005d0e <_dtoa_r+0x4de>
 8005c20:	9b02      	ldr	r3, [sp, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dd36      	ble.n	8005c94 <_dtoa_r+0x464>
 8005c26:	9b00      	ldr	r3, [sp, #0]
 8005c28:	4650      	mov	r0, sl
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	1e5f      	subs	r7, r3, #1
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4b88      	ldr	r3, [pc, #544]	; (8005e54 <_dtoa_r+0x624>)
 8005c32:	f7fa fce1 	bl	80005f8 <__aeabi_dmul>
 8005c36:	9e02      	ldr	r6, [sp, #8]
 8005c38:	4682      	mov	sl, r0
 8005c3a:	468b      	mov	fp, r1
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f7fa fc70 	bl	8000524 <__aeabi_i2d>
 8005c44:	4652      	mov	r2, sl
 8005c46:	465b      	mov	r3, fp
 8005c48:	f7fa fcd6 	bl	80005f8 <__aeabi_dmul>
 8005c4c:	4b82      	ldr	r3, [pc, #520]	; (8005e58 <_dtoa_r+0x628>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f7fa fb1c 	bl	800028c <__adddf3>
 8005c54:	46d0      	mov	r8, sl
 8005c56:	46d9      	mov	r9, fp
 8005c58:	4682      	mov	sl, r0
 8005c5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005c5e:	2e00      	cmp	r6, #0
 8005c60:	d158      	bne.n	8005d14 <_dtoa_r+0x4e4>
 8005c62:	4b7e      	ldr	r3, [pc, #504]	; (8005e5c <_dtoa_r+0x62c>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa fb0d 	bl	8000288 <__aeabi_dsub>
 8005c6e:	4652      	mov	r2, sl
 8005c70:	465b      	mov	r3, fp
 8005c72:	4680      	mov	r8, r0
 8005c74:	4689      	mov	r9, r1
 8005c76:	f7fa ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	f040 8295 	bne.w	80061aa <_dtoa_r+0x97a>
 8005c80:	4652      	mov	r2, sl
 8005c82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c86:	4640      	mov	r0, r8
 8005c88:	4649      	mov	r1, r9
 8005c8a:	f7fa ff27 	bl	8000adc <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f040 8289 	bne.w	80061a6 <_dtoa_r+0x976>
 8005c94:	ec5b ab19 	vmov	sl, fp, d9
 8005c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f2c0 8148 	blt.w	8005f30 <_dtoa_r+0x700>
 8005ca0:	9a00      	ldr	r2, [sp, #0]
 8005ca2:	2a0e      	cmp	r2, #14
 8005ca4:	f300 8144 	bgt.w	8005f30 <_dtoa_r+0x700>
 8005ca8:	4b67      	ldr	r3, [pc, #412]	; (8005e48 <_dtoa_r+0x618>)
 8005caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f280 80d5 	bge.w	8005e64 <_dtoa_r+0x634>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f300 80d1 	bgt.w	8005e64 <_dtoa_r+0x634>
 8005cc2:	f040 826f 	bne.w	80061a4 <_dtoa_r+0x974>
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <_dtoa_r+0x62c>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa fc93 	bl	80005f8 <__aeabi_dmul>
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	f7fa ff15 	bl	8000b04 <__aeabi_dcmpge>
 8005cda:	9e03      	ldr	r6, [sp, #12]
 8005cdc:	4637      	mov	r7, r6
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f040 8245 	bne.w	800616e <_dtoa_r+0x93e>
 8005ce4:	9d01      	ldr	r5, [sp, #4]
 8005ce6:	2331      	movs	r3, #49	; 0x31
 8005ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8005cec:	9b00      	ldr	r3, [sp, #0]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	e240      	b.n	8006176 <_dtoa_r+0x946>
 8005cf4:	07f2      	lsls	r2, r6, #31
 8005cf6:	d505      	bpl.n	8005d04 <_dtoa_r+0x4d4>
 8005cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cfc:	f7fa fc7c 	bl	80005f8 <__aeabi_dmul>
 8005d00:	3501      	adds	r5, #1
 8005d02:	2301      	movs	r3, #1
 8005d04:	1076      	asrs	r6, r6, #1
 8005d06:	3708      	adds	r7, #8
 8005d08:	e777      	b.n	8005bfa <_dtoa_r+0x3ca>
 8005d0a:	2502      	movs	r5, #2
 8005d0c:	e779      	b.n	8005c02 <_dtoa_r+0x3d2>
 8005d0e:	9f00      	ldr	r7, [sp, #0]
 8005d10:	9e03      	ldr	r6, [sp, #12]
 8005d12:	e794      	b.n	8005c3e <_dtoa_r+0x40e>
 8005d14:	9901      	ldr	r1, [sp, #4]
 8005d16:	4b4c      	ldr	r3, [pc, #304]	; (8005e48 <_dtoa_r+0x618>)
 8005d18:	4431      	add	r1, r6
 8005d1a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d1c:	9908      	ldr	r1, [sp, #32]
 8005d1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d26:	2900      	cmp	r1, #0
 8005d28:	d043      	beq.n	8005db2 <_dtoa_r+0x582>
 8005d2a:	494d      	ldr	r1, [pc, #308]	; (8005e60 <_dtoa_r+0x630>)
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f7fa fd8d 	bl	800084c <__aeabi_ddiv>
 8005d32:	4652      	mov	r2, sl
 8005d34:	465b      	mov	r3, fp
 8005d36:	f7fa faa7 	bl	8000288 <__aeabi_dsub>
 8005d3a:	9d01      	ldr	r5, [sp, #4]
 8005d3c:	4682      	mov	sl, r0
 8005d3e:	468b      	mov	fp, r1
 8005d40:	4649      	mov	r1, r9
 8005d42:	4640      	mov	r0, r8
 8005d44:	f7fa ff08 	bl	8000b58 <__aeabi_d2iz>
 8005d48:	4606      	mov	r6, r0
 8005d4a:	f7fa fbeb 	bl	8000524 <__aeabi_i2d>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4640      	mov	r0, r8
 8005d54:	4649      	mov	r1, r9
 8005d56:	f7fa fa97 	bl	8000288 <__aeabi_dsub>
 8005d5a:	3630      	adds	r6, #48	; 0x30
 8005d5c:	f805 6b01 	strb.w	r6, [r5], #1
 8005d60:	4652      	mov	r2, sl
 8005d62:	465b      	mov	r3, fp
 8005d64:	4680      	mov	r8, r0
 8005d66:	4689      	mov	r9, r1
 8005d68:	f7fa feb8 	bl	8000adc <__aeabi_dcmplt>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d163      	bne.n	8005e38 <_dtoa_r+0x608>
 8005d70:	4642      	mov	r2, r8
 8005d72:	464b      	mov	r3, r9
 8005d74:	4936      	ldr	r1, [pc, #216]	; (8005e50 <_dtoa_r+0x620>)
 8005d76:	2000      	movs	r0, #0
 8005d78:	f7fa fa86 	bl	8000288 <__aeabi_dsub>
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	465b      	mov	r3, fp
 8005d80:	f7fa feac 	bl	8000adc <__aeabi_dcmplt>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	f040 80b5 	bne.w	8005ef4 <_dtoa_r+0x6c4>
 8005d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d8c:	429d      	cmp	r5, r3
 8005d8e:	d081      	beq.n	8005c94 <_dtoa_r+0x464>
 8005d90:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <_dtoa_r+0x624>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	4650      	mov	r0, sl
 8005d96:	4659      	mov	r1, fp
 8005d98:	f7fa fc2e 	bl	80005f8 <__aeabi_dmul>
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <_dtoa_r+0x624>)
 8005d9e:	4682      	mov	sl, r0
 8005da0:	468b      	mov	fp, r1
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	2200      	movs	r2, #0
 8005da8:	f7fa fc26 	bl	80005f8 <__aeabi_dmul>
 8005dac:	4680      	mov	r8, r0
 8005dae:	4689      	mov	r9, r1
 8005db0:	e7c6      	b.n	8005d40 <_dtoa_r+0x510>
 8005db2:	4650      	mov	r0, sl
 8005db4:	4659      	mov	r1, fp
 8005db6:	f7fa fc1f 	bl	80005f8 <__aeabi_dmul>
 8005dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dbc:	9d01      	ldr	r5, [sp, #4]
 8005dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	468b      	mov	fp, r1
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	f7fa fec6 	bl	8000b58 <__aeabi_d2iz>
 8005dcc:	4606      	mov	r6, r0
 8005dce:	f7fa fba9 	bl	8000524 <__aeabi_i2d>
 8005dd2:	3630      	adds	r6, #48	; 0x30
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4640      	mov	r0, r8
 8005dda:	4649      	mov	r1, r9
 8005ddc:	f7fa fa54 	bl	8000288 <__aeabi_dsub>
 8005de0:	f805 6b01 	strb.w	r6, [r5], #1
 8005de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005de6:	429d      	cmp	r5, r3
 8005de8:	4680      	mov	r8, r0
 8005dea:	4689      	mov	r9, r1
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	d124      	bne.n	8005e3c <_dtoa_r+0x60c>
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <_dtoa_r+0x630>)
 8005df4:	4650      	mov	r0, sl
 8005df6:	4659      	mov	r1, fp
 8005df8:	f7fa fa48 	bl	800028c <__adddf3>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fe88 	bl	8000b18 <__aeabi_dcmpgt>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d173      	bne.n	8005ef4 <_dtoa_r+0x6c4>
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	465b      	mov	r3, fp
 8005e10:	4913      	ldr	r1, [pc, #76]	; (8005e60 <_dtoa_r+0x630>)
 8005e12:	2000      	movs	r0, #0
 8005e14:	f7fa fa38 	bl	8000288 <__aeabi_dsub>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	4649      	mov	r1, r9
 8005e20:	f7fa fe5c 	bl	8000adc <__aeabi_dcmplt>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f43f af35 	beq.w	8005c94 <_dtoa_r+0x464>
 8005e2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e2c:	1e6b      	subs	r3, r5, #1
 8005e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d0f8      	beq.n	8005e2a <_dtoa_r+0x5fa>
 8005e38:	9700      	str	r7, [sp, #0]
 8005e3a:	e049      	b.n	8005ed0 <_dtoa_r+0x6a0>
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <_dtoa_r+0x624>)
 8005e3e:	f7fa fbdb 	bl	80005f8 <__aeabi_dmul>
 8005e42:	4680      	mov	r8, r0
 8005e44:	4689      	mov	r9, r1
 8005e46:	e7bd      	b.n	8005dc4 <_dtoa_r+0x594>
 8005e48:	08007d88 	.word	0x08007d88
 8005e4c:	08007d60 	.word	0x08007d60
 8005e50:	3ff00000 	.word	0x3ff00000
 8005e54:	40240000 	.word	0x40240000
 8005e58:	401c0000 	.word	0x401c0000
 8005e5c:	40140000 	.word	0x40140000
 8005e60:	3fe00000 	.word	0x3fe00000
 8005e64:	9d01      	ldr	r5, [sp, #4]
 8005e66:	4656      	mov	r6, sl
 8005e68:	465f      	mov	r7, fp
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	4630      	mov	r0, r6
 8005e70:	4639      	mov	r1, r7
 8005e72:	f7fa fceb 	bl	800084c <__aeabi_ddiv>
 8005e76:	f7fa fe6f 	bl	8000b58 <__aeabi_d2iz>
 8005e7a:	4682      	mov	sl, r0
 8005e7c:	f7fa fb52 	bl	8000524 <__aeabi_i2d>
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	f7fa fbb8 	bl	80005f8 <__aeabi_dmul>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005e94:	f7fa f9f8 	bl	8000288 <__aeabi_dsub>
 8005e98:	f805 6b01 	strb.w	r6, [r5], #1
 8005e9c:	9e01      	ldr	r6, [sp, #4]
 8005e9e:	9f03      	ldr	r7, [sp, #12]
 8005ea0:	1bae      	subs	r6, r5, r6
 8005ea2:	42b7      	cmp	r7, r6
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	d135      	bne.n	8005f16 <_dtoa_r+0x6e6>
 8005eaa:	f7fa f9ef 	bl	800028c <__adddf3>
 8005eae:	4642      	mov	r2, r8
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460f      	mov	r7, r1
 8005eb6:	f7fa fe2f 	bl	8000b18 <__aeabi_dcmpgt>
 8005eba:	b9d0      	cbnz	r0, 8005ef2 <_dtoa_r+0x6c2>
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec8:	b110      	cbz	r0, 8005ed0 <_dtoa_r+0x6a0>
 8005eca:	f01a 0f01 	tst.w	sl, #1
 8005ece:	d110      	bne.n	8005ef2 <_dtoa_r+0x6c2>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	ee18 1a10 	vmov	r1, s16
 8005ed6:	f000 faf3 	bl	80064c0 <_Bfree>
 8005eda:	2300      	movs	r3, #0
 8005edc:	9800      	ldr	r0, [sp, #0]
 8005ede:	702b      	strb	r3, [r5, #0]
 8005ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	6018      	str	r0, [r3, #0]
 8005ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f43f acf1 	beq.w	80058d0 <_dtoa_r+0xa0>
 8005eee:	601d      	str	r5, [r3, #0]
 8005ef0:	e4ee      	b.n	80058d0 <_dtoa_r+0xa0>
 8005ef2:	9f00      	ldr	r7, [sp, #0]
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005efc:	2a39      	cmp	r2, #57	; 0x39
 8005efe:	d106      	bne.n	8005f0e <_dtoa_r+0x6de>
 8005f00:	9a01      	ldr	r2, [sp, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d1f7      	bne.n	8005ef6 <_dtoa_r+0x6c6>
 8005f06:	9901      	ldr	r1, [sp, #4]
 8005f08:	2230      	movs	r2, #48	; 0x30
 8005f0a:	3701      	adds	r7, #1
 8005f0c:	700a      	strb	r2, [r1, #0]
 8005f0e:	781a      	ldrb	r2, [r3, #0]
 8005f10:	3201      	adds	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	e790      	b.n	8005e38 <_dtoa_r+0x608>
 8005f16:	4ba6      	ldr	r3, [pc, #664]	; (80061b0 <_dtoa_r+0x980>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f7fa fb6d 	bl	80005f8 <__aeabi_dmul>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2300      	movs	r3, #0
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	f7fa fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d09d      	beq.n	8005e6a <_dtoa_r+0x63a>
 8005f2e:	e7cf      	b.n	8005ed0 <_dtoa_r+0x6a0>
 8005f30:	9a08      	ldr	r2, [sp, #32]
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	f000 80d7 	beq.w	80060e6 <_dtoa_r+0x8b6>
 8005f38:	9a06      	ldr	r2, [sp, #24]
 8005f3a:	2a01      	cmp	r2, #1
 8005f3c:	f300 80ba 	bgt.w	80060b4 <_dtoa_r+0x884>
 8005f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f42:	2a00      	cmp	r2, #0
 8005f44:	f000 80b2 	beq.w	80060ac <_dtoa_r+0x87c>
 8005f48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f4c:	9e07      	ldr	r6, [sp, #28]
 8005f4e:	9d04      	ldr	r5, [sp, #16]
 8005f50:	9a04      	ldr	r2, [sp, #16]
 8005f52:	441a      	add	r2, r3
 8005f54:	9204      	str	r2, [sp, #16]
 8005f56:	9a05      	ldr	r2, [sp, #20]
 8005f58:	2101      	movs	r1, #1
 8005f5a:	441a      	add	r2, r3
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	9205      	str	r2, [sp, #20]
 8005f60:	f000 fb66 	bl	8006630 <__i2b>
 8005f64:	4607      	mov	r7, r0
 8005f66:	2d00      	cmp	r5, #0
 8005f68:	dd0c      	ble.n	8005f84 <_dtoa_r+0x754>
 8005f6a:	9b05      	ldr	r3, [sp, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dd09      	ble.n	8005f84 <_dtoa_r+0x754>
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	9a04      	ldr	r2, [sp, #16]
 8005f74:	bfa8      	it	ge
 8005f76:	462b      	movge	r3, r5
 8005f78:	1ad2      	subs	r2, r2, r3
 8005f7a:	9204      	str	r2, [sp, #16]
 8005f7c:	9a05      	ldr	r2, [sp, #20]
 8005f7e:	1aed      	subs	r5, r5, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	9305      	str	r3, [sp, #20]
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	b31b      	cbz	r3, 8005fd0 <_dtoa_r+0x7a0>
 8005f88:	9b08      	ldr	r3, [sp, #32]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80af 	beq.w	80060ee <_dtoa_r+0x8be>
 8005f90:	2e00      	cmp	r6, #0
 8005f92:	dd13      	ble.n	8005fbc <_dtoa_r+0x78c>
 8005f94:	4639      	mov	r1, r7
 8005f96:	4632      	mov	r2, r6
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 fc09 	bl	80067b0 <__pow5mult>
 8005f9e:	ee18 2a10 	vmov	r2, s16
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f000 fb58 	bl	800665c <__multiply>
 8005fac:	ee18 1a10 	vmov	r1, s16
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fa84 	bl	80064c0 <_Bfree>
 8005fb8:	ee08 8a10 	vmov	s16, r8
 8005fbc:	9b07      	ldr	r3, [sp, #28]
 8005fbe:	1b9a      	subs	r2, r3, r6
 8005fc0:	d006      	beq.n	8005fd0 <_dtoa_r+0x7a0>
 8005fc2:	ee18 1a10 	vmov	r1, s16
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 fbf2 	bl	80067b0 <__pow5mult>
 8005fcc:	ee08 0a10 	vmov	s16, r0
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 fb2c 	bl	8006630 <__i2b>
 8005fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	4606      	mov	r6, r0
 8005fde:	f340 8088 	ble.w	80060f2 <_dtoa_r+0x8c2>
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4601      	mov	r1, r0
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 fbe2 	bl	80067b0 <__pow5mult>
 8005fec:	9b06      	ldr	r3, [sp, #24]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	f340 8081 	ble.w	80060f8 <_dtoa_r+0x8c8>
 8005ff6:	f04f 0800 	mov.w	r8, #0
 8005ffa:	6933      	ldr	r3, [r6, #16]
 8005ffc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006000:	6918      	ldr	r0, [r3, #16]
 8006002:	f000 fac5 	bl	8006590 <__hi0bits>
 8006006:	f1c0 0020 	rsb	r0, r0, #32
 800600a:	9b05      	ldr	r3, [sp, #20]
 800600c:	4418      	add	r0, r3
 800600e:	f010 001f 	ands.w	r0, r0, #31
 8006012:	f000 8092 	beq.w	800613a <_dtoa_r+0x90a>
 8006016:	f1c0 0320 	rsb	r3, r0, #32
 800601a:	2b04      	cmp	r3, #4
 800601c:	f340 808a 	ble.w	8006134 <_dtoa_r+0x904>
 8006020:	f1c0 001c 	rsb	r0, r0, #28
 8006024:	9b04      	ldr	r3, [sp, #16]
 8006026:	4403      	add	r3, r0
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	9b05      	ldr	r3, [sp, #20]
 800602c:	4403      	add	r3, r0
 800602e:	4405      	add	r5, r0
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	dd07      	ble.n	8006048 <_dtoa_r+0x818>
 8006038:	ee18 1a10 	vmov	r1, s16
 800603c:	461a      	mov	r2, r3
 800603e:	4620      	mov	r0, r4
 8006040:	f000 fc10 	bl	8006864 <__lshift>
 8006044:	ee08 0a10 	vmov	s16, r0
 8006048:	9b05      	ldr	r3, [sp, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	dd05      	ble.n	800605a <_dtoa_r+0x82a>
 800604e:	4631      	mov	r1, r6
 8006050:	461a      	mov	r2, r3
 8006052:	4620      	mov	r0, r4
 8006054:	f000 fc06 	bl	8006864 <__lshift>
 8006058:	4606      	mov	r6, r0
 800605a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d06e      	beq.n	800613e <_dtoa_r+0x90e>
 8006060:	ee18 0a10 	vmov	r0, s16
 8006064:	4631      	mov	r1, r6
 8006066:	f000 fc6d 	bl	8006944 <__mcmp>
 800606a:	2800      	cmp	r0, #0
 800606c:	da67      	bge.n	800613e <_dtoa_r+0x90e>
 800606e:	9b00      	ldr	r3, [sp, #0]
 8006070:	3b01      	subs	r3, #1
 8006072:	ee18 1a10 	vmov	r1, s16
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	220a      	movs	r2, #10
 800607a:	2300      	movs	r3, #0
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fa41 	bl	8006504 <__multadd>
 8006082:	9b08      	ldr	r3, [sp, #32]
 8006084:	ee08 0a10 	vmov	s16, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 81b1 	beq.w	80063f0 <_dtoa_r+0xbc0>
 800608e:	2300      	movs	r3, #0
 8006090:	4639      	mov	r1, r7
 8006092:	220a      	movs	r2, #10
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fa35 	bl	8006504 <__multadd>
 800609a:	9b02      	ldr	r3, [sp, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	4607      	mov	r7, r0
 80060a0:	f300 808e 	bgt.w	80061c0 <_dtoa_r+0x990>
 80060a4:	9b06      	ldr	r3, [sp, #24]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	dc51      	bgt.n	800614e <_dtoa_r+0x91e>
 80060aa:	e089      	b.n	80061c0 <_dtoa_r+0x990>
 80060ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060b2:	e74b      	b.n	8005f4c <_dtoa_r+0x71c>
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	1e5e      	subs	r6, r3, #1
 80060b8:	9b07      	ldr	r3, [sp, #28]
 80060ba:	42b3      	cmp	r3, r6
 80060bc:	bfbf      	itttt	lt
 80060be:	9b07      	ldrlt	r3, [sp, #28]
 80060c0:	9607      	strlt	r6, [sp, #28]
 80060c2:	1af2      	sublt	r2, r6, r3
 80060c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060c6:	bfb6      	itet	lt
 80060c8:	189b      	addlt	r3, r3, r2
 80060ca:	1b9e      	subge	r6, r3, r6
 80060cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	bfb8      	it	lt
 80060d2:	2600      	movlt	r6, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bfb7      	itett	lt
 80060d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80060dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80060e0:	1a9d      	sublt	r5, r3, r2
 80060e2:	2300      	movlt	r3, #0
 80060e4:	e734      	b.n	8005f50 <_dtoa_r+0x720>
 80060e6:	9e07      	ldr	r6, [sp, #28]
 80060e8:	9d04      	ldr	r5, [sp, #16]
 80060ea:	9f08      	ldr	r7, [sp, #32]
 80060ec:	e73b      	b.n	8005f66 <_dtoa_r+0x736>
 80060ee:	9a07      	ldr	r2, [sp, #28]
 80060f0:	e767      	b.n	8005fc2 <_dtoa_r+0x792>
 80060f2:	9b06      	ldr	r3, [sp, #24]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	dc18      	bgt.n	800612a <_dtoa_r+0x8fa>
 80060f8:	f1ba 0f00 	cmp.w	sl, #0
 80060fc:	d115      	bne.n	800612a <_dtoa_r+0x8fa>
 80060fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006102:	b993      	cbnz	r3, 800612a <_dtoa_r+0x8fa>
 8006104:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006108:	0d1b      	lsrs	r3, r3, #20
 800610a:	051b      	lsls	r3, r3, #20
 800610c:	b183      	cbz	r3, 8006130 <_dtoa_r+0x900>
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	9b05      	ldr	r3, [sp, #20]
 8006116:	3301      	adds	r3, #1
 8006118:	9305      	str	r3, [sp, #20]
 800611a:	f04f 0801 	mov.w	r8, #1
 800611e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	f47f af6a 	bne.w	8005ffa <_dtoa_r+0x7ca>
 8006126:	2001      	movs	r0, #1
 8006128:	e76f      	b.n	800600a <_dtoa_r+0x7da>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	e7f6      	b.n	800611e <_dtoa_r+0x8ee>
 8006130:	4698      	mov	r8, r3
 8006132:	e7f4      	b.n	800611e <_dtoa_r+0x8ee>
 8006134:	f43f af7d 	beq.w	8006032 <_dtoa_r+0x802>
 8006138:	4618      	mov	r0, r3
 800613a:	301c      	adds	r0, #28
 800613c:	e772      	b.n	8006024 <_dtoa_r+0x7f4>
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	dc37      	bgt.n	80061b4 <_dtoa_r+0x984>
 8006144:	9b06      	ldr	r3, [sp, #24]
 8006146:	2b02      	cmp	r3, #2
 8006148:	dd34      	ble.n	80061b4 <_dtoa_r+0x984>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	9302      	str	r3, [sp, #8]
 800614e:	9b02      	ldr	r3, [sp, #8]
 8006150:	b96b      	cbnz	r3, 800616e <_dtoa_r+0x93e>
 8006152:	4631      	mov	r1, r6
 8006154:	2205      	movs	r2, #5
 8006156:	4620      	mov	r0, r4
 8006158:	f000 f9d4 	bl	8006504 <__multadd>
 800615c:	4601      	mov	r1, r0
 800615e:	4606      	mov	r6, r0
 8006160:	ee18 0a10 	vmov	r0, s16
 8006164:	f000 fbee 	bl	8006944 <__mcmp>
 8006168:	2800      	cmp	r0, #0
 800616a:	f73f adbb 	bgt.w	8005ce4 <_dtoa_r+0x4b4>
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	9d01      	ldr	r5, [sp, #4]
 8006172:	43db      	mvns	r3, r3
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	4631      	mov	r1, r6
 800617c:	4620      	mov	r0, r4
 800617e:	f000 f99f 	bl	80064c0 <_Bfree>
 8006182:	2f00      	cmp	r7, #0
 8006184:	f43f aea4 	beq.w	8005ed0 <_dtoa_r+0x6a0>
 8006188:	f1b8 0f00 	cmp.w	r8, #0
 800618c:	d005      	beq.n	800619a <_dtoa_r+0x96a>
 800618e:	45b8      	cmp	r8, r7
 8006190:	d003      	beq.n	800619a <_dtoa_r+0x96a>
 8006192:	4641      	mov	r1, r8
 8006194:	4620      	mov	r0, r4
 8006196:	f000 f993 	bl	80064c0 <_Bfree>
 800619a:	4639      	mov	r1, r7
 800619c:	4620      	mov	r0, r4
 800619e:	f000 f98f 	bl	80064c0 <_Bfree>
 80061a2:	e695      	b.n	8005ed0 <_dtoa_r+0x6a0>
 80061a4:	2600      	movs	r6, #0
 80061a6:	4637      	mov	r7, r6
 80061a8:	e7e1      	b.n	800616e <_dtoa_r+0x93e>
 80061aa:	9700      	str	r7, [sp, #0]
 80061ac:	4637      	mov	r7, r6
 80061ae:	e599      	b.n	8005ce4 <_dtoa_r+0x4b4>
 80061b0:	40240000 	.word	0x40240000
 80061b4:	9b08      	ldr	r3, [sp, #32]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80ca 	beq.w	8006350 <_dtoa_r+0xb20>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	dd05      	ble.n	80061d0 <_dtoa_r+0x9a0>
 80061c4:	4639      	mov	r1, r7
 80061c6:	462a      	mov	r2, r5
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fb4b 	bl	8006864 <__lshift>
 80061ce:	4607      	mov	r7, r0
 80061d0:	f1b8 0f00 	cmp.w	r8, #0
 80061d4:	d05b      	beq.n	800628e <_dtoa_r+0xa5e>
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 f931 	bl	8006440 <_Balloc>
 80061de:	4605      	mov	r5, r0
 80061e0:	b928      	cbnz	r0, 80061ee <_dtoa_r+0x9be>
 80061e2:	4b87      	ldr	r3, [pc, #540]	; (8006400 <_dtoa_r+0xbd0>)
 80061e4:	4602      	mov	r2, r0
 80061e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061ea:	f7ff bb3b 	b.w	8005864 <_dtoa_r+0x34>
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	3202      	adds	r2, #2
 80061f2:	0092      	lsls	r2, r2, #2
 80061f4:	f107 010c 	add.w	r1, r7, #12
 80061f8:	300c      	adds	r0, #12
 80061fa:	f000 f913 	bl	8006424 <memcpy>
 80061fe:	2201      	movs	r2, #1
 8006200:	4629      	mov	r1, r5
 8006202:	4620      	mov	r0, r4
 8006204:	f000 fb2e 	bl	8006864 <__lshift>
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	f103 0901 	add.w	r9, r3, #1
 800620e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006212:	4413      	add	r3, r2
 8006214:	9305      	str	r3, [sp, #20]
 8006216:	f00a 0301 	and.w	r3, sl, #1
 800621a:	46b8      	mov	r8, r7
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	4607      	mov	r7, r0
 8006220:	4631      	mov	r1, r6
 8006222:	ee18 0a10 	vmov	r0, s16
 8006226:	f7ff fa75 	bl	8005714 <quorem>
 800622a:	4641      	mov	r1, r8
 800622c:	9002      	str	r0, [sp, #8]
 800622e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006232:	ee18 0a10 	vmov	r0, s16
 8006236:	f000 fb85 	bl	8006944 <__mcmp>
 800623a:	463a      	mov	r2, r7
 800623c:	9003      	str	r0, [sp, #12]
 800623e:	4631      	mov	r1, r6
 8006240:	4620      	mov	r0, r4
 8006242:	f000 fb9b 	bl	800697c <__mdiff>
 8006246:	68c2      	ldr	r2, [r0, #12]
 8006248:	f109 3bff 	add.w	fp, r9, #4294967295
 800624c:	4605      	mov	r5, r0
 800624e:	bb02      	cbnz	r2, 8006292 <_dtoa_r+0xa62>
 8006250:	4601      	mov	r1, r0
 8006252:	ee18 0a10 	vmov	r0, s16
 8006256:	f000 fb75 	bl	8006944 <__mcmp>
 800625a:	4602      	mov	r2, r0
 800625c:	4629      	mov	r1, r5
 800625e:	4620      	mov	r0, r4
 8006260:	9207      	str	r2, [sp, #28]
 8006262:	f000 f92d 	bl	80064c0 <_Bfree>
 8006266:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800626a:	ea43 0102 	orr.w	r1, r3, r2
 800626e:	9b04      	ldr	r3, [sp, #16]
 8006270:	430b      	orrs	r3, r1
 8006272:	464d      	mov	r5, r9
 8006274:	d10f      	bne.n	8006296 <_dtoa_r+0xa66>
 8006276:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800627a:	d02a      	beq.n	80062d2 <_dtoa_r+0xaa2>
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	dd02      	ble.n	8006288 <_dtoa_r+0xa58>
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006288:	f88b a000 	strb.w	sl, [fp]
 800628c:	e775      	b.n	800617a <_dtoa_r+0x94a>
 800628e:	4638      	mov	r0, r7
 8006290:	e7ba      	b.n	8006208 <_dtoa_r+0x9d8>
 8006292:	2201      	movs	r2, #1
 8006294:	e7e2      	b.n	800625c <_dtoa_r+0xa2c>
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	db04      	blt.n	80062a6 <_dtoa_r+0xa76>
 800629c:	9906      	ldr	r1, [sp, #24]
 800629e:	430b      	orrs	r3, r1
 80062a0:	9904      	ldr	r1, [sp, #16]
 80062a2:	430b      	orrs	r3, r1
 80062a4:	d122      	bne.n	80062ec <_dtoa_r+0xabc>
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	ddee      	ble.n	8006288 <_dtoa_r+0xa58>
 80062aa:	ee18 1a10 	vmov	r1, s16
 80062ae:	2201      	movs	r2, #1
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fad7 	bl	8006864 <__lshift>
 80062b6:	4631      	mov	r1, r6
 80062b8:	ee08 0a10 	vmov	s16, r0
 80062bc:	f000 fb42 	bl	8006944 <__mcmp>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	dc03      	bgt.n	80062cc <_dtoa_r+0xa9c>
 80062c4:	d1e0      	bne.n	8006288 <_dtoa_r+0xa58>
 80062c6:	f01a 0f01 	tst.w	sl, #1
 80062ca:	d0dd      	beq.n	8006288 <_dtoa_r+0xa58>
 80062cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062d0:	d1d7      	bne.n	8006282 <_dtoa_r+0xa52>
 80062d2:	2339      	movs	r3, #57	; 0x39
 80062d4:	f88b 3000 	strb.w	r3, [fp]
 80062d8:	462b      	mov	r3, r5
 80062da:	461d      	mov	r5, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062e2:	2a39      	cmp	r2, #57	; 0x39
 80062e4:	d071      	beq.n	80063ca <_dtoa_r+0xb9a>
 80062e6:	3201      	adds	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e746      	b.n	800617a <_dtoa_r+0x94a>
 80062ec:	2a00      	cmp	r2, #0
 80062ee:	dd07      	ble.n	8006300 <_dtoa_r+0xad0>
 80062f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062f4:	d0ed      	beq.n	80062d2 <_dtoa_r+0xaa2>
 80062f6:	f10a 0301 	add.w	r3, sl, #1
 80062fa:	f88b 3000 	strb.w	r3, [fp]
 80062fe:	e73c      	b.n	800617a <_dtoa_r+0x94a>
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006306:	4599      	cmp	r9, r3
 8006308:	d047      	beq.n	800639a <_dtoa_r+0xb6a>
 800630a:	ee18 1a10 	vmov	r1, s16
 800630e:	2300      	movs	r3, #0
 8006310:	220a      	movs	r2, #10
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f8f6 	bl	8006504 <__multadd>
 8006318:	45b8      	cmp	r8, r7
 800631a:	ee08 0a10 	vmov	s16, r0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 020a 	mov.w	r2, #10
 8006326:	4641      	mov	r1, r8
 8006328:	4620      	mov	r0, r4
 800632a:	d106      	bne.n	800633a <_dtoa_r+0xb0a>
 800632c:	f000 f8ea 	bl	8006504 <__multadd>
 8006330:	4680      	mov	r8, r0
 8006332:	4607      	mov	r7, r0
 8006334:	f109 0901 	add.w	r9, r9, #1
 8006338:	e772      	b.n	8006220 <_dtoa_r+0x9f0>
 800633a:	f000 f8e3 	bl	8006504 <__multadd>
 800633e:	4639      	mov	r1, r7
 8006340:	4680      	mov	r8, r0
 8006342:	2300      	movs	r3, #0
 8006344:	220a      	movs	r2, #10
 8006346:	4620      	mov	r0, r4
 8006348:	f000 f8dc 	bl	8006504 <__multadd>
 800634c:	4607      	mov	r7, r0
 800634e:	e7f1      	b.n	8006334 <_dtoa_r+0xb04>
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	9302      	str	r3, [sp, #8]
 8006354:	9d01      	ldr	r5, [sp, #4]
 8006356:	ee18 0a10 	vmov	r0, s16
 800635a:	4631      	mov	r1, r6
 800635c:	f7ff f9da 	bl	8005714 <quorem>
 8006360:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006364:	9b01      	ldr	r3, [sp, #4]
 8006366:	f805 ab01 	strb.w	sl, [r5], #1
 800636a:	1aea      	subs	r2, r5, r3
 800636c:	9b02      	ldr	r3, [sp, #8]
 800636e:	4293      	cmp	r3, r2
 8006370:	dd09      	ble.n	8006386 <_dtoa_r+0xb56>
 8006372:	ee18 1a10 	vmov	r1, s16
 8006376:	2300      	movs	r3, #0
 8006378:	220a      	movs	r2, #10
 800637a:	4620      	mov	r0, r4
 800637c:	f000 f8c2 	bl	8006504 <__multadd>
 8006380:	ee08 0a10 	vmov	s16, r0
 8006384:	e7e7      	b.n	8006356 <_dtoa_r+0xb26>
 8006386:	9b02      	ldr	r3, [sp, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	bfc8      	it	gt
 800638c:	461d      	movgt	r5, r3
 800638e:	9b01      	ldr	r3, [sp, #4]
 8006390:	bfd8      	it	le
 8006392:	2501      	movle	r5, #1
 8006394:	441d      	add	r5, r3
 8006396:	f04f 0800 	mov.w	r8, #0
 800639a:	ee18 1a10 	vmov	r1, s16
 800639e:	2201      	movs	r2, #1
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 fa5f 	bl	8006864 <__lshift>
 80063a6:	4631      	mov	r1, r6
 80063a8:	ee08 0a10 	vmov	s16, r0
 80063ac:	f000 faca 	bl	8006944 <__mcmp>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	dc91      	bgt.n	80062d8 <_dtoa_r+0xaa8>
 80063b4:	d102      	bne.n	80063bc <_dtoa_r+0xb8c>
 80063b6:	f01a 0f01 	tst.w	sl, #1
 80063ba:	d18d      	bne.n	80062d8 <_dtoa_r+0xaa8>
 80063bc:	462b      	mov	r3, r5
 80063be:	461d      	mov	r5, r3
 80063c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c4:	2a30      	cmp	r2, #48	; 0x30
 80063c6:	d0fa      	beq.n	80063be <_dtoa_r+0xb8e>
 80063c8:	e6d7      	b.n	800617a <_dtoa_r+0x94a>
 80063ca:	9a01      	ldr	r2, [sp, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d184      	bne.n	80062da <_dtoa_r+0xaaa>
 80063d0:	9b00      	ldr	r3, [sp, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2331      	movs	r3, #49	; 0x31
 80063d8:	7013      	strb	r3, [r2, #0]
 80063da:	e6ce      	b.n	800617a <_dtoa_r+0x94a>
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <_dtoa_r+0xbd4>)
 80063de:	f7ff ba95 	b.w	800590c <_dtoa_r+0xdc>
 80063e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f47f aa6e 	bne.w	80058c6 <_dtoa_r+0x96>
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <_dtoa_r+0xbd8>)
 80063ec:	f7ff ba8e 	b.w	800590c <_dtoa_r+0xdc>
 80063f0:	9b02      	ldr	r3, [sp, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dcae      	bgt.n	8006354 <_dtoa_r+0xb24>
 80063f6:	9b06      	ldr	r3, [sp, #24]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	f73f aea8 	bgt.w	800614e <_dtoa_r+0x91e>
 80063fe:	e7a9      	b.n	8006354 <_dtoa_r+0xb24>
 8006400:	08007cef 	.word	0x08007cef
 8006404:	08007c4c 	.word	0x08007c4c
 8006408:	08007c70 	.word	0x08007c70

0800640c <_localeconv_r>:
 800640c:	4800      	ldr	r0, [pc, #0]	; (8006410 <_localeconv_r+0x4>)
 800640e:	4770      	bx	lr
 8006410:	20000198 	.word	0x20000198

08006414 <malloc>:
 8006414:	4b02      	ldr	r3, [pc, #8]	; (8006420 <malloc+0xc>)
 8006416:	4601      	mov	r1, r0
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	f000 bc17 	b.w	8006c4c <_malloc_r>
 800641e:	bf00      	nop
 8006420:	20000044 	.word	0x20000044

08006424 <memcpy>:
 8006424:	440a      	add	r2, r1
 8006426:	4291      	cmp	r1, r2
 8006428:	f100 33ff 	add.w	r3, r0, #4294967295
 800642c:	d100      	bne.n	8006430 <memcpy+0xc>
 800642e:	4770      	bx	lr
 8006430:	b510      	push	{r4, lr}
 8006432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800643a:	4291      	cmp	r1, r2
 800643c:	d1f9      	bne.n	8006432 <memcpy+0xe>
 800643e:	bd10      	pop	{r4, pc}

08006440 <_Balloc>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006444:	4604      	mov	r4, r0
 8006446:	460d      	mov	r5, r1
 8006448:	b976      	cbnz	r6, 8006468 <_Balloc+0x28>
 800644a:	2010      	movs	r0, #16
 800644c:	f7ff ffe2 	bl	8006414 <malloc>
 8006450:	4602      	mov	r2, r0
 8006452:	6260      	str	r0, [r4, #36]	; 0x24
 8006454:	b920      	cbnz	r0, 8006460 <_Balloc+0x20>
 8006456:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <_Balloc+0x78>)
 8006458:	4818      	ldr	r0, [pc, #96]	; (80064bc <_Balloc+0x7c>)
 800645a:	2166      	movs	r1, #102	; 0x66
 800645c:	f000 fdd6 	bl	800700c <__assert_func>
 8006460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006464:	6006      	str	r6, [r0, #0]
 8006466:	60c6      	str	r6, [r0, #12]
 8006468:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800646a:	68f3      	ldr	r3, [r6, #12]
 800646c:	b183      	cbz	r3, 8006490 <_Balloc+0x50>
 800646e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006476:	b9b8      	cbnz	r0, 80064a8 <_Balloc+0x68>
 8006478:	2101      	movs	r1, #1
 800647a:	fa01 f605 	lsl.w	r6, r1, r5
 800647e:	1d72      	adds	r2, r6, #5
 8006480:	0092      	lsls	r2, r2, #2
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fb60 	bl	8006b48 <_calloc_r>
 8006488:	b160      	cbz	r0, 80064a4 <_Balloc+0x64>
 800648a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800648e:	e00e      	b.n	80064ae <_Balloc+0x6e>
 8006490:	2221      	movs	r2, #33	; 0x21
 8006492:	2104      	movs	r1, #4
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fb57 	bl	8006b48 <_calloc_r>
 800649a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800649c:	60f0      	str	r0, [r6, #12]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e4      	bne.n	800646e <_Balloc+0x2e>
 80064a4:	2000      	movs	r0, #0
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	6802      	ldr	r2, [r0, #0]
 80064aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064ae:	2300      	movs	r3, #0
 80064b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064b4:	e7f7      	b.n	80064a6 <_Balloc+0x66>
 80064b6:	bf00      	nop
 80064b8:	08007c7d 	.word	0x08007c7d
 80064bc:	08007d00 	.word	0x08007d00

080064c0 <_Bfree>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064c4:	4605      	mov	r5, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	b976      	cbnz	r6, 80064e8 <_Bfree+0x28>
 80064ca:	2010      	movs	r0, #16
 80064cc:	f7ff ffa2 	bl	8006414 <malloc>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6268      	str	r0, [r5, #36]	; 0x24
 80064d4:	b920      	cbnz	r0, 80064e0 <_Bfree+0x20>
 80064d6:	4b09      	ldr	r3, [pc, #36]	; (80064fc <_Bfree+0x3c>)
 80064d8:	4809      	ldr	r0, [pc, #36]	; (8006500 <_Bfree+0x40>)
 80064da:	218a      	movs	r1, #138	; 0x8a
 80064dc:	f000 fd96 	bl	800700c <__assert_func>
 80064e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064e4:	6006      	str	r6, [r0, #0]
 80064e6:	60c6      	str	r6, [r0, #12]
 80064e8:	b13c      	cbz	r4, 80064fa <_Bfree+0x3a>
 80064ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064ec:	6862      	ldr	r2, [r4, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064f4:	6021      	str	r1, [r4, #0]
 80064f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	08007c7d 	.word	0x08007c7d
 8006500:	08007d00 	.word	0x08007d00

08006504 <__multadd>:
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006508:	690d      	ldr	r5, [r1, #16]
 800650a:	4607      	mov	r7, r0
 800650c:	460c      	mov	r4, r1
 800650e:	461e      	mov	r6, r3
 8006510:	f101 0c14 	add.w	ip, r1, #20
 8006514:	2000      	movs	r0, #0
 8006516:	f8dc 3000 	ldr.w	r3, [ip]
 800651a:	b299      	uxth	r1, r3
 800651c:	fb02 6101 	mla	r1, r2, r1, r6
 8006520:	0c1e      	lsrs	r6, r3, #16
 8006522:	0c0b      	lsrs	r3, r1, #16
 8006524:	fb02 3306 	mla	r3, r2, r6, r3
 8006528:	b289      	uxth	r1, r1
 800652a:	3001      	adds	r0, #1
 800652c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006530:	4285      	cmp	r5, r0
 8006532:	f84c 1b04 	str.w	r1, [ip], #4
 8006536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800653a:	dcec      	bgt.n	8006516 <__multadd+0x12>
 800653c:	b30e      	cbz	r6, 8006582 <__multadd+0x7e>
 800653e:	68a3      	ldr	r3, [r4, #8]
 8006540:	42ab      	cmp	r3, r5
 8006542:	dc19      	bgt.n	8006578 <__multadd+0x74>
 8006544:	6861      	ldr	r1, [r4, #4]
 8006546:	4638      	mov	r0, r7
 8006548:	3101      	adds	r1, #1
 800654a:	f7ff ff79 	bl	8006440 <_Balloc>
 800654e:	4680      	mov	r8, r0
 8006550:	b928      	cbnz	r0, 800655e <__multadd+0x5a>
 8006552:	4602      	mov	r2, r0
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <__multadd+0x84>)
 8006556:	480d      	ldr	r0, [pc, #52]	; (800658c <__multadd+0x88>)
 8006558:	21b5      	movs	r1, #181	; 0xb5
 800655a:	f000 fd57 	bl	800700c <__assert_func>
 800655e:	6922      	ldr	r2, [r4, #16]
 8006560:	3202      	adds	r2, #2
 8006562:	f104 010c 	add.w	r1, r4, #12
 8006566:	0092      	lsls	r2, r2, #2
 8006568:	300c      	adds	r0, #12
 800656a:	f7ff ff5b 	bl	8006424 <memcpy>
 800656e:	4621      	mov	r1, r4
 8006570:	4638      	mov	r0, r7
 8006572:	f7ff ffa5 	bl	80064c0 <_Bfree>
 8006576:	4644      	mov	r4, r8
 8006578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800657c:	3501      	adds	r5, #1
 800657e:	615e      	str	r6, [r3, #20]
 8006580:	6125      	str	r5, [r4, #16]
 8006582:	4620      	mov	r0, r4
 8006584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006588:	08007cef 	.word	0x08007cef
 800658c:	08007d00 	.word	0x08007d00

08006590 <__hi0bits>:
 8006590:	0c03      	lsrs	r3, r0, #16
 8006592:	041b      	lsls	r3, r3, #16
 8006594:	b9d3      	cbnz	r3, 80065cc <__hi0bits+0x3c>
 8006596:	0400      	lsls	r0, r0, #16
 8006598:	2310      	movs	r3, #16
 800659a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800659e:	bf04      	itt	eq
 80065a0:	0200      	lsleq	r0, r0, #8
 80065a2:	3308      	addeq	r3, #8
 80065a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065a8:	bf04      	itt	eq
 80065aa:	0100      	lsleq	r0, r0, #4
 80065ac:	3304      	addeq	r3, #4
 80065ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065b2:	bf04      	itt	eq
 80065b4:	0080      	lsleq	r0, r0, #2
 80065b6:	3302      	addeq	r3, #2
 80065b8:	2800      	cmp	r0, #0
 80065ba:	db05      	blt.n	80065c8 <__hi0bits+0x38>
 80065bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065c0:	f103 0301 	add.w	r3, r3, #1
 80065c4:	bf08      	it	eq
 80065c6:	2320      	moveq	r3, #32
 80065c8:	4618      	mov	r0, r3
 80065ca:	4770      	bx	lr
 80065cc:	2300      	movs	r3, #0
 80065ce:	e7e4      	b.n	800659a <__hi0bits+0xa>

080065d0 <__lo0bits>:
 80065d0:	6803      	ldr	r3, [r0, #0]
 80065d2:	f013 0207 	ands.w	r2, r3, #7
 80065d6:	4601      	mov	r1, r0
 80065d8:	d00b      	beq.n	80065f2 <__lo0bits+0x22>
 80065da:	07da      	lsls	r2, r3, #31
 80065dc:	d423      	bmi.n	8006626 <__lo0bits+0x56>
 80065de:	0798      	lsls	r0, r3, #30
 80065e0:	bf49      	itett	mi
 80065e2:	085b      	lsrmi	r3, r3, #1
 80065e4:	089b      	lsrpl	r3, r3, #2
 80065e6:	2001      	movmi	r0, #1
 80065e8:	600b      	strmi	r3, [r1, #0]
 80065ea:	bf5c      	itt	pl
 80065ec:	600b      	strpl	r3, [r1, #0]
 80065ee:	2002      	movpl	r0, #2
 80065f0:	4770      	bx	lr
 80065f2:	b298      	uxth	r0, r3
 80065f4:	b9a8      	cbnz	r0, 8006622 <__lo0bits+0x52>
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	2010      	movs	r0, #16
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	b90a      	cbnz	r2, 8006602 <__lo0bits+0x32>
 80065fe:	3008      	adds	r0, #8
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	071a      	lsls	r2, r3, #28
 8006604:	bf04      	itt	eq
 8006606:	091b      	lsreq	r3, r3, #4
 8006608:	3004      	addeq	r0, #4
 800660a:	079a      	lsls	r2, r3, #30
 800660c:	bf04      	itt	eq
 800660e:	089b      	lsreq	r3, r3, #2
 8006610:	3002      	addeq	r0, #2
 8006612:	07da      	lsls	r2, r3, #31
 8006614:	d403      	bmi.n	800661e <__lo0bits+0x4e>
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	f100 0001 	add.w	r0, r0, #1
 800661c:	d005      	beq.n	800662a <__lo0bits+0x5a>
 800661e:	600b      	str	r3, [r1, #0]
 8006620:	4770      	bx	lr
 8006622:	4610      	mov	r0, r2
 8006624:	e7e9      	b.n	80065fa <__lo0bits+0x2a>
 8006626:	2000      	movs	r0, #0
 8006628:	4770      	bx	lr
 800662a:	2020      	movs	r0, #32
 800662c:	4770      	bx	lr
	...

08006630 <__i2b>:
 8006630:	b510      	push	{r4, lr}
 8006632:	460c      	mov	r4, r1
 8006634:	2101      	movs	r1, #1
 8006636:	f7ff ff03 	bl	8006440 <_Balloc>
 800663a:	4602      	mov	r2, r0
 800663c:	b928      	cbnz	r0, 800664a <__i2b+0x1a>
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <__i2b+0x24>)
 8006640:	4805      	ldr	r0, [pc, #20]	; (8006658 <__i2b+0x28>)
 8006642:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006646:	f000 fce1 	bl	800700c <__assert_func>
 800664a:	2301      	movs	r3, #1
 800664c:	6144      	str	r4, [r0, #20]
 800664e:	6103      	str	r3, [r0, #16]
 8006650:	bd10      	pop	{r4, pc}
 8006652:	bf00      	nop
 8006654:	08007cef 	.word	0x08007cef
 8006658:	08007d00 	.word	0x08007d00

0800665c <__multiply>:
 800665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	4691      	mov	r9, r2
 8006662:	690a      	ldr	r2, [r1, #16]
 8006664:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006668:	429a      	cmp	r2, r3
 800666a:	bfb8      	it	lt
 800666c:	460b      	movlt	r3, r1
 800666e:	460c      	mov	r4, r1
 8006670:	bfbc      	itt	lt
 8006672:	464c      	movlt	r4, r9
 8006674:	4699      	movlt	r9, r3
 8006676:	6927      	ldr	r7, [r4, #16]
 8006678:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	6861      	ldr	r1, [r4, #4]
 8006680:	eb07 060a 	add.w	r6, r7, sl
 8006684:	42b3      	cmp	r3, r6
 8006686:	b085      	sub	sp, #20
 8006688:	bfb8      	it	lt
 800668a:	3101      	addlt	r1, #1
 800668c:	f7ff fed8 	bl	8006440 <_Balloc>
 8006690:	b930      	cbnz	r0, 80066a0 <__multiply+0x44>
 8006692:	4602      	mov	r2, r0
 8006694:	4b44      	ldr	r3, [pc, #272]	; (80067a8 <__multiply+0x14c>)
 8006696:	4845      	ldr	r0, [pc, #276]	; (80067ac <__multiply+0x150>)
 8006698:	f240 115d 	movw	r1, #349	; 0x15d
 800669c:	f000 fcb6 	bl	800700c <__assert_func>
 80066a0:	f100 0514 	add.w	r5, r0, #20
 80066a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066a8:	462b      	mov	r3, r5
 80066aa:	2200      	movs	r2, #0
 80066ac:	4543      	cmp	r3, r8
 80066ae:	d321      	bcc.n	80066f4 <__multiply+0x98>
 80066b0:	f104 0314 	add.w	r3, r4, #20
 80066b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066b8:	f109 0314 	add.w	r3, r9, #20
 80066bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066c0:	9202      	str	r2, [sp, #8]
 80066c2:	1b3a      	subs	r2, r7, r4
 80066c4:	3a15      	subs	r2, #21
 80066c6:	f022 0203 	bic.w	r2, r2, #3
 80066ca:	3204      	adds	r2, #4
 80066cc:	f104 0115 	add.w	r1, r4, #21
 80066d0:	428f      	cmp	r7, r1
 80066d2:	bf38      	it	cc
 80066d4:	2204      	movcc	r2, #4
 80066d6:	9201      	str	r2, [sp, #4]
 80066d8:	9a02      	ldr	r2, [sp, #8]
 80066da:	9303      	str	r3, [sp, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d80c      	bhi.n	80066fa <__multiply+0x9e>
 80066e0:	2e00      	cmp	r6, #0
 80066e2:	dd03      	ble.n	80066ec <__multiply+0x90>
 80066e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d05a      	beq.n	80067a2 <__multiply+0x146>
 80066ec:	6106      	str	r6, [r0, #16]
 80066ee:	b005      	add	sp, #20
 80066f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f4:	f843 2b04 	str.w	r2, [r3], #4
 80066f8:	e7d8      	b.n	80066ac <__multiply+0x50>
 80066fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80066fe:	f1ba 0f00 	cmp.w	sl, #0
 8006702:	d024      	beq.n	800674e <__multiply+0xf2>
 8006704:	f104 0e14 	add.w	lr, r4, #20
 8006708:	46a9      	mov	r9, r5
 800670a:	f04f 0c00 	mov.w	ip, #0
 800670e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006712:	f8d9 1000 	ldr.w	r1, [r9]
 8006716:	fa1f fb82 	uxth.w	fp, r2
 800671a:	b289      	uxth	r1, r1
 800671c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006720:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006724:	f8d9 2000 	ldr.w	r2, [r9]
 8006728:	4461      	add	r1, ip
 800672a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800672e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006732:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006736:	b289      	uxth	r1, r1
 8006738:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800673c:	4577      	cmp	r7, lr
 800673e:	f849 1b04 	str.w	r1, [r9], #4
 8006742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006746:	d8e2      	bhi.n	800670e <__multiply+0xb2>
 8006748:	9a01      	ldr	r2, [sp, #4]
 800674a:	f845 c002 	str.w	ip, [r5, r2]
 800674e:	9a03      	ldr	r2, [sp, #12]
 8006750:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006754:	3304      	adds	r3, #4
 8006756:	f1b9 0f00 	cmp.w	r9, #0
 800675a:	d020      	beq.n	800679e <__multiply+0x142>
 800675c:	6829      	ldr	r1, [r5, #0]
 800675e:	f104 0c14 	add.w	ip, r4, #20
 8006762:	46ae      	mov	lr, r5
 8006764:	f04f 0a00 	mov.w	sl, #0
 8006768:	f8bc b000 	ldrh.w	fp, [ip]
 800676c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006770:	fb09 220b 	mla	r2, r9, fp, r2
 8006774:	4492      	add	sl, r2
 8006776:	b289      	uxth	r1, r1
 8006778:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800677c:	f84e 1b04 	str.w	r1, [lr], #4
 8006780:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006784:	f8be 1000 	ldrh.w	r1, [lr]
 8006788:	0c12      	lsrs	r2, r2, #16
 800678a:	fb09 1102 	mla	r1, r9, r2, r1
 800678e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006792:	4567      	cmp	r7, ip
 8006794:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006798:	d8e6      	bhi.n	8006768 <__multiply+0x10c>
 800679a:	9a01      	ldr	r2, [sp, #4]
 800679c:	50a9      	str	r1, [r5, r2]
 800679e:	3504      	adds	r5, #4
 80067a0:	e79a      	b.n	80066d8 <__multiply+0x7c>
 80067a2:	3e01      	subs	r6, #1
 80067a4:	e79c      	b.n	80066e0 <__multiply+0x84>
 80067a6:	bf00      	nop
 80067a8:	08007cef 	.word	0x08007cef
 80067ac:	08007d00 	.word	0x08007d00

080067b0 <__pow5mult>:
 80067b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b4:	4615      	mov	r5, r2
 80067b6:	f012 0203 	ands.w	r2, r2, #3
 80067ba:	4606      	mov	r6, r0
 80067bc:	460f      	mov	r7, r1
 80067be:	d007      	beq.n	80067d0 <__pow5mult+0x20>
 80067c0:	4c25      	ldr	r4, [pc, #148]	; (8006858 <__pow5mult+0xa8>)
 80067c2:	3a01      	subs	r2, #1
 80067c4:	2300      	movs	r3, #0
 80067c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067ca:	f7ff fe9b 	bl	8006504 <__multadd>
 80067ce:	4607      	mov	r7, r0
 80067d0:	10ad      	asrs	r5, r5, #2
 80067d2:	d03d      	beq.n	8006850 <__pow5mult+0xa0>
 80067d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067d6:	b97c      	cbnz	r4, 80067f8 <__pow5mult+0x48>
 80067d8:	2010      	movs	r0, #16
 80067da:	f7ff fe1b 	bl	8006414 <malloc>
 80067de:	4602      	mov	r2, r0
 80067e0:	6270      	str	r0, [r6, #36]	; 0x24
 80067e2:	b928      	cbnz	r0, 80067f0 <__pow5mult+0x40>
 80067e4:	4b1d      	ldr	r3, [pc, #116]	; (800685c <__pow5mult+0xac>)
 80067e6:	481e      	ldr	r0, [pc, #120]	; (8006860 <__pow5mult+0xb0>)
 80067e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067ec:	f000 fc0e 	bl	800700c <__assert_func>
 80067f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067f4:	6004      	str	r4, [r0, #0]
 80067f6:	60c4      	str	r4, [r0, #12]
 80067f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006800:	b94c      	cbnz	r4, 8006816 <__pow5mult+0x66>
 8006802:	f240 2171 	movw	r1, #625	; 0x271
 8006806:	4630      	mov	r0, r6
 8006808:	f7ff ff12 	bl	8006630 <__i2b>
 800680c:	2300      	movs	r3, #0
 800680e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006812:	4604      	mov	r4, r0
 8006814:	6003      	str	r3, [r0, #0]
 8006816:	f04f 0900 	mov.w	r9, #0
 800681a:	07eb      	lsls	r3, r5, #31
 800681c:	d50a      	bpl.n	8006834 <__pow5mult+0x84>
 800681e:	4639      	mov	r1, r7
 8006820:	4622      	mov	r2, r4
 8006822:	4630      	mov	r0, r6
 8006824:	f7ff ff1a 	bl	800665c <__multiply>
 8006828:	4639      	mov	r1, r7
 800682a:	4680      	mov	r8, r0
 800682c:	4630      	mov	r0, r6
 800682e:	f7ff fe47 	bl	80064c0 <_Bfree>
 8006832:	4647      	mov	r7, r8
 8006834:	106d      	asrs	r5, r5, #1
 8006836:	d00b      	beq.n	8006850 <__pow5mult+0xa0>
 8006838:	6820      	ldr	r0, [r4, #0]
 800683a:	b938      	cbnz	r0, 800684c <__pow5mult+0x9c>
 800683c:	4622      	mov	r2, r4
 800683e:	4621      	mov	r1, r4
 8006840:	4630      	mov	r0, r6
 8006842:	f7ff ff0b 	bl	800665c <__multiply>
 8006846:	6020      	str	r0, [r4, #0]
 8006848:	f8c0 9000 	str.w	r9, [r0]
 800684c:	4604      	mov	r4, r0
 800684e:	e7e4      	b.n	800681a <__pow5mult+0x6a>
 8006850:	4638      	mov	r0, r7
 8006852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006856:	bf00      	nop
 8006858:	08007e50 	.word	0x08007e50
 800685c:	08007c7d 	.word	0x08007c7d
 8006860:	08007d00 	.word	0x08007d00

08006864 <__lshift>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	460c      	mov	r4, r1
 800686a:	6849      	ldr	r1, [r1, #4]
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006872:	68a3      	ldr	r3, [r4, #8]
 8006874:	4607      	mov	r7, r0
 8006876:	4691      	mov	r9, r2
 8006878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800687c:	f108 0601 	add.w	r6, r8, #1
 8006880:	42b3      	cmp	r3, r6
 8006882:	db0b      	blt.n	800689c <__lshift+0x38>
 8006884:	4638      	mov	r0, r7
 8006886:	f7ff fddb 	bl	8006440 <_Balloc>
 800688a:	4605      	mov	r5, r0
 800688c:	b948      	cbnz	r0, 80068a2 <__lshift+0x3e>
 800688e:	4602      	mov	r2, r0
 8006890:	4b2a      	ldr	r3, [pc, #168]	; (800693c <__lshift+0xd8>)
 8006892:	482b      	ldr	r0, [pc, #172]	; (8006940 <__lshift+0xdc>)
 8006894:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006898:	f000 fbb8 	bl	800700c <__assert_func>
 800689c:	3101      	adds	r1, #1
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	e7ee      	b.n	8006880 <__lshift+0x1c>
 80068a2:	2300      	movs	r3, #0
 80068a4:	f100 0114 	add.w	r1, r0, #20
 80068a8:	f100 0210 	add.w	r2, r0, #16
 80068ac:	4618      	mov	r0, r3
 80068ae:	4553      	cmp	r3, sl
 80068b0:	db37      	blt.n	8006922 <__lshift+0xbe>
 80068b2:	6920      	ldr	r0, [r4, #16]
 80068b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068b8:	f104 0314 	add.w	r3, r4, #20
 80068bc:	f019 091f 	ands.w	r9, r9, #31
 80068c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068c8:	d02f      	beq.n	800692a <__lshift+0xc6>
 80068ca:	f1c9 0e20 	rsb	lr, r9, #32
 80068ce:	468a      	mov	sl, r1
 80068d0:	f04f 0c00 	mov.w	ip, #0
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	fa02 f209 	lsl.w	r2, r2, r9
 80068da:	ea42 020c 	orr.w	r2, r2, ip
 80068de:	f84a 2b04 	str.w	r2, [sl], #4
 80068e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e6:	4298      	cmp	r0, r3
 80068e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80068ec:	d8f2      	bhi.n	80068d4 <__lshift+0x70>
 80068ee:	1b03      	subs	r3, r0, r4
 80068f0:	3b15      	subs	r3, #21
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	3304      	adds	r3, #4
 80068f8:	f104 0215 	add.w	r2, r4, #21
 80068fc:	4290      	cmp	r0, r2
 80068fe:	bf38      	it	cc
 8006900:	2304      	movcc	r3, #4
 8006902:	f841 c003 	str.w	ip, [r1, r3]
 8006906:	f1bc 0f00 	cmp.w	ip, #0
 800690a:	d001      	beq.n	8006910 <__lshift+0xac>
 800690c:	f108 0602 	add.w	r6, r8, #2
 8006910:	3e01      	subs	r6, #1
 8006912:	4638      	mov	r0, r7
 8006914:	612e      	str	r6, [r5, #16]
 8006916:	4621      	mov	r1, r4
 8006918:	f7ff fdd2 	bl	80064c0 <_Bfree>
 800691c:	4628      	mov	r0, r5
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	f842 0f04 	str.w	r0, [r2, #4]!
 8006926:	3301      	adds	r3, #1
 8006928:	e7c1      	b.n	80068ae <__lshift+0x4a>
 800692a:	3904      	subs	r1, #4
 800692c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006930:	f841 2f04 	str.w	r2, [r1, #4]!
 8006934:	4298      	cmp	r0, r3
 8006936:	d8f9      	bhi.n	800692c <__lshift+0xc8>
 8006938:	e7ea      	b.n	8006910 <__lshift+0xac>
 800693a:	bf00      	nop
 800693c:	08007cef 	.word	0x08007cef
 8006940:	08007d00 	.word	0x08007d00

08006944 <__mcmp>:
 8006944:	b530      	push	{r4, r5, lr}
 8006946:	6902      	ldr	r2, [r0, #16]
 8006948:	690c      	ldr	r4, [r1, #16]
 800694a:	1b12      	subs	r2, r2, r4
 800694c:	d10e      	bne.n	800696c <__mcmp+0x28>
 800694e:	f100 0314 	add.w	r3, r0, #20
 8006952:	3114      	adds	r1, #20
 8006954:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006958:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800695c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006960:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006964:	42a5      	cmp	r5, r4
 8006966:	d003      	beq.n	8006970 <__mcmp+0x2c>
 8006968:	d305      	bcc.n	8006976 <__mcmp+0x32>
 800696a:	2201      	movs	r2, #1
 800696c:	4610      	mov	r0, r2
 800696e:	bd30      	pop	{r4, r5, pc}
 8006970:	4283      	cmp	r3, r0
 8006972:	d3f3      	bcc.n	800695c <__mcmp+0x18>
 8006974:	e7fa      	b.n	800696c <__mcmp+0x28>
 8006976:	f04f 32ff 	mov.w	r2, #4294967295
 800697a:	e7f7      	b.n	800696c <__mcmp+0x28>

0800697c <__mdiff>:
 800697c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006980:	460c      	mov	r4, r1
 8006982:	4606      	mov	r6, r0
 8006984:	4611      	mov	r1, r2
 8006986:	4620      	mov	r0, r4
 8006988:	4690      	mov	r8, r2
 800698a:	f7ff ffdb 	bl	8006944 <__mcmp>
 800698e:	1e05      	subs	r5, r0, #0
 8006990:	d110      	bne.n	80069b4 <__mdiff+0x38>
 8006992:	4629      	mov	r1, r5
 8006994:	4630      	mov	r0, r6
 8006996:	f7ff fd53 	bl	8006440 <_Balloc>
 800699a:	b930      	cbnz	r0, 80069aa <__mdiff+0x2e>
 800699c:	4b3a      	ldr	r3, [pc, #232]	; (8006a88 <__mdiff+0x10c>)
 800699e:	4602      	mov	r2, r0
 80069a0:	f240 2132 	movw	r1, #562	; 0x232
 80069a4:	4839      	ldr	r0, [pc, #228]	; (8006a8c <__mdiff+0x110>)
 80069a6:	f000 fb31 	bl	800700c <__assert_func>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	bfa4      	itt	ge
 80069b6:	4643      	movge	r3, r8
 80069b8:	46a0      	movge	r8, r4
 80069ba:	4630      	mov	r0, r6
 80069bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069c0:	bfa6      	itte	ge
 80069c2:	461c      	movge	r4, r3
 80069c4:	2500      	movge	r5, #0
 80069c6:	2501      	movlt	r5, #1
 80069c8:	f7ff fd3a 	bl	8006440 <_Balloc>
 80069cc:	b920      	cbnz	r0, 80069d8 <__mdiff+0x5c>
 80069ce:	4b2e      	ldr	r3, [pc, #184]	; (8006a88 <__mdiff+0x10c>)
 80069d0:	4602      	mov	r2, r0
 80069d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80069d6:	e7e5      	b.n	80069a4 <__mdiff+0x28>
 80069d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069dc:	6926      	ldr	r6, [r4, #16]
 80069de:	60c5      	str	r5, [r0, #12]
 80069e0:	f104 0914 	add.w	r9, r4, #20
 80069e4:	f108 0514 	add.w	r5, r8, #20
 80069e8:	f100 0e14 	add.w	lr, r0, #20
 80069ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80069f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069f4:	f108 0210 	add.w	r2, r8, #16
 80069f8:	46f2      	mov	sl, lr
 80069fa:	2100      	movs	r1, #0
 80069fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a04:	fa1f f883 	uxth.w	r8, r3
 8006a08:	fa11 f18b 	uxtah	r1, r1, fp
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	eba1 0808 	sub.w	r8, r1, r8
 8006a12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a1a:	fa1f f888 	uxth.w	r8, r8
 8006a1e:	1419      	asrs	r1, r3, #16
 8006a20:	454e      	cmp	r6, r9
 8006a22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a26:	f84a 3b04 	str.w	r3, [sl], #4
 8006a2a:	d8e7      	bhi.n	80069fc <__mdiff+0x80>
 8006a2c:	1b33      	subs	r3, r6, r4
 8006a2e:	3b15      	subs	r3, #21
 8006a30:	f023 0303 	bic.w	r3, r3, #3
 8006a34:	3304      	adds	r3, #4
 8006a36:	3415      	adds	r4, #21
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	bf38      	it	cc
 8006a3c:	2304      	movcc	r3, #4
 8006a3e:	441d      	add	r5, r3
 8006a40:	4473      	add	r3, lr
 8006a42:	469e      	mov	lr, r3
 8006a44:	462e      	mov	r6, r5
 8006a46:	4566      	cmp	r6, ip
 8006a48:	d30e      	bcc.n	8006a68 <__mdiff+0xec>
 8006a4a:	f10c 0203 	add.w	r2, ip, #3
 8006a4e:	1b52      	subs	r2, r2, r5
 8006a50:	f022 0203 	bic.w	r2, r2, #3
 8006a54:	3d03      	subs	r5, #3
 8006a56:	45ac      	cmp	ip, r5
 8006a58:	bf38      	it	cc
 8006a5a:	2200      	movcc	r2, #0
 8006a5c:	441a      	add	r2, r3
 8006a5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a62:	b17b      	cbz	r3, 8006a84 <__mdiff+0x108>
 8006a64:	6107      	str	r7, [r0, #16]
 8006a66:	e7a3      	b.n	80069b0 <__mdiff+0x34>
 8006a68:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a6c:	fa11 f288 	uxtah	r2, r1, r8
 8006a70:	1414      	asrs	r4, r2, #16
 8006a72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a76:	b292      	uxth	r2, r2
 8006a78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a7c:	f84e 2b04 	str.w	r2, [lr], #4
 8006a80:	1421      	asrs	r1, r4, #16
 8006a82:	e7e0      	b.n	8006a46 <__mdiff+0xca>
 8006a84:	3f01      	subs	r7, #1
 8006a86:	e7ea      	b.n	8006a5e <__mdiff+0xe2>
 8006a88:	08007cef 	.word	0x08007cef
 8006a8c:	08007d00 	.word	0x08007d00

08006a90 <__d2b>:
 8006a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a94:	4689      	mov	r9, r1
 8006a96:	2101      	movs	r1, #1
 8006a98:	ec57 6b10 	vmov	r6, r7, d0
 8006a9c:	4690      	mov	r8, r2
 8006a9e:	f7ff fccf 	bl	8006440 <_Balloc>
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	b930      	cbnz	r0, 8006ab4 <__d2b+0x24>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	4b25      	ldr	r3, [pc, #148]	; (8006b40 <__d2b+0xb0>)
 8006aaa:	4826      	ldr	r0, [pc, #152]	; (8006b44 <__d2b+0xb4>)
 8006aac:	f240 310a 	movw	r1, #778	; 0x30a
 8006ab0:	f000 faac 	bl	800700c <__assert_func>
 8006ab4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006abc:	bb35      	cbnz	r5, 8006b0c <__d2b+0x7c>
 8006abe:	2e00      	cmp	r6, #0
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	d028      	beq.n	8006b16 <__d2b+0x86>
 8006ac4:	4668      	mov	r0, sp
 8006ac6:	9600      	str	r6, [sp, #0]
 8006ac8:	f7ff fd82 	bl	80065d0 <__lo0bits>
 8006acc:	9900      	ldr	r1, [sp, #0]
 8006ace:	b300      	cbz	r0, 8006b12 <__d2b+0x82>
 8006ad0:	9a01      	ldr	r2, [sp, #4]
 8006ad2:	f1c0 0320 	rsb	r3, r0, #32
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	430b      	orrs	r3, r1
 8006adc:	40c2      	lsrs	r2, r0
 8006ade:	6163      	str	r3, [r4, #20]
 8006ae0:	9201      	str	r2, [sp, #4]
 8006ae2:	9b01      	ldr	r3, [sp, #4]
 8006ae4:	61a3      	str	r3, [r4, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bf14      	ite	ne
 8006aea:	2202      	movne	r2, #2
 8006aec:	2201      	moveq	r2, #1
 8006aee:	6122      	str	r2, [r4, #16]
 8006af0:	b1d5      	cbz	r5, 8006b28 <__d2b+0x98>
 8006af2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006af6:	4405      	add	r5, r0
 8006af8:	f8c9 5000 	str.w	r5, [r9]
 8006afc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b00:	f8c8 0000 	str.w	r0, [r8]
 8006b04:	4620      	mov	r0, r4
 8006b06:	b003      	add	sp, #12
 8006b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b10:	e7d5      	b.n	8006abe <__d2b+0x2e>
 8006b12:	6161      	str	r1, [r4, #20]
 8006b14:	e7e5      	b.n	8006ae2 <__d2b+0x52>
 8006b16:	a801      	add	r0, sp, #4
 8006b18:	f7ff fd5a 	bl	80065d0 <__lo0bits>
 8006b1c:	9b01      	ldr	r3, [sp, #4]
 8006b1e:	6163      	str	r3, [r4, #20]
 8006b20:	2201      	movs	r2, #1
 8006b22:	6122      	str	r2, [r4, #16]
 8006b24:	3020      	adds	r0, #32
 8006b26:	e7e3      	b.n	8006af0 <__d2b+0x60>
 8006b28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b30:	f8c9 0000 	str.w	r0, [r9]
 8006b34:	6918      	ldr	r0, [r3, #16]
 8006b36:	f7ff fd2b 	bl	8006590 <__hi0bits>
 8006b3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b3e:	e7df      	b.n	8006b00 <__d2b+0x70>
 8006b40:	08007cef 	.word	0x08007cef
 8006b44:	08007d00 	.word	0x08007d00

08006b48 <_calloc_r>:
 8006b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4a:	fba1 2402 	umull	r2, r4, r1, r2
 8006b4e:	b94c      	cbnz	r4, 8006b64 <_calloc_r+0x1c>
 8006b50:	4611      	mov	r1, r2
 8006b52:	9201      	str	r2, [sp, #4]
 8006b54:	f000 f87a 	bl	8006c4c <_malloc_r>
 8006b58:	9a01      	ldr	r2, [sp, #4]
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	b930      	cbnz	r0, 8006b6c <_calloc_r+0x24>
 8006b5e:	4628      	mov	r0, r5
 8006b60:	b003      	add	sp, #12
 8006b62:	bd30      	pop	{r4, r5, pc}
 8006b64:	220c      	movs	r2, #12
 8006b66:	6002      	str	r2, [r0, #0]
 8006b68:	2500      	movs	r5, #0
 8006b6a:	e7f8      	b.n	8006b5e <_calloc_r+0x16>
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	f7fe f93f 	bl	8004df0 <memset>
 8006b72:	e7f4      	b.n	8006b5e <_calloc_r+0x16>

08006b74 <_free_r>:
 8006b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b76:	2900      	cmp	r1, #0
 8006b78:	d044      	beq.n	8006c04 <_free_r+0x90>
 8006b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b7e:	9001      	str	r0, [sp, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f1a1 0404 	sub.w	r4, r1, #4
 8006b86:	bfb8      	it	lt
 8006b88:	18e4      	addlt	r4, r4, r3
 8006b8a:	f000 fa9b 	bl	80070c4 <__malloc_lock>
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <_free_r+0x94>)
 8006b90:	9801      	ldr	r0, [sp, #4]
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	b933      	cbnz	r3, 8006ba4 <_free_r+0x30>
 8006b96:	6063      	str	r3, [r4, #4]
 8006b98:	6014      	str	r4, [r2, #0]
 8006b9a:	b003      	add	sp, #12
 8006b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ba0:	f000 ba96 	b.w	80070d0 <__malloc_unlock>
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d908      	bls.n	8006bba <_free_r+0x46>
 8006ba8:	6825      	ldr	r5, [r4, #0]
 8006baa:	1961      	adds	r1, r4, r5
 8006bac:	428b      	cmp	r3, r1
 8006bae:	bf01      	itttt	eq
 8006bb0:	6819      	ldreq	r1, [r3, #0]
 8006bb2:	685b      	ldreq	r3, [r3, #4]
 8006bb4:	1949      	addeq	r1, r1, r5
 8006bb6:	6021      	streq	r1, [r4, #0]
 8006bb8:	e7ed      	b.n	8006b96 <_free_r+0x22>
 8006bba:	461a      	mov	r2, r3
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	b10b      	cbz	r3, 8006bc4 <_free_r+0x50>
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d9fa      	bls.n	8006bba <_free_r+0x46>
 8006bc4:	6811      	ldr	r1, [r2, #0]
 8006bc6:	1855      	adds	r5, r2, r1
 8006bc8:	42a5      	cmp	r5, r4
 8006bca:	d10b      	bne.n	8006be4 <_free_r+0x70>
 8006bcc:	6824      	ldr	r4, [r4, #0]
 8006bce:	4421      	add	r1, r4
 8006bd0:	1854      	adds	r4, r2, r1
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	6011      	str	r1, [r2, #0]
 8006bd6:	d1e0      	bne.n	8006b9a <_free_r+0x26>
 8006bd8:	681c      	ldr	r4, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	6053      	str	r3, [r2, #4]
 8006bde:	4421      	add	r1, r4
 8006be0:	6011      	str	r1, [r2, #0]
 8006be2:	e7da      	b.n	8006b9a <_free_r+0x26>
 8006be4:	d902      	bls.n	8006bec <_free_r+0x78>
 8006be6:	230c      	movs	r3, #12
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	e7d6      	b.n	8006b9a <_free_r+0x26>
 8006bec:	6825      	ldr	r5, [r4, #0]
 8006bee:	1961      	adds	r1, r4, r5
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf04      	itt	eq
 8006bf4:	6819      	ldreq	r1, [r3, #0]
 8006bf6:	685b      	ldreq	r3, [r3, #4]
 8006bf8:	6063      	str	r3, [r4, #4]
 8006bfa:	bf04      	itt	eq
 8006bfc:	1949      	addeq	r1, r1, r5
 8006bfe:	6021      	streq	r1, [r4, #0]
 8006c00:	6054      	str	r4, [r2, #4]
 8006c02:	e7ca      	b.n	8006b9a <_free_r+0x26>
 8006c04:	b003      	add	sp, #12
 8006c06:	bd30      	pop	{r4, r5, pc}
 8006c08:	20000370 	.word	0x20000370

08006c0c <sbrk_aligned>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4e0e      	ldr	r6, [pc, #56]	; (8006c48 <sbrk_aligned+0x3c>)
 8006c10:	460c      	mov	r4, r1
 8006c12:	6831      	ldr	r1, [r6, #0]
 8006c14:	4605      	mov	r5, r0
 8006c16:	b911      	cbnz	r1, 8006c1e <sbrk_aligned+0x12>
 8006c18:	f000 f9e8 	bl	8006fec <_sbrk_r>
 8006c1c:	6030      	str	r0, [r6, #0]
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 f9e3 	bl	8006fec <_sbrk_r>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d00a      	beq.n	8006c40 <sbrk_aligned+0x34>
 8006c2a:	1cc4      	adds	r4, r0, #3
 8006c2c:	f024 0403 	bic.w	r4, r4, #3
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d007      	beq.n	8006c44 <sbrk_aligned+0x38>
 8006c34:	1a21      	subs	r1, r4, r0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 f9d8 	bl	8006fec <_sbrk_r>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d101      	bne.n	8006c44 <sbrk_aligned+0x38>
 8006c40:	f04f 34ff 	mov.w	r4, #4294967295
 8006c44:	4620      	mov	r0, r4
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	20000374 	.word	0x20000374

08006c4c <_malloc_r>:
 8006c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c50:	1ccd      	adds	r5, r1, #3
 8006c52:	f025 0503 	bic.w	r5, r5, #3
 8006c56:	3508      	adds	r5, #8
 8006c58:	2d0c      	cmp	r5, #12
 8006c5a:	bf38      	it	cc
 8006c5c:	250c      	movcc	r5, #12
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	4607      	mov	r7, r0
 8006c62:	db01      	blt.n	8006c68 <_malloc_r+0x1c>
 8006c64:	42a9      	cmp	r1, r5
 8006c66:	d905      	bls.n	8006c74 <_malloc_r+0x28>
 8006c68:	230c      	movs	r3, #12
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	4e2e      	ldr	r6, [pc, #184]	; (8006d30 <_malloc_r+0xe4>)
 8006c76:	f000 fa25 	bl	80070c4 <__malloc_lock>
 8006c7a:	6833      	ldr	r3, [r6, #0]
 8006c7c:	461c      	mov	r4, r3
 8006c7e:	bb34      	cbnz	r4, 8006cce <_malloc_r+0x82>
 8006c80:	4629      	mov	r1, r5
 8006c82:	4638      	mov	r0, r7
 8006c84:	f7ff ffc2 	bl	8006c0c <sbrk_aligned>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	d14d      	bne.n	8006d2a <_malloc_r+0xde>
 8006c8e:	6834      	ldr	r4, [r6, #0]
 8006c90:	4626      	mov	r6, r4
 8006c92:	2e00      	cmp	r6, #0
 8006c94:	d140      	bne.n	8006d18 <_malloc_r+0xcc>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	eb04 0803 	add.w	r8, r4, r3
 8006ca0:	f000 f9a4 	bl	8006fec <_sbrk_r>
 8006ca4:	4580      	cmp	r8, r0
 8006ca6:	d13a      	bne.n	8006d1e <_malloc_r+0xd2>
 8006ca8:	6821      	ldr	r1, [r4, #0]
 8006caa:	3503      	adds	r5, #3
 8006cac:	1a6d      	subs	r5, r5, r1
 8006cae:	f025 0503 	bic.w	r5, r5, #3
 8006cb2:	3508      	adds	r5, #8
 8006cb4:	2d0c      	cmp	r5, #12
 8006cb6:	bf38      	it	cc
 8006cb8:	250c      	movcc	r5, #12
 8006cba:	4629      	mov	r1, r5
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f7ff ffa5 	bl	8006c0c <sbrk_aligned>
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d02b      	beq.n	8006d1e <_malloc_r+0xd2>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	442b      	add	r3, r5
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	e00e      	b.n	8006cec <_malloc_r+0xa0>
 8006cce:	6822      	ldr	r2, [r4, #0]
 8006cd0:	1b52      	subs	r2, r2, r5
 8006cd2:	d41e      	bmi.n	8006d12 <_malloc_r+0xc6>
 8006cd4:	2a0b      	cmp	r2, #11
 8006cd6:	d916      	bls.n	8006d06 <_malloc_r+0xba>
 8006cd8:	1961      	adds	r1, r4, r5
 8006cda:	42a3      	cmp	r3, r4
 8006cdc:	6025      	str	r5, [r4, #0]
 8006cde:	bf18      	it	ne
 8006ce0:	6059      	strne	r1, [r3, #4]
 8006ce2:	6863      	ldr	r3, [r4, #4]
 8006ce4:	bf08      	it	eq
 8006ce6:	6031      	streq	r1, [r6, #0]
 8006ce8:	5162      	str	r2, [r4, r5]
 8006cea:	604b      	str	r3, [r1, #4]
 8006cec:	4638      	mov	r0, r7
 8006cee:	f104 060b 	add.w	r6, r4, #11
 8006cf2:	f000 f9ed 	bl	80070d0 <__malloc_unlock>
 8006cf6:	f026 0607 	bic.w	r6, r6, #7
 8006cfa:	1d23      	adds	r3, r4, #4
 8006cfc:	1af2      	subs	r2, r6, r3
 8006cfe:	d0b6      	beq.n	8006c6e <_malloc_r+0x22>
 8006d00:	1b9b      	subs	r3, r3, r6
 8006d02:	50a3      	str	r3, [r4, r2]
 8006d04:	e7b3      	b.n	8006c6e <_malloc_r+0x22>
 8006d06:	6862      	ldr	r2, [r4, #4]
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	bf0c      	ite	eq
 8006d0c:	6032      	streq	r2, [r6, #0]
 8006d0e:	605a      	strne	r2, [r3, #4]
 8006d10:	e7ec      	b.n	8006cec <_malloc_r+0xa0>
 8006d12:	4623      	mov	r3, r4
 8006d14:	6864      	ldr	r4, [r4, #4]
 8006d16:	e7b2      	b.n	8006c7e <_malloc_r+0x32>
 8006d18:	4634      	mov	r4, r6
 8006d1a:	6876      	ldr	r6, [r6, #4]
 8006d1c:	e7b9      	b.n	8006c92 <_malloc_r+0x46>
 8006d1e:	230c      	movs	r3, #12
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	4638      	mov	r0, r7
 8006d24:	f000 f9d4 	bl	80070d0 <__malloc_unlock>
 8006d28:	e7a1      	b.n	8006c6e <_malloc_r+0x22>
 8006d2a:	6025      	str	r5, [r4, #0]
 8006d2c:	e7de      	b.n	8006cec <_malloc_r+0xa0>
 8006d2e:	bf00      	nop
 8006d30:	20000370 	.word	0x20000370

08006d34 <__ssputs_r>:
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	688e      	ldr	r6, [r1, #8]
 8006d3a:	429e      	cmp	r6, r3
 8006d3c:	4682      	mov	sl, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	4690      	mov	r8, r2
 8006d42:	461f      	mov	r7, r3
 8006d44:	d838      	bhi.n	8006db8 <__ssputs_r+0x84>
 8006d46:	898a      	ldrh	r2, [r1, #12]
 8006d48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d4c:	d032      	beq.n	8006db4 <__ssputs_r+0x80>
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	6909      	ldr	r1, [r1, #16]
 8006d52:	eba5 0901 	sub.w	r9, r5, r1
 8006d56:	6965      	ldr	r5, [r4, #20]
 8006d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d60:	3301      	adds	r3, #1
 8006d62:	444b      	add	r3, r9
 8006d64:	106d      	asrs	r5, r5, #1
 8006d66:	429d      	cmp	r5, r3
 8006d68:	bf38      	it	cc
 8006d6a:	461d      	movcc	r5, r3
 8006d6c:	0553      	lsls	r3, r2, #21
 8006d6e:	d531      	bpl.n	8006dd4 <__ssputs_r+0xa0>
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7ff ff6b 	bl	8006c4c <_malloc_r>
 8006d76:	4606      	mov	r6, r0
 8006d78:	b950      	cbnz	r0, 8006d90 <__ssputs_r+0x5c>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	f8ca 3000 	str.w	r3, [sl]
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d90:	6921      	ldr	r1, [r4, #16]
 8006d92:	464a      	mov	r2, r9
 8006d94:	f7ff fb46 	bl	8006424 <memcpy>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	6126      	str	r6, [r4, #16]
 8006da6:	6165      	str	r5, [r4, #20]
 8006da8:	444e      	add	r6, r9
 8006daa:	eba5 0509 	sub.w	r5, r5, r9
 8006dae:	6026      	str	r6, [r4, #0]
 8006db0:	60a5      	str	r5, [r4, #8]
 8006db2:	463e      	mov	r6, r7
 8006db4:	42be      	cmp	r6, r7
 8006db6:	d900      	bls.n	8006dba <__ssputs_r+0x86>
 8006db8:	463e      	mov	r6, r7
 8006dba:	6820      	ldr	r0, [r4, #0]
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	f000 f966 	bl	8007090 <memmove>
 8006dc4:	68a3      	ldr	r3, [r4, #8]
 8006dc6:	1b9b      	subs	r3, r3, r6
 8006dc8:	60a3      	str	r3, [r4, #8]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	4433      	add	r3, r6
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e7db      	b.n	8006d8c <__ssputs_r+0x58>
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	f000 f981 	bl	80070dc <_realloc_r>
 8006dda:	4606      	mov	r6, r0
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d1e1      	bne.n	8006da4 <__ssputs_r+0x70>
 8006de0:	6921      	ldr	r1, [r4, #16]
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7ff fec6 	bl	8006b74 <_free_r>
 8006de8:	e7c7      	b.n	8006d7a <__ssputs_r+0x46>
	...

08006dec <_svfiprintf_r>:
 8006dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	4698      	mov	r8, r3
 8006df2:	898b      	ldrh	r3, [r1, #12]
 8006df4:	061b      	lsls	r3, r3, #24
 8006df6:	b09d      	sub	sp, #116	; 0x74
 8006df8:	4607      	mov	r7, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	d50e      	bpl.n	8006e1e <_svfiprintf_r+0x32>
 8006e00:	690b      	ldr	r3, [r1, #16]
 8006e02:	b963      	cbnz	r3, 8006e1e <_svfiprintf_r+0x32>
 8006e04:	2140      	movs	r1, #64	; 0x40
 8006e06:	f7ff ff21 	bl	8006c4c <_malloc_r>
 8006e0a:	6028      	str	r0, [r5, #0]
 8006e0c:	6128      	str	r0, [r5, #16]
 8006e0e:	b920      	cbnz	r0, 8006e1a <_svfiprintf_r+0x2e>
 8006e10:	230c      	movs	r3, #12
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e0d1      	b.n	8006fbe <_svfiprintf_r+0x1d2>
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	616b      	str	r3, [r5, #20]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9309      	str	r3, [sp, #36]	; 0x24
 8006e22:	2320      	movs	r3, #32
 8006e24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e2c:	2330      	movs	r3, #48	; 0x30
 8006e2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006fd8 <_svfiprintf_r+0x1ec>
 8006e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e36:	f04f 0901 	mov.w	r9, #1
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	469a      	mov	sl, r3
 8006e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e42:	b10a      	cbz	r2, 8006e48 <_svfiprintf_r+0x5c>
 8006e44:	2a25      	cmp	r2, #37	; 0x25
 8006e46:	d1f9      	bne.n	8006e3c <_svfiprintf_r+0x50>
 8006e48:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4c:	d00b      	beq.n	8006e66 <_svfiprintf_r+0x7a>
 8006e4e:	465b      	mov	r3, fp
 8006e50:	4622      	mov	r2, r4
 8006e52:	4629      	mov	r1, r5
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7ff ff6d 	bl	8006d34 <__ssputs_r>
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	f000 80aa 	beq.w	8006fb4 <_svfiprintf_r+0x1c8>
 8006e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e62:	445a      	add	r2, fp
 8006e64:	9209      	str	r2, [sp, #36]	; 0x24
 8006e66:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 80a2 	beq.w	8006fb4 <_svfiprintf_r+0x1c8>
 8006e70:	2300      	movs	r3, #0
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e7a:	f10a 0a01 	add.w	sl, sl, #1
 8006e7e:	9304      	str	r3, [sp, #16]
 8006e80:	9307      	str	r3, [sp, #28]
 8006e82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e86:	931a      	str	r3, [sp, #104]	; 0x68
 8006e88:	4654      	mov	r4, sl
 8006e8a:	2205      	movs	r2, #5
 8006e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e90:	4851      	ldr	r0, [pc, #324]	; (8006fd8 <_svfiprintf_r+0x1ec>)
 8006e92:	f7f9 f9a5 	bl	80001e0 <memchr>
 8006e96:	9a04      	ldr	r2, [sp, #16]
 8006e98:	b9d8      	cbnz	r0, 8006ed2 <_svfiprintf_r+0xe6>
 8006e9a:	06d0      	lsls	r0, r2, #27
 8006e9c:	bf44      	itt	mi
 8006e9e:	2320      	movmi	r3, #32
 8006ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea4:	0711      	lsls	r1, r2, #28
 8006ea6:	bf44      	itt	mi
 8006ea8:	232b      	movmi	r3, #43	; 0x2b
 8006eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eae:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb4:	d015      	beq.n	8006ee2 <_svfiprintf_r+0xf6>
 8006eb6:	9a07      	ldr	r2, [sp, #28]
 8006eb8:	4654      	mov	r4, sl
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f04f 0c0a 	mov.w	ip, #10
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec6:	3b30      	subs	r3, #48	; 0x30
 8006ec8:	2b09      	cmp	r3, #9
 8006eca:	d94e      	bls.n	8006f6a <_svfiprintf_r+0x17e>
 8006ecc:	b1b0      	cbz	r0, 8006efc <_svfiprintf_r+0x110>
 8006ece:	9207      	str	r2, [sp, #28]
 8006ed0:	e014      	b.n	8006efc <_svfiprintf_r+0x110>
 8006ed2:	eba0 0308 	sub.w	r3, r0, r8
 8006ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8006eda:	4313      	orrs	r3, r2
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	46a2      	mov	sl, r4
 8006ee0:	e7d2      	b.n	8006e88 <_svfiprintf_r+0x9c>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	1d19      	adds	r1, r3, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	9103      	str	r1, [sp, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bfbb      	ittet	lt
 8006eee:	425b      	neglt	r3, r3
 8006ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef4:	9307      	strge	r3, [sp, #28]
 8006ef6:	9307      	strlt	r3, [sp, #28]
 8006ef8:	bfb8      	it	lt
 8006efa:	9204      	strlt	r2, [sp, #16]
 8006efc:	7823      	ldrb	r3, [r4, #0]
 8006efe:	2b2e      	cmp	r3, #46	; 0x2e
 8006f00:	d10c      	bne.n	8006f1c <_svfiprintf_r+0x130>
 8006f02:	7863      	ldrb	r3, [r4, #1]
 8006f04:	2b2a      	cmp	r3, #42	; 0x2a
 8006f06:	d135      	bne.n	8006f74 <_svfiprintf_r+0x188>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	1d1a      	adds	r2, r3, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9203      	str	r2, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bfb8      	it	lt
 8006f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f18:	3402      	adds	r4, #2
 8006f1a:	9305      	str	r3, [sp, #20]
 8006f1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fe8 <_svfiprintf_r+0x1fc>
 8006f20:	7821      	ldrb	r1, [r4, #0]
 8006f22:	2203      	movs	r2, #3
 8006f24:	4650      	mov	r0, sl
 8006f26:	f7f9 f95b 	bl	80001e0 <memchr>
 8006f2a:	b140      	cbz	r0, 8006f3e <_svfiprintf_r+0x152>
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	eba0 000a 	sub.w	r0, r0, sl
 8006f32:	fa03 f000 	lsl.w	r0, r3, r0
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	4303      	orrs	r3, r0
 8006f3a:	3401      	adds	r4, #1
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f42:	4826      	ldr	r0, [pc, #152]	; (8006fdc <_svfiprintf_r+0x1f0>)
 8006f44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f48:	2206      	movs	r2, #6
 8006f4a:	f7f9 f949 	bl	80001e0 <memchr>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d038      	beq.n	8006fc4 <_svfiprintf_r+0x1d8>
 8006f52:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <_svfiprintf_r+0x1f4>)
 8006f54:	bb1b      	cbnz	r3, 8006f9e <_svfiprintf_r+0x1b2>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	3307      	adds	r3, #7
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	3308      	adds	r3, #8
 8006f60:	9303      	str	r3, [sp, #12]
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	4433      	add	r3, r6
 8006f66:	9309      	str	r3, [sp, #36]	; 0x24
 8006f68:	e767      	b.n	8006e3a <_svfiprintf_r+0x4e>
 8006f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f6e:	460c      	mov	r4, r1
 8006f70:	2001      	movs	r0, #1
 8006f72:	e7a5      	b.n	8006ec0 <_svfiprintf_r+0xd4>
 8006f74:	2300      	movs	r3, #0
 8006f76:	3401      	adds	r4, #1
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	f04f 0c0a 	mov.w	ip, #10
 8006f80:	4620      	mov	r0, r4
 8006f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f86:	3a30      	subs	r2, #48	; 0x30
 8006f88:	2a09      	cmp	r2, #9
 8006f8a:	d903      	bls.n	8006f94 <_svfiprintf_r+0x1a8>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0c5      	beq.n	8006f1c <_svfiprintf_r+0x130>
 8006f90:	9105      	str	r1, [sp, #20]
 8006f92:	e7c3      	b.n	8006f1c <_svfiprintf_r+0x130>
 8006f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f98:	4604      	mov	r4, r0
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e7f0      	b.n	8006f80 <_svfiprintf_r+0x194>
 8006f9e:	ab03      	add	r3, sp, #12
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	462a      	mov	r2, r5
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <_svfiprintf_r+0x1f8>)
 8006fa6:	a904      	add	r1, sp, #16
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f7fd ffc9 	bl	8004f40 <_printf_float>
 8006fae:	1c42      	adds	r2, r0, #1
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	d1d6      	bne.n	8006f62 <_svfiprintf_r+0x176>
 8006fb4:	89ab      	ldrh	r3, [r5, #12]
 8006fb6:	065b      	lsls	r3, r3, #25
 8006fb8:	f53f af2c 	bmi.w	8006e14 <_svfiprintf_r+0x28>
 8006fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fbe:	b01d      	add	sp, #116	; 0x74
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	ab03      	add	r3, sp, #12
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <_svfiprintf_r+0x1f8>)
 8006fcc:	a904      	add	r1, sp, #16
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7fe fa5a 	bl	8005488 <_printf_i>
 8006fd4:	e7eb      	b.n	8006fae <_svfiprintf_r+0x1c2>
 8006fd6:	bf00      	nop
 8006fd8:	08007e5c 	.word	0x08007e5c
 8006fdc:	08007e66 	.word	0x08007e66
 8006fe0:	08004f41 	.word	0x08004f41
 8006fe4:	08006d35 	.word	0x08006d35
 8006fe8:	08007e62 	.word	0x08007e62

08006fec <_sbrk_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d06      	ldr	r5, [pc, #24]	; (8007008 <_sbrk_r+0x1c>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	f7fa fed6 	bl	8001da8 <_sbrk>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_sbrk_r+0x1a>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_sbrk_r+0x1a>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20000378 	.word	0x20000378

0800700c <__assert_func>:
 800700c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800700e:	4614      	mov	r4, r2
 8007010:	461a      	mov	r2, r3
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <__assert_func+0x2c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4605      	mov	r5, r0
 8007018:	68d8      	ldr	r0, [r3, #12]
 800701a:	b14c      	cbz	r4, 8007030 <__assert_func+0x24>
 800701c:	4b07      	ldr	r3, [pc, #28]	; (800703c <__assert_func+0x30>)
 800701e:	9100      	str	r1, [sp, #0]
 8007020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007024:	4906      	ldr	r1, [pc, #24]	; (8007040 <__assert_func+0x34>)
 8007026:	462b      	mov	r3, r5
 8007028:	f000 f80e 	bl	8007048 <fiprintf>
 800702c:	f000 faac 	bl	8007588 <abort>
 8007030:	4b04      	ldr	r3, [pc, #16]	; (8007044 <__assert_func+0x38>)
 8007032:	461c      	mov	r4, r3
 8007034:	e7f3      	b.n	800701e <__assert_func+0x12>
 8007036:	bf00      	nop
 8007038:	20000044 	.word	0x20000044
 800703c:	08007e6d 	.word	0x08007e6d
 8007040:	08007e7a 	.word	0x08007e7a
 8007044:	08007ea8 	.word	0x08007ea8

08007048 <fiprintf>:
 8007048:	b40e      	push	{r1, r2, r3}
 800704a:	b503      	push	{r0, r1, lr}
 800704c:	4601      	mov	r1, r0
 800704e:	ab03      	add	r3, sp, #12
 8007050:	4805      	ldr	r0, [pc, #20]	; (8007068 <fiprintf+0x20>)
 8007052:	f853 2b04 	ldr.w	r2, [r3], #4
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	f000 f897 	bl	800718c <_vfiprintf_r>
 800705e:	b002      	add	sp, #8
 8007060:	f85d eb04 	ldr.w	lr, [sp], #4
 8007064:	b003      	add	sp, #12
 8007066:	4770      	bx	lr
 8007068:	20000044 	.word	0x20000044

0800706c <__ascii_mbtowc>:
 800706c:	b082      	sub	sp, #8
 800706e:	b901      	cbnz	r1, 8007072 <__ascii_mbtowc+0x6>
 8007070:	a901      	add	r1, sp, #4
 8007072:	b142      	cbz	r2, 8007086 <__ascii_mbtowc+0x1a>
 8007074:	b14b      	cbz	r3, 800708a <__ascii_mbtowc+0x1e>
 8007076:	7813      	ldrb	r3, [r2, #0]
 8007078:	600b      	str	r3, [r1, #0]
 800707a:	7812      	ldrb	r2, [r2, #0]
 800707c:	1e10      	subs	r0, r2, #0
 800707e:	bf18      	it	ne
 8007080:	2001      	movne	r0, #1
 8007082:	b002      	add	sp, #8
 8007084:	4770      	bx	lr
 8007086:	4610      	mov	r0, r2
 8007088:	e7fb      	b.n	8007082 <__ascii_mbtowc+0x16>
 800708a:	f06f 0001 	mvn.w	r0, #1
 800708e:	e7f8      	b.n	8007082 <__ascii_mbtowc+0x16>

08007090 <memmove>:
 8007090:	4288      	cmp	r0, r1
 8007092:	b510      	push	{r4, lr}
 8007094:	eb01 0402 	add.w	r4, r1, r2
 8007098:	d902      	bls.n	80070a0 <memmove+0x10>
 800709a:	4284      	cmp	r4, r0
 800709c:	4623      	mov	r3, r4
 800709e:	d807      	bhi.n	80070b0 <memmove+0x20>
 80070a0:	1e43      	subs	r3, r0, #1
 80070a2:	42a1      	cmp	r1, r4
 80070a4:	d008      	beq.n	80070b8 <memmove+0x28>
 80070a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ae:	e7f8      	b.n	80070a2 <memmove+0x12>
 80070b0:	4402      	add	r2, r0
 80070b2:	4601      	mov	r1, r0
 80070b4:	428a      	cmp	r2, r1
 80070b6:	d100      	bne.n	80070ba <memmove+0x2a>
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070c2:	e7f7      	b.n	80070b4 <memmove+0x24>

080070c4 <__malloc_lock>:
 80070c4:	4801      	ldr	r0, [pc, #4]	; (80070cc <__malloc_lock+0x8>)
 80070c6:	f000 bc1f 	b.w	8007908 <__retarget_lock_acquire_recursive>
 80070ca:	bf00      	nop
 80070cc:	2000037c 	.word	0x2000037c

080070d0 <__malloc_unlock>:
 80070d0:	4801      	ldr	r0, [pc, #4]	; (80070d8 <__malloc_unlock+0x8>)
 80070d2:	f000 bc1a 	b.w	800790a <__retarget_lock_release_recursive>
 80070d6:	bf00      	nop
 80070d8:	2000037c 	.word	0x2000037c

080070dc <_realloc_r>:
 80070dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e0:	4680      	mov	r8, r0
 80070e2:	4614      	mov	r4, r2
 80070e4:	460e      	mov	r6, r1
 80070e6:	b921      	cbnz	r1, 80070f2 <_realloc_r+0x16>
 80070e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ec:	4611      	mov	r1, r2
 80070ee:	f7ff bdad 	b.w	8006c4c <_malloc_r>
 80070f2:	b92a      	cbnz	r2, 8007100 <_realloc_r+0x24>
 80070f4:	f7ff fd3e 	bl	8006b74 <_free_r>
 80070f8:	4625      	mov	r5, r4
 80070fa:	4628      	mov	r0, r5
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	f000 fc6a 	bl	80079d8 <_malloc_usable_size_r>
 8007104:	4284      	cmp	r4, r0
 8007106:	4607      	mov	r7, r0
 8007108:	d802      	bhi.n	8007110 <_realloc_r+0x34>
 800710a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800710e:	d812      	bhi.n	8007136 <_realloc_r+0x5a>
 8007110:	4621      	mov	r1, r4
 8007112:	4640      	mov	r0, r8
 8007114:	f7ff fd9a 	bl	8006c4c <_malloc_r>
 8007118:	4605      	mov	r5, r0
 800711a:	2800      	cmp	r0, #0
 800711c:	d0ed      	beq.n	80070fa <_realloc_r+0x1e>
 800711e:	42bc      	cmp	r4, r7
 8007120:	4622      	mov	r2, r4
 8007122:	4631      	mov	r1, r6
 8007124:	bf28      	it	cs
 8007126:	463a      	movcs	r2, r7
 8007128:	f7ff f97c 	bl	8006424 <memcpy>
 800712c:	4631      	mov	r1, r6
 800712e:	4640      	mov	r0, r8
 8007130:	f7ff fd20 	bl	8006b74 <_free_r>
 8007134:	e7e1      	b.n	80070fa <_realloc_r+0x1e>
 8007136:	4635      	mov	r5, r6
 8007138:	e7df      	b.n	80070fa <_realloc_r+0x1e>

0800713a <__sfputc_r>:
 800713a:	6893      	ldr	r3, [r2, #8]
 800713c:	3b01      	subs	r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	b410      	push	{r4}
 8007142:	6093      	str	r3, [r2, #8]
 8007144:	da08      	bge.n	8007158 <__sfputc_r+0x1e>
 8007146:	6994      	ldr	r4, [r2, #24]
 8007148:	42a3      	cmp	r3, r4
 800714a:	db01      	blt.n	8007150 <__sfputc_r+0x16>
 800714c:	290a      	cmp	r1, #10
 800714e:	d103      	bne.n	8007158 <__sfputc_r+0x1e>
 8007150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007154:	f000 b94a 	b.w	80073ec <__swbuf_r>
 8007158:	6813      	ldr	r3, [r2, #0]
 800715a:	1c58      	adds	r0, r3, #1
 800715c:	6010      	str	r0, [r2, #0]
 800715e:	7019      	strb	r1, [r3, #0]
 8007160:	4608      	mov	r0, r1
 8007162:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007166:	4770      	bx	lr

08007168 <__sfputs_r>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	4606      	mov	r6, r0
 800716c:	460f      	mov	r7, r1
 800716e:	4614      	mov	r4, r2
 8007170:	18d5      	adds	r5, r2, r3
 8007172:	42ac      	cmp	r4, r5
 8007174:	d101      	bne.n	800717a <__sfputs_r+0x12>
 8007176:	2000      	movs	r0, #0
 8007178:	e007      	b.n	800718a <__sfputs_r+0x22>
 800717a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717e:	463a      	mov	r2, r7
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff ffda 	bl	800713a <__sfputc_r>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d1f3      	bne.n	8007172 <__sfputs_r+0xa>
 800718a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800718c <_vfiprintf_r>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	460d      	mov	r5, r1
 8007192:	b09d      	sub	sp, #116	; 0x74
 8007194:	4614      	mov	r4, r2
 8007196:	4698      	mov	r8, r3
 8007198:	4606      	mov	r6, r0
 800719a:	b118      	cbz	r0, 80071a4 <_vfiprintf_r+0x18>
 800719c:	6983      	ldr	r3, [r0, #24]
 800719e:	b90b      	cbnz	r3, 80071a4 <_vfiprintf_r+0x18>
 80071a0:	f000 fb14 	bl	80077cc <__sinit>
 80071a4:	4b89      	ldr	r3, [pc, #548]	; (80073cc <_vfiprintf_r+0x240>)
 80071a6:	429d      	cmp	r5, r3
 80071a8:	d11b      	bne.n	80071e2 <_vfiprintf_r+0x56>
 80071aa:	6875      	ldr	r5, [r6, #4]
 80071ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ae:	07d9      	lsls	r1, r3, #31
 80071b0:	d405      	bmi.n	80071be <_vfiprintf_r+0x32>
 80071b2:	89ab      	ldrh	r3, [r5, #12]
 80071b4:	059a      	lsls	r2, r3, #22
 80071b6:	d402      	bmi.n	80071be <_vfiprintf_r+0x32>
 80071b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ba:	f000 fba5 	bl	8007908 <__retarget_lock_acquire_recursive>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	071b      	lsls	r3, r3, #28
 80071c2:	d501      	bpl.n	80071c8 <_vfiprintf_r+0x3c>
 80071c4:	692b      	ldr	r3, [r5, #16]
 80071c6:	b9eb      	cbnz	r3, 8007204 <_vfiprintf_r+0x78>
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f000 f96e 	bl	80074ac <__swsetup_r>
 80071d0:	b1c0      	cbz	r0, 8007204 <_vfiprintf_r+0x78>
 80071d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071d4:	07dc      	lsls	r4, r3, #31
 80071d6:	d50e      	bpl.n	80071f6 <_vfiprintf_r+0x6a>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	b01d      	add	sp, #116	; 0x74
 80071de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e2:	4b7b      	ldr	r3, [pc, #492]	; (80073d0 <_vfiprintf_r+0x244>)
 80071e4:	429d      	cmp	r5, r3
 80071e6:	d101      	bne.n	80071ec <_vfiprintf_r+0x60>
 80071e8:	68b5      	ldr	r5, [r6, #8]
 80071ea:	e7df      	b.n	80071ac <_vfiprintf_r+0x20>
 80071ec:	4b79      	ldr	r3, [pc, #484]	; (80073d4 <_vfiprintf_r+0x248>)
 80071ee:	429d      	cmp	r5, r3
 80071f0:	bf08      	it	eq
 80071f2:	68f5      	ldreq	r5, [r6, #12]
 80071f4:	e7da      	b.n	80071ac <_vfiprintf_r+0x20>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	0598      	lsls	r0, r3, #22
 80071fa:	d4ed      	bmi.n	80071d8 <_vfiprintf_r+0x4c>
 80071fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071fe:	f000 fb84 	bl	800790a <__retarget_lock_release_recursive>
 8007202:	e7e9      	b.n	80071d8 <_vfiprintf_r+0x4c>
 8007204:	2300      	movs	r3, #0
 8007206:	9309      	str	r3, [sp, #36]	; 0x24
 8007208:	2320      	movs	r3, #32
 800720a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800720e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007212:	2330      	movs	r3, #48	; 0x30
 8007214:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073d8 <_vfiprintf_r+0x24c>
 8007218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800721c:	f04f 0901 	mov.w	r9, #1
 8007220:	4623      	mov	r3, r4
 8007222:	469a      	mov	sl, r3
 8007224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007228:	b10a      	cbz	r2, 800722e <_vfiprintf_r+0xa2>
 800722a:	2a25      	cmp	r2, #37	; 0x25
 800722c:	d1f9      	bne.n	8007222 <_vfiprintf_r+0x96>
 800722e:	ebba 0b04 	subs.w	fp, sl, r4
 8007232:	d00b      	beq.n	800724c <_vfiprintf_r+0xc0>
 8007234:	465b      	mov	r3, fp
 8007236:	4622      	mov	r2, r4
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff ff94 	bl	8007168 <__sfputs_r>
 8007240:	3001      	adds	r0, #1
 8007242:	f000 80aa 	beq.w	800739a <_vfiprintf_r+0x20e>
 8007246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007248:	445a      	add	r2, fp
 800724a:	9209      	str	r2, [sp, #36]	; 0x24
 800724c:	f89a 3000 	ldrb.w	r3, [sl]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 80a2 	beq.w	800739a <_vfiprintf_r+0x20e>
 8007256:	2300      	movs	r3, #0
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007260:	f10a 0a01 	add.w	sl, sl, #1
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800726c:	931a      	str	r3, [sp, #104]	; 0x68
 800726e:	4654      	mov	r4, sl
 8007270:	2205      	movs	r2, #5
 8007272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007276:	4858      	ldr	r0, [pc, #352]	; (80073d8 <_vfiprintf_r+0x24c>)
 8007278:	f7f8 ffb2 	bl	80001e0 <memchr>
 800727c:	9a04      	ldr	r2, [sp, #16]
 800727e:	b9d8      	cbnz	r0, 80072b8 <_vfiprintf_r+0x12c>
 8007280:	06d1      	lsls	r1, r2, #27
 8007282:	bf44      	itt	mi
 8007284:	2320      	movmi	r3, #32
 8007286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728a:	0713      	lsls	r3, r2, #28
 800728c:	bf44      	itt	mi
 800728e:	232b      	movmi	r3, #43	; 0x2b
 8007290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007294:	f89a 3000 	ldrb.w	r3, [sl]
 8007298:	2b2a      	cmp	r3, #42	; 0x2a
 800729a:	d015      	beq.n	80072c8 <_vfiprintf_r+0x13c>
 800729c:	9a07      	ldr	r2, [sp, #28]
 800729e:	4654      	mov	r4, sl
 80072a0:	2000      	movs	r0, #0
 80072a2:	f04f 0c0a 	mov.w	ip, #10
 80072a6:	4621      	mov	r1, r4
 80072a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ac:	3b30      	subs	r3, #48	; 0x30
 80072ae:	2b09      	cmp	r3, #9
 80072b0:	d94e      	bls.n	8007350 <_vfiprintf_r+0x1c4>
 80072b2:	b1b0      	cbz	r0, 80072e2 <_vfiprintf_r+0x156>
 80072b4:	9207      	str	r2, [sp, #28]
 80072b6:	e014      	b.n	80072e2 <_vfiprintf_r+0x156>
 80072b8:	eba0 0308 	sub.w	r3, r0, r8
 80072bc:	fa09 f303 	lsl.w	r3, r9, r3
 80072c0:	4313      	orrs	r3, r2
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	46a2      	mov	sl, r4
 80072c6:	e7d2      	b.n	800726e <_vfiprintf_r+0xe2>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	1d19      	adds	r1, r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	9103      	str	r1, [sp, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfbb      	ittet	lt
 80072d4:	425b      	neglt	r3, r3
 80072d6:	f042 0202 	orrlt.w	r2, r2, #2
 80072da:	9307      	strge	r3, [sp, #28]
 80072dc:	9307      	strlt	r3, [sp, #28]
 80072de:	bfb8      	it	lt
 80072e0:	9204      	strlt	r2, [sp, #16]
 80072e2:	7823      	ldrb	r3, [r4, #0]
 80072e4:	2b2e      	cmp	r3, #46	; 0x2e
 80072e6:	d10c      	bne.n	8007302 <_vfiprintf_r+0x176>
 80072e8:	7863      	ldrb	r3, [r4, #1]
 80072ea:	2b2a      	cmp	r3, #42	; 0x2a
 80072ec:	d135      	bne.n	800735a <_vfiprintf_r+0x1ce>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	1d1a      	adds	r2, r3, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	9203      	str	r2, [sp, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bfb8      	it	lt
 80072fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80072fe:	3402      	adds	r4, #2
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073e8 <_vfiprintf_r+0x25c>
 8007306:	7821      	ldrb	r1, [r4, #0]
 8007308:	2203      	movs	r2, #3
 800730a:	4650      	mov	r0, sl
 800730c:	f7f8 ff68 	bl	80001e0 <memchr>
 8007310:	b140      	cbz	r0, 8007324 <_vfiprintf_r+0x198>
 8007312:	2340      	movs	r3, #64	; 0x40
 8007314:	eba0 000a 	sub.w	r0, r0, sl
 8007318:	fa03 f000 	lsl.w	r0, r3, r0
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	4303      	orrs	r3, r0
 8007320:	3401      	adds	r4, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	482c      	ldr	r0, [pc, #176]	; (80073dc <_vfiprintf_r+0x250>)
 800732a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800732e:	2206      	movs	r2, #6
 8007330:	f7f8 ff56 	bl	80001e0 <memchr>
 8007334:	2800      	cmp	r0, #0
 8007336:	d03f      	beq.n	80073b8 <_vfiprintf_r+0x22c>
 8007338:	4b29      	ldr	r3, [pc, #164]	; (80073e0 <_vfiprintf_r+0x254>)
 800733a:	bb1b      	cbnz	r3, 8007384 <_vfiprintf_r+0x1f8>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	3307      	adds	r3, #7
 8007340:	f023 0307 	bic.w	r3, r3, #7
 8007344:	3308      	adds	r3, #8
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734a:	443b      	add	r3, r7
 800734c:	9309      	str	r3, [sp, #36]	; 0x24
 800734e:	e767      	b.n	8007220 <_vfiprintf_r+0x94>
 8007350:	fb0c 3202 	mla	r2, ip, r2, r3
 8007354:	460c      	mov	r4, r1
 8007356:	2001      	movs	r0, #1
 8007358:	e7a5      	b.n	80072a6 <_vfiprintf_r+0x11a>
 800735a:	2300      	movs	r3, #0
 800735c:	3401      	adds	r4, #1
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	4619      	mov	r1, r3
 8007362:	f04f 0c0a 	mov.w	ip, #10
 8007366:	4620      	mov	r0, r4
 8007368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736c:	3a30      	subs	r2, #48	; 0x30
 800736e:	2a09      	cmp	r2, #9
 8007370:	d903      	bls.n	800737a <_vfiprintf_r+0x1ee>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0c5      	beq.n	8007302 <_vfiprintf_r+0x176>
 8007376:	9105      	str	r1, [sp, #20]
 8007378:	e7c3      	b.n	8007302 <_vfiprintf_r+0x176>
 800737a:	fb0c 2101 	mla	r1, ip, r1, r2
 800737e:	4604      	mov	r4, r0
 8007380:	2301      	movs	r3, #1
 8007382:	e7f0      	b.n	8007366 <_vfiprintf_r+0x1da>
 8007384:	ab03      	add	r3, sp, #12
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	462a      	mov	r2, r5
 800738a:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <_vfiprintf_r+0x258>)
 800738c:	a904      	add	r1, sp, #16
 800738e:	4630      	mov	r0, r6
 8007390:	f7fd fdd6 	bl	8004f40 <_printf_float>
 8007394:	4607      	mov	r7, r0
 8007396:	1c78      	adds	r0, r7, #1
 8007398:	d1d6      	bne.n	8007348 <_vfiprintf_r+0x1bc>
 800739a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800739c:	07d9      	lsls	r1, r3, #31
 800739e:	d405      	bmi.n	80073ac <_vfiprintf_r+0x220>
 80073a0:	89ab      	ldrh	r3, [r5, #12]
 80073a2:	059a      	lsls	r2, r3, #22
 80073a4:	d402      	bmi.n	80073ac <_vfiprintf_r+0x220>
 80073a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073a8:	f000 faaf 	bl	800790a <__retarget_lock_release_recursive>
 80073ac:	89ab      	ldrh	r3, [r5, #12]
 80073ae:	065b      	lsls	r3, r3, #25
 80073b0:	f53f af12 	bmi.w	80071d8 <_vfiprintf_r+0x4c>
 80073b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b6:	e711      	b.n	80071dc <_vfiprintf_r+0x50>
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	462a      	mov	r2, r5
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <_vfiprintf_r+0x258>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7fe f860 	bl	8005488 <_printf_i>
 80073c8:	e7e4      	b.n	8007394 <_vfiprintf_r+0x208>
 80073ca:	bf00      	nop
 80073cc:	08007fd4 	.word	0x08007fd4
 80073d0:	08007ff4 	.word	0x08007ff4
 80073d4:	08007fb4 	.word	0x08007fb4
 80073d8:	08007e5c 	.word	0x08007e5c
 80073dc:	08007e66 	.word	0x08007e66
 80073e0:	08004f41 	.word	0x08004f41
 80073e4:	08007169 	.word	0x08007169
 80073e8:	08007e62 	.word	0x08007e62

080073ec <__swbuf_r>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	460e      	mov	r6, r1
 80073f0:	4614      	mov	r4, r2
 80073f2:	4605      	mov	r5, r0
 80073f4:	b118      	cbz	r0, 80073fe <__swbuf_r+0x12>
 80073f6:	6983      	ldr	r3, [r0, #24]
 80073f8:	b90b      	cbnz	r3, 80073fe <__swbuf_r+0x12>
 80073fa:	f000 f9e7 	bl	80077cc <__sinit>
 80073fe:	4b21      	ldr	r3, [pc, #132]	; (8007484 <__swbuf_r+0x98>)
 8007400:	429c      	cmp	r4, r3
 8007402:	d12b      	bne.n	800745c <__swbuf_r+0x70>
 8007404:	686c      	ldr	r4, [r5, #4]
 8007406:	69a3      	ldr	r3, [r4, #24]
 8007408:	60a3      	str	r3, [r4, #8]
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	071a      	lsls	r2, r3, #28
 800740e:	d52f      	bpl.n	8007470 <__swbuf_r+0x84>
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	b36b      	cbz	r3, 8007470 <__swbuf_r+0x84>
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	6820      	ldr	r0, [r4, #0]
 8007418:	1ac0      	subs	r0, r0, r3
 800741a:	6963      	ldr	r3, [r4, #20]
 800741c:	b2f6      	uxtb	r6, r6
 800741e:	4283      	cmp	r3, r0
 8007420:	4637      	mov	r7, r6
 8007422:	dc04      	bgt.n	800742e <__swbuf_r+0x42>
 8007424:	4621      	mov	r1, r4
 8007426:	4628      	mov	r0, r5
 8007428:	f000 f93c 	bl	80076a4 <_fflush_r>
 800742c:	bb30      	cbnz	r0, 800747c <__swbuf_r+0x90>
 800742e:	68a3      	ldr	r3, [r4, #8]
 8007430:	3b01      	subs	r3, #1
 8007432:	60a3      	str	r3, [r4, #8]
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	6022      	str	r2, [r4, #0]
 800743a:	701e      	strb	r6, [r3, #0]
 800743c:	6963      	ldr	r3, [r4, #20]
 800743e:	3001      	adds	r0, #1
 8007440:	4283      	cmp	r3, r0
 8007442:	d004      	beq.n	800744e <__swbuf_r+0x62>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	07db      	lsls	r3, r3, #31
 8007448:	d506      	bpl.n	8007458 <__swbuf_r+0x6c>
 800744a:	2e0a      	cmp	r6, #10
 800744c:	d104      	bne.n	8007458 <__swbuf_r+0x6c>
 800744e:	4621      	mov	r1, r4
 8007450:	4628      	mov	r0, r5
 8007452:	f000 f927 	bl	80076a4 <_fflush_r>
 8007456:	b988      	cbnz	r0, 800747c <__swbuf_r+0x90>
 8007458:	4638      	mov	r0, r7
 800745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <__swbuf_r+0x9c>)
 800745e:	429c      	cmp	r4, r3
 8007460:	d101      	bne.n	8007466 <__swbuf_r+0x7a>
 8007462:	68ac      	ldr	r4, [r5, #8]
 8007464:	e7cf      	b.n	8007406 <__swbuf_r+0x1a>
 8007466:	4b09      	ldr	r3, [pc, #36]	; (800748c <__swbuf_r+0xa0>)
 8007468:	429c      	cmp	r4, r3
 800746a:	bf08      	it	eq
 800746c:	68ec      	ldreq	r4, [r5, #12]
 800746e:	e7ca      	b.n	8007406 <__swbuf_r+0x1a>
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 f81a 	bl	80074ac <__swsetup_r>
 8007478:	2800      	cmp	r0, #0
 800747a:	d0cb      	beq.n	8007414 <__swbuf_r+0x28>
 800747c:	f04f 37ff 	mov.w	r7, #4294967295
 8007480:	e7ea      	b.n	8007458 <__swbuf_r+0x6c>
 8007482:	bf00      	nop
 8007484:	08007fd4 	.word	0x08007fd4
 8007488:	08007ff4 	.word	0x08007ff4
 800748c:	08007fb4 	.word	0x08007fb4

08007490 <__ascii_wctomb>:
 8007490:	b149      	cbz	r1, 80074a6 <__ascii_wctomb+0x16>
 8007492:	2aff      	cmp	r2, #255	; 0xff
 8007494:	bf85      	ittet	hi
 8007496:	238a      	movhi	r3, #138	; 0x8a
 8007498:	6003      	strhi	r3, [r0, #0]
 800749a:	700a      	strbls	r2, [r1, #0]
 800749c:	f04f 30ff 	movhi.w	r0, #4294967295
 80074a0:	bf98      	it	ls
 80074a2:	2001      	movls	r0, #1
 80074a4:	4770      	bx	lr
 80074a6:	4608      	mov	r0, r1
 80074a8:	4770      	bx	lr
	...

080074ac <__swsetup_r>:
 80074ac:	4b32      	ldr	r3, [pc, #200]	; (8007578 <__swsetup_r+0xcc>)
 80074ae:	b570      	push	{r4, r5, r6, lr}
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	4606      	mov	r6, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	b125      	cbz	r5, 80074c2 <__swsetup_r+0x16>
 80074b8:	69ab      	ldr	r3, [r5, #24]
 80074ba:	b913      	cbnz	r3, 80074c2 <__swsetup_r+0x16>
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 f985 	bl	80077cc <__sinit>
 80074c2:	4b2e      	ldr	r3, [pc, #184]	; (800757c <__swsetup_r+0xd0>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	d10f      	bne.n	80074e8 <__swsetup_r+0x3c>
 80074c8:	686c      	ldr	r4, [r5, #4]
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074d0:	0719      	lsls	r1, r3, #28
 80074d2:	d42c      	bmi.n	800752e <__swsetup_r+0x82>
 80074d4:	06dd      	lsls	r5, r3, #27
 80074d6:	d411      	bmi.n	80074fc <__swsetup_r+0x50>
 80074d8:	2309      	movs	r3, #9
 80074da:	6033      	str	r3, [r6, #0]
 80074dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295
 80074e6:	e03e      	b.n	8007566 <__swsetup_r+0xba>
 80074e8:	4b25      	ldr	r3, [pc, #148]	; (8007580 <__swsetup_r+0xd4>)
 80074ea:	429c      	cmp	r4, r3
 80074ec:	d101      	bne.n	80074f2 <__swsetup_r+0x46>
 80074ee:	68ac      	ldr	r4, [r5, #8]
 80074f0:	e7eb      	b.n	80074ca <__swsetup_r+0x1e>
 80074f2:	4b24      	ldr	r3, [pc, #144]	; (8007584 <__swsetup_r+0xd8>)
 80074f4:	429c      	cmp	r4, r3
 80074f6:	bf08      	it	eq
 80074f8:	68ec      	ldreq	r4, [r5, #12]
 80074fa:	e7e6      	b.n	80074ca <__swsetup_r+0x1e>
 80074fc:	0758      	lsls	r0, r3, #29
 80074fe:	d512      	bpl.n	8007526 <__swsetup_r+0x7a>
 8007500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007502:	b141      	cbz	r1, 8007516 <__swsetup_r+0x6a>
 8007504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007508:	4299      	cmp	r1, r3
 800750a:	d002      	beq.n	8007512 <__swsetup_r+0x66>
 800750c:	4630      	mov	r0, r6
 800750e:	f7ff fb31 	bl	8006b74 <_free_r>
 8007512:	2300      	movs	r3, #0
 8007514:	6363      	str	r3, [r4, #52]	; 0x34
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	2300      	movs	r3, #0
 8007520:	6063      	str	r3, [r4, #4]
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f043 0308 	orr.w	r3, r3, #8
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	b94b      	cbnz	r3, 8007546 <__swsetup_r+0x9a>
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800753c:	d003      	beq.n	8007546 <__swsetup_r+0x9a>
 800753e:	4621      	mov	r1, r4
 8007540:	4630      	mov	r0, r6
 8007542:	f000 fa09 	bl	8007958 <__smakebuf_r>
 8007546:	89a0      	ldrh	r0, [r4, #12]
 8007548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800754c:	f010 0301 	ands.w	r3, r0, #1
 8007550:	d00a      	beq.n	8007568 <__swsetup_r+0xbc>
 8007552:	2300      	movs	r3, #0
 8007554:	60a3      	str	r3, [r4, #8]
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	425b      	negs	r3, r3
 800755a:	61a3      	str	r3, [r4, #24]
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	b943      	cbnz	r3, 8007572 <__swsetup_r+0xc6>
 8007560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007564:	d1ba      	bne.n	80074dc <__swsetup_r+0x30>
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	0781      	lsls	r1, r0, #30
 800756a:	bf58      	it	pl
 800756c:	6963      	ldrpl	r3, [r4, #20]
 800756e:	60a3      	str	r3, [r4, #8]
 8007570:	e7f4      	b.n	800755c <__swsetup_r+0xb0>
 8007572:	2000      	movs	r0, #0
 8007574:	e7f7      	b.n	8007566 <__swsetup_r+0xba>
 8007576:	bf00      	nop
 8007578:	20000044 	.word	0x20000044
 800757c:	08007fd4 	.word	0x08007fd4
 8007580:	08007ff4 	.word	0x08007ff4
 8007584:	08007fb4 	.word	0x08007fb4

08007588 <abort>:
 8007588:	b508      	push	{r3, lr}
 800758a:	2006      	movs	r0, #6
 800758c:	f000 fa54 	bl	8007a38 <raise>
 8007590:	2001      	movs	r0, #1
 8007592:	f7fa fbae 	bl	8001cf2 <_exit>
	...

08007598 <__sflush_r>:
 8007598:	898a      	ldrh	r2, [r1, #12]
 800759a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759e:	4605      	mov	r5, r0
 80075a0:	0710      	lsls	r0, r2, #28
 80075a2:	460c      	mov	r4, r1
 80075a4:	d458      	bmi.n	8007658 <__sflush_r+0xc0>
 80075a6:	684b      	ldr	r3, [r1, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dc05      	bgt.n	80075b8 <__sflush_r+0x20>
 80075ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dc02      	bgt.n	80075b8 <__sflush_r+0x20>
 80075b2:	2000      	movs	r0, #0
 80075b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ba:	2e00      	cmp	r6, #0
 80075bc:	d0f9      	beq.n	80075b2 <__sflush_r+0x1a>
 80075be:	2300      	movs	r3, #0
 80075c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075c4:	682f      	ldr	r7, [r5, #0]
 80075c6:	602b      	str	r3, [r5, #0]
 80075c8:	d032      	beq.n	8007630 <__sflush_r+0x98>
 80075ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	075a      	lsls	r2, r3, #29
 80075d0:	d505      	bpl.n	80075de <__sflush_r+0x46>
 80075d2:	6863      	ldr	r3, [r4, #4]
 80075d4:	1ac0      	subs	r0, r0, r3
 80075d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075d8:	b10b      	cbz	r3, 80075de <__sflush_r+0x46>
 80075da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075dc:	1ac0      	subs	r0, r0, r3
 80075de:	2300      	movs	r3, #0
 80075e0:	4602      	mov	r2, r0
 80075e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e4:	6a21      	ldr	r1, [r4, #32]
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b0      	blx	r6
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	d106      	bne.n	80075fe <__sflush_r+0x66>
 80075f0:	6829      	ldr	r1, [r5, #0]
 80075f2:	291d      	cmp	r1, #29
 80075f4:	d82c      	bhi.n	8007650 <__sflush_r+0xb8>
 80075f6:	4a2a      	ldr	r2, [pc, #168]	; (80076a0 <__sflush_r+0x108>)
 80075f8:	40ca      	lsrs	r2, r1
 80075fa:	07d6      	lsls	r6, r2, #31
 80075fc:	d528      	bpl.n	8007650 <__sflush_r+0xb8>
 80075fe:	2200      	movs	r2, #0
 8007600:	6062      	str	r2, [r4, #4]
 8007602:	04d9      	lsls	r1, r3, #19
 8007604:	6922      	ldr	r2, [r4, #16]
 8007606:	6022      	str	r2, [r4, #0]
 8007608:	d504      	bpl.n	8007614 <__sflush_r+0x7c>
 800760a:	1c42      	adds	r2, r0, #1
 800760c:	d101      	bne.n	8007612 <__sflush_r+0x7a>
 800760e:	682b      	ldr	r3, [r5, #0]
 8007610:	b903      	cbnz	r3, 8007614 <__sflush_r+0x7c>
 8007612:	6560      	str	r0, [r4, #84]	; 0x54
 8007614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007616:	602f      	str	r7, [r5, #0]
 8007618:	2900      	cmp	r1, #0
 800761a:	d0ca      	beq.n	80075b2 <__sflush_r+0x1a>
 800761c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007620:	4299      	cmp	r1, r3
 8007622:	d002      	beq.n	800762a <__sflush_r+0x92>
 8007624:	4628      	mov	r0, r5
 8007626:	f7ff faa5 	bl	8006b74 <_free_r>
 800762a:	2000      	movs	r0, #0
 800762c:	6360      	str	r0, [r4, #52]	; 0x34
 800762e:	e7c1      	b.n	80075b4 <__sflush_r+0x1c>
 8007630:	6a21      	ldr	r1, [r4, #32]
 8007632:	2301      	movs	r3, #1
 8007634:	4628      	mov	r0, r5
 8007636:	47b0      	blx	r6
 8007638:	1c41      	adds	r1, r0, #1
 800763a:	d1c7      	bne.n	80075cc <__sflush_r+0x34>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0c4      	beq.n	80075cc <__sflush_r+0x34>
 8007642:	2b1d      	cmp	r3, #29
 8007644:	d001      	beq.n	800764a <__sflush_r+0xb2>
 8007646:	2b16      	cmp	r3, #22
 8007648:	d101      	bne.n	800764e <__sflush_r+0xb6>
 800764a:	602f      	str	r7, [r5, #0]
 800764c:	e7b1      	b.n	80075b2 <__sflush_r+0x1a>
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	e7ad      	b.n	80075b4 <__sflush_r+0x1c>
 8007658:	690f      	ldr	r7, [r1, #16]
 800765a:	2f00      	cmp	r7, #0
 800765c:	d0a9      	beq.n	80075b2 <__sflush_r+0x1a>
 800765e:	0793      	lsls	r3, r2, #30
 8007660:	680e      	ldr	r6, [r1, #0]
 8007662:	bf08      	it	eq
 8007664:	694b      	ldreq	r3, [r1, #20]
 8007666:	600f      	str	r7, [r1, #0]
 8007668:	bf18      	it	ne
 800766a:	2300      	movne	r3, #0
 800766c:	eba6 0807 	sub.w	r8, r6, r7
 8007670:	608b      	str	r3, [r1, #8]
 8007672:	f1b8 0f00 	cmp.w	r8, #0
 8007676:	dd9c      	ble.n	80075b2 <__sflush_r+0x1a>
 8007678:	6a21      	ldr	r1, [r4, #32]
 800767a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800767c:	4643      	mov	r3, r8
 800767e:	463a      	mov	r2, r7
 8007680:	4628      	mov	r0, r5
 8007682:	47b0      	blx	r6
 8007684:	2800      	cmp	r0, #0
 8007686:	dc06      	bgt.n	8007696 <__sflush_r+0xfe>
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	e78e      	b.n	80075b4 <__sflush_r+0x1c>
 8007696:	4407      	add	r7, r0
 8007698:	eba8 0800 	sub.w	r8, r8, r0
 800769c:	e7e9      	b.n	8007672 <__sflush_r+0xda>
 800769e:	bf00      	nop
 80076a0:	20400001 	.word	0x20400001

080076a4 <_fflush_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	690b      	ldr	r3, [r1, #16]
 80076a8:	4605      	mov	r5, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	b913      	cbnz	r3, 80076b4 <_fflush_r+0x10>
 80076ae:	2500      	movs	r5, #0
 80076b0:	4628      	mov	r0, r5
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	b118      	cbz	r0, 80076be <_fflush_r+0x1a>
 80076b6:	6983      	ldr	r3, [r0, #24]
 80076b8:	b90b      	cbnz	r3, 80076be <_fflush_r+0x1a>
 80076ba:	f000 f887 	bl	80077cc <__sinit>
 80076be:	4b14      	ldr	r3, [pc, #80]	; (8007710 <_fflush_r+0x6c>)
 80076c0:	429c      	cmp	r4, r3
 80076c2:	d11b      	bne.n	80076fc <_fflush_r+0x58>
 80076c4:	686c      	ldr	r4, [r5, #4]
 80076c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0ef      	beq.n	80076ae <_fflush_r+0xa>
 80076ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076d0:	07d0      	lsls	r0, r2, #31
 80076d2:	d404      	bmi.n	80076de <_fflush_r+0x3a>
 80076d4:	0599      	lsls	r1, r3, #22
 80076d6:	d402      	bmi.n	80076de <_fflush_r+0x3a>
 80076d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076da:	f000 f915 	bl	8007908 <__retarget_lock_acquire_recursive>
 80076de:	4628      	mov	r0, r5
 80076e0:	4621      	mov	r1, r4
 80076e2:	f7ff ff59 	bl	8007598 <__sflush_r>
 80076e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076e8:	07da      	lsls	r2, r3, #31
 80076ea:	4605      	mov	r5, r0
 80076ec:	d4e0      	bmi.n	80076b0 <_fflush_r+0xc>
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	059b      	lsls	r3, r3, #22
 80076f2:	d4dd      	bmi.n	80076b0 <_fflush_r+0xc>
 80076f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076f6:	f000 f908 	bl	800790a <__retarget_lock_release_recursive>
 80076fa:	e7d9      	b.n	80076b0 <_fflush_r+0xc>
 80076fc:	4b05      	ldr	r3, [pc, #20]	; (8007714 <_fflush_r+0x70>)
 80076fe:	429c      	cmp	r4, r3
 8007700:	d101      	bne.n	8007706 <_fflush_r+0x62>
 8007702:	68ac      	ldr	r4, [r5, #8]
 8007704:	e7df      	b.n	80076c6 <_fflush_r+0x22>
 8007706:	4b04      	ldr	r3, [pc, #16]	; (8007718 <_fflush_r+0x74>)
 8007708:	429c      	cmp	r4, r3
 800770a:	bf08      	it	eq
 800770c:	68ec      	ldreq	r4, [r5, #12]
 800770e:	e7da      	b.n	80076c6 <_fflush_r+0x22>
 8007710:	08007fd4 	.word	0x08007fd4
 8007714:	08007ff4 	.word	0x08007ff4
 8007718:	08007fb4 	.word	0x08007fb4

0800771c <std>:
 800771c:	2300      	movs	r3, #0
 800771e:	b510      	push	{r4, lr}
 8007720:	4604      	mov	r4, r0
 8007722:	e9c0 3300 	strd	r3, r3, [r0]
 8007726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800772a:	6083      	str	r3, [r0, #8]
 800772c:	8181      	strh	r1, [r0, #12]
 800772e:	6643      	str	r3, [r0, #100]	; 0x64
 8007730:	81c2      	strh	r2, [r0, #14]
 8007732:	6183      	str	r3, [r0, #24]
 8007734:	4619      	mov	r1, r3
 8007736:	2208      	movs	r2, #8
 8007738:	305c      	adds	r0, #92	; 0x5c
 800773a:	f7fd fb59 	bl	8004df0 <memset>
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <std+0x38>)
 8007740:	6263      	str	r3, [r4, #36]	; 0x24
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <std+0x3c>)
 8007744:	62a3      	str	r3, [r4, #40]	; 0x28
 8007746:	4b05      	ldr	r3, [pc, #20]	; (800775c <std+0x40>)
 8007748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <std+0x44>)
 800774c:	6224      	str	r4, [r4, #32]
 800774e:	6323      	str	r3, [r4, #48]	; 0x30
 8007750:	bd10      	pop	{r4, pc}
 8007752:	bf00      	nop
 8007754:	08007a71 	.word	0x08007a71
 8007758:	08007a93 	.word	0x08007a93
 800775c:	08007acb 	.word	0x08007acb
 8007760:	08007aef 	.word	0x08007aef

08007764 <_cleanup_r>:
 8007764:	4901      	ldr	r1, [pc, #4]	; (800776c <_cleanup_r+0x8>)
 8007766:	f000 b8af 	b.w	80078c8 <_fwalk_reent>
 800776a:	bf00      	nop
 800776c:	080076a5 	.word	0x080076a5

08007770 <__sfmoreglue>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	2268      	movs	r2, #104	; 0x68
 8007774:	1e4d      	subs	r5, r1, #1
 8007776:	4355      	muls	r5, r2
 8007778:	460e      	mov	r6, r1
 800777a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800777e:	f7ff fa65 	bl	8006c4c <_malloc_r>
 8007782:	4604      	mov	r4, r0
 8007784:	b140      	cbz	r0, 8007798 <__sfmoreglue+0x28>
 8007786:	2100      	movs	r1, #0
 8007788:	e9c0 1600 	strd	r1, r6, [r0]
 800778c:	300c      	adds	r0, #12
 800778e:	60a0      	str	r0, [r4, #8]
 8007790:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007794:	f7fd fb2c 	bl	8004df0 <memset>
 8007798:	4620      	mov	r0, r4
 800779a:	bd70      	pop	{r4, r5, r6, pc}

0800779c <__sfp_lock_acquire>:
 800779c:	4801      	ldr	r0, [pc, #4]	; (80077a4 <__sfp_lock_acquire+0x8>)
 800779e:	f000 b8b3 	b.w	8007908 <__retarget_lock_acquire_recursive>
 80077a2:	bf00      	nop
 80077a4:	2000037d 	.word	0x2000037d

080077a8 <__sfp_lock_release>:
 80077a8:	4801      	ldr	r0, [pc, #4]	; (80077b0 <__sfp_lock_release+0x8>)
 80077aa:	f000 b8ae 	b.w	800790a <__retarget_lock_release_recursive>
 80077ae:	bf00      	nop
 80077b0:	2000037d 	.word	0x2000037d

080077b4 <__sinit_lock_acquire>:
 80077b4:	4801      	ldr	r0, [pc, #4]	; (80077bc <__sinit_lock_acquire+0x8>)
 80077b6:	f000 b8a7 	b.w	8007908 <__retarget_lock_acquire_recursive>
 80077ba:	bf00      	nop
 80077bc:	2000037e 	.word	0x2000037e

080077c0 <__sinit_lock_release>:
 80077c0:	4801      	ldr	r0, [pc, #4]	; (80077c8 <__sinit_lock_release+0x8>)
 80077c2:	f000 b8a2 	b.w	800790a <__retarget_lock_release_recursive>
 80077c6:	bf00      	nop
 80077c8:	2000037e 	.word	0x2000037e

080077cc <__sinit>:
 80077cc:	b510      	push	{r4, lr}
 80077ce:	4604      	mov	r4, r0
 80077d0:	f7ff fff0 	bl	80077b4 <__sinit_lock_acquire>
 80077d4:	69a3      	ldr	r3, [r4, #24]
 80077d6:	b11b      	cbz	r3, 80077e0 <__sinit+0x14>
 80077d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077dc:	f7ff bff0 	b.w	80077c0 <__sinit_lock_release>
 80077e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077e4:	6523      	str	r3, [r4, #80]	; 0x50
 80077e6:	4b13      	ldr	r3, [pc, #76]	; (8007834 <__sinit+0x68>)
 80077e8:	4a13      	ldr	r2, [pc, #76]	; (8007838 <__sinit+0x6c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80077ee:	42a3      	cmp	r3, r4
 80077f0:	bf04      	itt	eq
 80077f2:	2301      	moveq	r3, #1
 80077f4:	61a3      	streq	r3, [r4, #24]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f820 	bl	800783c <__sfp>
 80077fc:	6060      	str	r0, [r4, #4]
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 f81c 	bl	800783c <__sfp>
 8007804:	60a0      	str	r0, [r4, #8]
 8007806:	4620      	mov	r0, r4
 8007808:	f000 f818 	bl	800783c <__sfp>
 800780c:	2200      	movs	r2, #0
 800780e:	60e0      	str	r0, [r4, #12]
 8007810:	2104      	movs	r1, #4
 8007812:	6860      	ldr	r0, [r4, #4]
 8007814:	f7ff ff82 	bl	800771c <std>
 8007818:	68a0      	ldr	r0, [r4, #8]
 800781a:	2201      	movs	r2, #1
 800781c:	2109      	movs	r1, #9
 800781e:	f7ff ff7d 	bl	800771c <std>
 8007822:	68e0      	ldr	r0, [r4, #12]
 8007824:	2202      	movs	r2, #2
 8007826:	2112      	movs	r1, #18
 8007828:	f7ff ff78 	bl	800771c <std>
 800782c:	2301      	movs	r3, #1
 800782e:	61a3      	str	r3, [r4, #24]
 8007830:	e7d2      	b.n	80077d8 <__sinit+0xc>
 8007832:	bf00      	nop
 8007834:	08007c38 	.word	0x08007c38
 8007838:	08007765 	.word	0x08007765

0800783c <__sfp>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	4607      	mov	r7, r0
 8007840:	f7ff ffac 	bl	800779c <__sfp_lock_acquire>
 8007844:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <__sfp+0x84>)
 8007846:	681e      	ldr	r6, [r3, #0]
 8007848:	69b3      	ldr	r3, [r6, #24]
 800784a:	b913      	cbnz	r3, 8007852 <__sfp+0x16>
 800784c:	4630      	mov	r0, r6
 800784e:	f7ff ffbd 	bl	80077cc <__sinit>
 8007852:	3648      	adds	r6, #72	; 0x48
 8007854:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007858:	3b01      	subs	r3, #1
 800785a:	d503      	bpl.n	8007864 <__sfp+0x28>
 800785c:	6833      	ldr	r3, [r6, #0]
 800785e:	b30b      	cbz	r3, 80078a4 <__sfp+0x68>
 8007860:	6836      	ldr	r6, [r6, #0]
 8007862:	e7f7      	b.n	8007854 <__sfp+0x18>
 8007864:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007868:	b9d5      	cbnz	r5, 80078a0 <__sfp+0x64>
 800786a:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <__sfp+0x88>)
 800786c:	60e3      	str	r3, [r4, #12]
 800786e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007872:	6665      	str	r5, [r4, #100]	; 0x64
 8007874:	f000 f847 	bl	8007906 <__retarget_lock_init_recursive>
 8007878:	f7ff ff96 	bl	80077a8 <__sfp_lock_release>
 800787c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007880:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007884:	6025      	str	r5, [r4, #0]
 8007886:	61a5      	str	r5, [r4, #24]
 8007888:	2208      	movs	r2, #8
 800788a:	4629      	mov	r1, r5
 800788c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007890:	f7fd faae 	bl	8004df0 <memset>
 8007894:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007898:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800789c:	4620      	mov	r0, r4
 800789e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a0:	3468      	adds	r4, #104	; 0x68
 80078a2:	e7d9      	b.n	8007858 <__sfp+0x1c>
 80078a4:	2104      	movs	r1, #4
 80078a6:	4638      	mov	r0, r7
 80078a8:	f7ff ff62 	bl	8007770 <__sfmoreglue>
 80078ac:	4604      	mov	r4, r0
 80078ae:	6030      	str	r0, [r6, #0]
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d1d5      	bne.n	8007860 <__sfp+0x24>
 80078b4:	f7ff ff78 	bl	80077a8 <__sfp_lock_release>
 80078b8:	230c      	movs	r3, #12
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	e7ee      	b.n	800789c <__sfp+0x60>
 80078be:	bf00      	nop
 80078c0:	08007c38 	.word	0x08007c38
 80078c4:	ffff0001 	.word	0xffff0001

080078c8 <_fwalk_reent>:
 80078c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078cc:	4606      	mov	r6, r0
 80078ce:	4688      	mov	r8, r1
 80078d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078d4:	2700      	movs	r7, #0
 80078d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078da:	f1b9 0901 	subs.w	r9, r9, #1
 80078de:	d505      	bpl.n	80078ec <_fwalk_reent+0x24>
 80078e0:	6824      	ldr	r4, [r4, #0]
 80078e2:	2c00      	cmp	r4, #0
 80078e4:	d1f7      	bne.n	80078d6 <_fwalk_reent+0xe>
 80078e6:	4638      	mov	r0, r7
 80078e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ec:	89ab      	ldrh	r3, [r5, #12]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d907      	bls.n	8007902 <_fwalk_reent+0x3a>
 80078f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078f6:	3301      	adds	r3, #1
 80078f8:	d003      	beq.n	8007902 <_fwalk_reent+0x3a>
 80078fa:	4629      	mov	r1, r5
 80078fc:	4630      	mov	r0, r6
 80078fe:	47c0      	blx	r8
 8007900:	4307      	orrs	r7, r0
 8007902:	3568      	adds	r5, #104	; 0x68
 8007904:	e7e9      	b.n	80078da <_fwalk_reent+0x12>

08007906 <__retarget_lock_init_recursive>:
 8007906:	4770      	bx	lr

08007908 <__retarget_lock_acquire_recursive>:
 8007908:	4770      	bx	lr

0800790a <__retarget_lock_release_recursive>:
 800790a:	4770      	bx	lr

0800790c <__swhatbuf_r>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	460e      	mov	r6, r1
 8007910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007914:	2900      	cmp	r1, #0
 8007916:	b096      	sub	sp, #88	; 0x58
 8007918:	4614      	mov	r4, r2
 800791a:	461d      	mov	r5, r3
 800791c:	da08      	bge.n	8007930 <__swhatbuf_r+0x24>
 800791e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	602a      	str	r2, [r5, #0]
 8007926:	061a      	lsls	r2, r3, #24
 8007928:	d410      	bmi.n	800794c <__swhatbuf_r+0x40>
 800792a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800792e:	e00e      	b.n	800794e <__swhatbuf_r+0x42>
 8007930:	466a      	mov	r2, sp
 8007932:	f000 f903 	bl	8007b3c <_fstat_r>
 8007936:	2800      	cmp	r0, #0
 8007938:	dbf1      	blt.n	800791e <__swhatbuf_r+0x12>
 800793a:	9a01      	ldr	r2, [sp, #4]
 800793c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007940:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007944:	425a      	negs	r2, r3
 8007946:	415a      	adcs	r2, r3
 8007948:	602a      	str	r2, [r5, #0]
 800794a:	e7ee      	b.n	800792a <__swhatbuf_r+0x1e>
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	2000      	movs	r0, #0
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	b016      	add	sp, #88	; 0x58
 8007954:	bd70      	pop	{r4, r5, r6, pc}
	...

08007958 <__smakebuf_r>:
 8007958:	898b      	ldrh	r3, [r1, #12]
 800795a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800795c:	079d      	lsls	r5, r3, #30
 800795e:	4606      	mov	r6, r0
 8007960:	460c      	mov	r4, r1
 8007962:	d507      	bpl.n	8007974 <__smakebuf_r+0x1c>
 8007964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	2301      	movs	r3, #1
 800796e:	6163      	str	r3, [r4, #20]
 8007970:	b002      	add	sp, #8
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	ab01      	add	r3, sp, #4
 8007976:	466a      	mov	r2, sp
 8007978:	f7ff ffc8 	bl	800790c <__swhatbuf_r>
 800797c:	9900      	ldr	r1, [sp, #0]
 800797e:	4605      	mov	r5, r0
 8007980:	4630      	mov	r0, r6
 8007982:	f7ff f963 	bl	8006c4c <_malloc_r>
 8007986:	b948      	cbnz	r0, 800799c <__smakebuf_r+0x44>
 8007988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798c:	059a      	lsls	r2, r3, #22
 800798e:	d4ef      	bmi.n	8007970 <__smakebuf_r+0x18>
 8007990:	f023 0303 	bic.w	r3, r3, #3
 8007994:	f043 0302 	orr.w	r3, r3, #2
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	e7e3      	b.n	8007964 <__smakebuf_r+0xc>
 800799c:	4b0d      	ldr	r3, [pc, #52]	; (80079d4 <__smakebuf_r+0x7c>)
 800799e:	62b3      	str	r3, [r6, #40]	; 0x28
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	6020      	str	r0, [r4, #0]
 80079a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	9b00      	ldr	r3, [sp, #0]
 80079ac:	6163      	str	r3, [r4, #20]
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	6120      	str	r0, [r4, #16]
 80079b2:	b15b      	cbz	r3, 80079cc <__smakebuf_r+0x74>
 80079b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 f8d1 	bl	8007b60 <_isatty_r>
 80079be:	b128      	cbz	r0, 80079cc <__smakebuf_r+0x74>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	89a0      	ldrh	r0, [r4, #12]
 80079ce:	4305      	orrs	r5, r0
 80079d0:	81a5      	strh	r5, [r4, #12]
 80079d2:	e7cd      	b.n	8007970 <__smakebuf_r+0x18>
 80079d4:	08007765 	.word	0x08007765

080079d8 <_malloc_usable_size_r>:
 80079d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079dc:	1f18      	subs	r0, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfbc      	itt	lt
 80079e2:	580b      	ldrlt	r3, [r1, r0]
 80079e4:	18c0      	addlt	r0, r0, r3
 80079e6:	4770      	bx	lr

080079e8 <_raise_r>:
 80079e8:	291f      	cmp	r1, #31
 80079ea:	b538      	push	{r3, r4, r5, lr}
 80079ec:	4604      	mov	r4, r0
 80079ee:	460d      	mov	r5, r1
 80079f0:	d904      	bls.n	80079fc <_raise_r+0x14>
 80079f2:	2316      	movs	r3, #22
 80079f4:	6003      	str	r3, [r0, #0]
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079fe:	b112      	cbz	r2, 8007a06 <_raise_r+0x1e>
 8007a00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a04:	b94b      	cbnz	r3, 8007a1a <_raise_r+0x32>
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 f830 	bl	8007a6c <_getpid_r>
 8007a0c:	462a      	mov	r2, r5
 8007a0e:	4601      	mov	r1, r0
 8007a10:	4620      	mov	r0, r4
 8007a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a16:	f000 b817 	b.w	8007a48 <_kill_r>
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d00a      	beq.n	8007a34 <_raise_r+0x4c>
 8007a1e:	1c59      	adds	r1, r3, #1
 8007a20:	d103      	bne.n	8007a2a <_raise_r+0x42>
 8007a22:	2316      	movs	r3, #22
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	2001      	movs	r0, #1
 8007a28:	e7e7      	b.n	80079fa <_raise_r+0x12>
 8007a2a:	2400      	movs	r4, #0
 8007a2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a30:	4628      	mov	r0, r5
 8007a32:	4798      	blx	r3
 8007a34:	2000      	movs	r0, #0
 8007a36:	e7e0      	b.n	80079fa <_raise_r+0x12>

08007a38 <raise>:
 8007a38:	4b02      	ldr	r3, [pc, #8]	; (8007a44 <raise+0xc>)
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	f7ff bfd3 	b.w	80079e8 <_raise_r>
 8007a42:	bf00      	nop
 8007a44:	20000044 	.word	0x20000044

08007a48 <_kill_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d07      	ldr	r5, [pc, #28]	; (8007a68 <_kill_r+0x20>)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	602b      	str	r3, [r5, #0]
 8007a56:	f7fa f93c 	bl	8001cd2 <_kill>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	d102      	bne.n	8007a64 <_kill_r+0x1c>
 8007a5e:	682b      	ldr	r3, [r5, #0]
 8007a60:	b103      	cbz	r3, 8007a64 <_kill_r+0x1c>
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
 8007a66:	bf00      	nop
 8007a68:	20000378 	.word	0x20000378

08007a6c <_getpid_r>:
 8007a6c:	f7fa b929 	b.w	8001cc2 <_getpid>

08007a70 <__sread>:
 8007a70:	b510      	push	{r4, lr}
 8007a72:	460c      	mov	r4, r1
 8007a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a78:	f000 f894 	bl	8007ba4 <_read_r>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	bfab      	itete	ge
 8007a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a82:	89a3      	ldrhlt	r3, [r4, #12]
 8007a84:	181b      	addge	r3, r3, r0
 8007a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a8a:	bfac      	ite	ge
 8007a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a8e:	81a3      	strhlt	r3, [r4, #12]
 8007a90:	bd10      	pop	{r4, pc}

08007a92 <__swrite>:
 8007a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a96:	461f      	mov	r7, r3
 8007a98:	898b      	ldrh	r3, [r1, #12]
 8007a9a:	05db      	lsls	r3, r3, #23
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	d505      	bpl.n	8007ab0 <__swrite+0x1e>
 8007aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f000 f868 	bl	8007b80 <_lseek_r>
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	4632      	mov	r2, r6
 8007abe:	463b      	mov	r3, r7
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac6:	f000 b817 	b.w	8007af8 <_write_r>

08007aca <__sseek>:
 8007aca:	b510      	push	{r4, lr}
 8007acc:	460c      	mov	r4, r1
 8007ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad2:	f000 f855 	bl	8007b80 <_lseek_r>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	bf15      	itete	ne
 8007adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ae6:	81a3      	strheq	r3, [r4, #12]
 8007ae8:	bf18      	it	ne
 8007aea:	81a3      	strhne	r3, [r4, #12]
 8007aec:	bd10      	pop	{r4, pc}

08007aee <__sclose>:
 8007aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af2:	f000 b813 	b.w	8007b1c <_close_r>
	...

08007af8 <_write_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d07      	ldr	r5, [pc, #28]	; (8007b18 <_write_r+0x20>)
 8007afc:	4604      	mov	r4, r0
 8007afe:	4608      	mov	r0, r1
 8007b00:	4611      	mov	r1, r2
 8007b02:	2200      	movs	r2, #0
 8007b04:	602a      	str	r2, [r5, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f7f9 fe01 	bl	800170e <_write>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d102      	bne.n	8007b16 <_write_r+0x1e>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	b103      	cbz	r3, 8007b16 <_write_r+0x1e>
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	20000378 	.word	0x20000378

08007b1c <_close_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d06      	ldr	r5, [pc, #24]	; (8007b38 <_close_r+0x1c>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	602b      	str	r3, [r5, #0]
 8007b28:	f7fa f90a 	bl	8001d40 <_close>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_close_r+0x1a>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_close_r+0x1a>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	20000378 	.word	0x20000378

08007b3c <_fstat_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d07      	ldr	r5, [pc, #28]	; (8007b5c <_fstat_r+0x20>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	4611      	mov	r1, r2
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	f7fa f905 	bl	8001d58 <_fstat>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	d102      	bne.n	8007b58 <_fstat_r+0x1c>
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	b103      	cbz	r3, 8007b58 <_fstat_r+0x1c>
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	bd38      	pop	{r3, r4, r5, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000378 	.word	0x20000378

08007b60 <_isatty_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d06      	ldr	r5, [pc, #24]	; (8007b7c <_isatty_r+0x1c>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7fa f904 	bl	8001d78 <_isatty>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_isatty_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_isatty_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000378 	.word	0x20000378

08007b80 <_lseek_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d07      	ldr	r5, [pc, #28]	; (8007ba0 <_lseek_r+0x20>)
 8007b84:	4604      	mov	r4, r0
 8007b86:	4608      	mov	r0, r1
 8007b88:	4611      	mov	r1, r2
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	602a      	str	r2, [r5, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f7fa f8fd 	bl	8001d8e <_lseek>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_lseek_r+0x1e>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_lseek_r+0x1e>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	20000378 	.word	0x20000378

08007ba4 <_read_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4d07      	ldr	r5, [pc, #28]	; (8007bc4 <_read_r+0x20>)
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	602a      	str	r2, [r5, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f7fa f8a7 	bl	8001d06 <_read>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_read_r+0x1e>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_read_r+0x1e>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	20000378 	.word	0x20000378

08007bc8 <_init>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	bf00      	nop
 8007bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bce:	bc08      	pop	{r3}
 8007bd0:	469e      	mov	lr, r3
 8007bd2:	4770      	bx	lr

08007bd4 <_fini>:
 8007bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd6:	bf00      	nop
 8007bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bda:	bc08      	pop	{r3}
 8007bdc:	469e      	mov	lr, r3
 8007bde:	4770      	bx	lr
