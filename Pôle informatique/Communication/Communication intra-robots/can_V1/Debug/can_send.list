
can_send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031cc  080031cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031cc  080031cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031cc  080031cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080031e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080031e0  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a258  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000181f  00000000  00000000  0002a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1ed  00000000  00000000  0002c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a32  00000000  00000000  00046b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee27  00000000  00000000  00050567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef38e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c8  00000000  00000000  000ef3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003164 	.word	0x08003164

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003164 	.word	0x08003164

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, int adresse) {
 800021c:	b084      	sub	sp, #16
 800021e:	b5b0      	push	{r4, r5, r7, lr}
 8000220:	b08a      	sub	sp, #40	; 0x28
 8000222:	af00      	add	r7, sp, #0
 8000224:	2538      	movs	r5, #56	; 0x38
 8000226:	197c      	adds	r4, r7, r5
 8000228:	6020      	str	r0, [r4, #0]
 800022a:	6061      	str	r1, [r4, #4]
 800022c:	60a2      	str	r2, [r4, #8]
 800022e:	60e3      	str	r3, [r4, #12]
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000230:	003b      	movs	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 8000236:	003b      	movs	r3, r7
 8000238:	2200      	movs	r2, #0
 800023a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 800023c:	003b      	movs	r3, r7
 800023e:	2201      	movs	r2, #1
 8000240:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = adresse << 5; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000244:	015b      	lsls	r3, r3, #5
 8000246:	001a      	movs	r2, r3
 8000248:	003b      	movs	r3, r7
 800024a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0; //
 800024c:	003b      	movs	r3, r7
 800024e:	2200      	movs	r2, #0
 8000250:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFF << 5; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000252:	003b      	movs	r3, r7
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <CAN_Config+0x94>)
 8000256:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000258:	003b      	movs	r3, r7
 800025a:	2200      	movs	r2, #0
 800025c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 800025e:	003b      	movs	r3, r7
 8000260:	2200      	movs	r2, #0
 8000262:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000264:	003b      	movs	r3, r7
 8000266:	2201      	movs	r2, #1
 8000268:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800026a:	003b      	movs	r3, r7
 800026c:	220e      	movs	r2, #14
 800026e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000270:	003a      	movs	r2, r7
 8000272:	197b      	adds	r3, r7, r5
 8000274:	0011      	movs	r1, r2
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fcbe 	bl	8000bf8 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 800027c:	197b      	adds	r3, r7, r5
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fdac 	bl	8000ddc <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000284:	197b      	adds	r3, r7, r5
 8000286:	2102      	movs	r1, #2
 8000288:	0018      	movs	r0, r3
 800028a:	f000 ffe7 	bl	800125c <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <CAN_Config+0x98>)
 8000290:	197a      	adds	r2, r7, r5
 8000292:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000294:	c313      	stmia	r3!, {r0, r1, r4}
 8000296:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000298:	c313      	stmia	r3!, {r0, r1, r4}
 800029a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029c:	c313      	stmia	r3!, {r0, r1, r4}
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	601a      	str	r2, [r3, #0]
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)

}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	b00a      	add	sp, #40	; 0x28
 80002a8:	bcb0      	pop	{r4, r5, r7}
 80002aa:	bc08      	pop	{r3}
 80002ac:	b004      	add	sp, #16
 80002ae:	4718      	bx	r3
 80002b0:	0001ffe0 	.word	0x0001ffe0
 80002b4:	20000028 	.word	0x20000028

080002b8 <send_one>:


int send_one(int adr, uint8_t data){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	000a      	movs	r2, r1
 80002c2:	1cfb      	adds	r3, r7, #3
 80002c4:	701a      	strb	r2, [r3, #0]

	uint8_t msg[1] = {data};
 80002c6:	210c      	movs	r1, #12
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	1cfa      	adds	r2, r7, #3
 80002cc:	7812      	ldrb	r2, [r2, #0]
 80002ce:	701a      	strb	r2, [r3, #0]
	return send_can(adr, msg ,1);
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2201      	movs	r2, #1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 f806 	bl	80002e8 <send_can>
 80002dc:	0003      	movs	r3, r0
}
 80002de:	0018      	movs	r0, r3
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <send_can>:


int send_can(int adr, uint8_t msg[], int msg_size){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08c      	sub	sp, #48	; 0x30
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = msg_size; // taille des données à transmettre en octets
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	2118      	movs	r1, #24
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	611a      	str	r2, [r3, #16]
	txHeader.StdId = adr; //adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_STD; //on choisit l'adressage standard
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	751a      	strb	r2, [r3, #20]

	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, msg, &TxMailbox);
 8000314:	2314      	movs	r3, #20
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	68ba      	ldr	r2, [r7, #8]
 800031a:	1879      	adds	r1, r7, r1
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <send_can+0x44>)
 800031e:	f000 fda3 	bl	8000e68 <HAL_CAN_AddTxMessage>
	return 0;
 8000322:	2300      	movs	r3, #0
}
 8000324:	0018      	movs	r0, r3
 8000326:	46bd      	mov	sp, r7
 8000328:	b00c      	add	sp, #48	; 0x30
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000028 	.word	0x20000028

08000330 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b08d      	sub	sp, #52	; 0x34
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]

	//	On récupère le message et on stock les valeurs dans RxData
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000338:	2428      	movs	r4, #40	; 0x28
 800033a:	193b      	adds	r3, r7, r4
 800033c:	220c      	movs	r2, #12
 800033e:	18ba      	adds	r2, r7, r2
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	2100      	movs	r1, #0
 8000344:	f000 fe6e 	bl	8001024 <HAL_CAN_GetRxMessage>


	//renvoi un msg sur le bus can
	uint8_t data[3] = {RxData[0],RxData[1],0x11};
 8000348:	0020      	movs	r0, r4
 800034a:	183b      	adds	r3, r7, r0
 800034c:	781a      	ldrb	r2, [r3, #0]
 800034e:	2108      	movs	r1, #8
 8000350:	187b      	adds	r3, r7, r1
 8000352:	701a      	strb	r2, [r3, #0]
 8000354:	183b      	adds	r3, r7, r0
 8000356:	785a      	ldrb	r2, [r3, #1]
 8000358:	187b      	adds	r3, r7, r1
 800035a:	705a      	strb	r2, [r3, #1]
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2211      	movs	r2, #17
 8000360:	709a      	strb	r2, [r3, #2]
	send_can(0x123, data, 3);
 8000362:	1879      	adds	r1, r7, r1
 8000364:	2324      	movs	r3, #36	; 0x24
 8000366:	33ff      	adds	r3, #255	; 0xff
 8000368:	2203      	movs	r2, #3
 800036a:	0018      	movs	r0, r3
 800036c:	f7ff ffbc 	bl	80002e8 <send_can>
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b00d      	add	sp, #52	; 0x34
 8000376:	bd90      	pop	{r4, r7, pc}

08000378 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000378:	b5b0      	push	{r4, r5, r7, lr}
 800037a:	b08a      	sub	sp, #40	; 0x28
 800037c:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800037e:	f000 fab5 	bl	80008ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000382:	f000 f85f 	bl	8000444 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000386:	f000 f927 	bl	80005d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800038a:	f000 f8f5 	bl	8000578 <MX_USART2_UART_Init>
	MX_CAN_Init();
 800038e:	f000 f8bb 	bl	8000508 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	CAN_Config(hcan, 0x222);
 8000392:	4b27      	ldr	r3, [pc, #156]	; (8000430 <main+0xb8>)
 8000394:	4a27      	ldr	r2, [pc, #156]	; (8000434 <main+0xbc>)
 8000396:	9206      	str	r2, [sp, #24]
 8000398:	466a      	mov	r2, sp
 800039a:	0011      	movs	r1, r2
 800039c:	001a      	movs	r2, r3
 800039e:	3210      	adds	r2, #16
 80003a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80003a2:	c131      	stmia	r1!, {r0, r4, r5}
 80003a4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80003a6:	c131      	stmia	r1!, {r0, r4, r5}
 80003a8:	6818      	ldr	r0, [r3, #0]
 80003aa:	6859      	ldr	r1, [r3, #4]
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	f7ff ff34 	bl	800021c <CAN_Config>

	char *msg = "\n\r\n\rHello Nucleo Fun!\n\r";
 80003b4:	4b20      	ldr	r3, [pc, #128]	; (8000438 <main+0xc0>)
 80003b6:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, sizeof(msg), 1000);
 80003b8:	23fa      	movs	r3, #250	; 0xfa
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	481f      	ldr	r0, [pc, #124]	; (800043c <main+0xc4>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	f002 fa51 	bl	8002868 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80003c6:	2390      	movs	r3, #144	; 0x90
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	2201      	movs	r2, #1
 80003cc:	2120      	movs	r1, #32
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 fbd8 	bl	8001b84 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 80003d4:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <main+0xc8>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 faec 	bl	80009b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);   // LED on PA5 OFF
 80003dc:	2390      	movs	r3, #144	; 0x90
 80003de:	05db      	lsls	r3, r3, #23
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fbcd 	bl	8001b84 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80003ea:	23fa      	movs	r3, #250	; 0xfa
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 fae0 	bl	80009b4 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	send_one(0x123, 0x32);
 80003f4:	2324      	movs	r3, #36	; 0x24
 80003f6:	33ff      	adds	r3, #255	; 0xff
 80003f8:	2132      	movs	r1, #50	; 0x32
 80003fa:	0018      	movs	r0, r3
 80003fc:	f7ff ff5c 	bl	80002b8 <send_one>
	while (1) {
		HAL_Delay(1500);
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <main+0xc8>)
 8000402:	0018      	movs	r0, r3
 8000404:	f000 fad6 	bl	80009b4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);   // LED on PA5 OFF
 8000408:	2390      	movs	r3, #144	; 0x90
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	2200      	movs	r2, #0
 800040e:	2120      	movs	r1, #32
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fbb7 	bl	8001b84 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000416:	23fa      	movs	r3, #250	; 0xfa
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	0018      	movs	r0, r3
 800041c:	f000 faca 	bl	80009b4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2201      	movs	r2, #1
 8000426:	2120      	movs	r1, #32
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fbab 	bl	8001b84 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 800042e:	e7e7      	b.n	8000400 <main+0x88>
 8000430:	20000050 	.word	0x20000050
 8000434:	00000222 	.word	0x00000222
 8000438:	0800317c 	.word	0x0800317c
 800043c:	20000078 	.word	0x20000078
 8000440:	000005dc 	.word	0x000005dc

08000444 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b099      	sub	sp, #100	; 0x64
 8000448:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800044a:	242c      	movs	r4, #44	; 0x2c
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2334      	movs	r3, #52	; 0x34
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 fe7d 	bl	8003154 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800045a:	231c      	movs	r3, #28
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	0018      	movs	r0, r3
 8000460:	2310      	movs	r3, #16
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fe75 	bl	8003154 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800046a:	003b      	movs	r3, r7
 800046c:	0018      	movs	r0, r3
 800046e:	231c      	movs	r3, #28
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f002 fe6e 	bl	8003154 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000478:	0021      	movs	r1, r4
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2202      	movs	r2, #2
 800047e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2201      	movs	r2, #1
 8000484:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2210      	movs	r2, #16
 800048a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2202      	movs	r2, #2
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	0212      	lsls	r2, r2, #8
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	22a0      	movs	r2, #160	; 0xa0
 800049e:	0392      	lsls	r2, r2, #14
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2201      	movs	r2, #1
 80004a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fb88 	bl	8001bc0 <HAL_RCC_OscConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x74>
		Error_Handler();
 80004b4:	f000 f8fa 	bl	80006ac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004b8:	211c      	movs	r1, #28
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2207      	movs	r2, #7
 80004be:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2202      	movs	r2, #2
 80004c4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2101      	movs	r1, #1
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 fef8 	bl	80022cc <HAL_RCC_ClockConfig>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0xa0>
		Error_Handler();
 80004e0:	f000 f8e4 	bl	80006ac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2202      	movs	r2, #2
 80004e8:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004f0:	003b      	movs	r3, r7
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 f864 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0xbc>
		Error_Handler();
 80004fc:	f000 f8d6 	bl	80006ac <Error_Handler>
	}
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b019      	add	sp, #100	; 0x64
 8000506:	bd90      	pop	{r4, r7, pc}

08000508 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_CAN_Init+0x68>)
 800050e:	4a19      	ldr	r2, [pc, #100]	; (8000574 <MX_CAN_Init+0x6c>)
 8000510:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 12;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_CAN_Init+0x68>)
 8000514:	220c      	movs	r2, #12
 8000516:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_CAN_Init+0x68>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_CAN_Init+0x68>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_CAN_Init+0x68>)
 8000526:	22e0      	movs	r2, #224	; 0xe0
 8000528:	02d2      	lsls	r2, r2, #11
 800052a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_CAN_Init+0x68>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	0352      	lsls	r2, r2, #13
 8000532:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_CAN_Init+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <MX_CAN_Init+0x68>)
 800053c:	2200      	movs	r2, #0
 800053e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = ENABLE;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_CAN_Init+0x68>)
 8000542:	2201      	movs	r2, #1
 8000544:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_CAN_Init+0x68>)
 8000548:	2200      	movs	r2, #0
 800054a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_CAN_Init+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <MX_CAN_Init+0x68>)
 8000554:	2200      	movs	r2, #0
 8000556:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <MX_CAN_Init+0x68>)
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fa4e 	bl	80009fc <HAL_CAN_Init>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_CAN_Init+0x60>
		Error_Handler();
 8000564:	f000 f8a2 	bl	80006ac <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	20000050 	.word	0x20000050
 8000574:	40006400 	.word	0x40006400

08000578 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <MX_USART2_UART_Init+0x5c>)
 8000580:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 8000584:	22e1      	movs	r2, #225	; 0xe1
 8000586:	0252      	lsls	r2, r2, #9
 8000588:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <MX_USART2_UART_Init+0x58>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 f8ff 	bl	80027c0 <HAL_UART_Init>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80005c6:	f000 f871 	bl	80006ac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000078 	.word	0x20000078
 80005d4:	40004400 	.word	0x40004400

080005d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	; 0x24
 80005dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005de:	240c      	movs	r4, #12
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	0018      	movs	r0, r3
 80005e4:	2314      	movs	r3, #20
 80005e6:	001a      	movs	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	f002 fdb3 	bl	8003154 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <MX_GPIO_Init+0xcc>)
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <MX_GPIO_Init+0xcc>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	0309      	lsls	r1, r1, #12
 80005f8:	430a      	orrs	r2, r1
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_GPIO_Init+0xcc>)
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	031b      	lsls	r3, r3, #12
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_GPIO_Init+0xcc>)
 800060c:	695a      	ldr	r2, [r3, #20]
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_GPIO_Init+0xcc>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	03c9      	lsls	r1, r1, #15
 8000614:	430a      	orrs	r2, r1
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_GPIO_Init+0xcc>)
 800061a:	695a      	ldr	r2, [r3, #20]
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	03db      	lsls	r3, r3, #15
 8000620:	4013      	ands	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_GPIO_Init+0xcc>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_GPIO_Init+0xcc>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0289      	lsls	r1, r1, #10
 8000630:	430a      	orrs	r2, r1
 8000632:	615a      	str	r2, [r3, #20]
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_GPIO_Init+0xcc>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	029b      	lsls	r3, r3, #10
 800063c:	4013      	ands	r3, r2
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000642:	2390      	movs	r3, #144	; 0x90
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2200      	movs	r2, #0
 8000648:	2120      	movs	r1, #32
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fa9a 	bl	8001b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	0192      	lsls	r2, r2, #6
 8000656:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2284      	movs	r2, #132	; 0x84
 800065c:	0392      	lsls	r2, r2, #14
 800065e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000666:	193b      	adds	r3, r7, r4
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_GPIO_Init+0xd0>)
 800066a:	0019      	movs	r1, r3
 800066c:	0010      	movs	r0, r2
 800066e:	f001 f911 	bl	8001894 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000672:	0021      	movs	r1, r4
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2220      	movs	r2, #32
 8000678:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2201      	movs	r2, #1
 800067e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068c:	187a      	adds	r2, r7, r1
 800068e:	2390      	movs	r3, #144	; 0x90
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f001 f8fd 	bl	8001894 <HAL_GPIO_Init>

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b009      	add	sp, #36	; 0x24
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000800 	.word	0x48000800

080006ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x44>)
 80006c0:	699a      	ldr	r2, [r3, #24]
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_MspInit+0x44>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_MspInit+0x44>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_MspInit+0x44>)
 80006d8:	69da      	ldr	r2, [r3, #28]
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_MspInit+0x44>)
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	0549      	lsls	r1, r1, #21
 80006e0:	430a      	orrs	r2, r1
 80006e2:	61da      	str	r2, [r3, #28]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_MspInit+0x44>)
 80006e6:	69da      	ldr	r2, [r3, #28]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	055b      	lsls	r3, r3, #21
 80006ec:	4013      	ands	r3, r2
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_CAN_MspInit>:
 * @brief CAN MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000708:	2414      	movs	r4, #20
 800070a:	193b      	adds	r3, r7, r4
 800070c:	0018      	movs	r0, r3
 800070e:	2314      	movs	r3, #20
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f002 fd1e 	bl	8003154 <memset>
	if (hcan->Instance == CAN) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <HAL_CAN_MspInit+0xa4>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d13b      	bne.n	800079a <HAL_CAN_MspInit+0x9a>
		/* USER CODE BEGIN CAN_MspInit 0 */

		/* USER CODE END CAN_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <HAL_CAN_MspInit+0xa8>)
 8000724:	69da      	ldr	r2, [r3, #28]
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <HAL_CAN_MspInit+0xa8>)
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0489      	lsls	r1, r1, #18
 800072c:	430a      	orrs	r2, r1
 800072e:	61da      	str	r2, [r3, #28]
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <HAL_CAN_MspInit+0xa8>)
 8000732:	69da      	ldr	r2, [r3, #28]
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	049b      	lsls	r3, r3, #18
 8000738:	4013      	ands	r3, r2
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <HAL_CAN_MspInit+0xa8>)
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_CAN_MspInit+0xa8>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	0289      	lsls	r1, r1, #10
 8000748:	430a      	orrs	r2, r1
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_CAN_MspInit+0xa8>)
 800074e:	695a      	ldr	r2, [r3, #20]
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	029b      	lsls	r3, r3, #10
 8000754:	4013      	ands	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
		/**CAN GPIO Configuration
		 PA11     ------> CAN_RX
		 PA12     ------> CAN_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	22c0      	movs	r2, #192	; 0xc0
 800075e:	0152      	lsls	r2, r2, #5
 8000760:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2202      	movs	r2, #2
 8000768:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2203      	movs	r2, #3
 8000774:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2204      	movs	r2, #4
 800077a:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	187a      	adds	r2, r7, r1
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f001 f885 	bl	8001894 <HAL_GPIO_Init>

		/* CAN interrupt Init */
		HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	201e      	movs	r0, #30
 8000790:	f001 f84e 	bl	8001830 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000794:	201e      	movs	r0, #30
 8000796:	f001 f860 	bl	800185a <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN_MspInit 1 */

		/* USER CODE END CAN_MspInit 1 */
	}

}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b00b      	add	sp, #44	; 0x2c
 80007a0:	bd90      	pop	{r4, r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40006400 	.word	0x40006400
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b08b      	sub	sp, #44	; 0x2c
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007b4:	2414      	movs	r4, #20
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	0018      	movs	r0, r3
 80007ba:	2314      	movs	r3, #20
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f002 fcc8 	bl	8003154 <memset>
	if (huart->Instance == USART2) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a1c      	ldr	r2, [pc, #112]	; (800083c <HAL_UART_MspInit+0x90>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d132      	bne.n	8000834 <HAL_UART_MspInit+0x88>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <HAL_UART_MspInit+0x94>)
 80007d0:	69da      	ldr	r2, [r3, #28]
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_UART_MspInit+0x94>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0289      	lsls	r1, r1, #10
 80007d8:	430a      	orrs	r2, r1
 80007da:	61da      	str	r2, [r3, #28]
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_UART_MspInit+0x94>)
 80007de:	69da      	ldr	r2, [r3, #28]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	029b      	lsls	r3, r3, #10
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_UART_MspInit+0x94>)
 80007ec:	695a      	ldr	r2, [r3, #20]
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_UART_MspInit+0x94>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0289      	lsls	r1, r1, #10
 80007f4:	430a      	orrs	r2, r1
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_UART_MspInit+0x94>)
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	029b      	lsls	r3, r3, #10
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8000806:	0021      	movs	r1, r4
 8000808:	187b      	adds	r3, r7, r1
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2202      	movs	r2, #2
 8000812:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2201      	movs	r2, #1
 8000824:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	187a      	adds	r2, r7, r1
 8000828:	2390      	movs	r3, #144	; 0x90
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f001 f830 	bl	8001894 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b00b      	add	sp, #44	; 0x2c
 800083a:	bd90      	pop	{r4, r7, pc}
 800083c:	40004400 	.word	0x40004400
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000868:	f000 f888 	bl	800097c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <CEC_CAN_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
 */
void CEC_CAN_IRQHandler(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CEC_CAN_IRQn 0 */

	/* USER CODE END CEC_CAN_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <CEC_CAN_IRQHandler+0x14>)
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fd18 	bl	80012b0 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CEC_CAN_IRQn 1 */

	/* USER CODE END CEC_CAN_IRQn 1 */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000050 	.word	0x20000050

0800088c <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	 before branch to main program. This call is made inside
	 the "startup_stm32f0xx.s" file.
	 User can setups the default system clock (System clock source, PLL Multiplier
	 and Divider factors, AHB/APBx prescalers and Flash settings).
	 */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490e      	ldr	r1, [pc, #56]	; (80008d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0b      	ldr	r4, [pc, #44]	; (80008e4 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008c2:	f7ff ffe3 	bl	800088c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008c6:	f002 fc21 	bl	800310c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fd55 	bl	8000378 <main>

080008ce <LoopForever>:

LoopForever:
    b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
  ldr   r0, =_estack
 80008d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008dc:	080031d4 	.word	0x080031d4
  ldr r2, =_sbss
 80008e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e4:	20000118 	.word	0x20000118

080008e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_COMP_IRQHandler>
	...

080008ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_Init+0x24>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_Init+0x24>)
 80008f6:	2110      	movs	r1, #16
 80008f8:	430a      	orrs	r2, r1
 80008fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f000 f809 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000902:	f7ff fed9 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	0018      	movs	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_InitTick+0x5c>)
 800091e:	681c      	ldr	r4, [r3, #0]
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_InitTick+0x60>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	0019      	movs	r1, r3
 8000926:	23fa      	movs	r3, #250	; 0xfa
 8000928:	0098      	lsls	r0, r3, #2
 800092a:	f7ff fbeb 	bl	8000104 <__udivsi3>
 800092e:	0003      	movs	r3, r0
 8000930:	0019      	movs	r1, r3
 8000932:	0020      	movs	r0, r4
 8000934:	f7ff fbe6 	bl	8000104 <__udivsi3>
 8000938:	0003      	movs	r3, r0
 800093a:	0018      	movs	r0, r3
 800093c:	f000 ff9d 	bl	800187a <HAL_SYSTICK_Config>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e00f      	b.n	8000968 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d80b      	bhi.n	8000966 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2301      	movs	r3, #1
 8000952:	425b      	negs	r3, r3
 8000954:	2200      	movs	r2, #0
 8000956:	0018      	movs	r0, r3
 8000958:	f000 ff6a 	bl	8001830 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_InitTick+0x64>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b003      	add	sp, #12
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000008 	.word	0x20000008
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x1c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	001a      	movs	r2, r3
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x20>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	18d2      	adds	r2, r2, r3
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_IncTick+0x20>)
 800098e:	601a      	str	r2, [r3, #0]
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20000008 	.word	0x20000008
 800099c:	20000114 	.word	0x20000114

080009a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <HAL_GetTick+0x10>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	20000114 	.word	0x20000114

080009b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff fff0 	bl	80009a0 <HAL_GetTick>
 80009c0:	0003      	movs	r3, r0
 80009c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3301      	adds	r3, #1
 80009cc:	d005      	beq.n	80009da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_Delay+0x44>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	001a      	movs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	189b      	adds	r3, r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	f7ff ffe0 	bl	80009a0 <HAL_GetTick>
 80009e0:	0002      	movs	r2, r0
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d8f7      	bhi.n	80009dc <HAL_Delay+0x28>
  {
  }
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b004      	add	sp, #16
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000008 	.word	0x20000008

080009fc <HAL_CAN_Init>:
 *         parameters in the CAN_InitStruct.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Check CAN handle */
	if (hcan == NULL) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_CAN_Init+0x12>
		return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e0f0      	b.n	8000bf0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
	if (hcan->State == HAL_CAN_STATE_RESET) {
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2220      	movs	r2, #32
 8000a12:	5c9b      	ldrb	r3, [r3, r2]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d103      	bne.n	8000a22 <HAL_CAN_Init+0x26>
		/* Init the low level hardware: CLOCK, NVIC */
		HAL_CAN_MspInit(hcan);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff fe6f 	bl	8000700 <HAL_CAN_MspInit>
	}
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

	/* Request initialisation */
	SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8000a32:	f7ff ffb5 	bl	80009a0 <HAL_GetTick>
 8000a36:	0003      	movs	r3, r0
 8000a38:	60fb      	str	r3, [r7, #12]

	/* Wait initialisation acknowledge */
	while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {
 8000a3a:	e013      	b.n	8000a64 <HAL_CAN_Init+0x68>
		if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 8000a3c:	f7ff ffb0 	bl	80009a0 <HAL_GetTick>
 8000a40:	0002      	movs	r2, r0
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	2b0a      	cmp	r3, #10
 8000a48:	d90c      	bls.n	8000a64 <HAL_CAN_Init+0x68>
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	0292      	lsls	r2, r2, #10
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24

			/* Change CAN state */
			hcan->State = HAL_CAN_STATE_ERROR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	5499      	strb	r1, [r3, r2]

			return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e0c5      	b.n	8000bf0 <HAL_CAN_Init+0x1f4>
	while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	d0e5      	beq.n	8000a3c <HAL_CAN_Init+0x40>
		}
	}

	/* Exit from sleep mode */
	CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	438a      	bics	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8000a80:	f7ff ff8e 	bl	80009a0 <HAL_GetTick>
 8000a84:	0003      	movs	r3, r0
 8000a86:	60fb      	str	r3, [r7, #12]

	/* Check Sleep mode leave acknowledge */
	while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {
 8000a88:	e013      	b.n	8000ab2 <HAL_CAN_Init+0xb6>
		if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 8000a8a:	f7ff ff89 	bl	80009a0 <HAL_GetTick>
 8000a8e:	0002      	movs	r2, r0
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b0a      	cmp	r3, #10
 8000a96:	d90c      	bls.n	8000ab2 <HAL_CAN_Init+0xb6>
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0292      	lsls	r2, r2, #10
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24

			/* Change CAN state */
			hcan->State = HAL_CAN_STATE_ERROR;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	2105      	movs	r1, #5
 8000aac:	5499      	strb	r1, [r3, r2]

			return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e09e      	b.n	8000bf0 <HAL_CAN_Init+0x1f4>
	while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2202      	movs	r2, #2
 8000aba:	4013      	ands	r3, r2
 8000abc:	d1e5      	bne.n	8000a8a <HAL_CAN_Init+0x8e>
		}
	}

	/* Set the time triggered communication mode */
	if (hcan->Init.TimeTriggeredMode == ENABLE) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7e1b      	ldrb	r3, [r3, #24]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d108      	bne.n	8000ad8 <HAL_CAN_Init+0xdc>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_CAN_Init+0xec>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	438a      	bics	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic bus-off management */
	if (hcan->Init.AutoBusOff == ENABLE) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7e5b      	ldrb	r3, [r3, #25]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d108      	bne.n	8000b02 <HAL_CAN_Init+0x106>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2140      	movs	r1, #64	; 0x40
 8000afc:	430a      	orrs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	e007      	b.n	8000b12 <HAL_CAN_Init+0x116>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	438a      	bics	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic wake-up mode */
	if (hcan->Init.AutoWakeUp == ENABLE) {
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7e9b      	ldrb	r3, [r3, #26]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d108      	bne.n	8000b2c <HAL_CAN_Init+0x130>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2120      	movs	r1, #32
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e007      	b.n	8000b3c <HAL_CAN_Init+0x140>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2120      	movs	r1, #32
 8000b38:	438a      	bics	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
	}

	/* Set the automatic retransmission */
	if (hcan->Init.AutoRetransmission == ENABLE) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7edb      	ldrb	r3, [r3, #27]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d108      	bne.n	8000b56 <HAL_CAN_Init+0x15a>
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2110      	movs	r1, #16
 8000b50:	438a      	bics	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_CAN_Init+0x16a>
	} else {
		SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2110      	movs	r1, #16
 8000b62:	430a      	orrs	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
	}

	/* Set the receive FIFO locked mode */
	if (hcan->Init.ReceiveFifoLocked == ENABLE) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7f1b      	ldrb	r3, [r3, #28]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d108      	bne.n	8000b80 <HAL_CAN_Init+0x184>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2108      	movs	r1, #8
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e007      	b.n	8000b90 <HAL_CAN_Init+0x194>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	438a      	bics	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]
	}

	/* Set the transmit FIFO priority */
	if (hcan->Init.TransmitFifoPriority == ENABLE) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7f5b      	ldrb	r3, [r3, #29]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d108      	bne.n	8000baa <HAL_CAN_Init+0x1ae>
		SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	e007      	b.n	8000bba <HAL_CAN_Init+0x1be>
	} else {
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	438a      	bics	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]
	}

	/* Set the bit timing register */
	WRITE_REG(hcan->Instance->BTR,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	0011      	movs	r1, r2
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	1e5a      	subs	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	61da      	str	r2, [r3, #28]
			(uint32_t )(hcan->Init.Mode | hcan->Init.SyncJumpWidth
					| hcan->Init.TimeSeg1 | hcan->Init.TimeSeg2
					| (hcan->Init.Prescaler - 1U)));

	/* Initialize the error code */
	hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24

	/* Initialize the CAN state */
	hcan->State = HAL_CAN_STATE_READY;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2220      	movs	r2, #32
 8000bea:	2101      	movs	r1, #1
 8000bec:	5499      	strb	r1, [r3, r2]

	/* Return function status */
	return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_CAN_ConfigFilter>:
 * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 *         contains the filter configuration information.
 * @retval None
 */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan,
		CAN_FilterTypeDef *sFilterConfig) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	uint32_t filternbrbitpos;
	CAN_TypeDef *can_ip = hcan->Instance;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	617b      	str	r3, [r7, #20]
	HAL_CAN_StateTypeDef state = hcan->State;
 8000c08:	2013      	movs	r0, #19
 8000c0a:	183b      	adds	r3, r7, r0
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	2120      	movs	r1, #32
 8000c10:	5c52      	ldrb	r2, [r2, r1]
 8000c12:	701a      	strb	r2, [r3, #0]

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 8000c14:	0002      	movs	r2, r0
 8000c16:	18bb      	adds	r3, r7, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d004      	beq.n	8000c28 <HAL_CAN_ConfigFilter+0x30>
 8000c1e:	18bb      	adds	r3, r7, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d000      	beq.n	8000c28 <HAL_CAN_ConfigFilter+0x30>
 8000c26:	e0cd      	b.n	8000dc4 <HAL_CAN_ConfigFilter+0x1cc>

		/* Check the parameters */
		assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

		/* Initialisation mode for the filter */
		SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	58d3      	ldr	r3, [r2, r3]
 8000c30:	2201      	movs	r2, #1
 8000c32:	431a      	orrs	r2, r3
 8000c34:	0011      	movs	r1, r2
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	50d1      	str	r1, [r2, r3]

		/* Convert filter number into bit position */
		filternbrbitpos = (uint32_t) 1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	221f      	movs	r2, #31
 8000c44:	4013      	ands	r3, r2
 8000c46:	2201      	movs	r2, #1
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]

		/* Filter Deactivation */
		CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	2387      	movs	r3, #135	; 0x87
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	58d3      	ldr	r3, [r2, r3]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	43d2      	mvns	r2, r2
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	2387      	movs	r3, #135	; 0x87
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	50d1      	str	r1, [r2, r3]

		/* Filter Scale */
		if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT) {
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d129      	bne.n	8000cc2 <HAL_CAN_ConfigFilter+0xca>
			/* 16-bit scale for the filter */
			CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	2383      	movs	r3, #131	; 0x83
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	58d3      	ldr	r3, [r2, r3]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	2383      	movs	r3, #131	; 0x83
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	50d1      	str	r1, [r2, r3]

			/* First 16-bit identifier and First 16-bit mask */
			/* Or First 16-bit identifier and Second 16-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdLow)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68db      	ldr	r3, [r3, #12]
							<< 16U)
 8000c8a:	0418      	lsls	r0, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdLow);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	0c19      	lsrs	r1, r3, #16
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	695a      	ldr	r2, [r3, #20]
							| (0x0000FFFFU
 8000c98:	4301      	orrs	r1, r0
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3248      	adds	r2, #72	; 0x48
 8000c9e:	00d2      	lsls	r2, r2, #3
 8000ca0:	50d1      	str	r1, [r2, r3]

			/* Second 16-bit identifier and Second 16-bit mask */
			/* Or Third 16-bit identifier and Fourth 16-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdHigh)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689b      	ldr	r3, [r3, #8]
							<< 16U)
 8000ca6:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdHigh);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	041b      	lsls	r3, r3, #16
 8000cae:	0c1a      	lsrs	r2, r3, #16
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	695b      	ldr	r3, [r3, #20]
							| (0x0000FFFFU
 8000cb4:	430a      	orrs	r2, r1
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb6:	6979      	ldr	r1, [r7, #20]
 8000cb8:	3348      	adds	r3, #72	; 0x48
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	18cb      	adds	r3, r1, r3
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	601a      	str	r2, [r3, #0]
		}

		if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT) {
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d128      	bne.n	8000d1c <HAL_CAN_ConfigFilter+0x124>
			/* 32-bit scale for the filter */
			SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	2383      	movs	r3, #131	; 0x83
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	58d2      	ldr	r2, [r2, r3]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	2383      	movs	r3, #131	; 0x83
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	50d1      	str	r1, [r2, r3]

			/* 32-bit identifier or First 32-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterIdHigh)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
							<< 16U)
 8000ce4:	0418      	lsls	r0, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterIdLow);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	041b      	lsls	r3, r3, #16
 8000cec:	0c19      	lsrs	r1, r3, #16
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	695a      	ldr	r2, [r3, #20]
							| (0x0000FFFFU
 8000cf2:	4301      	orrs	r1, r0
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3248      	adds	r2, #72	; 0x48
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	50d1      	str	r1, [r2, r3]

			/* 32-bit mask or Second 32-bit identifier */
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
					((0x0000FFFFU & (uint32_t) sFilterConfig->FilterMaskIdHigh)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
							<< 16U)
 8000d00:	0419      	lsls	r1, r3, #16
							| (0x0000FFFFU
									& (uint32_t) sFilterConfig->FilterMaskIdLow);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	0c1a      	lsrs	r2, r3, #16
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	695b      	ldr	r3, [r3, #20]
							| (0x0000FFFFU
 8000d0e:	430a      	orrs	r2, r1
			can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d10:	6979      	ldr	r1, [r7, #20]
 8000d12:	3348      	adds	r3, #72	; 0x48
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	18cb      	adds	r3, r1, r3
 8000d18:	3304      	adds	r3, #4
 8000d1a:	601a      	str	r2, [r3, #0]
		}

		/* Filter Mode */
		if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK) {
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10c      	bne.n	8000d3e <HAL_CAN_ConfigFilter+0x146>
			/* Id/Mask mode for the filter*/
			CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	2381      	movs	r3, #129	; 0x81
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	58d3      	ldr	r3, [r2, r3]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	43d2      	mvns	r2, r2
 8000d30:	401a      	ands	r2, r3
 8000d32:	0011      	movs	r1, r2
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	2381      	movs	r3, #129	; 0x81
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	50d1      	str	r1, [r2, r3]
 8000d3c:	e00a      	b.n	8000d54 <HAL_CAN_ConfigFilter+0x15c>
		} else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
		{
			/* Identifier list mode for the filter*/
			SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	2381      	movs	r3, #129	; 0x81
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	58d2      	ldr	r2, [r2, r3]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	2381      	movs	r3, #129	; 0x81
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	50d1      	str	r1, [r2, r3]
		}

		/* Filter FIFO assignment */
		if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0) {
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10c      	bne.n	8000d76 <HAL_CAN_ConfigFilter+0x17e>
			/* FIFO 0 assignation for the filter */
			CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	2385      	movs	r3, #133	; 0x85
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	58d3      	ldr	r3, [r2, r3]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	43d2      	mvns	r2, r2
 8000d68:	401a      	ands	r2, r3
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	2385      	movs	r3, #133	; 0x85
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	50d1      	str	r1, [r2, r3]
 8000d74:	e00a      	b.n	8000d8c <HAL_CAN_ConfigFilter+0x194>
		} else {
			/* FIFO 1 assignation for the filter */
			SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	2385      	movs	r3, #133	; 0x85
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	58d2      	ldr	r2, [r2, r3]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	0011      	movs	r1, r2
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	2385      	movs	r3, #133	; 0x85
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	50d1      	str	r1, [r2, r3]
		}

		/* Filter activation */
		if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE) {
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6a1b      	ldr	r3, [r3, #32]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10a      	bne.n	8000daa <HAL_CAN_ConfigFilter+0x1b2>
			SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	2387      	movs	r3, #135	; 0x87
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	58d2      	ldr	r2, [r2, r3]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	0011      	movs	r1, r2
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	2387      	movs	r3, #135	; 0x87
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	50d1      	str	r1, [r2, r3]
		}

		/* Leave the initialisation mode for the filter */
		CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	58d3      	ldr	r3, [r2, r3]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4393      	bics	r3, r2
 8000db6:	0019      	movs	r1, r3
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	50d1      	str	r1, [r2, r3]

		/* Return function status */
		return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e007      	b.n	8000dd4 <HAL_CAN_ConfigFilter+0x1dc>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	02d2      	lsls	r2, r2, #11
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
	}
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b006      	add	sp, #24
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_CAN_Start>:
 * @brief  Start the CAN module.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	if (hcan->State == HAL_CAN_STATE_READY) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2220      	movs	r2, #32
 8000de8:	5c9b      	ldrb	r3, [r3, r2]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d12f      	bne.n	8000e50 <HAL_CAN_Start+0x74>
		/* Change CAN peripheral state */
		hcan->State = HAL_CAN_STATE_LISTENING;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2220      	movs	r2, #32
 8000df4:	2102      	movs	r1, #2
 8000df6:	5499      	strb	r1, [r3, r2]

		/* Request leave initialisation */
		CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2101      	movs	r1, #1
 8000e04:	438a      	bics	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8000e08:	f7ff fdca 	bl	80009a0 <HAL_GetTick>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	60fb      	str	r3, [r7, #12]

		/* Wait the acknowledge */
		while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U) {
 8000e10:	e013      	b.n	8000e3a <HAL_CAN_Start+0x5e>
			/* Check for the Timeout */
			if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE) {
 8000e12:	f7ff fdc5 	bl	80009a0 <HAL_GetTick>
 8000e16:	0002      	movs	r2, r0
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b0a      	cmp	r3, #10
 8000e1e:	d90c      	bls.n	8000e3a <HAL_CAN_Start+0x5e>
				/* Update error code */
				hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	0292      	lsls	r2, r2, #10
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24

				/* Change CAN state */
				hcan->State = HAL_CAN_STATE_ERROR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2220      	movs	r2, #32
 8000e32:	2105      	movs	r1, #5
 8000e34:	5499      	strb	r1, [r3, r2]

				return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e012      	b.n	8000e60 <HAL_CAN_Start+0x84>
		while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U) {
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4013      	ands	r3, r2
 8000e44:	d1e5      	bne.n	8000e12 <HAL_CAN_Start+0x36>
			}
		}

		/* Reset the CAN ErrorCode */
		hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24

		/* Return function status */
		return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e007      	b.n	8000e60 <HAL_CAN_Start+0x84>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	0312      	lsls	r2, r2, #12
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
	}
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b004      	add	sp, #16
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_CAN_AddTxMessage>:
 *         the TxMailbox used to store the Tx message.
 *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan,
		CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
	uint32_t transmitmailbox;
	HAL_CAN_StateTypeDef state = hcan->State;
 8000e76:	201f      	movs	r0, #31
 8000e78:	183b      	adds	r3, r7, r0
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	5c52      	ldrb	r2, [r2, r1]
 8000e80:	701a      	strb	r2, [r3, #0]
	uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	61bb      	str	r3, [r7, #24]
	} else {
		assert_param(IS_CAN_EXTID(pHeader->ExtId));
	}
	assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 8000e8a:	183b      	adds	r3, r7, r0
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d004      	beq.n	8000e9c <HAL_CAN_AddTxMessage+0x34>
 8000e92:	183b      	adds	r3, r7, r0
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d000      	beq.n	8000e9c <HAL_CAN_AddTxMessage+0x34>
 8000e9a:	e0b7      	b.n	800100c <HAL_CAN_AddTxMessage+0x1a4>
		/* Check that all the Tx mailboxes are not full */
		if (((tsr & CAN_TSR_TME0) != 0U) || ((tsr & CAN_TSR_TME1) != 0U)
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	04db      	lsls	r3, r3, #19
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d10a      	bne.n	8000ebc <HAL_CAN_AddTxMessage+0x54>
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	051b      	lsls	r3, r3, #20
 8000eac:	4013      	ands	r3, r2
 8000eae:	d105      	bne.n	8000ebc <HAL_CAN_AddTxMessage+0x54>
				|| ((tsr & CAN_TSR_TME2) != 0U)) {
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	055b      	lsls	r3, r3, #21
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d100      	bne.n	8000ebc <HAL_CAN_AddTxMessage+0x54>
 8000eba:	e09e      	b.n	8000ffa <HAL_CAN_AddTxMessage+0x192>
			/* Select an empty transmit mailbox */
			transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	0e1b      	lsrs	r3, r3, #24
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]

			/* Check transmit mailbox value */
			if (transmitmailbox > 2U) {
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d908      	bls.n	8000ede <HAL_CAN_AddTxMessage+0x76>
				/* Update error code */
				hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	0412      	lsls	r2, r2, #16
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24

				return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e09e      	b.n	800101c <HAL_CAN_AddTxMessage+0x1b4>
			}

			/* Store the Tx mailbox */
			*pTxMailbox = (uint32_t) 1 << transmitmailbox;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	601a      	str	r2, [r3, #0]

			/* Set up the Id */
			if (pHeader->IDE == CAN_ID_STD) {
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10c      	bne.n	8000f0a <HAL_CAN_AddTxMessage+0xa2>
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
						((pHeader->StdId << CAN_TI0R_STID_Pos) | pHeader->RTR);
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	0559      	lsls	r1, r3, #21
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	68da      	ldr	r2, [r3, #12]
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
						((pHeader->StdId << CAN_TI0R_STID_Pos) | pHeader->RTR);
 8000efe:	4311      	orrs	r1, r2
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	3218      	adds	r2, #24
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	50d1      	str	r1, [r2, r3]
 8000f08:	e00f      	b.n	8000f2a <HAL_CAN_AddTxMessage+0xc2>
			} else {
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
						((pHeader->ExtId << CAN_TI0R_EXID_Pos) | pHeader->IDE
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	00da      	lsls	r2, r3, #3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	0011      	movs	r1, r2
								| pHeader->RTR);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	68da      	ldr	r2, [r3, #12]
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
								| pHeader->RTR);
 8000f20:	4311      	orrs	r1, r2
				hcan->Instance->sTxMailBox[transmitmailbox].TIR =
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	3218      	adds	r2, #24
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	50d1      	str	r1, [r2, r3]
			}

			/* Set up the DLC */
			hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3318      	adds	r3, #24
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	18cb      	adds	r3, r1, r3
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	601a      	str	r2, [r3, #0]

			/* Set up the Transmit Global Time mode */
			if (pHeader->TransmitGlobalTime == ENABLE) {
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	7d1b      	ldrb	r3, [r3, #20]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d112      	bne.n	8000f6c <HAL_CAN_AddTxMessage+0x104>
				SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR,
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3318      	adds	r3, #24
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	18d3      	adds	r3, r2, r3
 8000f52:	3304      	adds	r3, #4
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3318      	adds	r3, #24
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	18cb      	adds	r3, r1, r3
 8000f68:	3304      	adds	r3, #4
 8000f6a:	601a      	str	r2, [r3, #0]
						CAN_TDT0R_TGT);
			}

			/* Set up the data field */
			WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3307      	adds	r3, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	061a      	lsls	r2, r3, #24
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3306      	adds	r3, #6
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3305      	adds	r3, #5
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0019      	movs	r1, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	6979      	ldr	r1, [r7, #20]
 8000f98:	23c6      	movs	r3, #198	; 0xc6
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	0109      	lsls	r1, r1, #4
 8000f9e:	1841      	adds	r1, r0, r1
 8000fa0:	18cb      	adds	r3, r1, r3
 8000fa2:	601a      	str	r2, [r3, #0]
					((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) | ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) | ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) | ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
			WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3303      	adds	r3, #3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	061a      	lsls	r2, r3, #24
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3302      	adds	r3, #2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	6979      	ldr	r1, [r7, #20]
 8000fce:	23c4      	movs	r3, #196	; 0xc4
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	0109      	lsls	r1, r1, #4
 8000fd4:	1841      	adds	r1, r0, r1
 8000fd6:	18cb      	adds	r3, r1, r3
 8000fd8:	601a      	str	r2, [r3, #0]
					((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) | ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) | ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) | ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

			/* Request transmission */
			SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR,
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	3218      	adds	r2, #24
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	58d2      	ldr	r2, [r2, r3]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2101      	movs	r1, #1
 8000fec:	4311      	orrs	r1, r2
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	3218      	adds	r2, #24
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	50d1      	str	r1, [r2, r3]
					CAN_TI0R_TXRQ);

			/* Return function status */
			return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e010      	b.n	800101c <HAL_CAN_AddTxMessage+0x1b4>
		} else {
			/* Update error code */
			hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	0392      	lsls	r2, r2, #14
 8001002:	431a      	orrs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	625a      	str	r2, [r3, #36]	; 0x24

			return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e007      	b.n	800101c <HAL_CAN_AddTxMessage+0x1b4>
		}
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	02d2      	lsls	r2, r2, #11
 8001014:	431a      	orrs	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
	}
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b008      	add	sp, #32
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_CAN_GetRxMessage>:
 *         of the Rx frame will be stored.
 * @param  aData array where the payload of the Rx frame will be stored.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
		CAN_RxHeaderTypeDef *pHeader, uint8_t aData[]) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
	HAL_CAN_StateTypeDef state = hcan->State;
 8001032:	2017      	movs	r0, #23
 8001034:	183b      	adds	r3, r7, r0
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	2120      	movs	r1, #32
 800103a:	5c52      	ldrb	r2, [r2, r1]
 800103c:	701a      	strb	r2, [r3, #0]

	assert_param(IS_CAN_RX_FIFO(RxFifo));

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 800103e:	0002      	movs	r2, r0
 8001040:	18bb      	adds	r3, r7, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d004      	beq.n	8001052 <HAL_CAN_GetRxMessage+0x2e>
 8001048:	18bb      	adds	r3, r7, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d000      	beq.n	8001052 <HAL_CAN_GetRxMessage+0x2e>
 8001050:	e0f8      	b.n	8001244 <HAL_CAN_GetRxMessage+0x220>
		/* Check the Rx FIFO */
		if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10e      	bne.n	8001076 <HAL_CAN_GetRxMessage+0x52>
		{
			/* Check that the Rx FIFO 0 is not empty */
			if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U) {
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2203      	movs	r2, #3
 8001060:	4013      	ands	r3, r2
 8001062:	d117      	bne.n	8001094 <HAL_CAN_GetRxMessage+0x70>
				/* Update error code */
				hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	0392      	lsls	r2, r2, #14
 800106c:	431a      	orrs	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

				return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e0ee      	b.n	8001254 <HAL_CAN_GetRxMessage+0x230>
			}
		} else /* Rx element is assigned to Rx FIFO 1 */
		{
			/* Check that the Rx FIFO 1 is not empty */
			if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U) {
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2203      	movs	r2, #3
 800107e:	4013      	ands	r3, r2
 8001080:	d108      	bne.n	8001094 <HAL_CAN_GetRxMessage+0x70>
				/* Update error code */
				hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	0392      	lsls	r2, r2, #14
 800108a:	431a      	orrs	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	625a      	str	r2, [r3, #36]	; 0x24

				return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0df      	b.n	8001254 <HAL_CAN_GetRxMessage+0x230>
			}
		}

		/* Get the header */
		pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	321b      	adds	r2, #27
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	58d3      	ldr	r3, [r2, r3]
 80010a0:	2204      	movs	r2, #4
 80010a2:	401a      	ands	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
		if (pHeader->IDE == CAN_ID_STD) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10b      	bne.n	80010c8 <HAL_CAN_GetRxMessage+0xa4>
			pHeader->StdId = (CAN_RI0R_STID
					& hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	321b      	adds	r2, #27
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	58d3      	ldr	r3, [r2, r3]
					>> CAN_TI0R_STID_Pos;
 80010bc:	0d5b      	lsrs	r3, r3, #21
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	0d5a      	lsrs	r2, r3, #21
			pHeader->StdId = (CAN_RI0R_STID
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e00a      	b.n	80010de <HAL_CAN_GetRxMessage+0xba>
		} else {
			pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID)
					& hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	321b      	adds	r2, #27
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	58d3      	ldr	r3, [r2, r3]
					>> CAN_RI0R_EXID_Pos;
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	08da      	lsrs	r2, r3, #3
			pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	605a      	str	r2, [r3, #4]
		}
		pHeader->RTR =
				(CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	321b      	adds	r2, #27
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	58d3      	ldr	r3, [r2, r3]
 80010ea:	2202      	movs	r2, #2
 80010ec:	401a      	ands	r2, r3
		pHeader->RTR =
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60da      	str	r2, [r3, #12]
		pHeader->DLC = (CAN_RDT0R_DLC
				& hcan->Instance->sFIFOMailBox[RxFifo].RDTR)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	331b      	adds	r3, #27
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	3304      	adds	r3, #4
 8001100:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDT0R_DLC_Pos;
 8001102:	220f      	movs	r2, #15
 8001104:	401a      	ands	r2, r3
		pHeader->DLC = (CAN_RDT0R_DLC
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	611a      	str	r2, [r3, #16]
		pHeader->FilterMatchIndex = (CAN_RDT0R_FMI
				& hcan->Instance->sFIFOMailBox[RxFifo].RDTR)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	331b      	adds	r3, #27
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	18d3      	adds	r3, r2, r3
 8001116:	3304      	adds	r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDT0R_FMI_Pos;
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	22ff      	movs	r2, #255	; 0xff
 800111e:	401a      	ands	r2, r3
		pHeader->FilterMatchIndex = (CAN_RDT0R_FMI
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
		pHeader->Timestamp = (CAN_RDT0R_TIME
				& hcan->Instance->sFIFOMailBox[RxFifo].RDTR)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	331b      	adds	r3, #27
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	18d3      	adds	r3, r2, r3
 8001130:	3304      	adds	r3, #4
 8001132:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDT0R_TIME_Pos;
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	0c1a      	lsrs	r2, r3, #16
		pHeader->Timestamp = (CAN_RDT0R_TIME
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	615a      	str	r2, [r3, #20]

		/* Get the data */
		aData[0] = (uint8_t) ((CAN_RDL0R_DATA0
				& hcan->Instance->sFIFOMailBox[RxFifo].RDLR)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	23dc      	movs	r3, #220	; 0xdc
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	188a      	adds	r2, r1, r2
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	681b      	ldr	r3, [r3, #0]
		aData[0] = (uint8_t) ((CAN_RDL0R_DATA0
 8001150:	b2da      	uxtb	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	701a      	strb	r2, [r3, #0]
				>> CAN_RDL0R_DATA0_Pos);
		aData[1] = (uint8_t) ((CAN_RDL0R_DATA1
				& hcan->Instance->sFIFOMailBox[RxFifo].RDLR)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	23dc      	movs	r3, #220	; 0xdc
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	188a      	adds	r2, r1, r2
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDL0R_DATA1_Pos);
 8001168:	0a1a      	lsrs	r2, r3, #8
		aData[1] = (uint8_t) ((CAN_RDL0R_DATA1
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	701a      	strb	r2, [r3, #0]
		aData[2] = (uint8_t) ((CAN_RDL0R_DATA2
				& hcan->Instance->sFIFOMailBox[RxFifo].RDLR)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	23dc      	movs	r3, #220	; 0xdc
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	188a      	adds	r2, r1, r2
 8001180:	18d3      	adds	r3, r2, r3
 8001182:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDL0R_DATA2_Pos);
 8001184:	0c1a      	lsrs	r2, r3, #16
		aData[2] = (uint8_t) ((CAN_RDL0R_DATA2
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3302      	adds	r3, #2
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]
		aData[3] = (uint8_t) ((CAN_RDL0R_DATA3
				& hcan->Instance->sFIFOMailBox[RxFifo].RDLR)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6819      	ldr	r1, [r3, #0]
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	23dc      	movs	r3, #220	; 0xdc
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	188a      	adds	r2, r1, r2
 800119c:	18d3      	adds	r3, r2, r3
 800119e:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDL0R_DATA3_Pos);
 80011a0:	0e1a      	lsrs	r2, r3, #24
		aData[3] = (uint8_t) ((CAN_RDL0R_DATA3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3303      	adds	r3, #3
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
		aData[4] = (uint8_t) ((CAN_RDH0R_DATA4
				& hcan->Instance->sFIFOMailBox[RxFifo].RDHR)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6819      	ldr	r1, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	23de      	movs	r3, #222	; 0xde
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	188a      	adds	r2, r1, r2
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	681a      	ldr	r2, [r3, #0]
		aData[4] = (uint8_t) ((CAN_RDH0R_DATA4
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3304      	adds	r3, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	701a      	strb	r2, [r3, #0]
				>> CAN_RDH0R_DATA4_Pos);
		aData[5] = (uint8_t) ((CAN_RDH0R_DATA5
				& hcan->Instance->sFIFOMailBox[RxFifo].RDHR)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6819      	ldr	r1, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	23de      	movs	r3, #222	; 0xde
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	188a      	adds	r2, r1, r2
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDH0R_DATA5_Pos);
 80011d6:	0a1a      	lsrs	r2, r3, #8
		aData[5] = (uint8_t) ((CAN_RDH0R_DATA5
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3305      	adds	r3, #5
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	701a      	strb	r2, [r3, #0]
		aData[6] = (uint8_t) ((CAN_RDH0R_DATA6
				& hcan->Instance->sFIFOMailBox[RxFifo].RDHR)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	23de      	movs	r3, #222	; 0xde
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	188a      	adds	r2, r1, r2
 80011ee:	18d3      	adds	r3, r2, r3
 80011f0:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDH0R_DATA6_Pos);
 80011f2:	0c1a      	lsrs	r2, r3, #16
		aData[6] = (uint8_t) ((CAN_RDH0R_DATA6
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	3306      	adds	r3, #6
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	701a      	strb	r2, [r3, #0]
		aData[7] = (uint8_t) ((CAN_RDH0R_DATA7
				& hcan->Instance->sFIFOMailBox[RxFifo].RDHR)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	23de      	movs	r3, #222	; 0xde
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	188a      	adds	r2, r1, r2
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	681b      	ldr	r3, [r3, #0]
				>> CAN_RDH0R_DATA7_Pos);
 800120e:	0e1a      	lsrs	r2, r3, #24
		aData[7] = (uint8_t) ((CAN_RDH0R_DATA7
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3307      	adds	r3, #7
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]

		/* Release the FIFO */
		if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d108      	bne.n	8001230 <HAL_CAN_GetRxMessage+0x20c>
		{
			/* Release RX FIFO 0 */
			SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2120      	movs	r1, #32
 800122a:	430a      	orrs	r2, r1
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	e007      	b.n	8001240 <HAL_CAN_GetRxMessage+0x21c>
		} else /* Rx element is assigned to Rx FIFO 1 */
		{
			/* Release RX FIFO 1 */
			SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2120      	movs	r1, #32
 800123c:	430a      	orrs	r2, r1
 800123e:	611a      	str	r2, [r3, #16]
		}

		/* Return function status */
		return HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	e007      	b.n	8001254 <HAL_CAN_GetRxMessage+0x230>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	02d2      	lsls	r2, r2, #11
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
	}
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b006      	add	sp, #24
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_CAN_ActivateNotification>:
 * @param  ActiveITs indicates which interrupts will be enabled.
 *         This parameter can be any combination of @arg CAN_Interrupts.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan,
		uint32_t ActiveITs) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	HAL_CAN_StateTypeDef state = hcan->State;
 8001266:	200f      	movs	r0, #15
 8001268:	183b      	adds	r3, r7, r0
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	2120      	movs	r1, #32
 800126e:	5c52      	ldrb	r2, [r2, r1]
 8001270:	701a      	strb	r2, [r3, #0]

	/* Check function parameters */
	assert_param(IS_CAN_IT(ActiveITs));

	if ((state == HAL_CAN_STATE_READY) || (state == HAL_CAN_STATE_LISTENING)) {
 8001272:	0002      	movs	r2, r0
 8001274:	18bb      	adds	r3, r7, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d003      	beq.n	8001284 <HAL_CAN_ActivateNotification+0x28>
 800127c:	18bb      	adds	r3, r7, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d109      	bne.n	8001298 <HAL_CAN_ActivateNotification+0x3c>
		/* Enable the selected interrupts */
		__HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6959      	ldr	r1, [r3, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	615a      	str	r2, [r3, #20]

		/* Return function status */
		return HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	e007      	b.n	80012a8 <HAL_CAN_ActivateNotification+0x4c>
	} else {
		/* Update error code */
		hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	02d2      	lsls	r2, r2, #11
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

		return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
	}
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b004      	add	sp, #16
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_CAN_IRQHandler>:
 * @brief  Handles CAN interrupt request
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	623b      	str	r3, [r7, #32]
	uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61fb      	str	r3, [r7, #28]
	uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
	uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	617b      	str	r3, [r7, #20]
	uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	613b      	str	r3, [r7, #16]
	uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	60fb      	str	r3, [r7, #12]

	/* Transmit Mailbox empty interrupt management *****************************/
	if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U) {
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	2201      	movs	r2, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d100      	bne.n	80012f6 <HAL_CAN_IRQHandler+0x46>
 80012f4:	e084      	b.n	8001400 <HAL_CAN_IRQHandler+0x150>
		/* Transmit Mailbox 0 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP0) != 0U) {
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2201      	movs	r2, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	d024      	beq.n	8001348 <HAL_CAN_IRQHandler+0x98>
			/* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2201      	movs	r2, #1
 8001304:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK0) != 0U) {
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2202      	movs	r2, #2
 800130a:	4013      	ands	r3, r2
 800130c:	d004      	beq.n	8001318 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	f000 f981 	bl	8001618 <HAL_CAN_TxMailbox0CompleteCallback>
 8001316:	e017      	b.n	8001348 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST0) != 0U) {
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2204      	movs	r2, #4
 800131c:	4013      	ands	r3, r2
 800131e:	d005      	beq.n	800132c <HAL_CAN_IRQHandler+0x7c>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	4313      	orrs	r3, r2
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
 800132a:	e00d      	b.n	8001348 <HAL_CAN_IRQHandler+0x98>
				} else if ((tsrflags & CAN_TSR_TERR0) != 0U) {
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2208      	movs	r2, #8
 8001330:	4013      	ands	r3, r2
 8001332:	d005      	beq.n	8001340 <HAL_CAN_IRQHandler+0x90>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	0152      	lsls	r2, r2, #5
 800133a:	4313      	orrs	r3, r2
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	e003      	b.n	8001348 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f980 	bl	8001648 <HAL_CAN_TxMailbox0AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 1 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP1) != 0U) {
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4013      	ands	r3, r2
 8001350:	d028      	beq.n	80013a4 <HAL_CAN_IRQHandler+0xf4>
			/* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0052      	lsls	r2, r2, #1
 800135a:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK1) != 0U) {
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4013      	ands	r3, r2
 8001364:	d004      	beq.n	8001370 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0018      	movs	r0, r3
 800136a:	f000 f95d 	bl	8001628 <HAL_CAN_TxMailbox1CompleteCallback>
 800136e:	e019      	b.n	80013a4 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST1) != 0U) {
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4013      	ands	r3, r2
 8001378:	d005      	beq.n	8001386 <HAL_CAN_IRQHandler+0xd6>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	0192      	lsls	r2, r2, #6
 8001380:	4313      	orrs	r3, r2
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
 8001384:	e00e      	b.n	80013a4 <HAL_CAN_IRQHandler+0xf4>
				} else if ((tsrflags & CAN_TSR_TERR1) != 0U) {
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4013      	ands	r3, r2
 800138e:	d005      	beq.n	800139c <HAL_CAN_IRQHandler+0xec>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	01d2      	lsls	r2, r2, #7
 8001396:	4313      	orrs	r3, r2
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	e003      	b.n	80013a4 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox1AbortCallback(hcan);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f95a 	bl	8001658 <HAL_CAN_TxMailbox1AbortCallback>
				}
			}
		}

		/* Transmit Mailbox 2 management *****************************************/
		if ((tsrflags & CAN_TSR_RQCP2) != 0U) {
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	025b      	lsls	r3, r3, #9
 80013aa:	4013      	ands	r3, r2
 80013ac:	d028      	beq.n	8001400 <HAL_CAN_IRQHandler+0x150>
			/* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	0252      	lsls	r2, r2, #9
 80013b6:	609a      	str	r2, [r3, #8]

			if ((tsrflags & CAN_TSR_TXOK2) != 0U) {
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d004      	beq.n	80013cc <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
				/* Call weak (surcharged) callback */
				HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f000 f937 	bl	8001638 <HAL_CAN_TxMailbox2CompleteCallback>
 80013ca:	e019      	b.n	8001400 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
			} else {
				if ((tsrflags & CAN_TSR_ALST2) != 0U) {
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	02db      	lsls	r3, r3, #11
 80013d2:	4013      	ands	r3, r2
 80013d4:	d005      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x132>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	0212      	lsls	r2, r2, #8
 80013dc:	4313      	orrs	r3, r2
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
 80013e0:	e00e      	b.n	8001400 <HAL_CAN_IRQHandler+0x150>
				} else if ((tsrflags & CAN_TSR_TERR2) != 0U) {
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	031b      	lsls	r3, r3, #12
 80013e8:	4013      	ands	r3, r2
 80013ea:	d005      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x148>
					/* Update error code */
					errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	0252      	lsls	r2, r2, #9
 80013f2:	4313      	orrs	r3, r2
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	e003      	b.n	8001400 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
					/* Call weak (surcharged) callback */
					HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 f934 	bl	8001668 <HAL_CAN_TxMailbox2AbortCallback>
			}
		}
	}

	/* Receive FIFO 0 overrun interrupt management *****************************/
	if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U) {
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	2208      	movs	r2, #8
 8001404:	4013      	ands	r3, r2
 8001406:	d00c      	beq.n	8001422 <HAL_CAN_IRQHandler+0x172>
		if ((rf0rflags & CAN_RF0R_FOVR0) != 0U) {
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2210      	movs	r2, #16
 800140c:	4013      	ands	r3, r2
 800140e:	d008      	beq.n	8001422 <HAL_CAN_IRQHandler+0x172>
			/* Set CAN error code to Rx Fifo 0 overrun error */
			errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4313      	orrs	r3, r2
 8001418:	627b      	str	r3, [r7, #36]	; 0x24

			/* Clear FIFO0 Overrun Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2210      	movs	r2, #16
 8001420:	60da      	str	r2, [r3, #12]
		}
	}

	/* Receive FIFO 0 full interrupt management ********************************/
	if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U) {
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	2204      	movs	r2, #4
 8001426:	4013      	ands	r3, r2
 8001428:	d00b      	beq.n	8001442 <HAL_CAN_IRQHandler+0x192>
		if ((rf0rflags & CAN_RF0R_FULL0) != 0U) {
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2208      	movs	r2, #8
 800142e:	4013      	ands	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_CAN_IRQHandler+0x192>
			/* Clear FIFO 0 full Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2208      	movs	r2, #8
 8001438:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo0FullCallback(hcan);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0018      	movs	r0, r3
 800143e:	f000 f91b 	bl	8001678 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 0 message pending interrupt management *********************/
	if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U) {
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	2202      	movs	r2, #2
 8001446:	4013      	ands	r3, r2
 8001448:	d009      	beq.n	800145e <HAL_CAN_IRQHandler+0x1ae>
		/* Check if message is still pending */
		if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2203      	movs	r2, #3
 8001452:	4013      	ands	r3, r2
 8001454:	d003      	beq.n	800145e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0018      	movs	r0, r3
 800145a:	f7fe ff69 	bl	8000330 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 1 overrun interrupt management *****************************/
	if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U) {
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	4013      	ands	r3, r2
 8001464:	d00c      	beq.n	8001480 <HAL_CAN_IRQHandler+0x1d0>
		if ((rf1rflags & CAN_RF1R_FOVR1) != 0U) {
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2210      	movs	r2, #16
 800146a:	4013      	ands	r3, r2
 800146c:	d008      	beq.n	8001480 <HAL_CAN_IRQHandler+0x1d0>
			/* Set CAN error code to Rx Fifo 1 overrun error */
			errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	00d2      	lsls	r2, r2, #3
 8001474:	4313      	orrs	r3, r2
 8001476:	627b      	str	r3, [r7, #36]	; 0x24

			/* Clear FIFO1 Overrun Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2210      	movs	r2, #16
 800147e:	611a      	str	r2, [r3, #16]
		}
	}

	/* Receive FIFO 1 full interrupt management ********************************/
	if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U) {
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	2220      	movs	r2, #32
 8001484:	4013      	ands	r3, r2
 8001486:	d00b      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x1f0>
		if ((rf1rflags & CAN_RF1R_FULL1) != 0U) {
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2208      	movs	r2, #8
 800148c:	4013      	ands	r3, r2
 800148e:	d007      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x1f0>
			/* Clear FIFO 1 full Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2208      	movs	r2, #8
 8001496:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo1FullCallback(hcan);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	0018      	movs	r0, r3
 800149c:	f000 f8fc 	bl	8001698 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Receive FIFO 1 message pending interrupt management *********************/
	if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U) {
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	2210      	movs	r2, #16
 80014a4:	4013      	ands	r3, r2
 80014a6:	d009      	beq.n	80014bc <HAL_CAN_IRQHandler+0x20c>
		/* Check if message is still pending */
		if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2203      	movs	r2, #3
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 f8e6 	bl	8001688 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Sleep interrupt management *********************************************/
	if ((interrupts & CAN_IT_SLEEP_ACK) != 0U) {
 80014bc:	6a3a      	ldr	r2, [r7, #32]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	029b      	lsls	r3, r3, #10
 80014c2:	4013      	ands	r3, r2
 80014c4:	d00b      	beq.n	80014de <HAL_CAN_IRQHandler+0x22e>
		if ((msrflags & CAN_MSR_SLAKI) != 0U) {
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2210      	movs	r2, #16
 80014ca:	4013      	ands	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_CAN_IRQHandler+0x22e>
			/* Clear Sleep interrupt Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2210      	movs	r2, #16
 80014d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_SleepCallback(hcan);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	0018      	movs	r0, r3
 80014da:	f000 f8e5 	bl	80016a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* WakeUp interrupt management *********************************************/
	if ((interrupts & CAN_IT_WAKEUP) != 0U) {
 80014de:	6a3a      	ldr	r2, [r7, #32]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	025b      	lsls	r3, r3, #9
 80014e4:	4013      	ands	r3, r2
 80014e6:	d00b      	beq.n	8001500 <HAL_CAN_IRQHandler+0x250>
		if ((msrflags & CAN_MSR_WKUI) != 0U) {
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2208      	movs	r2, #8
 80014ec:	4013      	ands	r3, r2
 80014ee:	d007      	beq.n	8001500 <HAL_CAN_IRQHandler+0x250>
			/* Clear WakeUp Flag */
			__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2208      	movs	r2, #8
 80014f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
			/* Call weak (surcharged) callback */
			HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f8dc 	bl	80016b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
		}
	}

	/* Error interrupts management *********************************************/
	if ((interrupts & CAN_IT_ERROR) != 0U) {
 8001500:	6a3a      	ldr	r2, [r7, #32]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	4013      	ands	r3, r2
 8001508:	d100      	bne.n	800150c <HAL_CAN_IRQHandler+0x25c>
 800150a:	e074      	b.n	80015f6 <HAL_CAN_IRQHandler+0x346>
		if ((msrflags & CAN_MSR_ERRI) != 0U) {
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2204      	movs	r2, #4
 8001510:	4013      	ands	r3, r2
 8001512:	d100      	bne.n	8001516 <HAL_CAN_IRQHandler+0x266>
 8001514:	e06b      	b.n	80015ee <HAL_CAN_IRQHandler+0x33e>
			/* Check Error Warning Flag */
			if (((interrupts & CAN_IT_ERROR_WARNING) != 0U)
 8001516:	6a3a      	ldr	r2, [r7, #32]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4013      	ands	r3, r2
 800151e:	d007      	beq.n	8001530 <HAL_CAN_IRQHandler+0x280>
					&& ((esrflags & CAN_ESR_EWGF) != 0U)) {
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_CAN_IRQHandler+0x280>
				/* Set CAN error code to Error Warning */
				errorcode |= HAL_CAN_ERROR_EWG;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	2201      	movs	r2, #1
 800152c:	4313      	orrs	r3, r2
 800152e:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Warning Flag as read-only */
			}

			/* Check Error Passive Flag */
			if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U)
 8001530:	6a3a      	ldr	r2, [r7, #32]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_CAN_IRQHandler+0x29a>
					&& ((esrflags & CAN_ESR_EPVF) != 0U)) {
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2202      	movs	r2, #2
 800153e:	4013      	ands	r3, r2
 8001540:	d003      	beq.n	800154a <HAL_CAN_IRQHandler+0x29a>
				/* Set CAN error code to Error Passive */
				errorcode |= HAL_CAN_ERROR_EPV;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	2202      	movs	r2, #2
 8001546:	4313      	orrs	r3, r2
 8001548:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Passive Flag as read-only */
			}

			/* Check Bus-off Flag */
			if (((interrupts & CAN_IT_BUSOFF) != 0U)
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4013      	ands	r3, r2
 8001552:	d007      	beq.n	8001564 <HAL_CAN_IRQHandler+0x2b4>
					&& ((esrflags & CAN_ESR_BOFF) != 0U)) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2204      	movs	r2, #4
 8001558:	4013      	ands	r3, r2
 800155a:	d003      	beq.n	8001564 <HAL_CAN_IRQHandler+0x2b4>
				/* Set CAN error code to Bus-Off */
				errorcode |= HAL_CAN_ERROR_BOF;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	2204      	movs	r2, #4
 8001560:	4313      	orrs	r3, r2
 8001562:	627b      	str	r3, [r7, #36]	; 0x24

				/* No need for clear of Error Bus-Off as read-only */
			}

			/* Check Last Error Code Flag */
			if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U)
 8001564:	6a3a      	ldr	r2, [r7, #32]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4013      	ands	r3, r2
 800156c:	d03f      	beq.n	80015ee <HAL_CAN_IRQHandler+0x33e>
					&& ((esrflags & CAN_ESR_LEC) != 0U)) {
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2270      	movs	r2, #112	; 0x70
 8001572:	4013      	ands	r3, r2
 8001574:	d03b      	beq.n	80015ee <HAL_CAN_IRQHandler+0x33e>
				switch (esrflags & CAN_ESR_LEC) {
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2270      	movs	r2, #112	; 0x70
 800157a:	4013      	ands	r3, r2
 800157c:	2b60      	cmp	r3, #96	; 0x60
 800157e:	d027      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x320>
 8001580:	d82c      	bhi.n	80015dc <HAL_CAN_IRQHandler+0x32c>
 8001582:	2b50      	cmp	r3, #80	; 0x50
 8001584:	d01f      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x316>
 8001586:	d829      	bhi.n	80015dc <HAL_CAN_IRQHandler+0x32c>
 8001588:	2b40      	cmp	r3, #64	; 0x40
 800158a:	d017      	beq.n	80015bc <HAL_CAN_IRQHandler+0x30c>
 800158c:	d826      	bhi.n	80015dc <HAL_CAN_IRQHandler+0x32c>
 800158e:	2b30      	cmp	r3, #48	; 0x30
 8001590:	d00f      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x302>
 8001592:	d823      	bhi.n	80015dc <HAL_CAN_IRQHandler+0x32c>
 8001594:	2b10      	cmp	r3, #16
 8001596:	d002      	beq.n	800159e <HAL_CAN_IRQHandler+0x2ee>
 8001598:	2b20      	cmp	r3, #32
 800159a:	d005      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x2f8>
				case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
					/* Set CAN error code to CRC error */
					errorcode |= HAL_CAN_ERROR_CRC;
					break;
				default:
					break;
 800159c:	e01e      	b.n	80015dc <HAL_CAN_IRQHandler+0x32c>
					errorcode |= HAL_CAN_ERROR_STF;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	2208      	movs	r2, #8
 80015a2:	4313      	orrs	r3, r2
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015a6:	e01a      	b.n	80015de <HAL_CAN_IRQHandler+0x32e>
					errorcode |= HAL_CAN_ERROR_FOR;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	2210      	movs	r2, #16
 80015ac:	4313      	orrs	r3, r2
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015b0:	e015      	b.n	80015de <HAL_CAN_IRQHandler+0x32e>
					errorcode |= HAL_CAN_ERROR_ACK;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	2220      	movs	r2, #32
 80015b6:	4313      	orrs	r3, r2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015ba:	e010      	b.n	80015de <HAL_CAN_IRQHandler+0x32e>
					errorcode |= HAL_CAN_ERROR_BR;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	2240      	movs	r2, #64	; 0x40
 80015c0:	4313      	orrs	r3, r2
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015c4:	e00b      	b.n	80015de <HAL_CAN_IRQHandler+0x32e>
					errorcode |= HAL_CAN_ERROR_BD;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	4313      	orrs	r3, r2
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015ce:	e006      	b.n	80015de <HAL_CAN_IRQHandler+0x32e>
					errorcode |= HAL_CAN_ERROR_CRC;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	0052      	lsls	r2, r2, #1
 80015d6:	4313      	orrs	r3, r2
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015da:	e000      	b.n	80015de <HAL_CAN_IRQHandler+0x32e>
					break;
 80015dc:	46c0      	nop			; (mov r8, r8)
				}

				/* Clear Last error code Flag */
				CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2170      	movs	r1, #112	; 0x70
 80015ea:	438a      	bics	r2, r1
 80015ec:	619a      	str	r2, [r3, #24]
			}
		}

		/* Clear ERRI Flag */
		__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2204      	movs	r2, #4
 80015f4:	605a      	str	r2, [r3, #4]
	}

	/* Call the Error call Back in case of Errors */
	if (errorcode != HAL_CAN_ERROR_NONE) {
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <HAL_CAN_IRQHandler+0x360>
		/* Update error code in handle */
		hcan->ErrorCode |= errorcode;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
		/* Call weak (surcharged) callback */
		HAL_CAN_ErrorCallback(hcan);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	0018      	movs	r0, r3
 800160c:	f000 f85c 	bl	80016c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
	}
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b00a      	add	sp, #40	; 0x28
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_CAN_TxMailbox0CompleteCallback>:
 * @brief  Transmission Mailbox 0 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
	 user file
	 */
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_CAN_TxMailbox1CompleteCallback>:
 * @brief  Transmission Mailbox 1 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
	 user file
	 */
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_CAN_TxMailbox2CompleteCallback>:
 * @brief  Transmission Mailbox 2 complete callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
	 user file
	 */
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b002      	add	sp, #8
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_CAN_TxMailbox0AbortCallback>:
 * @brief  Transmission Mailbox 0 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
	 user file
	 */
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_CAN_TxMailbox1AbortCallback>:
 * @brief  Transmission Mailbox 1 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
	 user file
	 */
}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_CAN_TxMailbox2AbortCallback>:
 * @brief  Transmission Mailbox 2 Cancellation callback.
 * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
	 user file
	 */
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b002      	add	sp, #8
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_CAN_RxFifo0FullCallback>:
 * @brief  Rx FIFO 0 full callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo0FullCallback could be implemented in the user
	 file
	 */
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * @brief  Rx FIFO 1 message pending callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
	 user file
	 */
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_CAN_RxFifo1FullCallback>:
 * @brief  Rx FIFO 1 full callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_RxFifo1FullCallback could be implemented in the user
	 file
	 */
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b002      	add	sp, #8
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_CAN_SleepCallback>:
 * @brief  Sleep callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	UNUSED(hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_SleepCallback could be implemented in the user file
	 */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 * @brief  WakeUp from Rx message callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
	 user file
	 */
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_CAN_ErrorCallback>:
 * @brief  Error CAN callback.
 * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	UNUSED(hcan);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_CAN_ErrorCallback could be implemented in the user file
	 */
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <__NVIC_EnableIRQ>:
 \brief   Enable Interrupt
 \details Enables a device specific interrupt in the NVIC interrupt controller.
 \param [in]      IRQn  Device specific interrupt number.
 \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	701a      	strb	r2, [r3, #0]
	if ((int32_t) (IRQn) >= 0) {
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ea:	d809      	bhi.n	8001700 <__NVIC_EnableIRQ+0x28>
		NVIC->ISER[0U] = (uint32_t) (1UL << (((uint32_t) IRQn) & 0x1FUL));
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	001a      	movs	r2, r3
 80016f2:	231f      	movs	r3, #31
 80016f4:	401a      	ands	r2, r3
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_EnableIRQ+0x30>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	4091      	lsls	r1, r2
 80016fc:	000a      	movs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
	}
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
 or negative to specify a processor exception.
 \param [in]      IRQn  Interrupt number.
 \param [in]  priority  Priority to set.
 \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	0002      	movs	r2, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	701a      	strb	r2, [r3, #0]
	if ((int32_t) (IRQn) >= 0) {
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b7f      	cmp	r3, #127	; 0x7f
 8001720:	d828      	bhi.n	8001774 <__NVIC_SetPriority+0x68>
		NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t) (NVIC->IP[_IP_IDX(IRQn)]
 8001722:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <__NVIC_SetPriority+0xd4>)
 8001724:	1dfb      	adds	r3, r7, #7
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25b      	sxtb	r3, r3
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	33c0      	adds	r3, #192	; 0xc0
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	589b      	ldr	r3, [r3, r2]
				& ~(0xFFUL << _BIT_SHIFT(IRQn)))
 8001732:	1dfa      	adds	r2, r7, #7
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	0011      	movs	r1, r2
 8001738:	2203      	movs	r2, #3
 800173a:	400a      	ands	r2, r1
 800173c:	00d2      	lsls	r2, r2, #3
 800173e:	21ff      	movs	r1, #255	; 0xff
 8001740:	4091      	lsls	r1, r2
 8001742:	000a      	movs	r2, r1
 8001744:	43d2      	mvns	r2, r2
		NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t) (NVIC->IP[_IP_IDX(IRQn)]
 8001746:	401a      	ands	r2, r3
 8001748:	0011      	movs	r1, r2
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	019b      	lsls	r3, r3, #6
 800174e:	22ff      	movs	r2, #255	; 0xff
 8001750:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn)));
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	2303      	movs	r3, #3
 800175a:	4003      	ands	r3, r0
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	409a      	lsls	r2, r3
		NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t) (NVIC->IP[_IP_IDX(IRQn)]
 8001760:	481f      	ldr	r0, [pc, #124]	; (80017e0 <__NVIC_SetPriority+0xd4>)
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b25b      	sxtb	r3, r3
 8001768:	089b      	lsrs	r3, r3, #2
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
 800176a:	430a      	orrs	r2, r1
		NVIC->IP[_IP_IDX(IRQn)] = ((uint32_t) (NVIC->IP[_IP_IDX(IRQn)]
 800176c:	33c0      	adds	r3, #192	; 0xc0
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	501a      	str	r2, [r3, r0]
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
				& ~(0xFFUL << _BIT_SHIFT(IRQn)))
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
						<< _BIT_SHIFT(IRQn)));
	}
}
 8001772:	e031      	b.n	80017d8 <__NVIC_SetPriority+0xcc>
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <__NVIC_SetPriority+0xd8>)
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	0019      	movs	r1, r3
 800177c:	230f      	movs	r3, #15
 800177e:	400b      	ands	r3, r1
 8001780:	3b08      	subs	r3, #8
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3306      	adds	r3, #6
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	18d3      	adds	r3, r2, r3
 800178a:	3304      	adds	r3, #4
 800178c:	681b      	ldr	r3, [r3, #0]
				& ~(0xFFUL << _BIT_SHIFT(IRQn)))
 800178e:	1dfa      	adds	r2, r7, #7
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	0011      	movs	r1, r2
 8001794:	2203      	movs	r2, #3
 8001796:	400a      	ands	r2, r1
 8001798:	00d2      	lsls	r2, r2, #3
 800179a:	21ff      	movs	r1, #255	; 0xff
 800179c:	4091      	lsls	r1, r2
 800179e:	000a      	movs	r2, r1
 80017a0:	43d2      	mvns	r2, r2
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
 80017a2:	401a      	ands	r2, r3
 80017a4:	0011      	movs	r1, r2
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	019b      	lsls	r3, r3, #6
 80017aa:	22ff      	movs	r2, #255	; 0xff
 80017ac:	401a      	ands	r2, r3
						<< _BIT_SHIFT(IRQn)));
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	0018      	movs	r0, r3
 80017b4:	2303      	movs	r3, #3
 80017b6:	4003      	ands	r3, r0
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	409a      	lsls	r2, r3
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <__NVIC_SetPriority+0xd8>)
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	001c      	movs	r4, r3
 80017c4:	230f      	movs	r3, #15
 80017c6:	4023      	ands	r3, r4
 80017c8:	3b08      	subs	r3, #8
 80017ca:	089b      	lsrs	r3, r3, #2
				| (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL)
 80017cc:	430a      	orrs	r2, r1
		SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t) (SCB->SHP[_SHP_IDX(IRQn)]
 80017ce:	3306      	adds	r3, #6
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	18c3      	adds	r3, r0, r3
 80017d4:	3304      	adds	r3, #4
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b003      	add	sp, #12
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	1e5a      	subs	r2, r3, #1
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	045b      	lsls	r3, r3, #17
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d301      	bcc.n	8001800 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fc:	2301      	movs	r3, #1
 80017fe:	e010      	b.n	8001822 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <SysTick_Config+0x44>)
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	3a01      	subs	r2, #1
 8001806:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001808:	2301      	movs	r3, #1
 800180a:	425b      	negs	r3, r3
 800180c:	2103      	movs	r1, #3
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff ff7c 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x44>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x44>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b002      	add	sp, #8
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	210f      	movs	r1, #15
 800183c:	187b      	adds	r3, r7, r1
 800183e:	1c02      	adds	r2, r0, #0
 8001840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	187b      	adds	r3, r7, r1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	0002      	movs	r2, r0
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b25b      	sxtb	r3, r3
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff ff33 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff ffaf 	bl	80017e8 <SysTick_Config>
 800188a:	0003      	movs	r3, r0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_GPIO_Init>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 80018a2:	e155      	b.n	8001b50 <HAL_GPIO_Init+0x2bc>
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4091      	lsls	r1, r2
 80018ae:	000a      	movs	r2, r1
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0x00u) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d100      	bne.n	80018bc <HAL_GPIO_Init+0x28>
 80018ba:	e146      	b.n	8001b4a <HAL_GPIO_Init+0x2b6>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2203      	movs	r2, #3
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	409a      	lsls	r2, r3
 80018e2:	0013      	movs	r3, r2
 80018e4:	43da      	mvns	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Init->Speed << (position * 2u));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	409a      	lsls	r2, r3
 80018f6:	0013      	movs	r3, r2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	43da      	mvns	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	2201      	movs	r2, #1
 8001922:	401a      	ands	r2, r3
						<< position);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2203      	movs	r2, #3
 800193c:	4013      	ands	r3, r2
 800193e:	2b03      	cmp	r3, #3
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0xde>
				/* Check the Pull parameter */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	43da      	mvns	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Pull) << (position * 2u));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
				GPIOx->PUPDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2203      	movs	r2, #3
 8001978:	4013      	ands	r3, r2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d123      	bne.n	80019c6 <HAL_GPIO_Init+0x132>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3u];
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	58d3      	ldr	r3, [r2, r3]
 800198a:	613b      	str	r3, [r7, #16]
				temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2207      	movs	r2, #7
 8001990:	4013      	ands	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	409a      	lsls	r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	43da      	mvns	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2107      	movs	r1, #7
 80019aa:	400b      	ands	r3, r1
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	409a      	lsls	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
				GPIOx->AFR[position >> 3u] = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	6939      	ldr	r1, [r7, #16]
 80019c4:	50d1      	str	r1, [r2, r3]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	409a      	lsls	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	43da      	mvns	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2203      	movs	r2, #3
 80019e4:	401a      	ands	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
			GPIOx->MODER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	23c0      	movs	r3, #192	; 0xc0
 8001a00:	029b      	lsls	r3, r3, #10
 8001a02:	4013      	ands	r3, r2
 8001a04:	d100      	bne.n	8001a08 <HAL_GPIO_Init+0x174>
 8001a06:	e0a0      	b.n	8001b4a <HAL_GPIO_Init+0x2b6>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <HAL_GPIO_Init+0x2d4>)
 8001a0a:	699a      	ldr	r2, [r3, #24]
 8001a0c:	4b56      	ldr	r3, [pc, #344]	; (8001b68 <HAL_GPIO_Init+0x2d4>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	619a      	str	r2, [r3, #24]
 8001a14:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <HAL_GPIO_Init+0x2d4>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]

				temp = SYSCFG->EXTICR[position >> 2u];
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x2d8>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	589b      	ldr	r3, [r3, r2]
 8001a2c:	613b      	str	r3, [r7, #16]
				temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4013      	ands	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	2390      	movs	r3, #144	; 0x90
 8001a48:	05db      	lsls	r3, r3, #23
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a47      	ldr	r2, [pc, #284]	; (8001b70 <HAL_GPIO_Init+0x2dc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x1ea>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a46      	ldr	r2, [pc, #280]	; (8001b74 <HAL_GPIO_Init+0x2e0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x1e6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x1e2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x1de>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e008      	b.n	8001a84 <HAL_GPIO_Init+0x1f0>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x1f0>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x1f0>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x1f0>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x1f0>
 8001a82:	2300      	movs	r3, #0
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	2103      	movs	r1, #3
 8001a88:	400a      	ands	r2, r1
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
				SYSCFG->EXTICR[position >> 2u] = temp;
 8001a94:	4935      	ldr	r1, [pc, #212]	; (8001b6c <HAL_GPIO_Init+0x2d8>)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	505a      	str	r2, [r3, r1]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	025b      	lsls	r3, r3, #9
 8001aba:	4013      	ands	r3, r2
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x232>
					temp |= iocurrent;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
				}
				EXTI->IMR = temp;
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	601a      	str	r2, [r3, #0]

				temp = EXTI->EMR;
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	029b      	lsls	r3, r3, #10
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x25c>
					temp |= iocurrent;
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
				}
				EXTI->EMR = temp;
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43da      	mvns	r2, r3
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	035b      	lsls	r3, r3, #13
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x286>
					temp |= iocurrent;
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
				}
				EXTI->RTSR = temp;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

				temp = EXTI->FTSR;
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	039b      	lsls	r3, r3, #14
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2b0>
					temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
				}
				EXTI->FTSR = temp;
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	60da      	str	r2, [r3, #12]
			}
		}

		position++;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	40da      	lsrs	r2, r3
 8001b58:	1e13      	subs	r3, r2, #0
 8001b5a:	d000      	beq.n	8001b5e <HAL_GPIO_Init+0x2ca>
 8001b5c:	e6a2      	b.n	80018a4 <HAL_GPIO_Init+0x10>
	}
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b006      	add	sp, #24
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	48000400 	.word	0x48000400
 8001b74:	48000800 	.word	0x48000800
 8001b78:	48000c00 	.word	0x48000c00
 8001b7c:	48001000 	.word	0x48001000
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	0008      	movs	r0, r1
 8001b8e:	0011      	movs	r1, r2
 8001b90:	1cbb      	adds	r3, r7, #2
 8001b92:	1c02      	adds	r2, r0, #0
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	1c7b      	adds	r3, r7, #1
 8001b98:	1c0a      	adds	r2, r1, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001b9c:	1c7b      	adds	r3, r7, #1
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <HAL_GPIO_WritePin+0x2a>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 8001ba4:	1cbb      	adds	r3, r7, #2
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) GPIO_Pin;
	}
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x32>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 8001bae:	1cbb      	adds	r3, r7, #2
 8001bb0:	881a      	ldrh	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	uint32_t pll_config2;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x14>
		return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f000 fb76 	bl	80022c0 <HAL_RCC_OscConfig+0x700>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d100      	bne.n	8001be0 <HAL_RCC_OscConfig+0x20>
 8001bde:	e08e      	b.n	8001cfe <HAL_RCC_OscConfig+0x13e>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	4bc5      	ldr	r3, [pc, #788]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	220c      	movs	r2, #12
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00e      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8001bec:	4bc2      	ldr	r3, [pc, #776]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d117      	bne.n	8001c28 <HAL_RCC_OscConfig+0x68>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE))) {
 8001bf8:	4bbf      	ldr	r3, [pc, #764]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	23c0      	movs	r3, #192	; 0xc0
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	401a      	ands	r2, r3
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d10e      	bne.n	8001c28 <HAL_RCC_OscConfig+0x68>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4bbb      	ldr	r3, [pc, #748]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	029b      	lsls	r3, r3, #10
 8001c12:	4013      	ands	r3, r2
 8001c14:	d100      	bne.n	8001c18 <HAL_RCC_OscConfig+0x58>
 8001c16:	e071      	b.n	8001cfc <HAL_RCC_OscConfig+0x13c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d000      	beq.n	8001c22 <HAL_RCC_OscConfig+0x62>
 8001c20:	e06c      	b.n	8001cfc <HAL_RCC_OscConfig+0x13c>
				return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f000 fb4c 	bl	80022c0 <HAL_RCC_OscConfig+0x700>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_OscConfig+0x80>
 8001c30:	4bb1      	ldr	r3, [pc, #708]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4bb0      	ldr	r3, [pc, #704]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	0249      	lsls	r1, r1, #9
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e02f      	b.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0xa2>
 8001c48:	4bab      	ldr	r3, [pc, #684]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4baa      	ldr	r3, [pc, #680]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c4e:	49ab      	ldr	r1, [pc, #684]	; (8001efc <HAL_RCC_OscConfig+0x33c>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	4ba8      	ldr	r3, [pc, #672]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4ba7      	ldr	r3, [pc, #668]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c5a:	49a9      	ldr	r1, [pc, #676]	; (8001f00 <HAL_RCC_OscConfig+0x340>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e01e      	b.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d10e      	bne.n	8001c88 <HAL_RCC_OscConfig+0xc8>
 8001c6a:	4ba3      	ldr	r3, [pc, #652]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4ba2      	ldr	r3, [pc, #648]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	02c9      	lsls	r1, r1, #11
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4b9f      	ldr	r3, [pc, #636]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	0249      	lsls	r1, r1, #9
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
 8001c88:	4b9b      	ldr	r3, [pc, #620]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b9a      	ldr	r3, [pc, #616]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	499b      	ldr	r1, [pc, #620]	; (8001efc <HAL_RCC_OscConfig+0x33c>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	4b98      	ldr	r3, [pc, #608]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b97      	ldr	r3, [pc, #604]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	4999      	ldr	r1, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x340>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d014      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x112>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001ca8:	f7fe fe7a 	bl	80009a0 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	61bb      	str	r3, [r7, #24]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x104>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001cb2:	f7fe fe75 	bl	80009a0 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x104>
						return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e2fd      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0xf2>
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x13e>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001cd2:	f7fe fe65 	bl	80009a0 <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	61bb      	str	r3, [r7, #24]

				/* Wait till HSE is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001cdc:	f7fe fe60 	bl	80009a0 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x12e>
						return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e2e8      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001cee:	4b82      	ldr	r3, [pc, #520]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	029b      	lsls	r3, r3, #10
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x11c>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x13e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfc:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	d100      	bne.n	8001d0a <HAL_RCC_OscConfig+0x14a>
 8001d08:	e06c      	b.n	8001de4 <HAL_RCC_OscConfig+0x224>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	220c      	movs	r2, #12
 8001d10:	4013      	ands	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <HAL_RCC_OscConfig+0x172>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8001d14:	4b78      	ldr	r3, [pc, #480]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	220c      	movs	r2, #12
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d11f      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1a0>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI))) {
 8001d20:	4b75      	ldr	r3, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	025b      	lsls	r3, r3, #9
 8001d28:	401a      	ands	r2, r3
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1a0>
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b71      	ldr	r3, [pc, #452]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x188>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x188>
				return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e2bb      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001d48:	4b6b      	ldr	r3, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	22f8      	movs	r2, #248	; 0xf8
 8001d4e:	4393      	bics	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00da      	lsls	r2, r3, #3
 8001d58:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	e041      	b.n	8001de4 <HAL_RCC_OscConfig+0x224>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d024      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1f2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8001d68:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b62      	ldr	r3, [pc, #392]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001d74:	f7fe fe14 	bl	80009a0 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	61bb      	str	r3, [r7, #24]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1d0>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001d7e:	f7fe fe0f 	bl	80009a0 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1d0>
						return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e297      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001d90:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d0f1      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1be>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001d9a:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	22f8      	movs	r2, #248	; 0xf8
 8001da0:	4393      	bics	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00da      	lsls	r2, r3, #3
 8001daa:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e018      	b.n	8001de4 <HAL_RCC_OscConfig+0x224>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8001db2:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	438a      	bics	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001dbe:	f7fe fdef 	bl	80009a0 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	61bb      	str	r3, [r7, #24]

				/* Wait till HSI is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x21a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001dc8:	f7fe fdea 	bl	80009a0 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x21a>
						return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e272      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d1f1      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x208>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	4013      	ands	r3, r2
 8001dec:	d036      	beq.n	8001e5c <HAL_RCC_OscConfig+0x29c>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d019      	beq.n	8001e2a <HAL_RCC_OscConfig+0x26a>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8001df6:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001e02:	f7fe fdcd 	bl	80009a0 <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x25e>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001e0c:	f7fe fdc8 	bl	80009a0 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x25e>
					return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e250      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	2202      	movs	r2, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d0f1      	beq.n	8001e0c <HAL_RCC_OscConfig+0x24c>
 8001e28:	e018      	b.n	8001e5c <HAL_RCC_OscConfig+0x29c>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	438a      	bics	r2, r1
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001e36:	f7fe fdb3 	bl	80009a0 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	61bb      	str	r3, [r7, #24]

			/* Wait till LSI is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x292>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001e40:	f7fe fdae 	bl	80009a0 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x292>
					return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e236      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	2202      	movs	r2, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d1f1      	bne.n	8001e40 <HAL_RCC_OscConfig+0x280>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2204      	movs	r2, #4
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2a8>
 8001e66:	e0b5      	b.n	8001fd4 <HAL_RCC_OscConfig+0x414>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8001e68:	201f      	movs	r0, #31
 8001e6a:	183b      	adds	r3, r7, r0
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	055b      	lsls	r3, r3, #21
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d110      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2de>
			__HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	0549      	lsls	r1, r1, #21
 8001e86:	430a      	orrs	r2, r1
 8001e88:	61da      	str	r2, [r3, #28]
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	055b      	lsls	r3, r3, #21
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
			pwrclkchanged = SET;
 8001e98:	183b      	adds	r3, r7, r0
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x344>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d11a      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x320>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_RCC_OscConfig+0x344>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_RCC_OscConfig+0x344>)
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	0049      	lsls	r1, r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8001eb8:	f7fe fd72 	bl	80009a0 <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	61bb      	str	r3, [r7, #24]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x314>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8001ec2:	f7fe fd6d 	bl	80009a0 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	; 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x314>
					return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1f5      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x344>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x302>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10f      	bne.n	8001f08 <HAL_RCC_OscConfig+0x348>
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	4b02      	ldr	r3, [pc, #8]	; (8001ef8 <HAL_RCC_OscConfig+0x338>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	621a      	str	r2, [r3, #32]
 8001ef4:	e036      	b.n	8001f64 <HAL_RCC_OscConfig+0x3a4>
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	fffeffff 	.word	0xfffeffff
 8001f00:	fffbffff 	.word	0xfffbffff
 8001f04:	40007000 	.word	0x40007000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x36a>
 8001f10:	4bca      	ldr	r3, [pc, #808]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f12:	6a1a      	ldr	r2, [r3, #32]
 8001f14:	4bc9      	ldr	r3, [pc, #804]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	438a      	bics	r2, r1
 8001f1a:	621a      	str	r2, [r3, #32]
 8001f1c:	4bc7      	ldr	r3, [pc, #796]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	4bc6      	ldr	r3, [pc, #792]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f22:	2104      	movs	r1, #4
 8001f24:	438a      	bics	r2, r1
 8001f26:	621a      	str	r2, [r3, #32]
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x3a4>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x38c>
 8001f32:	4bc2      	ldr	r3, [pc, #776]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f34:	6a1a      	ldr	r2, [r3, #32]
 8001f36:	4bc1      	ldr	r3, [pc, #772]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f38:	2104      	movs	r1, #4
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	621a      	str	r2, [r3, #32]
 8001f3e:	4bbf      	ldr	r3, [pc, #764]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	4bbe      	ldr	r3, [pc, #760]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	430a      	orrs	r2, r1
 8001f48:	621a      	str	r2, [r3, #32]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x3a4>
 8001f4c:	4bbb      	ldr	r3, [pc, #748]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	4bba      	ldr	r3, [pc, #744]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	438a      	bics	r2, r1
 8001f56:	621a      	str	r2, [r3, #32]
 8001f58:	4bb8      	ldr	r3, [pc, #736]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	4bb7      	ldr	r3, [pc, #732]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	2104      	movs	r1, #4
 8001f60:	438a      	bics	r2, r1
 8001f62:	621a      	str	r2, [r3, #32]
		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d014      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3d6>
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001f6c:	f7fe fd18 	bl	80009a0 <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	61bb      	str	r3, [r7, #24]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8001f74:	e009      	b.n	8001f8a <HAL_RCC_OscConfig+0x3ca>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001f76:	f7fe fd13 	bl	80009a0 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4aaf      	ldr	r2, [pc, #700]	; (8002240 <HAL_RCC_OscConfig+0x680>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x3ca>
					return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e19a      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8001f8a:	4bac      	ldr	r3, [pc, #688]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x3b6>
 8001f94:	e013      	b.n	8001fbe <HAL_RCC_OscConfig+0x3fe>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001f96:	f7fe fd03 	bl	80009a0 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]

			/* Wait till LSE is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3f4>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001fa0:	f7fe fcfe 	bl	80009a0 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4aa5      	ldr	r2, [pc, #660]	; (8002240 <HAL_RCC_OscConfig+0x680>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3f4>
					return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e185      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001fb4:	4ba1      	ldr	r3, [pc, #644]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x3e0>
				}
			}
		}

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 8001fbe:	231f      	movs	r3, #31
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x414>
			__HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b9c      	ldr	r3, [pc, #624]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	4b9b      	ldr	r3, [pc, #620]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001fce:	499d      	ldr	r1, [pc, #628]	; (8002244 <HAL_RCC_OscConfig+0x684>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	61da      	str	r2, [r3, #28]
		}
	}

	/*----------------------------- HSI14 Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d063      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4e6>
		assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

		/* Check the HSI14 State */
		if (RCC_OscInitStruct->HSI14State == RCC_HSI14_ON) {
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d12a      	bne.n	800203c <HAL_RCC_OscConfig+0x47c>
			/* Disable ADC control of the Internal High Speed oscillator HSI14 */
			__HAL_RCC_HSI14ADC_DISABLE();
 8001fe6:	4b95      	ldr	r3, [pc, #596]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fea:	4b94      	ldr	r3, [pc, #592]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001fec:	2104      	movs	r1, #4
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34

			/* Enable the Internal High Speed oscillator (HSI). */
			__HAL_RCC_HSI14_ENABLE();
 8001ff2:	4b92      	ldr	r3, [pc, #584]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff6:	4b91      	ldr	r3, [pc, #580]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001ffe:	f7fe fccf 	bl	80009a0 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	61bb      	str	r3, [r7, #24]

			/* Wait till HSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET) {
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x45a>
				if ((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE) {
 8002008:	f7fe fcca 	bl	80009a0 <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x45a>
					return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e152      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET) {
 800201a:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201e:	2202      	movs	r2, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d0f1      	beq.n	8002008 <HAL_RCC_OscConfig+0x448>
				}
			}

			/* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
			__HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(
 8002024:	4b85      	ldr	r3, [pc, #532]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	22f8      	movs	r2, #248	; 0xf8
 800202a:	4393      	bics	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	4b81      	ldr	r3, [pc, #516]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002036:	430a      	orrs	r2, r1
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
 800203a:	e034      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e6>
					RCC_OscInitStruct->HSI14CalibrationValue);
		} else if (RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	3305      	adds	r3, #5
 8002042:	d111      	bne.n	8002068 <HAL_RCC_OscConfig+0x4a8>
			/* Enable ADC control of the Internal High Speed oscillator HSI14 */
			__HAL_RCC_HSI14ADC_ENABLE();
 8002044:	4b7d      	ldr	r3, [pc, #500]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002048:	4b7c      	ldr	r3, [pc, #496]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800204a:	2104      	movs	r1, #4
 800204c:	438a      	bics	r2, r1
 800204e:	635a      	str	r2, [r3, #52]	; 0x34

			/* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
			__HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(
 8002050:	4b7a      	ldr	r3, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	22f8      	movs	r2, #248	; 0xf8
 8002056:	4393      	bics	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	00da      	lsls	r2, r3, #3
 8002060:	4b76      	ldr	r3, [pc, #472]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002062:	430a      	orrs	r2, r1
 8002064:	635a      	str	r2, [r3, #52]	; 0x34
 8002066:	e01e      	b.n	80020a6 <HAL_RCC_OscConfig+0x4e6>
					RCC_OscInitStruct->HSI14CalibrationValue);
		} else {
			/* Disable ADC control of the Internal High Speed oscillator HSI14 */
			__HAL_RCC_HSI14ADC_DISABLE();
 8002068:	4b74      	ldr	r3, [pc, #464]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800206a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206c:	4b73      	ldr	r3, [pc, #460]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800206e:	2104      	movs	r1, #4
 8002070:	430a      	orrs	r2, r1
 8002072:	635a      	str	r2, [r3, #52]	; 0x34

			/* Disable the Internal High Speed oscillator (HSI). */
			__HAL_RCC_HSI14_DISABLE();
 8002074:	4b71      	ldr	r3, [pc, #452]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002078:	4b70      	ldr	r3, [pc, #448]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	635a      	str	r2, [r3, #52]	; 0x34

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8002080:	f7fe fc8e 	bl	80009a0 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]

			/* Wait till HSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET) {
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x4dc>
				if ((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE) {
 800208a:	f7fe fc89 	bl	80009a0 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x4dc>
					return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e111      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET) {
 800209c:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f1      	bne.n	800208a <HAL_RCC_OscConfig+0x4ca>
		}
	}

#if defined(RCC_HSI48_SUPPORT)
	/*----------------------------- HSI48 Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2220      	movs	r2, #32
 80020ac:	4013      	ands	r3, r2
 80020ae:	d05c      	beq.n	800216a <HAL_RCC_OscConfig+0x5aa>
			== RCC_OSCILLATORTYPE_HSI48) {
		/* Check the parameters */
		assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

		/* When the HSI48 is used as system clock it is not allowed to be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48)
 80020b0:	4b62      	ldr	r3, [pc, #392]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	220c      	movs	r2, #12
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d00e      	beq.n	80020da <HAL_RCC_OscConfig+0x51a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80020bc:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	220c      	movs	r2, #12
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d114      	bne.n	80020f2 <HAL_RCC_OscConfig+0x532>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48))) {
 80020c8:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	401a      	ands	r2, r3
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	025b      	lsls	r3, r3, #9
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x532>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020da:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80020dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	025b      	lsls	r3, r3, #9
 80020e2:	4013      	ands	r3, r2
 80020e4:	d040      	beq.n	8002168 <HAL_RCC_OscConfig+0x5a8>
					&& (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON)) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d03c      	beq.n	8002168 <HAL_RCC_OscConfig+0x5a8>
				return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0e6      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			}
		} else {
			/* Check the HSI48 State */
			if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01b      	beq.n	8002132 <HAL_RCC_OscConfig+0x572>
				/* Enable the Internal High Speed oscillator (HSI48). */
				__HAL_RCC_HSI48_ENABLE();
 80020fa:	4b50      	ldr	r3, [pc, #320]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80020fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fe:	4b4f      	ldr	r3, [pc, #316]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	0249      	lsls	r1, r1, #9
 8002104:	430a      	orrs	r2, r1
 8002106:	635a      	str	r2, [r3, #52]	; 0x34

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002108:	f7fe fc4a 	bl	80009a0 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	61bb      	str	r3, [r7, #24]

				/* Wait till HSI48 is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET) {
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x564>
					if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE) {
 8002112:	f7fe fc45 	bl	80009a0 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x564>
						return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0cd      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET) {
 8002124:	4b45      	ldr	r3, [pc, #276]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	025b      	lsls	r3, r3, #9
 800212c:	4013      	ands	r3, r2
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x552>
 8002130:	e01b      	b.n	800216a <HAL_RCC_OscConfig+0x5aa>
					}
				}
			} else {
				/* Disable the Internal High Speed oscillator (HSI48). */
				__HAL_RCC_HSI48_DISABLE();
 8002132:	4b42      	ldr	r3, [pc, #264]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002138:	4943      	ldr	r1, [pc, #268]	; (8002248 <HAL_RCC_OscConfig+0x688>)
 800213a:	400a      	ands	r2, r1
 800213c:	635a      	str	r2, [r3, #52]	; 0x34

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800213e:	f7fe fc2f 	bl	80009a0 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	61bb      	str	r3, [r7, #24]

				/* Wait till HSI48 is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) {
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x59a>
					if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE) {
 8002148:	f7fe fc2a 	bl	80009a0 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x59a>
						return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0b2      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) {
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800215c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	025b      	lsls	r3, r3, #9
 8002162:	4013      	ands	r3, r2
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x588>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x5aa>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002168:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */

	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d100      	bne.n	8002174 <HAL_RCC_OscConfig+0x5b4>
 8002172:	e0a4      	b.n	80022be <HAL_RCC_OscConfig+0x6fe>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8002174:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	220c      	movs	r2, #12
 800217a:	4013      	ands	r3, r2
 800217c:	2b08      	cmp	r3, #8
 800217e:	d100      	bne.n	8002182 <HAL_RCC_OscConfig+0x5c2>
 8002180:	e078      	b.n	8002274 <HAL_RCC_OscConfig+0x6b4>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2b02      	cmp	r3, #2
 8002188:	d14c      	bne.n	8002224 <HAL_RCC_OscConfig+0x664>
						IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
				assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
				assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002190:	492e      	ldr	r1, [pc, #184]	; (800224c <HAL_RCC_OscConfig+0x68c>)
 8002192:	400a      	ands	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002196:	f7fe fc03 	bl	80009a0 <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	61bb      	str	r3, [r7, #24]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x5f2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80021a0:	f7fe fbfe 	bl	80009a0 <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x5f2>
						return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e086      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	049b      	lsls	r3, r3, #18
 80021ba:	4013      	ands	r3, r2
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5e0>
					}
				}

				/* Configure the main PLL clock source, predivider and multiplication factor. */
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	220f      	movs	r2, #15
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4a1e      	ldr	r2, [pc, #120]	; (8002250 <HAL_RCC_OscConfig+0x690>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	431a      	orrs	r2, r3
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
						RCC_OscInitStruct->PLL.PREDIV,
						RCC_OscInitStruct->PLL.PLLMUL);
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	0449      	lsls	r1, r1, #17
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80021fa:	f7fe fbd1 	bl	80009a0 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x656>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002204:	f7fe fbcc 	bl	80009a0 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x656>
						return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e054      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	049b      	lsls	r3, r3, #18
 800221e:	4013      	ands	r3, r2
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x644>
 8002222:	e04c      	b.n	80022be <HAL_RCC_OscConfig+0x6fe>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_RCC_OscConfig+0x67c>)
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <HAL_RCC_OscConfig+0x68c>)
 800222c:	400a      	ands	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002230:	f7fe fbb6 	bl	80009a0 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	61bb      	str	r3, [r7, #24]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x6a6>
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	40021000 	.word	0x40021000
 8002240:	00001388 	.word	0x00001388
 8002244:	efffffff 	.word	0xefffffff
 8002248:	fffeffff 	.word	0xfffeffff
 800224c:	feffffff 	.word	0xfeffffff
 8002250:	ffc27fff 	.word	0xffc27fff
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002254:	f7fe fba4 	bl	80009a0 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x6a6>
						return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e02c      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_RCC_OscConfig+0x708>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	049b      	lsls	r3, r3, #18
 800226e:	4013      	ands	r3, r2
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x694>
 8002272:	e024      	b.n	80022be <HAL_RCC_OscConfig+0x6fe>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_RCC_OscConfig+0x6c0>
				return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e01f      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->CFGR;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_RCC_OscConfig+0x708>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	617b      	str	r3, [r7, #20]
				pll_config2 = RCC->CFGR2;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x708>)
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	613b      	str	r3, [r7, #16]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	23c0      	movs	r3, #192	; 0xc0
 8002290:	025b      	lsls	r3, r3, #9
 8002292:	401a      	ands	r2, r3
						!= RCC_OscInitStruct->PLL.PLLSource)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8002298:	429a      	cmp	r2, r3
 800229a:	d10e      	bne.n	80022ba <HAL_RCC_OscConfig+0x6fa>
						|| (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	220f      	movs	r2, #15
 80022a0:	401a      	ands	r2, r3
								!= RCC_OscInitStruct->PLL.PREDIV)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
						|| (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_OscConfig+0x6fa>
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMUL)
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	23f0      	movs	r3, #240	; 0xf0
 80022ae:	039b      	lsls	r3, r3, #14
 80022b0:	401a      	ands	r2, r3
								!= RCC_OscInitStruct->PLL.PLLMUL)) {
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMUL)
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x6fe>
					return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x700>
				}
			}
		}
	}

	return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b008      	add	sp, #32
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_RCC_ClockConfig>:
 *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 *         currently used as system clock source.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0bf      	b.n	8002460 <HAL_RCC_ClockConfig+0x194>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
	 must be correctly programmed according to the frequency of the CPU clock 
	 (HCLK) of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80022e0:	4b61      	ldr	r3, [pc, #388]	; (8002468 <HAL_RCC_ClockConfig+0x19c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d911      	bls.n	8002312 <HAL_RCC_ClockConfig+0x46>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <HAL_RCC_ClockConfig+0x19c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	4393      	bics	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_RCC_ClockConfig+0x19c>)
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_ClockConfig+0x19c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2201      	movs	r2, #1
 8002306:	4013      	ands	r3, r2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <HAL_RCC_ClockConfig+0x46>
			return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0a6      	b.n	8002460 <HAL_RCC_ClockConfig+0x194>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2202      	movs	r2, #2
 8002318:	4013      	ands	r3, r2
 800231a:	d015      	beq.n	8002348 <HAL_RCC_ClockConfig+0x7c>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APB divider in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2204      	movs	r2, #4
 8002322:	4013      	ands	r3, r2
 8002324:	d006      	beq.n	8002334 <HAL_RCC_ClockConfig+0x68>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002326:	4b51      	ldr	r3, [pc, #324]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 800232c:	21e0      	movs	r1, #224	; 0xe0
 800232e:	00c9      	lsls	r1, r1, #3
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	22f0      	movs	r2, #240	; 0xf0
 800233a:	4393      	bics	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	d04c      	beq.n	80023ec <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0x9e>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	029b      	lsls	r3, r3, #10
 8002362:	4013      	ands	r3, r2
 8002364:	d120      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xdc>
				return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07a      	b.n	8002460 <HAL_RCC_ClockConfig+0x194>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xb6>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	049b      	lsls	r3, r3, #18
 800237a:	4013      	ands	r3, r2
 800237c:	d114      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xdc>
				return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06e      	b.n	8002460 <HAL_RCC_ClockConfig+0x194>
			}
		}
#if defined(RCC_CFGR_SWS_HSI48)
		/* HSI48 is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48) {
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xce>
			/* Check the HSI48 ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET) {
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 800238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	025b      	lsls	r3, r3, #9
 8002392:	4013      	ands	r3, r2
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xdc>
				return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e062      	b.n	8002460 <HAL_RCC_ClockConfig+0x194>
		}
#endif /* RCC_CFGR_SWS_HSI48 */
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2202      	movs	r2, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xdc>
				return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e05b      	b.n	8002460 <HAL_RCC_ClockConfig+0x194>
			}
		}
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4393      	bics	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 80023bc:	f7fe faf0 	bl	80009a0 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80023c4:	e009      	b.n	80023da <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80023c6:	f7fe faeb 	bl	80009a0 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_RCC_ClockConfig+0x1a4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e042      	b.n	8002460 <HAL_RCC_ClockConfig+0x194>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80023da:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	220c      	movs	r2, #12
 80023e0:	401a      	ands	r2, r3
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1ec      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xfa>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_RCC_ClockConfig+0x19c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d211      	bcs.n	800241e <HAL_RCC_ClockConfig+0x152>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_ClockConfig+0x19c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	4393      	bics	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_RCC_ClockConfig+0x19c>)
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x19c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_RCC_ClockConfig+0x152>
			return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e020      	b.n	8002460 <HAL_RCC_ClockConfig+0x194>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2204      	movs	r2, #4
 8002424:	4013      	ands	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_RCC_ClockConfig+0x170>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_RCC_ClockConfig+0x1a8>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800243c:	f000 f820 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 8002440:	0001      	movs	r1, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x1a0>)
 8002444:	685b      	ldr	r3, [r3, #4]
					>> RCC_CFGR_HPRE_BITNUMBER];
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	220f      	movs	r2, #15
 800244a:	4013      	ands	r3, r2
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x1ac>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	000a      	movs	r2, r1
 8002452:	40da      	lsrs	r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1b0>)
 8002456:	601a      	str	r2, [r3, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(TICK_INT_PRIORITY);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe fa5b 	bl	8000914 <HAL_InitTick>

	return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b004      	add	sp, #16
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40022000 	.word	0x40022000
 800246c:	40021000 	.word	0x40021000
 8002470:	00001388 	.word	0x00001388
 8002474:	fffff8ff 	.word	0xfffff8ff
 8002478:	080031b4 	.word	0x080031b4
 800247c:	20000000 	.word	0x20000000

08002480 <HAL_RCC_GetSysClockFreq>:
 * @note   Each time SYSCLK changes, this function must be called to update the
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *         
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b08f      	sub	sp, #60	; 0x3c
 8002484:	af00      	add	r7, sp, #0
	const uint8_t aPLLMULFactorTable[16] = { 2U, 3U, 4U, 5U, 6U, 7U, 8U, 9U,
 8002486:	2314      	movs	r3, #20
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_RCC_GetSysClockFreq+0xec>)
 800248c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800248e:	c313      	stmia	r3!, {r0, r1, r4}
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	601a      	str	r2, [r3, #0]
			10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U };
	const uint8_t aPredivFactorTable[16] = { 1U, 2U, 3U, 4U, 5U, 6U, 7U, 8U, 9U,
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	4a36      	ldr	r2, [pc, #216]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002498:	ca13      	ldmia	r2!, {r0, r1, r4}
 800249a:	c313      	stmia	r3!, {r0, r1, r4}
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	601a      	str	r2, [r3, #0]
			10U, 11U, 12U, 13U, 14U, 15U, 16U };

	uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a4:	2300      	movs	r3, #0
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t sysclockfreq = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30

	tmpreg = RCC->CFGR;
 80024b4:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (tmpreg & RCC_CFGR_SWS) {
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	220c      	movs	r2, #12
 80024be:	4013      	ands	r3, r2
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d047      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0xd4>
 80024c4:	d849      	bhi.n	800255a <HAL_RCC_GetSysClockFreq+0xda>
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x50>
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x56>
 80024ce:	e044      	b.n	800255a <HAL_RCC_GetSysClockFreq+0xda>
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock */
	{
		sysclockfreq = HSE_VALUE;
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 80024d4:	e044      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xe0>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock */
	{
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMUL)
				>> RCC_CFGR_PLLMUL_BITNUMBER];
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	0c9b      	lsrs	r3, r3, #18
 80024da:	220f      	movs	r2, #15
 80024dc:	4013      	ands	r3, r2
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMUL)
 80024de:	2214      	movs	r2, #20
 80024e0:	18ba      	adds	r2, r7, r2
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
		prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR2 & RCC_CFGR2_PREDIV)
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				>> RCC_CFGR2_PREDIV_BITNUMBER];
 80024ea:	220f      	movs	r2, #15
 80024ec:	4013      	ands	r3, r2
		prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR2 & RCC_CFGR2_PREDIV)
 80024ee:	1d3a      	adds	r2, r7, #4
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
		if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 80024f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f6:	23c0      	movs	r3, #192	; 0xc0
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	401a      	ands	r2, r3
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	429a      	cmp	r2, r3
 8002502:	d109      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x98>
			/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
			pllclk = (uint32_t) ((uint64_t) HSE_VALUE / (uint64_t) (prediv))
 8002504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002506:	481c      	ldr	r0, [pc, #112]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002508:	f7fd fdfc 	bl	8000104 <__udivsi3>
 800250c:	0003      	movs	r3, r0
 800250e:	001a      	movs	r2, r3
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	4353      	muls	r3, r2
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
 8002516:	e01a      	b.n	800254e <HAL_RCC_GetSysClockFreq+0xce>
					* ((uint64_t) pllmul);
		}
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
		else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48) {
 8002518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251a:	23c0      	movs	r3, #192	; 0xc0
 800251c:	025b      	lsls	r3, r3, #9
 800251e:	401a      	ands	r2, r3
 8002520:	23c0      	movs	r3, #192	; 0xc0
 8002522:	025b      	lsls	r3, r3, #9
 8002524:	429a      	cmp	r2, r3
 8002526:	d109      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xbc>
			/* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
			pllclk = (uint32_t) ((uint64_t) HSI48_VALUE / (uint64_t) (prediv))
 8002528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252a:	4814      	ldr	r0, [pc, #80]	; (800257c <HAL_RCC_GetSysClockFreq+0xfc>)
 800252c:	f7fd fdea 	bl	8000104 <__udivsi3>
 8002530:	0003      	movs	r3, r0
 8002532:	001a      	movs	r2, r3
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	4353      	muls	r3, r2
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	e008      	b.n	800254e <HAL_RCC_GetSysClockFreq+0xce>
		}
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
		else {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
			/* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
			pllclk = (uint32_t) ((uint64_t) HSI_VALUE / (uint64_t) (prediv))
 800253c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800253e:	480e      	ldr	r0, [pc, #56]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002540:	f7fd fde0 	bl	8000104 <__udivsi3>
 8002544:	0003      	movs	r3, r0
 8002546:	001a      	movs	r2, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	4353      	muls	r3, r2
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
		}
		sysclockfreq = pllclk;
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8002552:	e005      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xe0>
	}
#if defined(RCC_CFGR_SWS_HSI48)
	case RCC_SYSCLKSOURCE_STATUS_HSI48: /* HSI48 used as system clock source */
	{
		sysclockfreq = HSI48_VALUE;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 8002558:	e002      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xe0>
	}
#endif /* RCC_CFGR_SWS_HSI48 */
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	default: /* HSI used as system clock */
	{
		sysclockfreq = HSI_VALUE;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf8>)
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
		break;
 800255e:	46c0      	nop			; (mov r8, r8)
	}
	}
	return sysclockfreq;
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b00f      	add	sp, #60	; 0x3c
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	08003194 	.word	0x08003194
 8002570:	080031a4 	.word	0x080031a4
 8002574:	40021000 	.word	0x40021000
 8002578:	007a1200 	.word	0x007a1200
 800257c:	02dc6c00 	.word	0x02dc6c00

08002580 <HAL_RCC_GetHCLKFreq>:
 * 
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_RCC_GetHCLKFreq+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency     
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8002598:	f7ff fff2 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 800259c:	0001      	movs	r1, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a0:	685b      	ldr	r3, [r3, #4]
					>> RCC_CFGR_PPRE_BITNUMBER]);
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	2207      	movs	r2, #7
 80025a6:	4013      	ands	r3, r2
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	40d9      	lsrs	r1, r3
 80025ae:	000b      	movs	r3, r1
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	40021000 	.word	0x40021000
 80025bc:	080031c4 	.word	0x080031c4

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
 *         the backup registers) and RCC_BDCR register are set to their reset values.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
	uint32_t temp_reg = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- RTC configuration -------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	025b      	lsls	r3, r3, #9
 80025d8:	4013      	ands	r3, r2
 80025da:	d100      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80025dc:	e08e      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
			== (RCC_PERIPHCLK_RTC)) {
		/* check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		FlagStatus pwrclkchanged = RESET;
 80025de:	2017      	movs	r0, #23
 80025e0:	183b      	adds	r3, r7, r0
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]

		/* As soon as function is called to change RTC clock source, activation of the 
		 power domain is done. */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80025e6:	4b6e      	ldr	r3, [pc, #440]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	055b      	lsls	r3, r3, #21
 80025ee:	4013      	ands	r3, r2
 80025f0:	d110      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x54>
			__HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b6b      	ldr	r3, [pc, #428]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0549      	lsls	r1, r1, #21
 80025fc:	430a      	orrs	r2, r1
 80025fe:	61da      	str	r2, [r3, #28]
 8002600:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	055b      	lsls	r3, r3, #21
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 800260e:	183b      	adds	r3, r7, r0
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002614:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4013      	ands	r3, r2
 800261e:	d11a      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x96>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8002620:	4b60      	ldr	r3, [pc, #384]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002626:	2180      	movs	r1, #128	; 0x80
 8002628:	0049      	lsls	r1, r1, #1
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800262e:	f7fe f9b7 	bl	80009a0 <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	613b      	str	r3, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002636:	e008      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x8a>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002638:	f7fe f9b2 	bl	80009a0 <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x8a>
					return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0a6      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800264a:	4b56      	ldr	r3, [pc, #344]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4013      	ands	r3, r2
 8002654:	d0f0      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x78>
				}
			}
		}

		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002656:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002658:	6a1a      	ldr	r2, [r3, #32]
 800265a:	23c0      	movs	r3, #192	; 0xc0
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
		if ((temp_reg != 0x00000000U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d034      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
				&& (temp_reg
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	23c0      	movs	r3, #192	; 0xc0
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4013      	ands	r3, r2
				&& (temp_reg
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d02c      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
			/* Store the content of BDCR register before the reset of Backup Domain */
			temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002678:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800267e:	4013      	ands	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8002682:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	0249      	lsls	r1, r1, #9
 800268c:	430a      	orrs	r2, r1
 800268e:	621a      	str	r2, [r3, #32]
			__HAL_RCC_BACKUPRESET_RELEASE();
 8002690:	4b43      	ldr	r3, [pc, #268]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002692:	6a1a      	ldr	r2, [r3, #32]
 8002694:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002696:	4945      	ldr	r1, [pc, #276]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002698:	400a      	ands	r2, r1
 800269a:	621a      	str	r2, [r3, #32]
			/* Restore the Content of BDCR register */
			RCC->BDCR = temp_reg;
 800269c:	4b40      	ldr	r3, [pc, #256]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	621a      	str	r2, [r3, #32]

			/* Wait for LSERDY if LSE was enabled */
			if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON)) {
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80026aa:	f7fe f979 	bl	80009a0 <HAL_GetTick>
 80026ae:	0003      	movs	r3, r0
 80026b0:	613b      	str	r3, [r7, #16]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80026b2:	e009      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80026b4:	f7fe f974 	bl	80009a0 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	4a3c      	ldr	r2, [pc, #240]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
						return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e067      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	2202      	movs	r2, #2
 80026ce:	4013      	ands	r3, r2
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d2:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026e2:	430a      	orrs	r2, r1
 80026e4:	621a      	str	r2, [r3, #32]

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 80026e6:	2317      	movs	r3, #23
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
			__HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026f6:	492f      	ldr	r1, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80026f8:	400a      	ands	r2, r1
 80026fa:	61da      	str	r2, [r3, #28]
		}
	}

	/*------------------------------- USART1 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x15a>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	2203      	movs	r2, #3
 800270c:	4393      	bics	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002716:	430a      	orrs	r2, r1
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
	}

#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
	/*----------------------------- USART2 Configuration --------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2202      	movs	r2, #2
 8002720:	4013      	ands	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x178>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002734:	430a      	orrs	r2, r1
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
	/* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
	/*----------------------------- USART3 Configuration --------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	02db      	lsls	r3, r3, #11
 8002740:	4013      	ands	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x198>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

		/* Configure the USART3 clock source */
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002754:	430a      	orrs	r2, r1
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
	}
#endif /* STM32F091xC || STM32F098xx */  

	/*------------------------------ I2C1 Configuration ------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2220      	movs	r2, #32
 800275e:	4013      	ands	r3, r2
 8002760:	d009      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
			== RCC_PERIPHCLK_I2C1) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	2210      	movs	r2, #16
 8002768:	4393      	bics	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002772:	430a      	orrs	r2, r1
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
	/*------------------------------ CEC clock Configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4013      	ands	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
			== RCC_PERIPHCLK_CEC) {
		/* Check the parameters */
		assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	4393      	bics	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699a      	ldr	r2, [r3, #24]
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002792:	430a      	orrs	r2, r1
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
	/* STM32F051x8 || STM32F058xx ||                */
	/* STM32F071xB || STM32F072xB || STM32F078xx || */
	/* STM32F091xC || STM32F098xx */

	return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b006      	add	sp, #24
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
 80027a8:	fffffcff 	.word	0xfffffcff
 80027ac:	fffeffff 	.word	0xfffeffff
 80027b0:	00001388 	.word	0x00001388
 80027b4:	efffffff 	.word	0xefffffff
 80027b8:	fffcffff 	.word	0xfffcffff
 80027bc:	fff3ffff 	.word	0xfff3ffff

080027c0 <HAL_UART_Init>:
 * @brief Initialize the UART mode according to the specified
 *        parameters in the UART_InitTypeDef and initialize the associated handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_UART_Init+0x12>
		return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e044      	b.n	800285c <HAL_UART_Init+0x9c>
	} else {
		/* Check the parameters */
		assert_param(IS_UART_INSTANCE(huart->Instance));
	}

	if (huart->gState == HAL_UART_STATE_RESET) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d107      	bne.n	80027ea <HAL_UART_Init+0x2a>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2274      	movs	r2, #116	; 0x74
 80027de:	2100      	movs	r1, #0
 80027e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fd ffe1 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2224      	movs	r2, #36	; 0x24
 80027ee:	679a      	str	r2, [r3, #120]	; 0x78

	__HAL_UART_DISABLE(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

	/* Set the UART Communication parameters */
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0018      	movs	r0, r3
 8002804:	f000 f8da 	bl	80029bc <UART_SetConfig>
 8002808:	0003      	movs	r3, r0
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_UART_Init+0x52>
		return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e024      	b.n	800285c <HAL_UART_Init+0x9c>
	}

	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_UART_Init+0x62>
		UART_AdvFeatureConfig(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 fab5 	bl	8002d8c <UART_AdvFeatureConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
	 - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	490d      	ldr	r1, [pc, #52]	; (8002864 <HAL_UART_Init+0xa4>)
 800282e:	400a      	ands	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
	CLEAR_BIT(huart->Instance->CR3,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	212a      	movs	r1, #42	; 0x2a
 800283e:	438a      	bics	r2, r1
 8002840:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

	__HAL_UART_ENABLE(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

	/* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
	return (UART_CheckIdleState(huart));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0018      	movs	r0, r3
 8002856:	f000 fb4d 	bl	8002ef4 <UART_CheckIdleState>
 800285a:	0003      	movs	r3, r0
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}
 8002864:	ffffb7ff 	.word	0xffffb7ff

08002868 <HAL_UART_Transmit>:
 * @param Size    Amount of data elements (u8 or u16) to be sent.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	801a      	strh	r2, [r3, #0]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;
	uint32_t tickstart;

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287c:	2b20      	cmp	r3, #32
 800287e:	d000      	beq.n	8002882 <HAL_UART_Transmit+0x1a>
 8002880:	e096      	b.n	80029b0 <HAL_UART_Transmit+0x148>
		if ((pData == NULL) || (Size == 0U)) {
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_UART_Transmit+0x28>
 8002888:	1dbb      	adds	r3, r7, #6
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_UART_Transmit+0x2c>
			return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e08e      	b.n	80029b2 <HAL_UART_Transmit+0x14a>
		}

		/* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
		 should be aligned on a u16 frontier, as data to be filled into TDR will be
		 handled through a u16 cast. */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	015b      	lsls	r3, r3, #5
 800289c:	429a      	cmp	r2, r3
 800289e:	d109      	bne.n	80028b4 <HAL_UART_Transmit+0x4c>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_UART_Transmit+0x4c>
			if ((((uint32_t) pData) & 1U) != 0U) {
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2201      	movs	r2, #1
 80028ac:	4013      	ands	r3, r2
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_Transmit+0x4c>
				return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e07e      	b.n	80029b2 <HAL_UART_Transmit+0x14a>
			}
		}

		__HAL_LOCK(huart);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2274      	movs	r2, #116	; 0x74
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Transmit+0x5a>
 80028be:	2302      	movs	r3, #2
 80028c0:	e077      	b.n	80029b2 <HAL_UART_Transmit+0x14a>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2274      	movs	r2, #116	; 0x74
 80028c6:	2101      	movs	r1, #1
 80028c8:	5499      	strb	r1, [r3, r2]

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	2100      	movs	r1, #0
 80028d0:	5099      	str	r1, [r3, r2]
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2221      	movs	r2, #33	; 0x21
 80028d6:	679a      	str	r2, [r3, #120]	; 0x78

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 80028d8:	f7fe f862 	bl	80009a0 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	617b      	str	r3, [r7, #20]

		huart->TxXferSize = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1dba      	adds	r2, r7, #6
 80028e4:	2150      	movs	r1, #80	; 0x50
 80028e6:	8812      	ldrh	r2, [r2, #0]
 80028e8:	525a      	strh	r2, [r3, r1]
		huart->TxXferCount = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1dba      	adds	r2, r7, #6
 80028ee:	2152      	movs	r1, #82	; 0x52
 80028f0:	8812      	ldrh	r2, [r2, #0]
 80028f2:	525a      	strh	r2, [r3, r1]

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	015b      	lsls	r3, r3, #5
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d108      	bne.n	8002912 <HAL_UART_Transmit+0xaa>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d104      	bne.n	8002912 <HAL_UART_Transmit+0xaa>
			pdata8bits = NULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
			pdata16bits = (uint16_t*) pData;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	e003      	b.n	800291a <HAL_UART_Transmit+0xb2>
		} else {
			pdata8bits = pData;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
		}

		__HAL_UNLOCK(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2274      	movs	r2, #116	; 0x74
 800291e:	2100      	movs	r1, #0
 8002920:	5499      	strb	r1, [r3, r2]

		while (huart->TxXferCount > 0U) {
 8002922:	e02d      	b.n	8002980 <HAL_UART_Transmit+0x118>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	0013      	movs	r3, r2
 800292e:	2200      	movs	r2, #0
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	f000 fb27 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002936:	1e03      	subs	r3, r0, #0
 8002938:	d001      	beq.n	800293e <HAL_UART_Transmit+0xd6>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e039      	b.n	80029b2 <HAL_UART_Transmit+0x14a>
			}
			if (pdata8bits == NULL) {
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <HAL_UART_Transmit+0xf4>
				huart->Instance->TDR = (uint16_t) (*pdata16bits & 0x01FFU);
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	05d2      	lsls	r2, r2, #23
 800294e:	0dd2      	lsrs	r2, r2, #23
 8002950:	b292      	uxth	r2, r2
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28
				pdata16bits++;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	3302      	adds	r3, #2
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e008      	b.n	800296e <HAL_UART_Transmit+0x106>
			} else {
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	b292      	uxth	r2, r2
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
				pdata8bits++;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	3301      	adds	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2252      	movs	r2, #82	; 0x52
 8002972:	5a9b      	ldrh	r3, [r3, r2]
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b299      	uxth	r1, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2252      	movs	r2, #82	; 0x52
 800297e:	5299      	strh	r1, [r3, r2]
		while (huart->TxXferCount > 0U) {
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2252      	movs	r2, #82	; 0x52
 8002984:	5a9b      	ldrh	r3, [r3, r2]
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1cb      	bne.n	8002924 <HAL_UART_Transmit+0xbc>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	0013      	movs	r3, r2
 8002996:	2200      	movs	r2, #0
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	f000 faf3 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_UART_Transmit+0x13e>
				Timeout) != HAL_OK) {
			return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e005      	b.n	80029b2 <HAL_UART_Transmit+0x14a>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	679a      	str	r2, [r3, #120]	; 0x78

		return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_UART_Transmit+0x14a>
	} else {
		return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
	}
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b008      	add	sp, #32
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	HAL_StatusTypeDef ret = HAL_OK;
 80029c4:	231e      	movs	r3, #30
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4abe      	ldr	r2, [pc, #760]	; (8002ce4 <UART_SetConfig+0x328>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4ab9      	ldr	r2, [pc, #740]	; (8002ce8 <UART_SetConfig+0x32c>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	617b      	str	r3, [r7, #20]

	tmpreg |= huart->Init.OneBitSampling;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4ab0      	ldr	r2, [pc, #704]	; (8002cec <UART_SetConfig+0x330>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4aac      	ldr	r2, [pc, #688]	; (8002cf0 <UART_SetConfig+0x334>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d127      	bne.n	8002a92 <UART_SetConfig+0xd6>
 8002a42:	4bac      	ldr	r3, [pc, #688]	; (8002cf4 <UART_SetConfig+0x338>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	2203      	movs	r2, #3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d00d      	beq.n	8002a6a <UART_SetConfig+0xae>
 8002a4e:	d81b      	bhi.n	8002a88 <UART_SetConfig+0xcc>
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d014      	beq.n	8002a7e <UART_SetConfig+0xc2>
 8002a54:	d818      	bhi.n	8002a88 <UART_SetConfig+0xcc>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <UART_SetConfig+0xa4>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00a      	beq.n	8002a74 <UART_SetConfig+0xb8>
 8002a5e:	e013      	b.n	8002a88 <UART_SetConfig+0xcc>
 8002a60:	231f      	movs	r3, #31
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e0bd      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002a6a:	231f      	movs	r3, #31
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e0b8      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002a74:	231f      	movs	r3, #31
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2204      	movs	r2, #4
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e0b3      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002a7e:	231f      	movs	r3, #31
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	2208      	movs	r2, #8
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e0ae      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002a88:	231f      	movs	r3, #31
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e0a9      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a98      	ldr	r2, [pc, #608]	; (8002cf8 <UART_SetConfig+0x33c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d134      	bne.n	8002b06 <UART_SetConfig+0x14a>
 8002a9c:	4b95      	ldr	r3, [pc, #596]	; (8002cf4 <UART_SetConfig+0x338>)
 8002a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa0:	23c0      	movs	r3, #192	; 0xc0
 8002aa2:	029b      	lsls	r3, r3, #10
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	22c0      	movs	r2, #192	; 0xc0
 8002aa8:	0292      	lsls	r2, r2, #10
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d017      	beq.n	8002ade <UART_SetConfig+0x122>
 8002aae:	22c0      	movs	r2, #192	; 0xc0
 8002ab0:	0292      	lsls	r2, r2, #10
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d822      	bhi.n	8002afc <UART_SetConfig+0x140>
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	0292      	lsls	r2, r2, #10
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <UART_SetConfig+0x136>
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	0292      	lsls	r2, r2, #10
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d81a      	bhi.n	8002afc <UART_SetConfig+0x140>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <UART_SetConfig+0x118>
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	0252      	lsls	r2, r2, #9
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00a      	beq.n	8002ae8 <UART_SetConfig+0x12c>
 8002ad2:	e013      	b.n	8002afc <UART_SetConfig+0x140>
 8002ad4:	231f      	movs	r3, #31
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e083      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002ade:	231f      	movs	r3, #31
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e07e      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002ae8:	231f      	movs	r3, #31
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e079      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002af2:	231f      	movs	r3, #31
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2208      	movs	r2, #8
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e074      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002afc:	231f      	movs	r3, #31
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2210      	movs	r2, #16
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e06f      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	; (8002cfc <UART_SetConfig+0x340>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d134      	bne.n	8002b7a <UART_SetConfig+0x1be>
 8002b10:	4b78      	ldr	r3, [pc, #480]	; (8002cf4 <UART_SetConfig+0x338>)
 8002b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b14:	23c0      	movs	r3, #192	; 0xc0
 8002b16:	031b      	lsls	r3, r3, #12
 8002b18:	4013      	ands	r3, r2
 8002b1a:	22c0      	movs	r2, #192	; 0xc0
 8002b1c:	0312      	lsls	r2, r2, #12
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d017      	beq.n	8002b52 <UART_SetConfig+0x196>
 8002b22:	22c0      	movs	r2, #192	; 0xc0
 8002b24:	0312      	lsls	r2, r2, #12
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d822      	bhi.n	8002b70 <UART_SetConfig+0x1b4>
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	0312      	lsls	r2, r2, #12
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <UART_SetConfig+0x1aa>
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	0312      	lsls	r2, r2, #12
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d81a      	bhi.n	8002b70 <UART_SetConfig+0x1b4>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <UART_SetConfig+0x18c>
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	02d2      	lsls	r2, r2, #11
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00a      	beq.n	8002b5c <UART_SetConfig+0x1a0>
 8002b46:	e013      	b.n	8002b70 <UART_SetConfig+0x1b4>
 8002b48:	231f      	movs	r3, #31
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e049      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002b52:	231f      	movs	r3, #31
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2202      	movs	r2, #2
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e044      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002b5c:	231f      	movs	r3, #31
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2204      	movs	r2, #4
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e03f      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002b66:	231f      	movs	r3, #31
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e03a      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002b70:	231f      	movs	r3, #31
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2210      	movs	r2, #16
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e035      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a60      	ldr	r2, [pc, #384]	; (8002d00 <UART_SetConfig+0x344>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d104      	bne.n	8002b8e <UART_SetConfig+0x1d2>
 8002b84:	231f      	movs	r3, #31
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e02b      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5c      	ldr	r2, [pc, #368]	; (8002d04 <UART_SetConfig+0x348>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d104      	bne.n	8002ba2 <UART_SetConfig+0x1e6>
 8002b98:	231f      	movs	r3, #31
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e021      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <UART_SetConfig+0x34c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d104      	bne.n	8002bb6 <UART_SetConfig+0x1fa>
 8002bac:	231f      	movs	r3, #31
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e017      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a54      	ldr	r2, [pc, #336]	; (8002d0c <UART_SetConfig+0x350>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d104      	bne.n	8002bca <UART_SetConfig+0x20e>
 8002bc0:	231f      	movs	r3, #31
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e00d      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a50      	ldr	r2, [pc, #320]	; (8002d10 <UART_SetConfig+0x354>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d104      	bne.n	8002bde <UART_SetConfig+0x222>
 8002bd4:	231f      	movs	r3, #31
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e003      	b.n	8002be6 <UART_SetConfig+0x22a>
 8002bde:	231f      	movs	r3, #31
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2210      	movs	r2, #16
 8002be4:	701a      	strb	r2, [r3, #0]

	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d15d      	bne.n	8002cae <UART_SetConfig+0x2f2>
		switch (clocksource) {
 8002bf2:	231f      	movs	r3, #31
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d015      	beq.n	8002c28 <UART_SetConfig+0x26c>
 8002bfc:	dc18      	bgt.n	8002c30 <UART_SetConfig+0x274>
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00d      	beq.n	8002c1e <UART_SetConfig+0x262>
 8002c02:	dc15      	bgt.n	8002c30 <UART_SetConfig+0x274>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <UART_SetConfig+0x252>
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d005      	beq.n	8002c18 <UART_SetConfig+0x25c>
 8002c0c:	e010      	b.n	8002c30 <UART_SetConfig+0x274>
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8002c0e:	f7ff fcc1 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8002c12:	0003      	movs	r3, r0
 8002c14:	61bb      	str	r3, [r7, #24]
			break;
 8002c16:	e012      	b.n	8002c3e <UART_SetConfig+0x282>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8002c18:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <UART_SetConfig+0x358>)
 8002c1a:	61bb      	str	r3, [r7, #24]
			break;
 8002c1c:	e00f      	b.n	8002c3e <UART_SetConfig+0x282>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8002c1e:	f7ff fc2f 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 8002c22:	0003      	movs	r3, r0
 8002c24:	61bb      	str	r3, [r7, #24]
			break;
 8002c26:	e00a      	b.n	8002c3e <UART_SetConfig+0x282>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	61bb      	str	r3, [r7, #24]
			break;
 8002c2e:	e006      	b.n	8002c3e <UART_SetConfig+0x282>
		default:
			pclk = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
			ret = HAL_ERROR;
 8002c34:	231e      	movs	r3, #30
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
			break;
 8002c3c:	46c0      	nop			; (mov r8, r8)
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if (pclk != 0U) {
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d100      	bne.n	8002c46 <UART_SetConfig+0x28a>
 8002c44:	e095      	b.n	8002d72 <UART_SetConfig+0x3b6>
			usartdiv = (uint16_t) (UART_DIV_SAMPLING8(pclk,
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	005a      	lsls	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	18d2      	adds	r2, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f7fd fa53 	bl	8000104 <__udivsi3>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	613b      	str	r3, [r7, #16]
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	d91c      	bls.n	8002ca4 <UART_SetConfig+0x2e8>
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	025b      	lsls	r3, r3, #9
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d217      	bcs.n	8002ca4 <UART_SetConfig+0x2e8>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	200e      	movs	r0, #14
 8002c7a:	183b      	adds	r3, r7, r0
 8002c7c:	210f      	movs	r1, #15
 8002c7e:	438a      	bics	r2, r1
 8002c80:	801a      	strh	r2, [r3, #0]
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2207      	movs	r2, #7
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	183b      	adds	r3, r7, r0
 8002c90:	183a      	adds	r2, r7, r0
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	801a      	strh	r2, [r3, #0]
				huart->Instance->BRR = brrtemp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	183a      	adds	r2, r7, r0
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e066      	b.n	8002d72 <UART_SetConfig+0x3b6>
			} else {
				ret = HAL_ERROR;
 8002ca4:	231e      	movs	r3, #30
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e061      	b.n	8002d72 <UART_SetConfig+0x3b6>
			}
		}
	} else {
		switch (clocksource) {
 8002cae:	231f      	movs	r3, #31
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d02f      	beq.n	8002d18 <UART_SetConfig+0x35c>
 8002cb8:	dc32      	bgt.n	8002d20 <UART_SetConfig+0x364>
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d00d      	beq.n	8002cda <UART_SetConfig+0x31e>
 8002cbe:	dc2f      	bgt.n	8002d20 <UART_SetConfig+0x364>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <UART_SetConfig+0x30e>
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d005      	beq.n	8002cd4 <UART_SetConfig+0x318>
 8002cc8:	e02a      	b.n	8002d20 <UART_SetConfig+0x364>
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8002cca:	f7ff fc63 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	61bb      	str	r3, [r7, #24]
			break;
 8002cd2:	e02c      	b.n	8002d2e <UART_SetConfig+0x372>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <UART_SetConfig+0x358>)
 8002cd6:	61bb      	str	r3, [r7, #24]
			break;
 8002cd8:	e029      	b.n	8002d2e <UART_SetConfig+0x372>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8002cda:	f7ff fbd1 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	61bb      	str	r3, [r7, #24]
			break;
 8002ce2:	e024      	b.n	8002d2e <UART_SetConfig+0x372>
 8002ce4:	efff69f3 	.word	0xefff69f3
 8002ce8:	ffffcfff 	.word	0xffffcfff
 8002cec:	fffff4ff 	.word	0xfffff4ff
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40004400 	.word	0x40004400
 8002cfc:	40004800 	.word	0x40004800
 8002d00:	40004c00 	.word	0x40004c00
 8002d04:	40005000 	.word	0x40005000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	40011800 	.word	0x40011800
 8002d10:	40011c00 	.word	0x40011c00
 8002d14:	007a1200 	.word	0x007a1200
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	61bb      	str	r3, [r7, #24]
			break;
 8002d1e:	e006      	b.n	8002d2e <UART_SetConfig+0x372>
		default:
			pclk = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
			ret = HAL_ERROR;
 8002d24:	231e      	movs	r3, #30
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
			break;
 8002d2c:	46c0      	nop			; (mov r8, r8)
		}

		if (pclk != 0U) {
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01e      	beq.n	8002d72 <UART_SetConfig+0x3b6>
			/* USARTDIV must be greater than or equal to 0d16 */
			usartdiv = (uint16_t) (UART_DIV_SAMPLING16(pclk,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	085a      	lsrs	r2, r3, #1
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	18d2      	adds	r2, r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f7fd f9dd 	bl	8000104 <__udivsi3>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	613b      	str	r3, [r7, #16]
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	d909      	bls.n	8002d6a <UART_SetConfig+0x3ae>
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	025b      	lsls	r3, r3, #9
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d204      	bcs.n	8002d6a <UART_SetConfig+0x3ae>
				huart->Instance->BRR = usartdiv;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	e003      	b.n	8002d72 <UART_SetConfig+0x3b6>
			} else {
				ret = HAL_ERROR;
 8002d6a:	231e      	movs	r3, #30
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	665a      	str	r2, [r3, #100]	; 0x64
	huart->TxISR = NULL;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	669a      	str	r2, [r3, #104]	; 0x68

	return ret;
 8002d7e:	231e      	movs	r3, #30
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	781b      	ldrb	r3, [r3, #0]
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b008      	add	sp, #32
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <UART_AdvFeatureConfig+0x2a>
			UART_ADVFEATURE_TXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a4a      	ldr	r2, [pc, #296]	; (8002ed0 <UART_AdvFeatureConfig+0x144>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.TxPinLevelInvert);
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <UART_AdvFeatureConfig+0x4c>
			UART_ADVFEATURE_RXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a43      	ldr	r2, [pc, #268]	; (8002ed4 <UART_AdvFeatureConfig+0x148>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.RxPinLevelInvert);
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2204      	movs	r2, #4
 8002dde:	4013      	ands	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <UART_AdvFeatureConfig+0x6e>
			UART_ADVFEATURE_DATAINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a3b      	ldr	r2, [pc, #236]	; (8002ed8 <UART_AdvFeatureConfig+0x14c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.DataInvert);
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2208      	movs	r2, #8
 8002e00:	4013      	ands	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <UART_AdvFeatureConfig+0x90>
			UART_ADVFEATURE_SWAP_INIT)) {
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a34      	ldr	r2, [pc, #208]	; (8002edc <UART_AdvFeatureConfig+0x150>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.Swap);
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2210      	movs	r2, #16
 8002e22:	4013      	ands	r3, r2
 8002e24:	d00b      	beq.n	8002e3e <UART_AdvFeatureConfig+0xb2>
			UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <UART_AdvFeatureConfig+0x154>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.OverrunDisable);
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2220      	movs	r2, #32
 8002e44:	4013      	ands	r3, r2
 8002e46:	d00b      	beq.n	8002e60 <UART_AdvFeatureConfig+0xd4>
			UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4a25      	ldr	r2, [pc, #148]	; (8002ee4 <UART_AdvFeatureConfig+0x158>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.DMADisableonRxError);
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2240      	movs	r2, #64	; 0x40
 8002e66:	4013      	ands	r3, r2
 8002e68:	d01d      	beq.n	8002ea6 <UART_AdvFeatureConfig+0x11a>
			UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(
				IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <UART_AdvFeatureConfig+0x15c>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.AutoBaudRateEnable);
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	035b      	lsls	r3, r3, #13
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10b      	bne.n	8002ea6 <UART_AdvFeatureConfig+0x11a>
				== UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
			assert_param(
					IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a15      	ldr	r2, [pc, #84]	; (8002eec <UART_AdvFeatureConfig+0x160>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
					huart->AdvancedInit.AutoBaudRateMode);
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	4013      	ands	r3, r2
 8002eae:	d00b      	beq.n	8002ec8 <UART_AdvFeatureConfig+0x13c>
			UART_ADVFEATURE_MSBFIRST_INIT)) {
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <UART_AdvFeatureConfig+0x164>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.MSBFirst);
	}
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	fffdffff 	.word	0xfffdffff
 8002ed4:	fffeffff 	.word	0xfffeffff
 8002ed8:	fffbffff 	.word	0xfffbffff
 8002edc:	ffff7fff 	.word	0xffff7fff
 8002ee0:	ffffefff 	.word	0xffffefff
 8002ee4:	ffffdfff 	.word	0xffffdfff
 8002ee8:	ffefffff 	.word	0xffefffff
 8002eec:	ff9fffff 	.word	0xff9fffff
 8002ef0:	fff7ffff 	.word	0xfff7ffff

08002ef4 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Initialize the UART ErrorCode */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	2100      	movs	r1, #0
 8002f02:	5099      	str	r1, [r3, r2]

	/* Init tickstart for timeout management */
	tickstart = HAL_GetTick();
 8002f04:	f7fd fd4c 	bl	80009a0 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	60fb      	str	r3, [r7, #12]

	/* Check if the Transmitter is enabled */
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2208      	movs	r2, #8
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d10c      	bne.n	8002f34 <UART_CheckIdleState+0x40>
		/* Wait until TEACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	0391      	lsls	r1, r2, #14
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <UART_CheckIdleState+0x8c>)
 8002f24:	9200      	str	r2, [sp, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f000 f82c 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d001      	beq.n	8002f34 <UART_CheckIdleState+0x40>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e021      	b.n	8002f78 <UART_CheckIdleState+0x84>
		}
	}

	/* Check if the Receiver is enabled */
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d10c      	bne.n	8002f5c <UART_CheckIdleState+0x68>
		/* Wait until REACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	03d1      	lsls	r1, r2, #15
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <UART_CheckIdleState+0x8c>)
 8002f4c:	9200      	str	r2, [sp, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f000 f818 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d001      	beq.n	8002f5c <UART_CheckIdleState+0x68>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e00d      	b.n	8002f78 <UART_CheckIdleState+0x84>
		}
	}

	/* Initialize the UART State */
	huart->gState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	679a      	str	r2, [r3, #120]	; 0x78
	huart->RxState = HAL_UART_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	67da      	str	r2, [r3, #124]	; 0x7c
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60

	__HAL_UNLOCK(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2274      	movs	r2, #116	; 0x74
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]

	return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b004      	add	sp, #16
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	01ffffff 	.word	0x01ffffff

08002f84 <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b094      	sub	sp, #80	; 0x50
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	701a      	strb	r2, [r3, #0]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8002f94:	e0a3      	b.n	80030de <UART_WaitOnFlagUntilTimeout+0x15a>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8002f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f98:	3301      	adds	r3, #1
 8002f9a:	d100      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002f9c:	e09f      	b.n	80030de <UART_WaitOnFlagUntilTimeout+0x15a>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002f9e:	f7fd fcff 	bl	80009a0 <HAL_GetTick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d13d      	bne.n	8003030 <UART_WaitOnFlagUntilTimeout+0xac>
 \return               Priority Mask value
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void) {
	uint32_t result;

	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
	return (result);
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
				 interrupts for the interrupt process */
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8002fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 \brief   Set Priority Mask
 \details Assigns the given value to the Priority Mask Register.
 \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask) {
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	f383 8810 	msr	PRIMASK, r3
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	494c      	ldr	r1, [pc, #304]	; (8003108 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	f383 8810 	msr	PRIMASK, r3
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
	return (result);
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	f383 8810 	msr	PRIMASK, r3
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2101      	movs	r1, #1
 8003008:	438a      	bics	r2, r1
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	46c0      	nop			; (mov r8, r8)

				huart->gState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	679a      	str	r2, [r3, #120]	; 0x78
				huart->RxState = HAL_UART_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	67da      	str	r2, [r3, #124]	; 0x7c

				__HAL_UNLOCK(huart);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2274      	movs	r2, #116	; 0x74
 8003028:	2100      	movs	r1, #0
 800302a:	5499      	strb	r1, [r3, r2]

				return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e067      	b.n	8003100 <UART_WaitOnFlagUntilTimeout+0x17c>
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2204      	movs	r2, #4
 8003038:	4013      	ands	r3, r2
 800303a:	d050      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0x15a>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	401a      	ands	r2, r3
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	429a      	cmp	r2, r3
 800304e:	d146      	bne.n	80030de <UART_WaitOnFlagUntilTimeout+0x15a>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	621a      	str	r2, [r3, #32]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305a:	f3ef 8310 	mrs	r3, PRIMASK
 800305e:	613b      	str	r3, [r7, #16]
	return (result);
 8003060:	693b      	ldr	r3, [r7, #16]

					/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
					 interrupts for the interrupt process */
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003064:	2301      	movs	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f383 8810 	msr	PRIMASK, r3
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4923      	ldr	r1, [pc, #140]	; (8003108 <UART_WaitOnFlagUntilTimeout+0x184>)
 800307c:	400a      	ands	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003082:	61bb      	str	r3, [r7, #24]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			; (mov r8, r8)
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	61fb      	str	r3, [r7, #28]
	return (result);
 8003092:	69fb      	ldr	r3, [r7, #28]
							(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003094:	64bb      	str	r3, [r7, #72]	; 0x48
 8003096:	2301      	movs	r3, #1
 8003098:	623b      	str	r3, [r7, #32]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	438a      	bics	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			; (mov r8, r8)

					huart->gState = HAL_UART_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	679a      	str	r2, [r3, #120]	; 0x78
					huart->RxState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	67da      	str	r2, [r3, #124]	; 0x7c
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	2120      	movs	r1, #32
 80030d0:	5099      	str	r1, [r3, r2]

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2274      	movs	r2, #116	; 0x74
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]

					return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e010      	b.n	8003100 <UART_WaitOnFlagUntilTimeout+0x17c>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	425a      	negs	r2, r3
 80030ee:	4153      	adcs	r3, r2
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	001a      	movs	r2, r3
 80030f4:	1dfb      	adds	r3, r7, #7
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d100      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x17a>
 80030fc:	e74b      	b.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b014      	add	sp, #80	; 0x50
 8003106:	bd80      	pop	{r7, pc}
 8003108:	fffffe5f 	.word	0xfffffe5f

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	2600      	movs	r6, #0
 8003110:	4d0c      	ldr	r5, [pc, #48]	; (8003144 <__libc_init_array+0x38>)
 8003112:	4c0d      	ldr	r4, [pc, #52]	; (8003148 <__libc_init_array+0x3c>)
 8003114:	1b64      	subs	r4, r4, r5
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	42a6      	cmp	r6, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	2600      	movs	r6, #0
 800311e:	f000 f821 	bl	8003164 <_init>
 8003122:	4d0a      	ldr	r5, [pc, #40]	; (800314c <__libc_init_array+0x40>)
 8003124:	4c0a      	ldr	r4, [pc, #40]	; (8003150 <__libc_init_array+0x44>)
 8003126:	1b64      	subs	r4, r4, r5
 8003128:	10a4      	asrs	r4, r4, #2
 800312a:	42a6      	cmp	r6, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	00b3      	lsls	r3, r6, #2
 8003132:	58eb      	ldr	r3, [r5, r3]
 8003134:	4798      	blx	r3
 8003136:	3601      	adds	r6, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	00b3      	lsls	r3, r6, #2
 800313c:	58eb      	ldr	r3, [r5, r3]
 800313e:	4798      	blx	r3
 8003140:	3601      	adds	r6, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	080031cc 	.word	0x080031cc
 8003148:	080031cc 	.word	0x080031cc
 800314c:	080031cc 	.word	0x080031cc
 8003150:	080031d0 	.word	0x080031d0

08003154 <memset>:
 8003154:	0003      	movs	r3, r0
 8003156:	1882      	adds	r2, r0, r2
 8003158:	4293      	cmp	r3, r2
 800315a:	d100      	bne.n	800315e <memset+0xa>
 800315c:	4770      	bx	lr
 800315e:	7019      	strb	r1, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	e7f9      	b.n	8003158 <memset+0x4>

08003164 <_init>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr

08003170 <_fini>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr
