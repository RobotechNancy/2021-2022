
L432KC_save_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b74  08003b74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08003b88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003b88  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee90  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddf  00000000  00000000  0002eecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00030cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  00031758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb11  00000000  00000000  00032148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c129  00000000  00000000  00051c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bffce  00000000  00000000  0005dd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011dd50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae4  00000000  00000000  0011dda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b04 	.word	0x08003b04

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003b04 	.word	0x08003b04

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \param isRep vrai si c'est une reponse a une requete, faux sinon
 * \param RepId indique le nombre de reponse atendu pour une requete et le num de la reponse pour une reponse
 * \param dataLen frame payload length in byte (0 .. 8) aka data length code
 * \param data CAN frame payload (up to 8 byte)
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b0a4      	sub	sp, #144	; 0x90
 80004c8:	af06      	add	r7, sp, #24
 80004ca:	6278      	str	r0, [r7, #36]	; 0x24
	// traitement et mise en forme de la trame
	/////////////////////////////////////////////////////////////////////////
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80004cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80004d4:	2100      	movs	r1, #0
 80004d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004d8:	f000 ff45 	bl	8001366 <HAL_CAN_GetRxMessage>

	struct CanResponse_t msg;
	msg = traitement_trame( RxHeader, RxData);
 80004dc:	463d      	mov	r5, r7
 80004de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004e2:	9304      	str	r3, [sp, #16]
 80004e4:	466c      	mov	r4, sp
 80004e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004f6:	4628      	mov	r0, r5
 80004f8:	f000 f8a6 	bl	8000648 <traitement_trame>
 80004fc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000500:	463d      	mov	r5, r7
 8000502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000506:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800050a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/////////////////////////////////////////////////////////////////////////
	switch(msg.codeFct){
 800050e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000514:	d114      	bne.n	8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	case AVANCE:;
		Tramme_Moteur_t trammeMotor;
		for(int i=0;i<8;i++){
 8000516:	2300      	movs	r3, #0
 8000518:	677b      	str	r3, [r7, #116]	; 0x74
 800051a:	e00d      	b.n	8000538 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			trammeMotor.raw_data[i] = msg.data[i];
 800051c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000522:	4413      	add	r3, r2
 8000524:	7819      	ldrb	r1, [r3, #0]
 8000526:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800052a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800052c:	4413      	add	r3, r2
 800052e:	460a      	mov	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<8;i++){
 8000532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000534:	3301      	adds	r3, #1
 8000536:	677b      	str	r3, [r7, #116]	; 0x74
 8000538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800053a:	2b07      	cmp	r3, #7
 800053c:	ddee      	ble.n	800051c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		}

	break;
 800053e:	e000      	b.n	8000542 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
	default :

	break;
 8000540:	bf00      	nop


	//renvoi un msg sur le bus can
	//uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
	//send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5) ;
}
 8000542:	bf00      	nop
 8000544:	3778      	adds	r7, #120	; 0x78
 8000546:	46bd      	mov	sp, r7
 8000548:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800054c <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR adresse) {
 800054c:	b084      	sub	sp, #16
 800054e:	b5b0      	push	{r4, r5, r7, lr}
 8000550:	b08a      	sub	sp, #40	; 0x28
 8000552:	af00      	add	r7, sp, #0
 8000554:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0b000100000000000; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800056c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0; //
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0b111100000000000; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000572:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000576:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 8000584:	230e      	movs	r3, #14
 8000586:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000588:	463b      	mov	r3, r7
 800058a:	4619      	mov	r1, r3
 800058c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000590:	f000 fd0b 	bl	8000faa <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 8000594:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000598:	f000 fdd1 	bl	800113e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 800059c:	2102      	movs	r1, #2
 800059e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80005a2:	f000 fff2 	bl	800158a <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <CAN_Config+0x88>)
 80005a8:	461d      	mov	r5, r3
 80005aa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005ba:	e885 0003 	stmia.w	r5, {r0, r1}
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)
	CanAdresse = adresse;
 80005be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <CAN_Config+0x8c>)
 80005c4:	701a      	strb	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005d0:	b004      	add	sp, #16
 80005d2:	4770      	bx	lr
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	20000028 	.word	0x20000028

080005dc <send>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_WRITE_ERROR} une erreur à eu lieu lors de l'envoie du message
*/
int send(CAN_ADDR addr, CAN_CODE_FCT codeFct , uint8_t data[], uint dataLen, bool isRep, uint repLenght){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]

	if (dataLen >8){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	d901      	bls.n	80005f4 <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <send+0x64>)
 80005f2:	e021      	b.n	8000638 <send+0x5c>
	//if(!is_valid_addr(addr)) return CAN_E_UNKNOW_ADDR;
	//if(!is_valid_code_fct(codeFct)) return CAN_E_UNKNOW_CODE_FCT;


	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dataLen; // taille des données à transmettre en octets
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28

	//adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage

	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | codeFct | repLenght | 1 << CAN_DECALAGE_ID_MSG | isRep << CAN_DECALAGE_IS_REP | repLenght;
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	431a      	orrs	r2, r3
 80005fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000600:	4313      	orrs	r3, r2
 8000602:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000606:	00d2      	lsls	r2, r2, #3
 8000608:	431a      	orrs	r2, r3
 800060a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800060c:	4313      	orrs	r3, r2
 800060e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	61fb      	str	r3, [r7, #28]
	//txHeader.ExtId = 0b11101100100100000010000011111;
	//1 111 0001 0000 10010000 00000000 1 001
	//1011 0001 00001001 00000000 0000 1 001000000011001
	txHeader.IDE = CAN_ID_EXT; //on choisit l'adressage étendue
 8000618:	2304      	movs	r3, #4
 800061a:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	f107 0118 	add.w	r1, r7, #24
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <send+0x68>)
 8000632:	f000 fdc8 	bl	80011c6 <HAL_CAN_AddTxMessage>

	return 0;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3730      	adds	r7, #48	; 0x30
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	fffffe02 	.word	0xfffffe02
 8000644:	2000002c 	.word	0x2000002c

08000648 <traitement_trame>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_READ_ERROR} erreur dans la lecture de la trame depuis le buffer
*/
struct CanResponse_t traitement_trame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 8000648:	b084      	sub	sp, #16
 800064a:	b4b0      	push	{r4, r5, r7}
 800064c:	b08d      	sub	sp, #52	; 0x34
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		struct CanResponse_t rep;
		//rep.ExtID.champId = frame.ExtId;

		rep.addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR)  ;
 800065a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800065c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000660:	60fb      	str	r3, [r7, #12]
		rep.emetteur = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR) ;
 8000662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000664:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000668:	613b      	str	r3, [r7, #16]
		rep.codeFct = (frame.ExtId & CAN_FILTER_CODE_FCT);
 800066a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800066c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8000670:	617b      	str	r3, [r7, #20]
		rep.isRep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 8000672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf14      	ite	ne
 800067e:	2301      	movne	r3, #1
 8000680:	2300      	moveq	r3, #0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	763b      	strb	r3, [r7, #24]
		rep.RepId = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 8000686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000688:	f003 0307 	and.w	r3, r3, #7
 800068c:	61fb      	str	r3, [r7, #28]
        if(!is_valid_addr(rep.addr)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_addr(rep.emetteur)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_code_fct(rep.codeFct)) return CAN_E_UNKNOW_CODE_FCT;
        if (frame.DLC >8)  return CAN_E_DATA_SIZE_TOO_LONG;*/

        rep.dataLen = frame.DLC;
 800068e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000690:	623b      	str	r3, [r7, #32]


        for (int i = 0; i < frame.DLC; i++){
 8000692:	2300      	movs	r3, #0
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000696:	e00c      	b.n	80006b2 <traitement_trame+0x6a>
            //if(data[i] <0 || data[i] > 255) return CAN_E_OOB_DATA;
            rep.data[i] = data[i];
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800069c:	4413      	add	r3, r2
 800069e:	7819      	ldrb	r1, [r3, #0]
 80006a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a6:	4413      	add	r3, r2
 80006a8:	460a      	mov	r2, r1
 80006aa:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < frame.DLC; i++){
 80006ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ae:	3301      	adds	r3, #1
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d8ee      	bhi.n	8000698 <traitement_trame+0x50>
        }


    return rep;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	461d      	mov	r5, r3
 80006be:	f107 040c 	add.w	r4, r7, #12
 80006c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	3734      	adds	r7, #52	; 0x34
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bcb0      	pop	{r4, r5, r7}
 80006d6:	b004      	add	sp, #16
 80006d8:	4770      	bx	lr
	...

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	b08b      	sub	sp, #44	; 0x2c
 80006e0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 face 	bl	8000c82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f835 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f000 f8fb 	bl	80008e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ee:	f000 f8c9 	bl	8000884 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80006f2:	f000 f891 	bl	8000818 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config(hcan1, CAN_ADDR_BASE_ROULANTE_E);
 80006f6:	4e15      	ldr	r6, [pc, #84]	; (800074c <main+0x70>)
 80006f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80006fc:	9306      	str	r3, [sp, #24]
 80006fe:	466d      	mov	r5, sp
 8000700:	f106 0410 	add.w	r4, r6, #16
 8000704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000708:	e894 0003 	ldmia.w	r4, {r0, r1}
 800070c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000710:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000714:	f7ff ff1a 	bl	800054c <CAN_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <main+0x74>)
 800071a:	463b      	mov	r3, r7
 800071c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000720:	6018      	str	r0, [r3, #0]
 8000722:	3304      	adds	r3, #4
 8000724:	8019      	strh	r1, [r3, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	80fb      	strh	r3, [r7, #6]
	 send(CAN_ADDR_RASPBERRY, REP_AVANCE, data, 5, true, 1);
 800072a:	463a      	mov	r2, r7
 800072c:	2301      	movs	r3, #1
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	2301      	movs	r3, #1
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2305      	movs	r3, #5
 8000736:	f44f 2101 	mov.w	r1, #528384	; 0x81000
 800073a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800073e:	f7ff ff4d 	bl	80005dc <send>
	  HAL_Delay(1000);
 8000742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000746:	f000 fb11 	bl	8000d6c <HAL_Delay>
  {
 800074a:	e7e5      	b.n	8000718 <main+0x3c>
 800074c:	200000d8 	.word	0x200000d8
 8000750:	08003b1c 	.word	0x08003b1c

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2244      	movs	r2, #68	; 0x44
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 f9c6 	bl	8003af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000776:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077a:	f001 fc0d 	bl	8001f98 <HAL_PWREx_ControlVoltageScaling>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000784:	f000 f8f8 	bl	8000978 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000788:	f001 fbe8 	bl	8001f5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <SystemClock_Config+0xc0>)
 800078e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000792:	4a20      	ldr	r2, [pc, #128]	; (8000814 <SystemClock_Config+0xc0>)
 8000794:	f023 0318 	bic.w	r3, r3, #24
 8000798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800079c:	2314      	movs	r3, #20
 800079e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007b4:	2301      	movs	r3, #1
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007bc:	2310      	movs	r3, #16
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007c0:	2307      	movs	r3, #7
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fc37 	bl	8002044 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007dc:	f000 f8cc 	bl	8000978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2303      	movs	r3, #3
 80007e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 f835 	bl	8002868 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000804:	f000 f8b8 	bl	8000978 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000808:	f002 fc46 	bl	8003098 <HAL_RCCEx_EnableMSIPLLMode>
}
 800080c:	bf00      	nop
 800080e:	3758      	adds	r7, #88	; 0x58
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000

08000818 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_CAN1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_CAN1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_CAN1_Init+0x64>)
 8000824:	2210      	movs	r2, #16
 8000826:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_CAN1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_CAN1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_CAN1_Init+0x64>)
 8000836:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800083a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_CAN1_Init+0x64>)
 800083e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000842:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_CAN1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_CAN1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_CAN1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_CAN1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_CAN1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_CAN1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_CAN1_Init+0x64>)
 800086a:	f000 faa3 	bl	8000db4 <HAL_CAN_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 f880 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000d8 	.word	0x200000d8
 8000880:	40006400 	.word	0x40006400

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART2_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART2_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART2_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART2_UART_Init+0x58>)
 80008c8:	f002 fce8 	bl	800329c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f851 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000054 	.word	0x20000054
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_GPIO_Init+0x8c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_GPIO_Init+0x8c>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_GPIO_Init+0x8c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_GPIO_Init+0x8c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <MX_GPIO_Init+0x8c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_GPIO_Init+0x8c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_GPIO_Init+0x8c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <MX_GPIO_Init+0x8c>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_GPIO_Init+0x8c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2108      	movs	r1, #8
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x90>)
 8000948:	f001 faf0 	bl	8001f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800094c:	2308      	movs	r3, #8
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0x90>)
 8000964:	f001 f978 	bl	8001c58 <HAL_GPIO_Init>

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_MspInit+0x44>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6613      	str	r3, [r2, #96]	; 0x60
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6593      	str	r3, [r2, #88]	; 0x58
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <HAL_CAN_MspInit+0xc0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d149      	bne.n	8000a82 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <HAL_CAN_MspInit+0xc4>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <HAL_CAN_MspInit+0xc4>)
 80009f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <HAL_CAN_MspInit+0xc4>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <HAL_CAN_MspInit+0xc4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <HAL_CAN_MspInit+0xc4>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_CAN_MspInit+0xc4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a30:	2309      	movs	r3, #9
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f001 f90b 	bl	8001c58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2013      	movs	r0, #19
 8000a48:	f001 f8cf 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a4c:	2013      	movs	r0, #19
 8000a4e:	f001 f8e8 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2014      	movs	r0, #20
 8000a58:	f001 f8c7 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a5c:	2014      	movs	r0, #20
 8000a5e:	f001 f8e0 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2015      	movs	r0, #21
 8000a68:	f001 f8bf 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a6c:	2015      	movs	r0, #21
 8000a6e:	f001 f8d8 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2016      	movs	r0, #22
 8000a78:	f001 f8b7 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000a7c:	2016      	movs	r0, #22
 8000a7e:	f001 f8d0 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40006400 	.word	0x40006400
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09e      	sub	sp, #120	; 0x78
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2254      	movs	r2, #84	; 0x54
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 f81d 	bl	8003af4 <memset>
  if(huart->Instance==USART2)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <HAL_UART_MspInit+0xcc>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d148      	bne.n	8000b56 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 f8ed 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000adc:	f7ff ff4c 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_UART_MspInit+0xd0>)
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <HAL_UART_MspInit+0xd0>)
 8000ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aea:	6593      	str	r3, [r2, #88]	; 0x58
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_UART_MspInit+0xd0>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_UART_MspInit+0xd0>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0xd0>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_UART_MspInit+0xd0>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b10:	2304      	movs	r3, #4
 8000b12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b20:	2307      	movs	r3, #7
 8000b22:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f001 f893 	bl	8001c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b44:	2303      	movs	r3, #3
 8000b46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f001 f881 	bl	8001c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3778      	adds	r7, #120	; 0x78
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40004400 	.word	0x40004400
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f8ba 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <CAN1_TX_IRQHandler+0x10>)
 8000bc2:	f000 fd08 	bl	80015d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000d8 	.word	0x200000d8

08000bd0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <CAN1_RX0_IRQHandler+0x10>)
 8000bd6:	f000 fcfe 	bl	80015d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200000d8 	.word	0x200000d8

08000be4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <CAN1_RX1_IRQHandler+0x10>)
 8000bea:	f000 fcf4 	bl	80015d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000d8 	.word	0x200000d8

08000bf8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <CAN1_SCE_IRQHandler+0x10>)
 8000bfe:	f000 fcea 	bl	80015d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000d8 	.word	0x200000d8

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
  }
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff ffea 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	; (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 ff25 	bl	8003aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fd3b 	bl	80006dc <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c74:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 8000c78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c7c:	20000104 	.word	0x20000104

08000c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_IRQHandler>

08000c82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 ffa1 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f80e 	bl	8000cb4 <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca4:	f7ff fe6e 	bl	8000984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_InitTick+0x6c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d023      	beq.n	8000d10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_InitTick+0x70>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_InitTick+0x6c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 ffad 	bl	8001c3e <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10f      	bne.n	8000d0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d809      	bhi.n	8000d04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf8:	f000 ff77 	bl	8001bea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_InitTick+0x74>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e007      	b.n	8000d14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e004      	b.n	8000d14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e001      	b.n	8000d14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000100 	.word	0x20000100

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000100 	.word	0x20000100

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d92:	bf00      	nop
 8000d94:	f7ff ffde 	bl	8000d54 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e0ed      	b.n	8000fa2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fdfa 	bl	80009cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000de8:	f7ff ffb4 	bl	8000d54 <HAL_GetTick>
 8000dec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dee:	e012      	b.n	8000e16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000df0:	f7ff ffb0 	bl	8000d54 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b0a      	cmp	r3, #10
 8000dfc:	d90b      	bls.n	8000e16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2205      	movs	r2, #5
 8000e0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e0c5      	b.n	8000fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0e5      	beq.n	8000df0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0202 	bic.w	r2, r2, #2
 8000e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e34:	f7ff ff8e 	bl	8000d54 <HAL_GetTick>
 8000e38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e3a:	e012      	b.n	8000e62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e3c:	f7ff ff8a 	bl	8000d54 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d90b      	bls.n	8000e62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2205      	movs	r2, #5
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e09f      	b.n	8000fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1e5      	bne.n	8000e3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7e1b      	ldrb	r3, [r3, #24]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d108      	bne.n	8000e8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e007      	b.n	8000e9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7e5b      	ldrb	r3, [r3, #25]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d108      	bne.n	8000eb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e007      	b.n	8000ec4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7e9b      	ldrb	r3, [r3, #26]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d108      	bne.n	8000ede <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0220 	orr.w	r2, r2, #32
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e007      	b.n	8000eee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0220 	bic.w	r2, r2, #32
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7edb      	ldrb	r3, [r3, #27]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d108      	bne.n	8000f08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0210 	bic.w	r2, r2, #16
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e007      	b.n	8000f18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0210 	orr.w	r2, r2, #16
 8000f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7f1b      	ldrb	r3, [r3, #28]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d108      	bne.n	8000f32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0208 	orr.w	r2, r2, #8
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e007      	b.n	8000f42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0208 	bic.w	r2, r2, #8
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7f5b      	ldrb	r3, [r3, #29]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d108      	bne.n	8000f5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0204 	orr.w	r2, r2, #4
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	e007      	b.n	8000f6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0204 	bic.w	r2, r2, #4
 8000f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	ea42 0103 	orr.w	r1, r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	1e5a      	subs	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b087      	sub	sp, #28
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc2:	7cfb      	ldrb	r3, [r7, #19]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d003      	beq.n	8000fd0 <HAL_CAN_ConfigFilter+0x26>
 8000fc8:	7cfb      	ldrb	r3, [r7, #19]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	f040 80aa 	bne.w	8001124 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	2201      	movs	r2, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d123      	bne.n	8001052 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	401a      	ands	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800102c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3248      	adds	r2, #72	; 0x48
 8001032:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001046:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001048:	6979      	ldr	r1, [r7, #20]
 800104a:	3348      	adds	r3, #72	; 0x48
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d122      	bne.n	80010a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	431a      	orrs	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800107a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3248      	adds	r2, #72	; 0x48
 8001080:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001094:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001096:	6979      	ldr	r1, [r7, #20]
 8001098:	3348      	adds	r3, #72	; 0x48
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d109      	bne.n	80010bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010ba:	e007      	b.n	80010cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010e6:	e007      	b.n	80010f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d107      	bne.n	8001110 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	431a      	orrs	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001116:	f023 0201 	bic.w	r2, r3, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	e006      	b.n	8001132 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
  }
}
 8001132:	4618      	mov	r0, r3
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d12e      	bne.n	80011b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2202      	movs	r2, #2
 8001156:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0201 	bic.w	r2, r2, #1
 8001168:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800116a:	f7ff fdf3 	bl	8000d54 <HAL_GetTick>
 800116e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001170:	e012      	b.n	8001198 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001172:	f7ff fdef 	bl	8000d54 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b0a      	cmp	r3, #10
 800117e:	d90b      	bls.n	8001198 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2205      	movs	r2, #5
 8001190:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e012      	b.n	80011be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1e5      	bne.n	8001172 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e006      	b.n	80011be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
  }
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b089      	sub	sp, #36	; 0x24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011e4:	7ffb      	ldrb	r3, [r7, #31]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d003      	beq.n	80011f2 <HAL_CAN_AddTxMessage+0x2c>
 80011ea:	7ffb      	ldrb	r3, [r7, #31]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	f040 80ad 	bne.w	800134c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10a      	bne.n	8001212 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001202:	2b00      	cmp	r3, #0
 8001204:	d105      	bne.n	8001212 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8095 	beq.w	800133c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	0e1b      	lsrs	r3, r3, #24
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800121c:	2201      	movs	r2, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	409a      	lsls	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001238:	68f9      	ldr	r1, [r7, #12]
 800123a:	6809      	ldr	r1, [r1, #0]
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3318      	adds	r3, #24
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	440b      	add	r3, r1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e00f      	b.n	800126a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001254:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800125a:	68f9      	ldr	r1, [r7, #12]
 800125c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800125e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3318      	adds	r3, #24
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3318      	adds	r3, #24
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	440b      	add	r3, r1
 800127a:	3304      	adds	r3, #4
 800127c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	7d1b      	ldrb	r3, [r3, #20]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d111      	bne.n	80012aa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3318      	adds	r3, #24
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	4413      	add	r3, r2
 8001292:	3304      	adds	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3318      	adds	r3, #24
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	3304      	adds	r3, #4
 80012a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3307      	adds	r3, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	061a      	lsls	r2, r3, #24
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3306      	adds	r3, #6
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	041b      	lsls	r3, r3, #16
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3305      	adds	r3, #5
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	4313      	orrs	r3, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	3204      	adds	r2, #4
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	4610      	mov	r0, r2
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	6811      	ldr	r1, [r2, #0]
 80012d2:	ea43 0200 	orr.w	r2, r3, r0
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	440b      	add	r3, r1
 80012dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3303      	adds	r3, #3
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	061a      	lsls	r2, r3, #24
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3302      	adds	r3, #2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4313      	orrs	r3, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	4610      	mov	r0, r2
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	6811      	ldr	r1, [r2, #0]
 8001308:	ea43 0200 	orr.w	r2, r3, r0
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	440b      	add	r3, r1
 8001312:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001316:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3318      	adds	r3, #24
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	6811      	ldr	r1, [r2, #0]
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3318      	adds	r3, #24
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	440b      	add	r3, r1
 8001336:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	e00e      	b.n	800135a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e006      	b.n	800135a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
  }
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001366:	b480      	push	{r7}
 8001368:	b087      	sub	sp, #28
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d003      	beq.n	800138a <HAL_CAN_GetRxMessage+0x24>
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	2b02      	cmp	r3, #2
 8001386:	f040 80f3 	bne.w	8001570 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10e      	bne.n	80013ae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d116      	bne.n	80013cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0e7      	b.n	800157e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d107      	bne.n	80013cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0d8      	b.n	800157e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	331b      	adds	r3, #27
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0204 	and.w	r2, r3, #4
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	331b      	adds	r3, #27
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	0d5b      	lsrs	r3, r3, #21
 80013fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e00b      	b.n	800141c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	331b      	adds	r3, #27
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	331b      	adds	r3, #27
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0202 	and.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	331b      	adds	r3, #27
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	3304      	adds	r3, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 020f 	and.w	r2, r3, #15
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	331b      	adds	r3, #27
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	331b      	adds	r3, #27
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	3304      	adds	r3, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0c1b      	lsrs	r3, r3, #16
 8001474:	b29a      	uxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0a1a      	lsrs	r2, r3, #8
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0c1a      	lsrs	r2, r3, #16
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	3302      	adds	r3, #2
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0e1a      	lsrs	r2, r3, #24
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	3303      	adds	r3, #3
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3304      	adds	r3, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0a1a      	lsrs	r2, r3, #8
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3305      	adds	r3, #5
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0c1a      	lsrs	r2, r3, #16
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3306      	adds	r3, #6
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	4413      	add	r3, r2
 8001534:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	0e1a      	lsrs	r2, r3, #24
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3307      	adds	r3, #7
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d108      	bne.n	800155c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0220 	orr.w	r2, r2, #32
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	e007      	b.n	800156c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0220 	orr.w	r2, r2, #32
 800156a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e006      	b.n	800157e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d002      	beq.n	80015a8 <HAL_CAN_ActivateNotification+0x1e>
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d109      	bne.n	80015bc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6959      	ldr	r1, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e006      	b.n	80015ca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
  }
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b08a      	sub	sp, #40	; 0x28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d07c      	beq.n	8001716 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d023      	beq.n	800166e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2201      	movs	r2, #1
 800162c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f983 	bl	8001944 <HAL_CAN_TxMailbox0CompleteCallback>
 800163e:	e016      	b.n	800166e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	e00c      	b.n	800166e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	e002      	b.n	800166e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f989 	bl	8001980 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d024      	beq.n	80016c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001680:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f963 	bl	8001958 <HAL_CAN_TxMailbox1CompleteCallback>
 8001692:	e016      	b.n	80016c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
 80016a6:	e00c      	b.n	80016c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ba:	e002      	b.n	80016c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f969 	bl	8001994 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d024      	beq.n	8001716 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f943 	bl	800196c <HAL_CAN_TxMailbox2CompleteCallback>
 80016e6:	e016      	b.n	8001716 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	e00c      	b.n	8001716 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
 800170e:	e002      	b.n	8001716 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f949 	bl	80019a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00c      	beq.n	800173a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001730:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2210      	movs	r2, #16
 8001738:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2208      	movs	r2, #8
 8001754:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f930 	bl	80019bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7fe fea5 	bl	80004c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001794:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2210      	movs	r2, #16
 800179c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2208      	movs	r2, #8
 80017b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f912 	bl	80019e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8f9 	bl	80019d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00b      	beq.n	8001800 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2210      	movs	r2, #16
 80017f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8fc 	bl	80019f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2208      	movs	r2, #8
 800181a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f8f5 	bl	8001a0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d07b      	beq.n	8001924 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d072      	beq.n	800191c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001890:	2b00      	cmp	r3, #0
 8001892:	d043      	beq.n	800191c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03e      	beq.n	800191c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018a4:	2b60      	cmp	r3, #96	; 0x60
 80018a6:	d02b      	beq.n	8001900 <HAL_CAN_IRQHandler+0x32a>
 80018a8:	2b60      	cmp	r3, #96	; 0x60
 80018aa:	d82e      	bhi.n	800190a <HAL_CAN_IRQHandler+0x334>
 80018ac:	2b50      	cmp	r3, #80	; 0x50
 80018ae:	d022      	beq.n	80018f6 <HAL_CAN_IRQHandler+0x320>
 80018b0:	2b50      	cmp	r3, #80	; 0x50
 80018b2:	d82a      	bhi.n	800190a <HAL_CAN_IRQHandler+0x334>
 80018b4:	2b40      	cmp	r3, #64	; 0x40
 80018b6:	d019      	beq.n	80018ec <HAL_CAN_IRQHandler+0x316>
 80018b8:	2b40      	cmp	r3, #64	; 0x40
 80018ba:	d826      	bhi.n	800190a <HAL_CAN_IRQHandler+0x334>
 80018bc:	2b30      	cmp	r3, #48	; 0x30
 80018be:	d010      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x30c>
 80018c0:	2b30      	cmp	r3, #48	; 0x30
 80018c2:	d822      	bhi.n	800190a <HAL_CAN_IRQHandler+0x334>
 80018c4:	2b10      	cmp	r3, #16
 80018c6:	d002      	beq.n	80018ce <HAL_CAN_IRQHandler+0x2f8>
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d005      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018cc:	e01d      	b.n	800190a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018d6:	e019      	b.n	800190c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018e0:	e014      	b.n	800190c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	f043 0320 	orr.w	r3, r3, #32
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ea:	e00f      	b.n	800190c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018f4:	e00a      	b.n	800190c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018fe:	e005      	b.n	800190c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001908:	e000      	b.n	800190c <HAL_CAN_IRQHandler+0x336>
            break;
 800190a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800191a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2204      	movs	r2, #4
 8001922:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f872 	bl	8001a20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bb4:	f7ff ff8e 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff29 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfc:	f7ff ff3e 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f7ff ff8e 	bl	8001b28 <NVIC_EncodePriority>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff5d 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff31 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa2 	bl	8001b90 <SysTick_Config>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	e148      	b.n	8001efa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 813a 	beq.w	8001ef4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d005      	beq.n	8001c98 <HAL_GPIO_Init+0x40>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d130      	bne.n	8001cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cce:	2201      	movs	r2, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 0201 	and.w	r2, r3, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d017      	beq.n	8001d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d123      	bne.n	8001d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	6939      	ldr	r1, [r7, #16]
 8001d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0203 	and.w	r2, r3, #3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8094 	beq.w	8001ef4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dcc:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <HAL_GPIO_Init+0x2c0>)
 8001dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_GPIO_Init+0x2c0>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd8:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <HAL_GPIO_Init+0x2c0>)
 8001dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001de4:	4a4d      	ldr	r2, [pc, #308]	; (8001f1c <HAL_GPIO_Init+0x2c4>)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e0e:	d00d      	beq.n	8001e2c <HAL_GPIO_Init+0x1d4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a43      	ldr	r2, [pc, #268]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0x1d0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a42      	ldr	r2, [pc, #264]	; (8001f24 <HAL_GPIO_Init+0x2cc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_GPIO_Init+0x1cc>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e004      	b.n	8001e2e <HAL_GPIO_Init+0x1d6>
 8001e24:	2307      	movs	r3, #7
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x1d6>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_GPIO_Init+0x1d6>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	f002 0203 	and.w	r2, r2, #3
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	4093      	lsls	r3, r2
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e3e:	4937      	ldr	r1, [pc, #220]	; (8001f1c <HAL_GPIO_Init+0x2c4>)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e70:	4a2d      	ldr	r2, [pc, #180]	; (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e9a:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec4:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f47f aeaf 	bne.w	8001c68 <HAL_GPIO_Init+0x10>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	48000800 	.word	0x48000800
 8001f28:	40010400 	.word	0x40010400

08001f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f3c:	787b      	ldrb	r3, [r7, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40007000 	.word	0x40007000

08001f7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40007000 	.word	0x40007000

08001f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa6:	d130      	bne.n	800200a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb4:	d038      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2232      	movs	r2, #50	; 0x32
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	3301      	adds	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fdc:	e002      	b.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff0:	d102      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f2      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002004:	d110      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e00f      	b.n	800202a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002016:	d007      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002020:	4a05      	ldr	r2, [pc, #20]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002026:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40007000 	.word	0x40007000
 800203c:	20000000 	.word	0x20000000
 8002040:	431bde83 	.word	0x431bde83

08002044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e3fe      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002056:	4ba1      	ldr	r3, [pc, #644]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002060:	4b9e      	ldr	r3, [pc, #632]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80e4 	beq.w	8002240 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_RCC_OscConfig+0x4a>
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	f040 808b 	bne.w	800219c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b01      	cmp	r3, #1
 800208a:	f040 8087 	bne.w	800219c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208e:	4b93      	ldr	r3, [pc, #588]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e3d6      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	4b8c      	ldr	r3, [pc, #560]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <HAL_RCC_OscConfig+0x7c>
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020be:	e005      	b.n	80020cc <HAL_RCC_OscConfig+0x88>
 80020c0:	4b86      	ldr	r3, [pc, #536]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d223      	bcs.n	8002118 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fd8b 	bl	8002bf0 <RCC_SetFlashLatencyFromMSIRange>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e3b7      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e4:	4b7d      	ldr	r3, [pc, #500]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a7c      	ldr	r2, [pc, #496]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b7a      	ldr	r3, [pc, #488]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4977      	ldr	r1, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4972      	ldr	r1, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
 8002116:	e025      	b.n	8002164 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002118:	4b70      	ldr	r3, [pc, #448]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6f      	ldr	r2, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 800211e:	f043 0308 	orr.w	r3, r3, #8
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b6d      	ldr	r3, [pc, #436]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	496a      	ldr	r1, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002136:	4b69      	ldr	r3, [pc, #420]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	4965      	ldr	r1, [pc, #404]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fd4b 	bl	8002bf0 <RCC_SetFlashLatencyFromMSIRange>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e377      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002164:	f000 fc80 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	495a      	ldr	r1, [pc, #360]	; (80022e0 <HAL_RCC_OscConfig+0x29c>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_RCC_OscConfig+0x2a0>)
 8002182:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002184:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <HAL_RCC_OscConfig+0x2a4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fd93 	bl	8000cb4 <HAL_InitTick>
 800218e:	4603      	mov	r3, r0
 8002190:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d052      	beq.n	800223e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	e35b      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d032      	beq.n	800220a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a4:	4b4d      	ldr	r3, [pc, #308]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4c      	ldr	r2, [pc, #304]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b0:	f7fe fdd0 	bl	8000d54 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b8:	f7fe fdcc 	bl	8000d54 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e344      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ca:	4b44      	ldr	r3, [pc, #272]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d6:	4b41      	ldr	r3, [pc, #260]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a40      	ldr	r2, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	493b      	ldr	r1, [pc, #236]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f4:	4b39      	ldr	r3, [pc, #228]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	4936      	ldr	r1, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
 8002208:	e01a      	b.n	8002240 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a33      	ldr	r2, [pc, #204]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002216:	f7fe fd9d 	bl	8000d54 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221e:	f7fe fd99 	bl	8000d54 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e311      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x1da>
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d074      	beq.n	8002336 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x21a>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d10e      	bne.n	8002276 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d10b      	bne.n	8002276 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d064      	beq.n	8002334 <HAL_RCC_OscConfig+0x2f0>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d160      	bne.n	8002334 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e2ee      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x24a>
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a15      	ldr	r2, [pc, #84]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e01d      	b.n	80022ca <HAL_RCC_OscConfig+0x286>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x26e>
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 800229e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x286>
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a06      	ldr	r2, [pc, #24]	; (80022dc <HAL_RCC_OscConfig+0x298>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01c      	beq.n	800230c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7fe fd3f 	bl	8000d54 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d8:	e011      	b.n	80022fe <HAL_RCC_OscConfig+0x2ba>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08003b24 	.word	0x08003b24
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7fe fd32 	bl	8000d54 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e2aa      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	4baf      	ldr	r3, [pc, #700]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x2a8>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fd22 	bl	8000d54 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe fd1e 	bl	8000d54 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e296      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	4ba5      	ldr	r3, [pc, #660]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x2d0>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d060      	beq.n	8002404 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x310>
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d119      	bne.n	8002382 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d116      	bne.n	8002382 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002354:	4b99      	ldr	r3, [pc, #612]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x328>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e273      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b93      	ldr	r3, [pc, #588]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	4990      	ldr	r1, [pc, #576]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002380:	e040      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d023      	beq.n	80023d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238a:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a8b      	ldr	r2, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe fcdd 	bl	8000d54 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe fcd9 	bl	8000d54 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e251      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b82      	ldr	r3, [pc, #520]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b7f      	ldr	r3, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	497c      	ldr	r1, [pc, #496]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e018      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b7a      	ldr	r3, [pc, #488]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a79      	ldr	r2, [pc, #484]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80023d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7fe fcb9 	bl	8000d54 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7fe fcb5 	bl	8000d54 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e22d      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f8:	4b70      	ldr	r3, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03c      	beq.n	800248a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01c      	beq.n	8002452 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241e:	4a67      	ldr	r2, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7fe fc94 	bl	8000d54 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7fe fc90 	bl	8000d54 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e208      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002442:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCC_OscConfig+0x3ec>
 8002450:	e01b      	b.n	800248a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002452:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fc77 	bl	8000d54 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7fe fc73 	bl	8000d54 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1eb      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800247c:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ef      	bne.n	800246a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80a6 	beq.w	80025e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800249c:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10d      	bne.n	80024c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b44      	ldr	r3, [pc, #272]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	4a43      	ldr	r2, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6593      	str	r3, [r2, #88]	; 0x58
 80024b4:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <HAL_RCC_OscConfig+0x57c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d118      	bne.n	8002502 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d0:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0x57c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3a      	ldr	r2, [pc, #232]	; (80025c0 <HAL_RCC_OscConfig+0x57c>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fc3a 	bl	8000d54 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e4:	f7fe fc36 	bl	8000d54 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1ae      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f6:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_RCC_OscConfig+0x57c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <HAL_RCC_OscConfig+0x4d8>
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002510:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251a:	e024      	b.n	8002566 <HAL_RCC_OscConfig+0x522>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d110      	bne.n	8002546 <HAL_RCC_OscConfig+0x502>
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a24      	ldr	r2, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a20      	ldr	r2, [pc, #128]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002544:	e00f      	b.n	8002566 <HAL_RCC_OscConfig+0x522>
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002556:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800255e:	f023 0304 	bic.w	r3, r3, #4
 8002562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fbf1 	bl	8000d54 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fbed 	bl	8000d54 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e163      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x578>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ed      	beq.n	8002576 <HAL_RCC_OscConfig+0x532>
 800259a:	e01a      	b.n	80025d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fbda 	bl	8000d54 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a2:	e00f      	b.n	80025c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7fe fbd6 	bl	8000d54 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d906      	bls.n	80025c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e14c      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c4:	4ba5      	ldr	r3, [pc, #660]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e8      	bne.n	80025a4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4ba0      	ldr	r3, [pc, #640]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a9f      	ldr	r2, [pc, #636]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d03c      	beq.n	800266a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01c      	beq.n	8002632 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f8:	4b98      	ldr	r3, [pc, #608]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80025fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025fe:	4a97      	ldr	r2, [pc, #604]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe fba4 	bl	8000d54 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002610:	f7fe fba0 	bl	8000d54 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e118      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002622:	4b8e      	ldr	r3, [pc, #568]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0ef      	beq.n	8002610 <HAL_RCC_OscConfig+0x5cc>
 8002630:	e01b      	b.n	800266a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002632:	4b8a      	ldr	r3, [pc, #552]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002638:	4a88      	ldr	r2, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x818>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fb87 	bl	8000d54 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800264a:	f7fe fb83 	bl	8000d54 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0fb      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800265c:	4b7f      	ldr	r3, [pc, #508]	; (800285c <HAL_RCC_OscConfig+0x818>)
 800265e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ef      	bne.n	800264a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80ef 	beq.w	8002852 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	2b02      	cmp	r3, #2
 800267a:	f040 80c5 	bne.w	8002808 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800267e:	4b77      	ldr	r3, [pc, #476]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 0203 	and.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	429a      	cmp	r2, r3
 8002690:	d12c      	bne.n	80026ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	3b01      	subs	r3, #1
 800269e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d123      	bne.n	80026ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d11b      	bne.n	80026ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d113      	bne.n	80026ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	3b01      	subs	r3, #1
 80026d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d109      	bne.n	80026ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d067      	beq.n	80027bc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d062      	beq.n	80027b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026f2:	4b5a      	ldr	r3, [pc, #360]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0a8      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002702:	4b56      	ldr	r3, [pc, #344]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a55      	ldr	r2, [pc, #340]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800270e:	f7fe fb21 	bl	8000d54 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe fb1d 	bl	8000d54 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e095      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCC_OscConfig+0x818>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002734:	4b49      	ldr	r3, [pc, #292]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCC_OscConfig+0x81c>)
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002744:	3a01      	subs	r2, #1
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	4311      	orrs	r1, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800274e:	0212      	lsls	r2, r2, #8
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002756:	0852      	lsrs	r2, r2, #1
 8002758:	3a01      	subs	r2, #1
 800275a:	0552      	lsls	r2, r2, #21
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002762:	0852      	lsrs	r2, r2, #1
 8002764:	3a01      	subs	r2, #1
 8002766:	0652      	lsls	r2, r2, #25
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800276e:	06d2      	lsls	r2, r2, #27
 8002770:	430a      	orrs	r2, r1
 8002772:	493a      	ldr	r1, [pc, #232]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002774:	4313      	orrs	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002778:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_RCC_OscConfig+0x818>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a37      	ldr	r2, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x818>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a34      	ldr	r2, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x818>)
 800278a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002790:	f7fe fae0 	bl	8000d54 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe fadc 	bl	8000d54 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e054      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b6:	e04c      	b.n	8002852 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e04b      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d144      	bne.n	8002852 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a23      	ldr	r2, [pc, #140]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e0:	f7fe fab8 	bl	8000d54 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fab4 	bl	8000d54 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e02c      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_RCC_OscConfig+0x818>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x7a4>
 8002806:	e024      	b.n	8002852 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d01f      	beq.n	800284e <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fa9b 	bl	8000d54 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe fa97 	bl	8000d54 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e00f      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	4905      	ldr	r1, [pc, #20]	; (800285c <HAL_RCC_OscConfig+0x818>)
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_RCC_OscConfig+0x820>)
 8002848:	4013      	ands	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
 800284c:	e001      	b.n	8002852 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	019d808c 	.word	0x019d808c
 8002864:	feeefffc 	.word	0xfeeefffc

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0e7      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d910      	bls.n	80028ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4970      	ldr	r1, [pc, #448]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b6e      	ldr	r3, [pc, #440]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0cf      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d908      	bls.n	80028da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4960      	ldr	r1, [pc, #384]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04c      	beq.n	8002980 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d121      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0a6      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002906:	4b54      	ldr	r3, [pc, #336]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e09a      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291e:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e08e      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292e:	4b4a      	ldr	r3, [pc, #296]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e086      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4943      	ldr	r1, [pc, #268]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002950:	f7fe fa00 	bl	8000d54 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fe f9fc 	bl	8000d54 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e06e      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002998:	429a      	cmp	r2, r3
 800299a:	d208      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	492b      	ldr	r1, [pc, #172]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ae:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d210      	bcs.n	80029de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 0207 	bic.w	r2, r3, #7
 80029c4:	4923      	ldr	r1, [pc, #140]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e036      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4918      	ldr	r1, [pc, #96]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4910      	ldr	r1, [pc, #64]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a1c:	f000 f824 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	490b      	ldr	r1, [pc, #44]	; (8002a5c <HAL_RCC_ClockConfig+0x1f4>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x1fc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe f937 	bl	8000cb4 <HAL_InitTick>
 8002a46:	4603      	mov	r3, r0
 8002a48:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	08003b24 	.word	0x08003b24
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a76:	4b3e      	ldr	r3, [pc, #248]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x34>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d121      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d11e      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a9c:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e005      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10d      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	e004      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d134      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d003      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0xac>
 8002b0c:	e005      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b10:	617b      	str	r3, [r7, #20]
      break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b16:	617b      	str	r3, [r7, #20]
      break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	617b      	str	r3, [r7, #20]
      break;
 8002b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	fb02 f203 	mul.w	r2, r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	0e5b      	lsrs	r3, r3, #25
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	3301      	adds	r3, #1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b60:	69bb      	ldr	r3, [r7, #24]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08003b3c 	.word	0x08003b3c
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b9c:	f7ff fff0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4904      	ldr	r1, [pc, #16]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08003b34 	.word	0x08003b34

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bc8:	f7ff ffda 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4904      	ldr	r1, [pc, #16]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08003b34 	.word	0x08003b34

08002bf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c08:	f7ff f9b8 	bl	8001f7c <HAL_PWREx_GetVoltageRange>
 8002c0c:	6178      	str	r0, [r7, #20]
 8002c0e:	e014      	b.n	8002c3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	4a24      	ldr	r2, [pc, #144]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c28:	f7ff f9a8 	bl	8001f7c <HAL_PWREx_GetVoltageRange>
 8002c2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d10b      	bne.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b80      	cmp	r3, #128	; 0x80
 8002c46:	d919      	bls.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c4c:	d902      	bls.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c4e:	2302      	movs	r3, #2
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e013      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c54:	2301      	movs	r3, #1
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	e010      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d902      	bls.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c60:	2303      	movs	r3, #3
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e00a      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	d102      	bne.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	e004      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d101      	bne.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c78:	2301      	movs	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 0207 	bic.w	r2, r3, #7
 8002c84:	4909      	ldr	r1, [pc, #36]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d001      	beq.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40022000 	.word	0x40022000

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d031      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cd4:	d01a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002cd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cda:	d814      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ce4:	d10f      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ce6:	4bac      	ldr	r3, [pc, #688]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4aab      	ldr	r2, [pc, #684]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf2:	e00c      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f9dc 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d04:	e003      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	74fb      	strb	r3, [r7, #19]
      break;
 8002d0a:	e000      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d14:	4ba0      	ldr	r3, [pc, #640]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	499d      	ldr	r1, [pc, #628]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d2a:	e001      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8099 	beq.w	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d42:	4b95      	ldr	r3, [pc, #596]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00d      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	4a8e      	ldr	r2, [pc, #568]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	; 0x58
 8002d64:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d70:	2301      	movs	r3, #1
 8002d72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d74:	4b89      	ldr	r3, [pc, #548]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a88      	ldr	r2, [pc, #544]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d80:	f7fd ffe8 	bl	8000d54 <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d86:	e009      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fd ffe4 	bl	8000d54 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d902      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	74fb      	strb	r3, [r7, #19]
        break;
 8002d9a:	e005      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d9c:	4b7f      	ldr	r3, [pc, #508]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ef      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d155      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dae:	4b7a      	ldr	r3, [pc, #488]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01e      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d019      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dca:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de6:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002df6:	4a68      	ldr	r2, [pc, #416]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d016      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fd ffa4 	bl	8000d54 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fd ffa0 	bl	8000d54 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d902      	bls.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	74fb      	strb	r3, [r7, #19]
            break;
 8002e26:	e006      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e28:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ec      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e3c:	4b56      	ldr	r3, [pc, #344]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	4953      	ldr	r1, [pc, #332]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e52:	e004      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	74bb      	strb	r3, [r7, #18]
 8002e58:	e001      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5e:	7c7b      	ldrb	r3, [r7, #17]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b4c      	ldr	r3, [pc, #304]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a4b      	ldr	r2, [pc, #300]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7c:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4943      	ldr	r1, [pc, #268]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9e:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f023 020c 	bic.w	r2, r3, #12
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	493a      	ldr	r1, [pc, #232]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ec0:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	4932      	ldr	r1, [pc, #200]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ee2:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	4929      	ldr	r1, [pc, #164]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f04:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	4921      	ldr	r1, [pc, #132]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f26:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	4918      	ldr	r1, [pc, #96]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4910      	ldr	r1, [pc, #64]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d02c      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4907      	ldr	r1, [pc, #28]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f88:	d10a      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8a:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4a02      	ldr	r2, [pc, #8]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f94:	60d3      	str	r3, [r2, #12]
 8002f96:	e015      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f881 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d028      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	492d      	ldr	r1, [pc, #180]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fee:	d106      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
 8002ffc:	e011      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003006:	d10c      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	2101      	movs	r1, #1
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f852 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01c      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303c:	4915      	ldr	r1, [pc, #84]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800304c:	d10c      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f82f 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800308a:	7cbb      	ldrb	r3, [r7, #18]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000

080030b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030c6:	4b74      	ldr	r3, [pc, #464]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030d2:	4b71      	ldr	r3, [pc, #452]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10d      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
       ||
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ea:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
       ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d047      	beq.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e044      	b.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d018      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x86>
 800310c:	2b03      	cmp	r3, #3
 800310e:	d825      	bhi.n	800315c <RCCEx_PLLSAI1_Config+0xa4>
 8003110:	2b01      	cmp	r3, #1
 8003112:	d002      	beq.n	800311a <RCCEx_PLLSAI1_Config+0x62>
 8003114:	2b02      	cmp	r3, #2
 8003116:	d009      	beq.n	800312c <RCCEx_PLLSAI1_Config+0x74>
 8003118:	e020      	b.n	800315c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800311a:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d11d      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312a:	e01a      	b.n	8003162 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800312c:	4b5a      	ldr	r3, [pc, #360]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313c:	e013      	b.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800313e:	4b56      	ldr	r3, [pc, #344]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800314a:	4b53      	ldr	r3, [pc, #332]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800315a:	e006      	b.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e004      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800316a:	bf00      	nop
    }

    if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	430b      	orrs	r3, r1
 8003188:	4943      	ldr	r1, [pc, #268]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d17c      	bne.n	800328e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003194:	4b40      	ldr	r3, [pc, #256]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a3f      	ldr	r2, [pc, #252]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800319e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fd fdd8 	bl	8000d54 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a6:	e009      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031a8:	f7fd fdd4 	bl	8000d54 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d902      	bls.n	80031bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ba:	e005      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ef      	bne.n	80031a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d15f      	bne.n	800328e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d110      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6892      	ldr	r2, [r2, #8]
 80031e4:	0211      	lsls	r1, r2, #8
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	06d2      	lsls	r2, r2, #27
 80031ec:	430a      	orrs	r2, r1
 80031ee:	492a      	ldr	r1, [pc, #168]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	610b      	str	r3, [r1, #16]
 80031f4:	e027      	b.n	8003246 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d112      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031fc:	4b26      	ldr	r3, [pc, #152]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003204:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6892      	ldr	r2, [r2, #8]
 800320c:	0211      	lsls	r1, r2, #8
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6912      	ldr	r2, [r2, #16]
 8003212:	0852      	lsrs	r2, r2, #1
 8003214:	3a01      	subs	r2, #1
 8003216:	0552      	lsls	r2, r2, #21
 8003218:	430a      	orrs	r2, r1
 800321a:	491f      	ldr	r1, [pc, #124]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321c:	4313      	orrs	r3, r2
 800321e:	610b      	str	r3, [r1, #16]
 8003220:	e011      	b.n	8003246 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800322a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6892      	ldr	r2, [r2, #8]
 8003232:	0211      	lsls	r1, r2, #8
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6952      	ldr	r2, [r2, #20]
 8003238:	0852      	lsrs	r2, r2, #1
 800323a:	3a01      	subs	r2, #1
 800323c:	0652      	lsls	r2, r2, #25
 800323e:	430a      	orrs	r2, r1
 8003240:	4915      	ldr	r1, [pc, #84]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a13      	ldr	r2, [pc, #76]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003250:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fd fd7f 	bl	8000d54 <HAL_GetTick>
 8003256:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003258:	e009      	b.n	800326e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800325a:	f7fd fd7b 	bl	8000d54 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d902      	bls.n	800326e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	73fb      	strb	r3, [r7, #15]
          break;
 800326c:	e005      	b.n	800327a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ef      	beq.n	800325a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e040      	b.n	8003330 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fbe8 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f82c 	bl	8003338 <UART_SetConfig>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e022      	b.n	8003330 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fa2a 	bl	800374c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fab1 	bl	8003890 <UART_CheckIdleState>
 800332e:	4603      	mov	r3, r0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	b5b0      	push	{r4, r5, r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	4313      	orrs	r3, r2
 800335a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4baf      	ldr	r3, [pc, #700]	; (8003620 <UART_SetConfig+0x2e8>)
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	69f9      	ldr	r1, [r7, #28]
 800336c:	430b      	orrs	r3, r1
 800336e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4aa4      	ldr	r2, [pc, #656]	; (8003624 <UART_SetConfig+0x2ec>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	4313      	orrs	r3, r2
 800339e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a9b      	ldr	r2, [pc, #620]	; (8003628 <UART_SetConfig+0x2f0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d121      	bne.n	8003402 <UART_SetConfig+0xca>
 80033be:	4b9b      	ldr	r3, [pc, #620]	; (800362c <UART_SetConfig+0x2f4>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d817      	bhi.n	80033fc <UART_SetConfig+0xc4>
 80033cc:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <UART_SetConfig+0x9c>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033f1 	.word	0x080033f1
 80033dc:	080033eb 	.word	0x080033eb
 80033e0:	080033f7 	.word	0x080033f7
 80033e4:	2301      	movs	r3, #1
 80033e6:	76fb      	strb	r3, [r7, #27]
 80033e8:	e070      	b.n	80034cc <UART_SetConfig+0x194>
 80033ea:	2302      	movs	r3, #2
 80033ec:	76fb      	strb	r3, [r7, #27]
 80033ee:	e06d      	b.n	80034cc <UART_SetConfig+0x194>
 80033f0:	2304      	movs	r3, #4
 80033f2:	76fb      	strb	r3, [r7, #27]
 80033f4:	e06a      	b.n	80034cc <UART_SetConfig+0x194>
 80033f6:	2308      	movs	r3, #8
 80033f8:	76fb      	strb	r3, [r7, #27]
 80033fa:	e067      	b.n	80034cc <UART_SetConfig+0x194>
 80033fc:	2310      	movs	r3, #16
 80033fe:	76fb      	strb	r3, [r7, #27]
 8003400:	e064      	b.n	80034cc <UART_SetConfig+0x194>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a8a      	ldr	r2, [pc, #552]	; (8003630 <UART_SetConfig+0x2f8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d132      	bne.n	8003472 <UART_SetConfig+0x13a>
 800340c:	4b87      	ldr	r3, [pc, #540]	; (800362c <UART_SetConfig+0x2f4>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d828      	bhi.n	800346c <UART_SetConfig+0x134>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0xe8>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003455 	.word	0x08003455
 8003424:	0800346d 	.word	0x0800346d
 8003428:	0800346d 	.word	0x0800346d
 800342c:	0800346d 	.word	0x0800346d
 8003430:	08003461 	.word	0x08003461
 8003434:	0800346d 	.word	0x0800346d
 8003438:	0800346d 	.word	0x0800346d
 800343c:	0800346d 	.word	0x0800346d
 8003440:	0800345b 	.word	0x0800345b
 8003444:	0800346d 	.word	0x0800346d
 8003448:	0800346d 	.word	0x0800346d
 800344c:	0800346d 	.word	0x0800346d
 8003450:	08003467 	.word	0x08003467
 8003454:	2300      	movs	r3, #0
 8003456:	76fb      	strb	r3, [r7, #27]
 8003458:	e038      	b.n	80034cc <UART_SetConfig+0x194>
 800345a:	2302      	movs	r3, #2
 800345c:	76fb      	strb	r3, [r7, #27]
 800345e:	e035      	b.n	80034cc <UART_SetConfig+0x194>
 8003460:	2304      	movs	r3, #4
 8003462:	76fb      	strb	r3, [r7, #27]
 8003464:	e032      	b.n	80034cc <UART_SetConfig+0x194>
 8003466:	2308      	movs	r3, #8
 8003468:	76fb      	strb	r3, [r7, #27]
 800346a:	e02f      	b.n	80034cc <UART_SetConfig+0x194>
 800346c:	2310      	movs	r3, #16
 800346e:	76fb      	strb	r3, [r7, #27]
 8003470:	e02c      	b.n	80034cc <UART_SetConfig+0x194>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6b      	ldr	r2, [pc, #428]	; (8003624 <UART_SetConfig+0x2ec>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d125      	bne.n	80034c8 <UART_SetConfig+0x190>
 800347c:	4b6b      	ldr	r3, [pc, #428]	; (800362c <UART_SetConfig+0x2f4>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800348a:	d017      	beq.n	80034bc <UART_SetConfig+0x184>
 800348c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003490:	d817      	bhi.n	80034c2 <UART_SetConfig+0x18a>
 8003492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003496:	d00b      	beq.n	80034b0 <UART_SetConfig+0x178>
 8003498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349c:	d811      	bhi.n	80034c2 <UART_SetConfig+0x18a>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <UART_SetConfig+0x172>
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a6:	d006      	beq.n	80034b6 <UART_SetConfig+0x17e>
 80034a8:	e00b      	b.n	80034c2 <UART_SetConfig+0x18a>
 80034aa:	2300      	movs	r3, #0
 80034ac:	76fb      	strb	r3, [r7, #27]
 80034ae:	e00d      	b.n	80034cc <UART_SetConfig+0x194>
 80034b0:	2302      	movs	r3, #2
 80034b2:	76fb      	strb	r3, [r7, #27]
 80034b4:	e00a      	b.n	80034cc <UART_SetConfig+0x194>
 80034b6:	2304      	movs	r3, #4
 80034b8:	76fb      	strb	r3, [r7, #27]
 80034ba:	e007      	b.n	80034cc <UART_SetConfig+0x194>
 80034bc:	2308      	movs	r3, #8
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e004      	b.n	80034cc <UART_SetConfig+0x194>
 80034c2:	2310      	movs	r3, #16
 80034c4:	76fb      	strb	r3, [r7, #27]
 80034c6:	e001      	b.n	80034cc <UART_SetConfig+0x194>
 80034c8:	2310      	movs	r3, #16
 80034ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a54      	ldr	r2, [pc, #336]	; (8003624 <UART_SetConfig+0x2ec>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d173      	bne.n	80035be <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034d6:	7efb      	ldrb	r3, [r7, #27]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d824      	bhi.n	8003526 <UART_SetConfig+0x1ee>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <UART_SetConfig+0x1ac>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	08003509 	.word	0x08003509
 80034e8:	08003527 	.word	0x08003527
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003527 	.word	0x08003527
 80034f4:	08003517 	.word	0x08003517
 80034f8:	08003527 	.word	0x08003527
 80034fc:	08003527 	.word	0x08003527
 8003500:	08003527 	.word	0x08003527
 8003504:	0800351f 	.word	0x0800351f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003508:	f7ff fb46 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 800350c:	6178      	str	r0, [r7, #20]
        break;
 800350e:	e00f      	b.n	8003530 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003510:	4b48      	ldr	r3, [pc, #288]	; (8003634 <UART_SetConfig+0x2fc>)
 8003512:	617b      	str	r3, [r7, #20]
        break;
 8003514:	e00c      	b.n	8003530 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003516:	f7ff faa7 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 800351a:	6178      	str	r0, [r7, #20]
        break;
 800351c:	e008      	b.n	8003530 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003522:	617b      	str	r3, [r7, #20]
        break;
 8003524:	e004      	b.n	8003530 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	76bb      	strb	r3, [r7, #26]
        break;
 800352e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80fc 	beq.w	8003730 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	d305      	bcc.n	8003554 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	d902      	bls.n	800355a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	76bb      	strb	r3, [r7, #26]
 8003558:	e0ea      	b.n	8003730 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	4618      	mov	r0, r3
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	020b      	lsls	r3, r1, #8
 800356c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003570:	0202      	lsls	r2, r0, #8
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	6849      	ldr	r1, [r1, #4]
 8003576:	0849      	lsrs	r1, r1, #1
 8003578:	4608      	mov	r0, r1
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	1814      	adds	r4, r2, r0
 8003580:	eb43 0501 	adc.w	r5, r3, r1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	461a      	mov	r2, r3
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	4620      	mov	r0, r4
 8003590:	4629      	mov	r1, r5
 8003592:	f7fc fe1b 	bl	80001cc <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4613      	mov	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a4:	d308      	bcc.n	80035b8 <UART_SetConfig+0x280>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ac:	d204      	bcs.n	80035b8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	e0bb      	b.n	8003730 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	76bb      	strb	r3, [r7, #26]
 80035bc:	e0b8      	b.n	8003730 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c6:	d167      	bne.n	8003698 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 80035c8:	7efb      	ldrb	r3, [r7, #27]
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d834      	bhi.n	8003638 <UART_SetConfig+0x300>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0x29c>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	08003601 	.word	0x08003601
 80035dc:	08003609 	.word	0x08003609
 80035e0:	08003639 	.word	0x08003639
 80035e4:	0800360f 	.word	0x0800360f
 80035e8:	08003639 	.word	0x08003639
 80035ec:	08003639 	.word	0x08003639
 80035f0:	08003639 	.word	0x08003639
 80035f4:	08003617 	.word	0x08003617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f8:	f7ff face 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 80035fc:	6178      	str	r0, [r7, #20]
        break;
 80035fe:	e020      	b.n	8003642 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003600:	f7ff fae0 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003604:	6178      	str	r0, [r7, #20]
        break;
 8003606:	e01c      	b.n	8003642 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <UART_SetConfig+0x2fc>)
 800360a:	617b      	str	r3, [r7, #20]
        break;
 800360c:	e019      	b.n	8003642 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7ff fa2b 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8003612:	6178      	str	r0, [r7, #20]
        break;
 8003614:	e015      	b.n	8003642 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	617b      	str	r3, [r7, #20]
        break;
 800361c:	e011      	b.n	8003642 <UART_SetConfig+0x30a>
 800361e:	bf00      	nop
 8003620:	efff69f3 	.word	0xefff69f3
 8003624:	40008000 	.word	0x40008000
 8003628:	40013800 	.word	0x40013800
 800362c:	40021000 	.word	0x40021000
 8003630:	40004400 	.word	0x40004400
 8003634:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	76bb      	strb	r3, [r7, #26]
        break;
 8003640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d073      	beq.n	8003730 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005a      	lsls	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	441a      	add	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d916      	bls.n	8003692 <UART_SetConfig+0x35a>
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366a:	d212      	bcs.n	8003692 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f023 030f 	bic.w	r3, r3, #15
 8003674:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	b29b      	uxth	r3, r3
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	b29a      	uxth	r2, r3
 8003682:	89fb      	ldrh	r3, [r7, #14]
 8003684:	4313      	orrs	r3, r2
 8003686:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	89fa      	ldrh	r2, [r7, #14]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	e04e      	b.n	8003730 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	76bb      	strb	r3, [r7, #26]
 8003696:	e04b      	b.n	8003730 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003698:	7efb      	ldrb	r3, [r7, #27]
 800369a:	2b08      	cmp	r3, #8
 800369c:	d827      	bhi.n	80036ee <UART_SetConfig+0x3b6>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x36c>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d9 	.word	0x080036d9
 80036b0:	080036ef 	.word	0x080036ef
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	080036ef 	.word	0x080036ef
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	080036e7 	.word	0x080036e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7ff fa66 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 80036cc:	6178      	str	r0, [r7, #20]
        break;
 80036ce:	e013      	b.n	80036f8 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7ff fa78 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 80036d4:	6178      	str	r0, [r7, #20]
        break;
 80036d6:	e00f      	b.n	80036f8 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <UART_SetConfig+0x410>)
 80036da:	617b      	str	r3, [r7, #20]
        break;
 80036dc:	e00c      	b.n	80036f8 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036de:	f7ff f9c3 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 80036e2:	6178      	str	r0, [r7, #20]
        break;
 80036e4:	e008      	b.n	80036f8 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	617b      	str	r3, [r7, #20]
        break;
 80036ec:	e004      	b.n	80036f8 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	76bb      	strb	r3, [r7, #26]
        break;
 80036f6:	bf00      	nop
    }

    if (pclk != 0U)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	085a      	lsrs	r2, r3, #1
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	441a      	add	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d909      	bls.n	800372c <UART_SetConfig+0x3f4>
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371e:	d205      	bcs.n	800372c <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	e001      	b.n	8003730 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800373c:	7ebb      	ldrb	r3, [r7, #26]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bdb0      	pop	{r4, r5, r7, pc}
 8003746:	bf00      	nop
 8003748:	00f42400 	.word	0x00f42400

0800374c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01a      	beq.n	8003862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384a:	d10a      	bne.n	8003862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038a0:	f7fd fa58 	bl	8000d54 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d10e      	bne.n	80038d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f82d 	bl	8003922 <UART_WaitOnFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e023      	b.n	800391a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d10e      	bne.n	80038fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f817 	bl	8003922 <UART_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e00d      	b.n	800391a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b09c      	sub	sp, #112	; 0x70
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4613      	mov	r3, r2
 8003930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003932:	e0a5      	b.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393a:	f000 80a1 	beq.w	8003a80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fd fa09 	bl	8000d54 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <UART_WaitOnFlagUntilTimeout+0x32>
 800394e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13e      	bne.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003968:	667b      	str	r3, [r7, #100]	; 0x64
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003974:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e6      	bne.n	8003954 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	663b      	str	r3, [r7, #96]	; 0x60
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3308      	adds	r3, #8
 80039a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e067      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d04f      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ee:	d147      	bne.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039f8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a4c:	623a      	str	r2, [r7, #32]
 8003a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	69f9      	ldr	r1, [r7, #28]
 8003a52:	6a3a      	ldr	r2, [r7, #32]
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e5      	bne.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e010      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	f43f af4a 	beq.w	8003934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3770      	adds	r7, #112	; 0x70
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <__libc_init_array>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	4d0d      	ldr	r5, [pc, #52]	; (8003ae4 <__libc_init_array+0x38>)
 8003ab0:	4c0d      	ldr	r4, [pc, #52]	; (8003ae8 <__libc_init_array+0x3c>)
 8003ab2:	1b64      	subs	r4, r4, r5
 8003ab4:	10a4      	asrs	r4, r4, #2
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	42a6      	cmp	r6, r4
 8003aba:	d109      	bne.n	8003ad0 <__libc_init_array+0x24>
 8003abc:	4d0b      	ldr	r5, [pc, #44]	; (8003aec <__libc_init_array+0x40>)
 8003abe:	4c0c      	ldr	r4, [pc, #48]	; (8003af0 <__libc_init_array+0x44>)
 8003ac0:	f000 f820 	bl	8003b04 <_init>
 8003ac4:	1b64      	subs	r4, r4, r5
 8003ac6:	10a4      	asrs	r4, r4, #2
 8003ac8:	2600      	movs	r6, #0
 8003aca:	42a6      	cmp	r6, r4
 8003acc:	d105      	bne.n	8003ada <__libc_init_array+0x2e>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad4:	4798      	blx	r3
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7ee      	b.n	8003ab8 <__libc_init_array+0xc>
 8003ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ade:	4798      	blx	r3
 8003ae0:	3601      	adds	r6, #1
 8003ae2:	e7f2      	b.n	8003aca <__libc_init_array+0x1e>
 8003ae4:	08003b74 	.word	0x08003b74
 8003ae8:	08003b74 	.word	0x08003b74
 8003aec:	08003b74 	.word	0x08003b74
 8003af0:	08003b78 	.word	0x08003b78

08003af4 <memset>:
 8003af4:	4402      	add	r2, r0
 8003af6:	4603      	mov	r3, r0
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d100      	bne.n	8003afe <memset+0xa>
 8003afc:	4770      	bx	lr
 8003afe:	f803 1b01 	strb.w	r1, [r3], #1
 8003b02:	e7f9      	b.n	8003af8 <memset+0x4>

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
