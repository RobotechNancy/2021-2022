
canV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080033b4  080033b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800341c  0800341c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800341c  0800341c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800341c  0800341c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08003430  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003430  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4e9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001815  00000000  00000000  0002a51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a311  00000000  00000000  0002cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cef  00000000  00000000  00046f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f27b  00000000  00000000  00050bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efe6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a18  00000000  00000000  000efec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800339c 	.word	0x0800339c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800339c 	.word	0x0800339c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, int adresse) {
 800021c:	b084      	sub	sp, #16
 800021e:	b5b0      	push	{r4, r5, r7, lr}
 8000220:	b08a      	sub	sp, #40	; 0x28
 8000222:	af00      	add	r7, sp, #0
 8000224:	2538      	movs	r5, #56	; 0x38
 8000226:	197c      	adds	r4, r7, r5
 8000228:	6020      	str	r0, [r4, #0]
 800022a:	6061      	str	r1, [r4, #4]
 800022c:	60a2      	str	r2, [r4, #8]
 800022e:	60e3      	str	r3, [r4, #12]
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000230:	003b      	movs	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 8000236:	003b      	movs	r3, r7
 8000238:	2200      	movs	r2, #0
 800023a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 800023c:	003b      	movs	r3, r7
 800023e:	2201      	movs	r2, #1
 8000240:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = adresse << (CAN_DECALAGE_ADDR_RECEPTEUR-13); //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	001a      	movs	r2, r3
 8000248:	003b      	movs	r3, r7
 800024a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0; //
 800024c:	003b      	movs	r3, r7
 800024e:	2200      	movs	r2, #0
 8000250:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = CAN_FILTER_ADDR_RECEPTEUR >> 13; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000252:	003b      	movs	r3, r7
 8000254:	22f0      	movs	r2, #240	; 0xf0
 8000256:	0112      	lsls	r2, r2, #4
 8000258:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800025a:	003b      	movs	r3, r7
 800025c:	2200      	movs	r2, #0
 800025e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000260:	003b      	movs	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000266:	003b      	movs	r3, r7
 8000268:	2201      	movs	r2, #1
 800026a:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800026c:	003b      	movs	r3, r7
 800026e:	220e      	movs	r2, #14
 8000270:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000272:	003a      	movs	r2, r7
 8000274:	197b      	adds	r3, r7, r5
 8000276:	0011      	movs	r1, r2
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fdd9 	bl	8000e30 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 800027e:	197b      	adds	r3, r7, r5
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fec7 	bl	8001014 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000286:	197b      	adds	r3, r7, r5
 8000288:	2102      	movs	r1, #2
 800028a:	0018      	movs	r0, r3
 800028c:	f001 f902 	bl	8001494 <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <CAN_Config+0x98>)
 8000292:	197a      	adds	r2, r7, r5
 8000294:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000296:	c313      	stmia	r3!, {r0, r1, r4}
 8000298:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029a:	c313      	stmia	r3!, {r0, r1, r4}
 800029c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029e:	c313      	stmia	r3!, {r0, r1, r4}
 80002a0:	6812      	ldr	r2, [r2, #0]
 80002a2:	601a      	str	r2, [r3, #0]
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)

}
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b00a      	add	sp, #40	; 0x28
 80002aa:	bcb0      	pop	{r4, r5, r7}
 80002ac:	bc08      	pop	{r3}
 80002ae:	b004      	add	sp, #16
 80002b0:	4718      	bx	r3
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000028 	.word	0x20000028

080002b8 <is_valid_addr>:
 *  \brief regarde si l'adresse est connue
 *  \param myAddr addresse à verifier
 *  \retval true l'adresse est connue
 *  \retval false l'adresse n'est pas connue
*/
bool is_valid_addr(uint addr){
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08b      	sub	sp, #44	; 0x2c
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    int size = sizeof(CAN_LIST_ADDR)/sizeof(CAN_LIST_ADDR[0]);
 80002c0:	2302      	movs	r3, #2
 80002c2:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < size; i++)
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24
 80002c8:	e010      	b.n	80002ec <is_valid_addr+0x34>
    {
        if(addr == CAN_LIST_ADDR[i]) return true;
 80002ca:	2108      	movs	r1, #8
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <is_valid_addr+0x48>)
 80002d0:	ca11      	ldmia	r2!, {r0, r4}
 80002d2:	c311      	stmia	r3!, {r0, r4}
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002d8:	0092      	lsls	r2, r2, #2
 80002da:	58d3      	ldr	r3, [r2, r3]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d101      	bne.n	80002e6 <is_valid_addr+0x2e>
 80002e2:	2301      	movs	r3, #1
 80002e4:	e007      	b.n	80002f6 <is_valid_addr+0x3e>
    for (int i = 0; i < size; i++)
 80002e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e8:	3301      	adds	r3, #1
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24
 80002ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002ee:	6a3b      	ldr	r3, [r7, #32]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	dbea      	blt.n	80002ca <is_valid_addr+0x12>
    }
    return false;
 80002f4:	2300      	movs	r3, #0
}
 80002f6:	0018      	movs	r0, r3
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b00b      	add	sp, #44	; 0x2c
 80002fc:	bd90      	pop	{r4, r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	080033b4 	.word	0x080033b4

08000304 <is_valid_code_fct>:
 *  \brief regarde si le code fct est connue
 *  \param codeFct code fct à verifier
 *  \retval true le code fct est connue
 *  \retval false le code fct n'est pas connue
*/
bool is_valid_code_fct(uint codeFct){
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b08b      	sub	sp, #44	; 0x2c
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    int size = sizeof(CAN_LIST_CODE_FCT)/sizeof(CAN_LIST_CODE_FCT[0]);
 800030c:	2302      	movs	r3, #2
 800030e:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < size; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	; 0x24
 8000314:	e010      	b.n	8000338 <is_valid_code_fct+0x34>
    {
        if(codeFct == CAN_LIST_CODE_FCT[i]) return true;
 8000316:	2108      	movs	r1, #8
 8000318:	187b      	adds	r3, r7, r1
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <is_valid_code_fct+0x48>)
 800031c:	ca11      	ldmia	r2!, {r0, r4}
 800031e:	c311      	stmia	r3!, {r0, r4}
 8000320:	187b      	adds	r3, r7, r1
 8000322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000324:	0092      	lsls	r2, r2, #2
 8000326:	58d3      	ldr	r3, [r2, r3]
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	429a      	cmp	r2, r3
 800032c:	d101      	bne.n	8000332 <is_valid_code_fct+0x2e>
 800032e:	2301      	movs	r3, #1
 8000330:	e007      	b.n	8000342 <is_valid_code_fct+0x3e>
    for (int i = 0; i < size; i++)
 8000332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000334:	3301      	adds	r3, #1
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
 8000338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800033a:	6a3b      	ldr	r3, [r7, #32]
 800033c:	429a      	cmp	r2, r3
 800033e:	dbea      	blt.n	8000316 <is_valid_code_fct+0x12>
    }
    return false;
 8000340:	2300      	movs	r3, #0
}
 8000342:	0018      	movs	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	b00b      	add	sp, #44	; 0x2c
 8000348:	bd90      	pop	{r4, r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	080033bc 	.word	0x080033bc

08000350 <send>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_WRITE_ERROR} une erreur à eu lieu lors de l'envoie du message
*/
int send(unsigned int addr, uint codeFct , uint8_t data[], uint dataLen, bool isRep, uint repLenght){
 8000350:	b580      	push	{r7, lr}
 8000352:	b08c      	sub	sp, #48	; 0x30
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	603b      	str	r3, [r7, #0]

	if (dataLen >8){
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b08      	cmp	r3, #8
 8000362:	d901      	bls.n	8000368 <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <send+0xc0>)
 8000366:	e04e      	b.n	8000406 <send+0xb6>
	}

	if(addr < 0 || addr > CAN_MAX_VALUE_ADDR) return CAN_E_OOB_ADDR;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2b10      	cmp	r3, #16
 800036c:	d901      	bls.n	8000372 <send+0x22>
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <send+0xc4>)
 8000370:	e049      	b.n	8000406 <send+0xb6>
	if(codeFct < 0 || codeFct > CAN_MAX_VALUE_CODE_FCT) return CAN_E_OOB_CODE_FCT;
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	2b80      	cmp	r3, #128	; 0x80
 8000376:	d901      	bls.n	800037c <send+0x2c>
 8000378:	4b27      	ldr	r3, [pc, #156]	; (8000418 <send+0xc8>)
 800037a:	e044      	b.n	8000406 <send+0xb6>
	if(repLenght < 0 || repLenght > CAN_MAX_VALUE_REP_NBR) return CAN_E_OOB_REP_NBR;
 800037c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800037e:	2b08      	cmp	r3, #8
 8000380:	d901      	bls.n	8000386 <send+0x36>
 8000382:	4b26      	ldr	r3, [pc, #152]	; (800041c <send+0xcc>)
 8000384:	e03f      	b.n	8000406 <send+0xb6>

	if(!is_valid_addr(addr)) return CAN_E_UNKNOW_ADDR;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	0018      	movs	r0, r3
 800038a:	f7ff ff95 	bl	80002b8 <is_valid_addr>
 800038e:	0003      	movs	r3, r0
 8000390:	001a      	movs	r2, r3
 8000392:	2301      	movs	r3, #1
 8000394:	4053      	eors	r3, r2
 8000396:	b2db      	uxtb	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <send+0x50>
 800039c:	4b20      	ldr	r3, [pc, #128]	; (8000420 <send+0xd0>)
 800039e:	e032      	b.n	8000406 <send+0xb6>
	if(!is_valid_code_fct(codeFct)) return CAN_E_UNKNOW_CODE_FCT;
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	0018      	movs	r0, r3
 80003a4:	f7ff ffae 	bl	8000304 <is_valid_code_fct>
 80003a8:	0003      	movs	r3, r0
 80003aa:	001a      	movs	r2, r3
 80003ac:	2301      	movs	r3, #1
 80003ae:	4053      	eors	r3, r2
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <send+0x6a>
 80003b6:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <send+0xd4>)
 80003b8:	e025      	b.n	8000406 <send+0xb6>


	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dataLen; // taille des données à transmettre en octets
 80003ba:	2118      	movs	r1, #24
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	683a      	ldr	r2, [r7, #0]
 80003c0:	611a      	str	r2, [r3, #16]

	//adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage
	txHeader.ExtId = (
	          (addr << CAN_DECALAGE_ADDR_RECEPTEUR)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	055a      	lsls	r2, r3, #21
	        + (CAN_ADDR_BASE_ROULANTE << CAN_DECALAGE_ADDR_EMETTEUR)
	        + (codeFct << CAN_DECALAGE_CODE_FCT)
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	011b      	lsls	r3, r3, #4
 80003ca:	18d2      	adds	r2, r2, r3
	        + (isRep << CAN_DECALAGE_IS_REP)
 80003cc:	2338      	movs	r3, #56	; 0x38
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	00db      	lsls	r3, r3, #3
 80003d4:	18d2      	adds	r2, r2, r3
	        + (repLenght << CAN_DECALAGE_REP_NBR)
 80003d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003d8:	18d3      	adds	r3, r2, r3
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	04d2      	lsls	r2, r2, #19
 80003de:	189a      	adds	r2, r3, r2
	txHeader.ExtId = (
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	605a      	str	r2, [r3, #4]
	        );
	txHeader.IDE = CAN_ID_EXT; //on choisit l'adressage standard
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2204      	movs	r2, #4
 80003e8:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2200      	movs	r2, #0
 80003ee:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2200      	movs	r2, #0
 80003f4:	751a      	strb	r2, [r3, #20]


	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 80003f6:	2314      	movs	r3, #20
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	480a      	ldr	r0, [pc, #40]	; (8000428 <send+0xd8>)
 8000400:	f000 fe4e 	bl	80010a0 <HAL_CAN_AddTxMessage>

	return 0;
 8000404:	2300      	movs	r3, #0
}
 8000406:	0018      	movs	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	b00c      	add	sp, #48	; 0x30
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	fffffe02 	.word	0xfffffe02
 8000414:	fffffe01 	.word	0xfffffe01
 8000418:	fffffe00 	.word	0xfffffe00
 800041c:	fffffdff 	.word	0xfffffdff
 8000420:	fffffdd9 	.word	0xfffffdd9
 8000424:	fffffdd8 	.word	0xfffffdd8
 8000428:	20000028 	.word	0x20000028

0800042c <traitement_trame>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_READ_ERROR} erreur dans la lecture de la trame depuis le buffer
*/
struct CanResponse_t traitement_trame( CAN_RxHeaderTypeDef frame, uint8_t data[]){
 800042c:	b084      	sub	sp, #16
 800042e:	b590      	push	{r4, r7, lr}
 8000430:	46c6      	mov	lr, r8
 8000432:	b500      	push	{lr}
 8000434:	b08c      	sub	sp, #48	; 0x30
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	2004      	movs	r0, #4
 800043c:	2438      	movs	r4, #56	; 0x38
 800043e:	46a4      	mov	ip, r4
 8000440:	2408      	movs	r4, #8
 8000442:	46a0      	mov	r8, r4
 8000444:	44b8      	add	r8, r7
 8000446:	44c4      	add	ip, r8
 8000448:	4460      	add	r0, ip
 800044a:	6001      	str	r1, [r0, #0]
 800044c:	6042      	str	r2, [r0, #4]
 800044e:	6083      	str	r3, [r0, #8]
		struct CanResponse_t rep;
        rep.addr = (frame.ExtId & CAN_FILTER_ADDR_RECEPTEUR ) >> CAN_DECALAGE_ADDR_RECEPTEUR ;
 8000450:	2304      	movs	r3, #4
 8000452:	2238      	movs	r2, #56	; 0x38
 8000454:	4694      	mov	ip, r2
 8000456:	2208      	movs	r2, #8
 8000458:	4690      	mov	r8, r2
 800045a:	44b8      	add	r8, r7
 800045c:	44c4      	add	ip, r8
 800045e:	4463      	add	r3, ip
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	0d5b      	lsrs	r3, r3, #21
 8000464:	220f      	movs	r2, #15
 8000466:	401a      	ands	r2, r3
 8000468:	210c      	movs	r1, #12
 800046a:	187b      	adds	r3, r7, r1
 800046c:	601a      	str	r2, [r3, #0]
        rep.emetteur = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR) >> CAN_DECALAGE_ADDR_EMETTEUR;
 800046e:	2304      	movs	r3, #4
 8000470:	2238      	movs	r2, #56	; 0x38
 8000472:	4694      	mov	ip, r2
 8000474:	2208      	movs	r2, #8
 8000476:	4690      	mov	r8, r2
 8000478:	44b8      	add	r8, r7
 800047a:	44c4      	add	ip, r8
 800047c:	4463      	add	r3, ip
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	0e5b      	lsrs	r3, r3, #25
 8000482:	220f      	movs	r2, #15
 8000484:	401a      	ands	r2, r3
 8000486:	187b      	adds	r3, r7, r1
 8000488:	605a      	str	r2, [r3, #4]
        rep.codeFct = (frame.ExtId & CAN_FILTER_CODE_FCT) >> CAN_DECALAGE_CODE_FCT;
 800048a:	2304      	movs	r3, #4
 800048c:	2238      	movs	r2, #56	; 0x38
 800048e:	4694      	mov	ip, r2
 8000490:	2208      	movs	r2, #8
 8000492:	4690      	mov	r8, r2
 8000494:	44b8      	add	r8, r7
 8000496:	44c4      	add	ip, r8
 8000498:	4463      	add	r3, ip
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	227f      	movs	r2, #127	; 0x7f
 80004a0:	401a      	ands	r2, r3
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	609a      	str	r2, [r3, #8]
        rep.isRep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 80004a6:	2304      	movs	r3, #4
 80004a8:	2238      	movs	r2, #56	; 0x38
 80004aa:	4694      	mov	ip, r2
 80004ac:	2208      	movs	r2, #8
 80004ae:	4690      	mov	r8, r2
 80004b0:	44b8      	add	r8, r7
 80004b2:	44c4      	add	ip, r8
 80004b4:	4463      	add	r3, ip
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	08db      	lsrs	r3, r3, #3
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	1e5a      	subs	r2, r3, #1
 80004c0:	4193      	sbcs	r3, r2
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	731a      	strb	r2, [r3, #12]
        rep.RepId = (frame.ExtId & CAN_FILTER_REP_NBR) >> CAN_DECALAGE_REP_NBR;
 80004c8:	2304      	movs	r3, #4
 80004ca:	2238      	movs	r2, #56	; 0x38
 80004cc:	4694      	mov	ip, r2
 80004ce:	2208      	movs	r2, #8
 80004d0:	4690      	mov	r8, r2
 80004d2:	44b8      	add	r8, r7
 80004d4:	44c4      	add	ip, r8
 80004d6:	4463      	add	r3, ip
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	2207      	movs	r2, #7
 80004dc:	401a      	ands	r2, r3
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	611a      	str	r2, [r3, #16]

        if(!is_valid_addr(rep.addr)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_addr(rep.emetteur)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_code_fct(rep.codeFct)) return CAN_E_UNKNOW_CODE_FCT;
        if (frame.DLC >8)  return CAN_E_DATA_SIZE_TOO_LONG;*/
        rep.dataLen = frame.DLC;
 80004e2:	2304      	movs	r3, #4
 80004e4:	2238      	movs	r2, #56	; 0x38
 80004e6:	4694      	mov	ip, r2
 80004e8:	2208      	movs	r2, #8
 80004ea:	4690      	mov	r8, r2
 80004ec:	44b8      	add	r8, r7
 80004ee:	44c4      	add	ip, r8
 80004f0:	4463      	add	r3, ip
 80004f2:	691a      	ldr	r2, [r3, #16]
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	615a      	str	r2, [r3, #20]


        for (int i = 0; i < frame.DLC; i++){
 80004f8:	2300      	movs	r3, #0
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004fc:	e00d      	b.n	800051a <traitement_trame+0xee>
            //if(data[i] <0 || data[i] > 255) return CAN_E_OOB_DATA;
            rep.data[i] = data[i];
 80004fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000502:	18d3      	adds	r3, r2, r3
 8000504:	7819      	ldrb	r1, [r3, #0]
 8000506:	230c      	movs	r3, #12
 8000508:	18fa      	adds	r2, r7, r3
 800050a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800050c:	18d3      	adds	r3, r2, r3
 800050e:	3318      	adds	r3, #24
 8000510:	1c0a      	adds	r2, r1, #0
 8000512:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < frame.DLC; i++){
 8000514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000516:	3301      	adds	r3, #1
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800051a:	2304      	movs	r3, #4
 800051c:	2238      	movs	r2, #56	; 0x38
 800051e:	4694      	mov	ip, r2
 8000520:	2208      	movs	r2, #8
 8000522:	4690      	mov	r8, r2
 8000524:	44b8      	add	r8, r7
 8000526:	44c4      	add	ip, r8
 8000528:	4463      	add	r3, ip
 800052a:	691a      	ldr	r2, [r3, #16]
 800052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052e:	429a      	cmp	r2, r3
 8000530:	d8e5      	bhi.n	80004fe <traitement_trame+0xd2>
        }


    return rep;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	220c      	movs	r2, #12
 8000536:	18ba      	adds	r2, r7, r2
 8000538:	ca13      	ldmia	r2!, {r0, r1, r4}
 800053a:	c313      	stmia	r3!, {r0, r1, r4}
 800053c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800053e:	c313      	stmia	r3!, {r0, r1, r4}
 8000540:	ca03      	ldmia	r2!, {r0, r1}
 8000542:	c303      	stmia	r3!, {r0, r1}
}
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	46bd      	mov	sp, r7
 8000548:	b00c      	add	sp, #48	; 0x30
 800054a:	bc80      	pop	{r7}
 800054c:	46b8      	mov	r8, r7
 800054e:	bc90      	pop	{r4, r7}
 8000550:	bc08      	pop	{r3}
 8000552:	b004      	add	sp, #16
 8000554:	4718      	bx	r3
	...

08000558 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	b09d      	sub	sp, #116	; 0x74
 800055c:	af06      	add	r7, sp, #24
 800055e:	6078      	str	r0, [r7, #4]
	// traitement et mise en forme de la trame
	/////////////////////////////////////////////////////////////////////////
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000560:	2450      	movs	r4, #80	; 0x50
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2534      	movs	r5, #52	; 0x34
 8000566:	197a      	adds	r2, r7, r5
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	2100      	movs	r1, #0
 800056c:	f000 fe76 	bl	800125c <HAL_CAN_GetRxMessage>

	struct CanResponse_t msg;
	msg = traitement_trame( RxHeader, RxData);
 8000570:	2314      	movs	r3, #20
 8000572:	18f8      	adds	r0, r7, r3
 8000574:	197b      	adds	r3, r7, r5
 8000576:	193a      	adds	r2, r7, r4
 8000578:	9204      	str	r2, [sp, #16]
 800057a:	466a      	mov	r2, sp
 800057c:	0011      	movs	r1, r2
 800057e:	001a      	movs	r2, r3
 8000580:	320c      	adds	r2, #12
 8000582:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000584:	c170      	stmia	r1!, {r4, r5, r6}
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	600a      	str	r2, [r1, #0]
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	685a      	ldr	r2, [r3, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f7ff ff4c 	bl	800042c <traitement_trame>

	//	écrire le code ICI


	//renvoi un msg sur le bus can
	uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
 8000594:	240c      	movs	r4, #12
 8000596:	1939      	adds	r1, r7, r4
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800059a:	000b      	movs	r3, r1
 800059c:	6810      	ldr	r0, [r2, #0]
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	8892      	ldrh	r2, [r2, #4]
 80005a2:	809a      	strh	r2, [r3, #4]
 80005a4:	2306      	movs	r3, #6
 80005a6:	2200      	movs	r2, #0
 80005a8:	52ca      	strh	r2, [r1, r3]
	send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5) ;
 80005aa:	193a      	adds	r2, r7, r4
 80005ac:	2305      	movs	r3, #5
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2305      	movs	r3, #5
 80005b6:	2101      	movs	r1, #1
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff fec9 	bl	8000350 <send>
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b017      	add	sp, #92	; 0x5c
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	080033c4 	.word	0x080033c4

080005cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d2:	f000 faa7 	bl	8000b24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d6:	f000 f851 	bl	800067c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005da:	f000 f919 	bl	8000810 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005de:	f000 f8e7 	bl	80007b0 <MX_USART2_UART_Init>
	MX_CAN_Init();
 80005e2:	f000 f8ad 	bl	8000740 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	CAN_Config(hcan, CAN_ADDR_BASE_ROULANTE);
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <main+0x9c>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	9206      	str	r2, [sp, #24]
 80005ec:	466a      	mov	r2, sp
 80005ee:	0011      	movs	r1, r2
 80005f0:	001a      	movs	r2, r3
 80005f2:	3210      	adds	r2, #16
 80005f4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005f6:	c131      	stmia	r1!, {r0, r4, r5}
 80005f8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005fa:	c131      	stmia	r1!, {r0, r4, r5}
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	6859      	ldr	r1, [r3, #4]
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	f7ff fe0a 	bl	800021c <CAN_Config>

	char *msg = "\n\r\n\rHello Nucleo Fun!\n\r";
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <main+0xa0>)
 800060a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, sizeof(msg), 1000);
 800060c:	23fa      	movs	r3, #250	; 0xfa
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	68f9      	ldr	r1, [r7, #12]
 8000612:	4817      	ldr	r0, [pc, #92]	; (8000670 <main+0xa4>)
 8000614:	2204      	movs	r2, #4
 8000616:	f002 fa43 	bl	8002aa0 <HAL_UART_Transmit>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
	HAL_Delay(1500);
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <main+0xa8>)
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fae5 	bl	8000bec <HAL_Delay>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);   // LED on PA5 OFF
	HAL_Delay(500);
 8000622:	23fa      	movs	r3, #250	; 0xfa
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fae0 	bl	8000bec <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
 800062c:	1d39      	adds	r1, r7, #4
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <main+0xac>)
 8000630:	000b      	movs	r3, r1
 8000632:	6810      	ldr	r0, [r2, #0]
 8000634:	6018      	str	r0, [r3, #0]
 8000636:	8892      	ldrh	r2, [r2, #4]
 8000638:	809a      	strh	r2, [r3, #4]
 800063a:	2306      	movs	r3, #6
 800063c:	2200      	movs	r2, #0
 800063e:	52ca      	strh	r2, [r1, r3]
	send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5) ;
 8000640:	1d3a      	adds	r2, r7, #4
 8000642:	2305      	movs	r3, #5
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2301      	movs	r3, #1
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2305      	movs	r3, #5
 800064c:	2101      	movs	r1, #1
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff fe7e 	bl	8000350 <send>
	while (1) {
		HAL_Delay(1500);
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <main+0xa8>)
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fac8 	bl	8000bec <HAL_Delay>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);   // LED on PA5 OFF
		HAL_Delay(500);
 800065c:	23fa      	movs	r3, #250	; 0xfa
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fac3 	bl	8000bec <HAL_Delay>
		HAL_Delay(1500);
 8000666:	e7f5      	b.n	8000654 <main+0x88>
 8000668:	20000050 	.word	0x20000050
 800066c:	080033cc 	.word	0x080033cc
 8000670:	20000078 	.word	0x20000078
 8000674:	000005dc 	.word	0x000005dc
 8000678:	080033c4 	.word	0x080033c4

0800067c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b099      	sub	sp, #100	; 0x64
 8000680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000682:	242c      	movs	r4, #44	; 0x2c
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	2334      	movs	r3, #52	; 0x34
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f002 fe7d 	bl	800338c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000692:	231c      	movs	r3, #28
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	0018      	movs	r0, r3
 8000698:	2310      	movs	r3, #16
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fe75 	bl	800338c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80006a2:	003b      	movs	r3, r7
 80006a4:	0018      	movs	r0, r3
 80006a6:	231c      	movs	r3, #28
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f002 fe6e 	bl	800338c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2201      	movs	r2, #1
 80006bc:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2210      	movs	r2, #16
 80006c2:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2202      	movs	r2, #2
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0212      	lsls	r2, r2, #8
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	22a0      	movs	r2, #160	; 0xa0
 80006d6:	0392      	lsls	r2, r2, #14
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fb88 	bl	8001df8 <HAL_RCC_OscConfig>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x74>
		Error_Handler();
 80006ec:	f000 f8fa 	bl	80008e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	211c      	movs	r1, #28
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2202      	movs	r2, #2
 80006fc:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2101      	movs	r1, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fef8 	bl	8002504 <HAL_RCC_ClockConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xa0>
		Error_Handler();
 8000718:	f000 f8e4 	bl	80008e4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800071c:	003b      	movs	r3, r7
 800071e:	2202      	movs	r2, #2
 8000720:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000728:	003b      	movs	r3, r7
 800072a:	0018      	movs	r0, r3
 800072c:	f002 f864 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xbc>
		Error_Handler();
 8000734:	f000 f8d6 	bl	80008e4 <Error_Handler>
	}
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b019      	add	sp, #100	; 0x64
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_CAN_Init+0x68>)
 8000746:	4a19      	ldr	r2, [pc, #100]	; (80007ac <MX_CAN_Init+0x6c>)
 8000748:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 12;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_CAN_Init+0x68>)
 800074c:	220c      	movs	r2, #12
 800074e:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_CAN_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_CAN_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_CAN_Init+0x68>)
 800075e:	22e0      	movs	r2, #224	; 0xe0
 8000760:	02d2      	lsls	r2, r2, #11
 8000762:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_CAN_Init+0x68>)
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	0352      	lsls	r2, r2, #13
 800076a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_CAN_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_CAN_Init+0x68>)
 8000774:	2200      	movs	r2, #0
 8000776:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = ENABLE;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_CAN_Init+0x68>)
 800077a:	2201      	movs	r2, #1
 800077c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_CAN_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_CAN_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_CAN_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_CAN_Init+0x68>)
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fa4e 	bl	8000c34 <HAL_CAN_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_CAN_Init+0x60>
		Error_Handler();
 800079c:	f000 f8a2 	bl	80008e4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000050 	.word	0x20000050
 80007ac:	40006400 	.word	0x40006400

080007b0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007bc:	22e1      	movs	r2, #225	; 0xe1
 80007be:	0252      	lsls	r2, r2, #9
 80007c0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 f8ff 	bl	80029f8 <HAL_UART_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007fe:	f000 f871 	bl	80008e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000078 	.word	0x20000078
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000816:	240c      	movs	r4, #12
 8000818:	193b      	adds	r3, r7, r4
 800081a:	0018      	movs	r0, r3
 800081c:	2314      	movs	r3, #20
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f002 fdb3 	bl	800338c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_GPIO_Init+0xcc>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_GPIO_Init+0xcc>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0309      	lsls	r1, r1, #12
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_GPIO_Init+0xcc>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	031b      	lsls	r3, r3, #12
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_GPIO_Init+0xcc>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_GPIO_Init+0xcc>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	03c9      	lsls	r1, r1, #15
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_GPIO_Init+0xcc>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	03db      	lsls	r3, r3, #15
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xcc>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_GPIO_Init+0xcc>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_GPIO_Init+0xcc>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2390      	movs	r3, #144	; 0x90
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fa9a 	bl	8001dbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	0192      	lsls	r2, r2, #6
 800088e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2284      	movs	r2, #132	; 0x84
 8000894:	0392      	lsls	r2, r2, #14
 8000896:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MX_GPIO_Init+0xd0>)
 80008a2:	0019      	movs	r1, r3
 80008a4:	0010      	movs	r0, r2
 80008a6:	f001 f911 	bl	8001acc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80008aa:	0021      	movs	r1, r4
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2220      	movs	r2, #32
 80008b0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2201      	movs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c4:	187a      	adds	r2, r7, r1
 80008c6:	2390      	movs	r3, #144	; 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f8fd 	bl	8001acc <HAL_GPIO_Init>

}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b009      	add	sp, #36	; 0x24
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000800 	.word	0x48000800

080008e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x44>)
 80008f8:	699a      	ldr	r2, [r3, #24]
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_MspInit+0x44>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	619a      	str	r2, [r3, #24]
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_MspInit+0x44>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	2201      	movs	r2, #1
 8000908:	4013      	ands	r3, r2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x44>)
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_MspInit+0x44>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0549      	lsls	r1, r1, #21
 8000918:	430a      	orrs	r2, r1
 800091a:	61da      	str	r2, [r3, #28]
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_MspInit+0x44>)
 800091e:	69da      	ldr	r2, [r3, #28]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	055b      	lsls	r3, r3, #21
 8000924:	4013      	ands	r3, r2
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b08b      	sub	sp, #44	; 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	2414      	movs	r4, #20
 8000942:	193b      	adds	r3, r7, r4
 8000944:	0018      	movs	r0, r3
 8000946:	2314      	movs	r3, #20
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f002 fd1e 	bl	800338c <memset>
  if(hcan->Instance==CAN)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <HAL_CAN_MspInit+0xa4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d13b      	bne.n	80009d2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_CAN_MspInit+0xa8>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <HAL_CAN_MspInit+0xa8>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0489      	lsls	r1, r1, #18
 8000964:	430a      	orrs	r2, r1
 8000966:	61da      	str	r2, [r3, #28]
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_CAN_MspInit+0xa8>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	049b      	lsls	r3, r3, #18
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_CAN_MspInit+0xa8>)
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_CAN_MspInit+0xa8>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0289      	lsls	r1, r1, #10
 8000980:	430a      	orrs	r2, r1
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_CAN_MspInit+0xa8>)
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	029b      	lsls	r3, r3, #10
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	22c0      	movs	r2, #192	; 0xc0
 8000996:	0152      	lsls	r2, r2, #5
 8000998:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2202      	movs	r2, #2
 80009a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2203      	movs	r2, #3
 80009ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2204      	movs	r2, #4
 80009b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	187a      	adds	r2, r7, r1
 80009b6:	2390      	movs	r3, #144	; 0x90
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 f885 	bl	8001acc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	201e      	movs	r0, #30
 80009c8:	f001 f84e 	bl	8001a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80009cc:	201e      	movs	r0, #30
 80009ce:	f001 f860 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b00b      	add	sp, #44	; 0x2c
 80009d8:	bd90      	pop	{r4, r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40006400 	.word	0x40006400
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b08b      	sub	sp, #44	; 0x2c
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	2414      	movs	r4, #20
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	0018      	movs	r0, r3
 80009f2:	2314      	movs	r3, #20
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f002 fcc8 	bl	800338c <memset>
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d132      	bne.n	8000a6c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a08:	69da      	ldr	r2, [r3, #28]
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	0289      	lsls	r1, r1, #10
 8000a10:	430a      	orrs	r2, r1
 8000a12:	61da      	str	r2, [r3, #28]
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a16:	69da      	ldr	r2, [r3, #28]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	029b      	lsls	r3, r3, #10
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a24:	695a      	ldr	r2, [r3, #20]
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0289      	lsls	r1, r1, #10
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	615a      	str	r2, [r3, #20]
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a32:	695a      	ldr	r2, [r3, #20]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	029b      	lsls	r3, r3, #10
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3e:	0021      	movs	r1, r4
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	187a      	adds	r2, r7, r1
 8000a60:	2390      	movs	r3, #144	; 0x90
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 f830 	bl	8001acc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b00b      	add	sp, #44	; 0x2c
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f888 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <CEC_CAN_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fd18 	bl	80014e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000050 	.word	0x20000050

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad6:	490e      	ldr	r1, [pc, #56]	; (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aec:	4c0b      	ldr	r4, [pc, #44]	; (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000afa:	f7ff ffe3 	bl	8000ac4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000afe:	f002 fc21 	bl	8003344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b02:	f7ff fd63 	bl	80005cc <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   r0, =_estack
 8000b08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b14:	08003424 	.word	0x08003424
  ldr r2, =_sbss
 8000b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b1c:	20000118 	.word	0x20000118

08000b20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_COMP_IRQHandler>
	...

08000b24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_Init+0x24>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_Init+0x24>)
 8000b2e:	2110      	movs	r1, #16
 8000b30:	430a      	orrs	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f809 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3a:	f7ff fed9 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x60>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	23fa      	movs	r3, #250	; 0xfa
 8000b60:	0098      	lsls	r0, r3, #2
 8000b62:	f7ff facf 	bl	8000104 <__udivsi3>
 8000b66:	0003      	movs	r3, r0
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0020      	movs	r0, r4
 8000b6c:	f7ff faca 	bl	8000104 <__udivsi3>
 8000b70:	0003      	movs	r3, r0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 ff9d 	bl	8001ab2 <HAL_SYSTICK_Config>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e00f      	b.n	8000ba0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d80b      	bhi.n	8000b9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	425b      	negs	r3, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 ff6a 	bl	8001a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_InitTick+0x64>)
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b003      	add	sp, #12
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	18d2      	adds	r2, r2, r3
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000114 	.word	0x20000114

08000bd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000114 	.word	0x20000114

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	189b      	adds	r3, r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	0002      	movs	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000008 	.word	0x20000008

08000c34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e0f0      	b.n	8000e28 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2220      	movs	r2, #32
 8000c4a:	5c9b      	ldrb	r3, [r3, r2]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d103      	bne.n	8000c5a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff fe6f 	bl	8000938 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c6a:	f7ff ffb5 	bl	8000bd8 <HAL_GetTick>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c72:	e013      	b.n	8000c9c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c74:	f7ff ffb0 	bl	8000bd8 <HAL_GetTick>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b0a      	cmp	r3, #10
 8000c80:	d90c      	bls.n	8000c9c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	0292      	lsls	r2, r2, #10
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2220      	movs	r2, #32
 8000c94:	2105      	movs	r1, #5
 8000c96:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e0c5      	b.n	8000e28 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d0e5      	beq.n	8000c74 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	438a      	bics	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb8:	f7ff ff8e 	bl	8000bd8 <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cc0:	e013      	b.n	8000cea <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc2:	f7ff ff89 	bl	8000bd8 <HAL_GetTick>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b0a      	cmp	r3, #10
 8000cce:	d90c      	bls.n	8000cea <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	0292      	lsls	r2, r2, #10
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2220      	movs	r2, #32
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e09e      	b.n	8000e28 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d1e5      	bne.n	8000cc2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7e1b      	ldrb	r3, [r3, #24]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d108      	bne.n	8000d10 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e007      	b.n	8000d20 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7e5b      	ldrb	r3, [r3, #25]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d108      	bne.n	8000d3a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e007      	b.n	8000d4a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	438a      	bics	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7e9b      	ldrb	r3, [r3, #26]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d108      	bne.n	8000d64 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e007      	b.n	8000d74 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2120      	movs	r1, #32
 8000d70:	438a      	bics	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7edb      	ldrb	r3, [r3, #27]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2110      	movs	r1, #16
 8000d88:	438a      	bics	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2110      	movs	r1, #16
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7f1b      	ldrb	r3, [r3, #28]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d108      	bne.n	8000db8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2108      	movs	r1, #8
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	438a      	bics	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7f5b      	ldrb	r3, [r3, #29]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2104      	movs	r1, #4
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2104      	movs	r1, #4
 8000dee:	438a      	bics	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	431a      	orrs	r2, r3
 8000e08:	0011      	movs	r1, r2
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2220      	movs	r2, #32
 8000e22:	2101      	movs	r1, #1
 8000e24:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b004      	add	sp, #16
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e40:	2013      	movs	r0, #19
 8000e42:	183b      	adds	r3, r7, r0
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	2120      	movs	r1, #32
 8000e48:	5c52      	ldrb	r2, [r2, r1]
 8000e4a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	18bb      	adds	r3, r7, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d004      	beq.n	8000e60 <HAL_CAN_ConfigFilter+0x30>
 8000e56:	18bb      	adds	r3, r7, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d000      	beq.n	8000e60 <HAL_CAN_ConfigFilter+0x30>
 8000e5e:	e0cd      	b.n	8000ffc <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	58d3      	ldr	r3, [r2, r3]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	221f      	movs	r2, #31
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2201      	movs	r2, #1
 8000e80:	409a      	lsls	r2, r3
 8000e82:	0013      	movs	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	2387      	movs	r3, #135	; 0x87
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	58d3      	ldr	r3, [r2, r3]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	43d2      	mvns	r2, r2
 8000e92:	401a      	ands	r2, r3
 8000e94:	0011      	movs	r1, r2
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	2387      	movs	r3, #135	; 0x87
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d129      	bne.n	8000efa <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	2383      	movs	r3, #131	; 0x83
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	43d2      	mvns	r2, r2
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	2383      	movs	r3, #131	; 0x83
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ed0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3248      	adds	r2, #72	; 0x48
 8000ed6:	00d2      	lsls	r2, r2, #3
 8000ed8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	041b      	lsls	r3, r3, #16
 8000ee6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eee:	6979      	ldr	r1, [r7, #20]
 8000ef0:	3348      	adds	r3, #72	; 0x48
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	18cb      	adds	r3, r1, r3
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d128      	bne.n	8000f54 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	2383      	movs	r3, #131	; 0x83
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d2      	ldr	r2, [r2, r3]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	0011      	movs	r1, r2
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	2383      	movs	r3, #131	; 0x83
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	041b      	lsls	r3, r3, #16
 8000f24:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f2a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3248      	adds	r2, #72	; 0x48
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f48:	6979      	ldr	r1, [r7, #20]
 8000f4a:	3348      	adds	r3, #72	; 0x48
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	18cb      	adds	r3, r1, r3
 8000f50:	3304      	adds	r3, #4
 8000f52:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10c      	bne.n	8000f76 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	2381      	movs	r3, #129	; 0x81
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	58d3      	ldr	r3, [r2, r3]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	43d2      	mvns	r2, r2
 8000f68:	401a      	ands	r2, r3
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	2381      	movs	r3, #129	; 0x81
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	50d1      	str	r1, [r2, r3]
 8000f74:	e00a      	b.n	8000f8c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	2381      	movs	r3, #129	; 0x81
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	58d2      	ldr	r2, [r2, r3]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	0011      	movs	r1, r2
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	2381      	movs	r3, #129	; 0x81
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10c      	bne.n	8000fae <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	2385      	movs	r3, #133	; 0x85
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	58d3      	ldr	r3, [r2, r3]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	43d2      	mvns	r2, r2
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	2385      	movs	r3, #133	; 0x85
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	50d1      	str	r1, [r2, r3]
 8000fac:	e00a      	b.n	8000fc4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	2385      	movs	r3, #133	; 0x85
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	58d2      	ldr	r2, [r2, r3]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	0011      	movs	r1, r2
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	2385      	movs	r3, #133	; 0x85
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d10a      	bne.n	8000fe2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	2387      	movs	r3, #135	; 0x87
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	58d2      	ldr	r2, [r2, r3]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0011      	movs	r1, r2
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	2387      	movs	r3, #135	; 0x87
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	58d3      	ldr	r3, [r2, r3]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4393      	bics	r3, r2
 8000fee:	0019      	movs	r1, r3
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e007      	b.n	800100c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	02d2      	lsls	r2, r2, #11
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
  }
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b006      	add	sp, #24
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2220      	movs	r2, #32
 8001020:	5c9b      	ldrb	r3, [r3, r2]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d12f      	bne.n	8001088 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	2102      	movs	r1, #2
 800102e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2101      	movs	r1, #1
 800103c:	438a      	bics	r2, r1
 800103e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001040:	f7ff fdca 	bl	8000bd8 <HAL_GetTick>
 8001044:	0003      	movs	r3, r0
 8001046:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001048:	e013      	b.n	8001072 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800104a:	f7ff fdc5 	bl	8000bd8 <HAL_GetTick>
 800104e:	0002      	movs	r2, r0
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b0a      	cmp	r3, #10
 8001056:	d90c      	bls.n	8001072 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	0292      	lsls	r2, r2, #10
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2220      	movs	r2, #32
 800106a:	2105      	movs	r1, #5
 800106c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e012      	b.n	8001098 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	4013      	ands	r3, r2
 800107c:	d1e5      	bne.n	800104a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	e007      	b.n	8001098 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	0312      	lsls	r2, r2, #12
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
  }
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ae:	201f      	movs	r0, #31
 80010b0:	183b      	adds	r3, r7, r0
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	2120      	movs	r1, #32
 80010b6:	5c52      	ldrb	r2, [r2, r1]
 80010b8:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010c2:	183b      	adds	r3, r7, r0
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d004      	beq.n	80010d4 <HAL_CAN_AddTxMessage+0x34>
 80010ca:	183b      	adds	r3, r7, r0
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d000      	beq.n	80010d4 <HAL_CAN_AddTxMessage+0x34>
 80010d2:	e0b7      	b.n	8001244 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	04db      	lsls	r3, r3, #19
 80010da:	4013      	ands	r3, r2
 80010dc:	d10a      	bne.n	80010f4 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	051b      	lsls	r3, r3, #20
 80010e4:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010e6:	d105      	bne.n	80010f4 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010f0:	d100      	bne.n	80010f4 <HAL_CAN_AddTxMessage+0x54>
 80010f2:	e09e      	b.n	8001232 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	0e1b      	lsrs	r3, r3, #24
 80010f8:	2203      	movs	r2, #3
 80010fa:	4013      	ands	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d908      	bls.n	8001116 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	0412      	lsls	r2, r2, #16
 800110c:	431a      	orrs	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e09e      	b.n	8001254 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4311      	orrs	r1, r2
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	3218      	adds	r2, #24
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	50d1      	str	r1, [r2, r3]
 8001140:	e00f      	b.n	8001162 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800114c:	431a      	orrs	r2, r3
 800114e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001158:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	3218      	adds	r2, #24
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3318      	adds	r3, #24
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	18cb      	adds	r3, r1, r3
 8001172:	3304      	adds	r3, #4
 8001174:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	7d1b      	ldrb	r3, [r3, #20]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d112      	bne.n	80011a4 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3318      	adds	r3, #24
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	3304      	adds	r3, #4
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6819      	ldr	r1, [r3, #0]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	431a      	orrs	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3318      	adds	r3, #24
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	18cb      	adds	r3, r1, r3
 80011a0:	3304      	adds	r3, #4
 80011a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3307      	adds	r3, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	061a      	lsls	r2, r3, #24
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3306      	adds	r3, #6
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3305      	adds	r3, #5
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3304      	adds	r3, #4
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	0019      	movs	r1, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	6979      	ldr	r1, [r7, #20]
 80011d0:	23c6      	movs	r3, #198	; 0xc6
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	0109      	lsls	r1, r1, #4
 80011d6:	1841      	adds	r1, r0, r1
 80011d8:	18cb      	adds	r3, r1, r3
 80011da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3303      	adds	r3, #3
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	061a      	lsls	r2, r3, #24
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3302      	adds	r3, #2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	0019      	movs	r1, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	6979      	ldr	r1, [r7, #20]
 8001206:	23c4      	movs	r3, #196	; 0xc4
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	0109      	lsls	r1, r1, #4
 800120c:	1841      	adds	r1, r0, r1
 800120e:	18cb      	adds	r3, r1, r3
 8001210:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	3218      	adds	r2, #24
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	58d2      	ldr	r2, [r2, r3]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2101      	movs	r1, #1
 8001224:	4311      	orrs	r1, r2
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	3218      	adds	r2, #24
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e010      	b.n	8001254 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	0392      	lsls	r2, r2, #14
 800123a:	431a      	orrs	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e007      	b.n	8001254 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	02d2      	lsls	r2, r2, #11
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
  }
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b008      	add	sp, #32
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126a:	2017      	movs	r0, #23
 800126c:	183b      	adds	r3, r7, r0
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	2120      	movs	r1, #32
 8001272:	5c52      	ldrb	r2, [r2, r1]
 8001274:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001276:	0002      	movs	r2, r0
 8001278:	18bb      	adds	r3, r7, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d004      	beq.n	800128a <HAL_CAN_GetRxMessage+0x2e>
 8001280:	18bb      	adds	r3, r7, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d000      	beq.n	800128a <HAL_CAN_GetRxMessage+0x2e>
 8001288:	e0f8      	b.n	800147c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10e      	bne.n	80012ae <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2203      	movs	r2, #3
 8001298:	4013      	ands	r3, r2
 800129a:	d117      	bne.n	80012cc <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	0392      	lsls	r2, r2, #14
 80012a4:	431a      	orrs	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e0ee      	b.n	800148c <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2203      	movs	r2, #3
 80012b6:	4013      	ands	r3, r2
 80012b8:	d108      	bne.n	80012cc <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	0392      	lsls	r2, r2, #14
 80012c2:	431a      	orrs	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0df      	b.n	800148c <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	321b      	adds	r2, #27
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	58d3      	ldr	r3, [r2, r3]
 80012d8:	2204      	movs	r2, #4
 80012da:	401a      	ands	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10b      	bne.n	8001300 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	321b      	adds	r2, #27
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	58d3      	ldr	r3, [r2, r3]
 80012f4:	0d5b      	lsrs	r3, r3, #21
 80012f6:	055b      	lsls	r3, r3, #21
 80012f8:	0d5a      	lsrs	r2, r3, #21
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e00a      	b.n	8001316 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	321b      	adds	r2, #27
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	58d3      	ldr	r3, [r2, r3]
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	321b      	adds	r2, #27
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	58d3      	ldr	r3, [r2, r3]
 8001322:	2202      	movs	r2, #2
 8001324:	401a      	ands	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	331b      	adds	r3, #27
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	3304      	adds	r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	220f      	movs	r2, #15
 800133c:	401a      	ands	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	331b      	adds	r3, #27
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	18d3      	adds	r3, r2, r3
 800134e:	3304      	adds	r3, #4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	331b      	adds	r3, #27
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	3304      	adds	r3, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0c1b      	lsrs	r3, r3, #16
 800136e:	041b      	lsls	r3, r3, #16
 8001370:	0c1a      	lsrs	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6819      	ldr	r1, [r3, #0]
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	23dc      	movs	r3, #220	; 0xdc
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	188a      	adds	r2, r1, r2
 8001384:	18d3      	adds	r3, r2, r3
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	23dc      	movs	r3, #220	; 0xdc
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	188a      	adds	r2, r1, r2
 800139c:	18d3      	adds	r3, r2, r3
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0a1a      	lsrs	r2, r3, #8
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	23dc      	movs	r3, #220	; 0xdc
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	188a      	adds	r2, r1, r2
 80013b8:	18d3      	adds	r3, r2, r3
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0c1a      	lsrs	r2, r3, #16
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3302      	adds	r3, #2
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	23dc      	movs	r3, #220	; 0xdc
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	188a      	adds	r2, r1, r2
 80013d4:	18d3      	adds	r3, r2, r3
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0e1a      	lsrs	r2, r3, #24
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3303      	adds	r3, #3
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6819      	ldr	r1, [r3, #0]
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	23de      	movs	r3, #222	; 0xde
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	188a      	adds	r2, r1, r2
 80013f0:	18d3      	adds	r3, r2, r3
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	3304      	adds	r3, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	23de      	movs	r3, #222	; 0xde
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	188a      	adds	r2, r1, r2
 800140a:	18d3      	adds	r3, r2, r3
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0a1a      	lsrs	r2, r3, #8
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3305      	adds	r3, #5
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	23de      	movs	r3, #222	; 0xde
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	188a      	adds	r2, r1, r2
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0c1a      	lsrs	r2, r3, #16
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3306      	adds	r3, #6
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	23de      	movs	r3, #222	; 0xde
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	188a      	adds	r2, r1, r2
 8001442:	18d3      	adds	r3, r2, r3
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	0e1a      	lsrs	r2, r3, #24
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3307      	adds	r3, #7
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2120      	movs	r1, #32
 8001462:	430a      	orrs	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	e007      	b.n	8001478 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2120      	movs	r1, #32
 8001474:	430a      	orrs	r2, r1
 8001476:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e007      	b.n	800148c <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	02d2      	lsls	r2, r2, #11
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
  }
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b006      	add	sp, #24
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800149e:	200f      	movs	r0, #15
 80014a0:	183b      	adds	r3, r7, r0
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	2120      	movs	r1, #32
 80014a6:	5c52      	ldrb	r2, [r2, r1]
 80014a8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014aa:	0002      	movs	r2, r0
 80014ac:	18bb      	adds	r3, r7, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d003      	beq.n	80014bc <HAL_CAN_ActivateNotification+0x28>
 80014b4:	18bb      	adds	r3, r7, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d109      	bne.n	80014d0 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6959      	ldr	r1, [r3, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e007      	b.n	80014e0 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	02d2      	lsls	r2, r2, #11
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
  }
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b004      	add	sp, #16
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2201      	movs	r2, #1
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_CAN_IRQHandler+0x46>
 800152c:	e084      	b.n	8001638 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2201      	movs	r2, #1
 8001532:	4013      	ands	r3, r2
 8001534:	d024      	beq.n	8001580 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2202      	movs	r2, #2
 8001542:	4013      	ands	r3, r2
 8001544:	d004      	beq.n	8001550 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f981 	bl	8001850 <HAL_CAN_TxMailbox0CompleteCallback>
 800154e:	e017      	b.n	8001580 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2204      	movs	r2, #4
 8001554:	4013      	ands	r3, r2
 8001556:	d005      	beq.n	8001564 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	4313      	orrs	r3, r2
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	e00d      	b.n	8001580 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2208      	movs	r2, #8
 8001568:	4013      	ands	r3, r2
 800156a:	d005      	beq.n	8001578 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	0152      	lsls	r2, r2, #5
 8001572:	4313      	orrs	r3, r2
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	e003      	b.n	8001580 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0018      	movs	r0, r3
 800157c:	f000 f980 	bl	8001880 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4013      	ands	r3, r2
 8001588:	d028      	beq.n	80015dc <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	0052      	lsls	r2, r2, #1
 8001592:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4013      	ands	r3, r2
 800159c:	d004      	beq.n	80015a8 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f95d 	bl	8001860 <HAL_CAN_TxMailbox1CompleteCallback>
 80015a6:	e019      	b.n	80015dc <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4013      	ands	r3, r2
 80015b0:	d005      	beq.n	80015be <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	0192      	lsls	r2, r2, #6
 80015b8:	4313      	orrs	r3, r2
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	e00e      	b.n	80015dc <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d005      	beq.n	80015d4 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	01d2      	lsls	r2, r2, #7
 80015ce:	4313      	orrs	r3, r2
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
 80015d2:	e003      	b.n	80015dc <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 f95a 	bl	8001890 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	4013      	ands	r3, r2
 80015e4:	d028      	beq.n	8001638 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	0252      	lsls	r2, r2, #9
 80015ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 f937 	bl	8001870 <HAL_CAN_TxMailbox2CompleteCallback>
 8001602:	e019      	b.n	8001638 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	02db      	lsls	r3, r3, #11
 800160a:	4013      	ands	r3, r2
 800160c:	d005      	beq.n	800161a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	0212      	lsls	r2, r2, #8
 8001614:	4313      	orrs	r3, r2
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	e00e      	b.n	8001638 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	031b      	lsls	r3, r3, #12
 8001620:	4013      	ands	r3, r2
 8001622:	d005      	beq.n	8001630 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	0252      	lsls	r2, r2, #9
 800162a:	4313      	orrs	r3, r2
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	e003      	b.n	8001638 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	0018      	movs	r0, r3
 8001634:	f000 f934 	bl	80018a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	2208      	movs	r2, #8
 800163c:	4013      	ands	r3, r2
 800163e:	d00c      	beq.n	800165a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2210      	movs	r2, #16
 8001644:	4013      	ands	r3, r2
 8001646:	d008      	beq.n	800165a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4313      	orrs	r3, r2
 8001650:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2210      	movs	r2, #16
 8001658:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	2204      	movs	r2, #4
 800165e:	4013      	ands	r3, r2
 8001660:	d00b      	beq.n	800167a <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2208      	movs	r2, #8
 8001666:	4013      	ands	r3, r2
 8001668:	d007      	beq.n	800167a <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2208      	movs	r2, #8
 8001670:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	0018      	movs	r0, r3
 8001676:	f000 f91b 	bl	80018b0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d009      	beq.n	8001696 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2203      	movs	r2, #3
 800168a:	4013      	ands	r3, r2
 800168c:	d003      	beq.n	8001696 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	f7fe ff61 	bl	8000558 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	4013      	ands	r3, r2
 800169c:	d00c      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2210      	movs	r2, #16
 80016a2:	4013      	ands	r3, r2
 80016a4:	d008      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	00d2      	lsls	r2, r2, #3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2210      	movs	r2, #16
 80016b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	2220      	movs	r2, #32
 80016bc:	4013      	ands	r3, r2
 80016be:	d00b      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2208      	movs	r2, #8
 80016c4:	4013      	ands	r3, r2
 80016c6:	d007      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2208      	movs	r2, #8
 80016ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	0018      	movs	r0, r3
 80016d4:	f000 f8fc 	bl	80018d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	2210      	movs	r2, #16
 80016dc:	4013      	ands	r3, r2
 80016de:	d009      	beq.n	80016f4 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2203      	movs	r2, #3
 80016e8:	4013      	ands	r3, r2
 80016ea:	d003      	beq.n	80016f4 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 f8e6 	bl	80018c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016f4:	6a3a      	ldr	r2, [r7, #32]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	029b      	lsls	r3, r3, #10
 80016fa:	4013      	ands	r3, r2
 80016fc:	d00b      	beq.n	8001716 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	2210      	movs	r2, #16
 8001702:	4013      	ands	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2210      	movs	r2, #16
 800170c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f000 f8e5 	bl	80018e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001716:	6a3a      	ldr	r2, [r7, #32]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	4013      	ands	r3, r2
 800171e:	d00b      	beq.n	8001738 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	2208      	movs	r2, #8
 8001724:	4013      	ands	r3, r2
 8001726:	d007      	beq.n	8001738 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2208      	movs	r2, #8
 800172e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0018      	movs	r0, r3
 8001734:	f000 f8dc 	bl	80018f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001738:	6a3a      	ldr	r2, [r7, #32]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	4013      	ands	r3, r2
 8001740:	d100      	bne.n	8001744 <HAL_CAN_IRQHandler+0x25c>
 8001742:	e074      	b.n	800182e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_CAN_IRQHandler+0x266>
 800174c:	e06b      	b.n	8001826 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800174e:	6a3a      	ldr	r2, [r7, #32]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4013      	ands	r3, r2
 8001756:	d007      	beq.n	8001768 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800175e:	d003      	beq.n	8001768 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	2201      	movs	r2, #1
 8001764:	4313      	orrs	r3, r2
 8001766:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2202      	movs	r2, #2
 8001776:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001778:	d003      	beq.n	8001782 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	2202      	movs	r2, #2
 800177e:	4313      	orrs	r3, r2
 8001780:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001782:	6a3a      	ldr	r2, [r7, #32]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4013      	ands	r3, r2
 800178a:	d007      	beq.n	800179c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2204      	movs	r2, #4
 8001790:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001792:	d003      	beq.n	800179c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	2204      	movs	r2, #4
 8001798:	4313      	orrs	r3, r2
 800179a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800179c:	6a3a      	ldr	r2, [r7, #32]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4013      	ands	r3, r2
 80017a4:	d03f      	beq.n	8001826 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2270      	movs	r2, #112	; 0x70
 80017aa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017ac:	d03b      	beq.n	8001826 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2270      	movs	r2, #112	; 0x70
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b60      	cmp	r3, #96	; 0x60
 80017b6:	d027      	beq.n	8001808 <HAL_CAN_IRQHandler+0x320>
 80017b8:	d82c      	bhi.n	8001814 <HAL_CAN_IRQHandler+0x32c>
 80017ba:	2b50      	cmp	r3, #80	; 0x50
 80017bc:	d01f      	beq.n	80017fe <HAL_CAN_IRQHandler+0x316>
 80017be:	d829      	bhi.n	8001814 <HAL_CAN_IRQHandler+0x32c>
 80017c0:	2b40      	cmp	r3, #64	; 0x40
 80017c2:	d017      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x30c>
 80017c4:	d826      	bhi.n	8001814 <HAL_CAN_IRQHandler+0x32c>
 80017c6:	2b30      	cmp	r3, #48	; 0x30
 80017c8:	d00f      	beq.n	80017ea <HAL_CAN_IRQHandler+0x302>
 80017ca:	d823      	bhi.n	8001814 <HAL_CAN_IRQHandler+0x32c>
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d002      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x2ee>
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d005      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017d4:	e01e      	b.n	8001814 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	2208      	movs	r2, #8
 80017da:	4313      	orrs	r3, r2
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017de:	e01a      	b.n	8001816 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	2210      	movs	r2, #16
 80017e4:	4313      	orrs	r3, r2
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e8:	e015      	b.n	8001816 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	2220      	movs	r2, #32
 80017ee:	4313      	orrs	r3, r2
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f2:	e010      	b.n	8001816 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	2240      	movs	r2, #64	; 0x40
 80017f8:	4313      	orrs	r3, r2
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017fc:	e00b      	b.n	8001816 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	4313      	orrs	r3, r2
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001806:	e006      	b.n	8001816 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	0052      	lsls	r2, r2, #1
 800180e:	4313      	orrs	r3, r2
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001812:	e000      	b.n	8001816 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001814:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2170      	movs	r1, #112	; 0x70
 8001822:	438a      	bics	r2, r1
 8001824:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2204      	movs	r2, #4
 800182c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0018      	movs	r0, r3
 8001844:	f000 f85c 	bl	8001900 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b00a      	add	sp, #40	; 0x28
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b002      	add	sp, #8
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b002      	add	sp, #8
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001908:	46c0      	nop			; (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	b002      	add	sp, #8
 800190e:	bd80      	pop	{r7, pc}

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	0002      	movs	r2, r0
 8001918:	1dfb      	adds	r3, r7, #7
 800191a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800191c:	1dfb      	adds	r3, r7, #7
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b7f      	cmp	r3, #127	; 0x7f
 8001922:	d809      	bhi.n	8001938 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	001a      	movs	r2, r3
 800192a:	231f      	movs	r3, #31
 800192c:	401a      	ands	r2, r3
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_EnableIRQ+0x30>)
 8001930:	2101      	movs	r1, #1
 8001932:	4091      	lsls	r1, r2
 8001934:	000a      	movs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
  }
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	0002      	movs	r2, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001952:	1dfb      	adds	r3, r7, #7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b7f      	cmp	r3, #127	; 0x7f
 8001958:	d828      	bhi.n	80019ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195a:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <__NVIC_SetPriority+0xd4>)
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25b      	sxtb	r3, r3
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	33c0      	adds	r3, #192	; 0xc0
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	589b      	ldr	r3, [r3, r2]
 800196a:	1dfa      	adds	r2, r7, #7
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	0011      	movs	r1, r2
 8001970:	2203      	movs	r2, #3
 8001972:	400a      	ands	r2, r1
 8001974:	00d2      	lsls	r2, r2, #3
 8001976:	21ff      	movs	r1, #255	; 0xff
 8001978:	4091      	lsls	r1, r2
 800197a:	000a      	movs	r2, r1
 800197c:	43d2      	mvns	r2, r2
 800197e:	401a      	ands	r2, r3
 8001980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	22ff      	movs	r2, #255	; 0xff
 8001988:	401a      	ands	r2, r3
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	0018      	movs	r0, r3
 8001990:	2303      	movs	r3, #3
 8001992:	4003      	ands	r3, r0
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001998:	481f      	ldr	r0, [pc, #124]	; (8001a18 <__NVIC_SetPriority+0xd4>)
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	430a      	orrs	r2, r1
 80019a4:	33c0      	adds	r3, #192	; 0xc0
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019aa:	e031      	b.n	8001a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <__NVIC_SetPriority+0xd8>)
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	0019      	movs	r1, r3
 80019b4:	230f      	movs	r3, #15
 80019b6:	400b      	ands	r3, r1
 80019b8:	3b08      	subs	r3, #8
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3306      	adds	r3, #6
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	3304      	adds	r3, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	1dfa      	adds	r2, r7, #7
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	0011      	movs	r1, r2
 80019cc:	2203      	movs	r2, #3
 80019ce:	400a      	ands	r2, r1
 80019d0:	00d2      	lsls	r2, r2, #3
 80019d2:	21ff      	movs	r1, #255	; 0xff
 80019d4:	4091      	lsls	r1, r2
 80019d6:	000a      	movs	r2, r1
 80019d8:	43d2      	mvns	r2, r2
 80019da:	401a      	ands	r2, r3
 80019dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	22ff      	movs	r2, #255	; 0xff
 80019e4:	401a      	ands	r2, r3
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	0018      	movs	r0, r3
 80019ec:	2303      	movs	r3, #3
 80019ee:	4003      	ands	r3, r0
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <__NVIC_SetPriority+0xd8>)
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	001c      	movs	r4, r3
 80019fc:	230f      	movs	r3, #15
 80019fe:	4023      	ands	r3, r4
 8001a00:	3b08      	subs	r3, #8
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	430a      	orrs	r2, r1
 8001a06:	3306      	adds	r3, #6
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	18c3      	adds	r3, r0, r3
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	601a      	str	r2, [r3, #0]
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b003      	add	sp, #12
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	1e5a      	subs	r2, r3, #1
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	045b      	lsls	r3, r3, #17
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d301      	bcc.n	8001a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a34:	2301      	movs	r3, #1
 8001a36:	e010      	b.n	8001a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <SysTick_Config+0x44>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a40:	2301      	movs	r3, #1
 8001a42:	425b      	negs	r3, r3
 8001a44:	2103      	movs	r1, #3
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff ff7c 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x44>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x44>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	210f      	movs	r1, #15
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	1c02      	adds	r2, r0, #0
 8001a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	0002      	movs	r2, r0
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff ff33 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff ffaf 	bl	8001a20 <SysTick_Config>
 8001ac2:	0003      	movs	r3, r0
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	e155      	b.n	8001d88 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4091      	lsls	r1, r2
 8001ae6:	000a      	movs	r2, r1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d100      	bne.n	8001af4 <HAL_GPIO_Init+0x28>
 8001af2:	e146      	b.n	8001d82 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2203      	movs	r2, #3
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2203      	movs	r2, #3
 8001b06:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	0013      	movs	r3, r2
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
 8001b48:	0013      	movs	r3, r2
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	2201      	movs	r2, #1
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d017      	beq.n	8001baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2203      	movs	r2, #3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d123      	bne.n	8001bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	58d3      	ldr	r3, [r2, r3]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	4013      	ands	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2107      	movs	r1, #7
 8001be2:	400b      	ands	r3, r1
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	6939      	ldr	r1, [r7, #16]
 8001bfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	23c0      	movs	r3, #192	; 0xc0
 8001c38:	029b      	lsls	r3, r3, #10
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d100      	bne.n	8001c40 <HAL_GPIO_Init+0x174>
 8001c3e:	e0a0      	b.n	8001d82 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001c46:	2101      	movs	r1, #1
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	619a      	str	r2, [r3, #24]
 8001c4c:	4b54      	ldr	r3, [pc, #336]	; (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c58:	4a52      	ldr	r2, [pc, #328]	; (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	589b      	ldr	r3, [r3, r2]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	409a      	lsls	r2, r3
 8001c72:	0013      	movs	r3, r2
 8001c74:	43da      	mvns	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	2390      	movs	r3, #144	; 0x90
 8001c80:	05db      	lsls	r3, r3, #23
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x1ea>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a46      	ldr	r2, [pc, #280]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x1e6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a45      	ldr	r2, [pc, #276]	; (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a44      	ldr	r2, [pc, #272]	; (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x1de>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e008      	b.n	8001cbc <HAL_GPIO_Init+0x1f0>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x1f0>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e004      	b.n	8001cbc <HAL_GPIO_Init+0x1f0>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_Init+0x1f0>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x1f0>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	2103      	movs	r1, #3
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	4093      	lsls	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ccc:	4935      	ldr	r1, [pc, #212]	; (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d04:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43da      	mvns	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	035b      	lsls	r3, r3, #13
 8001d46:	4013      	ands	r3, r2
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	039b      	lsls	r3, r3, #14
 8001d70:	4013      	ands	r3, r2
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	40da      	lsrs	r2, r3
 8001d90:	1e13      	subs	r3, r2, #0
 8001d92:	d000      	beq.n	8001d96 <HAL_GPIO_Init+0x2ca>
 8001d94:	e6a2      	b.n	8001adc <HAL_GPIO_Init+0x10>
  } 
}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b006      	add	sp, #24
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000800 	.word	0x48000800
 8001db0:	48000c00 	.word	0x48000c00
 8001db4:	48001000 	.word	0x48001000
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	0008      	movs	r0, r1
 8001dc6:	0011      	movs	r1, r2
 8001dc8:	1cbb      	adds	r3, r7, #2
 8001dca:	1c02      	adds	r2, r0, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	1c7b      	adds	r3, r7, #1
 8001dd0:	1c0a      	adds	r2, r1, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd4:	1c7b      	adds	r3, r7, #1
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ddc:	1cbb      	adds	r3, r7, #2
 8001dde:	881a      	ldrh	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de4:	e003      	b.n	8001dee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de6:	1cbb      	adds	r3, r7, #2
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f000 fb76 	bl	80024f8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d100      	bne.n	8001e18 <HAL_RCC_OscConfig+0x20>
 8001e16:	e08e      	b.n	8001f36 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e18:	4bc5      	ldr	r3, [pc, #788]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00e      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e24:	4bc2      	ldr	r3, [pc, #776]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	220c      	movs	r2, #12
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d117      	bne.n	8001e60 <HAL_RCC_OscConfig+0x68>
 8001e30:	4bbf      	ldr	r3, [pc, #764]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	23c0      	movs	r3, #192	; 0xc0
 8001e36:	025b      	lsls	r3, r3, #9
 8001e38:	401a      	ands	r2, r3
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	025b      	lsls	r3, r3, #9
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d10e      	bne.n	8001e60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4bbb      	ldr	r3, [pc, #748]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	029b      	lsls	r3, r3, #10
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d100      	bne.n	8001e50 <HAL_RCC_OscConfig+0x58>
 8001e4e:	e071      	b.n	8001f34 <HAL_RCC_OscConfig+0x13c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d000      	beq.n	8001e5a <HAL_RCC_OscConfig+0x62>
 8001e58:	e06c      	b.n	8001f34 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f000 fb4c 	bl	80024f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x80>
 8001e68:	4bb1      	ldr	r3, [pc, #708]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4bb0      	ldr	r3, [pc, #704]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	0249      	lsls	r1, r1, #9
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e02f      	b.n	8001ed8 <HAL_RCC_OscConfig+0xe0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10c      	bne.n	8001e9a <HAL_RCC_OscConfig+0xa2>
 8001e80:	4bab      	ldr	r3, [pc, #684]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4baa      	ldr	r3, [pc, #680]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e86:	49ab      	ldr	r1, [pc, #684]	; (8002134 <HAL_RCC_OscConfig+0x33c>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4ba8      	ldr	r3, [pc, #672]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4ba7      	ldr	r3, [pc, #668]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001e92:	49a9      	ldr	r1, [pc, #676]	; (8002138 <HAL_RCC_OscConfig+0x340>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e01e      	b.n	8001ed8 <HAL_RCC_OscConfig+0xe0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xc8>
 8001ea2:	4ba3      	ldr	r3, [pc, #652]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4ba2      	ldr	r3, [pc, #648]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	02c9      	lsls	r1, r1, #11
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4b9f      	ldr	r3, [pc, #636]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b9e      	ldr	r3, [pc, #632]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	0249      	lsls	r1, r1, #9
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xe0>
 8001ec0:	4b9b      	ldr	r3, [pc, #620]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b9a      	ldr	r3, [pc, #616]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001ec6:	499b      	ldr	r1, [pc, #620]	; (8002134 <HAL_RCC_OscConfig+0x33c>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	4b98      	ldr	r3, [pc, #608]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b97      	ldr	r3, [pc, #604]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	4999      	ldr	r1, [pc, #612]	; (8002138 <HAL_RCC_OscConfig+0x340>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d014      	beq.n	8001f0a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fe7a 	bl	8000bd8 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eea:	f7fe fe75 	bl	8000bd8 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	; 0x64
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e2fd      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efc:	4b8c      	ldr	r3, [pc, #560]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0xf2>
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fe65 	bl	8000bd8 <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7fe fe60 	bl	8000bd8 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e2e8      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b82      	ldr	r3, [pc, #520]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	029b      	lsls	r3, r3, #10
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x11c>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <HAL_RCC_OscConfig+0x14a>
 8001f40:	e06c      	b.n	800201c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f42:	4b7b      	ldr	r3, [pc, #492]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	220c      	movs	r2, #12
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d00e      	beq.n	8001f6a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f4c:	4b78      	ldr	r3, [pc, #480]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	220c      	movs	r2, #12
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d11f      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1a0>
 8001f58:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	23c0      	movs	r3, #192	; 0xc0
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	401a      	ands	r2, r3
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d116      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	4b71      	ldr	r3, [pc, #452]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_OscConfig+0x188>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e2bb      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b6b      	ldr	r3, [pc, #428]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	22f8      	movs	r2, #248	; 0xf8
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00da      	lsls	r2, r3, #3
 8001f90:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	e041      	b.n	800201c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d024      	beq.n	8001fea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa0:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b62      	ldr	r3, [pc, #392]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe fe14 	bl	8000bd8 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7fe fe0f 	bl	8000bd8 <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e297      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d0f1      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	22f8      	movs	r2, #248	; 0xf8
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	00da      	lsls	r2, r3, #3
 8001fe2:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e018      	b.n	800201c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	4b51      	ldr	r3, [pc, #324]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fdef 	bl	8000bd8 <HAL_GetTick>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe fdea 	bl	8000bd8 <HAL_GetTick>
 8002004:	0002      	movs	r2, r0
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e272      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d1f1      	bne.n	8002000 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2208      	movs	r2, #8
 8002022:	4013      	ands	r3, r2
 8002024:	d036      	beq.n	8002094 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d019      	beq.n	8002062 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b40      	ldr	r3, [pc, #256]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8002030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002032:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8002034:	2101      	movs	r1, #1
 8002036:	430a      	orrs	r2, r1
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe fdcd 	bl	8000bd8 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fdc8 	bl	8000bd8 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e250      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d0f1      	beq.n	8002044 <HAL_RCC_OscConfig+0x24c>
 8002060:	e018      	b.n	8002094 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8002064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002066:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8002068:	2101      	movs	r1, #1
 800206a:	438a      	bics	r2, r1
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7fe fdb3 	bl	8000bd8 <HAL_GetTick>
 8002072:	0003      	movs	r3, r0
 8002074:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002078:	f7fe fdae 	bl	8000bd8 <HAL_GetTick>
 800207c:	0002      	movs	r2, r0
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e236      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208a:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	2202      	movs	r2, #2
 8002090:	4013      	ands	r3, r2
 8002092:	d1f1      	bne.n	8002078 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2204      	movs	r2, #4
 800209a:	4013      	ands	r3, r2
 800209c:	d100      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2a8>
 800209e:	e0b5      	b.n	800220c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a0:	201f      	movs	r0, #31
 80020a2:	183b      	adds	r3, r7, r0
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	055b      	lsls	r3, r3, #21
 80020b0:	4013      	ands	r3, r2
 80020b2:	d110      	bne.n	80020d6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	0549      	lsls	r1, r1, #21
 80020be:	430a      	orrs	r2, r1
 80020c0:	61da      	str	r2, [r3, #28]
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	055b      	lsls	r3, r3, #21
 80020ca:	4013      	ands	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020d0:	183b      	adds	r3, r7, r0
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_RCC_OscConfig+0x344>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	d11a      	bne.n	8002118 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_RCC_OscConfig+0x344>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_RCC_OscConfig+0x344>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0049      	lsls	r1, r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f0:	f7fe fd72 	bl	8000bd8 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fa:	f7fe fd6d 	bl	8000bd8 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1f5      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x344>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d10f      	bne.n	8002140 <HAL_RCC_OscConfig+0x348>
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8002122:	6a1a      	ldr	r2, [r3, #32]
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <HAL_RCC_OscConfig+0x338>)
 8002126:	2101      	movs	r1, #1
 8002128:	430a      	orrs	r2, r1
 800212a:	621a      	str	r2, [r3, #32]
 800212c:	e036      	b.n	800219c <HAL_RCC_OscConfig+0x3a4>
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	40021000 	.word	0x40021000
 8002134:	fffeffff 	.word	0xfffeffff
 8002138:	fffbffff 	.word	0xfffbffff
 800213c:	40007000 	.word	0x40007000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10c      	bne.n	8002162 <HAL_RCC_OscConfig+0x36a>
 8002148:	4bca      	ldr	r3, [pc, #808]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	4bc9      	ldr	r3, [pc, #804]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	621a      	str	r2, [r3, #32]
 8002154:	4bc7      	ldr	r3, [pc, #796]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	4bc6      	ldr	r3, [pc, #792]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800215a:	2104      	movs	r1, #4
 800215c:	438a      	bics	r2, r1
 800215e:	621a      	str	r2, [r3, #32]
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x3a4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x38c>
 800216a:	4bc2      	ldr	r3, [pc, #776]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	4bc1      	ldr	r3, [pc, #772]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002170:	2104      	movs	r1, #4
 8002172:	430a      	orrs	r2, r1
 8002174:	621a      	str	r2, [r3, #32]
 8002176:	4bbf      	ldr	r3, [pc, #764]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	4bbe      	ldr	r3, [pc, #760]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800217c:	2101      	movs	r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	621a      	str	r2, [r3, #32]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x3a4>
 8002184:	4bbb      	ldr	r3, [pc, #748]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002186:	6a1a      	ldr	r2, [r3, #32]
 8002188:	4bba      	ldr	r3, [pc, #744]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800218a:	2101      	movs	r1, #1
 800218c:	438a      	bics	r2, r1
 800218e:	621a      	str	r2, [r3, #32]
 8002190:	4bb8      	ldr	r3, [pc, #736]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002192:	6a1a      	ldr	r2, [r3, #32]
 8002194:	4bb7      	ldr	r3, [pc, #732]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002196:	2104      	movs	r1, #4
 8002198:	438a      	bics	r2, r1
 800219a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d014      	beq.n	80021ce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7fe fd18 	bl	8000bd8 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	e009      	b.n	80021c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7fe fd13 	bl	8000bd8 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	4aaf      	ldr	r2, [pc, #700]	; (8002478 <HAL_RCC_OscConfig+0x680>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e19a      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c2:	4bac      	ldr	r3, [pc, #688]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x3b6>
 80021cc:	e013      	b.n	80021f6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fd03 	bl	8000bd8 <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	e009      	b.n	80021ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fcfe 	bl	8000bd8 <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4aa5      	ldr	r2, [pc, #660]	; (8002478 <HAL_RCC_OscConfig+0x680>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e185      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	4ba1      	ldr	r3, [pc, #644]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	2202      	movs	r2, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f6:	231f      	movs	r3, #31
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b9c      	ldr	r3, [pc, #624]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	4b9b      	ldr	r3, [pc, #620]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002206:	499d      	ldr	r1, [pc, #628]	; (800247c <HAL_RCC_OscConfig+0x684>)
 8002208:	400a      	ands	r2, r1
 800220a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2210      	movs	r2, #16
 8002212:	4013      	ands	r3, r2
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d12a      	bne.n	8002274 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800221e:	4b95      	ldr	r3, [pc, #596]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002222:	4b94      	ldr	r3, [pc, #592]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002224:	2104      	movs	r1, #4
 8002226:	430a      	orrs	r2, r1
 8002228:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800222a:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800222c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222e:	4b91      	ldr	r3, [pc, #580]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7fe fccf 	bl	8000bd8 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002240:	f7fe fcca 	bl	8000bd8 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e152      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d0f1      	beq.n	8002240 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800225c:	4b85      	ldr	r3, [pc, #532]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	22f8      	movs	r2, #248	; 0xf8
 8002262:	4393      	bics	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	00da      	lsls	r2, r3, #3
 800226c:	4b81      	ldr	r3, [pc, #516]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800226e:	430a      	orrs	r2, r1
 8002270:	635a      	str	r2, [r3, #52]	; 0x34
 8002272:	e034      	b.n	80022de <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	3305      	adds	r3, #5
 800227a:	d111      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800227c:	4b7d      	ldr	r3, [pc, #500]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800227e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002280:	4b7c      	ldr	r3, [pc, #496]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002282:	2104      	movs	r1, #4
 8002284:	438a      	bics	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002288:	4b7a      	ldr	r3, [pc, #488]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	22f8      	movs	r2, #248	; 0xf8
 800228e:	4393      	bics	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	00da      	lsls	r2, r3, #3
 8002298:	4b76      	ldr	r3, [pc, #472]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800229a:	430a      	orrs	r2, r1
 800229c:	635a      	str	r2, [r3, #52]	; 0x34
 800229e:	e01e      	b.n	80022de <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022a0:	4b74      	ldr	r3, [pc, #464]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a4:	4b73      	ldr	r3, [pc, #460]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80022a6:	2104      	movs	r1, #4
 80022a8:	430a      	orrs	r2, r1
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022ac:	4b71      	ldr	r3, [pc, #452]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80022ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b0:	4b70      	ldr	r3, [pc, #448]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	438a      	bics	r2, r1
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7fe fc8e 	bl	8000bd8 <HAL_GetTick>
 80022bc:	0003      	movs	r3, r0
 80022be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022c2:	f7fe fc89 	bl	8000bd8 <HAL_GetTick>
 80022c6:	0002      	movs	r2, r0
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e111      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022d4:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80022d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d1f1      	bne.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2220      	movs	r2, #32
 80022e4:	4013      	ands	r3, r2
 80022e6:	d05c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022e8:	4b62      	ldr	r3, [pc, #392]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	220c      	movs	r2, #12
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b0c      	cmp	r3, #12
 80022f2:	d00e      	beq.n	8002312 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022f4:	4b5f      	ldr	r3, [pc, #380]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	220c      	movs	r2, #12
 80022fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d114      	bne.n	800232a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002300:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	23c0      	movs	r3, #192	; 0xc0
 8002306:	025b      	lsls	r3, r3, #9
 8002308:	401a      	ands	r2, r3
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	429a      	cmp	r2, r3
 8002310:	d10b      	bne.n	800232a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	025b      	lsls	r3, r3, #9
 800231a:	4013      	ands	r3, r2
 800231c:	d040      	beq.n	80023a0 <HAL_RCC_OscConfig+0x5a8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d03c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0e6      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01b      	beq.n	800236a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002332:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002336:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	0249      	lsls	r1, r1, #9
 800233c:	430a      	orrs	r2, r1
 800233e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fc4a 	bl	8000bd8 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800234a:	f7fe fc45 	bl	8000bd8 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0cd      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800235c:	4b45      	ldr	r3, [pc, #276]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800235e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	025b      	lsls	r3, r3, #9
 8002364:	4013      	ands	r3, r2
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x552>
 8002368:	e01b      	b.n	80023a2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800236c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002370:	4943      	ldr	r1, [pc, #268]	; (8002480 <HAL_RCC_OscConfig+0x688>)
 8002372:	400a      	ands	r2, r1
 8002374:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7fe fc2f 	bl	8000bd8 <HAL_GetTick>
 800237a:	0003      	movs	r3, r0
 800237c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002380:	f7fe fc2a 	bl	8000bd8 <HAL_GetTick>
 8002384:	0002      	movs	r2, r0
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0b2      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002392:	4b38      	ldr	r3, [pc, #224]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	025b      	lsls	r3, r3, #9
 800239a:	4013      	ands	r3, r2
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x588>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023a0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d100      	bne.n	80023ac <HAL_RCC_OscConfig+0x5b4>
 80023aa:	e0a4      	b.n	80024f6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	220c      	movs	r2, #12
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d100      	bne.n	80023ba <HAL_RCC_OscConfig+0x5c2>
 80023b8:	e078      	b.n	80024ac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d14c      	bne.n	800245c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80023c8:	492e      	ldr	r1, [pc, #184]	; (8002484 <HAL_RCC_OscConfig+0x68c>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fc03 	bl	8000bd8 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fbfe 	bl	8000bd8 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e086      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	049b      	lsls	r3, r3, #18
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	220f      	movs	r2, #15
 80023fc:	4393      	bics	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002406:	430a      	orrs	r2, r1
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_RCC_OscConfig+0x690>)
 8002410:	4013      	ands	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	431a      	orrs	r2, r3
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	0449      	lsls	r1, r1, #17
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fbd1 	bl	8000bd8 <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243c:	f7fe fbcc 	bl	8000bd8 <HAL_GetTick>
 8002440:	0002      	movs	r2, r0
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e054      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	049b      	lsls	r3, r3, #18
 8002456:	4013      	ands	r3, r2
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x644>
 800245a:	e04c      	b.n	80024f6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <HAL_RCC_OscConfig+0x67c>)
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <HAL_RCC_OscConfig+0x68c>)
 8002464:	400a      	ands	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fbb6 	bl	8000bd8 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x6a6>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	40021000 	.word	0x40021000
 8002478:	00001388 	.word	0x00001388
 800247c:	efffffff 	.word	0xefffffff
 8002480:	fffeffff 	.word	0xfffeffff
 8002484:	feffffff 	.word	0xfeffffff
 8002488:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fba4 	bl	8000bd8 <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e02c      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_RCC_OscConfig+0x708>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	049b      	lsls	r3, r3, #18
 80024a6:	4013      	ands	r3, r2
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x694>
 80024aa:	e024      	b.n	80024f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e01f      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_OscConfig+0x708>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x708>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	23c0      	movs	r3, #192	; 0xc0
 80024c8:	025b      	lsls	r3, r3, #9
 80024ca:	401a      	ands	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10e      	bne.n	80024f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	220f      	movs	r2, #15
 80024d8:	401a      	ands	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	23f0      	movs	r3, #240	; 0xf0
 80024e6:	039b      	lsls	r3, r3, #14
 80024e8:	401a      	ands	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b008      	add	sp, #32
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000

08002504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0bf      	b.n	8002698 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <HAL_RCC_ClockConfig+0x19c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	4013      	ands	r3, r2
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d911      	bls.n	800254a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b5e      	ldr	r3, [pc, #376]	; (80026a0 <HAL_RCC_ClockConfig+0x19c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	4393      	bics	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <HAL_RCC_ClockConfig+0x19c>)
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_ClockConfig+0x19c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2201      	movs	r2, #1
 800253e:	4013      	ands	r3, r2
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d001      	beq.n	800254a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0a6      	b.n	8002698 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d015      	beq.n	8002580 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2204      	movs	r2, #4
 800255a:	4013      	ands	r3, r2
 800255c:	d006      	beq.n	800256c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800255e:	4b51      	ldr	r3, [pc, #324]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002564:	21e0      	movs	r1, #224	; 0xe0
 8002566:	00c9      	lsls	r1, r1, #3
 8002568:	430a      	orrs	r2, r1
 800256a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256c:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	22f0      	movs	r2, #240	; 0xf0
 8002572:	4393      	bics	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 800257c:	430a      	orrs	r2, r1
 800257e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2201      	movs	r2, #1
 8002586:	4013      	ands	r3, r2
 8002588:	d04c      	beq.n	8002624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	029b      	lsls	r3, r3, #10
 800259a:	4013      	ands	r3, r2
 800259c:	d120      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e07a      	b.n	8002698 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	049b      	lsls	r3, r3, #18
 80025b2:	4013      	ands	r3, r2
 80025b4:	d114      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06e      	b.n	8002698 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 80025c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	025b      	lsls	r3, r3, #9
 80025ca:	4013      	ands	r3, r2
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e062      	b.n	8002698 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2202      	movs	r2, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e05b      	b.n	8002698 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e0:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2203      	movs	r2, #3
 80025e6:	4393      	bics	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f4:	f7fe faf0 	bl	8000bd8 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fc:	e009      	b.n	8002612 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fe:	f7fe faeb 	bl	8000bd8 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <HAL_RCC_ClockConfig+0x1a4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e042      	b.n	8002698 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	220c      	movs	r2, #12
 8002618:	401a      	ands	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1ec      	bne.n	80025fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <HAL_RCC_ClockConfig+0x19c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2201      	movs	r2, #1
 800262a:	4013      	ands	r3, r2
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d211      	bcs.n	8002656 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_ClockConfig+0x19c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	4393      	bics	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_RCC_ClockConfig+0x19c>)
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_RCC_ClockConfig+0x19c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2201      	movs	r2, #1
 800264a:	4013      	ands	r3, r2
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d001      	beq.n	8002656 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e020      	b.n	8002698 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2204      	movs	r2, #4
 800265c:	4013      	ands	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <HAL_RCC_ClockConfig+0x1a8>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002674:	f000 f820 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002678:	0001      	movs	r1, r0
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x1a0>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	220f      	movs	r2, #15
 8002682:	4013      	ands	r3, r2
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1ac>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	000a      	movs	r2, r1
 800268a:	40da      	lsrs	r2, r3
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1b0>)
 800268e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fa5b 	bl	8000b4c <HAL_InitTick>
  
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b004      	add	sp, #16
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	00001388 	.word	0x00001388
 80026ac:	fffff8ff 	.word	0xfffff8ff
 80026b0:	08003404 	.word	0x08003404
 80026b4:	20000000 	.word	0x20000000

080026b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b08f      	sub	sp, #60	; 0x3c
 80026bc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026be:	2314      	movs	r3, #20
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	4a38      	ldr	r2, [pc, #224]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xec>)
 80026c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026c6:	c313      	stmia	r3!, {r0, r1, r4}
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80026d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026d2:	c313      	stmia	r3!, {r0, r1, r4}
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026dc:	2300      	movs	r3, #0
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e0:	2300      	movs	r3, #0
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80026ec:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_RCC_GetSysClockFreq+0xf4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	220c      	movs	r2, #12
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b0c      	cmp	r3, #12
 80026fa:	d047      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0xd4>
 80026fc:	d849      	bhi.n	8002792 <HAL_RCC_GetSysClockFreq+0xda>
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d002      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x50>
 8002702:	2b08      	cmp	r3, #8
 8002704:	d003      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x56>
 8002706:	e044      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800270c:	e044      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	0c9b      	lsrs	r3, r3, #18
 8002712:	220f      	movs	r2, #15
 8002714:	4013      	ands	r3, r2
 8002716:	2214      	movs	r2, #20
 8002718:	18ba      	adds	r2, r7, r2
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	220f      	movs	r2, #15
 8002724:	4013      	ands	r3, r2
 8002726:	1d3a      	adds	r2, r7, #4
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800272c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272e:	23c0      	movs	r3, #192	; 0xc0
 8002730:	025b      	lsls	r3, r3, #9
 8002732:	401a      	ands	r2, r3
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	025b      	lsls	r3, r3, #9
 8002738:	429a      	cmp	r2, r3
 800273a:	d109      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800273c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273e:	481c      	ldr	r0, [pc, #112]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002740:	f7fd fce0 	bl	8000104 <__udivsi3>
 8002744:	0003      	movs	r3, r0
 8002746:	001a      	movs	r2, r3
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	4353      	muls	r3, r2
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
 800274e:	e01a      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002752:	23c0      	movs	r3, #192	; 0xc0
 8002754:	025b      	lsls	r3, r3, #9
 8002756:	401a      	ands	r2, r3
 8002758:	23c0      	movs	r3, #192	; 0xc0
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	429a      	cmp	r2, r3
 800275e:	d109      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002762:	4814      	ldr	r0, [pc, #80]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002764:	f7fd fcce 	bl	8000104 <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	001a      	movs	r2, r3
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	4353      	muls	r3, r2
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
 8002772:	e008      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002776:	480e      	ldr	r0, [pc, #56]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002778:	f7fd fcc4 	bl	8000104 <__udivsi3>
 800277c:	0003      	movs	r3, r0
 800277e:	001a      	movs	r2, r3
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	4353      	muls	r3, r2
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800278a:	e005      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002790:	e002      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002796:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b00f      	add	sp, #60	; 0x3c
 80027a0:	bd90      	pop	{r4, r7, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	080033e4 	.word	0x080033e4
 80027a8:	080033f4 	.word	0x080033f4
 80027ac:	40021000 	.word	0x40021000
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	02dc6c00 	.word	0x02dc6c00

080027b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027bc:	4b02      	ldr	r3, [pc, #8]	; (80027c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	20000000 	.word	0x20000000

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027d0:	f7ff fff2 	bl	80027b8 <HAL_RCC_GetHCLKFreq>
 80027d4:	0001      	movs	r1, r0
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	2207      	movs	r2, #7
 80027de:	4013      	ands	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	40d9      	lsrs	r1, r3
 80027e6:	000b      	movs	r3, r1
}    
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08003414 	.word	0x08003414

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	025b      	lsls	r3, r3, #9
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002814:	e08e      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2017      	movs	r0, #23
 8002818:	183b      	adds	r3, r7, r0
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b6e      	ldr	r3, [pc, #440]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	055b      	lsls	r3, r3, #21
 8002826:	4013      	ands	r3, r2
 8002828:	d110      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	4b6b      	ldr	r3, [pc, #428]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0549      	lsls	r1, r1, #21
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
 8002838:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	055b      	lsls	r3, r3, #21
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	183b      	adds	r3, r7, r0
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4013      	ands	r3, r2
 8002856:	d11a      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002858:	4b60      	ldr	r3, [pc, #384]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b5f      	ldr	r3, [pc, #380]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	0049      	lsls	r1, r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7fe f9b7 	bl	8000bd8 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	e008      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7fe f9b2 	bl	8000bd8 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0a6      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b56      	ldr	r3, [pc, #344]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d0f0      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800288e:	4b52      	ldr	r3, [pc, #328]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4013      	ands	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d034      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d02c      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b0:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	4b46      	ldr	r3, [pc, #280]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0249      	lsls	r1, r1, #9
 80028c4:	430a      	orrs	r2, r1
 80028c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028ce:	4945      	ldr	r1, [pc, #276]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028d4:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe f979 	bl	8000bd8 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	e009      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe f974 	bl	8000bd8 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	4a3c      	ldr	r2, [pc, #240]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e067      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d0f0      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290a:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800291a:	430a      	orrs	r2, r1
 800291c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800291e:	2317      	movs	r3, #23
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800292e:	492f      	ldr	r1, [pc, #188]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002930:	400a      	ands	r2, r1
 8002932:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293e:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	2203      	movs	r2, #3
 8002944:	4393      	bics	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800294e:	430a      	orrs	r2, r1
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d009      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002962:	4013      	ands	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296c:	430a      	orrs	r2, r1
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	02db      	lsls	r3, r3, #11
 8002978:	4013      	ands	r3, r2
 800297a:	d009      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800298c:	430a      	orrs	r2, r1
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2220      	movs	r2, #32
 8002996:	4013      	ands	r3, r2
 8002998:	d009      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	2210      	movs	r2, #16
 80029a0:	4393      	bics	r3, r2
 80029a2:	0019      	movs	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029aa:	430a      	orrs	r2, r1
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4013      	ands	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	4393      	bics	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699a      	ldr	r2, [r3, #24]
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ca:	430a      	orrs	r2, r1
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b006      	add	sp, #24
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
 80029e0:	fffffcff 	.word	0xfffffcff
 80029e4:	fffeffff 	.word	0xfffeffff
 80029e8:	00001388 	.word	0x00001388
 80029ec:	efffffff 	.word	0xefffffff
 80029f0:	fffcffff 	.word	0xfffcffff
 80029f4:	fff3ffff 	.word	0xfff3ffff

080029f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e044      	b.n	8002a94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d107      	bne.n	8002a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2274      	movs	r2, #116	; 0x74
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fd ffe1 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f8da 	bl	8002bf4 <UART_SetConfig>
 8002a40:	0003      	movs	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e024      	b.n	8002a94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 fab5 	bl	8002fc4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	490d      	ldr	r1, [pc, #52]	; (8002a9c <HAL_UART_Init+0xa4>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	212a      	movs	r1, #42	; 0x2a
 8002a76:	438a      	bics	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 fb4d 	bl	800312c <UART_CheckIdleState>
 8002a92:	0003      	movs	r3, r0
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	ffffb7ff 	.word	0xffffb7ff

08002aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d000      	beq.n	8002aba <HAL_UART_Transmit+0x1a>
 8002ab8:	e096      	b.n	8002be8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_UART_Transmit+0x28>
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e08e      	b.n	8002bea <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d109      	bne.n	8002aec <HAL_UART_Transmit+0x4c>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d001      	beq.n	8002aec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e07e      	b.n	8002bea <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2274      	movs	r2, #116	; 0x74
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Transmit+0x5a>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e077      	b.n	8002bea <HAL_UART_Transmit+0x14a>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2274      	movs	r2, #116	; 0x74
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	2100      	movs	r1, #0
 8002b08:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2221      	movs	r2, #33	; 0x21
 8002b0e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b10:	f7fe f862 	bl	8000bd8 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1dba      	adds	r2, r7, #6
 8002b1c:	2150      	movs	r1, #80	; 0x50
 8002b1e:	8812      	ldrh	r2, [r2, #0]
 8002b20:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1dba      	adds	r2, r7, #6
 8002b26:	2152      	movs	r1, #82	; 0x52
 8002b28:	8812      	ldrh	r2, [r2, #0]
 8002b2a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	015b      	lsls	r3, r3, #5
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d108      	bne.n	8002b4a <HAL_UART_Transmit+0xaa>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	e003      	b.n	8002b52 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2274      	movs	r2, #116	; 0x74
 8002b56:	2100      	movs	r1, #0
 8002b58:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002b5a:	e02d      	b.n	8002bb8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	0013      	movs	r3, r2
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	f000 fb27 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e039      	b.n	8002bea <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	05d2      	lsls	r2, r2, #23
 8002b86:	0dd2      	lsrs	r2, r2, #23
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	3302      	adds	r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e008      	b.n	8002ba6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2252      	movs	r2, #82	; 0x52
 8002baa:	5a9b      	ldrh	r3, [r3, r2]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b299      	uxth	r1, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2252      	movs	r2, #82	; 0x52
 8002bb6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2252      	movs	r2, #82	; 0x52
 8002bbc:	5a9b      	ldrh	r3, [r3, r2]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1cb      	bne.n	8002b5c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	0013      	movs	r3, r2
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	f000 faf3 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e005      	b.n	8002bea <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
  }
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b008      	add	sp, #32
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bfc:	231e      	movs	r3, #30
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4abe      	ldr	r2, [pc, #760]	; (8002f1c <UART_SetConfig+0x328>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4ab9      	ldr	r2, [pc, #740]	; (8002f20 <UART_SetConfig+0x32c>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4ab0      	ldr	r2, [pc, #704]	; (8002f24 <UART_SetConfig+0x330>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4aac      	ldr	r2, [pc, #688]	; (8002f28 <UART_SetConfig+0x334>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d127      	bne.n	8002cca <UART_SetConfig+0xd6>
 8002c7a:	4bac      	ldr	r3, [pc, #688]	; (8002f2c <UART_SetConfig+0x338>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	2203      	movs	r2, #3
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d00d      	beq.n	8002ca2 <UART_SetConfig+0xae>
 8002c86:	d81b      	bhi.n	8002cc0 <UART_SetConfig+0xcc>
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d014      	beq.n	8002cb6 <UART_SetConfig+0xc2>
 8002c8c:	d818      	bhi.n	8002cc0 <UART_SetConfig+0xcc>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <UART_SetConfig+0xa4>
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d00a      	beq.n	8002cac <UART_SetConfig+0xb8>
 8002c96:	e013      	b.n	8002cc0 <UART_SetConfig+0xcc>
 8002c98:	231f      	movs	r3, #31
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e0bd      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002ca2:	231f      	movs	r3, #31
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e0b8      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002cac:	231f      	movs	r3, #31
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e0b3      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002cb6:	231f      	movs	r3, #31
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	2208      	movs	r2, #8
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e0ae      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002cc0:	231f      	movs	r3, #31
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e0a9      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a98      	ldr	r2, [pc, #608]	; (8002f30 <UART_SetConfig+0x33c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d134      	bne.n	8002d3e <UART_SetConfig+0x14a>
 8002cd4:	4b95      	ldr	r3, [pc, #596]	; (8002f2c <UART_SetConfig+0x338>)
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	23c0      	movs	r3, #192	; 0xc0
 8002cda:	029b      	lsls	r3, r3, #10
 8002cdc:	4013      	ands	r3, r2
 8002cde:	22c0      	movs	r2, #192	; 0xc0
 8002ce0:	0292      	lsls	r2, r2, #10
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d017      	beq.n	8002d16 <UART_SetConfig+0x122>
 8002ce6:	22c0      	movs	r2, #192	; 0xc0
 8002ce8:	0292      	lsls	r2, r2, #10
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d822      	bhi.n	8002d34 <UART_SetConfig+0x140>
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	0292      	lsls	r2, r2, #10
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <UART_SetConfig+0x136>
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0292      	lsls	r2, r2, #10
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d81a      	bhi.n	8002d34 <UART_SetConfig+0x140>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <UART_SetConfig+0x118>
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	0252      	lsls	r2, r2, #9
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00a      	beq.n	8002d20 <UART_SetConfig+0x12c>
 8002d0a:	e013      	b.n	8002d34 <UART_SetConfig+0x140>
 8002d0c:	231f      	movs	r3, #31
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e083      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002d16:	231f      	movs	r3, #31
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e07e      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002d20:	231f      	movs	r3, #31
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	2204      	movs	r2, #4
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e079      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002d2a:	231f      	movs	r3, #31
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2208      	movs	r2, #8
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e074      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002d34:	231f      	movs	r3, #31
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	2210      	movs	r2, #16
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e06f      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7c      	ldr	r2, [pc, #496]	; (8002f34 <UART_SetConfig+0x340>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d134      	bne.n	8002db2 <UART_SetConfig+0x1be>
 8002d48:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <UART_SetConfig+0x338>)
 8002d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4c:	23c0      	movs	r3, #192	; 0xc0
 8002d4e:	031b      	lsls	r3, r3, #12
 8002d50:	4013      	ands	r3, r2
 8002d52:	22c0      	movs	r2, #192	; 0xc0
 8002d54:	0312      	lsls	r2, r2, #12
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d017      	beq.n	8002d8a <UART_SetConfig+0x196>
 8002d5a:	22c0      	movs	r2, #192	; 0xc0
 8002d5c:	0312      	lsls	r2, r2, #12
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d822      	bhi.n	8002da8 <UART_SetConfig+0x1b4>
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	0312      	lsls	r2, r2, #12
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <UART_SetConfig+0x1aa>
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	0312      	lsls	r2, r2, #12
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d81a      	bhi.n	8002da8 <UART_SetConfig+0x1b4>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <UART_SetConfig+0x18c>
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	02d2      	lsls	r2, r2, #11
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00a      	beq.n	8002d94 <UART_SetConfig+0x1a0>
 8002d7e:	e013      	b.n	8002da8 <UART_SetConfig+0x1b4>
 8002d80:	231f      	movs	r3, #31
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e049      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002d8a:	231f      	movs	r3, #31
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2202      	movs	r2, #2
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e044      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002d94:	231f      	movs	r3, #31
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2204      	movs	r2, #4
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e03f      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002d9e:	231f      	movs	r3, #31
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2208      	movs	r2, #8
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e03a      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002da8:	231f      	movs	r3, #31
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2210      	movs	r2, #16
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e035      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a60      	ldr	r2, [pc, #384]	; (8002f38 <UART_SetConfig+0x344>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d104      	bne.n	8002dc6 <UART_SetConfig+0x1d2>
 8002dbc:	231f      	movs	r3, #31
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e02b      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a5c      	ldr	r2, [pc, #368]	; (8002f3c <UART_SetConfig+0x348>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d104      	bne.n	8002dda <UART_SetConfig+0x1e6>
 8002dd0:	231f      	movs	r3, #31
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e021      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <UART_SetConfig+0x34c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d104      	bne.n	8002dee <UART_SetConfig+0x1fa>
 8002de4:	231f      	movs	r3, #31
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e017      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a54      	ldr	r2, [pc, #336]	; (8002f44 <UART_SetConfig+0x350>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d104      	bne.n	8002e02 <UART_SetConfig+0x20e>
 8002df8:	231f      	movs	r3, #31
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e00d      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a50      	ldr	r2, [pc, #320]	; (8002f48 <UART_SetConfig+0x354>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d104      	bne.n	8002e16 <UART_SetConfig+0x222>
 8002e0c:	231f      	movs	r3, #31
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e003      	b.n	8002e1e <UART_SetConfig+0x22a>
 8002e16:	231f      	movs	r3, #31
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d15d      	bne.n	8002ee6 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8002e2a:	231f      	movs	r3, #31
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d015      	beq.n	8002e60 <UART_SetConfig+0x26c>
 8002e34:	dc18      	bgt.n	8002e68 <UART_SetConfig+0x274>
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d00d      	beq.n	8002e56 <UART_SetConfig+0x262>
 8002e3a:	dc15      	bgt.n	8002e68 <UART_SetConfig+0x274>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <UART_SetConfig+0x252>
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d005      	beq.n	8002e50 <UART_SetConfig+0x25c>
 8002e44:	e010      	b.n	8002e68 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e46:	f7ff fcc1 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	61bb      	str	r3, [r7, #24]
        break;
 8002e4e:	e012      	b.n	8002e76 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e50:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <UART_SetConfig+0x358>)
 8002e52:	61bb      	str	r3, [r7, #24]
        break;
 8002e54:	e00f      	b.n	8002e76 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e56:	f7ff fc2f 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	61bb      	str	r3, [r7, #24]
        break;
 8002e5e:	e00a      	b.n	8002e76 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	61bb      	str	r3, [r7, #24]
        break;
 8002e66:	e006      	b.n	8002e76 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e6c:	231e      	movs	r3, #30
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
        break;
 8002e74:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d100      	bne.n	8002e7e <UART_SetConfig+0x28a>
 8002e7c:	e095      	b.n	8002faa <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	005a      	lsls	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	18d2      	adds	r2, r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0019      	movs	r1, r3
 8002e90:	0010      	movs	r0, r2
 8002e92:	f7fd f937 	bl	8000104 <__udivsi3>
 8002e96:	0003      	movs	r3, r0
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	d91c      	bls.n	8002edc <UART_SetConfig+0x2e8>
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	025b      	lsls	r3, r3, #9
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d217      	bcs.n	8002edc <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	200e      	movs	r0, #14
 8002eb2:	183b      	adds	r3, r7, r0
 8002eb4:	210f      	movs	r1, #15
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b299      	uxth	r1, r3
 8002ec6:	183b      	adds	r3, r7, r0
 8002ec8:	183a      	adds	r2, r7, r0
 8002eca:	8812      	ldrh	r2, [r2, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	183a      	adds	r2, r7, r0
 8002ed6:	8812      	ldrh	r2, [r2, #0]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	e066      	b.n	8002faa <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002edc:	231e      	movs	r3, #30
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e061      	b.n	8002faa <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ee6:	231f      	movs	r3, #31
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d02f      	beq.n	8002f50 <UART_SetConfig+0x35c>
 8002ef0:	dc32      	bgt.n	8002f58 <UART_SetConfig+0x364>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d00d      	beq.n	8002f12 <UART_SetConfig+0x31e>
 8002ef6:	dc2f      	bgt.n	8002f58 <UART_SetConfig+0x364>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <UART_SetConfig+0x30e>
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d005      	beq.n	8002f0c <UART_SetConfig+0x318>
 8002f00:	e02a      	b.n	8002f58 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f02:	f7ff fc63 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8002f06:	0003      	movs	r3, r0
 8002f08:	61bb      	str	r3, [r7, #24]
        break;
 8002f0a:	e02c      	b.n	8002f66 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <UART_SetConfig+0x358>)
 8002f0e:	61bb      	str	r3, [r7, #24]
        break;
 8002f10:	e029      	b.n	8002f66 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f12:	f7ff fbd1 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002f16:	0003      	movs	r3, r0
 8002f18:	61bb      	str	r3, [r7, #24]
        break;
 8002f1a:	e024      	b.n	8002f66 <UART_SetConfig+0x372>
 8002f1c:	efff69f3 	.word	0xefff69f3
 8002f20:	ffffcfff 	.word	0xffffcfff
 8002f24:	fffff4ff 	.word	0xfffff4ff
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40004400 	.word	0x40004400
 8002f34:	40004800 	.word	0x40004800
 8002f38:	40004c00 	.word	0x40004c00
 8002f3c:	40005000 	.word	0x40005000
 8002f40:	40011400 	.word	0x40011400
 8002f44:	40011800 	.word	0x40011800
 8002f48:	40011c00 	.word	0x40011c00
 8002f4c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	61bb      	str	r3, [r7, #24]
        break;
 8002f56:	e006      	b.n	8002f66 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f5c:	231e      	movs	r3, #30
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
        break;
 8002f64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01e      	beq.n	8002faa <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	085a      	lsrs	r2, r3, #1
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	18d2      	adds	r2, r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	f7fd f8c1 	bl	8000104 <__udivsi3>
 8002f82:	0003      	movs	r3, r0
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d909      	bls.n	8002fa2 <UART_SetConfig+0x3ae>
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	025b      	lsls	r3, r3, #9
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d204      	bcs.n	8002fa2 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	60da      	str	r2, [r3, #12]
 8002fa0:	e003      	b.n	8002faa <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa2:	231e      	movs	r3, #30
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fb6:	231e      	movs	r3, #30
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	781b      	ldrb	r3, [r3, #0]
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b008      	add	sp, #32
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a4a      	ldr	r2, [pc, #296]	; (8003108 <UART_AdvFeatureConfig+0x144>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d00b      	beq.n	8003010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a43      	ldr	r2, [pc, #268]	; (800310c <UART_AdvFeatureConfig+0x148>)
 8003000:	4013      	ands	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	2204      	movs	r2, #4
 8003016:	4013      	ands	r3, r2
 8003018:	d00b      	beq.n	8003032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a3b      	ldr	r2, [pc, #236]	; (8003110 <UART_AdvFeatureConfig+0x14c>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2208      	movs	r2, #8
 8003038:	4013      	ands	r3, r2
 800303a:	d00b      	beq.n	8003054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4a34      	ldr	r2, [pc, #208]	; (8003114 <UART_AdvFeatureConfig+0x150>)
 8003044:	4013      	ands	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2210      	movs	r2, #16
 800305a:	4013      	ands	r3, r2
 800305c:	d00b      	beq.n	8003076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <UART_AdvFeatureConfig+0x154>)
 8003066:	4013      	ands	r3, r2
 8003068:	0019      	movs	r1, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	2220      	movs	r2, #32
 800307c:	4013      	ands	r3, r2
 800307e:	d00b      	beq.n	8003098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4a25      	ldr	r2, [pc, #148]	; (800311c <UART_AdvFeatureConfig+0x158>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2240      	movs	r2, #64	; 0x40
 800309e:	4013      	ands	r3, r2
 80030a0:	d01d      	beq.n	80030de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <UART_AdvFeatureConfig+0x15c>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	035b      	lsls	r3, r3, #13
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d10b      	bne.n	80030de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a15      	ldr	r2, [pc, #84]	; (8003124 <UART_AdvFeatureConfig+0x160>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	4013      	ands	r3, r2
 80030e6:	d00b      	beq.n	8003100 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a0e      	ldr	r2, [pc, #56]	; (8003128 <UART_AdvFeatureConfig+0x164>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b002      	add	sp, #8
 8003106:	bd80      	pop	{r7, pc}
 8003108:	fffdffff 	.word	0xfffdffff
 800310c:	fffeffff 	.word	0xfffeffff
 8003110:	fffbffff 	.word	0xfffbffff
 8003114:	ffff7fff 	.word	0xffff7fff
 8003118:	ffffefff 	.word	0xffffefff
 800311c:	ffffdfff 	.word	0xffffdfff
 8003120:	ffefffff 	.word	0xffefffff
 8003124:	ff9fffff 	.word	0xff9fffff
 8003128:	fff7ffff 	.word	0xfff7ffff

0800312c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af02      	add	r7, sp, #8
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	2100      	movs	r1, #0
 800313a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800313c:	f7fd fd4c 	bl	8000bd8 <HAL_GetTick>
 8003140:	0003      	movs	r3, r0
 8003142:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2208      	movs	r2, #8
 800314c:	4013      	ands	r3, r2
 800314e:	2b08      	cmp	r3, #8
 8003150:	d10c      	bne.n	800316c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	0391      	lsls	r1, r2, #14
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <UART_CheckIdleState+0x8c>)
 800315c:	9200      	str	r2, [sp, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	f000 f82c 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e021      	b.n	80031b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2204      	movs	r2, #4
 8003174:	4013      	ands	r3, r2
 8003176:	2b04      	cmp	r3, #4
 8003178:	d10c      	bne.n	8003194 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2280      	movs	r2, #128	; 0x80
 800317e:	03d1      	lsls	r1, r2, #15
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <UART_CheckIdleState+0x8c>)
 8003184:	9200      	str	r2, [sp, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	f000 f818 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 800318c:	1e03      	subs	r3, r0, #0
 800318e:	d001      	beq.n	8003194 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e00d      	b.n	80031b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2274      	movs	r2, #116	; 0x74
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	01ffffff 	.word	0x01ffffff

080031bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b094      	sub	sp, #80	; 0x50
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031cc:	e0a3      	b.n	8003316 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d0:	3301      	adds	r3, #1
 80031d2:	d100      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80031d4:	e09f      	b.n	8003316 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d6:	f7fd fcff 	bl	8000bd8 <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <UART_WaitOnFlagUntilTimeout+0x30>
 80031e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d13d      	bne.n	8003268 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031f4:	647b      	str	r3, [r7, #68]	; 0x44
 80031f6:	2301      	movs	r3, #1
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	494c      	ldr	r1, [pc, #304]	; (8003340 <UART_WaitOnFlagUntilTimeout+0x184>)
 800320e:	400a      	ands	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003214:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321e:	f3ef 8310 	mrs	r3, PRIMASK
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
 8003228:	2301      	movs	r3, #1
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	438a      	bics	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2274      	movs	r2, #116	; 0x74
 8003260:	2100      	movs	r1, #0
 8003262:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e067      	b.n	8003338 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2204      	movs	r2, #4
 8003270:	4013      	ands	r3, r2
 8003272:	d050      	beq.n	8003316 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	401a      	ands	r2, r3
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	429a      	cmp	r2, r3
 8003286:	d146      	bne.n	8003316 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003292:	f3ef 8310 	mrs	r3, PRIMASK
 8003296:	613b      	str	r3, [r7, #16]
  return(result);
 8003298:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800329a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800329c:	2301      	movs	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4923      	ldr	r1, [pc, #140]	; (8003340 <UART_WaitOnFlagUntilTimeout+0x184>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f383 8810 	msr	PRIMASK, r3
}
 80032c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c4:	f3ef 8310 	mrs	r3, PRIMASK
 80032c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80032ca:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ce:	2301      	movs	r3, #1
 80032d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	438a      	bics	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	f383 8810 	msr	PRIMASK, r3
}
 80032f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	2120      	movs	r1, #32
 8003308:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2274      	movs	r2, #116	; 0x74
 800330e:	2100      	movs	r1, #0
 8003310:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e010      	b.n	8003338 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	425a      	negs	r2, r3
 8003326:	4153      	adcs	r3, r2
 8003328:	b2db      	uxtb	r3, r3
 800332a:	001a      	movs	r2, r3
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d100      	bne.n	8003336 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003334:	e74b      	b.n	80031ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b014      	add	sp, #80	; 0x50
 800333e:	bd80      	pop	{r7, pc}
 8003340:	fffffe5f 	.word	0xfffffe5f

08003344 <__libc_init_array>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	2600      	movs	r6, #0
 8003348:	4d0c      	ldr	r5, [pc, #48]	; (800337c <__libc_init_array+0x38>)
 800334a:	4c0d      	ldr	r4, [pc, #52]	; (8003380 <__libc_init_array+0x3c>)
 800334c:	1b64      	subs	r4, r4, r5
 800334e:	10a4      	asrs	r4, r4, #2
 8003350:	42a6      	cmp	r6, r4
 8003352:	d109      	bne.n	8003368 <__libc_init_array+0x24>
 8003354:	2600      	movs	r6, #0
 8003356:	f000 f821 	bl	800339c <_init>
 800335a:	4d0a      	ldr	r5, [pc, #40]	; (8003384 <__libc_init_array+0x40>)
 800335c:	4c0a      	ldr	r4, [pc, #40]	; (8003388 <__libc_init_array+0x44>)
 800335e:	1b64      	subs	r4, r4, r5
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	42a6      	cmp	r6, r4
 8003364:	d105      	bne.n	8003372 <__libc_init_array+0x2e>
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	00b3      	lsls	r3, r6, #2
 800336a:	58eb      	ldr	r3, [r5, r3]
 800336c:	4798      	blx	r3
 800336e:	3601      	adds	r6, #1
 8003370:	e7ee      	b.n	8003350 <__libc_init_array+0xc>
 8003372:	00b3      	lsls	r3, r6, #2
 8003374:	58eb      	ldr	r3, [r5, r3]
 8003376:	4798      	blx	r3
 8003378:	3601      	adds	r6, #1
 800337a:	e7f2      	b.n	8003362 <__libc_init_array+0x1e>
 800337c:	0800341c 	.word	0x0800341c
 8003380:	0800341c 	.word	0x0800341c
 8003384:	0800341c 	.word	0x0800341c
 8003388:	08003420 	.word	0x08003420

0800338c <memset>:
 800338c:	0003      	movs	r3, r0
 800338e:	1882      	adds	r2, r0, r2
 8003390:	4293      	cmp	r3, r2
 8003392:	d100      	bne.n	8003396 <memset+0xa>
 8003394:	4770      	bx	lr
 8003396:	7019      	strb	r1, [r3, #0]
 8003398:	3301      	adds	r3, #1
 800339a:	e7f9      	b.n	8003390 <memset+0x4>

0800339c <_init>:
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a2:	bc08      	pop	{r3}
 80033a4:	469e      	mov	lr, r3
 80033a6:	4770      	bx	lr

080033a8 <_fini>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr
