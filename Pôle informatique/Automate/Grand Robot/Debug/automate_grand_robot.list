
automate_grand_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006094  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006220  08006220  00016220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006428  08006428  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006428  08006428  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006428  08006428  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000120  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9ca  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec9  00000000  00000000  0002ca06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ac8  00000000  00000000  0002f490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b9f7  00000000  00000000  0002ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8a9  00000000  00000000  0004b94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3570  00000000  00000000  000591f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fc768  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034b0  00000000  00000000  000fc7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006204 	.word	0x08006204

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006204 	.word	0x08006204

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \param isRep vrai si c'est une reponse a une requete, faux sinon
 * \param RepId indique le nombre de reponse atendu pour une requete et le num de la reponse pour une reponse
 * \param dataLen frame payload length in byte (0 .. 8) aka data length code
 * \param data CAN frame payload (up to 8 byte)
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b09a      	sub	sp, #104	; 0x68
 8000ba8:	af06      	add	r7, sp, #24
 8000baa:	6078      	str	r0, [r7, #4]
	// traitement et mise en forme de la trame
	/////////////////////////////////////////////////////////////////////////
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000bac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bb0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f001 f8af 	bl	8001d1a <HAL_CAN_GetRxMessage>

	struct CanResponse_t msg;
	msg = traitement_trame( RxHeader, RxData);
 8000bbc:	f107 050c 	add.w	r5, r7, #12
 8000bc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bc4:	9304      	str	r3, [sp, #16]
 8000bc6:	466c      	mov	r4, sp
 8000bc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f000 f85f 	bl	8000c9c <traitement_trame>
	/////////////////////////////////////////////////////////////////////////
	switch(msg.codeFct){
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f5b3 2fc6 	cmp.w	r3, #405504	; 0x63000
 8000be4:	d108      	bne.n	8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
	case DEPLACEMENT_BRAS_POMPE :;
		//msg.data[0];
		//msg.data[1]*255+msg.data[2];
		angle = msg.data[0];
 8000be6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000bee:	601a      	str	r2, [r3, #0]
		flag=1;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]


	break;
 8000bf6:	e000      	b.n	8000bfa <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	default :

	break;
 8000bf8:	bf00      	nop


	//renvoi un msg sur le bus can
	//uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
	//send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5) ;
}
 8000bfa:	bf00      	nop
 8000bfc:	3750      	adds	r7, #80	; 0x50
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bdb0      	pop	{r4, r5, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000128 	.word	0x20000128
 8000c08:	20000124 	.word	0x20000124

08000c0c <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR adresse) {
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	b5b0      	push	{r4, r5, r7, lr}
 8000c10:	b08a      	sub	sp, #40	; 0x28
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 8000c24:	2301      	movs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0b010000000000000; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0; //
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0b111100000000000; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000c32:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000c36:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 8000c44:	230e      	movs	r3, #14
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000c50:	f000 ff55 	bl	8001afe <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 8000c54:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000c58:	f001 f81b 	bl	8001c92 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000c62:	f001 f96c 	bl	8001f3e <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <CAN_Config+0x88>)
 8000c68:	461d      	mov	r5, r3
 8000c6a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c7a:	e885 0003 	stmia.w	r5, {r0, r1}
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)
	CanAdresse = adresse;
 8000c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <CAN_Config+0x8c>)
 8000c84:	701a      	strb	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000c90:	b004      	add	sp, #16
 8000c92:	4770      	bx	lr
 8000c94:	200000f8 	.word	0x200000f8
 8000c98:	20000120 	.word	0x20000120

08000c9c <traitement_trame>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_READ_ERROR} erreur dans la lecture de la trame depuis le buffer
*/
struct CanResponse_t traitement_trame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	b4b0      	push	{r4, r5, r7}
 8000ca0:	b08d      	sub	sp, #52	; 0x34
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		struct CanResponse_t rep;
		//rep.ExtID.champId = frame.ExtId;

		rep.addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR)  ;
 8000cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000cb4:	60fb      	str	r3, [r7, #12]
		rep.emetteur = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR) ;
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	613b      	str	r3, [r7, #16]
		rep.codeFct = (frame.ExtId & CAN_FILTER_CODE_FCT);
 8000cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cc0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8000cc4:	617b      	str	r3, [r7, #20]
		rep.isRep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 8000cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	763b      	strb	r3, [r7, #24]
		rep.RepId = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 8000cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	61fb      	str	r3, [r7, #28]
        if(!is_valid_addr(rep.addr)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_addr(rep.emetteur)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_code_fct(rep.codeFct)) return CAN_E_UNKNOW_CODE_FCT;
        if (frame.DLC >8)  return CAN_E_DATA_SIZE_TOO_LONG;*/

        rep.dataLen = frame.DLC;
 8000ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ce4:	623b      	str	r3, [r7, #32]


        for (int i = 0; i < frame.DLC; i++){
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cea:	e00c      	b.n	8000d06 <traitement_trame+0x6a>
            //if(data[i] <0 || data[i] > 255) return CAN_E_OOB_DATA;
            rep.data[i] = data[i];
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cf0:	4413      	add	r3, r2
 8000cf2:	7819      	ldrb	r1, [r3, #0]
 8000cf4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfa:	4413      	add	r3, r2
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < frame.DLC; i++){
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	3301      	adds	r3, #1
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d8ee      	bhi.n	8000cec <traitement_trame+0x50>
        }


    return rep;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	461d      	mov	r5, r3
 8000d12:	f107 040c 	add.w	r4, r7, #12
 8000d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	3734      	adds	r7, #52	; 0x34
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bcb0      	pop	{r4, r5, r7}
 8000d2a:	b004      	add	sp, #16
 8000d2c:	4770      	bx	lr
	...

08000d30 <deplacement>:
#include "deplacement.h"
#include "deplacement_define.h"

double compteur_angle=0;

float deplacement(float *pointx1, float *pointy1, int dx, int dy, float angle,float x0 , float y0) {
 8000d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d34:	b088      	sub	sp, #32
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	61f8      	str	r0, [r7, #28]
 8000d3a:	61b9      	str	r1, [r7, #24]
 8000d3c:	617a      	str	r2, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d44:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d48:	ed87 1a01 	vstr	s2, [r7, #4]

	compteur_angle+=angle;
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f7ff fb9f 	bl	8000490 <__aeabi_f2d>
 8000d52:	4b83      	ldr	r3, [pc, #524]	; (8000f60 <deplacement+0x230>)
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f7ff fa3c 	bl	80001d4 <__adddf3>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	497f      	ldr	r1, [pc, #508]	; (8000f60 <deplacement+0x230>)
 8000d62:	e9c1 2300 	strd	r2, r3, [r1]

	*pointx1 += x0 + dx * cos(compteur_angle*PI/180) - dy * sin(compteur_angle*PI/180);
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb90 	bl	8000490 <__aeabi_f2d>
 8000d70:	4604      	mov	r4, r0
 8000d72:	460d      	mov	r5, r1
 8000d74:	68b8      	ldr	r0, [r7, #8]
 8000d76:	f7ff fb8b 	bl	8000490 <__aeabi_f2d>
 8000d7a:	4680      	mov	r8, r0
 8000d7c:	4689      	mov	r9, r1
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff fb74 	bl	800046c <__aeabi_i2d>
 8000d84:	4682      	mov	sl, r0
 8000d86:	468b      	mov	fp, r1
 8000d88:	4b75      	ldr	r3, [pc, #468]	; (8000f60 <deplacement+0x230>)
 8000d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d8e:	a372      	add	r3, pc, #456	; (adr r3, 8000f58 <deplacement+0x228>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f7ff fbd4 	bl	8000540 <__aeabi_dmul>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <deplacement+0x234>)
 8000da6:	f7ff fcf5 	bl	8000794 <__aeabi_ddiv>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	ec43 2b17 	vmov	d7, r2, r3
 8000db2:	eeb0 0a47 	vmov.f32	s0, s14
 8000db6:	eef0 0a67 	vmov.f32	s1, s15
 8000dba:	f004 f985 	bl	80050c8 <cos>
 8000dbe:	ec53 2b10 	vmov	r2, r3, d0
 8000dc2:	4650      	mov	r0, sl
 8000dc4:	4659      	mov	r1, fp
 8000dc6:	f7ff fbbb 	bl	8000540 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4640      	mov	r0, r8
 8000dd0:	4649      	mov	r1, r9
 8000dd2:	f7ff f9ff 	bl	80001d4 <__adddf3>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4692      	mov	sl, r2
 8000ddc:	469b      	mov	fp, r3
 8000dde:	6938      	ldr	r0, [r7, #16]
 8000de0:	f7ff fb44 	bl	800046c <__aeabi_i2d>
 8000de4:	4680      	mov	r8, r0
 8000de6:	4689      	mov	r9, r1
 8000de8:	4b5d      	ldr	r3, [pc, #372]	; (8000f60 <deplacement+0x230>)
 8000dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dee:	a35a      	add	r3, pc, #360	; (adr r3, 8000f58 <deplacement+0x228>)
 8000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df4:	f7ff fba4 	bl	8000540 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <deplacement+0x234>)
 8000e06:	f7ff fcc5 	bl	8000794 <__aeabi_ddiv>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	ec43 2b17 	vmov	d7, r2, r3
 8000e12:	eeb0 0a47 	vmov.f32	s0, s14
 8000e16:	eef0 0a67 	vmov.f32	s1, s15
 8000e1a:	f004 f9a9 	bl	8005170 <sin>
 8000e1e:	ec53 2b10 	vmov	r2, r3, d0
 8000e22:	4640      	mov	r0, r8
 8000e24:	4649      	mov	r1, r9
 8000e26:	f7ff fb8b 	bl	8000540 <__aeabi_dmul>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4650      	mov	r0, sl
 8000e30:	4659      	mov	r1, fp
 8000e32:	f7ff f9cd 	bl	80001d0 <__aeabi_dsub>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f7ff f9c9 	bl	80001d4 <__adddf3>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fe5b 	bl	8000b04 <__aeabi_d2f>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	601a      	str	r2, [r3, #0]
	*pointy1 += y0 + dx * sin(compteur_angle*PI/180) + dy * cos(compteur_angle*PI/180);
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb19 	bl	8000490 <__aeabi_f2d>
 8000e5e:	4604      	mov	r4, r0
 8000e60:	460d      	mov	r5, r1
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fb14 	bl	8000490 <__aeabi_f2d>
 8000e68:	4680      	mov	r8, r0
 8000e6a:	4689      	mov	r9, r1
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff fafd 	bl	800046c <__aeabi_i2d>
 8000e72:	4682      	mov	sl, r0
 8000e74:	468b      	mov	fp, r1
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <deplacement+0x230>)
 8000e78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e7c:	a336      	add	r3, pc, #216	; (adr r3, 8000f58 <deplacement+0x228>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff fb5d 	bl	8000540 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <deplacement+0x234>)
 8000e94:	f7ff fc7e 	bl	8000794 <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	ec43 2b17 	vmov	d7, r2, r3
 8000ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ea4:	eef0 0a67 	vmov.f32	s1, s15
 8000ea8:	f004 f962 	bl	8005170 <sin>
 8000eac:	ec53 2b10 	vmov	r2, r3, d0
 8000eb0:	4650      	mov	r0, sl
 8000eb2:	4659      	mov	r1, fp
 8000eb4:	f7ff fb44 	bl	8000540 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	f7ff f988 	bl	80001d4 <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4692      	mov	sl, r2
 8000eca:	469b      	mov	fp, r3
 8000ecc:	6938      	ldr	r0, [r7, #16]
 8000ece:	f7ff facd 	bl	800046c <__aeabi_i2d>
 8000ed2:	4680      	mov	r8, r0
 8000ed4:	4689      	mov	r9, r1
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <deplacement+0x230>)
 8000ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000edc:	a31e      	add	r3, pc, #120	; (adr r3, 8000f58 <deplacement+0x228>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f7ff fb2d 	bl	8000540 <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <deplacement+0x234>)
 8000ef4:	f7ff fc4e 	bl	8000794 <__aeabi_ddiv>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	ec43 2b17 	vmov	d7, r2, r3
 8000f00:	eeb0 0a47 	vmov.f32	s0, s14
 8000f04:	eef0 0a67 	vmov.f32	s1, s15
 8000f08:	f004 f8de 	bl	80050c8 <cos>
 8000f0c:	ec53 2b10 	vmov	r2, r3, d0
 8000f10:	4640      	mov	r0, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	f7ff fb14 	bl	8000540 <__aeabi_dmul>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4650      	mov	r0, sl
 8000f1e:	4659      	mov	r1, fp
 8000f20:	f7ff f958 	bl	80001d4 <__adddf3>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff f952 	bl	80001d4 <__adddf3>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fde4 	bl	8000b04 <__aeabi_d2f>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	601a      	str	r2, [r3, #0]

	return 0;
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	ee07 3a90 	vmov	s15, r3

}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f56:	bf00      	nop
 8000f58:	54442eea 	.word	0x54442eea
 8000f5c:	400921fb 	.word	0x400921fb
 8000f60:	20000030 	.word	0x20000030
 8000f64:	40668000 	.word	0x40668000

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	b08d      	sub	sp, #52	; 0x34
 8000f6c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 fc55 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f849 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 f9f5 	bl	8001364 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f7a:	f000 f8cf 	bl	800111c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f7e:	f000 f979 	bl	8001274 <MX_TIM3_Init>
  MX_CAN_Init();
 8000f82:	f000 f895 	bl	80010b0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config(hcan, CAN_ADDR_ACTIONNEUR_E);
 8000f86:	4e1d      	ldr	r6, [pc, #116]	; (8000ffc <main+0x94>)
 8000f88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8c:	9306      	str	r3, [sp, #24]
 8000f8e:	466d      	mov	r5, sp
 8000f90:	f106 0410 	add.w	r4, r6, #16
 8000f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fa0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fa4:	f7ff fe32 	bl	8000c0c <CAN_Config>

  //float b = a[0];


  //test deplacement validation
  float x1=0;
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  float y1=0;
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
  float *pointx1 = &x1;
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
  float *pointy1 = &y1;
 8000fb8:	463b      	mov	r3, r7
 8000fba:	60bb      	str	r3, [r7, #8]

  deplacement(pointx1, pointy1, 1, 0, 45, 0, 0);
 8000fbc:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8001000 <main+0x98>
 8000fc0:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001000 <main+0x98>
 8000fc4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001004 <main+0x9c>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2201      	movs	r2, #1
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff feae 	bl	8000d30 <deplacement>


  deplacement(pointx1, pointy1, 2, 1, 45, 0, 0);
 8000fd4:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001000 <main+0x98>
 8000fd8:	eddf 0a09 	vldr	s1, [pc, #36]	; 8001000 <main+0x98>
 8000fdc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001004 <main+0x9c>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fea2 	bl	8000d30 <deplacement>


  //test servo moteurs
  deplacement_servo_courroie(140);
 8000fec:	208c      	movs	r0, #140	; 0x8c
 8000fee:	f000 fa1f 	bl	8001430 <deplacement_servo_courroie>
  deplacement_servo_courroie(0);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 fa1c 	bl	8001430 <deplacement_servo_courroie>

  //int a = test_resistance();
  //deplacement_servo_resistance(0);
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <main+0x90>
 8000ffa:	bf00      	nop
 8000ffc:	20000038 	.word	0x20000038
 8001000:	00000000 	.word	0x00000000
 8001004:	42340000 	.word	0x42340000

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b096      	sub	sp, #88	; 0x58
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001012:	2228      	movs	r2, #40	; 0x28
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f004 f84e 	bl	80050b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2310      	movs	r3, #16
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001048:	2300      	movs	r3, #0
 800104a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fc65 	bl	8002920 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800105c:	f000 f9cc 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001060:	230f      	movs	r3, #15
 8001062:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fc8e 	bl	800399c <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001086:	f000 f9b7 	bl	80013f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fe66 	bl	8003d68 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010a2:	f000 f9a9 	bl	80013f8 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3758      	adds	r7, #88	; 0x58
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_CAN_Init+0x64>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <MX_CAN_Init+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_CAN_Init+0x64>)
 80010bc:	2202      	movs	r2, #2
 80010be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_CAN_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_CAN_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_CAN_Init+0x64>)
 80010ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_CAN_Init+0x64>)
 80010d6:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80010da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <MX_CAN_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_CAN_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_CAN_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_CAN_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_CAN_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_CAN_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_CAN_Init+0x64>)
 8001102:	f000 fc01 	bl	8001908 <HAL_CAN_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800110c:	f000 f974 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000038 	.word	0x20000038
 8001118:	40006400 	.word	0x40006400

0800111c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09a      	sub	sp, #104	; 0x68
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	222c      	movs	r2, #44	; 0x2c
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f003 ffae 	bl	80050b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115c:	4b43      	ldr	r3, [pc, #268]	; (800126c <MX_TIM1_Init+0x150>)
 800115e:	4a44      	ldr	r2, [pc, #272]	; (8001270 <MX_TIM1_Init+0x154>)
 8001160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <MX_TIM1_Init+0x150>)
 8001164:	224f      	movs	r2, #79	; 0x4f
 8001166:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <MX_TIM1_Init+0x150>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 800116e:	4b3f      	ldr	r3, [pc, #252]	; (800126c <MX_TIM1_Init+0x150>)
 8001170:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001174:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b3d      	ldr	r3, [pc, #244]	; (800126c <MX_TIM1_Init+0x150>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117c:	4b3b      	ldr	r3, [pc, #236]	; (800126c <MX_TIM1_Init+0x150>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <MX_TIM1_Init+0x150>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001188:	4838      	ldr	r0, [pc, #224]	; (800126c <MX_TIM1_Init+0x150>)
 800118a:	f002 ff13 	bl	8003fb4 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001194:	f000 f930 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800119e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011a2:	4619      	mov	r1, r3
 80011a4:	4831      	ldr	r0, [pc, #196]	; (800126c <MX_TIM1_Init+0x150>)
 80011a6:	f003 f8d1 	bl	800434c <HAL_TIM_ConfigClockSource>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011b0:	f000 f922 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b4:	482d      	ldr	r0, [pc, #180]	; (800126c <MX_TIM1_Init+0x150>)
 80011b6:	f002 ff54 	bl	8004062 <HAL_TIM_PWM_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011c0:	f000 f91a 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011d4:	4619      	mov	r1, r3
 80011d6:	4825      	ldr	r0, [pc, #148]	; (800126c <MX_TIM1_Init+0x150>)
 80011d8:	f003 fe3e 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011e2:	f000 f909 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	; 0x60
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 20;
 80011ea:	2314      	movs	r3, #20
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f2:	2300      	movs	r3, #0
 80011f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001206:	2208      	movs	r2, #8
 8001208:	4619      	mov	r1, r3
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <MX_TIM1_Init+0x150>)
 800120c:	f002 ff8a 	bl	8004124 <HAL_TIM_PWM_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001216:	f000 f8ef 	bl	80013f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001232:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800123c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <MX_TIM1_Init+0x150>)
 8001250:	f003 fe70 	bl	8004f34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800125a:	f000 f8cd 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800125e:	4803      	ldr	r0, [pc, #12]	; (800126c <MX_TIM1_Init+0x150>)
 8001260:	f000 f9f0 	bl	8001644 <HAL_TIM_MspPostInit>

}
 8001264:	bf00      	nop
 8001266:	3768      	adds	r7, #104	; 0x68
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000060 	.word	0x20000060
 8001270:	40012c00 	.word	0x40012c00

08001274 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_TIM3_Init+0xe8>)
 80012a8:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <MX_TIM3_Init+0xec>)
 80012aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <MX_TIM3_Init+0xe8>)
 80012ae:	224f      	movs	r2, #79	; 0x4f
 80012b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <MX_TIM3_Init+0xe8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_TIM3_Init+0xe8>)
 80012ba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_TIM3_Init+0xe8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <MX_TIM3_Init+0xe8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012cc:	4823      	ldr	r0, [pc, #140]	; (800135c <MX_TIM3_Init+0xe8>)
 80012ce:	f002 fe71 	bl	8003fb4 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012d8:	f000 f88e 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	4619      	mov	r1, r3
 80012e8:	481c      	ldr	r0, [pc, #112]	; (800135c <MX_TIM3_Init+0xe8>)
 80012ea:	f003 f82f 	bl	800434c <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012f4:	f000 f880 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012f8:	4818      	ldr	r0, [pc, #96]	; (800135c <MX_TIM3_Init+0xe8>)
 80012fa:	f002 feb2 	bl	8004062 <HAL_TIM_PWM_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001304:	f000 f878 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_TIM3_Init+0xe8>)
 8001318:	f003 fd9e 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001322:	f000 f869 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	; 0x60
 8001328:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 800132a:	2314      	movs	r3, #20
 800132c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	220c      	movs	r2, #12
 800133a:	4619      	mov	r1, r3
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM3_Init+0xe8>)
 800133e:	f002 fef1 	bl	8004124 <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001348:	f000 f856 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM3_Init+0xe8>)
 800134e:	f000 f979 	bl	8001644 <HAL_TIM_MspPostInit>

}
 8001352:	bf00      	nop
 8001354:	3738      	adds	r7, #56	; 0x38
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000ac 	.word	0x200000ac
 8001360:	40000400 	.word	0x40000400

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_GPIO_Init+0x8c>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <MX_GPIO_Init+0x8c>)
 8001380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_GPIO_Init+0x8c>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_GPIO_Init+0x8c>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <MX_GPIO_Init+0x8c>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_GPIO_Init+0x8c>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_GPIO_Init+0x8c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <MX_GPIO_Init+0x8c>)
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	6153      	str	r3, [r2, #20]
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_GPIO_Init+0x8c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pompe_GPIO_Port, pompe_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <MX_GPIO_Init+0x90>)
 80013c8:	f001 fa92 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : pompe_Pin */
  GPIO_InitStruct.Pin = pompe_Pin;
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013d0:	2311      	movs	r3, #17
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(pompe_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_GPIO_Init+0x90>)
 80013e4:	f001 f912 	bl	800260c <HAL_GPIO_Init>

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48000400 	.word	0x48000400

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <servo2Start>:
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
}
void servo1Stop() {
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
}
void servo2Start() {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001408:	2108      	movs	r1, #8
 800140a:	4802      	ldr	r0, [pc, #8]	; (8001414 <servo2Start+0x10>)
 800140c:	f003 fc20 	bl	8004c50 <HAL_TIMEx_PWMN_Start>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000060 	.word	0x20000060

08001418 <servo2Stop>:
void servo2Stop() {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800141c:	2108      	movs	r1, #8
 800141e:	4802      	ldr	r0, [pc, #8]	; (8001428 <servo2Stop+0x10>)
 8001420:	f003 fcbc 	bl	8004d9c <HAL_TIMEx_PWMN_Stop>

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000060 	.word	0x20000060
 800142c:	00000000 	.word	0x00000000

08001430 <deplacement_servo_courroie>:
	TIM3-> CCR4=ANGLE_VENTOUSE_REFERENCE-angle*PAS_SERVO_VENTOUSE;
	attendre(TEMPS_ACTION_VENTOUSE);
	servo1Stop();
}

void deplacement_servo_courroie(int angle) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	servo2Start();
 8001438:	f7ff ffe4 	bl	8001404 <servo2Start>

	TIM1-> CCR3=ANGLE_COURROIE_REFERENCE-angle*PAS_SERVO_COURROIE;
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff f815 	bl	800046c <__aeabi_i2d>
 8001442:	a311      	add	r3, pc, #68	; (adr r3, 8001488 <deplacement_servo_courroie+0x58>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f87a 	bl	8000540 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	f04f 0000 	mov.w	r0, #0
 8001454:	490a      	ldr	r1, [pc, #40]	; (8001480 <deplacement_servo_courroie+0x50>)
 8001456:	f7fe febb 	bl	80001d0 <__aeabi_dsub>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4c09      	ldr	r4, [pc, #36]	; (8001484 <deplacement_servo_courroie+0x54>)
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb2e 	bl	8000ac4 <__aeabi_d2uiz>
 8001468:	4603      	mov	r3, r0
 800146a:	63e3      	str	r3, [r4, #60]	; 0x3c
	attendre(TEMPS_ACTION_COURROIE);
 800146c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001470:	f000 f80e 	bl	8001490 <attendre>
	servo2Stop();
 8001474:	f7ff ffd0 	bl	8001418 <servo2Stop>
	//pas plus de 140
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	406d4000 	.word	0x406d4000
 8001484:	40012c00 	.word	0x40012c00
 8001488:	318fc505 	.word	0x318fc505
 800148c:	3ff02d77 	.word	0x3ff02d77

08001490 <attendre>:
	TIM3-> CCR4=ANGLE_RESISTANCE_REFERENCE+angle*PAS_SERVO_RESISTANCE;
	attendre(TEMPS_ACTION_RESISTANCE);
	servo3Stop();
}

void attendre(int temps){ //temps en ms durant lequel la commande reste active
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 8001498:	f000 fa26 	bl	80018e8 <HAL_ResumeTick>
	uint32_t start=HAL_GetTick();
 800149c:	f000 fa18 	bl	80018d0 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

	while((HAL_GetTick()-start)<temps) {
 80014a2:	e005      	b.n	80014b0 <attendre+0x20>
		uint32_t sto = HAL_GetTick()-start;
 80014a4:	f000 fa14 	bl	80018d0 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	60bb      	str	r3, [r7, #8]
	while((HAL_GetTick()-start)<temps) {
 80014b0:	f000 fa0e 	bl	80018d0 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad2      	subs	r2, r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3f1      	bcc.n	80014a4 <attendre+0x14>
		}
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x44>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6193      	str	r3, [r2, #24]
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x44>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x44>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x44>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <HAL_CAN_MspInit+0xc0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d149      	bne.n	80015ca <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <HAL_CAN_MspInit+0xc4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <HAL_CAN_MspInit+0xc4>)
 800153c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <HAL_CAN_MspInit+0xc4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_CAN_MspInit+0xc4>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_CAN_MspInit+0xc4>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	6153      	str	r3, [r2, #20]
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_CAN_MspInit+0xc4>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001566:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001578:	2309      	movs	r3, #9
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f001 f841 	bl	800260c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2013      	movs	r0, #19
 8001590:	f001 f805 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8001594:	2013      	movs	r0, #19
 8001596:	f001 f81e 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2014      	movs	r0, #20
 80015a0:	f000 fffd 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80015a4:	2014      	movs	r0, #20
 80015a6:	f001 f816 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2015      	movs	r0, #21
 80015b0:	f000 fff5 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80015b4:	2015      	movs	r0, #21
 80015b6:	f001 f80e 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2016      	movs	r0, #22
 80015c0:	f000 ffed 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80015c4:	2016      	movs	r0, #22
 80015c6:	f001 f806 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40006400 	.word	0x40006400
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a13      	ldr	r2, [pc, #76]	; (8001638 <HAL_TIM_Base_MspInit+0x5c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10c      	bne.n	8001608 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_TIM_Base_MspInit+0x60>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <HAL_TIM_Base_MspInit+0x60>)
 80015f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_TIM_Base_MspInit+0x60>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001606:	e010      	b.n	800162a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <HAL_TIM_Base_MspInit+0x64>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10b      	bne.n	800162a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_TIM_Base_MspInit+0x60>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_TIM_Base_MspInit+0x60>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_TIM_Base_MspInit+0x60>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40012c00 	.word	0x40012c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40000400 	.word	0x40000400

08001644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a22      	ldr	r2, [pc, #136]	; (80016ec <HAL_TIM_MspPostInit+0xa8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d11c      	bne.n	80016a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_TIM_MspPostInit+0xac>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <HAL_TIM_MspPostInit+0xac>)
 800166c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <HAL_TIM_MspPostInit+0xac>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0 / OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = servo2_Pin;
 800167e:	2301      	movs	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800168e:	2306      	movs	r3, #6
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo2_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4816      	ldr	r0, [pc, #88]	; (80016f4 <HAL_TIM_MspPostInit+0xb0>)
 800169a:	f000 ffb7 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800169e:	e020      	b.n	80016e2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_TIM_MspPostInit+0xb4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d11b      	bne.n	80016e2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_TIM_MspPostInit+0xac>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <HAL_TIM_MspPostInit+0xac>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6153      	str	r3, [r2, #20]
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_TIM_MspPostInit+0xac>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = servo1_Pin;
 80016c2:	2302      	movs	r3, #2
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016d2:	2302      	movs	r3, #2
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo1_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <HAL_TIM_MspPostInit+0xb8>)
 80016de:	f000 ff95 	bl	800260c <HAL_GPIO_Init>
}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48001400 	.word	0x48001400
 80016f8:	40000400 	.word	0x40000400
 80016fc:	48000400 	.word	0x48000400

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f8ac 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <CAN_TX_IRQHandler+0x10>)
 800175a:	f000 fc16 	bl	8001f8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000038 	.word	0x20000038

08001768 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <CAN_RX0_IRQHandler+0x10>)
 800176e:	f000 fc0c 	bl	8001f8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000038 	.word	0x20000038

0800177c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <CAN_RX1_IRQHandler+0x10>)
 8001782:	f000 fc02 	bl	8001f8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000038 	.word	0x20000038

08001790 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <CAN_SCE_IRQHandler+0x10>)
 8001796:	f000 fbf8 	bl	8001f8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000038 	.word	0x20000038

080017a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopForever+0xe>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopForever+0x16>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017f2:	f7ff ffd7 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f003 fc3b 	bl	8005070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017fa:	f7ff fbb5 	bl	8000f68 <main>

080017fe <LoopForever>:

LoopForever:
    b LoopForever
 80017fe:	e7fe      	b.n	80017fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001800:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800180c:	08006430 	.word	0x08006430
  ldr r2, =_sbss
 8001810:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001814:	20000130 	.word	0x20000130

08001818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC1_2_IRQHandler>
	...

0800181c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_Init+0x28>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_Init+0x28>)
 8001826:	f043 0310 	orr.w	r3, r3, #16
 800182a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 feab 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	200f      	movs	r0, #15
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fe48 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fec3 	bl	80025f2 <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001884:	f000 fe8b 	bl	800259e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	2000012c 	.word	0x2000012c

080018d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000012c 	.word	0x2000012c

080018e8 <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_ResumeTick+0x1c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_ResumeTick+0x1c>)
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	6013      	str	r3, [r2, #0]
  
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0ed      	b.n	8001af6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fdf4 	bl	8001514 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800193c:	f7ff ffc8 	bl	80018d0 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001942:	e012      	b.n	800196a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001944:	f7ff ffc4 	bl	80018d0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d90b      	bls.n	800196a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2205      	movs	r2, #5
 8001962:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0c5      	b.n	8001af6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0e5      	beq.n	8001944 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0202 	bic.w	r2, r2, #2
 8001986:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001988:	f7ff ffa2 	bl	80018d0 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800198e:	e012      	b.n	80019b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001990:	f7ff ff9e 	bl	80018d0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b0a      	cmp	r3, #10
 800199c:	d90b      	bls.n	80019b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2205      	movs	r2, #5
 80019ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e09f      	b.n	8001af6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e5      	bne.n	8001990 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e1b      	ldrb	r3, [r3, #24]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d108      	bne.n	80019de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e007      	b.n	80019ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7e5b      	ldrb	r3, [r3, #25]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e007      	b.n	8001a18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7e9b      	ldrb	r3, [r3, #26]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0220 	orr.w	r2, r2, #32
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e007      	b.n	8001a42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0220 	bic.w	r2, r2, #32
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7edb      	ldrb	r3, [r3, #27]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0210 	bic.w	r2, r2, #16
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0210 	orr.w	r2, r2, #16
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7f1b      	ldrb	r3, [r3, #28]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d108      	bne.n	8001a86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0208 	orr.w	r2, r2, #8
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0208 	bic.w	r2, r2, #8
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7f5b      	ldrb	r3, [r3, #29]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0204 	orr.w	r2, r2, #4
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0204 	bic.w	r2, r2, #4
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	ea42 0103 	orr.w	r1, r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b087      	sub	sp, #28
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d003      	beq.n	8001b24 <HAL_CAN_ConfigFilter+0x26>
 8001b1c:	7cfb      	ldrb	r3, [r7, #19]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	f040 80aa 	bne.w	8001c78 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d123      	bne.n	8001ba6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3248      	adds	r2, #72	; 0x48
 8001b86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b9c:	6979      	ldr	r1, [r7, #20]
 8001b9e:	3348      	adds	r3, #72	; 0x48
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d122      	bne.n	8001bf4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3248      	adds	r2, #72	; 0x48
 8001bd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001be8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bea:	6979      	ldr	r1, [r7, #20]
 8001bec:	3348      	adds	r3, #72	; 0x48
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c0e:	e007      	b.n	8001c20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c6a:	f023 0201 	bic.w	r2, r3, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e006      	b.n	8001c86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d12e      	bne.n	8001d04 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cbe:	f7ff fe07 	bl	80018d0 <HAL_GetTick>
 8001cc2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cc4:	e012      	b.n	8001cec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc6:	f7ff fe03 	bl	80018d0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b0a      	cmp	r3, #10
 8001cd2:	d90b      	bls.n	8001cec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2205      	movs	r2, #5
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e012      	b.n	8001d12 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e5      	bne.n	8001cc6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e006      	b.n	8001d12 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d003      	beq.n	8001d3e <HAL_CAN_GetRxMessage+0x24>
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	f040 80f3 	bne.w	8001f24 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10e      	bne.n	8001d62 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e0e7      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0d8      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	331b      	adds	r3, #27
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0204 	and.w	r2, r3, #4
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	331b      	adds	r3, #27
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	4413      	add	r3, r2
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0d5b      	lsrs	r3, r3, #21
 8001dae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	331b      	adds	r3, #27
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	08db      	lsrs	r3, r3, #3
 8001dc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	331b      	adds	r3, #27
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4413      	add	r3, r2
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0202 	and.w	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	331b      	adds	r3, #27
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	331b      	adds	r3, #27
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	331b      	adds	r3, #27
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0a1a      	lsrs	r2, r3, #8
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0c1a      	lsrs	r2, r3, #16
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3302      	adds	r3, #2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e1a      	lsrs	r2, r3, #24
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0a1a      	lsrs	r2, r3, #8
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3305      	adds	r3, #5
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0c1a      	lsrs	r2, r3, #16
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3306      	adds	r3, #6
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e1a      	lsrs	r2, r3, #24
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	3307      	adds	r3, #7
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e006      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d002      	beq.n	8001f5c <HAL_CAN_ActivateNotification+0x1e>
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d109      	bne.n	8001f70 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6959      	ldr	r1, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e006      	b.n	8001f7e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b08a      	sub	sp, #40	; 0x28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d07c      	beq.n	80020ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d023      	beq.n	8002022 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f983 	bl	80022f8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ff2:	e016      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	e00c      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	e002      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f989 	bl	8002334 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d024      	beq.n	8002076 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002034:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f963 	bl	800230c <HAL_CAN_TxMailbox1CompleteCallback>
 8002046:	e016      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	e00c      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	e002      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f969 	bl	8002348 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d024      	beq.n	80020ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002088:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f943 	bl	8002320 <HAL_CAN_TxMailbox2CompleteCallback>
 800209a:	e016      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	e00c      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e002      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f949 	bl	800235c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00c      	beq.n	80020ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2210      	movs	r2, #16
 80020ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2208      	movs	r2, #8
 8002108:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f930 	bl	8002370 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fd3b 	bl	8000ba4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00c      	beq.n	8002152 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002148:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2210      	movs	r2, #16
 8002150:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2208      	movs	r2, #8
 800216c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f912 	bl	8002398 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8f9 	bl	8002384 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2210      	movs	r2, #16
 80021ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8fc 	bl	80023ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8f5 	bl	80023c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d07b      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d072      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	2b00      	cmp	r3, #0
 8002246:	d043      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d03e      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d02b      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x32a>
 800225c:	2b60      	cmp	r3, #96	; 0x60
 800225e:	d82e      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002260:	2b50      	cmp	r3, #80	; 0x50
 8002262:	d022      	beq.n	80022aa <HAL_CAN_IRQHandler+0x320>
 8002264:	2b50      	cmp	r3, #80	; 0x50
 8002266:	d82a      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d019      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x316>
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d826      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002270:	2b30      	cmp	r3, #48	; 0x30
 8002272:	d010      	beq.n	8002296 <HAL_CAN_IRQHandler+0x30c>
 8002274:	2b30      	cmp	r3, #48	; 0x30
 8002276:	d822      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002278:	2b10      	cmp	r3, #16
 800227a:	d002      	beq.n	8002282 <HAL_CAN_IRQHandler+0x2f8>
 800227c:	2b20      	cmp	r3, #32
 800227e:	d005      	beq.n	800228c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002280:	e01d      	b.n	80022be <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800228a:	e019      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	f043 0310 	orr.w	r3, r3, #16
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002294:	e014      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	f043 0320 	orr.w	r3, r3, #32
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800229e:	e00f      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a8:	e00a      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022b2:	e005      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022bc:	e000      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            break;
 80022be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2204      	movs	r2, #4
 80022d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f872 	bl	80023d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <__NVIC_SetPriorityGrouping+0x44>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	60d3      	str	r3, [r2, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff29 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff3e 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff31 	bl	800244c <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261a:	e14e      	b.n	80028ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8140 	beq.w	80028b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d005      	beq.n	800264c <HAL_GPIO_Init+0x40>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 0201 	and.w	r2, r3, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d017      	beq.n	80026ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d123      	bne.n	800273e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	6939      	ldr	r1, [r7, #16]
 800273a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 809a 	beq.w	80028b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002780:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <HAL_GPIO_Init+0x2cc>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a54      	ldr	r2, [pc, #336]	; (80028d8 <HAL_GPIO_Init+0x2cc>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <HAL_GPIO_Init+0x2cc>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002798:	4a50      	ldr	r2, [pc, #320]	; (80028dc <HAL_GPIO_Init+0x2d0>)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x1e0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_GPIO_Init+0x2d4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1dc>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a45      	ldr	r2, [pc, #276]	; (80028e4 <HAL_GPIO_Init+0x2d8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1d8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a44      	ldr	r2, [pc, #272]	; (80028e8 <HAL_GPIO_Init+0x2dc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1d4>
 80027dc:	2303      	movs	r3, #3
 80027de:	e006      	b.n	80027ee <HAL_GPIO_Init+0x1e2>
 80027e0:	2305      	movs	r3, #5
 80027e2:	e004      	b.n	80027ee <HAL_GPIO_Init+0x1e2>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_Init+0x1e2>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_GPIO_Init+0x1e2>
 80027ec:	2300      	movs	r3, #0
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	4093      	lsls	r3, r2
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027fe:	4937      	ldr	r1, [pc, #220]	; (80028dc <HAL_GPIO_Init+0x2d0>)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280c:	4b37      	ldr	r3, [pc, #220]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002830:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800285a:	4a24      	ldr	r2, [pc, #144]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028ae:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_GPIO_Init+0x2e0>)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f aea9 	bne.w	800261c <HAL_GPIO_Init+0x10>
  }
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010000 	.word	0x40010000
 80028e0:	48000400 	.word	0x48000400
 80028e4:	48000800 	.word	0x48000800
 80028e8:	48000c00 	.word	0x48000c00
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
 80028fc:	4613      	mov	r3, r2
 80028fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800290c:	e002      	b.n	8002914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002926:	af00      	add	r7, sp, #0
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002930:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f001 b823 	b.w	800398c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 817d 	beq.w	8002c56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800295c:	4bbc      	ldr	r3, [pc, #752]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b04      	cmp	r3, #4
 8002966:	d00c      	beq.n	8002982 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002968:	4bb9      	ldr	r3, [pc, #740]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d15c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x10e>
 8002974:	4bb6      	ldr	r3, [pc, #728]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d155      	bne.n	8002a2e <HAL_RCC_OscConfig+0x10e>
 8002982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002986:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002996:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0x94>
 80029ae:	4ba8      	ldr	r3, [pc, #672]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e015      	b.n	80029e0 <HAL_RCC_OscConfig+0xc0>
 80029b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029dc:	4b9c      	ldr	r3, [pc, #624]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029f8:	fab2 f282 	clz	r2, r2
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f002 021f 	and.w	r2, r2, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 811f 	beq.w	8002c54 <HAL_RCC_OscConfig+0x334>
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 8116 	bne.w	8002c54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f000 bfaf 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12e>
 8002a40:	4b83      	ldr	r3, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a82      	ldr	r2, [pc, #520]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e036      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x158>
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7b      	ldr	r2, [pc, #492]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b79      	ldr	r3, [pc, #484]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a78      	ldr	r2, [pc, #480]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e021      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x184>
 8002a8a:	4b71      	ldr	r3, [pc, #452]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a70      	ldr	r2, [pc, #448]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b6e      	ldr	r3, [pc, #440]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6d      	ldr	r2, [pc, #436]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a69      	ldr	r2, [pc, #420]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b67      	ldr	r3, [pc, #412]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a66      	ldr	r2, [pc, #408]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002abc:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f023 020f 	bic.w	r2, r3, #15
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	495f      	ldr	r1, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d059      	beq.n	8002b9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fef3 	bl	80018d0 <HAL_GetTick>
 8002aea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe feee 	bl	80018d0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d902      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	f000 bf43 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_RCC_OscConfig+0x218>
 8002b32:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e015      	b.n	8002b64 <HAL_RCC_OscConfig+0x244>
 8002b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b60:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b70:	fa92 f2a2 	rbit	r2, r2
 8002b74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ab      	beq.n	8002af0 <HAL_RCC_OscConfig+0x1d0>
 8002b98:	e05d      	b.n	8002c56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fe99 	bl	80018d0 <HAL_GetTick>
 8002b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fe94 	bl	80018d0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d902      	bls.n	8002bba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f000 bee9 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d102      	bne.n	8002bec <HAL_RCC_OscConfig+0x2cc>
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_OscConfig+0x2f8>
 8002bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ab      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x284>
 8002c4c:	e003      	b.n	8002c56 <HAL_RCC_OscConfig+0x336>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 817d 	beq.w	8002f66 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c6c:	4ba6      	ldr	r3, [pc, #664]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c78:	4ba3      	ldr	r3, [pc, #652]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d172      	bne.n	8002d6a <HAL_RCC_OscConfig+0x44a>
 8002c84:	4ba0      	ldr	r3, [pc, #640]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d16c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x44a>
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ca2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3a0>
 8002cba:	4b93      	ldr	r3, [pc, #588]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e013      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c8>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ce4:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cf2:	fa92 f2a2 	rbit	r2, r2
 8002cf6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cfa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cfe:	fab2 f282 	clz	r2, r2
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCC_OscConfig+0x410>
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f000 be2e 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b75      	ldr	r3, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	21f8      	movs	r1, #248	; 0xf8
 8002d46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d4e:	fa91 f1a1 	rbit	r1, r1
 8002d52:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d56:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d5a:	fab1 f181 	clz	r1, r1
 8002d5e:	b2c9      	uxtb	r1, r1
 8002d60:	408b      	lsls	r3, r1
 8002d62:	4969      	ldr	r1, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d68:	e0fd      	b.n	8002f66 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8088 	beq.w	8002e8c <HAL_RCC_OscConfig+0x56c>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	2301      	movs	r3, #1
 8002da6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fd92 	bl	80018d0 <HAL_GetTick>
 8002dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fd8d 	bl	80018d0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	f000 bde2 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4d8>
 8002df2:	4b45      	ldr	r3, [pc, #276]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	e013      	b.n	8002e20 <HAL_RCC_OscConfig+0x500>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2202      	movs	r2, #2
 8002e22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f042 0220 	orr.w	r2, r2, #32
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f002 021f 	and.w	r2, r2, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0af      	beq.n	8002db2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	21f8      	movs	r1, #248	; 0xf8
 8002e68:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e70:	fa91 f1a1 	rbit	r1, r1
 8002e74:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e78:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e7c:	fab1 f181 	clz	r1, r1
 8002e80:	b2c9      	uxtb	r1, r1
 8002e82:	408b      	lsls	r3, r1
 8002e84:	4920      	ldr	r1, [pc, #128]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
 8002e8a:	e06c      	b.n	8002f66 <HAL_RCC_OscConfig+0x646>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fd0a 	bl	80018d0 <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fd05 	bl	80018d0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d902      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	f000 bd5a 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d104      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5ec>
 8002f02:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	e015      	b.n	8002f34 <HAL_RCC_OscConfig+0x614>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f30:	4bc8      	ldr	r3, [pc, #800]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2202      	movs	r2, #2
 8002f36:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f46:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0220 	orr.w	r2, r2, #32
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ad      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8110 	beq.w	800319c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d079      	beq.n	8003080 <HAL_RCC_OscConfig+0x760>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4bab      	ldr	r3, [pc, #684]	; (8003258 <HAL_RCC_OscConfig+0x938>)
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fc8b 	bl	80018d0 <HAL_GetTick>
 8002fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fc86 	bl	80018d0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d902      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	f000 bcdb 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800302e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003030:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 8003032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800303c:	2102      	movs	r1, #2
 800303e:	6019      	str	r1, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f1a3 	rbit	r1, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003056:	6019      	str	r1, [r3, #0]
  return result;
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0a0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x6a0>
 800307e:	e08d      	b.n	800319c <HAL_RCC_OscConfig+0x87c>
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030a2:	601a      	str	r2, [r3, #0]
  return result;
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_OscConfig+0x938>)
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	461a      	mov	r2, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fc05 	bl	80018d0 <HAL_GetTick>
 80030c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fc00 	bl	80018d0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	f000 bc55 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030ea:	2202      	movs	r2, #2
 80030ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800310e:	2202      	movs	r2, #2
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fa93 f2a3 	rbit	r2, r3
 8003120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003132:	2202      	movs	r2, #2
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fa93 f2a3 	rbit	r2, r3
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800314c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314e:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 8003150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800315a:	2102      	movs	r1, #2
 800315c:	6019      	str	r1, [r3, #0]
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f1a3 	rbit	r1, r3
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003174:	6019      	str	r1, [r3, #0]
  return result;
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d197      	bne.n	80030cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 81a1 	beq.w	80034f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b8:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_RCC_OscConfig+0x93c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11a      	bne.n	8003234 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_RCC_OscConfig+0x93c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a16      	ldr	r2, [pc, #88]	; (800325c <HAL_RCC_OscConfig+0x93c>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003208:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320a:	f7fe fb61 	bl	80018d0 <HAL_GetTick>
 800320e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	e009      	b.n	8003228 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fe fb5c 	bl	80018d0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	; 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e3b1      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_RCC_OscConfig+0x93c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ef      	beq.n	8003214 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10d      	bne.n	8003260 <HAL_RCC_OscConfig+0x940>
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a02      	ldr	r2, [pc, #8]	; (8003254 <HAL_RCC_OscConfig+0x934>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e03c      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	10908120 	.word	0x10908120
 800325c:	40007000 	.word	0x40007000
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0x96a>
 8003270:	4bc1      	ldr	r3, [pc, #772]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4ac0      	ldr	r2, [pc, #768]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	6213      	str	r3, [r2, #32]
 800327c:	4bbe      	ldr	r3, [pc, #760]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4abd      	ldr	r2, [pc, #756]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003282:	f023 0304 	bic.w	r3, r3, #4
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	e020      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b05      	cmp	r3, #5
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x994>
 800329a:	4bb7      	ldr	r3, [pc, #732]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4ab6      	ldr	r2, [pc, #728]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6213      	str	r3, [r2, #32]
 80032a6:	4bb4      	ldr	r3, [pc, #720]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4ab3      	ldr	r2, [pc, #716]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6213      	str	r3, [r2, #32]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 80032b4:	4bb0      	ldr	r3, [pc, #704]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4aaf      	ldr	r2, [pc, #700]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6213      	str	r3, [r2, #32]
 80032c0:	4bad      	ldr	r3, [pc, #692]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4aac      	ldr	r2, [pc, #688]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032c6:	f023 0304 	bic.w	r3, r3, #4
 80032ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8081 	beq.w	80033e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fe faf7 	bl	80018d0 <HAL_GetTick>
 80032e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe faf2 	bl	80018d0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e345      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003308:	2202      	movs	r2, #2
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800332c:	2202      	movs	r2, #2
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003346:	601a      	str	r2, [r3, #0]
  return result;
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003350:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0xa4c>
 8003366:	4b84      	ldr	r3, [pc, #528]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0xa74>
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003374:	2202      	movs	r2, #2
 8003376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4b79      	ldr	r3, [pc, #484]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003398:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800339c:	2102      	movs	r1, #2
 800339e:	6011      	str	r1, [r2, #0]
 80033a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	fa92 f1a2 	rbit	r1, r2
 80033ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033b6:	6011      	str	r1, [r2, #0]
  return result;
 80033b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	fab2 f282 	clz	r2, r2
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 021f 	and.w	r2, r2, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d084      	beq.n	80032e8 <HAL_RCC_OscConfig+0x9c8>
 80033de:	e07f      	b.n	80034e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe fa76 	bl	80018d0 <HAL_GetTick>
 80033e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00b      	b.n	8003402 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe fa71 	bl	80018d0 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e2c4      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800340a:	2202      	movs	r2, #2
 800340c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fa93 f2a3 	rbit	r2, r3
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800342e:	2202      	movs	r2, #2
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003448:	601a      	str	r2, [r3, #0]
  return result;
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0302 	orr.w	r3, r3, #2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0xb4e>
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	e013      	b.n	8003496 <HAL_RCC_OscConfig+0xb76>
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800349a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800349e:	2102      	movs	r1, #2
 80034a0:	6011      	str	r1, [r2, #0]
 80034a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	fa92 f1a2 	rbit	r1, r2
 80034b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034b8:	6011      	str	r1, [r2, #0]
  return result;
 80034ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f002 021f 	and.w	r2, r2, #31
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d184      	bne.n	80033ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b23      	ldr	r3, [pc, #140]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8242 	beq.w	800398a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	f000 8213 	beq.w	800393a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003518:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b02      	cmp	r3, #2
 8003522:	f040 8162 	bne.w	80037ea <HAL_RCC_OscConfig+0xeca>
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800352e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800354a:	601a      	str	r2, [r3, #0]
  return result;
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003554:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	2300      	movs	r3, #0
 800356a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe f9b0 	bl	80018d0 <HAL_GetTick>
 8003570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	e00c      	b.n	8003590 <HAL_RCC_OscConfig+0xc70>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe f9a8 	bl	80018d0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1fd      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800359c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035b4:	601a      	str	r2, [r3, #0]
  return result;
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80035be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_RCC_OscConfig+0xcba>
 80035d4:	4bb0      	ldr	r3, [pc, #704]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e027      	b.n	800362a <HAL_RCC_OscConfig+0xd0a>
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003604:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f2a3 	rbit	r2, r3
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	4b9c      	ldr	r3, [pc, #624]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800362e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003632:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003636:	6011      	str	r1, [r2, #0]
 8003638:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800363c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	fa92 f1a2 	rbit	r1, r2
 8003646:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800364a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800364e:	6011      	str	r1, [r2, #0]
  return result;
 8003650:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003654:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	fab2 f282 	clz	r2, r2
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	f042 0220 	orr.w	r2, r2, #32
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f002 021f 	and.w	r2, r2, #31
 800366a:	2101      	movs	r1, #1
 800366c:	fa01 f202 	lsl.w	r2, r1, r2
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d182      	bne.n	800357c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	430b      	orrs	r3, r1
 8003698:	497f      	ldr	r1, [pc, #508]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f2a3 	rbit	r2, r3
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80036c2:	601a      	str	r2, [r3, #0]
  return result;
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80036cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	461a      	mov	r2, r3
 80036e0:	2301      	movs	r3, #1
 80036e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe f8f4 	bl	80018d0 <HAL_GetTick>
 80036e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	e009      	b.n	8003702 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe f8ef 	bl	80018d0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e144      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800370a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003726:	601a      	str	r2, [r3, #0]
  return result;
 8003728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003730:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d102      	bne.n	800374c <HAL_RCC_OscConfig+0xe2c>
 8003746:	4b54      	ldr	r3, [pc, #336]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	e027      	b.n	800379c <HAL_RCC_OscConfig+0xe7c>
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800377a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	fa93 f2a3 	rbit	r2, r3
 800378e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003792:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	fa92 f1a2 	rbit	r1, r2
 80037b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80037c0:	6011      	str	r1, [r2, #0]
  return result;
 80037c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f042 0220 	orr.w	r2, r2, #32
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f002 021f 	and.w	r2, r2, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d082      	beq.n	80036ee <HAL_RCC_OscConfig+0xdce>
 80037e8:	e0cf      	b.n	800398a <HAL_RCC_OscConfig+0x106a>
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80037f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800380e:	601a      	str	r2, [r3, #0]
  return result;
 8003810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003814:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003818:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003824:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	461a      	mov	r2, r3
 800382c:	2300      	movs	r3, #0
 800382e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe f84e 	bl	80018d0 <HAL_GetTick>
 8003834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003838:	e009      	b.n	800384e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe f849 	bl	80018d0 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e09e      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800385a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003860:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	fa93 f2a3 	rbit	r2, r3
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003872:	601a      	str	r2, [r3, #0]
  return result;
 8003874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003878:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800387c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d104      	bne.n	800389c <HAL_RCC_OscConfig+0xf7c>
 8003892:	4b01      	ldr	r3, [pc, #4]	; (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e029      	b.n	80038ec <HAL_RCC_OscConfig+0xfcc>
 8003898:	40021000 	.word	0x40021000
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <HAL_RCC_OscConfig+0x1078>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80038f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038f8:	6011      	str	r1, [r2, #0]
 80038fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	fa92 f1a2 	rbit	r1, r2
 8003908:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800390c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003910:	6011      	str	r1, [r2, #0]
  return result;
 8003912:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003916:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	fab2 f282 	clz	r2, r2
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f002 021f 	and.w	r2, r2, #31
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d180      	bne.n	800383a <HAL_RCC_OscConfig+0xf1a>
 8003938:	e027      	b.n	800398a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e01e      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_RCC_OscConfig+0x1078>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003956:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800395a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	429a      	cmp	r2, r3
 800396c:	d10b      	bne.n	8003986 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800396e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000

0800399c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b09e      	sub	sp, #120	; 0x78
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e162      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b90      	ldr	r3, [pc, #576]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d910      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 0207 	bic.w	r2, r3, #7
 80039ca:	498b      	ldr	r1, [pc, #556]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e14a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b82      	ldr	r3, [pc, #520]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	497f      	ldr	r1, [pc, #508]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80dc 	beq.w	8003bc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d13c      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xf6>
 8003a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xa6>
 8003a3c:	4b6f      	ldr	r3, [pc, #444]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	e00f      	b.n	8003a62 <HAL_RCC_ClockConfig+0xc6>
 8003a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a54:	663b      	str	r3, [r7, #96]	; 0x60
 8003a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5e:	4b67      	ldr	r3, [pc, #412]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a66:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a6a:	fa92 f2a2 	rbit	r2, r2
 8003a6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a72:	fab2 f282 	clz	r2, r2
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	f042 0220 	orr.w	r2, r2, #32
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	f002 021f 	and.w	r2, r2, #31
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d17b      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0f3      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d13c      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x178>
 8003a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x128>
 8003abe:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	e00f      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
 8003ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae0:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ae8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aec:	fa92 f2a2 	rbit	r2, r2
 8003af0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af4:	fab2 f282 	clz	r2, r2
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	f002 021f 	and.w	r2, r2, #31
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d13a      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0b2      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
 8003b14:	2302      	movs	r3, #2
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
 8003b36:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	e00d      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1bc>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	2302      	movs	r3, #2
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2202      	movs	r2, #2
 8003b5a:	61ba      	str	r2, [r7, #24]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	fa92 f2a2 	rbit	r2, r2
 8003b62:	617a      	str	r2, [r7, #20]
  return result;
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	fab2 f282 	clz	r2, r2
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f042 0220 	orr.w	r2, r2, #32
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	f002 021f 	and.w	r2, r2, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e079      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	491a      	ldr	r1, [pc, #104]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b98:	f7fd fe9a 	bl	80018d0 <HAL_GetTick>
 8003b9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fd fe96 	bl	80018d0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e061      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d214      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	4906      	ldr	r1, [pc, #24]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e040      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
 8003bf8:	40022000 	.word	0x40022000
 8003bfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	491a      	ldr	r1, [pc, #104]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2a:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4912      	ldr	r1, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c3e:	f000 f829 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c42:	4601      	mov	r1, r0
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c4c:	22f0      	movs	r2, #240	; 0xf0
 8003c4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	60fa      	str	r2, [r7, #12]
  return result;
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	40d3      	lsrs	r3, r2
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x2ec>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
 8003c66:	fa21 f303 	lsr.w	r3, r1, r3
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <HAL_RCC_ClockConfig+0x2f0>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_RCC_ClockConfig+0x2f4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd fde8 	bl	8001848 <HAL_InitTick>
  
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3778      	adds	r7, #120	; 0x78
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08006220 	.word	0x08006220
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	20000004 	.word	0x20000004

08003c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b08b      	sub	sp, #44	; 0x2c
 8003c98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cae:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x36>
 8003cc2:	e03c      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cc6:	623b      	str	r3, [r7, #32]
      break;
 8003cc8:	e03c      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003cd0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003cd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	fa92 f2a2 	rbit	r2, r2
 8003cdc:	607a      	str	r2, [r7, #4]
  return result;
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	fab2 f282 	clz	r2, r2
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	40d3      	lsrs	r3, r2
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	fa92 f2a2 	rbit	r2, r2
 8003d00:	60fa      	str	r2, [r7, #12]
  return result;
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	fab2 f282 	clz	r2, r2
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	40d3      	lsrs	r3, r2
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d1c:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fb02 f303 	mul.w	r3, r2, r3
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2c:	e004      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	623b      	str	r3, [r7, #32]
      break;
 8003d3c:	e002      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d40:	623b      	str	r3, [r7, #32]
      break;
 8003d42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d44:	6a3b      	ldr	r3, [r7, #32]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	372c      	adds	r7, #44	; 0x2c
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	007a1200 	.word	0x007a1200
 8003d5c:	08006230 	.word	0x08006230
 8003d60:	08006240 	.word	0x08006240
 8003d64:	003d0900 	.word	0x003d0900

08003d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b092      	sub	sp, #72	; 0x48
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80cd 	beq.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8c:	4b86      	ldr	r3, [pc, #536]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10e      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b83      	ldr	r3, [pc, #524]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	4a82      	ldr	r2, [pc, #520]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	61d3      	str	r3, [r2, #28]
 8003da4:	4b80      	ldr	r3, [pc, #512]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b7d      	ldr	r3, [pc, #500]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b7a      	ldr	r3, [pc, #488]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a79      	ldr	r2, [pc, #484]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fd fd7f 	bl	80018d0 <HAL_GetTick>
 8003dd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fd fd7b 	bl	80018d0 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0db      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b70      	ldr	r3, [pc, #448]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df4:	4b6c      	ldr	r3, [pc, #432]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d07d      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d076      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e12:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b5e      	ldr	r3, [pc, #376]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2300      	movs	r3, #0
 8003e62:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e64:	4a50      	ldr	r2, [pc, #320]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d045      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fd fd2c 	bl	80018d0 <HAL_GetTick>
 8003e78:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fd28 	bl	80018d0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e086      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003e92:	2302      	movs	r3, #2
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	623b      	str	r3, [r7, #32]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	61fb      	str	r3, [r7, #28]
  return result;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d102      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	e007      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	613a      	str	r2, [r7, #16]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	fa92 f2a2 	rbit	r2, r2
 8003ee0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	fab2 f282 	clz	r2, r2
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	f002 021f 	and.w	r2, r2, #31
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0bd      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f00:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4926      	ldr	r1, [pc, #152]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1a:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f24:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	491a      	ldr	r1, [pc, #104]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f023 0210 	bic.w	r2, r3, #16
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4912      	ldr	r1, [pc, #72]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	490b      	ldr	r1, [pc, #44]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3748      	adds	r7, #72	; 0x48
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	10908100 	.word	0x10908100

08003fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e049      	b.n	800405a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd fafe 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f000 fa74 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e049      	b.n	8004108 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f841 	bl	8004110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 fa1d 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800413e:	2302      	movs	r3, #2
 8004140:	e0ff      	b.n	8004342 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b14      	cmp	r3, #20
 800414e:	f200 80f0 	bhi.w	8004332 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	080041ad 	.word	0x080041ad
 800415c:	08004333 	.word	0x08004333
 8004160:	08004333 	.word	0x08004333
 8004164:	08004333 	.word	0x08004333
 8004168:	080041ed 	.word	0x080041ed
 800416c:	08004333 	.word	0x08004333
 8004170:	08004333 	.word	0x08004333
 8004174:	08004333 	.word	0x08004333
 8004178:	0800422f 	.word	0x0800422f
 800417c:	08004333 	.word	0x08004333
 8004180:	08004333 	.word	0x08004333
 8004184:	08004333 	.word	0x08004333
 8004188:	0800426f 	.word	0x0800426f
 800418c:	08004333 	.word	0x08004333
 8004190:	08004333 	.word	0x08004333
 8004194:	08004333 	.word	0x08004333
 8004198:	080042b1 	.word	0x080042b1
 800419c:	08004333 	.word	0x08004333
 80041a0:	08004333 	.word	0x08004333
 80041a4:	08004333 	.word	0x08004333
 80041a8:	080042f1 	.word	0x080042f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fa0c 	bl	80045d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0208 	orr.w	r2, r2, #8
 80041c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0204 	bic.w	r2, r2, #4
 80041d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6999      	ldr	r1, [r3, #24]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	619a      	str	r2, [r3, #24]
      break;
 80041ea:	e0a5      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fa72 	bl	80046dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	619a      	str	r2, [r3, #24]
      break;
 800422c:	e084      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fad1 	bl	80047dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0208 	orr.w	r2, r2, #8
 8004248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0204 	bic.w	r2, r2, #4
 8004258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69d9      	ldr	r1, [r3, #28]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	61da      	str	r2, [r3, #28]
      break;
 800426c:	e064      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fb2f 	bl	80048d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69d9      	ldr	r1, [r3, #28]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	021a      	lsls	r2, r3, #8
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	61da      	str	r2, [r3, #28]
      break;
 80042ae:	e043      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fb72 	bl	80049a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0204 	bic.w	r2, r2, #4
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042ee:	e023      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fbb0 	bl	8004a5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004330:	e002      	b.n	8004338 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
      break;
 8004336:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop

0800434c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_TIM_ConfigClockSource+0x1c>
 8004364:	2302      	movs	r3, #2
 8004366:	e0b6      	b.n	80044d6 <HAL_TIM_ConfigClockSource+0x18a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800438a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a4:	d03e      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0xd8>
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043aa:	f200 8087 	bhi.w	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	f000 8086 	beq.w	80044c2 <HAL_TIM_ConfigClockSource+0x176>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	d87f      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043bc:	2b70      	cmp	r3, #112	; 0x70
 80043be:	d01a      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0xaa>
 80043c0:	2b70      	cmp	r3, #112	; 0x70
 80043c2:	d87b      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043c4:	2b60      	cmp	r3, #96	; 0x60
 80043c6:	d050      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x11e>
 80043c8:	2b60      	cmp	r3, #96	; 0x60
 80043ca:	d877      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043cc:	2b50      	cmp	r3, #80	; 0x50
 80043ce:	d03c      	beq.n	800444a <HAL_TIM_ConfigClockSource+0xfe>
 80043d0:	2b50      	cmp	r3, #80	; 0x50
 80043d2:	d873      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d058      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x13e>
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d86f      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043dc:	2b30      	cmp	r3, #48	; 0x30
 80043de:	d064      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15e>
 80043e0:	2b30      	cmp	r3, #48	; 0x30
 80043e2:	d86b      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d060      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15e>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d867      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d05c      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15e>
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d05a      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15e>
 80043f4:	e062      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6899      	ldr	r1, [r3, #8]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f000 fc03 	bl	8004c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	609a      	str	r2, [r3, #8]
      break;
 8004422:	e04f      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6899      	ldr	r1, [r3, #8]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f000 fbec 	bl	8004c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004446:	609a      	str	r2, [r3, #8]
      break;
 8004448:	e03c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	461a      	mov	r2, r3
 8004458:	f000 fb60 	bl	8004b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2150      	movs	r1, #80	; 0x50
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fbb9 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 8004468:	e02c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	461a      	mov	r2, r3
 8004478:	f000 fb7f 	bl	8004b7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2160      	movs	r1, #96	; 0x60
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fba9 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 8004488:	e01c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	461a      	mov	r2, r3
 8004498:	f000 fb40 	bl	8004b1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fb99 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80044a8:	e00c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f000 fb90 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80044ba:	e003      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      break;
 80044c0:	e000      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a32      	ldr	r2, [pc, #200]	; (80045bc <TIM_Base_SetConfig+0xdc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d007      	beq.n	8004508 <TIM_Base_SetConfig+0x28>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d003      	beq.n	8004508 <TIM_Base_SetConfig+0x28>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a2f      	ldr	r2, [pc, #188]	; (80045c0 <TIM_Base_SetConfig+0xe0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d108      	bne.n	800451a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a27      	ldr	r2, [pc, #156]	; (80045bc <TIM_Base_SetConfig+0xdc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <TIM_Base_SetConfig+0x6a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d00f      	beq.n	800454a <TIM_Base_SetConfig+0x6a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a24      	ldr	r2, [pc, #144]	; (80045c0 <TIM_Base_SetConfig+0xe0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00b      	beq.n	800454a <TIM_Base_SetConfig+0x6a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a23      	ldr	r2, [pc, #140]	; (80045c4 <TIM_Base_SetConfig+0xe4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <TIM_Base_SetConfig+0x6a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <TIM_Base_SetConfig+0xe8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_Base_SetConfig+0x6a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a21      	ldr	r2, [pc, #132]	; (80045cc <TIM_Base_SetConfig+0xec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0e      	ldr	r2, [pc, #56]	; (80045bc <TIM_Base_SetConfig+0xdc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00b      	beq.n	80045a0 <TIM_Base_SetConfig+0xc0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <TIM_Base_SetConfig+0xe4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_Base_SetConfig+0xc0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <TIM_Base_SetConfig+0xe8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0xc0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <TIM_Base_SetConfig+0xec>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d103      	bne.n	80045a8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	615a      	str	r2, [r3, #20]
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40014400 	.word	0x40014400
 80045cc:	40014800 	.word	0x40014800

080045d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0201 	bic.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 0302 	bic.w	r3, r3, #2
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a28      	ldr	r2, [pc, #160]	; (80046cc <TIM_OC1_SetConfig+0xfc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00b      	beq.n	8004648 <TIM_OC1_SetConfig+0x78>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a27      	ldr	r2, [pc, #156]	; (80046d0 <TIM_OC1_SetConfig+0x100>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <TIM_OC1_SetConfig+0x78>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a26      	ldr	r2, [pc, #152]	; (80046d4 <TIM_OC1_SetConfig+0x104>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_OC1_SetConfig+0x78>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <TIM_OC1_SetConfig+0x108>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10c      	bne.n	8004662 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0308 	bic.w	r3, r3, #8
 800464e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 0304 	bic.w	r3, r3, #4
 8004660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <TIM_OC1_SetConfig+0xfc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00b      	beq.n	8004682 <TIM_OC1_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a18      	ldr	r2, [pc, #96]	; (80046d0 <TIM_OC1_SetConfig+0x100>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <TIM_OC1_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <TIM_OC1_SetConfig+0x104>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_OC1_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <TIM_OC1_SetConfig+0x108>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d111      	bne.n	80046a6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800

080046dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f023 0210 	bic.w	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f023 0320 	bic.w	r3, r3, #32
 800472a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a24      	ldr	r2, [pc, #144]	; (80047cc <TIM_OC2_SetConfig+0xf0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10d      	bne.n	800475c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <TIM_OC2_SetConfig+0xf0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_OC2_SetConfig+0xa0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <TIM_OC2_SetConfig+0xf4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_OC2_SetConfig+0xa0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <TIM_OC2_SetConfig+0xf8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_OC2_SetConfig+0xa0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <TIM_OC2_SetConfig+0xfc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d113      	bne.n	80047a4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004782:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800478a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40014400 	.word	0x40014400
 80047d8:	40014800 	.word	0x40014800

080047dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a23      	ldr	r2, [pc, #140]	; (80048c8 <TIM_OC3_SetConfig+0xec>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d10d      	bne.n	800485a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004858:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <TIM_OC3_SetConfig+0xec>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00b      	beq.n	800487a <TIM_OC3_SetConfig+0x9e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a19      	ldr	r2, [pc, #100]	; (80048cc <TIM_OC3_SetConfig+0xf0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <TIM_OC3_SetConfig+0x9e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <TIM_OC3_SetConfig+0xf4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d003      	beq.n	800487a <TIM_OC3_SetConfig+0x9e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <TIM_OC3_SetConfig+0xf8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d113      	bne.n	80048a2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800

080048d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	031b      	lsls	r3, r3, #12
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a16      	ldr	r2, [pc, #88]	; (8004990 <TIM_OC4_SetConfig+0xb8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_OC4_SetConfig+0x7c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <TIM_OC4_SetConfig+0xbc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_OC4_SetConfig+0x7c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <TIM_OC4_SetConfig+0xc0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC4_SetConfig+0x7c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <TIM_OC4_SetConfig+0xc4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d109      	bne.n	8004968 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800495a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800

080049a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <TIM_OC5_SetConfig+0xac>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <TIM_OC5_SetConfig+0x72>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <TIM_OC5_SetConfig+0xb0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <TIM_OC5_SetConfig+0x72>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <TIM_OC5_SetConfig+0xb4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_OC5_SetConfig+0x72>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <TIM_OC5_SetConfig+0xb8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d109      	bne.n	8004a26 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	621a      	str	r2, [r3, #32]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800

08004a5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	051b      	lsls	r3, r3, #20
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <TIM_OC6_SetConfig+0xb0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00b      	beq.n	8004ad0 <TIM_OC6_SetConfig+0x74>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <TIM_OC6_SetConfig+0xb4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d007      	beq.n	8004ad0 <TIM_OC6_SetConfig+0x74>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a14      	ldr	r2, [pc, #80]	; (8004b14 <TIM_OC6_SetConfig+0xb8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_OC6_SetConfig+0x74>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <TIM_OC6_SetConfig+0xbc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	029b      	lsls	r3, r3, #10
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800

08004b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 030a 	bic.w	r3, r3, #10
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b087      	sub	sp, #28
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	031b      	lsls	r3, r3, #12
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f043 0307 	orr.w	r3, r3, #7
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	609a      	str	r2, [r3, #8]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <HAL_TIMEx_PWMN_Start+0x24>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e022      	b.n	8004cba <HAL_TIMEx_PWMN_Start+0x6a>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d109      	bne.n	8004c8e <HAL_TIMEx_PWMN_Start+0x3e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	bf14      	ite	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	2300      	moveq	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e015      	b.n	8004cba <HAL_TIMEx_PWMN_Start+0x6a>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d109      	bne.n	8004ca8 <HAL_TIMEx_PWMN_Start+0x58>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e008      	b.n	8004cba <HAL_TIMEx_PWMN_Start+0x6a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e05f      	b.n	8004d82 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIMEx_PWMN_Start+0x82>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd0:	e013      	b.n	8004cfa <HAL_TIMEx_PWMN_Start+0xaa>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIMEx_PWMN_Start+0x92>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce0:	e00b      	b.n	8004cfa <HAL_TIMEx_PWMN_Start+0xaa>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIMEx_PWMN_Start+0xa2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cf0:	e003      	b.n	8004cfa <HAL_TIMEx_PWMN_Start+0xaa>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f98e 	bl	8005024 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_TIMEx_PWMN_Start+0x13c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00e      	beq.n	8004d40 <HAL_TIMEx_PWMN_Start+0xf0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d009      	beq.n	8004d40 <HAL_TIMEx_PWMN_Start+0xf0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <HAL_TIMEx_PWMN_Start+0x140>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIMEx_PWMN_Start+0xf0>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <HAL_TIMEx_PWMN_Start+0x144>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d115      	bne.n	8004d6c <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <HAL_TIMEx_PWMN_Start+0x148>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b06      	cmp	r3, #6
 8004d50:	d015      	beq.n	8004d7e <HAL_TIMEx_PWMN_Start+0x12e>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d011      	beq.n	8004d7e <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6a:	e008      	b.n	8004d7e <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e000      	b.n	8004d80 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40014000 	.word	0x40014000
 8004d98:	00010007 	.word	0x00010007

08004d9c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f938 	bl	8005024 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <HAL_TIMEx_PWMN_Stop+0x48>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6a1a      	ldr	r2, [r3, #32]
 8004dca:	f240 4344 	movw	r3, #1092	; 0x444
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d107      	bne.n	8004de4 <HAL_TIMEx_PWMN_Stop+0x48>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004de2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <HAL_TIMEx_PWMN_Stop+0x78>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	f240 4344 	movw	r3, #1092	; 0x444
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d107      	bne.n	8004e14 <HAL_TIMEx_PWMN_Stop+0x78>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <HAL_TIMEx_PWMN_Stop+0x88>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e22:	e013      	b.n	8004e4c <HAL_TIMEx_PWMN_Stop+0xb0>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d104      	bne.n	8004e34 <HAL_TIMEx_PWMN_Stop+0x98>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e32:	e00b      	b.n	8004e4c <HAL_TIMEx_PWMN_Stop+0xb0>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d104      	bne.n	8004e44 <HAL_TIMEx_PWMN_Stop+0xa8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e42:	e003      	b.n	8004e4c <HAL_TIMEx_PWMN_Stop+0xb0>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e054      	b.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ea0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed8:	d009      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10c      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40014000 	.word	0x40014000

08004f34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e060      	b.n	8005012 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a14      	ldr	r2, [pc, #80]	; (8005020 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d115      	bne.n	8005000 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	051b      	lsls	r3, r3, #20
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00

08005024 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2204      	movs	r2, #4
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <__libc_init_array>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4d0d      	ldr	r5, [pc, #52]	; (80050a8 <__libc_init_array+0x38>)
 8005074:	4c0d      	ldr	r4, [pc, #52]	; (80050ac <__libc_init_array+0x3c>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	2600      	movs	r6, #0
 800507c:	42a6      	cmp	r6, r4
 800507e:	d109      	bne.n	8005094 <__libc_init_array+0x24>
 8005080:	4d0b      	ldr	r5, [pc, #44]	; (80050b0 <__libc_init_array+0x40>)
 8005082:	4c0c      	ldr	r4, [pc, #48]	; (80050b4 <__libc_init_array+0x44>)
 8005084:	f001 f8be 	bl	8006204 <_init>
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	2600      	movs	r6, #0
 800508e:	42a6      	cmp	r6, r4
 8005090:	d105      	bne.n	800509e <__libc_init_array+0x2e>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	f855 3b04 	ldr.w	r3, [r5], #4
 8005098:	4798      	blx	r3
 800509a:	3601      	adds	r6, #1
 800509c:	e7ee      	b.n	800507c <__libc_init_array+0xc>
 800509e:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a2:	4798      	blx	r3
 80050a4:	3601      	adds	r6, #1
 80050a6:	e7f2      	b.n	800508e <__libc_init_array+0x1e>
 80050a8:	08006428 	.word	0x08006428
 80050ac:	08006428 	.word	0x08006428
 80050b0:	08006428 	.word	0x08006428
 80050b4:	0800642c 	.word	0x0800642c

080050b8 <memset>:
 80050b8:	4402      	add	r2, r0
 80050ba:	4603      	mov	r3, r0
 80050bc:	4293      	cmp	r3, r2
 80050be:	d100      	bne.n	80050c2 <memset+0xa>
 80050c0:	4770      	bx	lr
 80050c2:	f803 1b01 	strb.w	r1, [r3], #1
 80050c6:	e7f9      	b.n	80050bc <memset+0x4>

080050c8 <cos>:
 80050c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050ca:	ec53 2b10 	vmov	r2, r3, d0
 80050ce:	4826      	ldr	r0, [pc, #152]	; (8005168 <cos+0xa0>)
 80050d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80050d4:	4281      	cmp	r1, r0
 80050d6:	dc06      	bgt.n	80050e6 <cos+0x1e>
 80050d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005160 <cos+0x98>
 80050dc:	b005      	add	sp, #20
 80050de:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e2:	f000 baa9 	b.w	8005638 <__kernel_cos>
 80050e6:	4821      	ldr	r0, [pc, #132]	; (800516c <cos+0xa4>)
 80050e8:	4281      	cmp	r1, r0
 80050ea:	dd09      	ble.n	8005100 <cos+0x38>
 80050ec:	ee10 0a10 	vmov	r0, s0
 80050f0:	4619      	mov	r1, r3
 80050f2:	f7fb f86d 	bl	80001d0 <__aeabi_dsub>
 80050f6:	ec41 0b10 	vmov	d0, r0, r1
 80050fa:	b005      	add	sp, #20
 80050fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005100:	4668      	mov	r0, sp
 8005102:	f000 f88d 	bl	8005220 <__ieee754_rem_pio2>
 8005106:	f000 0003 	and.w	r0, r0, #3
 800510a:	2801      	cmp	r0, #1
 800510c:	d00b      	beq.n	8005126 <cos+0x5e>
 800510e:	2802      	cmp	r0, #2
 8005110:	d016      	beq.n	8005140 <cos+0x78>
 8005112:	b9e0      	cbnz	r0, 800514e <cos+0x86>
 8005114:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005118:	ed9d 0b00 	vldr	d0, [sp]
 800511c:	f000 fa8c 	bl	8005638 <__kernel_cos>
 8005120:	ec51 0b10 	vmov	r0, r1, d0
 8005124:	e7e7      	b.n	80050f6 <cos+0x2e>
 8005126:	ed9d 1b02 	vldr	d1, [sp, #8]
 800512a:	ed9d 0b00 	vldr	d0, [sp]
 800512e:	f000 fe9b 	bl	8005e68 <__kernel_sin>
 8005132:	ec53 2b10 	vmov	r2, r3, d0
 8005136:	ee10 0a10 	vmov	r0, s0
 800513a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800513e:	e7da      	b.n	80050f6 <cos+0x2e>
 8005140:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005144:	ed9d 0b00 	vldr	d0, [sp]
 8005148:	f000 fa76 	bl	8005638 <__kernel_cos>
 800514c:	e7f1      	b.n	8005132 <cos+0x6a>
 800514e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005152:	ed9d 0b00 	vldr	d0, [sp]
 8005156:	2001      	movs	r0, #1
 8005158:	f000 fe86 	bl	8005e68 <__kernel_sin>
 800515c:	e7e0      	b.n	8005120 <cos+0x58>
 800515e:	bf00      	nop
	...
 8005168:	3fe921fb 	.word	0x3fe921fb
 800516c:	7fefffff 	.word	0x7fefffff

08005170 <sin>:
 8005170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005172:	ec53 2b10 	vmov	r2, r3, d0
 8005176:	4828      	ldr	r0, [pc, #160]	; (8005218 <sin+0xa8>)
 8005178:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800517c:	4281      	cmp	r1, r0
 800517e:	dc07      	bgt.n	8005190 <sin+0x20>
 8005180:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005210 <sin+0xa0>
 8005184:	2000      	movs	r0, #0
 8005186:	b005      	add	sp, #20
 8005188:	f85d eb04 	ldr.w	lr, [sp], #4
 800518c:	f000 be6c 	b.w	8005e68 <__kernel_sin>
 8005190:	4822      	ldr	r0, [pc, #136]	; (800521c <sin+0xac>)
 8005192:	4281      	cmp	r1, r0
 8005194:	dd09      	ble.n	80051aa <sin+0x3a>
 8005196:	ee10 0a10 	vmov	r0, s0
 800519a:	4619      	mov	r1, r3
 800519c:	f7fb f818 	bl	80001d0 <__aeabi_dsub>
 80051a0:	ec41 0b10 	vmov	d0, r0, r1
 80051a4:	b005      	add	sp, #20
 80051a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80051aa:	4668      	mov	r0, sp
 80051ac:	f000 f838 	bl	8005220 <__ieee754_rem_pio2>
 80051b0:	f000 0003 	and.w	r0, r0, #3
 80051b4:	2801      	cmp	r0, #1
 80051b6:	d00c      	beq.n	80051d2 <sin+0x62>
 80051b8:	2802      	cmp	r0, #2
 80051ba:	d011      	beq.n	80051e0 <sin+0x70>
 80051bc:	b9f0      	cbnz	r0, 80051fc <sin+0x8c>
 80051be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051c2:	ed9d 0b00 	vldr	d0, [sp]
 80051c6:	2001      	movs	r0, #1
 80051c8:	f000 fe4e 	bl	8005e68 <__kernel_sin>
 80051cc:	ec51 0b10 	vmov	r0, r1, d0
 80051d0:	e7e6      	b.n	80051a0 <sin+0x30>
 80051d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051d6:	ed9d 0b00 	vldr	d0, [sp]
 80051da:	f000 fa2d 	bl	8005638 <__kernel_cos>
 80051de:	e7f5      	b.n	80051cc <sin+0x5c>
 80051e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051e4:	ed9d 0b00 	vldr	d0, [sp]
 80051e8:	2001      	movs	r0, #1
 80051ea:	f000 fe3d 	bl	8005e68 <__kernel_sin>
 80051ee:	ec53 2b10 	vmov	r2, r3, d0
 80051f2:	ee10 0a10 	vmov	r0, s0
 80051f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80051fa:	e7d1      	b.n	80051a0 <sin+0x30>
 80051fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005200:	ed9d 0b00 	vldr	d0, [sp]
 8005204:	f000 fa18 	bl	8005638 <__kernel_cos>
 8005208:	e7f1      	b.n	80051ee <sin+0x7e>
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w
	...
 8005218:	3fe921fb 	.word	0x3fe921fb
 800521c:	7fefffff 	.word	0x7fefffff

08005220 <__ieee754_rem_pio2>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	ed2d 8b02 	vpush	{d8}
 8005228:	ec55 4b10 	vmov	r4, r5, d0
 800522c:	4bca      	ldr	r3, [pc, #808]	; (8005558 <__ieee754_rem_pio2+0x338>)
 800522e:	b08b      	sub	sp, #44	; 0x2c
 8005230:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005234:	4598      	cmp	r8, r3
 8005236:	4682      	mov	sl, r0
 8005238:	9502      	str	r5, [sp, #8]
 800523a:	dc08      	bgt.n	800524e <__ieee754_rem_pio2+0x2e>
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	ed80 0b00 	vstr	d0, [r0]
 8005244:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005248:	f04f 0b00 	mov.w	fp, #0
 800524c:	e028      	b.n	80052a0 <__ieee754_rem_pio2+0x80>
 800524e:	4bc3      	ldr	r3, [pc, #780]	; (800555c <__ieee754_rem_pio2+0x33c>)
 8005250:	4598      	cmp	r8, r3
 8005252:	dc78      	bgt.n	8005346 <__ieee754_rem_pio2+0x126>
 8005254:	9b02      	ldr	r3, [sp, #8]
 8005256:	4ec2      	ldr	r6, [pc, #776]	; (8005560 <__ieee754_rem_pio2+0x340>)
 8005258:	2b00      	cmp	r3, #0
 800525a:	ee10 0a10 	vmov	r0, s0
 800525e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005520 <__ieee754_rem_pio2+0x300>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	4629      	mov	r1, r5
 8005266:	dd39      	ble.n	80052dc <__ieee754_rem_pio2+0xbc>
 8005268:	f7fa ffb2 	bl	80001d0 <__aeabi_dsub>
 800526c:	45b0      	cmp	r8, r6
 800526e:	4604      	mov	r4, r0
 8005270:	460d      	mov	r5, r1
 8005272:	d01b      	beq.n	80052ac <__ieee754_rem_pio2+0x8c>
 8005274:	a3ac      	add	r3, pc, #688	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fa ffa9 	bl	80001d0 <__aeabi_dsub>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	e9ca 2300 	strd	r2, r3, [sl]
 8005286:	4620      	mov	r0, r4
 8005288:	4629      	mov	r1, r5
 800528a:	f7fa ffa1 	bl	80001d0 <__aeabi_dsub>
 800528e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f7fa ff9c 	bl	80001d0 <__aeabi_dsub>
 8005298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800529c:	f04f 0b01 	mov.w	fp, #1
 80052a0:	4658      	mov	r0, fp
 80052a2:	b00b      	add	sp, #44	; 0x2c
 80052a4:	ecbd 8b02 	vpop	{d8}
 80052a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8005530 <__ieee754_rem_pio2+0x310>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f7fa ff8d 	bl	80001d0 <__aeabi_dsub>
 80052b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	4604      	mov	r4, r0
 80052be:	460d      	mov	r5, r1
 80052c0:	f7fa ff86 	bl	80001d0 <__aeabi_dsub>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	e9ca 2300 	strd	r2, r3, [sl]
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fa ff7e 	bl	80001d0 <__aeabi_dsub>
 80052d4:	a398      	add	r3, pc, #608	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	e7db      	b.n	8005294 <__ieee754_rem_pio2+0x74>
 80052dc:	f7fa ff7a 	bl	80001d4 <__adddf3>
 80052e0:	45b0      	cmp	r8, r6
 80052e2:	4604      	mov	r4, r0
 80052e4:	460d      	mov	r5, r1
 80052e6:	d016      	beq.n	8005316 <__ieee754_rem_pio2+0xf6>
 80052e8:	a38f      	add	r3, pc, #572	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fa ff71 	bl	80001d4 <__adddf3>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	e9ca 2300 	strd	r2, r3, [sl]
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	f7fa ff67 	bl	80001d0 <__aeabi_dsub>
 8005302:	a389      	add	r3, pc, #548	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fa ff64 	bl	80001d4 <__adddf3>
 800530c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005310:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005314:	e7c4      	b.n	80052a0 <__ieee754_rem_pio2+0x80>
 8005316:	a386      	add	r3, pc, #536	; (adr r3, 8005530 <__ieee754_rem_pio2+0x310>)
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f7fa ff5a 	bl	80001d4 <__adddf3>
 8005320:	a385      	add	r3, pc, #532	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	4604      	mov	r4, r0
 8005328:	460d      	mov	r5, r1
 800532a:	f7fa ff53 	bl	80001d4 <__adddf3>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	e9ca 2300 	strd	r2, r3, [sl]
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fa ff49 	bl	80001d0 <__aeabi_dsub>
 800533e:	a37e      	add	r3, pc, #504	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	e7e0      	b.n	8005308 <__ieee754_rem_pio2+0xe8>
 8005346:	4b87      	ldr	r3, [pc, #540]	; (8005564 <__ieee754_rem_pio2+0x344>)
 8005348:	4598      	cmp	r8, r3
 800534a:	f300 80d9 	bgt.w	8005500 <__ieee754_rem_pio2+0x2e0>
 800534e:	f000 fe49 	bl	8005fe4 <fabs>
 8005352:	ec55 4b10 	vmov	r4, r5, d0
 8005356:	ee10 0a10 	vmov	r0, s0
 800535a:	a379      	add	r3, pc, #484	; (adr r3, 8005540 <__ieee754_rem_pio2+0x320>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	4629      	mov	r1, r5
 8005362:	f7fb f8ed 	bl	8000540 <__aeabi_dmul>
 8005366:	4b80      	ldr	r3, [pc, #512]	; (8005568 <__ieee754_rem_pio2+0x348>)
 8005368:	2200      	movs	r2, #0
 800536a:	f7fa ff33 	bl	80001d4 <__adddf3>
 800536e:	f7fb fb81 	bl	8000a74 <__aeabi_d2iz>
 8005372:	4683      	mov	fp, r0
 8005374:	f7fb f87a 	bl	800046c <__aeabi_i2d>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	ec43 2b18 	vmov	d8, r2, r3
 8005380:	a367      	add	r3, pc, #412	; (adr r3, 8005520 <__ieee754_rem_pio2+0x300>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fb f8db 	bl	8000540 <__aeabi_dmul>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fa ff1d 	bl	80001d0 <__aeabi_dsub>
 8005396:	a364      	add	r3, pc, #400	; (adr r3, 8005528 <__ieee754_rem_pio2+0x308>)
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	4606      	mov	r6, r0
 800539e:	460f      	mov	r7, r1
 80053a0:	ec51 0b18 	vmov	r0, r1, d8
 80053a4:	f7fb f8cc 	bl	8000540 <__aeabi_dmul>
 80053a8:	f1bb 0f1f 	cmp.w	fp, #31
 80053ac:	4604      	mov	r4, r0
 80053ae:	460d      	mov	r5, r1
 80053b0:	dc0d      	bgt.n	80053ce <__ieee754_rem_pio2+0x1ae>
 80053b2:	4b6e      	ldr	r3, [pc, #440]	; (800556c <__ieee754_rem_pio2+0x34c>)
 80053b4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80053b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053bc:	4543      	cmp	r3, r8
 80053be:	d006      	beq.n	80053ce <__ieee754_rem_pio2+0x1ae>
 80053c0:	4622      	mov	r2, r4
 80053c2:	462b      	mov	r3, r5
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fa ff02 	bl	80001d0 <__aeabi_dsub>
 80053cc:	e00f      	b.n	80053ee <__ieee754_rem_pio2+0x1ce>
 80053ce:	462b      	mov	r3, r5
 80053d0:	4622      	mov	r2, r4
 80053d2:	4630      	mov	r0, r6
 80053d4:	4639      	mov	r1, r7
 80053d6:	f7fa fefb 	bl	80001d0 <__aeabi_dsub>
 80053da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80053de:	9303      	str	r3, [sp, #12]
 80053e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80053e8:	f1b8 0f10 	cmp.w	r8, #16
 80053ec:	dc02      	bgt.n	80053f4 <__ieee754_rem_pio2+0x1d4>
 80053ee:	e9ca 0100 	strd	r0, r1, [sl]
 80053f2:	e039      	b.n	8005468 <__ieee754_rem_pio2+0x248>
 80053f4:	a34e      	add	r3, pc, #312	; (adr r3, 8005530 <__ieee754_rem_pio2+0x310>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	ec51 0b18 	vmov	r0, r1, d8
 80053fe:	f7fb f89f 	bl	8000540 <__aeabi_dmul>
 8005402:	4604      	mov	r4, r0
 8005404:	460d      	mov	r5, r1
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4630      	mov	r0, r6
 800540c:	4639      	mov	r1, r7
 800540e:	f7fa fedf 	bl	80001d0 <__aeabi_dsub>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4680      	mov	r8, r0
 8005418:	4689      	mov	r9, r1
 800541a:	4630      	mov	r0, r6
 800541c:	4639      	mov	r1, r7
 800541e:	f7fa fed7 	bl	80001d0 <__aeabi_dsub>
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	f7fa fed3 	bl	80001d0 <__aeabi_dsub>
 800542a:	a343      	add	r3, pc, #268	; (adr r3, 8005538 <__ieee754_rem_pio2+0x318>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	4604      	mov	r4, r0
 8005432:	460d      	mov	r5, r1
 8005434:	ec51 0b18 	vmov	r0, r1, d8
 8005438:	f7fb f882 	bl	8000540 <__aeabi_dmul>
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	f7fa fec6 	bl	80001d0 <__aeabi_dsub>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4604      	mov	r4, r0
 800544a:	460d      	mov	r5, r1
 800544c:	4640      	mov	r0, r8
 800544e:	4649      	mov	r1, r9
 8005450:	f7fa febe 	bl	80001d0 <__aeabi_dsub>
 8005454:	9a03      	ldr	r2, [sp, #12]
 8005456:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b31      	cmp	r3, #49	; 0x31
 800545e:	dc24      	bgt.n	80054aa <__ieee754_rem_pio2+0x28a>
 8005460:	e9ca 0100 	strd	r0, r1, [sl]
 8005464:	4646      	mov	r6, r8
 8005466:	464f      	mov	r7, r9
 8005468:	e9da 8900 	ldrd	r8, r9, [sl]
 800546c:	4630      	mov	r0, r6
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	4639      	mov	r1, r7
 8005474:	f7fa feac 	bl	80001d0 <__aeabi_dsub>
 8005478:	462b      	mov	r3, r5
 800547a:	4622      	mov	r2, r4
 800547c:	f7fa fea8 	bl	80001d0 <__aeabi_dsub>
 8005480:	9b02      	ldr	r3, [sp, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005488:	f6bf af0a 	bge.w	80052a0 <__ieee754_rem_pio2+0x80>
 800548c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005490:	f8ca 3004 	str.w	r3, [sl, #4]
 8005494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005498:	f8ca 8000 	str.w	r8, [sl]
 800549c:	f8ca 0008 	str.w	r0, [sl, #8]
 80054a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80054a4:	f1cb 0b00 	rsb	fp, fp, #0
 80054a8:	e6fa      	b.n	80052a0 <__ieee754_rem_pio2+0x80>
 80054aa:	a327      	add	r3, pc, #156	; (adr r3, 8005548 <__ieee754_rem_pio2+0x328>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	ec51 0b18 	vmov	r0, r1, d8
 80054b4:	f7fb f844 	bl	8000540 <__aeabi_dmul>
 80054b8:	4604      	mov	r4, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4640      	mov	r0, r8
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fa fe84 	bl	80001d0 <__aeabi_dsub>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4606      	mov	r6, r0
 80054ce:	460f      	mov	r7, r1
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	f7fa fe7c 	bl	80001d0 <__aeabi_dsub>
 80054d8:	4622      	mov	r2, r4
 80054da:	462b      	mov	r3, r5
 80054dc:	f7fa fe78 	bl	80001d0 <__aeabi_dsub>
 80054e0:	a31b      	add	r3, pc, #108	; (adr r3, 8005550 <__ieee754_rem_pio2+0x330>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	4604      	mov	r4, r0
 80054e8:	460d      	mov	r5, r1
 80054ea:	ec51 0b18 	vmov	r0, r1, d8
 80054ee:	f7fb f827 	bl	8000540 <__aeabi_dmul>
 80054f2:	4622      	mov	r2, r4
 80054f4:	462b      	mov	r3, r5
 80054f6:	f7fa fe6b 	bl	80001d0 <__aeabi_dsub>
 80054fa:	4604      	mov	r4, r0
 80054fc:	460d      	mov	r5, r1
 80054fe:	e75f      	b.n	80053c0 <__ieee754_rem_pio2+0x1a0>
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <__ieee754_rem_pio2+0x350>)
 8005502:	4598      	cmp	r8, r3
 8005504:	dd36      	ble.n	8005574 <__ieee754_rem_pio2+0x354>
 8005506:	ee10 2a10 	vmov	r2, s0
 800550a:	462b      	mov	r3, r5
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fa fe5e 	bl	80001d0 <__aeabi_dsub>
 8005514:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005518:	e9ca 0100 	strd	r0, r1, [sl]
 800551c:	e694      	b.n	8005248 <__ieee754_rem_pio2+0x28>
 800551e:	bf00      	nop
 8005520:	54400000 	.word	0x54400000
 8005524:	3ff921fb 	.word	0x3ff921fb
 8005528:	1a626331 	.word	0x1a626331
 800552c:	3dd0b461 	.word	0x3dd0b461
 8005530:	1a600000 	.word	0x1a600000
 8005534:	3dd0b461 	.word	0x3dd0b461
 8005538:	2e037073 	.word	0x2e037073
 800553c:	3ba3198a 	.word	0x3ba3198a
 8005540:	6dc9c883 	.word	0x6dc9c883
 8005544:	3fe45f30 	.word	0x3fe45f30
 8005548:	2e000000 	.word	0x2e000000
 800554c:	3ba3198a 	.word	0x3ba3198a
 8005550:	252049c1 	.word	0x252049c1
 8005554:	397b839a 	.word	0x397b839a
 8005558:	3fe921fb 	.word	0x3fe921fb
 800555c:	4002d97b 	.word	0x4002d97b
 8005560:	3ff921fb 	.word	0x3ff921fb
 8005564:	413921fb 	.word	0x413921fb
 8005568:	3fe00000 	.word	0x3fe00000
 800556c:	08006250 	.word	0x08006250
 8005570:	7fefffff 	.word	0x7fefffff
 8005574:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005578:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800557c:	ee10 0a10 	vmov	r0, s0
 8005580:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005584:	ee10 6a10 	vmov	r6, s0
 8005588:	460f      	mov	r7, r1
 800558a:	f7fb fa73 	bl	8000a74 <__aeabi_d2iz>
 800558e:	f7fa ff6d 	bl	800046c <__aeabi_i2d>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4630      	mov	r0, r6
 8005598:	4639      	mov	r1, r7
 800559a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800559e:	f7fa fe17 	bl	80001d0 <__aeabi_dsub>
 80055a2:	4b23      	ldr	r3, [pc, #140]	; (8005630 <__ieee754_rem_pio2+0x410>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	f7fa ffcb 	bl	8000540 <__aeabi_dmul>
 80055aa:	460f      	mov	r7, r1
 80055ac:	4606      	mov	r6, r0
 80055ae:	f7fb fa61 	bl	8000a74 <__aeabi_d2iz>
 80055b2:	f7fa ff5b 	bl	800046c <__aeabi_i2d>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4630      	mov	r0, r6
 80055bc:	4639      	mov	r1, r7
 80055be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055c2:	f7fa fe05 	bl	80001d0 <__aeabi_dsub>
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <__ieee754_rem_pio2+0x410>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	f7fa ffb9 	bl	8000540 <__aeabi_dmul>
 80055ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055d2:	ad04      	add	r5, sp, #16
 80055d4:	f04f 0803 	mov.w	r8, #3
 80055d8:	46a9      	mov	r9, r5
 80055da:	2600      	movs	r6, #0
 80055dc:	2700      	movs	r7, #0
 80055de:	4632      	mov	r2, r6
 80055e0:	463b      	mov	r3, r7
 80055e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80055e6:	46c3      	mov	fp, r8
 80055e8:	3d08      	subs	r5, #8
 80055ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80055ee:	f7fb fa0f 	bl	8000a10 <__aeabi_dcmpeq>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d1f3      	bne.n	80055de <__ieee754_rem_pio2+0x3be>
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <__ieee754_rem_pio2+0x414>)
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	2302      	movs	r3, #2
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	4622      	mov	r2, r4
 8005600:	465b      	mov	r3, fp
 8005602:	4651      	mov	r1, sl
 8005604:	4648      	mov	r0, r9
 8005606:	f000 f8df 	bl	80057c8 <__kernel_rem_pio2>
 800560a:	9b02      	ldr	r3, [sp, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	4683      	mov	fp, r0
 8005610:	f6bf ae46 	bge.w	80052a0 <__ieee754_rem_pio2+0x80>
 8005614:	e9da 2100 	ldrd	r2, r1, [sl]
 8005618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800561c:	e9ca 2300 	strd	r2, r3, [sl]
 8005620:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005628:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800562c:	e73a      	b.n	80054a4 <__ieee754_rem_pio2+0x284>
 800562e:	bf00      	nop
 8005630:	41700000 	.word	0x41700000
 8005634:	080062d0 	.word	0x080062d0

08005638 <__kernel_cos>:
 8005638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	ec57 6b10 	vmov	r6, r7, d0
 8005640:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005644:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005648:	ed8d 1b00 	vstr	d1, [sp]
 800564c:	da07      	bge.n	800565e <__kernel_cos+0x26>
 800564e:	ee10 0a10 	vmov	r0, s0
 8005652:	4639      	mov	r1, r7
 8005654:	f7fb fa0e 	bl	8000a74 <__aeabi_d2iz>
 8005658:	2800      	cmp	r0, #0
 800565a:	f000 8088 	beq.w	800576e <__kernel_cos+0x136>
 800565e:	4632      	mov	r2, r6
 8005660:	463b      	mov	r3, r7
 8005662:	4630      	mov	r0, r6
 8005664:	4639      	mov	r1, r7
 8005666:	f7fa ff6b 	bl	8000540 <__aeabi_dmul>
 800566a:	4b51      	ldr	r3, [pc, #324]	; (80057b0 <__kernel_cos+0x178>)
 800566c:	2200      	movs	r2, #0
 800566e:	4604      	mov	r4, r0
 8005670:	460d      	mov	r5, r1
 8005672:	f7fa ff65 	bl	8000540 <__aeabi_dmul>
 8005676:	a340      	add	r3, pc, #256	; (adr r3, 8005778 <__kernel_cos+0x140>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	4682      	mov	sl, r0
 800567e:	468b      	mov	fp, r1
 8005680:	4620      	mov	r0, r4
 8005682:	4629      	mov	r1, r5
 8005684:	f7fa ff5c 	bl	8000540 <__aeabi_dmul>
 8005688:	a33d      	add	r3, pc, #244	; (adr r3, 8005780 <__kernel_cos+0x148>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fa fda1 	bl	80001d4 <__adddf3>
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	f7fa ff53 	bl	8000540 <__aeabi_dmul>
 800569a:	a33b      	add	r3, pc, #236	; (adr r3, 8005788 <__kernel_cos+0x150>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa fd96 	bl	80001d0 <__aeabi_dsub>
 80056a4:	4622      	mov	r2, r4
 80056a6:	462b      	mov	r3, r5
 80056a8:	f7fa ff4a 	bl	8000540 <__aeabi_dmul>
 80056ac:	a338      	add	r3, pc, #224	; (adr r3, 8005790 <__kernel_cos+0x158>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fa fd8f 	bl	80001d4 <__adddf3>
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	f7fa ff41 	bl	8000540 <__aeabi_dmul>
 80056be:	a336      	add	r3, pc, #216	; (adr r3, 8005798 <__kernel_cos+0x160>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f7fa fd84 	bl	80001d0 <__aeabi_dsub>
 80056c8:	4622      	mov	r2, r4
 80056ca:	462b      	mov	r3, r5
 80056cc:	f7fa ff38 	bl	8000540 <__aeabi_dmul>
 80056d0:	a333      	add	r3, pc, #204	; (adr r3, 80057a0 <__kernel_cos+0x168>)
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f7fa fd7d 	bl	80001d4 <__adddf3>
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f7fa ff2f 	bl	8000540 <__aeabi_dmul>
 80056e2:	4622      	mov	r2, r4
 80056e4:	462b      	mov	r3, r5
 80056e6:	f7fa ff2b 	bl	8000540 <__aeabi_dmul>
 80056ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ee:	4604      	mov	r4, r0
 80056f0:	460d      	mov	r5, r1
 80056f2:	4630      	mov	r0, r6
 80056f4:	4639      	mov	r1, r7
 80056f6:	f7fa ff23 	bl	8000540 <__aeabi_dmul>
 80056fa:	460b      	mov	r3, r1
 80056fc:	4602      	mov	r2, r0
 80056fe:	4629      	mov	r1, r5
 8005700:	4620      	mov	r0, r4
 8005702:	f7fa fd65 	bl	80001d0 <__aeabi_dsub>
 8005706:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <__kernel_cos+0x17c>)
 8005708:	4598      	cmp	r8, r3
 800570a:	4606      	mov	r6, r0
 800570c:	460f      	mov	r7, r1
 800570e:	dc10      	bgt.n	8005732 <__kernel_cos+0xfa>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4650      	mov	r0, sl
 8005716:	4659      	mov	r1, fp
 8005718:	f7fa fd5a 	bl	80001d0 <__aeabi_dsub>
 800571c:	460b      	mov	r3, r1
 800571e:	4926      	ldr	r1, [pc, #152]	; (80057b8 <__kernel_cos+0x180>)
 8005720:	4602      	mov	r2, r0
 8005722:	2000      	movs	r0, #0
 8005724:	f7fa fd54 	bl	80001d0 <__aeabi_dsub>
 8005728:	ec41 0b10 	vmov	d0, r0, r1
 800572c:	b003      	add	sp, #12
 800572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005732:	4b22      	ldr	r3, [pc, #136]	; (80057bc <__kernel_cos+0x184>)
 8005734:	4920      	ldr	r1, [pc, #128]	; (80057b8 <__kernel_cos+0x180>)
 8005736:	4598      	cmp	r8, r3
 8005738:	bfcc      	ite	gt
 800573a:	4d21      	ldrgt	r5, [pc, #132]	; (80057c0 <__kernel_cos+0x188>)
 800573c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005740:	2400      	movs	r4, #0
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	2000      	movs	r0, #0
 8005748:	f7fa fd42 	bl	80001d0 <__aeabi_dsub>
 800574c:	4622      	mov	r2, r4
 800574e:	4680      	mov	r8, r0
 8005750:	4689      	mov	r9, r1
 8005752:	462b      	mov	r3, r5
 8005754:	4650      	mov	r0, sl
 8005756:	4659      	mov	r1, fp
 8005758:	f7fa fd3a 	bl	80001d0 <__aeabi_dsub>
 800575c:	4632      	mov	r2, r6
 800575e:	463b      	mov	r3, r7
 8005760:	f7fa fd36 	bl	80001d0 <__aeabi_dsub>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	e7da      	b.n	8005724 <__kernel_cos+0xec>
 800576e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80057a8 <__kernel_cos+0x170>
 8005772:	e7db      	b.n	800572c <__kernel_cos+0xf4>
 8005774:	f3af 8000 	nop.w
 8005778:	be8838d4 	.word	0xbe8838d4
 800577c:	bda8fae9 	.word	0xbda8fae9
 8005780:	bdb4b1c4 	.word	0xbdb4b1c4
 8005784:	3e21ee9e 	.word	0x3e21ee9e
 8005788:	809c52ad 	.word	0x809c52ad
 800578c:	3e927e4f 	.word	0x3e927e4f
 8005790:	19cb1590 	.word	0x19cb1590
 8005794:	3efa01a0 	.word	0x3efa01a0
 8005798:	16c15177 	.word	0x16c15177
 800579c:	3f56c16c 	.word	0x3f56c16c
 80057a0:	5555554c 	.word	0x5555554c
 80057a4:	3fa55555 	.word	0x3fa55555
 80057a8:	00000000 	.word	0x00000000
 80057ac:	3ff00000 	.word	0x3ff00000
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	3fd33332 	.word	0x3fd33332
 80057b8:	3ff00000 	.word	0x3ff00000
 80057bc:	3fe90000 	.word	0x3fe90000
 80057c0:	3fd20000 	.word	0x3fd20000
 80057c4:	00000000 	.word	0x00000000

080057c8 <__kernel_rem_pio2>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	ed2d 8b02 	vpush	{d8}
 80057d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80057d4:	f112 0f14 	cmn.w	r2, #20
 80057d8:	9308      	str	r3, [sp, #32]
 80057da:	9101      	str	r1, [sp, #4]
 80057dc:	4bc4      	ldr	r3, [pc, #784]	; (8005af0 <__kernel_rem_pio2+0x328>)
 80057de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80057e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80057e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80057ee:	bfa8      	it	ge
 80057f0:	1ed4      	subge	r4, r2, #3
 80057f2:	9306      	str	r3, [sp, #24]
 80057f4:	bfb2      	itee	lt
 80057f6:	2400      	movlt	r4, #0
 80057f8:	2318      	movge	r3, #24
 80057fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80057fe:	f06f 0317 	mvn.w	r3, #23
 8005802:	fb04 3303 	mla	r3, r4, r3, r3
 8005806:	eb03 0a02 	add.w	sl, r3, r2
 800580a:	9b02      	ldr	r3, [sp, #8]
 800580c:	9a06      	ldr	r2, [sp, #24]
 800580e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005ae0 <__kernel_rem_pio2+0x318>
 8005812:	eb03 0802 	add.w	r8, r3, r2
 8005816:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005818:	1aa7      	subs	r7, r4, r2
 800581a:	ae22      	add	r6, sp, #136	; 0x88
 800581c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005820:	2500      	movs	r5, #0
 8005822:	4545      	cmp	r5, r8
 8005824:	dd13      	ble.n	800584e <__kernel_rem_pio2+0x86>
 8005826:	9b08      	ldr	r3, [sp, #32]
 8005828:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005ae0 <__kernel_rem_pio2+0x318>
 800582c:	aa22      	add	r2, sp, #136	; 0x88
 800582e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005832:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	9b02      	ldr	r3, [sp, #8]
 800583c:	4598      	cmp	r8, r3
 800583e:	dc2f      	bgt.n	80058a0 <__kernel_rem_pio2+0xd8>
 8005840:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005844:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005848:	462f      	mov	r7, r5
 800584a:	2600      	movs	r6, #0
 800584c:	e01b      	b.n	8005886 <__kernel_rem_pio2+0xbe>
 800584e:	42ef      	cmn	r7, r5
 8005850:	d407      	bmi.n	8005862 <__kernel_rem_pio2+0x9a>
 8005852:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005856:	f7fa fe09 	bl	800046c <__aeabi_i2d>
 800585a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800585e:	3501      	adds	r5, #1
 8005860:	e7df      	b.n	8005822 <__kernel_rem_pio2+0x5a>
 8005862:	ec51 0b18 	vmov	r0, r1, d8
 8005866:	e7f8      	b.n	800585a <__kernel_rem_pio2+0x92>
 8005868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800586c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005870:	f7fa fe66 	bl	8000540 <__aeabi_dmul>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800587c:	f7fa fcaa 	bl	80001d4 <__adddf3>
 8005880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005884:	3601      	adds	r6, #1
 8005886:	9b06      	ldr	r3, [sp, #24]
 8005888:	429e      	cmp	r6, r3
 800588a:	f1a7 0708 	sub.w	r7, r7, #8
 800588e:	ddeb      	ble.n	8005868 <__kernel_rem_pio2+0xa0>
 8005890:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005894:	f108 0801 	add.w	r8, r8, #1
 8005898:	ecab 7b02 	vstmia	fp!, {d7}
 800589c:	3508      	adds	r5, #8
 800589e:	e7cc      	b.n	800583a <__kernel_rem_pio2+0x72>
 80058a0:	9b02      	ldr	r3, [sp, #8]
 80058a2:	aa0e      	add	r2, sp, #56	; 0x38
 80058a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058a8:	930d      	str	r3, [sp, #52]	; 0x34
 80058aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80058ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80058b0:	9c02      	ldr	r4, [sp, #8]
 80058b2:	930c      	str	r3, [sp, #48]	; 0x30
 80058b4:	00e3      	lsls	r3, r4, #3
 80058b6:	930a      	str	r3, [sp, #40]	; 0x28
 80058b8:	ab9a      	add	r3, sp, #616	; 0x268
 80058ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80058c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80058c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80058c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80058cc:	46c3      	mov	fp, r8
 80058ce:	46a1      	mov	r9, r4
 80058d0:	f1b9 0f00 	cmp.w	r9, #0
 80058d4:	f1a5 0508 	sub.w	r5, r5, #8
 80058d8:	dc77      	bgt.n	80059ca <__kernel_rem_pio2+0x202>
 80058da:	ec47 6b10 	vmov	d0, r6, r7
 80058de:	4650      	mov	r0, sl
 80058e0:	f000 fc0a 	bl	80060f8 <scalbn>
 80058e4:	ec57 6b10 	vmov	r6, r7, d0
 80058e8:	2200      	movs	r2, #0
 80058ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80058ee:	ee10 0a10 	vmov	r0, s0
 80058f2:	4639      	mov	r1, r7
 80058f4:	f7fa fe24 	bl	8000540 <__aeabi_dmul>
 80058f8:	ec41 0b10 	vmov	d0, r0, r1
 80058fc:	f000 fb7c 	bl	8005ff8 <floor>
 8005900:	4b7c      	ldr	r3, [pc, #496]	; (8005af4 <__kernel_rem_pio2+0x32c>)
 8005902:	ec51 0b10 	vmov	r0, r1, d0
 8005906:	2200      	movs	r2, #0
 8005908:	f7fa fe1a 	bl	8000540 <__aeabi_dmul>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4630      	mov	r0, r6
 8005912:	4639      	mov	r1, r7
 8005914:	f7fa fc5c 	bl	80001d0 <__aeabi_dsub>
 8005918:	460f      	mov	r7, r1
 800591a:	4606      	mov	r6, r0
 800591c:	f7fb f8aa 	bl	8000a74 <__aeabi_d2iz>
 8005920:	9004      	str	r0, [sp, #16]
 8005922:	f7fa fda3 	bl	800046c <__aeabi_i2d>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4630      	mov	r0, r6
 800592c:	4639      	mov	r1, r7
 800592e:	f7fa fc4f 	bl	80001d0 <__aeabi_dsub>
 8005932:	f1ba 0f00 	cmp.w	sl, #0
 8005936:	4606      	mov	r6, r0
 8005938:	460f      	mov	r7, r1
 800593a:	dd6d      	ble.n	8005a18 <__kernel_rem_pio2+0x250>
 800593c:	1e62      	subs	r2, r4, #1
 800593e:	ab0e      	add	r3, sp, #56	; 0x38
 8005940:	9d04      	ldr	r5, [sp, #16]
 8005942:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005946:	f1ca 0118 	rsb	r1, sl, #24
 800594a:	fa40 f301 	asr.w	r3, r0, r1
 800594e:	441d      	add	r5, r3
 8005950:	408b      	lsls	r3, r1
 8005952:	1ac0      	subs	r0, r0, r3
 8005954:	ab0e      	add	r3, sp, #56	; 0x38
 8005956:	9504      	str	r5, [sp, #16]
 8005958:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800595c:	f1ca 0317 	rsb	r3, sl, #23
 8005960:	fa40 fb03 	asr.w	fp, r0, r3
 8005964:	f1bb 0f00 	cmp.w	fp, #0
 8005968:	dd65      	ble.n	8005a36 <__kernel_rem_pio2+0x26e>
 800596a:	9b04      	ldr	r3, [sp, #16]
 800596c:	2200      	movs	r2, #0
 800596e:	3301      	adds	r3, #1
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	4615      	mov	r5, r2
 8005974:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005978:	4294      	cmp	r4, r2
 800597a:	f300 809c 	bgt.w	8005ab6 <__kernel_rem_pio2+0x2ee>
 800597e:	f1ba 0f00 	cmp.w	sl, #0
 8005982:	dd07      	ble.n	8005994 <__kernel_rem_pio2+0x1cc>
 8005984:	f1ba 0f01 	cmp.w	sl, #1
 8005988:	f000 80c0 	beq.w	8005b0c <__kernel_rem_pio2+0x344>
 800598c:	f1ba 0f02 	cmp.w	sl, #2
 8005990:	f000 80c6 	beq.w	8005b20 <__kernel_rem_pio2+0x358>
 8005994:	f1bb 0f02 	cmp.w	fp, #2
 8005998:	d14d      	bne.n	8005a36 <__kernel_rem_pio2+0x26e>
 800599a:	4632      	mov	r2, r6
 800599c:	463b      	mov	r3, r7
 800599e:	4956      	ldr	r1, [pc, #344]	; (8005af8 <__kernel_rem_pio2+0x330>)
 80059a0:	2000      	movs	r0, #0
 80059a2:	f7fa fc15 	bl	80001d0 <__aeabi_dsub>
 80059a6:	4606      	mov	r6, r0
 80059a8:	460f      	mov	r7, r1
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	d043      	beq.n	8005a36 <__kernel_rem_pio2+0x26e>
 80059ae:	4650      	mov	r0, sl
 80059b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005ae8 <__kernel_rem_pio2+0x320>
 80059b4:	f000 fba0 	bl	80060f8 <scalbn>
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	ec53 2b10 	vmov	r2, r3, d0
 80059c0:	f7fa fc06 	bl	80001d0 <__aeabi_dsub>
 80059c4:	4606      	mov	r6, r0
 80059c6:	460f      	mov	r7, r1
 80059c8:	e035      	b.n	8005a36 <__kernel_rem_pio2+0x26e>
 80059ca:	4b4c      	ldr	r3, [pc, #304]	; (8005afc <__kernel_rem_pio2+0x334>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	4630      	mov	r0, r6
 80059d0:	4639      	mov	r1, r7
 80059d2:	f7fa fdb5 	bl	8000540 <__aeabi_dmul>
 80059d6:	f7fb f84d 	bl	8000a74 <__aeabi_d2iz>
 80059da:	f7fa fd47 	bl	800046c <__aeabi_i2d>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	ec43 2b18 	vmov	d8, r2, r3
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <__kernel_rem_pio2+0x338>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	f7fa fda9 	bl	8000540 <__aeabi_dmul>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4630      	mov	r0, r6
 80059f4:	4639      	mov	r1, r7
 80059f6:	f7fa fbeb 	bl	80001d0 <__aeabi_dsub>
 80059fa:	f7fb f83b 	bl	8000a74 <__aeabi_d2iz>
 80059fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a02:	f84b 0b04 	str.w	r0, [fp], #4
 8005a06:	ec51 0b18 	vmov	r0, r1, d8
 8005a0a:	f7fa fbe3 	bl	80001d4 <__adddf3>
 8005a0e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005a12:	4606      	mov	r6, r0
 8005a14:	460f      	mov	r7, r1
 8005a16:	e75b      	b.n	80058d0 <__kernel_rem_pio2+0x108>
 8005a18:	d106      	bne.n	8005a28 <__kernel_rem_pio2+0x260>
 8005a1a:	1e63      	subs	r3, r4, #1
 8005a1c:	aa0e      	add	r2, sp, #56	; 0x38
 8005a1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005a22:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005a26:	e79d      	b.n	8005964 <__kernel_rem_pio2+0x19c>
 8005a28:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <__kernel_rem_pio2+0x33c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f7fb f80e 	bl	8000a4c <__aeabi_dcmpge>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d13d      	bne.n	8005ab0 <__kernel_rem_pio2+0x2e8>
 8005a34:	4683      	mov	fp, r0
 8005a36:	2200      	movs	r2, #0
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	f7fa ffe7 	bl	8000a10 <__aeabi_dcmpeq>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f000 80c0 	beq.w	8005bc8 <__kernel_rem_pio2+0x400>
 8005a48:	1e65      	subs	r5, r4, #1
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	9902      	ldr	r1, [sp, #8]
 8005a50:	428b      	cmp	r3, r1
 8005a52:	da6c      	bge.n	8005b2e <__kernel_rem_pio2+0x366>
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	f000 8089 	beq.w	8005b6c <__kernel_rem_pio2+0x3a4>
 8005a5a:	ab0e      	add	r3, sp, #56	; 0x38
 8005a5c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005a60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80ad 	beq.w	8005bc4 <__kernel_rem_pio2+0x3fc>
 8005a6a:	4650      	mov	r0, sl
 8005a6c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005ae8 <__kernel_rem_pio2+0x320>
 8005a70:	f000 fb42 	bl	80060f8 <scalbn>
 8005a74:	ab9a      	add	r3, sp, #616	; 0x268
 8005a76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005a7a:	ec57 6b10 	vmov	r6, r7, d0
 8005a7e:	00ec      	lsls	r4, r5, #3
 8005a80:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005a84:	46aa      	mov	sl, r5
 8005a86:	f1ba 0f00 	cmp.w	sl, #0
 8005a8a:	f280 80d6 	bge.w	8005c3a <__kernel_rem_pio2+0x472>
 8005a8e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005ae0 <__kernel_rem_pio2+0x318>
 8005a92:	462e      	mov	r6, r5
 8005a94:	2e00      	cmp	r6, #0
 8005a96:	f2c0 8104 	blt.w	8005ca2 <__kernel_rem_pio2+0x4da>
 8005a9a:	ab72      	add	r3, sp, #456	; 0x1c8
 8005a9c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005aa0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005b08 <__kernel_rem_pio2+0x340>
 8005aa4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005aa8:	f04f 0800 	mov.w	r8, #0
 8005aac:	1baf      	subs	r7, r5, r6
 8005aae:	e0ea      	b.n	8005c86 <__kernel_rem_pio2+0x4be>
 8005ab0:	f04f 0b02 	mov.w	fp, #2
 8005ab4:	e759      	b.n	800596a <__kernel_rem_pio2+0x1a2>
 8005ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aba:	b955      	cbnz	r5, 8005ad2 <__kernel_rem_pio2+0x30a>
 8005abc:	b123      	cbz	r3, 8005ac8 <__kernel_rem_pio2+0x300>
 8005abe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005ac2:	f8c8 3000 	str.w	r3, [r8]
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	3201      	adds	r2, #1
 8005aca:	f108 0804 	add.w	r8, r8, #4
 8005ace:	461d      	mov	r5, r3
 8005ad0:	e752      	b.n	8005978 <__kernel_rem_pio2+0x1b0>
 8005ad2:	1acb      	subs	r3, r1, r3
 8005ad4:	f8c8 3000 	str.w	r3, [r8]
 8005ad8:	462b      	mov	r3, r5
 8005ada:	e7f5      	b.n	8005ac8 <__kernel_rem_pio2+0x300>
 8005adc:	f3af 8000 	nop.w
	...
 8005aec:	3ff00000 	.word	0x3ff00000
 8005af0:	08006418 	.word	0x08006418
 8005af4:	40200000 	.word	0x40200000
 8005af8:	3ff00000 	.word	0x3ff00000
 8005afc:	3e700000 	.word	0x3e700000
 8005b00:	41700000 	.word	0x41700000
 8005b04:	3fe00000 	.word	0x3fe00000
 8005b08:	080063d8 	.word	0x080063d8
 8005b0c:	1e62      	subs	r2, r4, #1
 8005b0e:	ab0e      	add	r3, sp, #56	; 0x38
 8005b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005b18:	a90e      	add	r1, sp, #56	; 0x38
 8005b1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005b1e:	e739      	b.n	8005994 <__kernel_rem_pio2+0x1cc>
 8005b20:	1e62      	subs	r2, r4, #1
 8005b22:	ab0e      	add	r3, sp, #56	; 0x38
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b2c:	e7f4      	b.n	8005b18 <__kernel_rem_pio2+0x350>
 8005b2e:	a90e      	add	r1, sp, #56	; 0x38
 8005b30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	430a      	orrs	r2, r1
 8005b38:	e789      	b.n	8005a4e <__kernel_rem_pio2+0x286>
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d0fa      	beq.n	8005b3a <__kernel_rem_pio2+0x372>
 8005b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b46:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005b4a:	446a      	add	r2, sp
 8005b4c:	3a98      	subs	r2, #152	; 0x98
 8005b4e:	920a      	str	r2, [sp, #40]	; 0x28
 8005b50:	9a08      	ldr	r2, [sp, #32]
 8005b52:	18e3      	adds	r3, r4, r3
 8005b54:	18a5      	adds	r5, r4, r2
 8005b56:	aa22      	add	r2, sp, #136	; 0x88
 8005b58:	f104 0801 	add.w	r8, r4, #1
 8005b5c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	9b04      	ldr	r3, [sp, #16]
 8005b64:	4543      	cmp	r3, r8
 8005b66:	da04      	bge.n	8005b72 <__kernel_rem_pio2+0x3aa>
 8005b68:	461c      	mov	r4, r3
 8005b6a:	e6a3      	b.n	80058b4 <__kernel_rem_pio2+0xec>
 8005b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e7e4      	b.n	8005b3c <__kernel_rem_pio2+0x374>
 8005b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005b78:	f7fa fc78 	bl	800046c <__aeabi_i2d>
 8005b7c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b82:	46ab      	mov	fp, r5
 8005b84:	461c      	mov	r4, r3
 8005b86:	f04f 0900 	mov.w	r9, #0
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	9b06      	ldr	r3, [sp, #24]
 8005b90:	4599      	cmp	r9, r3
 8005b92:	dd06      	ble.n	8005ba2 <__kernel_rem_pio2+0x3da>
 8005b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b96:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005b9a:	f108 0801 	add.w	r8, r8, #1
 8005b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005ba0:	e7df      	b.n	8005b62 <__kernel_rem_pio2+0x39a>
 8005ba2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005ba6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005baa:	f7fa fcc9 	bl	8000540 <__aeabi_dmul>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa fb0d 	bl	80001d4 <__adddf3>
 8005bba:	f109 0901 	add.w	r9, r9, #1
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	e7e4      	b.n	8005b8e <__kernel_rem_pio2+0x3c6>
 8005bc4:	3d01      	subs	r5, #1
 8005bc6:	e748      	b.n	8005a5a <__kernel_rem_pio2+0x292>
 8005bc8:	ec47 6b10 	vmov	d0, r6, r7
 8005bcc:	f1ca 0000 	rsb	r0, sl, #0
 8005bd0:	f000 fa92 	bl	80060f8 <scalbn>
 8005bd4:	ec57 6b10 	vmov	r6, r7, d0
 8005bd8:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <__kernel_rem_pio2+0x694>)
 8005bda:	ee10 0a10 	vmov	r0, s0
 8005bde:	2200      	movs	r2, #0
 8005be0:	4639      	mov	r1, r7
 8005be2:	f7fa ff33 	bl	8000a4c <__aeabi_dcmpge>
 8005be6:	b1f8      	cbz	r0, 8005c28 <__kernel_rem_pio2+0x460>
 8005be8:	4b9d      	ldr	r3, [pc, #628]	; (8005e60 <__kernel_rem_pio2+0x698>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	4630      	mov	r0, r6
 8005bee:	4639      	mov	r1, r7
 8005bf0:	f7fa fca6 	bl	8000540 <__aeabi_dmul>
 8005bf4:	f7fa ff3e 	bl	8000a74 <__aeabi_d2iz>
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	f7fa fc37 	bl	800046c <__aeabi_i2d>
 8005bfe:	4b97      	ldr	r3, [pc, #604]	; (8005e5c <__kernel_rem_pio2+0x694>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7fa fc9d 	bl	8000540 <__aeabi_dmul>
 8005c06:	460b      	mov	r3, r1
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7fa fadf 	bl	80001d0 <__aeabi_dsub>
 8005c12:	f7fa ff2f 	bl	8000a74 <__aeabi_d2iz>
 8005c16:	1c65      	adds	r5, r4, #1
 8005c18:	ab0e      	add	r3, sp, #56	; 0x38
 8005c1a:	f10a 0a18 	add.w	sl, sl, #24
 8005c1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005c22:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005c26:	e720      	b.n	8005a6a <__kernel_rem_pio2+0x2a2>
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa ff22 	bl	8000a74 <__aeabi_d2iz>
 8005c30:	ab0e      	add	r3, sp, #56	; 0x38
 8005c32:	4625      	mov	r5, r4
 8005c34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005c38:	e717      	b.n	8005a6a <__kernel_rem_pio2+0x2a2>
 8005c3a:	ab0e      	add	r3, sp, #56	; 0x38
 8005c3c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005c40:	f7fa fc14 	bl	800046c <__aeabi_i2d>
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	f7fa fc7a 	bl	8000540 <__aeabi_dmul>
 8005c4c:	4b84      	ldr	r3, [pc, #528]	; (8005e60 <__kernel_rem_pio2+0x698>)
 8005c4e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005c52:	2200      	movs	r2, #0
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f7fa fc72 	bl	8000540 <__aeabi_dmul>
 8005c5c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c60:	4606      	mov	r6, r0
 8005c62:	460f      	mov	r7, r1
 8005c64:	e70f      	b.n	8005a86 <__kernel_rem_pio2+0x2be>
 8005c66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005c6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005c6e:	f7fa fc67 	bl	8000540 <__aeabi_dmul>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c7a:	f7fa faab 	bl	80001d4 <__adddf3>
 8005c7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c82:	f108 0801 	add.w	r8, r8, #1
 8005c86:	9b02      	ldr	r3, [sp, #8]
 8005c88:	4598      	cmp	r8, r3
 8005c8a:	dc01      	bgt.n	8005c90 <__kernel_rem_pio2+0x4c8>
 8005c8c:	45b8      	cmp	r8, r7
 8005c8e:	ddea      	ble.n	8005c66 <__kernel_rem_pio2+0x49e>
 8005c90:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005c94:	ab4a      	add	r3, sp, #296	; 0x128
 8005c96:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005c9a:	ed87 7b00 	vstr	d7, [r7]
 8005c9e:	3e01      	subs	r6, #1
 8005ca0:	e6f8      	b.n	8005a94 <__kernel_rem_pio2+0x2cc>
 8005ca2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	dc0b      	bgt.n	8005cc0 <__kernel_rem_pio2+0x4f8>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc35      	bgt.n	8005d18 <__kernel_rem_pio2+0x550>
 8005cac:	d059      	beq.n	8005d62 <__kernel_rem_pio2+0x59a>
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	f003 0007 	and.w	r0, r3, #7
 8005cb4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005cb8:	ecbd 8b02 	vpop	{d8}
 8005cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d1f3      	bne.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005cc6:	ab4a      	add	r3, sp, #296	; 0x128
 8005cc8:	4423      	add	r3, r4
 8005cca:	9306      	str	r3, [sp, #24]
 8005ccc:	461c      	mov	r4, r3
 8005cce:	469a      	mov	sl, r3
 8005cd0:	9502      	str	r5, [sp, #8]
 8005cd2:	9b02      	ldr	r3, [sp, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f1aa 0a08 	sub.w	sl, sl, #8
 8005cda:	dc6b      	bgt.n	8005db4 <__kernel_rem_pio2+0x5ec>
 8005cdc:	46aa      	mov	sl, r5
 8005cde:	f1ba 0f01 	cmp.w	sl, #1
 8005ce2:	f1a4 0408 	sub.w	r4, r4, #8
 8005ce6:	f300 8085 	bgt.w	8005df4 <__kernel_rem_pio2+0x62c>
 8005cea:	9c06      	ldr	r4, [sp, #24]
 8005cec:	2000      	movs	r0, #0
 8005cee:	3408      	adds	r4, #8
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	2d01      	cmp	r5, #1
 8005cf4:	f300 809d 	bgt.w	8005e32 <__kernel_rem_pio2+0x66a>
 8005cf8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005cfc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005d00:	f1bb 0f00 	cmp.w	fp, #0
 8005d04:	f040 809b 	bne.w	8005e3e <__kernel_rem_pio2+0x676>
 8005d08:	9b01      	ldr	r3, [sp, #4]
 8005d0a:	e9c3 5600 	strd	r5, r6, [r3]
 8005d0e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005d12:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005d16:	e7ca      	b.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005d18:	3408      	adds	r4, #8
 8005d1a:	ab4a      	add	r3, sp, #296	; 0x128
 8005d1c:	441c      	add	r4, r3
 8005d1e:	462e      	mov	r6, r5
 8005d20:	2000      	movs	r0, #0
 8005d22:	2100      	movs	r1, #0
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	da36      	bge.n	8005d96 <__kernel_rem_pio2+0x5ce>
 8005d28:	f1bb 0f00 	cmp.w	fp, #0
 8005d2c:	d039      	beq.n	8005da2 <__kernel_rem_pio2+0x5da>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d34:	9c01      	ldr	r4, [sp, #4]
 8005d36:	e9c4 2300 	strd	r2, r3, [r4]
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005d42:	f7fa fa45 	bl	80001d0 <__aeabi_dsub>
 8005d46:	ae4c      	add	r6, sp, #304	; 0x130
 8005d48:	2401      	movs	r4, #1
 8005d4a:	42a5      	cmp	r5, r4
 8005d4c:	da2c      	bge.n	8005da8 <__kernel_rem_pio2+0x5e0>
 8005d4e:	f1bb 0f00 	cmp.w	fp, #0
 8005d52:	d002      	beq.n	8005d5a <__kernel_rem_pio2+0x592>
 8005d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d58:	4619      	mov	r1, r3
 8005d5a:	9b01      	ldr	r3, [sp, #4]
 8005d5c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005d60:	e7a5      	b.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005d62:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005d66:	eb0d 0403 	add.w	r4, sp, r3
 8005d6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005d6e:	2000      	movs	r0, #0
 8005d70:	2100      	movs	r1, #0
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	da09      	bge.n	8005d8a <__kernel_rem_pio2+0x5c2>
 8005d76:	f1bb 0f00 	cmp.w	fp, #0
 8005d7a:	d002      	beq.n	8005d82 <__kernel_rem_pio2+0x5ba>
 8005d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d80:	4619      	mov	r1, r3
 8005d82:	9b01      	ldr	r3, [sp, #4]
 8005d84:	e9c3 0100 	strd	r0, r1, [r3]
 8005d88:	e791      	b.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005d8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d8e:	f7fa fa21 	bl	80001d4 <__adddf3>
 8005d92:	3d01      	subs	r5, #1
 8005d94:	e7ed      	b.n	8005d72 <__kernel_rem_pio2+0x5aa>
 8005d96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d9a:	f7fa fa1b 	bl	80001d4 <__adddf3>
 8005d9e:	3e01      	subs	r6, #1
 8005da0:	e7c0      	b.n	8005d24 <__kernel_rem_pio2+0x55c>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	e7c5      	b.n	8005d34 <__kernel_rem_pio2+0x56c>
 8005da8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005dac:	f7fa fa12 	bl	80001d4 <__adddf3>
 8005db0:	3401      	adds	r4, #1
 8005db2:	e7ca      	b.n	8005d4a <__kernel_rem_pio2+0x582>
 8005db4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005db8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	9302      	str	r3, [sp, #8]
 8005dc2:	4632      	mov	r2, r6
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4649      	mov	r1, r9
 8005dca:	f7fa fa03 	bl	80001d4 <__adddf3>
 8005dce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	f7fa f9f9 	bl	80001d0 <__aeabi_dsub>
 8005dde:	4632      	mov	r2, r6
 8005de0:	463b      	mov	r3, r7
 8005de2:	f7fa f9f7 	bl	80001d4 <__adddf3>
 8005de6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005dea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005dee:	ed8a 7b00 	vstr	d7, [sl]
 8005df2:	e76e      	b.n	8005cd2 <__kernel_rem_pio2+0x50a>
 8005df4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005df8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4632      	mov	r2, r6
 8005e00:	463b      	mov	r3, r7
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa f9e6 	bl	80001d4 <__adddf3>
 8005e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4640      	mov	r0, r8
 8005e12:	4649      	mov	r1, r9
 8005e14:	f7fa f9dc 	bl	80001d0 <__aeabi_dsub>
 8005e18:	4632      	mov	r2, r6
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	f7fa f9da 	bl	80001d4 <__adddf3>
 8005e20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e28:	ed84 7b00 	vstr	d7, [r4]
 8005e2c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e30:	e755      	b.n	8005cde <__kernel_rem_pio2+0x516>
 8005e32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e36:	f7fa f9cd 	bl	80001d4 <__adddf3>
 8005e3a:	3d01      	subs	r5, #1
 8005e3c:	e759      	b.n	8005cf2 <__kernel_rem_pio2+0x52a>
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	9a01      	ldr	r2, [sp, #4]
 8005e42:	601d      	str	r5, [r3, #0]
 8005e44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005e48:	605c      	str	r4, [r3, #4]
 8005e4a:	609f      	str	r7, [r3, #8]
 8005e4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005e50:	60d3      	str	r3, [r2, #12]
 8005e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e56:	6110      	str	r0, [r2, #16]
 8005e58:	6153      	str	r3, [r2, #20]
 8005e5a:	e728      	b.n	8005cae <__kernel_rem_pio2+0x4e6>
 8005e5c:	41700000 	.word	0x41700000
 8005e60:	3e700000 	.word	0x3e700000
 8005e64:	00000000 	.word	0x00000000

08005e68 <__kernel_sin>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	ed2d 8b04 	vpush	{d8-d9}
 8005e70:	eeb0 8a41 	vmov.f32	s16, s2
 8005e74:	eef0 8a61 	vmov.f32	s17, s3
 8005e78:	ec55 4b10 	vmov	r4, r5, d0
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005e86:	9001      	str	r0, [sp, #4]
 8005e88:	da06      	bge.n	8005e98 <__kernel_sin+0x30>
 8005e8a:	ee10 0a10 	vmov	r0, s0
 8005e8e:	4629      	mov	r1, r5
 8005e90:	f7fa fdf0 	bl	8000a74 <__aeabi_d2iz>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d051      	beq.n	8005f3c <__kernel_sin+0xd4>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa fb4e 	bl	8000540 <__aeabi_dmul>
 8005ea4:	4682      	mov	sl, r0
 8005ea6:	468b      	mov	fp, r1
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4620      	mov	r0, r4
 8005eae:	4629      	mov	r1, r5
 8005eb0:	f7fa fb46 	bl	8000540 <__aeabi_dmul>
 8005eb4:	a341      	add	r3, pc, #260	; (adr r3, 8005fbc <__kernel_sin+0x154>)
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	4680      	mov	r8, r0
 8005ebc:	4689      	mov	r9, r1
 8005ebe:	4650      	mov	r0, sl
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	f7fa fb3d 	bl	8000540 <__aeabi_dmul>
 8005ec6:	a33f      	add	r3, pc, #252	; (adr r3, 8005fc4 <__kernel_sin+0x15c>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa f980 	bl	80001d0 <__aeabi_dsub>
 8005ed0:	4652      	mov	r2, sl
 8005ed2:	465b      	mov	r3, fp
 8005ed4:	f7fa fb34 	bl	8000540 <__aeabi_dmul>
 8005ed8:	a33c      	add	r3, pc, #240	; (adr r3, 8005fcc <__kernel_sin+0x164>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa f979 	bl	80001d4 <__adddf3>
 8005ee2:	4652      	mov	r2, sl
 8005ee4:	465b      	mov	r3, fp
 8005ee6:	f7fa fb2b 	bl	8000540 <__aeabi_dmul>
 8005eea:	a33a      	add	r3, pc, #232	; (adr r3, 8005fd4 <__kernel_sin+0x16c>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa f96e 	bl	80001d0 <__aeabi_dsub>
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	465b      	mov	r3, fp
 8005ef8:	f7fa fb22 	bl	8000540 <__aeabi_dmul>
 8005efc:	a337      	add	r3, pc, #220	; (adr r3, 8005fdc <__kernel_sin+0x174>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f967 	bl	80001d4 <__adddf3>
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	4606      	mov	r6, r0
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	b9eb      	cbnz	r3, 8005f4a <__kernel_sin+0xe2>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4650      	mov	r0, sl
 8005f14:	4659      	mov	r1, fp
 8005f16:	f7fa fb13 	bl	8000540 <__aeabi_dmul>
 8005f1a:	a325      	add	r3, pc, #148	; (adr r3, 8005fb0 <__kernel_sin+0x148>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f7fa f956 	bl	80001d0 <__aeabi_dsub>
 8005f24:	4642      	mov	r2, r8
 8005f26:	464b      	mov	r3, r9
 8005f28:	f7fa fb0a 	bl	8000540 <__aeabi_dmul>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa f94e 	bl	80001d4 <__adddf3>
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	ec45 4b10 	vmov	d0, r4, r5
 8005f40:	b003      	add	sp, #12
 8005f42:	ecbd 8b04 	vpop	{d8-d9}
 8005f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <__kernel_sin+0x150>)
 8005f4c:	ec51 0b18 	vmov	r0, r1, d8
 8005f50:	2200      	movs	r2, #0
 8005f52:	f7fa faf5 	bl	8000540 <__aeabi_dmul>
 8005f56:	4632      	mov	r2, r6
 8005f58:	ec41 0b19 	vmov	d9, r0, r1
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa faed 	bl	8000540 <__aeabi_dmul>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	ec51 0b19 	vmov	r0, r1, d9
 8005f6e:	f7fa f92f 	bl	80001d0 <__aeabi_dsub>
 8005f72:	4652      	mov	r2, sl
 8005f74:	465b      	mov	r3, fp
 8005f76:	f7fa fae3 	bl	8000540 <__aeabi_dmul>
 8005f7a:	ec53 2b18 	vmov	r2, r3, d8
 8005f7e:	f7fa f927 	bl	80001d0 <__aeabi_dsub>
 8005f82:	a30b      	add	r3, pc, #44	; (adr r3, 8005fb0 <__kernel_sin+0x148>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	4606      	mov	r6, r0
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4649      	mov	r1, r9
 8005f90:	f7fa fad6 	bl	8000540 <__aeabi_dmul>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4630      	mov	r0, r6
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa f91a 	bl	80001d4 <__adddf3>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f7fa f912 	bl	80001d0 <__aeabi_dsub>
 8005fac:	e7c4      	b.n	8005f38 <__kernel_sin+0xd0>
 8005fae:	bf00      	nop
 8005fb0:	55555549 	.word	0x55555549
 8005fb4:	3fc55555 	.word	0x3fc55555
 8005fb8:	3fe00000 	.word	0x3fe00000
 8005fbc:	5acfd57c 	.word	0x5acfd57c
 8005fc0:	3de5d93a 	.word	0x3de5d93a
 8005fc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005fc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005fcc:	57b1fe7d 	.word	0x57b1fe7d
 8005fd0:	3ec71de3 	.word	0x3ec71de3
 8005fd4:	19c161d5 	.word	0x19c161d5
 8005fd8:	3f2a01a0 	.word	0x3f2a01a0
 8005fdc:	1110f8a6 	.word	0x1110f8a6
 8005fe0:	3f811111 	.word	0x3f811111

08005fe4 <fabs>:
 8005fe4:	ec51 0b10 	vmov	r0, r1, d0
 8005fe8:	ee10 2a10 	vmov	r2, s0
 8005fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ff0:	ec43 2b10 	vmov	d0, r2, r3
 8005ff4:	4770      	bx	lr
	...

08005ff8 <floor>:
 8005ff8:	ec51 0b10 	vmov	r0, r1, d0
 8005ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006000:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006004:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006008:	2e13      	cmp	r6, #19
 800600a:	ee10 5a10 	vmov	r5, s0
 800600e:	ee10 8a10 	vmov	r8, s0
 8006012:	460c      	mov	r4, r1
 8006014:	dc32      	bgt.n	800607c <floor+0x84>
 8006016:	2e00      	cmp	r6, #0
 8006018:	da14      	bge.n	8006044 <floor+0x4c>
 800601a:	a333      	add	r3, pc, #204	; (adr r3, 80060e8 <floor+0xf0>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa f8d8 	bl	80001d4 <__adddf3>
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	f7fa fd1a 	bl	8000a60 <__aeabi_dcmpgt>
 800602c:	b138      	cbz	r0, 800603e <floor+0x46>
 800602e:	2c00      	cmp	r4, #0
 8006030:	da57      	bge.n	80060e2 <floor+0xea>
 8006032:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006036:	431d      	orrs	r5, r3
 8006038:	d001      	beq.n	800603e <floor+0x46>
 800603a:	4c2d      	ldr	r4, [pc, #180]	; (80060f0 <floor+0xf8>)
 800603c:	2500      	movs	r5, #0
 800603e:	4621      	mov	r1, r4
 8006040:	4628      	mov	r0, r5
 8006042:	e025      	b.n	8006090 <floor+0x98>
 8006044:	4f2b      	ldr	r7, [pc, #172]	; (80060f4 <floor+0xfc>)
 8006046:	4137      	asrs	r7, r6
 8006048:	ea01 0307 	and.w	r3, r1, r7
 800604c:	4303      	orrs	r3, r0
 800604e:	d01f      	beq.n	8006090 <floor+0x98>
 8006050:	a325      	add	r3, pc, #148	; (adr r3, 80060e8 <floor+0xf0>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f7fa f8bd 	bl	80001d4 <__adddf3>
 800605a:	2200      	movs	r2, #0
 800605c:	2300      	movs	r3, #0
 800605e:	f7fa fcff 	bl	8000a60 <__aeabi_dcmpgt>
 8006062:	2800      	cmp	r0, #0
 8006064:	d0eb      	beq.n	800603e <floor+0x46>
 8006066:	2c00      	cmp	r4, #0
 8006068:	bfbe      	ittt	lt
 800606a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800606e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006072:	19a4      	addlt	r4, r4, r6
 8006074:	ea24 0407 	bic.w	r4, r4, r7
 8006078:	2500      	movs	r5, #0
 800607a:	e7e0      	b.n	800603e <floor+0x46>
 800607c:	2e33      	cmp	r6, #51	; 0x33
 800607e:	dd0b      	ble.n	8006098 <floor+0xa0>
 8006080:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006084:	d104      	bne.n	8006090 <floor+0x98>
 8006086:	ee10 2a10 	vmov	r2, s0
 800608a:	460b      	mov	r3, r1
 800608c:	f7fa f8a2 	bl	80001d4 <__adddf3>
 8006090:	ec41 0b10 	vmov	d0, r0, r1
 8006094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006098:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800609c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a0:	fa23 f707 	lsr.w	r7, r3, r7
 80060a4:	4207      	tst	r7, r0
 80060a6:	d0f3      	beq.n	8006090 <floor+0x98>
 80060a8:	a30f      	add	r3, pc, #60	; (adr r3, 80060e8 <floor+0xf0>)
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f7fa f891 	bl	80001d4 <__adddf3>
 80060b2:	2200      	movs	r2, #0
 80060b4:	2300      	movs	r3, #0
 80060b6:	f7fa fcd3 	bl	8000a60 <__aeabi_dcmpgt>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d0bf      	beq.n	800603e <floor+0x46>
 80060be:	2c00      	cmp	r4, #0
 80060c0:	da02      	bge.n	80060c8 <floor+0xd0>
 80060c2:	2e14      	cmp	r6, #20
 80060c4:	d103      	bne.n	80060ce <floor+0xd6>
 80060c6:	3401      	adds	r4, #1
 80060c8:	ea25 0507 	bic.w	r5, r5, r7
 80060cc:	e7b7      	b.n	800603e <floor+0x46>
 80060ce:	2301      	movs	r3, #1
 80060d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80060d4:	fa03 f606 	lsl.w	r6, r3, r6
 80060d8:	4435      	add	r5, r6
 80060da:	4545      	cmp	r5, r8
 80060dc:	bf38      	it	cc
 80060de:	18e4      	addcc	r4, r4, r3
 80060e0:	e7f2      	b.n	80060c8 <floor+0xd0>
 80060e2:	2500      	movs	r5, #0
 80060e4:	462c      	mov	r4, r5
 80060e6:	e7aa      	b.n	800603e <floor+0x46>
 80060e8:	8800759c 	.word	0x8800759c
 80060ec:	7e37e43c 	.word	0x7e37e43c
 80060f0:	bff00000 	.word	0xbff00000
 80060f4:	000fffff 	.word	0x000fffff

080060f8 <scalbn>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	ec55 4b10 	vmov	r4, r5, d0
 80060fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006102:	4606      	mov	r6, r0
 8006104:	462b      	mov	r3, r5
 8006106:	b99a      	cbnz	r2, 8006130 <scalbn+0x38>
 8006108:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800610c:	4323      	orrs	r3, r4
 800610e:	d036      	beq.n	800617e <scalbn+0x86>
 8006110:	4b39      	ldr	r3, [pc, #228]	; (80061f8 <scalbn+0x100>)
 8006112:	4629      	mov	r1, r5
 8006114:	ee10 0a10 	vmov	r0, s0
 8006118:	2200      	movs	r2, #0
 800611a:	f7fa fa11 	bl	8000540 <__aeabi_dmul>
 800611e:	4b37      	ldr	r3, [pc, #220]	; (80061fc <scalbn+0x104>)
 8006120:	429e      	cmp	r6, r3
 8006122:	4604      	mov	r4, r0
 8006124:	460d      	mov	r5, r1
 8006126:	da10      	bge.n	800614a <scalbn+0x52>
 8006128:	a32b      	add	r3, pc, #172	; (adr r3, 80061d8 <scalbn+0xe0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	e03a      	b.n	80061a6 <scalbn+0xae>
 8006130:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006134:	428a      	cmp	r2, r1
 8006136:	d10c      	bne.n	8006152 <scalbn+0x5a>
 8006138:	ee10 2a10 	vmov	r2, s0
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa f848 	bl	80001d4 <__adddf3>
 8006144:	4604      	mov	r4, r0
 8006146:	460d      	mov	r5, r1
 8006148:	e019      	b.n	800617e <scalbn+0x86>
 800614a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800614e:	460b      	mov	r3, r1
 8006150:	3a36      	subs	r2, #54	; 0x36
 8006152:	4432      	add	r2, r6
 8006154:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006158:	428a      	cmp	r2, r1
 800615a:	dd08      	ble.n	800616e <scalbn+0x76>
 800615c:	2d00      	cmp	r5, #0
 800615e:	a120      	add	r1, pc, #128	; (adr r1, 80061e0 <scalbn+0xe8>)
 8006160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006164:	da1c      	bge.n	80061a0 <scalbn+0xa8>
 8006166:	a120      	add	r1, pc, #128	; (adr r1, 80061e8 <scalbn+0xf0>)
 8006168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800616c:	e018      	b.n	80061a0 <scalbn+0xa8>
 800616e:	2a00      	cmp	r2, #0
 8006170:	dd08      	ble.n	8006184 <scalbn+0x8c>
 8006172:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800617a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800617e:	ec45 4b10 	vmov	d0, r4, r5
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006188:	da19      	bge.n	80061be <scalbn+0xc6>
 800618a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800618e:	429e      	cmp	r6, r3
 8006190:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006194:	dd0a      	ble.n	80061ac <scalbn+0xb4>
 8006196:	a112      	add	r1, pc, #72	; (adr r1, 80061e0 <scalbn+0xe8>)
 8006198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e2      	bne.n	8006166 <scalbn+0x6e>
 80061a0:	a30f      	add	r3, pc, #60	; (adr r3, 80061e0 <scalbn+0xe8>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa f9cb 	bl	8000540 <__aeabi_dmul>
 80061aa:	e7cb      	b.n	8006144 <scalbn+0x4c>
 80061ac:	a10a      	add	r1, pc, #40	; (adr r1, 80061d8 <scalbn+0xe0>)
 80061ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0b8      	beq.n	8006128 <scalbn+0x30>
 80061b6:	a10e      	add	r1, pc, #56	; (adr r1, 80061f0 <scalbn+0xf8>)
 80061b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061bc:	e7b4      	b.n	8006128 <scalbn+0x30>
 80061be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061c2:	3236      	adds	r2, #54	; 0x36
 80061c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80061cc:	4620      	mov	r0, r4
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <scalbn+0x108>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	e7e8      	b.n	80061a6 <scalbn+0xae>
 80061d4:	f3af 8000 	nop.w
 80061d8:	c2f8f359 	.word	0xc2f8f359
 80061dc:	01a56e1f 	.word	0x01a56e1f
 80061e0:	8800759c 	.word	0x8800759c
 80061e4:	7e37e43c 	.word	0x7e37e43c
 80061e8:	8800759c 	.word	0x8800759c
 80061ec:	fe37e43c 	.word	0xfe37e43c
 80061f0:	c2f8f359 	.word	0xc2f8f359
 80061f4:	81a56e1f 	.word	0x81a56e1f
 80061f8:	43500000 	.word	0x43500000
 80061fc:	ffff3cb0 	.word	0xffff3cb0
 8006200:	3c900000 	.word	0x3c900000

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
