
automate_petit_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e0  080050e0  000222c0  2**0
                  CONTENTS
  4 .ARM          00000000  080050e0  080050e0  000222c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e0  080050e0  000222c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000022c0  20000000  080050e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000222c0  2**0
                  CONTENTS
 10 .bss          0000015c  200022c0  200022c0  000222c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000241c  2000241c  000222c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000222c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e158  00000000  00000000  000222f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f1  00000000  00000000  00030448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00032740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  00033420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9a1  00000000  00000000  00033ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100fc  00000000  00000000  00050999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a82d8  00000000  00000000  00060a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00108d6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034e0  00000000  00000000  00108dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200022c0 	.word	0x200022c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005098 	.word	0x08005098

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200022c4 	.word	0x200022c4
 80001c4:	08005098 	.word	0x08005098

080001c8 <go_position>:
#include "deplacementActionneur.h"
#include "motorActionneur.h"

extern Motor_t motor;

void go_position(Position_t pos){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	if (get_deplacement_state() == ARRET){
 80001d2:	f000 fdc1 	bl	8000d58 <get_deplacement_state>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d176      	bne.n	80002ca <go_position+0x102>
		if (get_position() != pos){
 80001dc:	f000 fdd8 	bl	8000d90 <get_position>
 80001e0:	4603      	mov	r3, r0
 80001e2:	461a      	mov	r2, r3
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d068      	beq.n	80002bc <go_position+0xf4>
			reset_steps();
 80001ea:	f000 fe25 	bl	8000e38 <reset_steps>
			switch(get_position()){
 80001ee:	f000 fdcf 	bl	8000d90 <get_position>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d042      	beq.n	800027e <go_position+0xb6>
 80001f8:	2b02      	cmp	r3, #2
 80001fa:	dc61      	bgt.n	80002c0 <go_position+0xf8>
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d002      	beq.n	8000206 <go_position+0x3e>
 8000200:	2b01      	cmp	r3, #1
 8000202:	d01d      	beq.n	8000240 <go_position+0x78>
					set_target(nbSteps);
				break;
				}
			break;
			default:;
			break;
 8000204:	e05c      	b.n	80002c0 <go_position+0xf8>
				switch(pos){
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d002      	beq.n	8000212 <go_position+0x4a>
 800020c:	2b02      	cmp	r3, #2
 800020e:	d00b      	beq.n	8000228 <go_position+0x60>
			break;
 8000210:	e057      	b.n	80002c2 <go_position+0xfa>
					motor.pinDirState = 1;
 8000212:	4b30      	ldr	r3, [pc, #192]	; (80002d4 <go_position+0x10c>)
 8000214:	2201      	movs	r2, #1
 8000216:	621a      	str	r2, [r3, #32]
					motor_dir(&motor);
 8000218:	482e      	ldr	r0, [pc, #184]	; (80002d4 <go_position+0x10c>)
 800021a:	f000 fbfa 	bl	8000a12 <motor_dir>
					set_target(NB_STEPS_STATUETTE);
 800021e:	f643 7082 	movw	r0, #16258	; 0x3f82
 8000222:	f000 fdf9 	bl	8000e18 <set_target>
				break;
 8000226:	e00a      	b.n	800023e <go_position+0x76>
					motor.pinDirState = 0;
 8000228:	4b2a      	ldr	r3, [pc, #168]	; (80002d4 <go_position+0x10c>)
 800022a:	2200      	movs	r2, #0
 800022c:	621a      	str	r2, [r3, #32]
					motor_dir(&motor);
 800022e:	4829      	ldr	r0, [pc, #164]	; (80002d4 <go_position+0x10c>)
 8000230:	f000 fbef 	bl	8000a12 <motor_dir>
					set_target(NB_STEPS_AIMANT);
 8000234:	f640 5051 	movw	r0, #3409	; 0xd51
 8000238:	f000 fdee 	bl	8000e18 <set_target>
				break;
 800023c:	bf00      	nop
			break;
 800023e:	e040      	b.n	80002c2 <go_position+0xfa>
				switch(pos){
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <go_position+0x84>
 8000246:	2b02      	cmp	r3, #2
 8000248:	d00b      	beq.n	8000262 <go_position+0x9a>
			break;
 800024a:	e03a      	b.n	80002c2 <go_position+0xfa>
					motor.pinDirState = 0;
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <go_position+0x10c>)
 800024e:	2200      	movs	r2, #0
 8000250:	621a      	str	r2, [r3, #32]
					motor_dir(&motor);
 8000252:	4820      	ldr	r0, [pc, #128]	; (80002d4 <go_position+0x10c>)
 8000254:	f000 fbdd 	bl	8000a12 <motor_dir>
					set_target(NB_STEPS_STATUETTE);
 8000258:	f643 7082 	movw	r0, #16258	; 0x3f82
 800025c:	f000 fddc 	bl	8000e18 <set_target>
				break;
 8000260:	e00c      	b.n	800027c <go_position+0xb4>
					motor.pinDirState = 0;
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <go_position+0x10c>)
 8000264:	2200      	movs	r2, #0
 8000266:	621a      	str	r2, [r3, #32]
					motor_dir(&motor);
 8000268:	481a      	ldr	r0, [pc, #104]	; (80002d4 <go_position+0x10c>)
 800026a:	f000 fbd2 	bl	8000a12 <motor_dir>
					uint32_t nbSteps = NB_STEPS_AIMANT + NB_STEPS_STATUETTE;
 800026e:	f644 43d3 	movw	r3, #19667	; 0x4cd3
 8000272:	60bb      	str	r3, [r7, #8]
					set_target(nbSteps);
 8000274:	68b8      	ldr	r0, [r7, #8]
 8000276:	f000 fdcf 	bl	8000e18 <set_target>
				break;
 800027a:	bf00      	nop
			break;
 800027c:	e021      	b.n	80002c2 <go_position+0xfa>
				switch(pos){
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <go_position+0xc2>
 8000284:	2b01      	cmp	r3, #1
 8000286:	d00b      	beq.n	80002a0 <go_position+0xd8>
			break;
 8000288:	e01b      	b.n	80002c2 <go_position+0xfa>
					motor.pinDirState = 1;
 800028a:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <go_position+0x10c>)
 800028c:	2201      	movs	r2, #1
 800028e:	621a      	str	r2, [r3, #32]
					motor_dir(&motor);
 8000290:	4810      	ldr	r0, [pc, #64]	; (80002d4 <go_position+0x10c>)
 8000292:	f000 fbbe 	bl	8000a12 <motor_dir>
					set_target(NB_STEPS_AIMANT);
 8000296:	f640 5051 	movw	r0, #3409	; 0xd51
 800029a:	f000 fdbd 	bl	8000e18 <set_target>
				break;
 800029e:	e00c      	b.n	80002ba <go_position+0xf2>
					motor.pinDirState = 1;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <go_position+0x10c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	621a      	str	r2, [r3, #32]
					motor_dir(&motor);
 80002a6:	480b      	ldr	r0, [pc, #44]	; (80002d4 <go_position+0x10c>)
 80002a8:	f000 fbb3 	bl	8000a12 <motor_dir>
					uint32_t nbSteps = NB_STEPS_AIMANT + NB_STEPS_STATUETTE;
 80002ac:	f644 43d3 	movw	r3, #19667	; 0x4cd3
 80002b0:	60fb      	str	r3, [r7, #12]
					set_target(nbSteps);
 80002b2:	68f8      	ldr	r0, [r7, #12]
 80002b4:	f000 fdb0 	bl	8000e18 <set_target>
				break;
 80002b8:	bf00      	nop
			break;
 80002ba:	e002      	b.n	80002c2 <go_position+0xfa>
			}
		}
 80002bc:	bf00      	nop
 80002be:	e000      	b.n	80002c2 <go_position+0xfa>
			break;
 80002c0:	bf00      	nop
		set_next_position(pos);
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fd8b 	bl	8000de0 <set_next_position>
//		PENSER A DECOMMENTER
////////////////////////////////////////////////
//		motor.diviseur = 100;

	}
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000000 	.word	0x20000000

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fe0d 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f847 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 fa19 	bl	800071c <MX_GPIO_Init>
  MX_ADC1_Init();
 80002ea:	f000 f89b 	bl	8000424 <MX_ADC1_Init>
  MX_DMA_Init();
 80002ee:	f000 f9f7 	bl	80006e0 <MX_DMA_Init>
  MX_TIM2_Init();
 80002f2:	f000 f907 	bl	8000504 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002f6:	f000 f97b 	bl	80005f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	int i = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
///////////////////////////////////////////////////////////////////////
//		PENSER A DECOMMENTER DANS deplacementActionneur.c (ligne 79)
///////////////////////////////////////////////////////////////////////
//  vitesse moteur, plus le diviseur est grand plus la vitesse est petite
//  20mm/sec = 236
	motor.diviseur = 250;
 80002fe:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <main+0x98>)
 8000300:	22fa      	movs	r2, #250	; 0xfa
 8000302:	601a      	str	r2, [r3, #0]

	go_position(STATUETTE);
 8000304:	2001      	movs	r0, #1
 8000306:	f7ff ff5f 	bl	80001c8 <go_position>
	start_generate();
 800030a:	f000 fb1d 	bl	8000948 <start_generate>
	while(get_position()!=STATUETTE){
 800030e:	e001      	b.n	8000314 <main+0x3c>
		 i = 1;
 8000310:	2301      	movs	r3, #1
 8000312:	607b      	str	r3, [r7, #4]
	while(get_position()!=STATUETTE){
 8000314:	f000 fd3c 	bl	8000d90 <get_position>
 8000318:	4603      	mov	r3, r0
 800031a:	2b01      	cmp	r3, #1
 800031c:	d1f8      	bne.n	8000310 <main+0x38>
	}
	go_position(NEUTRE);
 800031e:	2000      	movs	r0, #0
 8000320:	f7ff ff52 	bl	80001c8 <go_position>
	start_generate();
 8000324:	f000 fb10 	bl	8000948 <start_generate>
	while(get_position()!=NEUTRE){
 8000328:	e001      	b.n	800032e <main+0x56>
		 i = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
	while(get_position()!=NEUTRE){
 800032e:	f000 fd2f 	bl	8000d90 <get_position>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f8      	bne.n	800032a <main+0x52>
	}
	go_position(AIMANT);
 8000338:	2002      	movs	r0, #2
 800033a:	f7ff ff45 	bl	80001c8 <go_position>
	start_generate();
 800033e:	f000 fb03 	bl	8000948 <start_generate>
	while(get_position()!=AIMANT){
 8000342:	e001      	b.n	8000348 <main+0x70>
		 i = 2;
 8000344:	2302      	movs	r3, #2
 8000346:	607b      	str	r3, [r7, #4]
	while(get_position()!=AIMANT){
 8000348:	f000 fd22 	bl	8000d90 <get_position>
 800034c:	4603      	mov	r3, r0
 800034e:	2b02      	cmp	r3, #2
 8000350:	d1f8      	bne.n	8000344 <main+0x6c>
	}
	go_position(STATUETTE);
 8000352:	2001      	movs	r0, #1
 8000354:	f7ff ff38 	bl	80001c8 <go_position>
	start_generate();
 8000358:	f000 faf6 	bl	8000948 <start_generate>
	while(get_position()!=STATUETTE){
 800035c:	e001      	b.n	8000362 <main+0x8a>
		 i = 1;
 800035e:	2301      	movs	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
	while(get_position()!=STATUETTE){
 8000362:	f000 fd15 	bl	8000d90 <get_position>
 8000366:	4603      	mov	r3, r0
 8000368:	2b01      	cmp	r3, #1
 800036a:	d1f8      	bne.n	800035e <main+0x86>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800036c:	e7fe      	b.n	800036c <main+0x94>
 800036e:	bf00      	nop
 8000370:	20000000 	.word	0x20000000

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b096      	sub	sp, #88	; 0x58
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800037e:	2228      	movs	r2, #40	; 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f004 fe80 	bl	8005088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	f107 031c 	add.w	r3, r7, #28
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
 80003a6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2310      	movs	r3, #16
 80003b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	2302      	movs	r3, #2
 80003b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b8:	2300      	movs	r3, #0
 80003ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 ffec 	bl	80023a4 <HAL_RCC_OscConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003d2:	f000 fa19 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d6:	230f      	movs	r3, #15
 80003d8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003da:	2300      	movs	r3, #0
 80003dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ea:	f107 031c 	add.w	r3, r7, #28
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f003 f815 	bl	8003420 <HAL_RCC_ClockConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003fc:	f000 fa04 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000408:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4618      	mov	r0, r3
 800040e:	f003 f9ed 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000418:	f000 f9f6 	bl	8000808 <Error_Handler>
  }
}
 800041c:	bf00      	nop
 800041e:	3758      	adds	r7, #88	; 0x58
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	; 0x28
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800042a:	f107 031c 	add.w	r3, r7, #28
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
 8000444:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000446:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000448:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800044c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000454:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <MX_ADC1_Init+0xdc>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000462:	2200      	movs	r2, #0
 8000464:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000468:	2200      	movs	r2, #0
 800046a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000470:	2200      	movs	r2, #0
 8000472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000474:	4b22      	ldr	r3, [pc, #136]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000476:	2201      	movs	r2, #1
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <MX_ADC1_Init+0xdc>)
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000480:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000482:	2201      	movs	r2, #1
 8000484:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000486:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000488:	2200      	movs	r2, #0
 800048a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000490:	2204      	movs	r2, #4
 8000492:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000494:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <MX_ADC1_Init+0xdc>)
 8000496:	2200      	movs	r2, #0
 8000498:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800049a:	4b19      	ldr	r3, [pc, #100]	; (8000500 <MX_ADC1_Init+0xdc>)
 800049c:	2200      	movs	r2, #0
 800049e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004a0:	4817      	ldr	r0, [pc, #92]	; (8000500 <MX_ADC1_Init+0xdc>)
 80004a2:	f000 fd91 	bl	8000fc8 <HAL_ADC_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004ac:	f000 f9ac 	bl	8000808 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004b4:	f107 031c 	add.w	r3, r7, #28
 80004b8:	4619      	mov	r1, r3
 80004ba:	4811      	ldr	r0, [pc, #68]	; (8000500 <MX_ADC1_Init+0xdc>)
 80004bc:	f001 f9d6 	bl	800186c <HAL_ADCEx_MultiModeConfigChannel>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004c6:	f000 f99f 	bl	8000808 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80004ca:	230b      	movs	r3, #11
 80004cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ce:	2301      	movs	r3, #1
 80004d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	; (8000500 <MX_ADC1_Init+0xdc>)
 80004e8:	f000 ff00 	bl	80012ec <HAL_ADC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004f2:	f000 f989 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	; 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200022dc 	.word	0x200022dc

08000504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <MX_TIM2_Init+0xe8>)
 8000538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_TIM2_Init+0xe8>)
 8000540:	2207      	movs	r2, #7
 8000542:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_TIM2_Init+0xe8>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_TIM2_Init+0xe8>)
 800054c:	2263      	movs	r2, #99	; 0x63
 800054e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_TIM2_Init+0xe8>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000556:	4b25      	ldr	r3, [pc, #148]	; (80005ec <MX_TIM2_Init+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800055c:	4823      	ldr	r0, [pc, #140]	; (80005ec <MX_TIM2_Init+0xe8>)
 800055e:	f003 fa6b 	bl	8003a38 <HAL_TIM_Base_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000568:	f000 f94e 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000576:	4619      	mov	r1, r3
 8000578:	481c      	ldr	r0, [pc, #112]	; (80005ec <MX_TIM2_Init+0xe8>)
 800057a:	f003 ff83 	bl	8004484 <HAL_TIM_ConfigClockSource>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000584:	f000 f940 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000588:	4818      	ldr	r0, [pc, #96]	; (80005ec <MX_TIM2_Init+0xe8>)
 800058a:	f003 fce7 	bl	8003f5c <HAL_TIM_PWM_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000594:	f000 f938 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	4619      	mov	r1, r3
 80005a6:	4811      	ldr	r0, [pc, #68]	; (80005ec <MX_TIM2_Init+0xe8>)
 80005a8:	f004 fcbe 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80005b2:	f000 f929 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b6:	2360      	movs	r3, #96	; 0x60
 80005b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	4619      	mov	r1, r3
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <MX_TIM2_Init+0xe8>)
 80005ce:	f003 fe45 	bl	800425c <HAL_TIM_PWM_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80005d8:	f000 f916 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <MX_TIM2_Init+0xe8>)
 80005de:	f000 faf1 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 80005e2:	bf00      	nop
 80005e4:	3738      	adds	r7, #56	; 0x38
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000232c 	.word	0x2000232c

080005f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_TIM3_Init+0xe8>)
 8000624:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <MX_TIM3_Init+0xec>)
 8000626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_TIM3_Init+0xe8>)
 800062a:	2207      	movs	r2, #7
 800062c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_TIM3_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_TIM3_Init+0xe8>)
 8000636:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800063a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_TIM3_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_TIM3_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000648:	4823      	ldr	r0, [pc, #140]	; (80006d8 <MX_TIM3_Init+0xe8>)
 800064a:	f003 f9f5 	bl	8003a38 <HAL_TIM_Base_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000654:	f000 f8d8 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800065e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000662:	4619      	mov	r1, r3
 8000664:	481c      	ldr	r0, [pc, #112]	; (80006d8 <MX_TIM3_Init+0xe8>)
 8000666:	f003 ff0d 	bl	8004484 <HAL_TIM_ConfigClockSource>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000670:	f000 f8ca 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <MX_TIM3_Init+0xe8>)
 8000676:	f003 fc71 	bl	8003f5c <HAL_TIM_PWM_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000680:	f000 f8c2 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_TIM3_Init+0xe8>)
 8000694:	f004 fc48 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800069e:	f000 f8b3 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a2:	2360      	movs	r3, #96	; 0x60
 80006a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 80006a6:	2314      	movs	r3, #20
 80006a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	220c      	movs	r2, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <MX_TIM3_Init+0xe8>)
 80006ba:	f003 fdcf 	bl	800425c <HAL_TIM_PWM_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80006c4:	f000 f8a0 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <MX_TIM3_Init+0xe8>)
 80006ca:	f000 fa7b 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 80006ce:	bf00      	nop
 80006d0:	3738      	adds	r7, #56	; 0x38
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20002378 	.word	0x20002378
 80006dc:	40000400 	.word	0x40000400

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x38>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x38>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x38>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200c      	movs	r0, #12
 8000704:	f001 fab9 	bl	8001c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000708:	200c      	movs	r0, #12
 800070a:	f001 fad2 	bl	8001cb2 <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b32      	ldr	r3, [pc, #200]	; (80007fc <MX_GPIO_Init+0xe0>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a31      	ldr	r2, [pc, #196]	; (80007fc <MX_GPIO_Init+0xe0>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_GPIO_Init+0xe0>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_GPIO_Init+0xe0>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a2b      	ldr	r2, [pc, #172]	; (80007fc <MX_GPIO_Init+0xe0>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <MX_GPIO_Init+0xe0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_GPIO_Init+0xe0>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a25      	ldr	r2, [pc, #148]	; (80007fc <MX_GPIO_Init+0xe0>)
 8000768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_GPIO_Init+0xe0>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MS2_Pin|MS1_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2103      	movs	r1, #3
 800077e:	4820      	ldr	r0, [pc, #128]	; (8000800 <MX_GPIO_Init+0xe4>)
 8000780:	f001 fdf8 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f001 fdf1 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(aimant_GPIO_Port, aimant_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2140      	movs	r1, #64	; 0x40
 8000796:	481b      	ldr	r0, [pc, #108]	; (8000804 <MX_GPIO_Init+0xe8>)
 8000798:	f001 fdec 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MS2_Pin MS1_Pin */
  GPIO_InitStruct.Pin = MS2_Pin|MS1_Pin;
 800079c:	2303      	movs	r3, #3
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_GPIO_Init+0xe4>)
 80007b4:	f001 fc6c 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = EN_Pin|DIR_Pin|STEP_Pin;
 80007b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d4:	f001 fc5c 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : aimant_Pin */
  GPIO_InitStruct.Pin = aimant_Pin;
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(aimant_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_GPIO_Init+0xe8>)
 80007f0:	f001 fc4e 	bl	8002090 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	48001400 	.word	0x48001400
 8000804:	48000400 	.word	0x48000400

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim2;

extern Motor_t motor;

//Fonctions
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if (htim==&htim2){ //condition d'interruption du timer X
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a48      	ldr	r2, [pc, #288]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	f040 8088 	bne.w	8000936 <HAL_TIM_PeriodElapsedCallback+0x122>
//		motor_step puis avance ou avance puis motor_step
		count_steps();
 8000826:	f000 fb13 	bl	8000e50 <count_steps>
		avance(&motor);
 800082a:	4846      	ldr	r0, [pc, #280]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800082c:	f000 f8ae 	bl	800098c <avance>
		motor_step(&motor);
 8000830:	4844      	ldr	r0, [pc, #272]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000832:	f000 f8dc 	bl	80009ee <motor_step>
		if (get_steps() == get_length()){
 8000836:	f000 fb19 	bl	8000e6c <get_steps>
 800083a:	4604      	mov	r4, r0
 800083c:	f000 fa6c 	bl	8000d18 <get_length>
 8000840:	4603      	mov	r3, r0
 8000842:	429c      	cmp	r4, r3
 8000844:	d102      	bne.n	800084c <HAL_TIM_PeriodElapsedCallback+0x38>
			set_deplacement_state(MAINTIENT);
 8000846:	2002      	movs	r0, #2
 8000848:	f000 fa92 	bl	8000d70 <set_deplacement_state>
		}
		if(get_steps_left() <= 0)
 800084c:	f000 fb1a 	bl	8000e84 <get_steps_left>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d119      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x76>
		{
			HAL_TIM_Base_Stop_DMA(&htim2);
 8000856:	483a      	ldr	r0, [pc, #232]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000858:	f003 f9d4 	bl	8003c04 <HAL_TIM_Base_Stop_DMA>
			HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_1);
 800085c:	2100      	movs	r1, #0
 800085e:	4838      	ldr	r0, [pc, #224]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000860:	f003 faee 	bl	8003e40 <HAL_TIM_OC_Stop>

			motor.pinStepState = RESET;
 8000864:	4b37      	ldr	r3, [pc, #220]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
			motor_step(&motor);
 800086a:	4836      	ldr	r0, [pc, #216]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800086c:	f000 f8bf 	bl	80009ee <motor_step>
		    motor.cnt = 0;
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
			set_deplacement_state(ARRET);
 8000876:	2000      	movs	r0, #0
 8000878:	f000 fa7a 	bl	8000d70 <set_deplacement_state>
			set_position(get_next_position());
 800087c:	f000 faa4 	bl	8000dc8 <get_next_position>
 8000880:	4603      	mov	r3, r0
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fa90 	bl	8000da8 <set_position>
				HAL_TIM_Base_Start_DMA(&htim2, (uint32_t *)&(get_r_arr()[offsetAddr]), get_length()-1);
				set_deplacement_state(DECELERATION);
			}
		}
	}
}
 8000888:	e055      	b.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x122>
		else if(get_target() < get_length() * 2)
 800088a:	f000 fab9 	bl	8000e00 <get_target>
 800088e:	4604      	mov	r4, r0
 8000890:	f000 fa42 	bl	8000d18 <get_length>
 8000894:	4603      	mov	r3, r0
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	429c      	cmp	r4, r3
 800089a:	d226      	bcs.n	80008ea <HAL_TIM_PeriodElapsedCallback+0xd6>
			if(get_steps() == get_steps_left())
 800089c:	f000 fae6 	bl	8000e6c <get_steps>
 80008a0:	4604      	mov	r4, r0
 80008a2:	f000 faef 	bl	8000e84 <get_steps_left>
 80008a6:	4603      	mov	r3, r0
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d144      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x122>
				uint32_t offsetAddr = LENGTH_ARR_MAX - (get_steps_left()-1);
 80008ac:	f000 faea 	bl	8000e84 <get_steps_left>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 80008b6:	3302      	adds	r3, #2
 80008b8:	60bb      	str	r3, [r7, #8]
				HAL_TIM_Base_Stop_DMA(&htim2);
 80008ba:	4821      	ldr	r0, [pc, #132]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008bc:	f003 f9a2 	bl	8003c04 <HAL_TIM_Base_Stop_DMA>
				HAL_TIM_Base_Start_DMA(&htim2, (uint32_t *)&(get_r_arr()[offsetAddr]), get_steps_left()-1);
 80008c0:	f000 fa40 	bl	8000d44 <get_r_arr>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	18d4      	adds	r4, r2, r3
 80008cc:	f000 fada 	bl	8000e84 <get_steps_left>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	3b01      	subs	r3, #1
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	4621      	mov	r1, r4
 80008dc:	4818      	ldr	r0, [pc, #96]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008de:	f003 f903 	bl	8003ae8 <HAL_TIM_Base_Start_DMA>
				set_deplacement_state(DECELERATION);
 80008e2:	2003      	movs	r0, #3
 80008e4:	f000 fa44 	bl	8000d70 <set_deplacement_state>
}
 80008e8:	e025      	b.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x122>
			if (get_length() == get_steps_left())
 80008ea:	f000 fa15 	bl	8000d18 <get_length>
 80008ee:	4604      	mov	r4, r0
 80008f0:	f000 fac8 	bl	8000e84 <get_steps_left>
 80008f4:	4603      	mov	r3, r0
 80008f6:	429c      	cmp	r4, r3
 80008f8:	d11d      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x122>
				uint32_t offsetAddr = LENGTH_ARR_MAX - (get_length()-1);
 80008fa:	f000 fa0d 	bl	8000d18 <get_length>
 80008fe:	4603      	mov	r3, r0
 8000900:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 8000904:	3302      	adds	r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
				HAL_TIM_Base_Stop_DMA(&htim2);
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800090a:	f003 f97b 	bl	8003c04 <HAL_TIM_Base_Stop_DMA>
				HAL_TIM_Base_Start_DMA(&htim2, (uint32_t *)&(get_r_arr()[offsetAddr]), get_length()-1);
 800090e:	f000 fa19 	bl	8000d44 <get_r_arr>
 8000912:	4602      	mov	r2, r0
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	18d4      	adds	r4, r2, r3
 800091a:	f000 f9fd 	bl	8000d18 <get_length>
 800091e:	4603      	mov	r3, r0
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	4621      	mov	r1, r4
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800092c:	f003 f8dc 	bl	8003ae8 <HAL_TIM_Base_Start_DMA>
				set_deplacement_state(DECELERATION);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 fa1d 	bl	8000d70 <set_deplacement_state>
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	bf00      	nop
 8000940:	2000232c 	.word	0x2000232c
 8000944:	20000000 	.word	0x20000000

08000948 <start_generate>:


void start_generate(void){
 8000948:	b598      	push	{r3, r4, r7, lr}
 800094a:	af00      	add	r7, sp, #0
    HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <start_generate+0x40>)
 8000950:	f003 f98a 	bl	8003c68 <HAL_TIM_OC_Start>
    HAL_TIM_Base_Start_DMA(&htim2, (uint32_t *)&(get_arr()[0]), get_length());
 8000954:	f000 f9ec 	bl	8000d30 <get_arr>
 8000958:	4604      	mov	r4, r0
 800095a:	f000 f9dd 	bl	8000d18 <get_length>
 800095e:	4603      	mov	r3, r0
 8000960:	b29b      	uxth	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4621      	mov	r1, r4
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <start_generate+0x40>)
 8000968:	f003 f8be 	bl	8003ae8 <HAL_TIM_Base_Start_DMA>
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <start_generate+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	68da      	ldr	r2, [r3, #12]
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <start_generate+0x40>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f042 0201 	orr.w	r2, r2, #1
 800097a:	60da      	str	r2, [r3, #12]
    set_deplacement_state(ACCELERATION);
 800097c:	2001      	movs	r0, #1
 800097e:	f000 f9f7 	bl	8000d70 <set_deplacement_state>
}
 8000982:	bf00      	nop
 8000984:	bd98      	pop	{r3, r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	2000232c 	.word	0x2000232c

0800098c <avance>:
    motor.cnt = 0;
	set_deplacement_state(ARRET);
	set_position(INCONNUE);
}

int avance(Motor_t *motor){
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	int err;
	if(motor->diviseur==0){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d105      	bne.n	80009a8 <avance+0x1c>
		motor->pinStepState = RESET;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
		err = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e01b      	b.n	80009e0 <avance+0x54>
	}
	else{
	    motor->cnt++;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	605a      	str	r2, [r3, #4]
	    motor->cnt %= motor->diviseur;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80009be:	fb01 f202 	mul.w	r2, r1, r2
 80009c2:	1a9a      	subs	r2, r3, r2
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
	    motor->pinStepState = motor->cnt == 0;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf0c      	ite	eq
 80009d0:	2301      	moveq	r3, #1
 80009d2:	2300      	movne	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	61da      	str	r2, [r3, #28]
	    err = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
	}
    return err;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <motor_step>:

void motor_step(Motor_t *motor){
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->PIN_STEP_TYPE, motor->PIN_STEP, motor->pinStepState);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6918      	ldr	r0, [r3, #16]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	8919      	ldrh	r1, [r3, #8]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	f001 fcb5 	bl	8002374 <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <motor_dir>:

void motor_dir(Motor_t *motor){
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->PIN_DIR_TYPE, motor->PIN_DIR, motor->pinDirState);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6958      	ldr	r0, [r3, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	8959      	ldrh	r1, [r3, #10]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	f001 fca3 	bl	8002374 <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x44>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6193      	str	r3, [r2, #24]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x44>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x44>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aa0:	d123      	bne.n	8000aea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_ADC_MspInit+0x74>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <HAL_ADC_MspInit+0x74>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_ADC_MspInit+0x74>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_ADC_MspInit+0x74>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_ADC_MspInit+0x74>)
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_ADC_MspInit+0x74>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <HAL_ADC_MspInit+0x78>)
 8000ae6:	f001 fad3 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b0c:	d13c      	bne.n	8000b88 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000b26:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b28:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <HAL_TIM_Base_MspInit+0xc0>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b2e:	2210      	movs	r2, #16
 8000b30:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b4c:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b5c:	f001 f8c3 	bl	8001ce6 <HAL_DMA_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000b66:	f7ff fe4f 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b6e:	621a      	str	r2, [r3, #32]
 8000b70:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	201c      	movs	r0, #28
 8000b7c:	f001 f87d 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b80:	201c      	movs	r0, #28
 8000b82:	f001 f896 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b86:	e010      	b.n	8000baa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <HAL_TIM_Base_MspInit+0xc4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d10b      	bne.n	8000baa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_TIM_Base_MspInit+0xb8>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	200023c4 	.word	0x200023c4
 8000bbc:	4002001c 	.word	0x4002001c
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be4:	d11d      	bne.n	8000c22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_TIM_MspPostInit+0xa8>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a20      	ldr	r2, [pc, #128]	; (8000c6c <HAL_TIM_MspPostInit+0xa8>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	6153      	str	r3, [r2, #20]
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_TIM_MspPostInit+0xa8>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f001 fa38 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c20:	e020      	b.n	8000c64 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_TIM_MspPostInit+0xac>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d11b      	bne.n	8000c64 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_TIM_MspPostInit+0xa8>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_TIM_MspPostInit+0xa8>)
 8000c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c36:	6153      	str	r3, [r2, #20]
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_TIM_MspPostInit+0xa8>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c54:	2302      	movs	r3, #2
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_TIM_MspPostInit+0xb0>)
 8000c60:	f001 fa16 	bl	8002090 <HAL_GPIO_Init>
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40000400 	.word	0x40000400
 8000c74:	48000400 	.word	0x48000400

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f960 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA1_Channel2_IRQHandler+0x10>)
 8000cd2:	f001 f8ec 	bl	8001eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200023c4 	.word	0x200023c4

08000ce0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM2_IRQHandler+0x10>)
 8000ce6:	f003 f99a 	bl	800401e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000232c 	.word	0x2000232c

08000cf4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <get_length>:
Deplacement_State_t deplacementState = ARRET;
Position_t position = NEUTRE;
Position_t nextPosition;


uint32_t get_length(void){
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	return length;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <get_length+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200022b4 	.word	0x200022b4

08000d30 <get_arr>:

void set_length(uint32_t l){
	length = l;
}

uint32_t* get_arr(void){
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	return arr;
 8000d34:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <get_arr+0x10>)
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	2000002c 	.word	0x2000002c

08000d44 <get_r_arr>:

uint32_t* get_r_arr(void){
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	return rArr;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <get_r_arr+0x10>)
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	20001170 	.word	0x20001170

08000d58 <get_deplacement_state>:

uint32_t get_tim_arr(void){
	return htim1.Instance->ARR;
}

Deplacement_State_t get_deplacement_state(void){
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	return deplacementState;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <get_deplacement_state+0x14>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20002414 	.word	0x20002414

08000d70 <set_deplacement_state>:

void set_deplacement_state(Deplacement_State_t state){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	deplacementState = state;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <set_deplacement_state+0x1c>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	7013      	strb	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20002414 	.word	0x20002414

08000d90 <get_position>:

Position_t get_position(void){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	return position;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <get_position+0x14>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20002415 	.word	0x20002415

08000da8 <set_position>:

void set_position(Deplacement_State_t pos){
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	position = pos;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <set_position+0x1c>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	7013      	strb	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20002415 	.word	0x20002415

08000dc8 <get_next_position>:

Position_t get_next_position(void){
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	return nextPosition;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <get_next_position+0x14>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20002416 	.word	0x20002416

08000de0 <set_next_position>:
void set_next_position(Deplacement_State_t pos){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	nextPosition = pos;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <set_next_position+0x1c>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	7013      	strb	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20002416 	.word	0x20002416

08000e00 <get_target>:

uint32_t get_target(void){
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	return target;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <get_target+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20002408 	.word	0x20002408

08000e18 <set_target>:

void set_target(uint32_t t){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	target = t;
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <set_target+0x1c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20002408 	.word	0x20002408

08000e38 <reset_steps>:

void reset_steps(void){
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	steps = 0;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <reset_steps+0x14>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	2000240c 	.word	0x2000240c

08000e50 <count_steps>:

void count_steps(void){
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	steps++;
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <count_steps+0x18>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <count_steps+0x18>)
 8000e5c:	6013      	str	r3, [r2, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	2000240c 	.word	0x2000240c

08000e6c <get_steps>:

uint32_t get_steps(void){
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	return steps;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <get_steps+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000240c 	.word	0x2000240c

08000e84 <get_steps_left>:

uint32_t get_steps_left(void){
 8000e84:	b598      	push	{r3, r4, r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	stepsLeft = get_target() - get_steps();
 8000e88:	f7ff ffba 	bl	8000e00 <get_target>
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	f7ff ffed 	bl	8000e6c <get_steps>
 8000e92:	4603      	mov	r3, r0
 8000e94:	1ae3      	subs	r3, r4, r3
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <get_steps_left+0x20>)
 8000e98:	6013      	str	r3, [r2, #0]
	return stepsLeft;
 8000e9a:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <get_steps_left+0x20>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd98      	pop	{r3, r4, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20002410 	.word	0x20002410

08000ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopForever+0xe>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopForever+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ed2:	f7ff ff0f 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f004 f8b3 	bl	8005040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eda:	f7ff f9fd 	bl	80002d8 <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	200022c0 	.word	0x200022c0
  ldr r2, =_sidata
 8000eec:	080050e8 	.word	0x080050e8
  ldr r2, =_sbss
 8000ef0:	200022c0 	.word	0x200022c0
  ldr r4, =_ebss
 8000ef4:	2000241c 	.word	0x2000241c

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>
	...

08000efc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x28>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 fea9 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fd8e 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40022000 	.word	0x40022000

08000f28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fec1 	bl	8001cce <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f64:	f000 fe89 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000028 	.word	0x20000028
 8000f80:	200022bc 	.word	0x200022bc
 8000f84:	200022b8 	.word	0x200022b8

08000f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200022bc 	.word	0x200022bc
 8000fac:	20002418 	.word	0x20002418

08000fb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20002418 	.word	0x20002418

08000fc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09a      	sub	sp, #104	; 0x68
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e172      	b.n	80012ce <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d176      	bne.n	80010e8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d152      	bne.n	80010a8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fd2f 	bl	8000a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d13b      	bne.n	80010a8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 fce1 	bl	80019f8 <ADC_Disable>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d12f      	bne.n	80010a8 <HAL_ADC_Init+0xe0>
 8001048:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800104c:	2b00      	cmp	r3, #0
 800104e:	d12b      	bne.n	80010a8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	f043 0202 	orr.w	r2, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001072:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001082:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001084:	4b94      	ldr	r3, [pc, #592]	; (80012d8 <HAL_ADC_Init+0x310>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a94      	ldr	r2, [pc, #592]	; (80012dc <HAL_ADC_Init+0x314>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9a      	lsrs	r2, r3, #18
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800109a:	e002      	b.n	80010a2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	3b01      	subs	r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f9      	bne.n	800109c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010c4:	d110      	bne.n	80010e8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f023 0312 	bic.w	r3, r3, #18
 80010ce:	f043 0210 	orr.w	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f040 80df 	bne.w	80012b4 <HAL_ADC_Init+0x2ec>
 80010f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 80da 	bne.w	80012b4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 80d2 	bne.w	80012b4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001118:	f043 0202 	orr.w	r2, r3, #2
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001120:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_ADC_Init+0x318>)
 8001122:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800112c:	d102      	bne.n	8001134 <HAL_ADC_Init+0x16c>
 800112e:	4b6d      	ldr	r3, [pc, #436]	; (80012e4 <HAL_ADC_Init+0x31c>)
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e002      	b.n	800113a <HAL_ADC_Init+0x172>
 8001134:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001138:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_ADC_Init+0x192>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_ADC_Init+0x192>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_ADC_Init+0x194>
 800115a:	2300      	movs	r3, #0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d11c      	bne.n	800119a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001160:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001162:	2b00      	cmp	r3, #0
 8001164:	d010      	beq.n	8001188 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d107      	bne.n	8001182 <HAL_ADC_Init+0x1ba>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_ADC_Init+0x1ba>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_ADC_Init+0x1bc>
 8001182:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001184:	2b00      	cmp	r3, #0
 8001186:	d108      	bne.n	800119a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	431a      	orrs	r2, r3
 8001196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001198:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7e5b      	ldrb	r3, [r3, #25]
 800119e:	035b      	lsls	r3, r3, #13
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011a4:	2a01      	cmp	r2, #1
 80011a6:	d002      	beq.n	80011ae <HAL_ADC_Init+0x1e6>
 80011a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ac:	e000      	b.n	80011b0 <HAL_ADC_Init+0x1e8>
 80011ae:	2200      	movs	r2, #0
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4313      	orrs	r3, r2
 80011be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011c0:	4313      	orrs	r3, r2
 80011c2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d11b      	bne.n	8001206 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7e5b      	ldrb	r3, [r3, #25]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	3b01      	subs	r3, #1
 80011dc:	045a      	lsls	r2, r3, #17
 80011de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011e0:	4313      	orrs	r3, r2
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	663b      	str	r3, [r7, #96]	; 0x60
 80011e8:	e00d      	b.n	8001206 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011f2:	f043 0220 	orr.w	r2, r3, #32
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f043 0201 	orr.w	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	2b01      	cmp	r3, #1
 800120c:	d007      	beq.n	800121e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	4313      	orrs	r3, r2
 8001218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800121a:	4313      	orrs	r3, r2
 800121c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b00      	cmp	r3, #0
 800122a:	d114      	bne.n	8001256 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800123a:	f023 0302 	bic.w	r3, r3, #2
 800123e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e1b      	ldrb	r3, [r3, #24]
 8001244:	039a      	lsls	r2, r3, #14
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4313      	orrs	r3, r2
 8001250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001252:	4313      	orrs	r3, r2
 8001254:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_ADC_Init+0x320>)
 800125e:	4013      	ands	r3, r2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001266:	430b      	orrs	r3, r1
 8001268:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10c      	bne.n	800128c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f023 010f 	bic.w	r1, r3, #15
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
 800128a:	e007      	b.n	800129c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 020f 	bic.w	r2, r2, #15
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f023 0303 	bic.w	r3, r3, #3
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
 80012b2:	e00a      	b.n	80012ca <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f023 0312 	bic.w	r3, r3, #18
 80012bc:	f043 0210 	orr.w	r2, r3, #16
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80012ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3768      	adds	r7, #104	; 0x68
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000028 	.word	0x20000028
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	50000300 	.word	0x50000300
 80012e4:	50000100 	.word	0x50000100
 80012e8:	fff0c007 	.word	0xfff0c007

080012ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b09b      	sub	sp, #108	; 0x6c
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_ConfigChannel+0x22>
 800130a:	2302      	movs	r3, #2
 800130c:	e2a4      	b.n	8001858 <HAL_ADC_ConfigChannel+0x56c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 8288 	bne.w	8001836 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b04      	cmp	r3, #4
 800132c:	d81c      	bhi.n	8001368 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	461a      	mov	r2, r3
 8001342:	231f      	movs	r3, #31
 8001344:	4093      	lsls	r3, r2
 8001346:	43db      	mvns	r3, r3
 8001348:	4019      	ands	r1, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa00 f203 	lsl.w	r2, r0, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
 8001366:	e063      	b.n	8001430 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b09      	cmp	r3, #9
 800136e:	d81e      	bhi.n	80013ae <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	3b1e      	subs	r3, #30
 8001384:	221f      	movs	r2, #31
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	4019      	ands	r1, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	3b1e      	subs	r3, #30
 80013a0:	fa00 f203 	lsl.w	r2, r0, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
 80013ac:	e040      	b.n	8001430 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b0e      	cmp	r3, #14
 80013b4:	d81e      	bhi.n	80013f4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	3b3c      	subs	r3, #60	; 0x3c
 80013ca:	221f      	movs	r2, #31
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	4019      	ands	r1, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	3b3c      	subs	r3, #60	; 0x3c
 80013e6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	639a      	str	r2, [r3, #56]	; 0x38
 80013f2:	e01d      	b.n	8001430 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	3b5a      	subs	r3, #90	; 0x5a
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	4019      	ands	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	3b5a      	subs	r3, #90	; 0x5a
 8001424:	fa00 f203 	lsl.w	r2, r0, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 80e5 	bne.w	800160a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b09      	cmp	r3, #9
 8001446:	d91c      	bls.n	8001482 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6999      	ldr	r1, [r3, #24]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	3b1e      	subs	r3, #30
 800145a:	2207      	movs	r2, #7
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	4019      	ands	r1, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6898      	ldr	r0, [r3, #8]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	3b1e      	subs	r3, #30
 8001474:	fa00 f203 	lsl.w	r2, r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	619a      	str	r2, [r3, #24]
 8001480:	e019      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6959      	ldr	r1, [r3, #20]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	2207      	movs	r2, #7
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4019      	ands	r1, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6898      	ldr	r0, [r3, #8]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	fa00 f203 	lsl.w	r2, r0, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d84f      	bhi.n	8001578 <HAL_ADC_ConfigChannel+0x28c>
 80014d8:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <HAL_ADC_ConfigChannel+0x1f4>)
 80014da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014de:	bf00      	nop
 80014e0:	080014f1 	.word	0x080014f1
 80014e4:	08001513 	.word	0x08001513
 80014e8:	08001535 	.word	0x08001535
 80014ec:	08001557 	.word	0x08001557
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014f6:	4b94      	ldr	r3, [pc, #592]	; (8001748 <HAL_ADC_ConfigChannel+0x45c>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	0691      	lsls	r1, r2, #26
 8001500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001502:	430a      	orrs	r2, r1
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800150e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001510:	e07e      	b.n	8001610 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001518:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_ADC_ConfigChannel+0x45c>)
 800151a:	4013      	ands	r3, r2
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	0691      	lsls	r1, r2, #26
 8001522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001524:	430a      	orrs	r2, r1
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001530:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001532:	e06d      	b.n	8001610 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800153a:	4b83      	ldr	r3, [pc, #524]	; (8001748 <HAL_ADC_ConfigChannel+0x45c>)
 800153c:	4013      	ands	r3, r2
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	0691      	lsls	r1, r2, #26
 8001544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001546:	430a      	orrs	r2, r1
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001552:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001554:	e05c      	b.n	8001610 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800155c:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <HAL_ADC_ConfigChannel+0x45c>)
 800155e:	4013      	ands	r3, r2
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	0691      	lsls	r1, r2, #26
 8001566:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001568:	430a      	orrs	r2, r1
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001574:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001576:	e04b      	b.n	8001610 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	069b      	lsls	r3, r3, #26
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800159a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	069b      	lsls	r3, r3, #26
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d107      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015be:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	069b      	lsls	r3, r3, #26
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d107      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015e2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	069b      	lsls	r3, r3, #26
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d10a      	bne.n	800160e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001606:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001608:	e001      	b.n	800160e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800160a:	bf00      	nop
 800160c:	e000      	b.n	8001610 <HAL_ADC_ConfigChannel+0x324>
      break;
 800160e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d108      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x344>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x344>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_ADC_ConfigChannel+0x346>
 8001630:	2300      	movs	r3, #0
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 810a 	bne.w	800184c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d00f      	beq.n	8001660 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	400a      	ands	r2, r1
 800165a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800165e:	e049      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	409a      	lsls	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b09      	cmp	r3, #9
 8001680:	d91c      	bls.n	80016bc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6999      	ldr	r1, [r3, #24]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	3b1b      	subs	r3, #27
 8001694:	2207      	movs	r2, #7
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	4019      	ands	r1, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6898      	ldr	r0, [r3, #8]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	3b1b      	subs	r3, #27
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	e01b      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6959      	ldr	r1, [r3, #20]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	2207      	movs	r2, #7
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4019      	ands	r1, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6898      	ldr	r0, [r3, #8]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_ADC_ConfigChannel+0x460>)
 80016f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	d105      	bne.n	800170c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001708:	2b00      	cmp	r3, #0
 800170a:	d015      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001710:	2b11      	cmp	r3, #17
 8001712:	d105      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001724:	2b12      	cmp	r3, #18
 8001726:	f040 8091 	bne.w	800184c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800172a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 808a 	bne.w	800184c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001740:	d108      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x468>
 8001742:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_ADC_ConfigChannel+0x464>)
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e008      	b.n	800175a <HAL_ADC_ConfigChannel+0x46e>
 8001748:	83fff000 	.word	0x83fff000
 800174c:	50000300 	.word	0x50000300
 8001750:	50000100 	.word	0x50000100
 8001754:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001758:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_ADC_ConfigChannel+0x48e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_ADC_ConfigChannel+0x48e>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_ADC_ConfigChannel+0x490>
 800177a:	2300      	movs	r3, #0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d150      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001780:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001782:	2b00      	cmp	r3, #0
 8001784:	d010      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x4b6>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x4b6>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x4b8>
 80017a2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d13c      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d11d      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x500>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b8:	d118      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_ADC_ConfigChannel+0x578>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a27      	ldr	r2, [pc, #156]	; (8001868 <HAL_ADC_ConfigChannel+0x57c>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9a      	lsrs	r2, r3, #18
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017dc:	e002      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f9      	bne.n	80017de <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ea:	e02e      	b.n	800184a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b11      	cmp	r3, #17
 80017f2:	d10b      	bne.n	800180c <HAL_ADC_ConfigChannel+0x520>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017fc:	d106      	bne.n	800180c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001808:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800180a:	e01e      	b.n	800184a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b12      	cmp	r3, #18
 8001812:	d11a      	bne.n	800184a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800181c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001820:	e013      	b.n	800184a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f043 0220 	orr.w	r2, r3, #32
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001834:	e00a      	b.n	800184c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f043 0220 	orr.w	r2, r3, #32
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001848:	e000      	b.n	800184c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800184a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001858:	4618      	mov	r0, r3
 800185a:	376c      	adds	r7, #108	; 0x6c
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20000028 	.word	0x20000028
 8001868:	431bde83 	.word	0x431bde83

0800186c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800186c:	b480      	push	{r7}
 800186e:	b099      	sub	sp, #100	; 0x64
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001884:	d102      	bne.n	800188c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001886:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	e002      	b.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800188c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001890:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0a2      	b.n	80019e2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e09b      	b.n	80019e2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d17f      	bne.n	80019c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d179      	bne.n	80019c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018cc:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80018ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d040      	beq.n	800195a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ea:	035b      	lsls	r3, r3, #13
 80018ec:	430b      	orrs	r3, r1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d15c      	bne.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001936:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	d14b      	bne.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800193c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	6811      	ldr	r1, [r2, #0]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	6892      	ldr	r2, [r2, #8]
 8001950:	430a      	orrs	r2, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001956:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001958:	e03c      	b.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800195a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001964:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d108      	bne.n	8001986 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001986:	2300      	movs	r3, #0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d123      	bne.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d107      	bne.n	80019a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80019a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d112      	bne.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80019ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80019b6:	f023 030f 	bic.w	r3, r3, #15
 80019ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019be:	e009      	b.n	80019d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80019d2:	e000      	b.n	80019d6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80019e2:	4618      	mov	r0, r3
 80019e4:	3764      	adds	r7, #100	; 0x64
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	50000100 	.word	0x50000100
 80019f4:	50000300 	.word	0x50000300

080019f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <ADC_Disable+0x2c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <ADC_Disable+0x2c>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <ADC_Disable+0x2e>
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d047      	beq.n	8001aba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030d 	and.w	r3, r3, #13
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d10f      	bne.n	8001a58 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0202 	orr.w	r2, r2, #2
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a50:	f7ff faae 	bl	8000fb0 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a56:	e029      	b.n	8001aac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f043 0210 	orr.w	r2, r3, #16
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e023      	b.n	8001abc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a74:	f7ff fa9c 	bl	8000fb0 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d914      	bls.n	8001aac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d10d      	bne.n	8001aac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f043 0210 	orr.w	r2, r3, #16
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e007      	b.n	8001abc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d0dc      	beq.n	8001a74 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c44:	f7ff ff8e 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff29 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff3e 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff8e 	bl	8001bb8 <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff31 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e037      	b.n	8001d6c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f97e 	bl	8002050 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}  
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_DMA_Start_IT+0x20>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e04a      	b.n	8001e2a <HAL_DMA_Start_IT+0xb6>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d13a      	bne.n	8001e1c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f912 	bl	8001ff4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 020e 	orr.w	r2, r2, #14
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 020a 	orr.w	r2, r2, #10
 8001df8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0204 	bic.w	r2, r2, #4
 8001e08:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e005      	b.n	8001e28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
 8001e26:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d005      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e027      	b.n	8001ea4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 020e 	bic.w	r2, r2, #14
 8001e62:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
    } 
  }
  return status;
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2204      	movs	r2, #4
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d024      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x72>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01f      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0204 	bic.w	r2, r2, #4
 8001efc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	2104      	movs	r1, #4
 8001f08:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d06a      	beq.n	8001fec <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f1e:	e065      	b.n	8001fec <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	2202      	movs	r2, #2
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d02c      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xdc>
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d027      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10b      	bne.n	8001f60 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 020a 	bic.w	r2, r2, #10
 8001f56:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	2102      	movs	r1, #2
 8001f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d035      	beq.n	8001fec <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f88:	e030      	b.n	8001fec <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	2208      	movs	r2, #8
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d028      	beq.n	8001fec <HAL_DMA_IRQHandler+0x13e>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 020e 	bic.w	r2, r2, #14
 8001fb2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
    }
  }
}  
 8001fea:	e7ff      	b.n	8001fec <HAL_DMA_IRQHandler+0x13e>
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d108      	bne.n	8002034 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002032:	e007      	b.n	8002044 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <DMA_CalcBaseAndBitshift+0x34>)
 8002060:	4413      	add	r3, r2
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <DMA_CalcBaseAndBitshift+0x38>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	009a      	lsls	r2, r3, #2
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a06      	ldr	r2, [pc, #24]	; (800208c <DMA_CalcBaseAndBitshift+0x3c>)
 8002074:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	bffdfff8 	.word	0xbffdfff8
 8002088:	cccccccd 	.word	0xcccccccd
 800208c:	40020000 	.word	0x40020000

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	e14e      	b.n	800233e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8140 	beq.w	8002338 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d005      	beq.n	80020d0 <HAL_GPIO_Init+0x40>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d130      	bne.n	8002132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002106:	2201      	movs	r2, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 0201 	and.w	r2, r3, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b03      	cmp	r3, #3
 800213c:	d017      	beq.n	800216e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d123      	bne.n	80021c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	6939      	ldr	r1, [r7, #16]
 80021be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0203 	and.w	r2, r3, #3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 809a 	beq.w	8002338 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002204:	4b55      	ldr	r3, [pc, #340]	; (800235c <HAL_GPIO_Init+0x2cc>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_GPIO_Init+0x2cc>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_GPIO_Init+0x2cc>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800221c:	4a50      	ldr	r2, [pc, #320]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002246:	d013      	beq.n	8002270 <HAL_GPIO_Init+0x1e0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a46      	ldr	r2, [pc, #280]	; (8002364 <HAL_GPIO_Init+0x2d4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00d      	beq.n	800226c <HAL_GPIO_Init+0x1dc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a45      	ldr	r2, [pc, #276]	; (8002368 <HAL_GPIO_Init+0x2d8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <HAL_GPIO_Init+0x1d8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a44      	ldr	r2, [pc, #272]	; (800236c <HAL_GPIO_Init+0x2dc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_GPIO_Init+0x1d4>
 8002260:	2303      	movs	r3, #3
 8002262:	e006      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 8002264:	2305      	movs	r3, #5
 8002266:	e004      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 8002268:	2302      	movs	r3, #2
 800226a:	e002      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 8002270:	2300      	movs	r3, #0
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002282:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002290:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022b4:	4a2e      	ldr	r2, [pc, #184]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022de:	4a24      	ldr	r2, [pc, #144]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002308:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002332:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f aea9 	bne.w	80020a0 <HAL_GPIO_Init+0x10>
  }
}
 800234e:	bf00      	nop
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	48000c00 	.word	0x48000c00
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002390:	e002      	b.n	8002398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f001 b823 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 817d 	beq.w	80026da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023e0:	4bbc      	ldr	r3, [pc, #752]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d00c      	beq.n	8002406 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ec:	4bb9      	ldr	r3, [pc, #740]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d15c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x10e>
 80023f8:	4bb6      	ldr	r3, [pc, #728]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d155      	bne.n	80024b2 <HAL_RCC_OscConfig+0x10e>
 8002406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800241a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_RCC_OscConfig+0x94>
 8002432:	4ba8      	ldr	r3, [pc, #672]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e015      	b.n	8002464 <HAL_RCC_OscConfig+0xc0>
 8002438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800244c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002450:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002454:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002460:	4b9c      	ldr	r3, [pc, #624]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002468:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800246c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002470:	fa92 f2a2 	rbit	r2, r2
 8002474:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002478:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f042 0220 	orr.w	r2, r2, #32
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f002 021f 	and.w	r2, r2, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 811f 	beq.w	80026d8 <HAL_RCC_OscConfig+0x334>
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 8116 	bne.w	80026d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f000 bfaf 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x12e>
 80024c4:	4b83      	ldr	r3, [pc, #524]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a82      	ldr	r2, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	e036      	b.n	8002540 <HAL_RCC_OscConfig+0x19c>
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x158>
 80024e2:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7b      	ldr	r2, [pc, #492]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b79      	ldr	r3, [pc, #484]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a78      	ldr	r2, [pc, #480]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80024f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e021      	b.n	8002540 <HAL_RCC_OscConfig+0x19c>
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x184>
 800250e:	4b71      	ldr	r3, [pc, #452]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a70      	ldr	r2, [pc, #448]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b6e      	ldr	r3, [pc, #440]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6d      	ldr	r2, [pc, #436]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x19c>
 8002528:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a69      	ldr	r2, [pc, #420]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a66      	ldr	r2, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002540:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f023 020f 	bic.w	r2, r3, #15
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	495f      	ldr	r1, [pc, #380]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 8002556:	4313      	orrs	r3, r2
 8002558:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d059      	beq.n	800261e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe fd21 	bl	8000fb0 <HAL_GetTick>
 800256e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	e00a      	b.n	800258a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fd1c 	bl	8000fb0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	; 0x64
 8002582:	d902      	bls.n	800258a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	f000 bf43 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>
 800258a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800259e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_RCC_OscConfig+0x218>
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	e015      	b.n	80025e8 <HAL_RCC_OscConfig+0x244>
 80025bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025f4:	fa92 f2a2 	rbit	r2, r2
 80025f8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002600:	fab2 f282 	clz	r2, r2
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f042 0220 	orr.w	r2, r2, #32
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f002 021f 	and.w	r2, r2, #31
 8002610:	2101      	movs	r1, #1
 8002612:	fa01 f202 	lsl.w	r2, r1, r2
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ab      	beq.n	8002574 <HAL_RCC_OscConfig+0x1d0>
 800261c:	e05d      	b.n	80026da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fcc7 	bl	8000fb0 <HAL_GetTick>
 8002622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fcc2 	bl	8000fb0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b64      	cmp	r3, #100	; 0x64
 8002636:	d902      	bls.n	800263e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	f000 bee9 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>
 800263e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002642:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002652:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0x2cc>
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	e015      	b.n	800269c <HAL_RCC_OscConfig+0x2f8>
 8002670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002674:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002688:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800268c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_RCC_OscConfig+0x330>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026a8:	fa92 f2a2 	rbit	r2, r2
 80026ac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026b4:	fab2 f282 	clz	r2, r2
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f042 0220 	orr.w	r2, r2, #32
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f002 021f 	and.w	r2, r2, #31
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ab      	bne.n	8002628 <HAL_RCC_OscConfig+0x284>
 80026d0:	e003      	b.n	80026da <HAL_RCC_OscConfig+0x336>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 817d 	beq.w	80029ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026f0:	4ba6      	ldr	r3, [pc, #664]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026fc:	4ba3      	ldr	r3, [pc, #652]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d172      	bne.n	80027ee <HAL_RCC_OscConfig+0x44a>
 8002708:	4ba0      	ldr	r3, [pc, #640]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d16c      	bne.n	80027ee <HAL_RCC_OscConfig+0x44a>
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002726:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0x3a0>
 800273e:	4b93      	ldr	r3, [pc, #588]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	e013      	b.n	800276c <HAL_RCC_OscConfig+0x3c8>
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800275c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002768:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2202      	movs	r2, #2
 800276e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002772:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002776:	fa92 f2a2 	rbit	r2, r2
 800277a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800277e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002782:	fab2 f282 	clz	r2, r2
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f042 0220 	orr.w	r2, r2, #32
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f002 021f 	and.w	r2, r2, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f202 	lsl.w	r2, r1, r2
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCC_OscConfig+0x410>
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f000 be2e 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b75      	ldr	r3, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	21f8      	movs	r1, #248	; 0xf8
 80027ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027d2:	fa91 f1a1 	rbit	r1, r1
 80027d6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027de:	fab1 f181 	clz	r1, r1
 80027e2:	b2c9      	uxtb	r1, r1
 80027e4:	408b      	lsls	r3, r1
 80027e6:	4969      	ldr	r1, [pc, #420]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ec:	e0fd      	b.n	80029ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8088 	beq.w	8002910 <HAL_RCC_OscConfig+0x56c>
 8002800:	2301      	movs	r3, #1
 8002802:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002812:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	461a      	mov	r2, r3
 8002828:	2301      	movs	r3, #1
 800282a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fbc0 	bl	8000fb0 <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe fbbb 	bl	8000fb0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d902      	bls.n	800284c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	f000 bde2 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>
 800284c:	2302      	movs	r3, #2
 800284e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800285e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_RCC_OscConfig+0x4d8>
 8002876:	4b45      	ldr	r3, [pc, #276]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	e013      	b.n	80028a4 <HAL_RCC_OscConfig+0x500>
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800288e:	2302      	movs	r3, #2
 8002890:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002894:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	2202      	movs	r2, #2
 80028a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028ae:	fa92 f2a2 	rbit	r2, r2
 80028b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028ba:	fab2 f282 	clz	r2, r2
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f042 0220 	orr.w	r2, r2, #32
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	f002 021f 	and.w	r2, r2, #31
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f202 	lsl.w	r2, r1, r2
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0af      	beq.n	8002836 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	21f8      	movs	r1, #248	; 0xf8
 80028ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028f4:	fa91 f1a1 	rbit	r1, r1
 80028f8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002900:	fab1 f181 	clz	r1, r1
 8002904:	b2c9      	uxtb	r1, r1
 8002906:	408b      	lsls	r3, r1
 8002908:	4920      	ldr	r1, [pc, #128]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
 800290e:	e06c      	b.n	80029ea <HAL_RCC_OscConfig+0x646>
 8002910:	2301      	movs	r3, #1
 8002912:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002922:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002930:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	461a      	mov	r2, r3
 8002938:	2300      	movs	r3, #0
 800293a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fb38 	bl	8000fb0 <HAL_GetTick>
 8002940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fb33 	bl	8000fb0 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d902      	bls.n	800295c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	f000 bd5a 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>
 800295c:	2302      	movs	r3, #2
 800295e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800296e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d104      	bne.n	8002990 <HAL_RCC_OscConfig+0x5ec>
 8002986:	4b01      	ldr	r3, [pc, #4]	; (800298c <HAL_RCC_OscConfig+0x5e8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	e015      	b.n	80029b8 <HAL_RCC_OscConfig+0x614>
 800298c:	40021000 	.word	0x40021000
 8002990:	2302      	movs	r3, #2
 8002992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029a2:	2302      	movs	r3, #2
 80029a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029b4:	4bc8      	ldr	r3, [pc, #800]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2202      	movs	r2, #2
 80029ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029c2:	fa92 f2a2 	rbit	r2, r2
 80029c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029ce:	fab2 f282 	clz	r2, r2
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f002 021f 	and.w	r2, r2, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ad      	bne.n	8002946 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8110 	beq.w	8002c20 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d079      	beq.n	8002b04 <HAL_RCC_OscConfig+0x760>
 8002a10:	2301      	movs	r3, #1
 8002a12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4bab      	ldr	r3, [pc, #684]	; (8002cdc <HAL_RCC_OscConfig+0x938>)
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	461a      	mov	r2, r3
 8002a36:	2301      	movs	r3, #1
 8002a38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fab9 	bl	8000fb0 <HAL_GetTick>
 8002a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe fab4 	bl	8000fb0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d902      	bls.n	8002a5a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	f000 bcdb 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a74:	2202      	movs	r2, #2
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f2a3 	rbit	r2, r3
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a98:	2202      	movs	r2, #2
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	fa93 f2a3 	rbit	r2, r3
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ab2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab4:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 8002ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	6019      	str	r1, [r3, #0]
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	fa93 f1a3 	rbit	r1, r3
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ada:	6019      	str	r1, [r3, #0]
  return result;
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0a0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x6a0>
 8002b02:	e08d      	b.n	8002c20 <HAL_RCC_OscConfig+0x87c>
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b26:	601a      	str	r2, [r3, #0]
  return result;
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x938>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	461a      	mov	r2, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b46:	f7fe fa33 	bl	8000fb0 <HAL_GetTick>
 8002b4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b50:	f7fe fa2e 	bl	8000fb0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d902      	bls.n	8002b66 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	f000 bc55 	b.w	8003410 <HAL_RCC_OscConfig+0x106c>
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b6e:	2202      	movs	r2, #2
 8002b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	fa93 f2a3 	rbit	r2, r3
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b92:	2202      	movs	r2, #2
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	fa93 f2a3 	rbit	r2, r3
 8002ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	fa93 f2a3 	rbit	r2, r3
 8002bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bcc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 8002bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bde:	2102      	movs	r1, #2
 8002be0:	6019      	str	r1, [r3, #0]
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	fa93 f1a3 	rbit	r1, r3
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bf8:	6019      	str	r1, [r3, #0]
  return result;
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d197      	bne.n	8002b50 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 81a1 	beq.w	8002f78 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d116      	bne.n	8002c76 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a22      	ldr	r2, [pc, #136]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c52:	61d3      	str	r3, [r2, #28]
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c6e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_RCC_OscConfig+0x93c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11a      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_RCC_OscConfig+0x93c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_RCC_OscConfig+0x93c>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe f98f 	bl	8000fb0 <HAL_GetTick>
 8002c92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	e009      	b.n	8002cac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c98:	f7fe f98a 	bl	8000fb0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b64      	cmp	r3, #100	; 0x64
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e3b1      	b.n	8003410 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_RCC_OscConfig+0x93c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ef      	beq.n	8002c98 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x940>
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a02      	ldr	r2, [pc, #8]	; (8002cd8 <HAL_RCC_OscConfig+0x934>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	e03c      	b.n	8002d50 <HAL_RCC_OscConfig+0x9ac>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	10908120 	.word	0x10908120
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCC_OscConfig+0x96a>
 8002cf4:	4bc1      	ldr	r3, [pc, #772]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4ac0      	ldr	r2, [pc, #768]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	4bbe      	ldr	r3, [pc, #760]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4abd      	ldr	r2, [pc, #756]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d06:	f023 0304 	bic.w	r3, r3, #4
 8002d0a:	6213      	str	r3, [r2, #32]
 8002d0c:	e020      	b.n	8002d50 <HAL_RCC_OscConfig+0x9ac>
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x994>
 8002d1e:	4bb7      	ldr	r3, [pc, #732]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4ab6      	ldr	r2, [pc, #728]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	4bb4      	ldr	r3, [pc, #720]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4ab3      	ldr	r2, [pc, #716]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0x9ac>
 8002d38:	4bb0      	ldr	r3, [pc, #704]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4aaf      	ldr	r2, [pc, #700]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6213      	str	r3, [r2, #32]
 8002d44:	4bad      	ldr	r3, [pc, #692]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4aac      	ldr	r2, [pc, #688]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002d4a:	f023 0304 	bic.w	r3, r3, #4
 8002d4e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8081 	beq.w	8002e64 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe f925 	bl	8000fb0 <HAL_GetTick>
 8002d66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe f920 	bl	8000fb0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e345      	b.n	8003410 <HAL_RCC_OscConfig+0x106c>
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002db0:	2202      	movs	r2, #2
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dca:	601a      	str	r2, [r3, #0]
  return result;
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dd4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_OscConfig+0xa4c>
 8002dea:	4b84      	ldr	r3, [pc, #528]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	e013      	b.n	8002e18 <HAL_RCC_OscConfig+0xa74>
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002df8:	2202      	movs	r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e1c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e20:	2102      	movs	r1, #2
 8002e22:	6011      	str	r1, [r2, #0]
 8002e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e28:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	fa92 f1a2 	rbit	r1, r2
 8002e32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e3a:	6011      	str	r1, [r2, #0]
  return result;
 8002e3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e40:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	fab2 f282 	clz	r2, r2
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f002 021f 	and.w	r2, r2, #31
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d084      	beq.n	8002d6c <HAL_RCC_OscConfig+0x9c8>
 8002e62:	e07f      	b.n	8002f64 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fe f8a4 	bl	8000fb0 <HAL_GetTick>
 8002e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe f89f 	bl	8000fb0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e2c4      	b.n	8003410 <HAL_RCC_OscConfig+0x106c>
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e8e:	2202      	movs	r2, #2
 8002e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	fa93 f2a3 	rbit	r2, r3
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fa93 f2a3 	rbit	r2, r3
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ecc:	601a      	str	r2, [r3, #0]
  return result;
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ed6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f043 0302 	orr.w	r3, r3, #2
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d102      	bne.n	8002ef2 <HAL_RCC_OscConfig+0xb4e>
 8002eec:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	e013      	b.n	8002f1a <HAL_RCC_OscConfig+0xb76>
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f22:	2102      	movs	r1, #2
 8002f24:	6011      	str	r1, [r2, #0]
 8002f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	fa92 f1a2 	rbit	r1, r2
 8002f34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f3c:	6011      	str	r1, [r2, #0]
  return result;
 8002f3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f42:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	fab2 f282 	clz	r2, r2
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	f002 021f 	and.w	r2, r2, #31
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d184      	bne.n	8002e6e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f64:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f76:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8242 	beq.w	800340e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_RCC_OscConfig+0xc58>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	f000 8213 	beq.w	80033be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	f040 8162 	bne.w	800326e <HAL_RCC_OscConfig+0xeca>
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fce:	601a      	str	r2, [r3, #0]
  return result;
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fd8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	461a      	mov	r2, r3
 8002fec:	2300      	movs	r3, #0
 8002fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fd ffde 	bl	8000fb0 <HAL_GetTick>
 8002ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	e00c      	b.n	8003014 <HAL_RCC_OscConfig+0xc70>
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fd ffd6 	bl	8000fb0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1fd      	b.n	8003410 <HAL_RCC_OscConfig+0x106c>
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800301c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	fa93 f2a3 	rbit	r2, r3
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003038:	601a      	str	r2, [r3, #0]
  return result;
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003042:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <HAL_RCC_OscConfig+0xcba>
 8003058:	4bb0      	ldr	r3, [pc, #704]	; (800331c <HAL_RCC_OscConfig+0xf78>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	e027      	b.n	80030ae <HAL_RCC_OscConfig+0xd0a>
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003088:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800308c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	4b9c      	ldr	r3, [pc, #624]	; (800331c <HAL_RCC_OscConfig+0xf78>)
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030ba:	6011      	str	r1, [r2, #0]
 80030bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	fa92 f1a2 	rbit	r1, r2
 80030ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030d2:	6011      	str	r1, [r2, #0]
  return result;
 80030d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0220 	orr.w	r2, r2, #32
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d182      	bne.n	8003000 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fa:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0xf78>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	430b      	orrs	r3, r1
 800311c:	497f      	ldr	r1, [pc, #508]	; (800331c <HAL_RCC_OscConfig+0xf78>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800312a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800312e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003146:	601a      	str	r2, [r3, #0]
  return result;
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003150:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800315c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	461a      	mov	r2, r3
 8003164:	2301      	movs	r3, #1
 8003166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fd ff22 	bl	8000fb0 <HAL_GetTick>
 800316c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003170:	e009      	b.n	8003186 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003172:	f7fd ff1d 	bl	8000fb0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e144      	b.n	8003410 <HAL_RCC_OscConfig+0x106c>
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800318e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	fa93 f2a3 	rbit	r2, r3
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031aa:	601a      	str	r2, [r3, #0]
  return result;
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_OscConfig+0xe2c>
 80031ca:	4b54      	ldr	r3, [pc, #336]	; (800331c <HAL_RCC_OscConfig+0xf78>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e027      	b.n	8003220 <HAL_RCC_OscConfig+0xe7c>
 80031d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	fa93 f2a3 	rbit	r2, r3
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fa93 f2a3 	rbit	r2, r3
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	4b3f      	ldr	r3, [pc, #252]	; (800331c <HAL_RCC_OscConfig+0xf78>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003224:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003228:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800322c:	6011      	str	r1, [r2, #0]
 800322e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003232:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	fa92 f1a2 	rbit	r1, r2
 800323c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003240:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003244:	6011      	str	r1, [r2, #0]
  return result;
 8003246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800324a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	fab2 f282 	clz	r2, r2
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	f042 0220 	orr.w	r2, r2, #32
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f002 021f 	and.w	r2, r2, #31
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f202 	lsl.w	r2, r1, r2
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d082      	beq.n	8003172 <HAL_RCC_OscConfig+0xdce>
 800326c:	e0cf      	b.n	800340e <HAL_RCC_OscConfig+0x106a>
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003276:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800327a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	fa93 f2a3 	rbit	r2, r3
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003292:	601a      	str	r2, [r3, #0]
  return result;
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800329c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	461a      	mov	r2, r3
 80032b0:	2300      	movs	r3, #0
 80032b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fd fe7c 	bl	8000fb0 <HAL_GetTick>
 80032b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032bc:	e009      	b.n	80032d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032be:	f7fd fe77 	bl	8000fb0 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e09e      	b.n	8003410 <HAL_RCC_OscConfig+0x106c>
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	fa93 f2a3 	rbit	r2, r3
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032f6:	601a      	str	r2, [r3, #0]
  return result;
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003300:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d104      	bne.n	8003320 <HAL_RCC_OscConfig+0xf7c>
 8003316:	4b01      	ldr	r3, [pc, #4]	; (800331c <HAL_RCC_OscConfig+0xf78>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	e029      	b.n	8003370 <HAL_RCC_OscConfig+0xfcc>
 800331c:	40021000 	.word	0x40021000
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800332c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	fa93 f2a3 	rbit	r2, r3
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800334e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003358:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	fa93 f2a3 	rbit	r2, r3
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_OscConfig+0x1078>)
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003374:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800337c:	6011      	str	r1, [r2, #0]
 800337e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003382:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	fa92 f1a2 	rbit	r1, r2
 800338c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003390:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003394:	6011      	str	r1, [r2, #0]
  return result;
 8003396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800339a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	fab2 f282 	clz	r2, r2
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	f042 0220 	orr.w	r2, r2, #32
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f002 021f 	and.w	r2, r2, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f202 	lsl.w	r2, r1, r2
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d180      	bne.n	80032be <HAL_RCC_OscConfig+0xf1a>
 80033bc:	e027      	b.n	800340e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01e      	b.n	8003410 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x1078>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d10b      	bne.n	800340a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003406:	429a      	cmp	r2, r3
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000

08003420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b09e      	sub	sp, #120	; 0x78
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e162      	b.n	80036fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b90      	ldr	r3, [pc, #576]	; (800367c <HAL_RCC_ClockConfig+0x25c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b8d      	ldr	r3, [pc, #564]	; (800367c <HAL_RCC_ClockConfig+0x25c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	498b      	ldr	r1, [pc, #556]	; (800367c <HAL_RCC_ClockConfig+0x25c>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b89      	ldr	r3, [pc, #548]	; (800367c <HAL_RCC_ClockConfig+0x25c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e14a      	b.n	80036fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4b82      	ldr	r3, [pc, #520]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	497f      	ldr	r1, [pc, #508]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80dc 	beq.w	800364c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d13c      	bne.n	8003516 <HAL_RCC_ClockConfig+0xf6>
 800349c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xa6>
 80034c0:	4b6f      	ldr	r3, [pc, #444]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	e00f      	b.n	80034e6 <HAL_RCC_ClockConfig+0xc6>
 80034c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	667b      	str	r3, [r7, #100]	; 0x64
 80034d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d8:	663b      	str	r3, [r7, #96]	; 0x60
 80034da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e2:	4b67      	ldr	r3, [pc, #412]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80034ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034ee:	fa92 f2a2 	rbit	r2, r2
 80034f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034f6:	fab2 f282 	clz	r2, r2
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	f042 0220 	orr.w	r2, r2, #32
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f002 021f 	and.w	r2, r2, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d17b      	bne.n	800360a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0f3      	b.n	80036fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d13c      	bne.n	8003598 <HAL_RCC_ClockConfig+0x178>
 800351e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003522:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800352c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_RCC_ClockConfig+0x128>
 8003542:	4b4f      	ldr	r3, [pc, #316]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	e00f      	b.n	8003568 <HAL_RCC_ClockConfig+0x148>
 8003548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	647b      	str	r3, [r7, #68]	; 0x44
 8003556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800355a:	643b      	str	r3, [r7, #64]	; 0x40
 800355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003564:	4b46      	ldr	r3, [pc, #280]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356c:	63ba      	str	r2, [r7, #56]	; 0x38
 800356e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003570:	fa92 f2a2 	rbit	r2, r2
 8003574:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f042 0220 	orr.w	r2, r2, #32
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f002 021f 	and.w	r2, r2, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d13a      	bne.n	800360a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b2      	b.n	80036fe <HAL_RCC_ClockConfig+0x2de>
 8003598:	2302      	movs	r3, #2
 800359a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x1a0>
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	e00d      	b.n	80035dc <HAL_RCC_ClockConfig+0x1bc>
 80035c0:	2302      	movs	r3, #2
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
 80035cc:	2302      	movs	r3, #2
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2202      	movs	r2, #2
 80035de:	61ba      	str	r2, [r7, #24]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	fa92 f2a2 	rbit	r2, r2
 80035e6:	617a      	str	r2, [r7, #20]
  return result;
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	fab2 f282 	clz	r2, r2
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f042 0220 	orr.w	r2, r2, #32
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f002 021f 	and.w	r2, r2, #31
 80035fa:	2101      	movs	r1, #1
 80035fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e079      	b.n	80036fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	491a      	ldr	r1, [pc, #104]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800361c:	f7fd fcc8 	bl	8000fb0 <HAL_GetTick>
 8003620:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fd fcc4 	bl	8000fb0 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e061      	b.n	80036fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_RCC_ClockConfig+0x260>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 020c 	and.w	r2, r3, #12
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	429a      	cmp	r2, r3
 800364a:	d1eb      	bne.n	8003624 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_ClockConfig+0x25c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d214      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_RCC_ClockConfig+0x25c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 0207 	bic.w	r2, r3, #7
 8003662:	4906      	ldr	r1, [pc, #24]	; (800367c <HAL_RCC_ClockConfig+0x25c>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_RCC_ClockConfig+0x25c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e040      	b.n	80036fe <HAL_RCC_ClockConfig+0x2de>
 800367c:	40022000 	.word	0x40022000
 8003680:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <HAL_RCC_ClockConfig+0x2e8>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	491a      	ldr	r1, [pc, #104]	; (8003708 <HAL_RCC_ClockConfig+0x2e8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_RCC_ClockConfig+0x2e8>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4912      	ldr	r1, [pc, #72]	; (8003708 <HAL_RCC_ClockConfig+0x2e8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036c2:	f000 f829 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036c6:	4601      	mov	r1, r0
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <HAL_RCC_ClockConfig+0x2e8>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d0:	22f0      	movs	r2, #240	; 0xf0
 80036d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	fa92 f2a2 	rbit	r2, r2
 80036da:	60fa      	str	r2, [r7, #12]
  return result;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	fab2 f282 	clz	r2, r2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	40d3      	lsrs	r3, r2
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x2ec>)
 80036e8:	5cd3      	ldrb	r3, [r2, r3]
 80036ea:	fa21 f303 	lsr.w	r3, r1, r3
 80036ee:	4a08      	ldr	r2, [pc, #32]	; (8003710 <HAL_RCC_ClockConfig+0x2f0>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_RCC_ClockConfig+0x2f4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fc16 	bl	8000f28 <HAL_InitTick>
  
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3778      	adds	r7, #120	; 0x78
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	080050b0 	.word	0x080050b0
 8003710:	20000028 	.word	0x20000028
 8003714:	200022b8 	.word	0x200022b8

08003718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b08b      	sub	sp, #44	; 0x2c
 800371c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x30>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x36>
 8003746:	e03c      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800374a:	623b      	str	r3, [r7, #32]
      break;
 800374c:	e03c      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003754:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003758:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	fa92 f2a2 	rbit	r2, r2
 8003760:	607a      	str	r2, [r7, #4]
  return result;
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	fab2 f282 	clz	r2, r2
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	40d3      	lsrs	r3, r2
 800376c:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800376e:	5cd3      	ldrb	r3, [r2, r3]
 8003770:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	220f      	movs	r2, #15
 800377c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	fa92 f2a2 	rbit	r2, r2
 8003784:	60fa      	str	r2, [r7, #12]
  return result;
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	40d3      	lsrs	r3, r2
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003792:	5cd3      	ldrb	r3, [r2, r3]
 8003794:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a0:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	e004      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	623b      	str	r3, [r7, #32]
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80037c4:	623b      	str	r3, [r7, #32]
      break;
 80037c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037c8:	6a3b      	ldr	r3, [r7, #32]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	372c      	adds	r7, #44	; 0x2c
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
 80037dc:	007a1200 	.word	0x007a1200
 80037e0:	080050c0 	.word	0x080050c0
 80037e4:	080050d0 	.word	0x080050d0
 80037e8:	003d0900 	.word	0x003d0900

080037ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b092      	sub	sp, #72	; 0x48
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80cd 	beq.w	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003810:	4b86      	ldr	r3, [pc, #536]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10e      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381c:	4b83      	ldr	r3, [pc, #524]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4a82      	ldr	r2, [pc, #520]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003826:	61d3      	str	r3, [r2, #28]
 8003828:	4b80      	ldr	r3, [pc, #512]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b7d      	ldr	r3, [pc, #500]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d118      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003846:	4b7a      	ldr	r3, [pc, #488]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a79      	ldr	r2, [pc, #484]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003850:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003852:	f7fd fbad 	bl	8000fb0 <HAL_GetTick>
 8003856:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	e008      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385a:	f7fd fba9 	bl	8000fb0 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	; 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e0db      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003878:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003880:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d07d      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003892:	429a      	cmp	r2, r3
 8003894:	d076      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	461a      	mov	r2, r3
 80038c0:	2301      	movs	r3, #1
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	4b55      	ldr	r3, [pc, #340]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	461a      	mov	r2, r3
 80038e4:	2300      	movs	r3, #0
 80038e6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038e8:	4a50      	ldr	r2, [pc, #320]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ec:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d045      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd fb5a 	bl	8000fb0 <HAL_GetTick>
 80038fc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fd fb56 	bl	8000fb0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e086      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003916:	2302      	movs	r3, #2
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
 8003922:	2302      	movs	r3, #2
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	61fb      	str	r3, [r7, #28]
  return result;
 800392e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f043 0302 	orr.w	r3, r3, #2
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d102      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003944:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	e007      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800394a:	2302      	movs	r3, #2
 800394c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	4b35      	ldr	r3, [pc, #212]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2202      	movs	r2, #2
 800395c:	613a      	str	r2, [r7, #16]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	fa92 f2a2 	rbit	r2, r2
 8003964:	60fa      	str	r2, [r7, #12]
  return result;
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	fab2 f282 	clz	r2, r2
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	f002 021f 	and.w	r2, r2, #31
 8003978:	2101      	movs	r1, #1
 800397a:	fa01 f202 	lsl.w	r2, r1, r2
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0bd      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4926      	ldr	r1, [pc, #152]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003992:	4313      	orrs	r3, r2
 8003994:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003996:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399e:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	491a      	ldr	r1, [pc, #104]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f023 0210 	bic.w	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4912      	ldr	r1, [pc, #72]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	490b      	ldr	r1, [pc, #44]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	4903      	ldr	r1, [pc, #12]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3748      	adds	r7, #72	; 0x48
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40007000 	.word	0x40007000
 8003a34:	10908100 	.word	0x10908100

08003a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e049      	b.n	8003ade <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd f84c 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f000 fe78 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
 8003b04:	e06c      	b.n	8003be0 <HAL_TIM_Base_Start_DMA+0xf8>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d125      	bne.n	8003b5e <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) && (Length > 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_Base_Start_DMA+0x3a>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e05e      	b.n	8003be0 <HAL_TIM_Base_Start_DMA+0xf8>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2202      	movs	r2, #2
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a2e      	ldr	r2, [pc, #184]	; (8003be8 <HAL_TIM_Base_Start_DMA+0x100>)
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	4a2d      	ldr	r2, [pc, #180]	; (8003bec <HAL_TIM_Base_Start_DMA+0x104>)
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a2c      	ldr	r2, [pc, #176]	; (8003bf0 <HAL_TIM_Base_Start_DMA+0x108>)
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a18      	ldr	r0, [r3, #32]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	332c      	adds	r3, #44	; 0x2c
 8003b4e:	461a      	mov	r2, r3
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	f7fe f90f 	bl	8001d74 <HAL_DMA_Start_IT>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_TIM_Base_Start_DMA+0x7e>
 8003b5c:	e001      	b.n	8003b62 <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e03e      	b.n	8003be0 <HAL_TIM_Base_Start_DMA+0xf8>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e03c      	b.n	8003be0 <HAL_TIM_Base_Start_DMA+0xf8>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <HAL_TIM_Base_Start_DMA+0x10c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_TIM_Base_Start_DMA+0xb6>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b88:	d009      	beq.n	8003b9e <HAL_TIM_Base_Start_DMA+0xb6>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_TIM_Base_Start_DMA+0x110>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_TIM_Base_Start_DMA+0xb6>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <HAL_TIM_Base_Start_DMA+0x114>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d115      	bne.n	8003bca <HAL_TIM_Base_Start_DMA+0xe2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <HAL_TIM_Base_Start_DMA+0x118>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b06      	cmp	r3, #6
 8003bae:	d015      	beq.n	8003bdc <HAL_TIM_Base_Start_DMA+0xf4>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb6:	d011      	beq.n	8003bdc <HAL_TIM_Base_Start_DMA+0xf4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc8:	e008      	b.n	8003bdc <HAL_TIM_Base_Start_DMA+0xf4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e000      	b.n	8003bde <HAL_TIM_Base_Start_DMA+0xf6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	08004721 	.word	0x08004721
 8003bec:	0800474f 	.word	0x0800474f
 8003bf0:	0800468f 	.word	0x0800468f
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	00010007 	.word	0x00010007

08003c04 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c1a:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe f906 	bl	8001e32 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10f      	bne.n	8003c56 <HAL_TIM_Base_Stop_DMA+0x52>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6a1a      	ldr	r2, [r3, #32]
 8003c3c:	f240 4344 	movw	r3, #1092	; 0x444
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_Base_Stop_DMA+0x52>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_TIM_OC_Start+0x24>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e03c      	b.n	8003d06 <HAL_TIM_OC_Start+0x9e>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d109      	bne.n	8003ca6 <HAL_TIM_OC_Start+0x3e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e02f      	b.n	8003d06 <HAL_TIM_OC_Start+0x9e>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d109      	bne.n	8003cc0 <HAL_TIM_OC_Start+0x58>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	bf14      	ite	ne
 8003cb8:	2301      	movne	r3, #1
 8003cba:	2300      	moveq	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e022      	b.n	8003d06 <HAL_TIM_OC_Start+0x9e>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d109      	bne.n	8003cda <HAL_TIM_OC_Start+0x72>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e015      	b.n	8003d06 <HAL_TIM_OC_Start+0x9e>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d109      	bne.n	8003cf4 <HAL_TIM_OC_Start+0x8c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e008      	b.n	8003d06 <HAL_TIM_OC_Start+0x9e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e088      	b.n	8003e20 <HAL_TIM_OC_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_OC_Start+0xb6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1c:	e023      	b.n	8003d66 <HAL_TIM_OC_Start+0xfe>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_OC_Start+0xc6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2c:	e01b      	b.n	8003d66 <HAL_TIM_OC_Start+0xfe>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_OC_Start+0xd6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d3c:	e013      	b.n	8003d66 <HAL_TIM_OC_Start+0xfe>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_OC_Start+0xe6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d4c:	e00b      	b.n	8003d66 <HAL_TIM_OC_Start+0xfe>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_OC_Start+0xf6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d5c:	e003      	b.n	8003d66 <HAL_TIM_OC_Start+0xfe>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f8b4 	bl	8004edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2b      	ldr	r2, [pc, #172]	; (8003e28 <HAL_TIM_OC_Start+0x1c0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00e      	beq.n	8003d9c <HAL_TIM_OC_Start+0x134>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <HAL_TIM_OC_Start+0x1c4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d009      	beq.n	8003d9c <HAL_TIM_OC_Start+0x134>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	; (8003e30 <HAL_TIM_OC_Start+0x1c8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_TIM_OC_Start+0x134>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <HAL_TIM_OC_Start+0x1cc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIM_OC_Start+0x138>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_TIM_OC_Start+0x13a>
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <HAL_TIM_OC_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <HAL_TIM_OC_Start+0x1c0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIM_OC_Start+0x176>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc8:	d009      	beq.n	8003dde <HAL_TIM_OC_Start+0x176>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <HAL_TIM_OC_Start+0x1d0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIM_OC_Start+0x176>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <HAL_TIM_OC_Start+0x1c4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d115      	bne.n	8003e0a <HAL_TIM_OC_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_TIM_OC_Start+0x1d4>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d015      	beq.n	8003e1c <HAL_TIM_OC_Start+0x1b4>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df6:	d011      	beq.n	8003e1c <HAL_TIM_OC_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	e008      	b.n	8003e1c <HAL_TIM_OC_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e000      	b.n	8003e1e <HAL_TIM_OC_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	00010007 	.word	0x00010007

08003e40 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	6839      	ldr	r1, [r7, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f842 	bl	8004edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <HAL_TIM_OC_Stop+0x10c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_TIM_OC_Stop+0x40>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a3a      	ldr	r2, [pc, #232]	; (8003f50 <HAL_TIM_OC_Stop+0x110>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_TIM_OC_Stop+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a38      	ldr	r2, [pc, #224]	; (8003f54 <HAL_TIM_OC_Stop+0x114>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_TIM_OC_Stop+0x40>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a37      	ldr	r2, [pc, #220]	; (8003f58 <HAL_TIM_OC_Stop+0x118>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIM_OC_Stop+0x44>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_TIM_OC_Stop+0x46>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d017      	beq.n	8003eba <HAL_TIM_OC_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <HAL_TIM_OC_Stop+0x7a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	f240 4344 	movw	r3, #1092	; 0x444
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_OC_Stop+0x7a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_TIM_OC_Stop+0xaa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	f240 4344 	movw	r3, #1092	; 0x444
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <HAL_TIM_OC_Stop+0xaa>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_OC_Stop+0xba>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef8:	e023      	b.n	8003f42 <HAL_TIM_OC_Stop+0x102>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d104      	bne.n	8003f0a <HAL_TIM_OC_Stop+0xca>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f08:	e01b      	b.n	8003f42 <HAL_TIM_OC_Stop+0x102>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d104      	bne.n	8003f1a <HAL_TIM_OC_Stop+0xda>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f18:	e013      	b.n	8003f42 <HAL_TIM_OC_Stop+0x102>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	d104      	bne.n	8003f2a <HAL_TIM_OC_Stop+0xea>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f28:	e00b      	b.n	8003f42 <HAL_TIM_OC_Stop+0x102>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_OC_Stop+0xfa>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	e003      	b.n	8003f42 <HAL_TIM_OC_Stop+0x102>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800

08003f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e049      	b.n	8004002 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f841 	bl	800400a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 fbe6 	bl	800476c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d122      	bne.n	800407a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d11b      	bne.n	800407a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f06f 0202 	mvn.w	r2, #2
 800404a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 faec 	bl	800463e <HAL_TIM_IC_CaptureCallback>
 8004066:	e005      	b.n	8004074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fade 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 faef 	bl	8004652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d122      	bne.n	80040ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b04      	cmp	r3, #4
 8004094:	d11b      	bne.n	80040ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f06f 0204 	mvn.w	r2, #4
 800409e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fac2 	bl	800463e <HAL_TIM_IC_CaptureCallback>
 80040ba:	e005      	b.n	80040c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fab4 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fac5 	bl	8004652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d122      	bne.n	8004122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d11b      	bne.n	8004122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f06f 0208 	mvn.w	r2, #8
 80040f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2204      	movs	r2, #4
 80040f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fa98 	bl	800463e <HAL_TIM_IC_CaptureCallback>
 800410e:	e005      	b.n	800411c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fa8a 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fa9b 	bl	8004652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b10      	cmp	r3, #16
 800412e:	d122      	bne.n	8004176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b10      	cmp	r3, #16
 800413c:	d11b      	bne.n	8004176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0210 	mvn.w	r2, #16
 8004146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2208      	movs	r2, #8
 800414c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa6e 	bl	800463e <HAL_TIM_IC_CaptureCallback>
 8004162:	e005      	b.n	8004170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fa60 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa71 	bl	8004652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d10e      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0201 	mvn.w	r2, #1
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fc fb39 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d10e      	bne.n	80041ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 ff25 	bl	8005018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041dc:	d10e      	bne.n	80041fc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d107      	bne.n	80041fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 ff18 	bl	800502c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa1f 	bl	8004666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b20      	cmp	r3, #32
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b20      	cmp	r3, #32
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0220 	mvn.w	r2, #32
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fed8 	bl	8005004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004276:	2302      	movs	r3, #2
 8004278:	e0ff      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b14      	cmp	r3, #20
 8004286:	f200 80f0 	bhi.w	800446a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042e5 	.word	0x080042e5
 8004294:	0800446b 	.word	0x0800446b
 8004298:	0800446b 	.word	0x0800446b
 800429c:	0800446b 	.word	0x0800446b
 80042a0:	08004325 	.word	0x08004325
 80042a4:	0800446b 	.word	0x0800446b
 80042a8:	0800446b 	.word	0x0800446b
 80042ac:	0800446b 	.word	0x0800446b
 80042b0:	08004367 	.word	0x08004367
 80042b4:	0800446b 	.word	0x0800446b
 80042b8:	0800446b 	.word	0x0800446b
 80042bc:	0800446b 	.word	0x0800446b
 80042c0:	080043a7 	.word	0x080043a7
 80042c4:	0800446b 	.word	0x0800446b
 80042c8:	0800446b 	.word	0x0800446b
 80042cc:	0800446b 	.word	0x0800446b
 80042d0:	080043e9 	.word	0x080043e9
 80042d4:	0800446b 	.word	0x0800446b
 80042d8:	0800446b 	.word	0x0800446b
 80042dc:	0800446b 	.word	0x0800446b
 80042e0:	08004429 	.word	0x08004429
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fab6 	bl	800485c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0204 	bic.w	r2, r2, #4
 800430e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6999      	ldr	r1, [r3, #24]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	619a      	str	r2, [r3, #24]
      break;
 8004322:	e0a5      	b.n	8004470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fb1c 	bl	8004968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800433e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6999      	ldr	r1, [r3, #24]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	619a      	str	r2, [r3, #24]
      break;
 8004364:	e084      	b.n	8004470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fb7b 	bl	8004a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0208 	orr.w	r2, r2, #8
 8004380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0204 	bic.w	r2, r2, #4
 8004390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69d9      	ldr	r1, [r3, #28]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	61da      	str	r2, [r3, #28]
      break;
 80043a4:	e064      	b.n	8004470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fbd9 	bl	8004b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69d9      	ldr	r1, [r3, #28]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	021a      	lsls	r2, r3, #8
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	61da      	str	r2, [r3, #28]
      break;
 80043e6:	e043      	b.n	8004470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fc1c 	bl	8004c2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0208 	orr.w	r2, r2, #8
 8004402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0204 	bic.w	r2, r2, #4
 8004412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004426:	e023      	b.n	8004470 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fc5a 	bl	8004ce8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004442:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004468:	e002      	b.n	8004470 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
      break;
 800446e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop

08004484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_TIM_ConfigClockSource+0x1c>
 800449c:	2302      	movs	r3, #2
 800449e:	e0b6      	b.n	800460e <HAL_TIM_ConfigClockSource+0x18a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044dc:	d03e      	beq.n	800455c <HAL_TIM_ConfigClockSource+0xd8>
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e2:	f200 8087 	bhi.w	80045f4 <HAL_TIM_ConfigClockSource+0x170>
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	f000 8086 	beq.w	80045fa <HAL_TIM_ConfigClockSource+0x176>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	d87f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x170>
 80044f4:	2b70      	cmp	r3, #112	; 0x70
 80044f6:	d01a      	beq.n	800452e <HAL_TIM_ConfigClockSource+0xaa>
 80044f8:	2b70      	cmp	r3, #112	; 0x70
 80044fa:	d87b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x170>
 80044fc:	2b60      	cmp	r3, #96	; 0x60
 80044fe:	d050      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x11e>
 8004500:	2b60      	cmp	r3, #96	; 0x60
 8004502:	d877      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x170>
 8004504:	2b50      	cmp	r3, #80	; 0x50
 8004506:	d03c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0xfe>
 8004508:	2b50      	cmp	r3, #80	; 0x50
 800450a:	d873      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x170>
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d058      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x13e>
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d86f      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x170>
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d064      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004518:	2b30      	cmp	r3, #48	; 0x30
 800451a:	d86b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x170>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d060      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d867      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x170>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05c      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004528:	2b10      	cmp	r3, #16
 800452a:	d05a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x15e>
 800452c:	e062      	b.n	80045f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6899      	ldr	r1, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f000 fcad 	bl	8004e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	609a      	str	r2, [r3, #8]
      break;
 800455a:	e04f      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6899      	ldr	r1, [r3, #8]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f000 fc96 	bl	8004e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800457e:	609a      	str	r2, [r3, #8]
      break;
 8004580:	e03c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	461a      	mov	r2, r3
 8004590:	f000 fc0a 	bl	8004da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2150      	movs	r1, #80	; 0x50
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fc63 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 80045a0:	e02c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 fc29 	bl	8004e06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2160      	movs	r1, #96	; 0x60
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fc53 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 80045c0:	e01c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f000 fbea 	bl	8004da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fc43 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 80045e0:	e00c      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 fc3a 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 80045f2:	e003      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      break;
 80045f8:	e000      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d107      	bne.n	80046b6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b4:	e02a      	b.n	800470c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d107      	bne.n	80046d0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2202      	movs	r2, #2
 80046c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ce:	e01d      	b.n	800470c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d107      	bne.n	80046ea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2204      	movs	r2, #4
 80046de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e8:	e010      	b.n	800470c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d107      	bne.n	8004704 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2208      	movs	r2, #8
 80046f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004702:	e003      	b.n	800470c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff ffb4 	bl	800467a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7fc f867 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff ff5a 	bl	8004616 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a32      	ldr	r2, [pc, #200]	; (8004848 <TIM_Base_SetConfig+0xdc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0x28>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0x28>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <TIM_Base_SetConfig+0xe0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a27      	ldr	r2, [pc, #156]	; (8004848 <TIM_Base_SetConfig+0xdc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <TIM_Base_SetConfig+0x6a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b4:	d00f      	beq.n	80047d6 <TIM_Base_SetConfig+0x6a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <TIM_Base_SetConfig+0xe0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0x6a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a23      	ldr	r2, [pc, #140]	; (8004850 <TIM_Base_SetConfig+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0x6a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a22      	ldr	r2, [pc, #136]	; (8004854 <TIM_Base_SetConfig+0xe8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x6a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a21      	ldr	r2, [pc, #132]	; (8004858 <TIM_Base_SetConfig+0xec>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0e      	ldr	r2, [pc, #56]	; (8004848 <TIM_Base_SetConfig+0xdc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_Base_SetConfig+0xc0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <TIM_Base_SetConfig+0xe4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0xc0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <TIM_Base_SetConfig+0xe8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0xc0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a0c      	ldr	r2, [pc, #48]	; (8004858 <TIM_Base_SetConfig+0xec>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d103      	bne.n	8004834 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	615a      	str	r2, [r3, #20]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40000400 	.word	0x40000400
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800

0800485c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0303 	bic.w	r3, r3, #3
 8004896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f023 0302 	bic.w	r3, r3, #2
 80048a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a28      	ldr	r2, [pc, #160]	; (8004958 <TIM_OC1_SetConfig+0xfc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_OC1_SetConfig+0x78>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a27      	ldr	r2, [pc, #156]	; (800495c <TIM_OC1_SetConfig+0x100>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_OC1_SetConfig+0x78>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a26      	ldr	r2, [pc, #152]	; (8004960 <TIM_OC1_SetConfig+0x104>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_OC1_SetConfig+0x78>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a25      	ldr	r2, [pc, #148]	; (8004964 <TIM_OC1_SetConfig+0x108>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10c      	bne.n	80048ee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0308 	bic.w	r3, r3, #8
 80048da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 0304 	bic.w	r3, r3, #4
 80048ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a19      	ldr	r2, [pc, #100]	; (8004958 <TIM_OC1_SetConfig+0xfc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00b      	beq.n	800490e <TIM_OC1_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a18      	ldr	r2, [pc, #96]	; (800495c <TIM_OC1_SetConfig+0x100>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_OC1_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <TIM_OC1_SetConfig+0x104>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_OC1_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a16      	ldr	r2, [pc, #88]	; (8004964 <TIM_OC1_SetConfig+0x108>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d111      	bne.n	8004932 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400
 8004964:	40014800 	.word	0x40014800

08004968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0210 	bic.w	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 0320 	bic.w	r3, r3, #32
 80049b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a24      	ldr	r2, [pc, #144]	; (8004a58 <TIM_OC2_SetConfig+0xf0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10d      	bne.n	80049e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <TIM_OC2_SetConfig+0xf0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <TIM_OC2_SetConfig+0xa0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <TIM_OC2_SetConfig+0xf4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d007      	beq.n	8004a08 <TIM_OC2_SetConfig+0xa0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <TIM_OC2_SetConfig+0xf8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC2_SetConfig+0xa0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <TIM_OC2_SetConfig+0xfc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d113      	bne.n	8004a30 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a0e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a16:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800

08004a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <TIM_OC3_SetConfig+0xec>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d10d      	bne.n	8004ae6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1a      	ldr	r2, [pc, #104]	; (8004b54 <TIM_OC3_SetConfig+0xec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_OC3_SetConfig+0x9e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a19      	ldr	r2, [pc, #100]	; (8004b58 <TIM_OC3_SetConfig+0xf0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_OC3_SetConfig+0x9e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a18      	ldr	r2, [pc, #96]	; (8004b5c <TIM_OC3_SetConfig+0xf4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_OC3_SetConfig+0x9e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a17      	ldr	r2, [pc, #92]	; (8004b60 <TIM_OC3_SetConfig+0xf8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d113      	bne.n	8004b2e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	621a      	str	r2, [r3, #32]
}
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800

08004b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	031b      	lsls	r3, r3, #12
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a16      	ldr	r2, [pc, #88]	; (8004c1c <TIM_OC4_SetConfig+0xb8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <TIM_OC4_SetConfig+0x7c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <TIM_OC4_SetConfig+0xbc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <TIM_OC4_SetConfig+0x7c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <TIM_OC4_SetConfig+0xc0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC4_SetConfig+0x7c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <TIM_OC4_SetConfig+0xc4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d109      	bne.n	8004bf4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	019b      	lsls	r3, r3, #6
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <TIM_OC5_SetConfig+0xac>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_OC5_SetConfig+0x72>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <TIM_OC5_SetConfig+0xb0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_OC5_SetConfig+0x72>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <TIM_OC5_SetConfig+0xb4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_OC5_SetConfig+0x72>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a12      	ldr	r2, [pc, #72]	; (8004ce4 <TIM_OC5_SetConfig+0xb8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d109      	bne.n	8004cb2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	621a      	str	r2, [r3, #32]
}
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800

08004ce8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	051b      	lsls	r3, r3, #20
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a16      	ldr	r2, [pc, #88]	; (8004d98 <TIM_OC6_SetConfig+0xb0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <TIM_OC6_SetConfig+0x74>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <TIM_OC6_SetConfig+0xb4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_OC6_SetConfig+0x74>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <TIM_OC6_SetConfig+0xb8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_OC6_SetConfig+0x74>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <TIM_OC6_SetConfig+0xbc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d109      	bne.n	8004d70 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	029b      	lsls	r3, r3, #10
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800

08004da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 030a 	bic.w	r3, r3, #10
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b087      	sub	sp, #28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0210 	bic.w	r2, r3, #16
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f043 0307 	orr.w	r3, r3, #7
 8004e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	609a      	str	r2, [r3, #8]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	2201      	movs	r2, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1a      	ldr	r2, [r3, #32]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 031f 	and.w	r3, r3, #31
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e054      	b.n	8004fea <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d108      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a11      	ldr	r2, [pc, #68]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40014000 	.word	0x40014000

08005004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <__libc_init_array>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	4d0d      	ldr	r5, [pc, #52]	; (8005078 <__libc_init_array+0x38>)
 8005044:	4c0d      	ldr	r4, [pc, #52]	; (800507c <__libc_init_array+0x3c>)
 8005046:	1b64      	subs	r4, r4, r5
 8005048:	10a4      	asrs	r4, r4, #2
 800504a:	2600      	movs	r6, #0
 800504c:	42a6      	cmp	r6, r4
 800504e:	d109      	bne.n	8005064 <__libc_init_array+0x24>
 8005050:	4d0b      	ldr	r5, [pc, #44]	; (8005080 <__libc_init_array+0x40>)
 8005052:	4c0c      	ldr	r4, [pc, #48]	; (8005084 <__libc_init_array+0x44>)
 8005054:	f000 f820 	bl	8005098 <_init>
 8005058:	1b64      	subs	r4, r4, r5
 800505a:	10a4      	asrs	r4, r4, #2
 800505c:	2600      	movs	r6, #0
 800505e:	42a6      	cmp	r6, r4
 8005060:	d105      	bne.n	800506e <__libc_init_array+0x2e>
 8005062:	bd70      	pop	{r4, r5, r6, pc}
 8005064:	f855 3b04 	ldr.w	r3, [r5], #4
 8005068:	4798      	blx	r3
 800506a:	3601      	adds	r6, #1
 800506c:	e7ee      	b.n	800504c <__libc_init_array+0xc>
 800506e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005072:	4798      	blx	r3
 8005074:	3601      	adds	r6, #1
 8005076:	e7f2      	b.n	800505e <__libc_init_array+0x1e>
 8005078:	080050e0 	.word	0x080050e0
 800507c:	080050e0 	.word	0x080050e0
 8005080:	080050e0 	.word	0x080050e0
 8005084:	080050e4 	.word	0x080050e4

08005088 <memset>:
 8005088:	4402      	add	r2, r0
 800508a:	4603      	mov	r3, r0
 800508c:	4293      	cmp	r3, r2
 800508e:	d100      	bne.n	8005092 <memset+0xa>
 8005090:	4770      	bx	lr
 8005092:	f803 1b01 	strb.w	r1, [r3], #1
 8005096:	e7f9      	b.n	800508c <memset+0x4>

08005098 <_init>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr

080050a4 <_fini>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr
