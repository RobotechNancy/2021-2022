
BR_L432KCU3_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  000222f8  2**0
                  CONTENTS
  4 .ARM          00000000  08004e08  08004e08  000222f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e08  08004e08  000222f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000022f8  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200022f8  08007108  000222f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002410  08007108  00022410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000222f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5e9  00000000  00000000  00022328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002658  00000000  00000000  00031911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00034db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002124f  00000000  00000000  00035b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f555  00000000  00000000  00056d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8ce9  00000000  00000000  000662ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ef95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa8  00000000  00000000  0012efe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200022f8 	.word	0x200022f8
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004db0 	.word	0x08004db0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200022fc 	.word	0x200022fc
 80001c8:	08004db0 	.word	0x08004db0

080001cc <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \param isRep vrai si c'est une reponse a une requete, faux sinon
 * \param RepId indique le nombre de reponse atendu pour une requete et le num de la reponse pour une reponse
 * \param dataLen frame payload length in byte (0 .. 8) aka data length code
 * \param data CAN frame payload (up to 8 byte)
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	b0a8      	sub	sp, #160	; 0xa0
 80001d0:	af06      	add	r7, sp, #24
 80001d2:	62f8      	str	r0, [r7, #44]	; 0x2c
	// traitement et mise en forme de la trame
	/////////////////////////////////////////////////////////////////////////
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80001d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80001d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80001dc:	2100      	movs	r1, #0
 80001de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80001e0:	f001 fc05 	bl	80019ee <HAL_CAN_GetRxMessage>

	struct CanResponse_t msg;
	msg = traitement_trame( RxHeader, RxData);
 80001e4:	463d      	mov	r5, r7
 80001e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80001ea:	9304      	str	r3, [sp, #16]
 80001ec:	466c      	mov	r4, sp
 80001ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80001f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80001fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001fe:	4628      	mov	r0, r5
 8000200:	f000 f8e8 	bl	80003d4 <traitement_trame>
 8000204:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000208:	463d      	mov	r5, r7
 800020a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000212:	682b      	ldr	r3, [r5, #0]
 8000214:	6023      	str	r3, [r4, #0]
	set_id_msg(msg.idMessage);
 8000216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000218:	b2db      	uxtb	r3, r3
 800021a:	4618      	mov	r0, r3
 800021c:	f000 ffb4 	bl	8001188 <set_id_msg>
	/////////////////////////////////////////////////////////////////////////
	uint8_t data[1];
	switch(msg.codeFct){
 8000220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000222:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000226:	d04a      	beq.n	80002be <HAL_CAN_RxFifo0MsgPendingCallback+0xf2>
 8000228:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800022c:	d84d      	bhi.n	80002ca <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 800022e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000232:	d003      	beq.n	800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
 8000234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000238:	d03e      	beq.n	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
		case STOP_URGENT:
			set_target(0);
			emergency_stop();
		break;
		default :
		break;
 800023a:	e046      	b.n	80002ca <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		if (get_deplacement_state()==ARRET){
 800023c:	f000 fff0 	bl	8001220 <get_deplacement_state>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d123      	bne.n	800028e <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			for(int i=0;i<8;i++){
 8000246:	2300      	movs	r3, #0
 8000248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800024c:	e011      	b.n	8000272 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
				trameMotor.raw_data[i] = msg.data[i];
 800024e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000256:	4413      	add	r3, r2
 8000258:	7819      	ldrb	r1, [r3, #0]
 800025a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800025e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000262:	4413      	add	r3, r2
 8000264:	460a      	mov	r2, r1
 8000266:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<8;i++){
 8000268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800026c:	3301      	adds	r3, #1
 800026e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000276:	2b07      	cmp	r3, #7
 8000278:	dde9      	ble.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
			prepare_deplacement(&trameMotor);
 800027a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f97e 	bl	8000580 <prepare_deplacement>
			reset_steps();
 8000284:	f001 f804 	bl	8001290 <reset_steps>
			start_generate();
 8000288:	f000 fc8a 	bl	8000ba0 <start_generate>
		break;
 800028c:	e01e      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
			data[0] = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			send(CAN_ADDR_RASPBERRY, REP_AVANCE, data, 1, true, 1, get_id_msg());
 8000294:	f000 ff6c 	bl	8001170 <get_id_msg>
 8000298:	4603      	mov	r3, r0
 800029a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800029e:	9302      	str	r3, [sp, #8]
 80002a0:	2301      	movs	r3, #1
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2301      	movs	r3, #1
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2301      	movs	r3, #1
 80002aa:	f44f 2101 	mov.w	r1, #528384	; 0x81000
 80002ae:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80002b2:	f000 f857 	bl	8000364 <send>
		break;
 80002b6:	e009      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
			stop();
 80002b8:	f000 fc94 	bl	8000be4 <stop>
		break;
 80002bc:	e006      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
			set_target(0);
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 ffd6 	bl	8001270 <set_target>
			emergency_stop();
 80002c4:	f000 fccc 	bl	8000c60 <emergency_stop>
		break;
 80002c8:	e000      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
		break;
 80002ca:	bf00      	nop


	//renvoi un msg sur le bus can
	//uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
	//send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5) ;
}
 80002cc:	bf00      	nop
 80002ce:	3788      	adds	r7, #136	; 0x88
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bdb0      	pop	{r4, r5, r7, pc}

080002d4 <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR adresse) {
 80002d4:	b084      	sub	sp, #16
 80002d6:	b5b0      	push	{r4, r5, r7, lr}
 80002d8:	b08a      	sub	sp, #40	; 0x28
 80002da:	af00      	add	r7, sp, #0
 80002dc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 80002e8:	2300      	movs	r3, #0
 80002ea:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 80002ec:	2301      	movs	r3, #1
 80002ee:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0b001000000000000; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 80002f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0; //
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0b111100000000000; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 80002fa:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80002fe:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000308:	2301      	movs	r3, #1
 800030a:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800030c:	230e      	movs	r3, #14
 800030e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000310:	463b      	mov	r3, r7
 8000312:	4619      	mov	r1, r3
 8000314:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000318:	f001 f98b 	bl	8001632 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 800031c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000320:	f001 fa51 	bl	80017c6 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000324:	2102      	movs	r1, #2
 8000326:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800032a:	f001 fc72 	bl	8001c12 <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <CAN_Config+0x88>)
 8000330:	461d      	mov	r5, r3
 8000332:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800033c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000342:	e885 0003 	stmia.w	r5, {r0, r1}
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)
	CanAdresse = adresse;
 8000346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <CAN_Config+0x8c>)
 800034c:	701a      	strb	r2, [r3, #0]
}
 800034e:	bf00      	nop
 8000350:	3728      	adds	r7, #40	; 0x28
 8000352:	46bd      	mov	sp, r7
 8000354:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000358:	b004      	add	sp, #16
 800035a:	4770      	bx	lr
 800035c:	200023d0 	.word	0x200023d0
 8000360:	200023f8 	.word	0x200023f8

08000364 <send>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_WRITE_ERROR} une erreur à eu lieu lors de l'envoie du message
*/
int send(CAN_ADDR addr, CAN_CODE_FCT codeFct , uint8_t data[], uint dataLen, bool isRep, uint repLenght, uint idMessage){
 8000364:	b580      	push	{r7, lr}
 8000366:	b08c      	sub	sp, #48	; 0x30
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]

	if (dataLen >8){
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b08      	cmp	r3, #8
 8000376:	d901      	bls.n	800037c <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <send+0x68>)
 800037a:	e022      	b.n	80003c2 <send+0x5e>
	//if(!is_valid_addr(addr)) return CAN_E_UNKNOW_ADDR;
	//if(!is_valid_code_fct(codeFct)) return CAN_E_UNKNOW_CODE_FCT;


	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dataLen; // taille des données à transmettre en octets
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	62bb      	str	r3, [r7, #40]	; 0x28

	//adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage

	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | codeFct | repLenght | idMessage << CAN_DECALAGE_ID_MSG | isRep << CAN_DECALAGE_IS_REP | repLenght;
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	431a      	orrs	r2, r3
 8000386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000388:	431a      	orrs	r2, r3
 800038a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800038c:	011b      	lsls	r3, r3, #4
 800038e:	4313      	orrs	r3, r2
 8000390:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000394:	00d2      	lsls	r2, r2, #3
 8000396:	431a      	orrs	r2, r3
 8000398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800039a:	4313      	orrs	r3, r2
 800039c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a0:	61fb      	str	r3, [r7, #28]
	//txHeader.ExtId = 0b11101100100100000010000011111;
	//1 111 0001 0000 10010000 00000000 1 001
	//1011 0001 00001001 00000000 0000 1 001000000011001
	txHeader.IDE = CAN_ID_EXT; //on choisit l'adressage étendue
 80003a2:	2304      	movs	r3, #4
 80003a4:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	f107 0118 	add.w	r1, r7, #24
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <send+0x6c>)
 80003bc:	f001 fa47 	bl	800184e <HAL_CAN_AddTxMessage>

	return 0;
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3730      	adds	r7, #48	; 0x30
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	fffffe02 	.word	0xfffffe02
 80003d0:	200023d0 	.word	0x200023d0

080003d4 <traitement_trame>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_READ_ERROR} erreur dans la lecture de la trame depuis le buffer
*/
struct CanResponse_t traitement_trame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 80003d4:	b084      	sub	sp, #16
 80003d6:	b4b0      	push	{r4, r5, r7}
 80003d8:	b08d      	sub	sp, #52	; 0x34
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		struct CanResponse_t rep;
		//rep.ExtID.champId = frame.ExtId;

		rep.addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR)  ;
 80003e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80003ec:	60bb      	str	r3, [r7, #8]
		rep.emetteur = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR) ;
 80003ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80003f4:	60fb      	str	r3, [r7, #12]
		rep.codeFct = (frame.ExtId & CAN_FILTER_CODE_FCT);
 80003f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003f8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80003fc:	613b      	str	r3, [r7, #16]
		rep.isRep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 80003fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000400:	08db      	lsrs	r3, r3, #3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	2b00      	cmp	r3, #0
 8000408:	bf14      	ite	ne
 800040a:	2301      	movne	r3, #1
 800040c:	2300      	moveq	r3, #0
 800040e:	b2db      	uxtb	r3, r3
 8000410:	763b      	strb	r3, [r7, #24]
		rep.RepId = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 8000412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000414:	f003 0307 	and.w	r3, r3, #7
 8000418:	61fb      	str	r3, [r7, #28]
		rep.idMessage = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 800041a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	b2db      	uxtb	r3, r3
 8000420:	617b      	str	r3, [r7, #20]
        if(!is_valid_addr(rep.addr)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_addr(rep.emetteur)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_code_fct(rep.codeFct)) return CAN_E_UNKNOW_CODE_FCT;
        if (frame.DLC >8)  return CAN_E_DATA_SIZE_TOO_LONG;*/

        rep.dataLen = frame.DLC;
 8000422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000424:	623b      	str	r3, [r7, #32]


        for (int i = 0; i < frame.DLC; i++){
 8000426:	2300      	movs	r3, #0
 8000428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800042a:	e00c      	b.n	8000446 <traitement_trame+0x72>
            //if(data[i] <0 || data[i] > 255) return CAN_E_OOB_DATA;
            rep.data[i] = data[i];
 800042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800042e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000430:	4413      	add	r3, r2
 8000432:	7819      	ldrb	r1, [r3, #0]
 8000434:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800043a:	4413      	add	r3, r2
 800043c:	460a      	mov	r2, r1
 800043e:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < frame.DLC; i++){
 8000440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000442:	3301      	adds	r3, #1
 8000444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800044a:	429a      	cmp	r2, r3
 800044c:	d8ee      	bhi.n	800042c <traitement_trame+0x58>
        }


    return rep;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	461d      	mov	r5, r3
 8000452:	f107 0408 	add.w	r4, r7, #8
 8000456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800045a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800045c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800045e:	6823      	ldr	r3, [r4, #0]
 8000460:	602b      	str	r3, [r5, #0]
}
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	3734      	adds	r7, #52	; 0x34
 8000466:	46bd      	mov	sp, r7
 8000468:	bcb0      	pop	{r4, r5, r7}
 800046a:	b004      	add	sp, #16
 800046c:	4770      	bx	lr
	...

08000470 <triangle>:
/*
 * @brief effectue un triangle
 * @param None
 * @retval None
 */
void triangle(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
	set_target(24504);
 8000476:	f645 70b8 	movw	r0, #24504	; 0x5fb8
 800047a:	f000 fef9 	bl	8001270 <set_target>
	motor1.diviseur = 20;
 800047e:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <triangle+0x104>)
 8000480:	2214      	movs	r2, #20
 8000482:	711a      	strb	r2, [r3, #4]
	motor2.diviseur = 20;
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <triangle+0x108>)
 8000486:	2214      	movs	r2, #20
 8000488:	711a      	strb	r2, [r3, #4]
	motor3.diviseur = 0;
 800048a:	4b3c      	ldr	r3, [pc, #240]	; (800057c <triangle+0x10c>)
 800048c:	2200      	movs	r2, #0
 800048e:	711a      	strb	r2, [r3, #4]
	motor1.pinDirState = 1;
 8000490:	4b38      	ldr	r3, [pc, #224]	; (8000574 <triangle+0x104>)
 8000492:	2201      	movs	r2, #1
 8000494:	775a      	strb	r2, [r3, #29]
	motor2.pinDirState = 0;
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <triangle+0x108>)
 8000498:	2200      	movs	r2, #0
 800049a:	775a      	strb	r2, [r3, #29]
	motor3.pinDirState = 0;
 800049c:	4b37      	ldr	r3, [pc, #220]	; (800057c <triangle+0x10c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	775a      	strb	r2, [r3, #29]
	motor_dir(&motor1);
 80004a2:	4834      	ldr	r0, [pc, #208]	; (8000574 <triangle+0x104>)
 80004a4:	f000 fc65 	bl	8000d72 <motor_dir>
	motor_dir(&motor2);
 80004a8:	4833      	ldr	r0, [pc, #204]	; (8000578 <triangle+0x108>)
 80004aa:	f000 fc62 	bl	8000d72 <motor_dir>
	motor_dir(&motor3);
 80004ae:	4833      	ldr	r0, [pc, #204]	; (800057c <triangle+0x10c>)
 80004b0:	f000 fc5f 	bl	8000d72 <motor_dir>
	reset_steps();
 80004b4:	f000 feec 	bl	8001290 <reset_steps>
	start_generate();
 80004b8:	f000 fb72 	bl	8000ba0 <start_generate>
	while(get_steps_left()!=0){
 80004bc:	e001      	b.n	80004c2 <triangle+0x52>
		int a = 1;
 80004be:	2301      	movs	r3, #1
 80004c0:	607b      	str	r3, [r7, #4]
	while(get_steps_left()!=0){
 80004c2:	f000 ff0b 	bl	80012dc <get_steps_left>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d1f8      	bne.n	80004be <triangle+0x4e>
	}
	motor1.diviseur = 20;
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <triangle+0x104>)
 80004ce:	2214      	movs	r2, #20
 80004d0:	711a      	strb	r2, [r3, #4]
	motor2.diviseur = 0;
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <triangle+0x108>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	711a      	strb	r2, [r3, #4]
	motor3.diviseur = 20;
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <triangle+0x10c>)
 80004da:	2214      	movs	r2, #20
 80004dc:	711a      	strb	r2, [r3, #4]
	motor1.pinDirState = 0;
 80004de:	4b25      	ldr	r3, [pc, #148]	; (8000574 <triangle+0x104>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	775a      	strb	r2, [r3, #29]
	motor2.pinDirState = 0;
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <triangle+0x108>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	775a      	strb	r2, [r3, #29]
	motor3.pinDirState = 1;
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <triangle+0x10c>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	775a      	strb	r2, [r3, #29]
	motor_dir(&motor1);
 80004f0:	4820      	ldr	r0, [pc, #128]	; (8000574 <triangle+0x104>)
 80004f2:	f000 fc3e 	bl	8000d72 <motor_dir>
	motor_dir(&motor2);
 80004f6:	4820      	ldr	r0, [pc, #128]	; (8000578 <triangle+0x108>)
 80004f8:	f000 fc3b 	bl	8000d72 <motor_dir>
	motor_dir(&motor3);
 80004fc:	481f      	ldr	r0, [pc, #124]	; (800057c <triangle+0x10c>)
 80004fe:	f000 fc38 	bl	8000d72 <motor_dir>
	reset_steps();
 8000502:	f000 fec5 	bl	8001290 <reset_steps>
	start_generate();
 8000506:	f000 fb4b 	bl	8000ba0 <start_generate>
	while(get_steps_left()!=0){
 800050a:	e001      	b.n	8000510 <triangle+0xa0>
		int a = 1;
 800050c:	2301      	movs	r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
	while(get_steps_left()!=0){
 8000510:	f000 fee4 	bl	80012dc <get_steps_left>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f8      	bne.n	800050c <triangle+0x9c>
	}
	motor1.diviseur = 0;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <triangle+0x104>)
 800051c:	2200      	movs	r2, #0
 800051e:	711a      	strb	r2, [r3, #4]
	motor2.diviseur = 20;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <triangle+0x108>)
 8000522:	2214      	movs	r2, #20
 8000524:	711a      	strb	r2, [r3, #4]
	motor3.diviseur = 20;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <triangle+0x10c>)
 8000528:	2214      	movs	r2, #20
 800052a:	711a      	strb	r2, [r3, #4]
	motor1.pinDirState = 0;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <triangle+0x104>)
 800052e:	2200      	movs	r2, #0
 8000530:	775a      	strb	r2, [r3, #29]
	motor2.pinDirState = 1;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <triangle+0x108>)
 8000534:	2201      	movs	r2, #1
 8000536:	775a      	strb	r2, [r3, #29]
	motor3.pinDirState = 0;
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <triangle+0x10c>)
 800053a:	2200      	movs	r2, #0
 800053c:	775a      	strb	r2, [r3, #29]
	motor_dir(&motor1);
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <triangle+0x104>)
 8000540:	f000 fc17 	bl	8000d72 <motor_dir>
	motor_dir(&motor2);
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <triangle+0x108>)
 8000546:	f000 fc14 	bl	8000d72 <motor_dir>
	motor_dir(&motor3);
 800054a:	480c      	ldr	r0, [pc, #48]	; (800057c <triangle+0x10c>)
 800054c:	f000 fc11 	bl	8000d72 <motor_dir>
	reset_steps();
 8000550:	f000 fe9e 	bl	8001290 <reset_steps>
	start_generate();
 8000554:	f000 fb24 	bl	8000ba0 <start_generate>
	while(get_steps_left()!=0){
 8000558:	e001      	b.n	800055e <triangle+0xee>
		int a = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
	while(get_steps_left()!=0){
 800055e:	f000 febd 	bl	80012dc <get_steps_left>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1f8      	bne.n	800055a <triangle+0xea>
	}
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000000 	.word	0x20000000
 8000578:	20000020 	.word	0x20000020
 800057c:	20000040 	.word	0x20000040

08000580 <prepare_deplacement>:
/*
 * @brief enregistre les valeurs des variables CAN dans les variables moteur et applique le nouveau sens de rotation des moteurs
 * @param &trameMotor adresse de la trameMotor
 * @retval None
 */
void prepare_deplacement(Trame_Moteur_t* trameMotor){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	set_target(trameMotor->fields.nb_steps);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fe6f 	bl	8001270 <set_target>
	motor1.diviseur = trameMotor->fields.div0;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791a      	ldrb	r2, [r3, #4]
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <prepare_deplacement+0x74>)
 8000598:	711a      	strb	r2, [r3, #4]
	motor2.diviseur = trameMotor->fields.div1;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795a      	ldrb	r2, [r3, #5]
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <prepare_deplacement+0x78>)
 80005a0:	711a      	strb	r2, [r3, #4]
	motor3.diviseur = trameMotor->fields.div2;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	799a      	ldrb	r2, [r3, #6]
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <prepare_deplacement+0x7c>)
 80005a8:	711a      	strb	r2, [r3, #4]
	motor1.pinDirState = trameMotor->fields.dir0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	79db      	ldrb	r3, [r3, #7]
 80005ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <prepare_deplacement+0x74>)
 80005b8:	775a      	strb	r2, [r3, #29]
	motor2.pinDirState = trameMotor->fields.dir1;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <prepare_deplacement+0x78>)
 80005c8:	775a      	strb	r2, [r3, #29]
	motor3.pinDirState = trameMotor->fields.dir2;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	79db      	ldrb	r3, [r3, #7]
 80005ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <prepare_deplacement+0x7c>)
 80005d8:	775a      	strb	r2, [r3, #29]
	motor_dir(&motor1);
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <prepare_deplacement+0x74>)
 80005dc:	f000 fbc9 	bl	8000d72 <motor_dir>
	motor_dir(&motor2);
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <prepare_deplacement+0x78>)
 80005e2:	f000 fbc6 	bl	8000d72 <motor_dir>
	motor_dir(&motor3);
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <prepare_deplacement+0x7c>)
 80005e8:	f000 fbc3 	bl	8000d72 <motor_dir>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000020 	.word	0x20000020
 80005fc:	20000040 	.word	0x20000040

08000600 <calcul_deceleration>:
/*
 * @brief calcul la longueur de la décélération, nombre de case à parcourrir dans le tableau rArr
 * @param a, la valeur de l'ARR que laquelle on souhaite arriver
 * @retval length, la longueur
 */
uint32_t calcul_deceleration(uint32_t a){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint32_t indice = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
    while (get_r_arr()[indice] >= a){
 800060c:	e002      	b.n	8000614 <calcul_deceleration+0x14>
        indice++;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
    while (get_r_arr()[indice] >= a){
 8000614:	f000 fdee 	bl	80011f4 <get_r_arr>
 8000618:	4602      	mov	r2, r0
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	d9f2      	bls.n	800060e <calcul_deceleration+0xe>
    }
    set_length(indice);
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f000 fdc9 	bl	80011c0 <set_length>
	return get_length();
 800062e:	f000 fdbb 	bl	80011a8 <get_length>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063e:	b089      	sub	sp, #36	; 0x24
 8000640:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fe86 	bl	8001352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f825 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f969 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 800064e:	f000 f949 	bl	80008e4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000652:	f000 f89b 	bl	800078c <MX_TIM1_Init>
  MX_CAN1_Init();
 8000656:	f000 f863 	bl	8000720 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  CAN_Config(hcan1, CAN_ADDR_BASE_ROULANTE_E);
 800065a:	4e0d      	ldr	r6, [pc, #52]	; (8000690 <main+0x54>)
 800065c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000660:	9306      	str	r3, [sp, #24]
 8000662:	466d      	mov	r5, sp
 8000664:	f106 0410 	add.w	r4, r6, #16
 8000668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000670:	e885 0003 	stmia.w	r5, {r0, r1}
 8000674:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000678:	f7ff fe2c 	bl	80002d4 <CAN_Config>
  /* USER CODE END 2 */

  /*
   * @brief clampe les moteurs et active les demi-steps
   */
  motor_en(RESET); //RESET = actif
 800067c:	2000      	movs	r0, #0
 800067e:	f000 fb89 	bl	8000d94 <motor_en>
  motor_micro_step(SET, RESET); //1/2 step
 8000682:	2100      	movs	r1, #0
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fb97 	bl	8000db8 <motor_micro_step>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  triangle();
 800068a:	f7ff fef1 	bl	8000470 <triangle>
 800068e:	e7fc      	b.n	800068a <main+0x4e>
 8000690:	20002314 	.word	0x20002314

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fb7c 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ba:	f002 f9d9 	bl	8002a70 <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 f99e 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fa1c 	bl	8002b1c <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006ea:	f000 f98b 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f2:	2301      	movs	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fe1c 	bl	8003344 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000712:	f000 f977 	bl	8000a04 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	; 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_CAN1_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_CAN1_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_CAN1_Init+0x64>)
 800072c:	2208      	movs	r2, #8
 800072e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_CAN1_Init+0x64>)
 800073e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000742:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_CAN1_Init+0x64>)
 8000746:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800074a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_CAN1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_CAN1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_CAN1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_CAN1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_CAN1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_CAN1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_CAN1_Init+0x64>)
 8000772:	f000 fe63 	bl	800143c <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f942 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20002314 	.word	0x20002314
 8000788:	40006400 	.word	0x40006400

0800078c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b09a      	sub	sp, #104	; 0x68
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	222c      	movs	r2, #44	; 0x2c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 faea 	bl	8004da0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007cc:	4b43      	ldr	r3, [pc, #268]	; (80008dc <MX_TIM1_Init+0x150>)
 80007ce:	4a44      	ldr	r2, [pc, #272]	; (80008e0 <MX_TIM1_Init+0x154>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <MX_TIM1_Init+0x150>)
 80007d4:	220f      	movs	r2, #15
 80007d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <MX_TIM1_Init+0x150>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80007de:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <MX_TIM1_Init+0x150>)
 80007e0:	2263      	movs	r2, #99	; 0x63
 80007e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <MX_TIM1_Init+0x150>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ea:	4b3c      	ldr	r3, [pc, #240]	; (80008dc <MX_TIM1_Init+0x150>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <MX_TIM1_Init+0x150>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f6:	4839      	ldr	r0, [pc, #228]	; (80008dc <MX_TIM1_Init+0x150>)
 80007f8:	f002 ff90 	bl	800371c <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000802:	f000 f8ff 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000810:	4619      	mov	r1, r3
 8000812:	4832      	ldr	r0, [pc, #200]	; (80008dc <MX_TIM1_Init+0x150>)
 8000814:	f003 fc8e 	bl	8004134 <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800081e:	f000 f8f1 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000822:	482e      	ldr	r0, [pc, #184]	; (80008dc <MX_TIM1_Init+0x150>)
 8000824:	f003 f9f2 	bl	8003c0c <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800082e:	f000 f8e9 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000842:	4619      	mov	r1, r3
 8000844:	4825      	ldr	r0, [pc, #148]	; (80008dc <MX_TIM1_Init+0x150>)
 8000846:	f004 f98b 	bl	8004b60 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000850:	f000 f8d8 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000854:	2360      	movs	r3, #96	; 0x60
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4818      	ldr	r0, [pc, #96]	; (80008dc <MX_TIM1_Init+0x150>)
 800087a:	f003 fb47 	bl	8003f0c <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000884:	f000 f8be 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_TIM1_Init+0x150>)
 80008be:	f004 f9b5 	bl	8004c2c <HAL_TIMEx_ConfigBreakDeadTime>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80008c8:	f000 f89c 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_TIM1_Init+0x150>)
 80008ce:	f000 fb81 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 80008d2:	bf00      	nop
 80008d4:	3768      	adds	r7, #104	; 0x68
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000233c 	.word	0x2000233c
 80008e0:	40012c00 	.word	0x40012c00

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_DMA_Init+0x38>)
 80008ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_DMA_Init+0x38>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6493      	str	r3, [r2, #72]	; 0x48
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_DMA_Init+0x38>)
 80008f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2010      	movs	r0, #16
 8000908:	f001 fcb3 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800090c:	2010      	movs	r0, #16
 800090e:	f001 fccc 	bl	80022aa <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_GPIO_Init+0xdc>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a30      	ldr	r2, [pc, #192]	; (80009fc <MX_GPIO_Init+0xdc>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_GPIO_Init+0xdc>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_GPIO_Init+0xdc>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <MX_GPIO_Init+0xdc>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_GPIO_Init+0xdc>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_M3_Pin|STEP_M2_Pin|STEP_M3_Pin|DIR_M2_Pin
 8000966:	2200      	movs	r2, #0
 8000968:	f240 618e 	movw	r1, #1678	; 0x68e
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f002 f858 	bl	8002a24 <HAL_GPIO_WritePin>
                          |DIR_M1_Pin|STEP_M1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|MS1_Pin|MS2_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2138      	movs	r1, #56	; 0x38
 8000978:	4821      	ldr	r0, [pc, #132]	; (8000a00 <MX_GPIO_Init+0xe0>)
 800097a:	f002 f853 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_M3_Pin STEP_M2_Pin DIR_M2_Pin DIR_M1_Pin
                           STEP_M1_Pin */
  GPIO_InitStruct.Pin = DIR_M3_Pin|STEP_M2_Pin|DIR_M2_Pin|DIR_M1_Pin
 800097e:	f240 6386 	movw	r3, #1670	; 0x686
 8000982:	60fb      	str	r3, [r7, #12]
                          |STEP_M1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f001 fed9 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_M3_Pin */
  GPIO_InitStruct.Pin = STEP_M3_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEP_M3_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f001 feca 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 80009bc:	2308      	movs	r3, #8
 80009be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0xe0>)
 80009d4:	f001 febc 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS1_Pin MS2_Pin */
  GPIO_InitStruct.Pin = MS1_Pin|MS2_Pin;
 80009d8:	2330      	movs	r3, #48	; 0x30
 80009da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0xe0>)
 80009f0:	f001 feae 	bl	8002750 <HAL_GPIO_Init>

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000400 	.word	0x48000400

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_TIM_PeriodElapsedCallback>:
 * @param condition htim==&htimX, où X est le numéro du timer utilisé
 * on avance d'un step informatiquement puis physiquement
 * fonction STM sans return
 * pour voir dans quelle phase on se trouve (arrêt, accélération, maintient ou décélération) on se réfère à la variable deplacementState
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08b      	sub	sp, #44	; 0x2c
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	6078      	str	r0, [r7, #4]
	if (htim==&htim1){ //condition d'interruption du timer X
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a5d      	ldr	r2, [pc, #372]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	f040 80b3 	bne.w	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
//		motor_step puis avance ou avance puis motor_step
		count_steps();
 8000a22:	f000 fc41 	bl	80012a8 <count_steps>
		avance(&motor1);
 8000a26:	485b      	ldr	r0, [pc, #364]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a28:	f000 f960 	bl	8000cec <avance>
		avance(&motor2);
 8000a2c:	485a      	ldr	r0, [pc, #360]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000a2e:	f000 f95d 	bl	8000cec <avance>
		avance(&motor3);
 8000a32:	485a      	ldr	r0, [pc, #360]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a34:	f000 f95a 	bl	8000cec <avance>
		motor_step(&motor1);
 8000a38:	4856      	ldr	r0, [pc, #344]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a3a:	f000 f989 	bl	8000d50 <motor_step>
		motor_step(&motor2);
 8000a3e:	4856      	ldr	r0, [pc, #344]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000a40:	f000 f986 	bl	8000d50 <motor_step>
		motor_step(&motor3);
 8000a44:	4855      	ldr	r0, [pc, #340]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a46:	f000 f983 	bl	8000d50 <motor_step>
		uint8_t data[1];
		if (get_steps() == get_length()){
 8000a4a:	f000 fc3b 	bl	80012c4 <get_steps>
 8000a4e:	4604      	mov	r4, r0
 8000a50:	f000 fbaa 	bl	80011a8 <get_length>
 8000a54:	4603      	mov	r3, r0
 8000a56:	429c      	cmp	r4, r3
 8000a58:	d102      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x50>
			set_deplacement_state(MAINTIENT);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f000 fbec 	bl	8001238 <set_deplacement_state>
		}
		if(get_steps_left() <= 0)
 8000a60:	f000 fc3c 	bl	80012dc <get_steps_left>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d138      	bne.n	8000adc <HAL_TIM_PeriodElapsedCallback+0xcc>
		{
			HAL_TIM_Base_Stop_DMA(&htim1);
 8000a6a:	4849      	ldr	r0, [pc, #292]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000a6c:	f002 ff36 	bl	80038dc <HAL_TIM_Base_Stop_DMA>
			HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000a70:	2100      	movs	r1, #0
 8000a72:	4847      	ldr	r0, [pc, #284]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000a74:	f003 f842 	bl	8003afc <HAL_TIM_OC_Stop>

			motor1.pinStepState = RESET;
 8000a78:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	771a      	strb	r2, [r3, #28]
			motor2.pinStepState = RESET;
 8000a7e:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	771a      	strb	r2, [r3, #28]
			motor3.pinStepState = RESET;
 8000a84:	4b45      	ldr	r3, [pc, #276]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	771a      	strb	r2, [r3, #28]
			motor_step(&motor1);
 8000a8a:	4842      	ldr	r0, [pc, #264]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a8c:	f000 f960 	bl	8000d50 <motor_step>
			motor_step(&motor2);
 8000a90:	4841      	ldr	r0, [pc, #260]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000a92:	f000 f95d 	bl	8000d50 <motor_step>
			motor_step(&motor3);
 8000a96:	4841      	ldr	r0, [pc, #260]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a98:	f000 f95a 	bl	8000d50 <motor_step>
		    motor1.cnt = 0;
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
		    motor2.cnt = 0;
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		    motor3.cnt = 0;
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
			set_deplacement_state(ARRET);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fbc2 	bl	8001238 <set_deplacement_state>
			data[0] = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	733b      	strb	r3, [r7, #12]
			send(CAN_ADDR_RASPBERRY, REP_AVANCE, data, 1, true, 1, get_id_msg());
 8000ab8:	f000 fb5a 	bl	8001170 <get_id_msg>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f107 020c 	add.w	r2, r7, #12
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2301      	movs	r3, #1
 8000ace:	f44f 2101 	mov.w	r1, #528384	; 0x81000
 8000ad2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000ad6:	f7ff fc45 	bl	8000364 <send>
				HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_r_arr()[offsetAddr]), get_length()-1);
				set_deplacement_state(DECELERATION);
			}
		}
	}
}
 8000ada:	e055      	b.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
		else if(get_target() < get_length() * 2)
 8000adc:	f000 fbbc 	bl	8001258 <get_target>
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	f000 fb61 	bl	80011a8 <get_length>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	429c      	cmp	r4, r3
 8000aec:	d226      	bcs.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x12c>
			if(get_steps() == get_steps_left())
 8000aee:	f000 fbe9 	bl	80012c4 <get_steps>
 8000af2:	4604      	mov	r4, r0
 8000af4:	f000 fbf2 	bl	80012dc <get_steps_left>
 8000af8:	4603      	mov	r3, r0
 8000afa:	429c      	cmp	r4, r3
 8000afc:	d144      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
				uint32_t offsetAddr = LENGTH_ARR_MAX - (get_steps_left()-1);
 8000afe:	f000 fbed 	bl	80012dc <get_steps_left>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 8000b08:	3302      	adds	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
				HAL_TIM_Base_Stop_DMA(&htim1);
 8000b0c:	4820      	ldr	r0, [pc, #128]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000b0e:	f002 fee5 	bl	80038dc <HAL_TIM_Base_Stop_DMA>
				HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_r_arr()[offsetAddr]), get_steps_left()-1);
 8000b12:	f000 fb6f 	bl	80011f4 <get_r_arr>
 8000b16:	4602      	mov	r2, r0
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	18d4      	adds	r4, r2, r3
 8000b1e:	f000 fbdd 	bl	80012dc <get_steps_left>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000b30:	f002 fe4c 	bl	80037cc <HAL_TIM_Base_Start_DMA>
				set_deplacement_state(DECELERATION);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 fb7f 	bl	8001238 <set_deplacement_state>
}
 8000b3a:	e025      	b.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
			if (get_length() == get_steps_left())
 8000b3c:	f000 fb34 	bl	80011a8 <get_length>
 8000b40:	4604      	mov	r4, r0
 8000b42:	f000 fbcb 	bl	80012dc <get_steps_left>
 8000b46:	4603      	mov	r3, r0
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	d11d      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
				uint32_t offsetAddr = LENGTH_ARR_MAX - (get_length()-1);
 8000b4c:	f000 fb2c 	bl	80011a8 <get_length>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 8000b56:	3302      	adds	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
				HAL_TIM_Base_Stop_DMA(&htim1);
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000b5c:	f002 febe 	bl	80038dc <HAL_TIM_Base_Stop_DMA>
				HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_r_arr()[offsetAddr]), get_length()-1);
 8000b60:	f000 fb48 	bl	80011f4 <get_r_arr>
 8000b64:	4602      	mov	r2, r0
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	18d4      	adds	r4, r2, r3
 8000b6c:	f000 fb1c 	bl	80011a8 <get_length>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4621      	mov	r1, r4
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000b7e:	f002 fe25 	bl	80037cc <HAL_TIM_Base_Start_DMA>
				set_deplacement_state(DECELERATION);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 fb58 	bl	8001238 <set_deplacement_state>
}
 8000b88:	bf00      	nop
 8000b8a:	371c      	adds	r7, #28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	2000233c 	.word	0x2000233c
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000020 	.word	0x20000020
 8000b9c:	20000040 	.word	0x20000040

08000ba0 <start_generate>:
/*
 * @brief démarre les interruptions et le DMA (accélère)
 * @param None
 * @retval None
 */
void start_generate(void){
 8000ba0:	b598      	push	{r3, r4, r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <start_generate+0x40>)
 8000ba8:	f002 feca 	bl	8003940 <HAL_TIM_OC_Start>
    HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_arr()[0]), get_length());
 8000bac:	f000 fb18 	bl	80011e0 <get_arr>
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	f000 faf9 	bl	80011a8 <get_length>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <start_generate+0x40>)
 8000bc0:	f002 fe04 	bl	80037cc <HAL_TIM_Base_Start_DMA>
    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <start_generate+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <start_generate+0x40>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 0201 	orr.w	r2, r2, #1
 8000bd2:	60da      	str	r2, [r3, #12]
    set_deplacement_state(ACCELERATION);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 fb2f 	bl	8001238 <set_deplacement_state>
}
 8000bda:	bf00      	nop
 8000bdc:	bd98      	pop	{r3, r4, r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000233c 	.word	0x2000233c

08000be4 <stop>:
/*
 * @brief s'arrête en décélérant, enregistre le nombre de pas qui aura était effectué une fois le robot arrêté
 * @param None
 * @retval None
 */
void stop(void){
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
	set_target(calcul_deceleration(get_tim_arr()));
 8000bea:	f000 fb0d 	bl	8001208 <get_tim_arr>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fd05 	bl	8000600 <calcul_deceleration>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fb39 	bl	8001270 <set_target>
	set_length(calcul_deceleration(get_tim_arr()));
 8000bfe:	f000 fb03 	bl	8001208 <get_tim_arr>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fcfb 	bl	8000600 <calcul_deceleration>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fad7 	bl	80011c0 <set_length>
	uint32_t offsetAddr = LENGTH_ARR_MAX - (get_length()-1);
 8000c12:	f000 fac9 	bl	80011a8 <get_length>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
	HAL_TIM_Base_Stop_DMA(&htim1);
 8000c20:	480e      	ldr	r0, [pc, #56]	; (8000c5c <stop+0x78>)
 8000c22:	f002 fe5b 	bl	80038dc <HAL_TIM_Base_Stop_DMA>
	HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_r_arr()[offsetAddr]), (get_length()-1));
 8000c26:	f000 fae5 	bl	80011f4 <get_r_arr>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	18d4      	adds	r4, r2, r3
 8000c32:	f000 fab9 	bl	80011a8 <get_length>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4621      	mov	r1, r4
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <stop+0x78>)
 8000c44:	f002 fdc2 	bl	80037cc <HAL_TIM_Base_Start_DMA>
	reset_steps();
 8000c48:	f000 fb22 	bl	8001290 <reset_steps>
	set_deplacement_state(DECELERATION);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 faf3 	bl	8001238 <set_deplacement_state>
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000233c 	.word	0x2000233c

08000c60 <emergency_stop>:
/*
 * @brief s'arrête net sans décélérer
 * @param None
 * @retval None
 */
void emergency_stop(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af04      	add	r7, sp, #16
	HAL_TIM_Base_Stop_DMA(&htim1);
 8000c66:	481d      	ldr	r0, [pc, #116]	; (8000cdc <emergency_stop+0x7c>)
 8000c68:	f002 fe38 	bl	80038dc <HAL_TIM_Base_Stop_DMA>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	481b      	ldr	r0, [pc, #108]	; (8000cdc <emergency_stop+0x7c>)
 8000c70:	f002 ff44 	bl	8003afc <HAL_TIM_OC_Stop>
	motor1.pinStepState = RESET;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <emergency_stop+0x80>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	771a      	strb	r2, [r3, #28]
	motor2.pinStepState = RESET;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <emergency_stop+0x84>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	771a      	strb	r2, [r3, #28]
	motor3.pinStepState = RESET;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <emergency_stop+0x88>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	771a      	strb	r2, [r3, #28]
	motor_step(&motor1);
 8000c86:	4816      	ldr	r0, [pc, #88]	; (8000ce0 <emergency_stop+0x80>)
 8000c88:	f000 f862 	bl	8000d50 <motor_step>
	motor_step(&motor2);
 8000c8c:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <emergency_stop+0x84>)
 8000c8e:	f000 f85f 	bl	8000d50 <motor_step>
	motor_step(&motor3);
 8000c92:	4815      	ldr	r0, [pc, #84]	; (8000ce8 <emergency_stop+0x88>)
 8000c94:	f000 f85c 	bl	8000d50 <motor_step>
    motor1.cnt = 0;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <emergency_stop+0x80>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
    motor2.cnt = 0;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <emergency_stop+0x84>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
    motor3.cnt = 0;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <emergency_stop+0x88>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
	set_deplacement_state(ARRET);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 fac4 	bl	8001238 <set_deplacement_state>
	uint8_t data[1];
	data[0] = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	713b      	strb	r3, [r7, #4]
	send(CAN_ADDR_RASPBERRY, REP_AVANCE, data, 1, true, 1, get_id_msg());
 8000cb4:	f000 fa5c 	bl	8001170 <get_id_msg>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	1d3a      	adds	r2, r7, #4
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f44f 2101 	mov.w	r1, #528384	; 0x81000
 8000ccc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000cd0:	f7ff fb48 	bl	8000364 <send>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000233c 	.word	0x2000233c
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000020 	.word	0x20000020
 8000ce8:	20000040 	.word	0x20000040

08000cec <avance>:
 * @brief incrémente le compteur du moteur
 * @param &motor adresse du motor
 * @retval ARRET_MOTOR le moteur est à l'arrêt
 * @retval MARCHE_MOTOR le moteur peut avancer
 */
Motor_State_t avance(Motor_t *motor){
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	int err;
	if(motor->diviseur==0){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <avance+0x1c>
		motor->pinStepState = RESET;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	771a      	strb	r2, [r3, #28]
		err = ARRET_MOTOR;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e01b      	b.n	8000d40 <avance+0x54>
	}
	else{
	    motor->cnt++;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	601a      	str	r2, [r3, #0]
	    motor->cnt %= motor->diviseur;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	7912      	ldrb	r2, [r2, #4]
 8000d1a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d1e:	fb01 f202 	mul.w	r2, r1, r2
 8000d22:	1a9a      	subs	r2, r3, r2
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
	    motor->pinStepState = motor->cnt == 0;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	771a      	strb	r2, [r3, #28]
	    err = MARCHE_MOTOR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
	}
    return err;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	b2db      	uxtb	r3, r3
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <motor_step>:
/*
 * @brief ecris sur la pin step du motor
 * @param &motor adresse du motor
 * @retval None
 */
void motor_step(Motor_t *motor){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->PIN_STEP_TYPE, motor->PIN_STEP, motor->pinStepState);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6958      	ldr	r0, [r3, #20]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	8a19      	ldrh	r1, [r3, #16]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7f1b      	ldrb	r3, [r3, #28]
 8000d64:	461a      	mov	r2, r3
 8000d66:	f001 fe5d 	bl	8002a24 <HAL_GPIO_WritePin>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <motor_dir>:
/*
 * @brief ecris sur la pin dir du motor
 * @param &motor adresse du motor
 * @retval None
 */
void motor_dir(Motor_t *motor){
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->PIN_DIR_TYPE, motor->PIN_DIR, motor->pinDirState);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6998      	ldr	r0, [r3, #24]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	8a59      	ldrh	r1, [r3, #18]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7f5b      	ldrb	r3, [r3, #29]
 8000d86:	461a      	mov	r2, r3
 8000d88:	f001 fe4c 	bl	8002a24 <HAL_GPIO_WritePin>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <motor_en>:
 * @brief ecris sur la pin enable de chaque motor
 * @param SET moteurs non clampés
 * @param RESET moteurs clampés
 * @retval None
 */
void motor_en(GPIO_PinState state){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, state);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	461a      	mov	r2, r3
 8000da2:	2108      	movs	r1, #8
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <motor_en+0x20>)
 8000da6:	f001 fe3d 	bl	8002a24 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	48000400 	.word	0x48000400

08000db8 <motor_micro_step>:
 * @param RESET, SET 4 microsteps (quarter speed)
 * @param SET, RESET 2 microsteps (half speed)
 * @param SET, SET 16 microsteps
 * @retval None
 */
void motor_micro_step(GPIO_PinState MS1state, GPIO_PinState MS2state){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, MS1state);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <motor_micro_step+0x30>)
 8000dd0:	f001 fe28 	bl	8002a24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, MS2state);
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2120      	movs	r1, #32
 8000dda:	4803      	ldr	r0, [pc, #12]	; (8000de8 <motor_micro_step+0x30>)
 8000ddc:	f001 fe22 	bl	8002a24 <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	48000400 	.word	0x48000400

08000dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_MspInit+0x44>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_MspInit+0x44>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_MspInit+0x44>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_MspInit+0x44>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x44>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x44>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <HAL_CAN_MspInit+0xc0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d149      	bne.n	8000eea <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e56:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <HAL_CAN_MspInit+0xc4>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a27      	ldr	r2, [pc, #156]	; (8000ef8 <HAL_CAN_MspInit+0xc4>)
 8000e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <HAL_CAN_MspInit+0xc4>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <HAL_CAN_MspInit+0xc4>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <HAL_CAN_MspInit+0xc4>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_CAN_MspInit+0xc4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e98:	2309      	movs	r3, #9
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f001 fc53 	bl	8002750 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2013      	movs	r0, #19
 8000eb0:	f001 f9df 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000eb4:	2013      	movs	r0, #19
 8000eb6:	f001 f9f8 	bl	80022aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2014      	movs	r0, #20
 8000ec0:	f001 f9d7 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ec4:	2014      	movs	r0, #20
 8000ec6:	f001 f9f0 	bl	80022aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2015      	movs	r0, #21
 8000ed0:	f001 f9cf 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ed4:	2015      	movs	r0, #21
 8000ed6:	f001 f9e8 	bl	80022aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2016      	movs	r0, #22
 8000ee0:	f001 f9c7 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000ee4:	2016      	movs	r0, #22
 8000ee6:	f001 f9e0 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40006400 	.word	0x40006400
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2e      	ldr	r2, [pc, #184]	; (8000fc4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d156      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f18:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel6;
 8000f26:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f28:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <HAL_TIM_Base_MspInit+0xd4>)
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_7;
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f2e:	2207      	movs	r2, #7
 8000f30:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f44:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4a:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f52:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000f60:	481a      	ldr	r0, [pc, #104]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f62:	f001 f9bd 	bl	80022e0 <HAL_DMA_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000f6c:	f7ff fd4a 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f74:	621a      	str	r2, [r3, #32]
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <HAL_TIM_Base_MspInit+0xd0>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2018      	movs	r0, #24
 8000f82:	f001 f976 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f86:	2018      	movs	r0, #24
 8000f88:	f001 f98f 	bl	80022aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2019      	movs	r0, #25
 8000f92:	f001 f96e 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f96:	2019      	movs	r0, #25
 8000f98:	f001 f987 	bl	80022aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	201a      	movs	r0, #26
 8000fa2:	f001 f966 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000fa6:	201a      	movs	r0, #26
 8000fa8:	f001 f97f 	bl	80022aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	201b      	movs	r0, #27
 8000fb2:	f001 f95e 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fb6:	201b      	movs	r0, #27
 8000fb8:	f001 f977 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	20002388 	.word	0x20002388
 8000fd0:	4002006c 	.word	0x4002006c

08000fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_TIM_MspPostInit+0x68>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11d      	bne.n	8001032 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a11      	ldr	r2, [pc, #68]	; (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800100e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f001 fb8f 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f9b4 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DMA1_Channel6_IRQHandler+0x10>)
 800109e:	f001 fa78 	bl	8002592 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20002388 	.word	0x20002388

080010ac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <CAN1_TX_IRQHandler+0x10>)
 80010b2:	f000 fdd4 	bl	8001c5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20002314 	.word	0x20002314

080010c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <CAN1_RX0_IRQHandler+0x10>)
 80010c6:	f000 fdca 	bl	8001c5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20002314 	.word	0x20002314

080010d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <CAN1_RX1_IRQHandler+0x10>)
 80010da:	f000 fdc0 	bl	8001c5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20002314 	.word	0x20002314

080010e8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <CAN1_SCE_IRQHandler+0x10>)
 80010ee:	f000 fdb6 	bl	8001c5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20002314 	.word	0x20002314

080010fc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001102:	f002 fde4 	bl	8003cce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000233c 	.word	0x2000233c

08001110 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001116:	f002 fdda 	bl	8003cce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000233c 	.word	0x2000233c

08001124 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM1_TRG_COM_IRQHandler+0x10>)
 800112a:	f002 fdd0 	bl	8003cce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000233c 	.word	0x2000233c

08001138 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM1_CC_IRQHandler+0x10>)
 800113e:	f002 fdc6 	bl	8003cce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000233c 	.word	0x2000233c

0800114c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <get_id_msg>:
/*
 * @brief récupère l'identifiant du message Raspy
 * @param None
 * @retval idMsg
 */
uint8_t get_id_msg(void){
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return idMsg;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <get_id_msg+0x14>)
 8001176:	781b      	ldrb	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200023f9 	.word	0x200023f9

08001188 <set_id_msg>:
/*
 * @brief modifie idMsg
 * @param id du message de la Raspy
 * @retval None
 */
void set_id_msg(uint8_t id){
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	idMsg = id;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <set_id_msg+0x1c>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	7013      	strb	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	200023f9 	.word	0x200023f9

080011a8 <get_length>:
/*
 * @brief récupère la longueur des accélèlérations/décélérations
 * @param None
 * @retval lenght
 */
uint32_t get_length(void){
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	return length;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <get_length+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200022ec 	.word	0x200022ec

080011c0 <set_length>:
/*
 * @brief modifie lenght, la longueur des accélèlérations/décélérations
 * @param l longueur
 * @retval None
 */
void set_length(uint32_t l){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	length = l;
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <set_length+0x1c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200022ec 	.word	0x200022ec

080011e0 <get_arr>:
/*
 * @brief récupère le pointeur du tableau d'accélération
 * @param None
 * @retval arr
 */
uint32_t* get_arr(void){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	return arr;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <get_arr+0x10>)
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20000064 	.word	0x20000064

080011f4 <get_r_arr>:
/*
 * @brief récupère le pointeur du tableau de décélèration
 * @param None
 * @retval rArr
 */
uint32_t* get_r_arr(void){
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	return rArr;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <get_r_arr+0x10>)
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200011a8 	.word	0x200011a8

08001208 <get_tim_arr>:
/*
 * @brief récupère l'ARR actuel du timer
 * @param None
 * @retval ARR
 */
uint32_t get_tim_arr(void){
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	return htim1.Instance->ARR;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <get_tim_arr+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	2000233c 	.word	0x2000233c

08001220 <get_deplacement_state>:
 * @retval {ARRET}
 * @retval {ACCELERATION}
 * @retval {MAINTIENT}
 * @retval {DECELERATION}
 */
Deplacement_State_t get_deplacement_state(void){
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	return deplacementState;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <get_deplacement_state+0x14>)
 8001226:	781b      	ldrb	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20002408 	.word	0x20002408

08001238 <set_deplacement_state>:
 * @param {ACCELERATION}
 * @param {MAINTIENT}
 * @param {DECELERATION}
 * @retval None
 */
void set_deplacement_state(Deplacement_State_t state){
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	deplacementState = state;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <set_deplacement_state+0x1c>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	7013      	strb	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20002408 	.word	0x20002408

08001258 <get_target>:
/*
 * @brief récupère le nombre de pas à effectuer
 * @param None
 * @retval target
 */
uint32_t get_target(void){
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	return target;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <get_target+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200023fc 	.word	0x200023fc

08001270 <set_target>:
/*
 * @brief modifie le nombre de pas a effectuer
 * @param t nombre de pas a effectuer
 * @retval None
 */
void set_target(uint32_t t){
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	target = t;
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <set_target+0x1c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200023fc 	.word	0x200023fc

08001290 <reset_steps>:
/*
 * @brief réinitialise le nombre de steps effectués
 * @param None
 * @retval None
 */
void reset_steps(void){
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	steps = 0;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <reset_steps+0x14>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20002400 	.word	0x20002400

080012a8 <count_steps>:
/*
 * @brief incrémente de 1 le nombre de steps effectués
 * @param None
 * @retval None
 */
void count_steps(void){
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	steps++;
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <count_steps+0x18>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <count_steps+0x18>)
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	20002400 	.word	0x20002400

080012c4 <get_steps>:
/*
 * @brief récupère le nombre de steps effectués
 * @param None
 * @retval steps
 */
uint32_t get_steps(void){
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	return steps;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <get_steps+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20002400 	.word	0x20002400

080012dc <get_steps_left>:
/*
 * @brief récupère le nombre de steps qu'il faut effectuer pouru atteindre le nombre de pas cible
 * @param None
 * @retval stepsLeft
 */
uint32_t get_steps_left(void){
 80012dc:	b598      	push	{r3, r4, r7, lr}
 80012de:	af00      	add	r7, sp, #0
	stepsLeft = get_target() - get_steps();
 80012e0:	f7ff ffba 	bl	8001258 <get_target>
 80012e4:	4604      	mov	r4, r0
 80012e6:	f7ff ffed 	bl	80012c4 <get_steps>
 80012ea:	4603      	mov	r3, r0
 80012ec:	1ae3      	subs	r3, r4, r3
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <get_steps_left+0x20>)
 80012f0:	6013      	str	r3, [r2, #0]
	return stepsLeft;
 80012f2:	4b02      	ldr	r3, [pc, #8]	; (80012fc <get_steps_left+0x20>)
 80012f4:	681b      	ldr	r3, [r3, #0]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd98      	pop	{r3, r4, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20002404 	.word	0x20002404

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff ff22 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f003 fd13 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff f983 	bl	800063c <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001338:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	200022f8 	.word	0x200022f8
  ldr r2, =_sidata
 8001344:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8001348:	200022f8 	.word	0x200022f8
  ldr r4, =_ebss
 800134c:	20002410 	.word	0x20002410

08001350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_IRQHandler>

08001352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 ff7d 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	200f      	movs	r0, #15
 8001364:	f000 f80e 	bl	8001384 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff fd3a 	bl	8000dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_InitTick+0x6c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_InitTick+0x70>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_InitTick+0x6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 ff89 	bl	80022c6 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d809      	bhi.n	80013d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 ff53 	bl	8002272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_InitTick+0x74>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e004      	b.n	80013e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e001      	b.n	80013e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200022f4 	.word	0x200022f4
 80013f4:	20000060 	.word	0x20000060
 80013f8:	200022f0 	.word	0x200022f0

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200022f4 	.word	0x200022f4
 8001420:	2000240c 	.word	0x2000240c

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	2000240c 	.word	0x2000240c

0800143c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0ed      	b.n	800162a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fcea 	bl	8000e34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001470:	f7ff ffd8 	bl	8001424 <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001476:	e012      	b.n	800149e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001478:	f7ff ffd4 	bl	8001424 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b0a      	cmp	r3, #10
 8001484:	d90b      	bls.n	800149e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2205      	movs	r2, #5
 8001496:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0c5      	b.n	800162a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0e5      	beq.n	8001478 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0202 	bic.w	r2, r2, #2
 80014ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014bc:	f7ff ffb2 	bl	8001424 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014c2:	e012      	b.n	80014ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014c4:	f7ff ffae 	bl	8001424 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b0a      	cmp	r3, #10
 80014d0:	d90b      	bls.n	80014ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2205      	movs	r2, #5
 80014e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e09f      	b.n	800162a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e5      	bne.n	80014c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7e1b      	ldrb	r3, [r3, #24]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e007      	b.n	8001522 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e5b      	ldrb	r3, [r3, #25]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e007      	b.n	800154c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800154a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7e9b      	ldrb	r3, [r3, #26]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0220 	orr.w	r2, r2, #32
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e007      	b.n	8001576 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0220 	bic.w	r2, r2, #32
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7edb      	ldrb	r3, [r3, #27]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d108      	bne.n	8001590 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0210 	bic.w	r2, r2, #16
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e007      	b.n	80015a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0210 	orr.w	r2, r2, #16
 800159e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7f1b      	ldrb	r3, [r3, #28]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0208 	orr.w	r2, r2, #8
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e007      	b.n	80015ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0208 	bic.w	r2, r2, #8
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7f5b      	ldrb	r3, [r3, #29]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0204 	orr.w	r2, r2, #4
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0204 	bic.w	r2, r2, #4
 80015f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	ea42 0103 	orr.w	r1, r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001632:	b480      	push	{r7}
 8001634:	b087      	sub	sp, #28
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001648:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800164a:	7cfb      	ldrb	r3, [r7, #19]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d003      	beq.n	8001658 <HAL_CAN_ConfigFilter+0x26>
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	2b02      	cmp	r3, #2
 8001654:	f040 80aa 	bne.w	80017ac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800165e:	f043 0201 	orr.w	r2, r3, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	2201      	movs	r2, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d123      	bne.n	80016da <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	401a      	ands	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3248      	adds	r2, #72	; 0x48
 80016ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016d0:	6979      	ldr	r1, [r7, #20]
 80016d2:	3348      	adds	r3, #72	; 0x48
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d122      	bne.n	8001728 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001702:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3248      	adds	r2, #72	; 0x48
 8001708:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800171c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800171e:	6979      	ldr	r1, [r7, #20]
 8001720:	3348      	adds	r3, #72	; 0x48
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001742:	e007      	b.n	8001754 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	431a      	orrs	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43db      	mvns	r3, r3
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800176e:	e007      	b.n	8001780 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d107      	bne.n	8001798 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	431a      	orrs	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800179e:	f023 0201 	bic.w	r2, r3, #1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e006      	b.n	80017ba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
  }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d12e      	bne.n	8001838 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2202      	movs	r2, #2
 80017de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017f2:	f7ff fe17 	bl	8001424 <HAL_GetTick>
 80017f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017f8:	e012      	b.n	8001820 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017fa:	f7ff fe13 	bl	8001424 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b0a      	cmp	r3, #10
 8001806:	d90b      	bls.n	8001820 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2205      	movs	r2, #5
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e012      	b.n	8001846 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e5      	bne.n	80017fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e006      	b.n	8001846 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800184e:	b480      	push	{r7}
 8001850:	b089      	sub	sp, #36	; 0x24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001862:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800186c:	7ffb      	ldrb	r3, [r7, #31]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d003      	beq.n	800187a <HAL_CAN_AddTxMessage+0x2c>
 8001872:	7ffb      	ldrb	r3, [r7, #31]
 8001874:	2b02      	cmp	r3, #2
 8001876:	f040 80ad 	bne.w	80019d4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10a      	bne.n	800189a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 8095 	beq.w	80019c4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	0e1b      	lsrs	r3, r3, #24
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018a4:	2201      	movs	r2, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	409a      	lsls	r2, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	6809      	ldr	r1, [r1, #0]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3318      	adds	r3, #24
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	440b      	add	r3, r1
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e00f      	b.n	80018f2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018e2:	68f9      	ldr	r1, [r7, #12]
 80018e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80018e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3318      	adds	r3, #24
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	440b      	add	r3, r1
 80018f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3318      	adds	r3, #24
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	440b      	add	r3, r1
 8001902:	3304      	adds	r3, #4
 8001904:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	7d1b      	ldrb	r3, [r3, #20]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d111      	bne.n	8001932 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3318      	adds	r3, #24
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	3304      	adds	r3, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	6811      	ldr	r1, [r2, #0]
 8001922:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3318      	adds	r3, #24
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	440b      	add	r3, r1
 800192e:	3304      	adds	r3, #4
 8001930:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3307      	adds	r3, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	061a      	lsls	r2, r3, #24
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3306      	adds	r3, #6
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3305      	adds	r3, #5
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	4313      	orrs	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	3204      	adds	r2, #4
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	4610      	mov	r0, r2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	6811      	ldr	r1, [r2, #0]
 800195a:	ea43 0200 	orr.w	r2, r3, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	440b      	add	r3, r1
 8001964:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001968:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3303      	adds	r3, #3
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	061a      	lsls	r2, r3, #24
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3302      	adds	r3, #2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3301      	adds	r3, #1
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	4313      	orrs	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	4610      	mov	r0, r2
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	6811      	ldr	r1, [r2, #0]
 8001990:	ea43 0200 	orr.w	r2, r3, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	440b      	add	r3, r1
 800199a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800199e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3318      	adds	r3, #24
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	6811      	ldr	r1, [r2, #0]
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3318      	adds	r3, #24
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	440b      	add	r3, r1
 80019be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e00e      	b.n	80019e2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e006      	b.n	80019e2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019ee:	b480      	push	{r7}
 80019f0:	b087      	sub	sp, #28
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a02:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d003      	beq.n	8001a12 <HAL_CAN_GetRxMessage+0x24>
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	f040 80f3 	bne.w	8001bf8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10e      	bne.n	8001a36 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d116      	bne.n	8001a54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0e7      	b.n	8001c06 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d8      	b.n	8001c06 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	331b      	adds	r3, #27
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0204 	and.w	r2, r3, #4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	331b      	adds	r3, #27
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4413      	add	r3, r2
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0d5b      	lsrs	r3, r3, #21
 8001a82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	331b      	adds	r3, #27
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	08db      	lsrs	r3, r3, #3
 8001a9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	331b      	adds	r3, #27
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0202 	and.w	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	331b      	adds	r3, #27
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	331b      	adds	r3, #27
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	331b      	adds	r3, #27
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	3304      	adds	r3, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0a1a      	lsrs	r2, r3, #8
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0c1a      	lsrs	r2, r3, #16
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3302      	adds	r3, #2
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0e1a      	lsrs	r2, r3, #24
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	3303      	adds	r3, #3
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0a1a      	lsrs	r2, r3, #8
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	3305      	adds	r3, #5
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0c1a      	lsrs	r2, r3, #16
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3306      	adds	r3, #6
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0e1a      	lsrs	r2, r3, #24
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d108      	bne.n	8001be4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0220 	orr.w	r2, r2, #32
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	e007      	b.n	8001bf4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0220 	orr.w	r2, r2, #32
 8001bf2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e006      	b.n	8001c06 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c22:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d002      	beq.n	8001c30 <HAL_CAN_ActivateNotification+0x1e>
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d109      	bne.n	8001c44 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6959      	ldr	r1, [r3, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e006      	b.n	8001c52 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b08a      	sub	sp, #40	; 0x28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d07c      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d023      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f983 	bl	8001fcc <HAL_CAN_TxMailbox0CompleteCallback>
 8001cc6:	e016      	b.n	8001cf6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cda:	e00c      	b.n	8001cf6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e002      	b.n	8001cf6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f989 	bl	8002008 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d024      	beq.n	8001d4a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f963 	bl	8001fe0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d1a:	e016      	b.n	8001d4a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2e:	e00c      	b.n	8001d4a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	e002      	b.n	8001d4a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f969 	bl	800201c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d024      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f943 	bl	8001ff4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d6e:	e016      	b.n	8001d9e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
 8001d82:	e00c      	b.n	8001d9e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
 8001d96:	e002      	b.n	8001d9e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f949 	bl	8002030 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00c      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00b      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2208      	movs	r2, #8
 8001ddc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f930 	bl	8002044 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7fe f9e5 	bl	80001cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2210      	movs	r2, #16
 8001e24:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00b      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f912 	bl	800206c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f8f9 	bl	8002058 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00b      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2210      	movs	r2, #16
 8001e80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8fc 	bl	8002080 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f8f5 	bl	8002094 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d07b      	beq.n	8001fac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d072      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d043      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03e      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2c:	2b60      	cmp	r3, #96	; 0x60
 8001f2e:	d02b      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x32a>
 8001f30:	2b60      	cmp	r3, #96	; 0x60
 8001f32:	d82e      	bhi.n	8001f92 <HAL_CAN_IRQHandler+0x334>
 8001f34:	2b50      	cmp	r3, #80	; 0x50
 8001f36:	d022      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x320>
 8001f38:	2b50      	cmp	r3, #80	; 0x50
 8001f3a:	d82a      	bhi.n	8001f92 <HAL_CAN_IRQHandler+0x334>
 8001f3c:	2b40      	cmp	r3, #64	; 0x40
 8001f3e:	d019      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x316>
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d826      	bhi.n	8001f92 <HAL_CAN_IRQHandler+0x334>
 8001f44:	2b30      	cmp	r3, #48	; 0x30
 8001f46:	d010      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x30c>
 8001f48:	2b30      	cmp	r3, #48	; 0x30
 8001f4a:	d822      	bhi.n	8001f92 <HAL_CAN_IRQHandler+0x334>
 8001f4c:	2b10      	cmp	r3, #16
 8001f4e:	d002      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x2f8>
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d005      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f54:	e01d      	b.n	8001f92 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f5e:	e019      	b.n	8001f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f68:	e014      	b.n	8001f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f72:	e00f      	b.n	8001f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f7c:	e00a      	b.n	8001f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f86:	e005      	b.n	8001f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f90:	e000      	b.n	8001f94 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f92:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fa2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f872 	bl	80020a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4907      	ldr	r1, [pc, #28]	; (8002158 <__NVIC_EnableIRQ+0x38>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff29 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff3e 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff8e 	bl	80021b0 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5d 	bl	800215c <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff31 	bl	8002120 <__NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffa2 	bl	8002218 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e098      	b.n	8002424 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b4d      	ldr	r3, [pc, #308]	; (8002430 <HAL_DMA_Init+0x150>)
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d80f      	bhi.n	800231e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <HAL_DMA_Init+0x154>)
 8002306:	4413      	add	r3, r2
 8002308:	4a4b      	ldr	r2, [pc, #300]	; (8002438 <HAL_DMA_Init+0x158>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	009a      	lsls	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a48      	ldr	r2, [pc, #288]	; (800243c <HAL_DMA_Init+0x15c>)
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
 800231c:	e00e      	b.n	800233c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_DMA_Init+0x160>)
 8002326:	4413      	add	r3, r2
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_DMA_Init+0x158>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	009a      	lsls	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a42      	ldr	r2, [pc, #264]	; (8002444 <HAL_DMA_Init+0x164>)
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002396:	d039      	beq.n	800240c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_DMA_Init+0x15c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d11a      	bne.n	80023d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_DMA_Init+0x168>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f003 031c 	and.w	r3, r3, #28
 80023ae:	210f      	movs	r1, #15
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4924      	ldr	r1, [pc, #144]	; (8002448 <HAL_DMA_Init+0x168>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_DMA_Init+0x168>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	f003 031c 	and.w	r3, r3, #28
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	491d      	ldr	r1, [pc, #116]	; (8002448 <HAL_DMA_Init+0x168>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
 80023d6:	e019      	b.n	800240c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_DMA_Init+0x16c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	f003 031c 	and.w	r3, r3, #28
 80023e4:	210f      	movs	r1, #15
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4917      	ldr	r1, [pc, #92]	; (800244c <HAL_DMA_Init+0x16c>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_DMA_Init+0x16c>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f003 031c 	and.w	r3, r3, #28
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	4911      	ldr	r1, [pc, #68]	; (800244c <HAL_DMA_Init+0x16c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40020407 	.word	0x40020407
 8002434:	bffdfff8 	.word	0xbffdfff8
 8002438:	cccccccd 	.word	0xcccccccd
 800243c:	40020000 	.word	0x40020000
 8002440:	bffdfbf8 	.word	0xbffdfbf8
 8002444:	40020400 	.word	0x40020400
 8002448:	400200a8 	.word	0x400200a8
 800244c:	400204a8 	.word	0x400204a8

08002450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_DMA_Start_IT+0x20>
 800246c:	2302      	movs	r3, #2
 800246e:	e04b      	b.n	8002508 <HAL_DMA_Start_IT+0xb8>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d13a      	bne.n	80024fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f921 	bl	80026f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 020e 	orr.w	r2, r2, #14
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e00f      	b.n	80024e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 020a 	orr.w	r2, r2, #10
 80024e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e005      	b.n	8002506 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d005      	beq.n	8002534 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2204      	movs	r2, #4
 800252c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e029      	b.n	8002588 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 020e 	bic.w	r2, r2, #14
 8002542:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f003 021c 	and.w	r2, r3, #28
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f202 	lsl.w	r2, r1, r2
 8002566:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
    }
  }
  return status;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f003 031c 	and.w	r3, r3, #28
 80025b2:	2204      	movs	r2, #4
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d026      	beq.n	800260c <HAL_DMA_IRQHandler+0x7a>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d021      	beq.n	800260c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0204 	bic.w	r2, r2, #4
 80025e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f003 021c 	and.w	r2, r3, #28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2104      	movs	r1, #4
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d071      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800260a:	e06c      	b.n	80026e6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f003 031c 	and.w	r3, r3, #28
 8002614:	2202      	movs	r2, #2
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d02e      	beq.n	800267e <HAL_DMA_IRQHandler+0xec>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d029      	beq.n	800267e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 020a 	bic.w	r2, r2, #10
 8002646:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f003 021c 	and.w	r2, r3, #28
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2102      	movs	r1, #2
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d038      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800267c:	e033      	b.n	80026e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f003 031c 	and.w	r3, r3, #28
 8002686:	2208      	movs	r2, #8
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d02a      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x156>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d025      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 020e 	bic.w	r2, r2, #14
 80026aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	f003 021c 	and.w	r2, r3, #28
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f202 	lsl.w	r2, r1, r2
 80026be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
}
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f003 021c 	and.w	r2, r3, #28
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f202 	lsl.w	r2, r1, r2
 8002710:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b10      	cmp	r3, #16
 8002720:	d108      	bne.n	8002734 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002732:	e007      	b.n	8002744 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275e:	e148      	b.n	80029f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 813a 	beq.w	80029ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d005      	beq.n	8002790 <HAL_GPIO_Init+0x40>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d130      	bne.n	80027f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c6:	2201      	movs	r2, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0201 	and.w	r2, r3, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d017      	beq.n	800282e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d123      	bne.n	8002882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	08da      	lsrs	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	6939      	ldr	r1, [r7, #16]
 800287e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8094 	beq.w	80029ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c4:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <HAL_GPIO_Init+0x2c0>)
 80028c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c8:	4a51      	ldr	r2, [pc, #324]	; (8002a10 <HAL_GPIO_Init+0x2c0>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6613      	str	r3, [r2, #96]	; 0x60
 80028d0:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <HAL_GPIO_Init+0x2c0>)
 80028d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028dc:	4a4d      	ldr	r2, [pc, #308]	; (8002a14 <HAL_GPIO_Init+0x2c4>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	220f      	movs	r2, #15
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002906:	d00d      	beq.n	8002924 <HAL_GPIO_Init+0x1d4>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a43      	ldr	r2, [pc, #268]	; (8002a18 <HAL_GPIO_Init+0x2c8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <HAL_GPIO_Init+0x1d0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a42      	ldr	r2, [pc, #264]	; (8002a1c <HAL_GPIO_Init+0x2cc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_GPIO_Init+0x1cc>
 8002918:	2302      	movs	r3, #2
 800291a:	e004      	b.n	8002926 <HAL_GPIO_Init+0x1d6>
 800291c:	2307      	movs	r3, #7
 800291e:	e002      	b.n	8002926 <HAL_GPIO_Init+0x1d6>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_GPIO_Init+0x1d6>
 8002924:	2300      	movs	r3, #0
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	f002 0203 	and.w	r2, r2, #3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4093      	lsls	r3, r2
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002936:	4937      	ldr	r1, [pc, #220]	; (8002a14 <HAL_GPIO_Init+0x2c4>)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002968:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002992:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <HAL_GPIO_Init+0x2d0>)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f47f aeaf 	bne.w	8002760 <HAL_GPIO_Init+0x10>
  }
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010000 	.word	0x40010000
 8002a18:	48000400 	.word	0x48000400
 8002a1c:	48000800 	.word	0x48000800
 8002a20:	40010400 	.word	0x40010400

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40007000 	.word	0x40007000

08002a70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7e:	d130      	bne.n	8002ae2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8c:	d038      	beq.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a96:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2232      	movs	r2, #50	; 0x32
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9b      	lsrs	r3, r3, #18
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab4:	e002      	b.n	8002abc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac8:	d102      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f2      	bne.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002adc:	d110      	bne.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e00f      	b.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d007      	beq.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af8:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40007000 	.word	0x40007000
 8002b14:	20000060 	.word	0x20000060
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f000 bc02 	b.w	8003334 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b30:	4b96      	ldr	r3, [pc, #600]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b3a:	4b94      	ldr	r3, [pc, #592]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80e4 	beq.w	8002d1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4c>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	f040 808b 	bne.w	8002c76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	f040 8087 	bne.w	8002c76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b68:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_OscConfig+0x64>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e3d9      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1a      	ldr	r2, [r3, #32]
 8002b84:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_RCC_OscConfig+0x7e>
 8002b90:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b98:	e005      	b.n	8002ba6 <HAL_RCC_OscConfig+0x8a>
 8002b9a:	4b7c      	ldr	r3, [pc, #496]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d223      	bcs.n	8002bf2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fd54 	bl	800365c <RCC_SetFlashLatencyFromMSIRange>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e3ba      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bbe:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a72      	ldr	r2, [pc, #456]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	496d      	ldr	r1, [pc, #436]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bdc:	4b6b      	ldr	r3, [pc, #428]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	4968      	ldr	r1, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
 8002bf0:	e025      	b.n	8002c3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf2:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002bf8:	f043 0308 	orr.w	r3, r3, #8
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4960      	ldr	r1, [pc, #384]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c10:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	495b      	ldr	r1, [pc, #364]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fd14 	bl	800365c <RCC_SetFlashLatencyFromMSIRange>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e37a      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c3e:	f000 fc81 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b51      	ldr	r3, [pc, #324]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	4950      	ldr	r1, [pc, #320]	; (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002c50:	5ccb      	ldrb	r3, [r1, r3]
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a4e      	ldr	r2, [pc, #312]	; (8002d94 <HAL_RCC_OscConfig+0x278>)
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fb8e 	bl	8001384 <HAL_InitTick>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d052      	beq.n	8002d18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	e35e      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d032      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c7e:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a42      	ldr	r2, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fbcb 	bl	8001424 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c92:	f7fe fbc7 	bl	8001424 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e347      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cb0:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a35      	ldr	r2, [pc, #212]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4930      	ldr	r1, [pc, #192]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	492b      	ldr	r1, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
 8002ce2:	e01a      	b.n	8002d1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a28      	ldr	r2, [pc, #160]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fb98 	bl	8001424 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fb94 	bl	8001424 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e314      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x1dc>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d073      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_OscConfig+0x21c>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d10e      	bne.n	8002d50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d063      	beq.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d15f      	bne.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e2f1      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x24c>
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e025      	b.n	8002db4 <HAL_RCC_OscConfig+0x298>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d70:	d114      	bne.n	8002d9c <HAL_RCC_OscConfig+0x280>
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a02      	ldr	r2, [pc, #8]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e013      	b.n	8002db4 <HAL_RCC_OscConfig+0x298>
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08004dc8 	.word	0x08004dc8
 8002d94:	20000060 	.word	0x20000060
 8002d98:	200022f0 	.word	0x200022f0
 8002d9c:	4ba0      	ldr	r3, [pc, #640]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a9f      	ldr	r2, [pc, #636]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b9d      	ldr	r3, [pc, #628]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a9c      	ldr	r2, [pc, #624]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fb32 	bl	8001424 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fb2e 	bl	8001424 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e2ae      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd6:	4b92      	ldr	r3, [pc, #584]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x2a8>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fb1e 	bl	8001424 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe fb1a 	bl	8001424 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e29a      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfe:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x2d0>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d060      	beq.n	8002edc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_OscConfig+0x310>
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d119      	bne.n	8002e5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d116      	bne.n	8002e5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e2c:	4b7c      	ldr	r3, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_OscConfig+0x328>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e277      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b76      	ldr	r3, [pc, #472]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	4973      	ldr	r1, [pc, #460]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e58:	e040      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d023      	beq.n	8002eaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e62:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6e      	ldr	r2, [pc, #440]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fad9 	bl	8001424 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe fad5 	bl	8001424 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e255      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e88:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b62      	ldr	r3, [pc, #392]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	495f      	ldr	r1, [pc, #380]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
 8002ea8:	e018      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b5d      	ldr	r3, [pc, #372]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a5c      	ldr	r2, [pc, #368]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fab5 	bl	8001424 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fab1 	bl	8001424 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e231      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d03c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	4a4a      	ldr	r2, [pc, #296]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fa90 	bl	8001424 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe fa8c 	bl	8001424 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e20c      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <HAL_RCC_OscConfig+0x3ec>
 8002f28:	e01b      	b.n	8002f62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f30:	4a3b      	ldr	r2, [pc, #236]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fa73 	bl	8001424 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f42:	f7fe fa6f 	bl	8001424 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1ef      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ef      	bne.n	8002f42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80a6 	beq.w	80030bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f74:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	4a26      	ldr	r2, [pc, #152]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_RCC_OscConfig+0x508>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d118      	bne.n	8002fda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_RCC_OscConfig+0x508>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_RCC_OscConfig+0x508>)
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fa36 	bl	8001424 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7fe fa32 	bl	8001424 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e1b2      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_RCC_OscConfig+0x508>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4d8>
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff2:	e029      	b.n	8003048 <HAL_RCC_OscConfig+0x52c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d115      	bne.n	8003028 <HAL_RCC_OscConfig+0x50c>
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a07      	ldr	r2, [pc, #28]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	4a03      	ldr	r2, [pc, #12]	; (8003020 <HAL_RCC_OscConfig+0x504>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301c:	e014      	b.n	8003048 <HAL_RCC_OscConfig+0x52c>
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
 8003028:	4b9a      	ldr	r3, [pc, #616]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	4a99      	ldr	r2, [pc, #612]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003038:	4b96      	ldr	r3, [pc, #600]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	4a95      	ldr	r2, [pc, #596]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d016      	beq.n	800307e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe f9e8 	bl	8001424 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe f9e4 	bl	8001424 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e162      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306e:	4b89      	ldr	r3, [pc, #548]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ed      	beq.n	8003058 <HAL_RCC_OscConfig+0x53c>
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307e:	f7fe f9d1 	bl	8001424 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe f9cd 	bl	8001424 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e14b      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800309c:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ed      	bne.n	8003086 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030aa:	7ffb      	ldrb	r3, [r7, #31]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4b78      	ldr	r3, [pc, #480]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a77      	ldr	r2, [pc, #476]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d03c      	beq.n	8003142 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01c      	beq.n	800310a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030d0:	4b70      	ldr	r3, [pc, #448]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 80030d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d6:	4a6f      	ldr	r2, [pc, #444]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fe f9a0 	bl	8001424 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e8:	f7fe f99c 	bl	8001424 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e11c      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030fa:	4b66      	ldr	r3, [pc, #408]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 80030fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ef      	beq.n	80030e8 <HAL_RCC_OscConfig+0x5cc>
 8003108:	e01b      	b.n	8003142 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800310a:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 800310c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003110:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7fe f983 	bl	8001424 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003122:	f7fe f97f 	bl	8001424 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0ff      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003134:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ef      	bne.n	8003122 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80f3 	beq.w	8003332 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	2b02      	cmp	r3, #2
 8003152:	f040 80c9 	bne.w	80032e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003156:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 0203 	and.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	429a      	cmp	r2, r3
 8003168:	d12c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	3b01      	subs	r3, #1
 8003176:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d123      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d11b      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d113      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	3b01      	subs	r3, #1
 80031aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d109      	bne.n	80031c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	3b01      	subs	r3, #1
 80031be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d06b      	beq.n	800329c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d062      	beq.n	8003290 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031ca:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0ac      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031da:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 80031e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031e6:	f7fe f91d 	bl	8001424 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe f919 	bl	8001424 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e099      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x77c>)
 8003212:	4013      	ands	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800321c:	3a01      	subs	r2, #1
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	4311      	orrs	r1, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003226:	0212      	lsls	r2, r2, #8
 8003228:	4311      	orrs	r1, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800322e:	0852      	lsrs	r2, r2, #1
 8003230:	3a01      	subs	r2, #1
 8003232:	0552      	lsls	r2, r2, #21
 8003234:	4311      	orrs	r1, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800323a:	0852      	lsrs	r2, r2, #1
 800323c:	3a01      	subs	r2, #1
 800323e:	0652      	lsls	r2, r2, #25
 8003240:	4311      	orrs	r1, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003246:	06d2      	lsls	r2, r2, #27
 8003248:	430a      	orrs	r2, r1
 800324a:	4912      	ldr	r1, [pc, #72]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 800324c:	4313      	orrs	r3, r2
 800324e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003266:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003268:	f7fe f8dc 	bl	8001424 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe f8d8 	bl	8001424 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e058      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <HAL_RCC_OscConfig+0x778>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800328e:	e050      	b.n	8003332 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e04f      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
 8003294:	40021000 	.word	0x40021000
 8003298:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329c:	4b27      	ldr	r3, [pc, #156]	; (800333c <HAL_RCC_OscConfig+0x820>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d144      	bne.n	8003332 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032a8:	4b24      	ldr	r3, [pc, #144]	; (800333c <HAL_RCC_OscConfig+0x820>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <HAL_RCC_OscConfig+0x820>)
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_RCC_OscConfig+0x820>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <HAL_RCC_OscConfig+0x820>)
 80032ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032c0:	f7fe f8b0 	bl	8001424 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe f8ac 	bl	8001424 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e02c      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032da:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_RCC_OscConfig+0x820>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x7ac>
 80032e6:	e024      	b.n	8003332 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d01f      	beq.n	800332e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_RCC_OscConfig+0x820>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <HAL_RCC_OscConfig+0x820>)
 80032f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe f893 	bl	8001424 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe f88f 	bl	8001424 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e00f      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_RCC_OscConfig+0x820>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f0      	bne.n	8003302 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_RCC_OscConfig+0x820>)
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4905      	ldr	r1, [pc, #20]	; (800333c <HAL_RCC_OscConfig+0x820>)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x824>)
 8003328:	4013      	ands	r3, r2
 800332a:	60cb      	str	r3, [r1, #12]
 800332c:	e001      	b.n	8003332 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	feeefffc 	.word	0xfeeefffc

08003344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0e7      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b75      	ldr	r3, [pc, #468]	; (8003530 <HAL_RCC_ClockConfig+0x1ec>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b72      	ldr	r3, [pc, #456]	; (8003530 <HAL_RCC_ClockConfig+0x1ec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0207 	bic.w	r2, r3, #7
 800336e:	4970      	ldr	r1, [pc, #448]	; (8003530 <HAL_RCC_ClockConfig+0x1ec>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b6e      	ldr	r3, [pc, #440]	; (8003530 <HAL_RCC_ClockConfig+0x1ec>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0cf      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d010      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	4b66      	ldr	r3, [pc, #408]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d908      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b63      	ldr	r3, [pc, #396]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4960      	ldr	r1, [pc, #384]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d04c      	beq.n	800345c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ca:	4b5a      	ldr	r3, [pc, #360]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d121      	bne.n	800341a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0a6      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e2:	4b54      	ldr	r3, [pc, #336]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d115      	bne.n	800341a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e09a      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fa:	4b4e      	ldr	r3, [pc, #312]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e08e      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e086      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4943      	ldr	r1, [pc, #268]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fd fffa 	bl	8001424 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fd fff6 	bl	8001424 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e06e      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	4b31      	ldr	r3, [pc, #196]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003474:	429a      	cmp	r2, r3
 8003476:	d208      	bcs.n	800348a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	492b      	ldr	r1, [pc, #172]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_RCC_ClockConfig+0x1ec>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d210      	bcs.n	80034ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_RCC_ClockConfig+0x1ec>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 0207 	bic.w	r2, r3, #7
 80034a0:	4923      	ldr	r1, [pc, #140]	; (8003530 <HAL_RCC_ClockConfig+0x1ec>)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <HAL_RCC_ClockConfig+0x1ec>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e036      	b.n	8003528 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	4918      	ldr	r1, [pc, #96]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d009      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4910      	ldr	r1, [pc, #64]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f8:	f000 f824 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	490b      	ldr	r1, [pc, #44]	; (8003538 <HAL_RCC_ClockConfig+0x1f4>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
 8003514:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 8003516:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1fc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd ff31 	bl	8001384 <HAL_InitTick>
 8003522:	4603      	mov	r3, r0
 8003524:	72fb      	strb	r3, [r7, #11]

  return status;
 8003526:	7afb      	ldrb	r3, [r7, #11]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40022000 	.word	0x40022000
 8003534:	40021000 	.word	0x40021000
 8003538:	08004dc8 	.word	0x08004dc8
 800353c:	20000060 	.word	0x20000060
 8003540:	200022f0 	.word	0x200022f0

08003544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	2300      	movs	r3, #0
 8003550:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800355c:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x34>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d121      	bne.n	80035b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d11e      	bne.n	80035b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003578:	4b34      	ldr	r3, [pc, #208]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e005      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003594:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035a0:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10d      	bne.n	80035cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035b4:	e00a      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d102      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_GetSysClockFreq+0x110>)
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	e004      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035c8:	4b23      	ldr	r3, [pc, #140]	; (8003658 <HAL_RCC_GetSysClockFreq+0x114>)
 80035ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d134      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d003      	beq.n	80035ea <HAL_RCC_GetSysClockFreq+0xa6>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d003      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0xac>
 80035e8:	e005      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ec:	617b      	str	r3, [r7, #20]
      break;
 80035ee:	e005      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_GetSysClockFreq+0x114>)
 80035f2:	617b      	str	r3, [r7, #20]
      break;
 80035f4:	e002      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	617b      	str	r3, [r7, #20]
      break;
 80035fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	3301      	adds	r3, #1
 8003608:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	fb03 f202 	mul.w	r2, r3, r2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCC_GetSysClockFreq+0x108>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	0e5b      	lsrs	r3, r3, #25
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	3301      	adds	r3, #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	fbb2 f3f3 	udiv	r3, r2, r3
 800363a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800363c:	69bb      	ldr	r3, [r7, #24]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	08004dd8 	.word	0x08004dd8
 8003654:	00f42400 	.word	0x00f42400
 8003658:	007a1200 	.word	0x007a1200

0800365c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003668:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003674:	f7ff f9ee 	bl	8002a54 <HAL_PWREx_GetVoltageRange>
 8003678:	6178      	str	r0, [r7, #20]
 800367a:	e014      	b.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	4a24      	ldr	r2, [pc, #144]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003686:	6593      	str	r3, [r2, #88]	; 0x58
 8003688:	4b22      	ldr	r3, [pc, #136]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003694:	f7ff f9de 	bl	8002a54 <HAL_PWREx_GetVoltageRange>
 8003698:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ac:	d10b      	bne.n	80036c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b80      	cmp	r3, #128	; 0x80
 80036b2:	d919      	bls.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2ba0      	cmp	r3, #160	; 0xa0
 80036b8:	d902      	bls.n	80036c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ba:	2302      	movs	r3, #2
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	e013      	b.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036c0:	2301      	movs	r3, #1
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	e010      	b.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d902      	bls.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036cc:	2303      	movs	r3, #3
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e00a      	b.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d102      	bne.n	80036de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036d8:	2302      	movs	r3, #2
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	e004      	b.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d101      	bne.n	80036e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036e4:	2301      	movs	r3, #1
 80036e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 0207 	bic.w	r2, r3, #7
 80036f0:	4909      	ldr	r1, [pc, #36]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	40022000 	.word	0x40022000

0800371c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e049      	b.n	80037c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fbda 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3304      	adds	r3, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f000 fe5e 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	4613      	mov	r3, r2
 80037d8:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	e067      	b.n	80038ba <HAL_TIM_Base_Start_DMA+0xee>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d125      	bne.n	8003842 <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) || (Length == 0U))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_TIM_Base_Start_DMA+0x36>
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e059      	b.n	80038ba <HAL_TIM_Base_Start_DMA+0xee>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <HAL_TIM_Base_Start_DMA+0xf8>)
 8003814:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <HAL_TIM_Base_Start_DMA+0xfc>)
 800381c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_TIM_Base_Start_DMA+0x100>)
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a18      	ldr	r0, [r3, #32]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	332c      	adds	r3, #44	; 0x2c
 8003832:	461a      	mov	r2, r3
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	f7fe fe0b 	bl	8002450 <HAL_DMA_Start_IT>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_TIM_Base_Start_DMA+0x7e>
 8003840:	e001      	b.n	8003846 <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e039      	b.n	80038ba <HAL_TIM_Base_Start_DMA+0xee>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e037      	b.n	80038ba <HAL_TIM_Base_Start_DMA+0xee>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003858:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <HAL_TIM_Base_Start_DMA+0x104>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_TIM_Base_Start_DMA+0xac>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d004      	beq.n	8003878 <HAL_TIM_Base_Start_DMA+0xac>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_TIM_Base_Start_DMA+0x108>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d115      	bne.n	80038a4 <HAL_TIM_Base_Start_DMA+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_TIM_Base_Start_DMA+0x10c>)
 8003880:	4013      	ands	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b06      	cmp	r3, #6
 8003888:	d015      	beq.n	80038b6 <HAL_TIM_Base_Start_DMA+0xea>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003890:	d011      	beq.n	80038b6 <HAL_TIM_Base_Start_DMA+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_Base_Start_DMA+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e000      	b.n	80038b8 <HAL_TIM_Base_Start_DMA+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	080043d1 	.word	0x080043d1
 80038c8:	080043ff 	.word	0x080043ff
 80038cc:	0800433f 	.word	0x0800433f
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40014000 	.word	0x40014000
 80038d8:	00010007 	.word	0x00010007

080038dc <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f2:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fe09 	bl	8002510 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	f241 1311 	movw	r3, #4369	; 0x1111
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <HAL_TIM_Base_Stop_DMA+0x52>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a1a      	ldr	r2, [r3, #32]
 8003914:	f240 4344 	movw	r3, #1092	; 0x444
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d107      	bne.n	800392e <HAL_TIM_Base_Stop_DMA+0x52>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_TIM_OC_Start+0x24>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e03c      	b.n	80039de <HAL_TIM_OC_Start+0x9e>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d109      	bne.n	800397e <HAL_TIM_OC_Start+0x3e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e02f      	b.n	80039de <HAL_TIM_OC_Start+0x9e>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d109      	bne.n	8003998 <HAL_TIM_OC_Start+0x58>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e022      	b.n	80039de <HAL_TIM_OC_Start+0x9e>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d109      	bne.n	80039b2 <HAL_TIM_OC_Start+0x72>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	bf14      	ite	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	2300      	moveq	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e015      	b.n	80039de <HAL_TIM_OC_Start+0x9e>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d109      	bne.n	80039cc <HAL_TIM_OC_Start+0x8c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e008      	b.n	80039de <HAL_TIM_OC_Start+0x9e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07e      	b.n	8003ae4 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_TIM_OC_Start+0xb6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f4:	e023      	b.n	8003a3e <HAL_TIM_OC_Start+0xfe>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d104      	bne.n	8003a06 <HAL_TIM_OC_Start+0xc6>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a04:	e01b      	b.n	8003a3e <HAL_TIM_OC_Start+0xfe>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d104      	bne.n	8003a16 <HAL_TIM_OC_Start+0xd6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a14:	e013      	b.n	8003a3e <HAL_TIM_OC_Start+0xfe>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b0c      	cmp	r3, #12
 8003a1a:	d104      	bne.n	8003a26 <HAL_TIM_OC_Start+0xe6>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a24:	e00b      	b.n	8003a3e <HAL_TIM_OC_Start+0xfe>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIM_OC_Start+0xf6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a34:	e003      	b.n	8003a3e <HAL_TIM_OC_Start+0xfe>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2201      	movs	r2, #1
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 f864 	bl	8004b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a26      	ldr	r2, [pc, #152]	; (8003aec <HAL_TIM_OC_Start+0x1ac>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_TIM_OC_Start+0x12a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a25      	ldr	r2, [pc, #148]	; (8003af0 <HAL_TIM_OC_Start+0x1b0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_TIM_OC_Start+0x12a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <HAL_TIM_OC_Start+0x1b4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_OC_Start+0x12e>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_TIM_OC_Start+0x130>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a18      	ldr	r2, [pc, #96]	; (8003aec <HAL_TIM_OC_Start+0x1ac>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_TIM_OC_Start+0x162>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d004      	beq.n	8003aa2 <HAL_TIM_OC_Start+0x162>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_TIM_OC_Start+0x1b0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d115      	bne.n	8003ace <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_TIM_OC_Start+0x1b8>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b06      	cmp	r3, #6
 8003ab2:	d015      	beq.n	8003ae0 <HAL_TIM_OC_Start+0x1a0>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aba:	d011      	beq.n	8003ae0 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	e008      	b.n	8003ae0 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e000      	b.n	8003ae2 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40014400 	.word	0x40014400
 8003af8:	00010007 	.word	0x00010007

08003afc <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	6839      	ldr	r1, [r7, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f800 	bl	8004b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a39      	ldr	r2, [pc, #228]	; (8003c00 <HAL_TIM_OC_Stop+0x104>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_TIM_OC_Stop+0x36>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a38      	ldr	r2, [pc, #224]	; (8003c04 <HAL_TIM_OC_Stop+0x108>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_TIM_OC_Stop+0x36>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a36      	ldr	r2, [pc, #216]	; (8003c08 <HAL_TIM_OC_Stop+0x10c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_TIM_OC_Stop+0x3a>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_TIM_OC_Stop+0x3c>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d017      	beq.n	8003b6c <HAL_TIM_OC_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a1a      	ldr	r2, [r3, #32]
 8003b42:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <HAL_TIM_OC_Stop+0x70>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a1a      	ldr	r2, [r3, #32]
 8003b52:	f240 4344 	movw	r3, #1092	; 0x444
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d107      	bne.n	8003b6c <HAL_TIM_OC_Stop+0x70>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10f      	bne.n	8003b9c <HAL_TIM_OC_Stop+0xa0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a1a      	ldr	r2, [r3, #32]
 8003b82:	f240 4344 	movw	r3, #1092	; 0x444
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_TIM_OC_Stop+0xa0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_TIM_OC_Stop+0xb0>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003baa:	e023      	b.n	8003bf4 <HAL_TIM_OC_Stop+0xf8>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d104      	bne.n	8003bbc <HAL_TIM_OC_Stop+0xc0>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bba:	e01b      	b.n	8003bf4 <HAL_TIM_OC_Stop+0xf8>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d104      	bne.n	8003bcc <HAL_TIM_OC_Stop+0xd0>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bca:	e013      	b.n	8003bf4 <HAL_TIM_OC_Stop+0xf8>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d104      	bne.n	8003bdc <HAL_TIM_OC_Stop+0xe0>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bda:	e00b      	b.n	8003bf4 <HAL_TIM_OC_Stop+0xf8>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d104      	bne.n	8003bec <HAL_TIM_OC_Stop+0xf0>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bea:	e003      	b.n	8003bf4 <HAL_TIM_OC_Stop+0xf8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400

08003c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e049      	b.n	8003cb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f841 	bl	8003cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 fbe6 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d122      	bne.n	8003d2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d11b      	bne.n	8003d2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f06f 0202 	mvn.w	r2, #2
 8003cfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 faec 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003d16:	e005      	b.n	8003d24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fade 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 faef 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d122      	bne.n	8003d7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d11b      	bne.n	8003d7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f06f 0204 	mvn.w	r2, #4
 8003d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fac2 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003d6a:	e005      	b.n	8003d78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fab4 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fac5 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d122      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d11b      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0208 	mvn.w	r2, #8
 8003da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2204      	movs	r2, #4
 8003da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa98 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003dbe:	e005      	b.n	8003dcc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fa8a 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa9b 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d122      	bne.n	8003e26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d11b      	bne.n	8003e26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f06f 0210 	mvn.w	r2, #16
 8003df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa6e 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003e12:	e005      	b.n	8003e20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fa60 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa71 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10e      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f06f 0201 	mvn.w	r2, #1
 8003e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fc fddf 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b80      	cmp	r3, #128	; 0x80
 8003e5e:	d10e      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b80      	cmp	r3, #128	; 0x80
 8003e6c:	d107      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 ff59 	bl	8004d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8c:	d10e      	bne.n	8003eac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d107      	bne.n	8003eac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 ff4c 	bl	8004d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa1f 	bl	8004316 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0220 	mvn.w	r2, #32
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 ff0c 	bl	8004d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e0ff      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b14      	cmp	r3, #20
 8003f36:	f200 80f0 	bhi.w	800411a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f95 	.word	0x08003f95
 8003f44:	0800411b 	.word	0x0800411b
 8003f48:	0800411b 	.word	0x0800411b
 8003f4c:	0800411b 	.word	0x0800411b
 8003f50:	08003fd5 	.word	0x08003fd5
 8003f54:	0800411b 	.word	0x0800411b
 8003f58:	0800411b 	.word	0x0800411b
 8003f5c:	0800411b 	.word	0x0800411b
 8003f60:	08004017 	.word	0x08004017
 8003f64:	0800411b 	.word	0x0800411b
 8003f68:	0800411b 	.word	0x0800411b
 8003f6c:	0800411b 	.word	0x0800411b
 8003f70:	08004057 	.word	0x08004057
 8003f74:	0800411b 	.word	0x0800411b
 8003f78:	0800411b 	.word	0x0800411b
 8003f7c:	0800411b 	.word	0x0800411b
 8003f80:	08004099 	.word	0x08004099
 8003f84:	0800411b 	.word	0x0800411b
 8003f88:	0800411b 	.word	0x0800411b
 8003f8c:	0800411b 	.word	0x0800411b
 8003f90:	080040d9 	.word	0x080040d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 faa2 	bl	80044e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0208 	orr.w	r2, r2, #8
 8003fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0204 	bic.w	r2, r2, #4
 8003fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	619a      	str	r2, [r3, #24]
      break;
 8003fd2:	e0a5      	b.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fafe 	bl	80045dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6999      	ldr	r1, [r3, #24]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	021a      	lsls	r2, r3, #8
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	619a      	str	r2, [r3, #24]
      break;
 8004014:	e084      	b.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fb57 	bl	80046d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0208 	orr.w	r2, r2, #8
 8004030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0204 	bic.w	r2, r2, #4
 8004040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69d9      	ldr	r1, [r3, #28]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	61da      	str	r2, [r3, #28]
      break;
 8004054:	e064      	b.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fbaf 	bl	80047c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69d9      	ldr	r1, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	021a      	lsls	r2, r3, #8
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	61da      	str	r2, [r3, #28]
      break;
 8004096:	e043      	b.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fbec 	bl	800487c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0208 	orr.w	r2, r2, #8
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0204 	bic.w	r2, r2, #4
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040d6:	e023      	b.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fc24 	bl	800492c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	021a      	lsls	r2, r3, #8
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004118:	e002      	b.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      break;
 800411e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004128:	7dfb      	ldrb	r3, [r7, #23]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop

08004134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_TIM_ConfigClockSource+0x1c>
 800414c:	2302      	movs	r3, #2
 800414e:	e0b6      	b.n	80042be <HAL_TIM_ConfigClockSource+0x18a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418c:	d03e      	beq.n	800420c <HAL_TIM_ConfigClockSource+0xd8>
 800418e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004192:	f200 8087 	bhi.w	80042a4 <HAL_TIM_ConfigClockSource+0x170>
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419a:	f000 8086 	beq.w	80042aa <HAL_TIM_ConfigClockSource+0x176>
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a2:	d87f      	bhi.n	80042a4 <HAL_TIM_ConfigClockSource+0x170>
 80041a4:	2b70      	cmp	r3, #112	; 0x70
 80041a6:	d01a      	beq.n	80041de <HAL_TIM_ConfigClockSource+0xaa>
 80041a8:	2b70      	cmp	r3, #112	; 0x70
 80041aa:	d87b      	bhi.n	80042a4 <HAL_TIM_ConfigClockSource+0x170>
 80041ac:	2b60      	cmp	r3, #96	; 0x60
 80041ae:	d050      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x11e>
 80041b0:	2b60      	cmp	r3, #96	; 0x60
 80041b2:	d877      	bhi.n	80042a4 <HAL_TIM_ConfigClockSource+0x170>
 80041b4:	2b50      	cmp	r3, #80	; 0x50
 80041b6:	d03c      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0xfe>
 80041b8:	2b50      	cmp	r3, #80	; 0x50
 80041ba:	d873      	bhi.n	80042a4 <HAL_TIM_ConfigClockSource+0x170>
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d058      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x13e>
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d86f      	bhi.n	80042a4 <HAL_TIM_ConfigClockSource+0x170>
 80041c4:	2b30      	cmp	r3, #48	; 0x30
 80041c6:	d064      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x15e>
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d86b      	bhi.n	80042a4 <HAL_TIM_ConfigClockSource+0x170>
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d060      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x15e>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d867      	bhi.n	80042a4 <HAL_TIM_ConfigClockSource+0x170>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d05c      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x15e>
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d05a      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x15e>
 80041dc:	e062      	b.n	80042a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6899      	ldr	r1, [r3, #8]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f000 fc71 	bl	8004ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004200:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	609a      	str	r2, [r3, #8]
      break;
 800420a:	e04f      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	6899      	ldr	r1, [r3, #8]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f000 fc5a 	bl	8004ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800422e:	609a      	str	r2, [r3, #8]
      break;
 8004230:	e03c      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	461a      	mov	r2, r3
 8004240:	f000 fbce 	bl	80049e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2150      	movs	r1, #80	; 0x50
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fc27 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004250:	e02c      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	461a      	mov	r2, r3
 8004260:	f000 fbed 	bl	8004a3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2160      	movs	r1, #96	; 0x60
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fc17 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004270:	e01c      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6859      	ldr	r1, [r3, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	461a      	mov	r2, r3
 8004280:	f000 fbae 	bl	80049e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2140      	movs	r1, #64	; 0x40
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fc07 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004290:	e00c      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f000 fbfe 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 80042a2:	e003      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
      break;
 80042a8:	e000      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d107      	bne.n	8004366 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004364:	e02a      	b.n	80043bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	d107      	bne.n	8004380 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2202      	movs	r2, #2
 8004374:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800437e:	e01d      	b.n	80043bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d107      	bne.n	800439a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2204      	movs	r2, #4
 800438e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	e010      	b.n	80043bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d107      	bne.n	80043b4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2208      	movs	r2, #8
 80043a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b2:	e003      	b.n	80043bc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff ffb4 	bl	800432a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7fc fb0d 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ff5a 	bl	80042c6 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2a      	ldr	r2, [pc, #168]	; (80044d8 <TIM_Base_SetConfig+0xbc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0x20>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443a:	d108      	bne.n	800444e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <TIM_Base_SetConfig+0xbc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_Base_SetConfig+0x52>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d007      	beq.n	800446e <TIM_Base_SetConfig+0x52>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <TIM_Base_SetConfig+0xc0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_Base_SetConfig+0x52>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1d      	ldr	r2, [pc, #116]	; (80044e0 <TIM_Base_SetConfig+0xc4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <TIM_Base_SetConfig+0xbc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0xa0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0b      	ldr	r2, [pc, #44]	; (80044dc <TIM_Base_SetConfig+0xc0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0xa0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <TIM_Base_SetConfig+0xc4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	615a      	str	r2, [r3, #20]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400

080044e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 0302 	bic.w	r3, r3, #2
 8004530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <TIM_OC1_SetConfig+0xec>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_OC1_SetConfig+0x70>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a23      	ldr	r2, [pc, #140]	; (80045d4 <TIM_OC1_SetConfig+0xf0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_OC1_SetConfig+0x70>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <TIM_OC1_SetConfig+0xf4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d10c      	bne.n	800456e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0308 	bic.w	r3, r3, #8
 800455a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <TIM_OC1_SetConfig+0xec>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <TIM_OC1_SetConfig+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <TIM_OC1_SetConfig+0xf0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC1_SetConfig+0xa2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <TIM_OC1_SetConfig+0xf4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800458c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400

080045dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0210 	bic.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f023 0320 	bic.w	r3, r3, #32
 800462a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <TIM_OC2_SetConfig+0xe8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10d      	bne.n	800465c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <TIM_OC2_SetConfig+0xe8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_OC2_SetConfig+0x98>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <TIM_OC2_SetConfig+0xec>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC2_SetConfig+0x98>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <TIM_OC2_SetConfig+0xf0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d113      	bne.n	800469c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800467a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400

080046d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800471c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <TIM_OC3_SetConfig+0xe4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10d      	bne.n	800474e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800474c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <TIM_OC3_SetConfig+0xe4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <TIM_OC3_SetConfig+0x96>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <TIM_OC3_SetConfig+0xe8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d003      	beq.n	8004766 <TIM_OC3_SetConfig+0x96>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <TIM_OC3_SetConfig+0xec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d113      	bne.n	800478e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800476c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400

080047c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	031b      	lsls	r3, r3, #12
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a14      	ldr	r2, [pc, #80]	; (8004870 <TIM_OC4_SetConfig+0xb0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_OC4_SetConfig+0x74>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <TIM_OC4_SetConfig+0xb4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC4_SetConfig+0x74>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <TIM_OC4_SetConfig+0xb8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d109      	bne.n	8004848 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	019b      	lsls	r3, r3, #6
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40014000 	.word	0x40014000
 8004878:	40014400 	.word	0x40014400

0800487c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a13      	ldr	r2, [pc, #76]	; (8004920 <TIM_OC5_SetConfig+0xa4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_OC5_SetConfig+0x6a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a12      	ldr	r2, [pc, #72]	; (8004924 <TIM_OC5_SetConfig+0xa8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_OC5_SetConfig+0x6a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a11      	ldr	r2, [pc, #68]	; (8004928 <TIM_OC5_SetConfig+0xac>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d109      	bne.n	80048fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400

0800492c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	051b      	lsls	r3, r3, #20
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <TIM_OC6_SetConfig+0xa8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_OC6_SetConfig+0x6c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <TIM_OC6_SetConfig+0xac>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC6_SetConfig+0x6c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <TIM_OC6_SetConfig+0xb0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d109      	bne.n	80049ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	029b      	lsls	r3, r3, #10
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400

080049e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 030a 	bic.w	r3, r3, #10
 8004a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0210 	bic.w	r2, r3, #16
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	031b      	lsls	r3, r3, #12
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f043 0307 	orr.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	609a      	str	r2, [r3, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2201      	movs	r2, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	401a      	ands	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e04f      	b.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a21      	ldr	r2, [pc, #132]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ba8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be0:	d004      	beq.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a10      	ldr	r2, [pc, #64]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d10c      	bne.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40014000 	.word	0x40014000

08004c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e060      	b.n	8004d0a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d115      	bne.n	8004cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	051b      	lsls	r3, r3, #20
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00

08004d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4d0d      	ldr	r5, [pc, #52]	; (8004d90 <__libc_init_array+0x38>)
 8004d5c:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	2600      	movs	r6, #0
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	4d0b      	ldr	r5, [pc, #44]	; (8004d98 <__libc_init_array+0x40>)
 8004d6a:	4c0c      	ldr	r4, [pc, #48]	; (8004d9c <__libc_init_array+0x44>)
 8004d6c:	f000 f820 	bl	8004db0 <_init>
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	2600      	movs	r6, #0
 8004d76:	42a6      	cmp	r6, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d80:	4798      	blx	r3
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8a:	4798      	blx	r3
 8004d8c:	3601      	adds	r6, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	08004e08 	.word	0x08004e08
 8004d94:	08004e08 	.word	0x08004e08
 8004d98:	08004e08 	.word	0x08004e08
 8004d9c:	08004e0c 	.word	0x08004e0c

08004da0 <memset>:
 8004da0:	4402      	add	r2, r0
 8004da2:	4603      	mov	r3, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
