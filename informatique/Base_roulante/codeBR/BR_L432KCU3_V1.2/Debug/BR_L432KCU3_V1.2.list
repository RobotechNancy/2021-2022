
BR_L432KCU3_V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d10  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004edc  08004edc  000222f8  2**0
                  CONTENTS
  4 .ARM          00000000  08004edc  08004edc  000222f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004edc  08004edc  000222f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000022f8  20000000  08004ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200022f8  080071dc  000222f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002414  080071dc  00022414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000222f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f740  00000000  00000000  00022328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268d  00000000  00000000  00031a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000340f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00034f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002124f  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5ba  00000000  00000000  00056eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8d24  00000000  00000000  000664b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f1dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af0  00000000  00000000  0012f230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200022f8 	.word	0x200022f8
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004e84 	.word	0x08004e84

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200022fc 	.word	0x200022fc
 80001c8:	08004e84 	.word	0x08004e84

080001cc <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \param isRep vrai si c'est une reponse a une requete, faux sinon
 * \param RepId indique le nombre de reponse atendu pour une requete et le num de la reponse pour une reponse
 * \param dataLen frame payload length in byte (0 .. 8) aka data length code
 * \param data CAN frame payload (up to 8 byte)
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	b0a8      	sub	sp, #160	; 0xa0
 80001d0:	af06      	add	r7, sp, #24
 80001d2:	62f8      	str	r0, [r7, #44]	; 0x2c
	// traitement et mise en forme de la trame
	/////////////////////////////////////////////////////////////////////////
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80001d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80001d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80001dc:	2100      	movs	r1, #0
 80001de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80001e0:	f001 fc6f 	bl	8001ac2 <HAL_CAN_GetRxMessage>

	struct CanResponse_t msg;
	msg = traitement_trame( RxHeader, RxData);
 80001e4:	463d      	mov	r5, r7
 80001e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80001ea:	9304      	str	r3, [sp, #16]
 80001ec:	466c      	mov	r4, sp
 80001ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80001f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80001fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001fe:	4628      	mov	r0, r5
 8000200:	f000 f8e8 	bl	80003d4 <traitement_trame>
 8000204:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000208:	463d      	mov	r5, r7
 800020a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000212:	682b      	ldr	r3, [r5, #0]
 8000214:	6023      	str	r3, [r4, #0]
	set_id_msg(msg.idMessage);
 8000216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000218:	b2db      	uxtb	r3, r3
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f802 	bl	8001224 <set_id_msg>
	/////////////////////////////////////////////////////////////////////////
	uint8_t data[1];
	switch(msg.codeFct){
 8000220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000222:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000226:	d04a      	beq.n	80002be <HAL_CAN_RxFifo0MsgPendingCallback+0xf2>
 8000228:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800022c:	d84d      	bhi.n	80002ca <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 800022e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000232:	d003      	beq.n	800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
 8000234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000238:	d03e      	beq.n	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
		case STOP_URGENT:
			set_target(0);
			emergency_stop();
		break;
		default :
		break;
 800023a:	e046      	b.n	80002ca <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		if (get_deplacement_state()==ARRET){
 800023c:	f001 f83e 	bl	80012bc <get_deplacement_state>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d123      	bne.n	800028e <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			for(int i=0;i<8;i++){
 8000246:	2300      	movs	r3, #0
 8000248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800024c:	e011      	b.n	8000272 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
				trameMotor.raw_data[i] = msg.data[i];
 800024e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000256:	4413      	add	r3, r2
 8000258:	7819      	ldrb	r1, [r3, #0]
 800025a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800025e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000262:	4413      	add	r3, r2
 8000264:	460a      	mov	r2, r1
 8000266:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<8;i++){
 8000268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800026c:	3301      	adds	r3, #1
 800026e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000276:	2b07      	cmp	r3, #7
 8000278:	dde9      	ble.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
			prepare_deplacement(&trameMotor);
 800027a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f97e 	bl	8000580 <prepare_deplacement>
			reset_steps();
 8000284:	f001 f852 	bl	800132c <reset_steps>
			start_generate();
 8000288:	f000 fc8a 	bl	8000ba0 <start_generate>
		break;
 800028c:	e01e      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
			data[0] = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			send(CAN_ADDR_RASPBERRY, REP_AVANCE, data, 1, true, 1, get_id_msg());
 8000294:	f000 ffba 	bl	800120c <get_id_msg>
 8000298:	4603      	mov	r3, r0
 800029a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800029e:	9302      	str	r3, [sp, #8]
 80002a0:	2301      	movs	r3, #1
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2301      	movs	r3, #1
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2301      	movs	r3, #1
 80002aa:	f44f 2101 	mov.w	r1, #528384	; 0x81000
 80002ae:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80002b2:	f000 f857 	bl	8000364 <send>
		break;
 80002b6:	e009      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
			stop();
 80002b8:	f000 fc94 	bl	8000be4 <stop>
		break;
 80002bc:	e006      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
			set_target(0);
 80002be:	2000      	movs	r0, #0
 80002c0:	f001 f824 	bl	800130c <set_target>
			emergency_stop();
 80002c4:	f000 fd1a 	bl	8000cfc <emergency_stop>
		break;
 80002c8:	e000      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
		break;
 80002ca:	bf00      	nop
	//	le message et ses info sont dans la variable msg

	//renvoi un msg sur le bus can
	//uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
	//send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5) ;
}
 80002cc:	bf00      	nop
 80002ce:	3788      	adds	r7, #136	; 0x88
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bdb0      	pop	{r4, r5, r7, pc}

080002d4 <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR adresse) {
 80002d4:	b084      	sub	sp, #16
 80002d6:	b5b0      	push	{r4, r5, r7, lr}
 80002d8:	b08a      	sub	sp, #40	; 0x28
 80002da:	af00      	add	r7, sp, #0
 80002dc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 80002e8:	2300      	movs	r3, #0
 80002ea:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 80002ec:	2301      	movs	r3, #1
 80002ee:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0b001000000000000; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 80002f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0; //
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0b111100000000000; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 80002fa:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80002fe:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000308:	2301      	movs	r3, #1
 800030a:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800030c:	230e      	movs	r3, #14
 800030e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000310:	463b      	mov	r3, r7
 8000312:	4619      	mov	r1, r3
 8000314:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000318:	f001 f9f5 	bl	8001706 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 800031c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000320:	f001 fabb 	bl	800189a <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000324:	2102      	movs	r1, #2
 8000326:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800032a:	f001 fcdc 	bl	8001ce6 <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <CAN_Config+0x88>)
 8000330:	461d      	mov	r5, r3
 8000332:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800033c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000342:	e885 0003 	stmia.w	r5, {r0, r1}
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)
	CanAdresse = adresse;
 8000346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <CAN_Config+0x8c>)
 800034c:	701a      	strb	r2, [r3, #0]
}
 800034e:	bf00      	nop
 8000350:	3728      	adds	r7, #40	; 0x28
 8000352:	46bd      	mov	sp, r7
 8000354:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000358:	b004      	add	sp, #16
 800035a:	4770      	bx	lr
 800035c:	200023d0 	.word	0x200023d0
 8000360:	200023f8 	.word	0x200023f8

08000364 <send>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_WRITE_ERROR} une erreur à eu lieu lors de l'envoie du message
*/
int send(CAN_ADDR addr, CAN_CODE_FCT codeFct , uint8_t data[], uint dataLen, bool isRep, uint repLenght, uint idMessage){
 8000364:	b580      	push	{r7, lr}
 8000366:	b08c      	sub	sp, #48	; 0x30
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]

	if (dataLen >8){
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b08      	cmp	r3, #8
 8000376:	d901      	bls.n	800037c <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <send+0x68>)
 800037a:	e022      	b.n	80003c2 <send+0x5e>
	//if(!is_valid_addr(addr)) return CAN_E_UNKNOW_ADDR;
	//if(!is_valid_code_fct(codeFct)) return CAN_E_UNKNOW_CODE_FCT;


	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dataLen; // taille des données à transmettre en octets
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	62bb      	str	r3, [r7, #40]	; 0x28

	//adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage

	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | codeFct | repLenght | idMessage << CAN_DECALAGE_ID_MSG | isRep << CAN_DECALAGE_IS_REP | repLenght;
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	431a      	orrs	r2, r3
 8000386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000388:	431a      	orrs	r2, r3
 800038a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800038c:	011b      	lsls	r3, r3, #4
 800038e:	4313      	orrs	r3, r2
 8000390:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000394:	00d2      	lsls	r2, r2, #3
 8000396:	431a      	orrs	r2, r3
 8000398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800039a:	4313      	orrs	r3, r2
 800039c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a0:	61fb      	str	r3, [r7, #28]
	//txHeader.ExtId = 0b11101100100100000010000011111;
	//1 111 0001 0000 10010000 00000000 1 001
	//1011 0001 00001001 00000000 0000 1 001000000011001
	txHeader.IDE = CAN_ID_EXT; //on choisit l'adressage étendue
 80003a2:	2304      	movs	r3, #4
 80003a4:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	f107 0118 	add.w	r1, r7, #24
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <send+0x6c>)
 80003bc:	f001 fab1 	bl	8001922 <HAL_CAN_AddTxMessage>

	return 0;
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3730      	adds	r7, #48	; 0x30
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	fffffe02 	.word	0xfffffe02
 80003d0:	200023d0 	.word	0x200023d0

080003d4 <traitement_trame>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_READ_ERROR} erreur dans la lecture de la trame depuis le buffer
*/
struct CanResponse_t traitement_trame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 80003d4:	b084      	sub	sp, #16
 80003d6:	b4b0      	push	{r4, r5, r7}
 80003d8:	b08d      	sub	sp, #52	; 0x34
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		struct CanResponse_t rep;
		//rep.ExtID.champId = frame.ExtId;

		rep.addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR)  ;
 80003e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80003ec:	60bb      	str	r3, [r7, #8]
		rep.emetteur = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR) ;
 80003ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80003f4:	60fb      	str	r3, [r7, #12]
		rep.codeFct = (frame.ExtId & CAN_FILTER_CODE_FCT);
 80003f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003f8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80003fc:	613b      	str	r3, [r7, #16]
		rep.isRep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 80003fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000400:	08db      	lsrs	r3, r3, #3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	2b00      	cmp	r3, #0
 8000408:	bf14      	ite	ne
 800040a:	2301      	movne	r3, #1
 800040c:	2300      	moveq	r3, #0
 800040e:	b2db      	uxtb	r3, r3
 8000410:	763b      	strb	r3, [r7, #24]
		rep.RepId = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 8000412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000414:	f003 0307 	and.w	r3, r3, #7
 8000418:	61fb      	str	r3, [r7, #28]
		rep.idMessage = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 800041a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	b2db      	uxtb	r3, r3
 8000420:	617b      	str	r3, [r7, #20]
        if(!is_valid_addr(rep.addr)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_addr(rep.emetteur)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_code_fct(rep.codeFct)) return CAN_E_UNKNOW_CODE_FCT;
        if (frame.DLC >8)  return CAN_E_DATA_SIZE_TOO_LONG;*/

        rep.dataLen = frame.DLC;
 8000422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000424:	623b      	str	r3, [r7, #32]


        for (int i = 0; i < frame.DLC; i++){
 8000426:	2300      	movs	r3, #0
 8000428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800042a:	e00c      	b.n	8000446 <traitement_trame+0x72>
            //if(data[i] <0 || data[i] > 255) return CAN_E_OOB_DATA;
            rep.data[i] = data[i];
 800042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800042e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000430:	4413      	add	r3, r2
 8000432:	7819      	ldrb	r1, [r3, #0]
 8000434:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800043a:	4413      	add	r3, r2
 800043c:	460a      	mov	r2, r1
 800043e:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < frame.DLC; i++){
 8000440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000442:	3301      	adds	r3, #1
 8000444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800044a:	429a      	cmp	r2, r3
 800044c:	d8ee      	bhi.n	800042c <traitement_trame+0x58>
        }


    return rep;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	461d      	mov	r5, r3
 8000452:	f107 0408 	add.w	r4, r7, #8
 8000456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800045a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800045c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800045e:	6823      	ldr	r3, [r4, #0]
 8000460:	602b      	str	r3, [r5, #0]
}
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	3734      	adds	r7, #52	; 0x34
 8000466:	46bd      	mov	sp, r7
 8000468:	bcb0      	pop	{r4, r5, r7}
 800046a:	b004      	add	sp, #16
 800046c:	4770      	bx	lr
	...

08000470 <triangle>:
/*
 * @brief effectue un triangle
 * @param None
 * @retval None
 */
void triangle(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
	set_target(24504);
 8000476:	f645 70b8 	movw	r0, #24504	; 0x5fb8
 800047a:	f000 ff47 	bl	800130c <set_target>
	motor1.diviseur = 20;
 800047e:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <triangle+0x104>)
 8000480:	2214      	movs	r2, #20
 8000482:	711a      	strb	r2, [r3, #4]
	motor2.diviseur = 20;
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <triangle+0x108>)
 8000486:	2214      	movs	r2, #20
 8000488:	711a      	strb	r2, [r3, #4]
	motor3.diviseur = 0;
 800048a:	4b3c      	ldr	r3, [pc, #240]	; (800057c <triangle+0x10c>)
 800048c:	2200      	movs	r2, #0
 800048e:	711a      	strb	r2, [r3, #4]
	motor1.pinDirState = 1;
 8000490:	4b38      	ldr	r3, [pc, #224]	; (8000574 <triangle+0x104>)
 8000492:	2201      	movs	r2, #1
 8000494:	775a      	strb	r2, [r3, #29]
	motor2.pinDirState = 0;
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <triangle+0x108>)
 8000498:	2200      	movs	r2, #0
 800049a:	775a      	strb	r2, [r3, #29]
	motor3.pinDirState = 0;
 800049c:	4b37      	ldr	r3, [pc, #220]	; (800057c <triangle+0x10c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	775a      	strb	r2, [r3, #29]
	motor_dir(&motor1);
 80004a2:	4834      	ldr	r0, [pc, #208]	; (8000574 <triangle+0x104>)
 80004a4:	f000 fcb2 	bl	8000e0c <motor_dir>
	motor_dir(&motor2);
 80004a8:	4833      	ldr	r0, [pc, #204]	; (8000578 <triangle+0x108>)
 80004aa:	f000 fcaf 	bl	8000e0c <motor_dir>
	motor_dir(&motor3);
 80004ae:	4833      	ldr	r0, [pc, #204]	; (800057c <triangle+0x10c>)
 80004b0:	f000 fcac 	bl	8000e0c <motor_dir>
	reset_steps();
 80004b4:	f000 ff3a 	bl	800132c <reset_steps>
	start_generate();
 80004b8:	f000 fb72 	bl	8000ba0 <start_generate>
	while(get_steps_left()!=0){
 80004bc:	e001      	b.n	80004c2 <triangle+0x52>
		int a = 1;
 80004be:	2301      	movs	r3, #1
 80004c0:	607b      	str	r3, [r7, #4]
	while(get_steps_left()!=0){
 80004c2:	f000 ff59 	bl	8001378 <get_steps_left>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d1f8      	bne.n	80004be <triangle+0x4e>
	}
	motor1.diviseur = 20;
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <triangle+0x104>)
 80004ce:	2214      	movs	r2, #20
 80004d0:	711a      	strb	r2, [r3, #4]
	motor2.diviseur = 0;
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <triangle+0x108>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	711a      	strb	r2, [r3, #4]
	motor3.diviseur = 20;
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <triangle+0x10c>)
 80004da:	2214      	movs	r2, #20
 80004dc:	711a      	strb	r2, [r3, #4]
	motor1.pinDirState = 0;
 80004de:	4b25      	ldr	r3, [pc, #148]	; (8000574 <triangle+0x104>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	775a      	strb	r2, [r3, #29]
	motor2.pinDirState = 0;
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <triangle+0x108>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	775a      	strb	r2, [r3, #29]
	motor3.pinDirState = 1;
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <triangle+0x10c>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	775a      	strb	r2, [r3, #29]
	motor_dir(&motor1);
 80004f0:	4820      	ldr	r0, [pc, #128]	; (8000574 <triangle+0x104>)
 80004f2:	f000 fc8b 	bl	8000e0c <motor_dir>
	motor_dir(&motor2);
 80004f6:	4820      	ldr	r0, [pc, #128]	; (8000578 <triangle+0x108>)
 80004f8:	f000 fc88 	bl	8000e0c <motor_dir>
	motor_dir(&motor3);
 80004fc:	481f      	ldr	r0, [pc, #124]	; (800057c <triangle+0x10c>)
 80004fe:	f000 fc85 	bl	8000e0c <motor_dir>
	reset_steps();
 8000502:	f000 ff13 	bl	800132c <reset_steps>
	start_generate();
 8000506:	f000 fb4b 	bl	8000ba0 <start_generate>
	while(get_steps_left()!=0){
 800050a:	e001      	b.n	8000510 <triangle+0xa0>
		int a = 1;
 800050c:	2301      	movs	r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
	while(get_steps_left()!=0){
 8000510:	f000 ff32 	bl	8001378 <get_steps_left>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f8      	bne.n	800050c <triangle+0x9c>
	}
	motor1.diviseur = 0;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <triangle+0x104>)
 800051c:	2200      	movs	r2, #0
 800051e:	711a      	strb	r2, [r3, #4]
	motor2.diviseur = 20;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <triangle+0x108>)
 8000522:	2214      	movs	r2, #20
 8000524:	711a      	strb	r2, [r3, #4]
	motor3.diviseur = 20;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <triangle+0x10c>)
 8000528:	2214      	movs	r2, #20
 800052a:	711a      	strb	r2, [r3, #4]
	motor1.pinDirState = 0;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <triangle+0x104>)
 800052e:	2200      	movs	r2, #0
 8000530:	775a      	strb	r2, [r3, #29]
	motor2.pinDirState = 1;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <triangle+0x108>)
 8000534:	2201      	movs	r2, #1
 8000536:	775a      	strb	r2, [r3, #29]
	motor3.pinDirState = 0;
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <triangle+0x10c>)
 800053a:	2200      	movs	r2, #0
 800053c:	775a      	strb	r2, [r3, #29]
	motor_dir(&motor1);
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <triangle+0x104>)
 8000540:	f000 fc64 	bl	8000e0c <motor_dir>
	motor_dir(&motor2);
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <triangle+0x108>)
 8000546:	f000 fc61 	bl	8000e0c <motor_dir>
	motor_dir(&motor3);
 800054a:	480c      	ldr	r0, [pc, #48]	; (800057c <triangle+0x10c>)
 800054c:	f000 fc5e 	bl	8000e0c <motor_dir>
	reset_steps();
 8000550:	f000 feec 	bl	800132c <reset_steps>
	start_generate();
 8000554:	f000 fb24 	bl	8000ba0 <start_generate>
	while(get_steps_left()!=0){
 8000558:	e001      	b.n	800055e <triangle+0xee>
		int a = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
	while(get_steps_left()!=0){
 800055e:	f000 ff0b 	bl	8001378 <get_steps_left>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1f8      	bne.n	800055a <triangle+0xea>
	}
}
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000000 	.word	0x20000000
 8000578:	20000020 	.word	0x20000020
 800057c:	20000040 	.word	0x20000040

08000580 <prepare_deplacement>:
/*
 * @brief enregistre les valeurs des variables CAN dans les variables moteur et applique le nouveau sens de rotation des moteurs
 * @param &trameMotor adresse de la trameMotor
 * @retval None
 */
void prepare_deplacement(Trame_Moteur_t* trameMotor){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	set_target(trameMotor->fields.nb_steps);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 febd 	bl	800130c <set_target>
	motor1.diviseur = trameMotor->fields.div0;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791a      	ldrb	r2, [r3, #4]
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <prepare_deplacement+0x74>)
 8000598:	711a      	strb	r2, [r3, #4]
	motor2.diviseur = trameMotor->fields.div1;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795a      	ldrb	r2, [r3, #5]
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <prepare_deplacement+0x78>)
 80005a0:	711a      	strb	r2, [r3, #4]
	motor3.diviseur = trameMotor->fields.div2;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	799a      	ldrb	r2, [r3, #6]
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <prepare_deplacement+0x7c>)
 80005a8:	711a      	strb	r2, [r3, #4]
	motor1.pinDirState = trameMotor->fields.dir0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	79db      	ldrb	r3, [r3, #7]
 80005ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <prepare_deplacement+0x74>)
 80005b8:	775a      	strb	r2, [r3, #29]
	motor2.pinDirState = trameMotor->fields.dir1;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <prepare_deplacement+0x78>)
 80005c8:	775a      	strb	r2, [r3, #29]
	motor3.pinDirState = trameMotor->fields.dir2;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	79db      	ldrb	r3, [r3, #7]
 80005ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <prepare_deplacement+0x7c>)
 80005d8:	775a      	strb	r2, [r3, #29]
	motor_dir(&motor1);
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <prepare_deplacement+0x74>)
 80005dc:	f000 fc16 	bl	8000e0c <motor_dir>
	motor_dir(&motor2);
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <prepare_deplacement+0x78>)
 80005e2:	f000 fc13 	bl	8000e0c <motor_dir>
	motor_dir(&motor3);
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <prepare_deplacement+0x7c>)
 80005e8:	f000 fc10 	bl	8000e0c <motor_dir>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000020 	.word	0x20000020
 80005fc:	20000040 	.word	0x20000040

08000600 <calcul_deceleration>:
/*
 * @brief calcul la longueur de la décélération, nombre de case à parcourrir dans le tableau rArr
 * @param a, la valeur de l'ARR que laquelle on souhaite arriver
 * @retval length, la longueur
 */
uint32_t calcul_deceleration(uint32_t a){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint32_t indice = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
    while (get_r_arr()[indice] >= a){
 800060c:	e002      	b.n	8000614 <calcul_deceleration+0x14>
        indice++;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
    while (get_r_arr()[indice] >= a){
 8000614:	f000 fe3c 	bl	8001290 <get_r_arr>
 8000618:	4602      	mov	r2, r0
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	d9f2      	bls.n	800060e <calcul_deceleration+0xe>
    }
    set_length(indice);
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f000 fe17 	bl	800125c <set_length>
	return get_length();
 800062e:	f000 fe09 	bl	8001244 <get_length>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063e:	b089      	sub	sp, #36	; 0x24
 8000640:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fef0 	bl	8001426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f825 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f969 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 800064e:	f000 f949 	bl	80008e4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000652:	f000 f89b 	bl	800078c <MX_TIM1_Init>
  MX_CAN1_Init();
 8000656:	f000 f863 	bl	8000720 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  CAN_Config(hcan1, CAN_ADDR_BASE_ROULANTE_E);
 800065a:	4e0d      	ldr	r6, [pc, #52]	; (8000690 <main+0x54>)
 800065c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000660:	9306      	str	r3, [sp, #24]
 8000662:	466d      	mov	r5, sp
 8000664:	f106 0410 	add.w	r4, r6, #16
 8000668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000670:	e885 0003 	stmia.w	r5, {r0, r1}
 8000674:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000678:	f7ff fe2c 	bl	80002d4 <CAN_Config>
  /* USER CODE END 2 */

  /*
   * @brief clampe les moteurs et active les demi-steps
   */
  motor_en(RESET); //RESET = actif
 800067c:	2000      	movs	r0, #0
 800067e:	f000 fbd7 	bl	8000e30 <motor_en>
  motor_micro_step(SET, RESET); //1/2 step
 8000682:	2100      	movs	r1, #0
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fbe5 	bl	8000e54 <motor_micro_step>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  triangle();
 800068a:	f7ff fef1 	bl	8000470 <triangle>
 800068e:	e7fc      	b.n	800068a <main+0x4e>
 8000690:	20002314 	.word	0x20002314

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fbe6 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ba:	f002 fa43 	bl	8002b44 <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 f99e 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fa86 	bl	8002bf0 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006ea:	f000 f98b 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f2:	2301      	movs	r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fe86 	bl	8003418 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000712:	f000 f977 	bl	8000a04 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	; 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_CAN1_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_CAN1_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_CAN1_Init+0x64>)
 800072c:	2208      	movs	r2, #8
 800072e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_CAN1_Init+0x64>)
 800073e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000742:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_CAN1_Init+0x64>)
 8000746:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800074a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_CAN1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_CAN1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_CAN1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_CAN1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_CAN1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_CAN1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_CAN1_Init+0x64>)
 8000772:	f000 fecd 	bl	8001510 <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f942 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20002314 	.word	0x20002314
 8000788:	40006400 	.word	0x40006400

0800078c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b09a      	sub	sp, #104	; 0x68
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	222c      	movs	r2, #44	; 0x2c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fb54 	bl	8004e74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007cc:	4b43      	ldr	r3, [pc, #268]	; (80008dc <MX_TIM1_Init+0x150>)
 80007ce:	4a44      	ldr	r2, [pc, #272]	; (80008e0 <MX_TIM1_Init+0x154>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <MX_TIM1_Init+0x150>)
 80007d4:	220f      	movs	r2, #15
 80007d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <MX_TIM1_Init+0x150>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80007de:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <MX_TIM1_Init+0x150>)
 80007e0:	2263      	movs	r2, #99	; 0x63
 80007e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <MX_TIM1_Init+0x150>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ea:	4b3c      	ldr	r3, [pc, #240]	; (80008dc <MX_TIM1_Init+0x150>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <MX_TIM1_Init+0x150>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f6:	4839      	ldr	r0, [pc, #228]	; (80008dc <MX_TIM1_Init+0x150>)
 80007f8:	f002 fffa 	bl	80037f0 <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000802:	f000 f8ff 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000810:	4619      	mov	r1, r3
 8000812:	4832      	ldr	r0, [pc, #200]	; (80008dc <MX_TIM1_Init+0x150>)
 8000814:	f003 fcf8 	bl	8004208 <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800081e:	f000 f8f1 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000822:	482e      	ldr	r0, [pc, #184]	; (80008dc <MX_TIM1_Init+0x150>)
 8000824:	f003 fa5c 	bl	8003ce0 <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800082e:	f000 f8e9 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000842:	4619      	mov	r1, r3
 8000844:	4825      	ldr	r0, [pc, #148]	; (80008dc <MX_TIM1_Init+0x150>)
 8000846:	f004 f9f5 	bl	8004c34 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000850:	f000 f8d8 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000854:	2360      	movs	r3, #96	; 0x60
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4818      	ldr	r0, [pc, #96]	; (80008dc <MX_TIM1_Init+0x150>)
 800087a:	f003 fbb1 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000884:	f000 f8be 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_TIM1_Init+0x150>)
 80008be:	f004 fa1f 	bl	8004d00 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80008c8:	f000 f89c 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_TIM1_Init+0x150>)
 80008ce:	f000 fbcf 	bl	8001070 <HAL_TIM_MspPostInit>

}
 80008d2:	bf00      	nop
 80008d4:	3768      	adds	r7, #104	; 0x68
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000233c 	.word	0x2000233c
 80008e0:	40012c00 	.word	0x40012c00

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_DMA_Init+0x38>)
 80008ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_DMA_Init+0x38>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6493      	str	r3, [r2, #72]	; 0x48
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_DMA_Init+0x38>)
 80008f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2010      	movs	r0, #16
 8000908:	f001 fd1d 	bl	8002346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800090c:	2010      	movs	r0, #16
 800090e:	f001 fd36 	bl	800237e <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_GPIO_Init+0xdc>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a30      	ldr	r2, [pc, #192]	; (80009fc <MX_GPIO_Init+0xdc>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_GPIO_Init+0xdc>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_GPIO_Init+0xdc>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <MX_GPIO_Init+0xdc>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_GPIO_Init+0xdc>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_M3_Pin|STEP_M2_Pin|STEP_M3_Pin|DIR_M2_Pin
 8000966:	2200      	movs	r2, #0
 8000968:	f240 618e 	movw	r1, #1678	; 0x68e
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f002 f8c2 	bl	8002af8 <HAL_GPIO_WritePin>
                          |DIR_M1_Pin|STEP_M1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|MS1_Pin|MS2_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2138      	movs	r1, #56	; 0x38
 8000978:	4821      	ldr	r0, [pc, #132]	; (8000a00 <MX_GPIO_Init+0xe0>)
 800097a:	f002 f8bd 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_M3_Pin STEP_M2_Pin DIR_M2_Pin DIR_M1_Pin
                           STEP_M1_Pin */
  GPIO_InitStruct.Pin = DIR_M3_Pin|STEP_M2_Pin|DIR_M2_Pin|DIR_M1_Pin
 800097e:	f240 6386 	movw	r3, #1670	; 0x686
 8000982:	60fb      	str	r3, [r7, #12]
                          |STEP_M1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f001 ff43 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_M3_Pin */
  GPIO_InitStruct.Pin = STEP_M3_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEP_M3_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f001 ff34 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 80009bc:	2308      	movs	r3, #8
 80009be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0xe0>)
 80009d4:	f001 ff26 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS1_Pin MS2_Pin */
  GPIO_InitStruct.Pin = MS1_Pin|MS2_Pin;
 80009d8:	2330      	movs	r3, #48	; 0x30
 80009da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0xe0>)
 80009f0:	f001 ff18 	bl	8002824 <HAL_GPIO_Init>

}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000400 	.word	0x48000400

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_TIM_PeriodElapsedCallback>:
 * @param condition htim==&htimX, où X est le numéro du timer utilisé
 * on avance d'un step informatiquement puis physiquement
 * fonction STM sans return
 * pour voir dans quelle phase on se trouve (arrêt, accélération, maintient ou décélération) on se réfère à la variable deplacementState
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08b      	sub	sp, #44	; 0x2c
 8000a14:	af04      	add	r7, sp, #16
 8000a16:	6078      	str	r0, [r7, #4]
	if (htim==&htim1){ //condition d'interruption du timer X
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a5d      	ldr	r2, [pc, #372]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	f040 80b3 	bne.w	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
//		motor_step puis avance ou avance puis motor_step
		count_steps();
 8000a22:	f000 fc8f 	bl	8001344 <count_steps>
		avance(&motor1);
 8000a26:	485b      	ldr	r0, [pc, #364]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a28:	f000 f9ae 	bl	8000d88 <avance>
		avance(&motor2);
 8000a2c:	485a      	ldr	r0, [pc, #360]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000a2e:	f000 f9ab 	bl	8000d88 <avance>
		avance(&motor3);
 8000a32:	485a      	ldr	r0, [pc, #360]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a34:	f000 f9a8 	bl	8000d88 <avance>
		motor_step(&motor1);
 8000a38:	4856      	ldr	r0, [pc, #344]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a3a:	f000 f9d6 	bl	8000dea <motor_step>
		motor_step(&motor2);
 8000a3e:	4856      	ldr	r0, [pc, #344]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000a40:	f000 f9d3 	bl	8000dea <motor_step>
		motor_step(&motor3);
 8000a44:	4855      	ldr	r0, [pc, #340]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a46:	f000 f9d0 	bl	8000dea <motor_step>
		uint8_t data[1];
		if (get_steps() == get_length()){
 8000a4a:	f000 fc89 	bl	8001360 <get_steps>
 8000a4e:	4604      	mov	r4, r0
 8000a50:	f000 fbf8 	bl	8001244 <get_length>
 8000a54:	4603      	mov	r3, r0
 8000a56:	429c      	cmp	r4, r3
 8000a58:	d102      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x50>
			set_deplacement_state(MAINTIENT);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f000 fc3a 	bl	80012d4 <set_deplacement_state>
		}
		if(get_steps_left() <= 0)
 8000a60:	f000 fc8a 	bl	8001378 <get_steps_left>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d138      	bne.n	8000adc <HAL_TIM_PeriodElapsedCallback+0xcc>
		{
			HAL_TIM_Base_Stop_DMA(&htim1);
 8000a6a:	4849      	ldr	r0, [pc, #292]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000a6c:	f002 ffa0 	bl	80039b0 <HAL_TIM_Base_Stop_DMA>
			HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000a70:	2100      	movs	r1, #0
 8000a72:	4847      	ldr	r0, [pc, #284]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000a74:	f003 f8ac 	bl	8003bd0 <HAL_TIM_OC_Stop>

			motor1.pinStepState = RESET;
 8000a78:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	771a      	strb	r2, [r3, #28]
			motor2.pinStepState = RESET;
 8000a7e:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	771a      	strb	r2, [r3, #28]
			motor3.pinStepState = RESET;
 8000a84:	4b45      	ldr	r3, [pc, #276]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	771a      	strb	r2, [r3, #28]
			motor_step(&motor1);
 8000a8a:	4842      	ldr	r0, [pc, #264]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a8c:	f000 f9ad 	bl	8000dea <motor_step>
			motor_step(&motor2);
 8000a90:	4841      	ldr	r0, [pc, #260]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000a92:	f000 f9aa 	bl	8000dea <motor_step>
			motor_step(&motor3);
 8000a96:	4841      	ldr	r0, [pc, #260]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a98:	f000 f9a7 	bl	8000dea <motor_step>
		    motor1.cnt = 0;
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
		    motor2.cnt = 0;
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		    motor3.cnt = 0;
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]

			set_deplacement_state(ARRET);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fc10 	bl	80012d4 <set_deplacement_state>
			data[0] = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	733b      	strb	r3, [r7, #12]
			send(CAN_ADDR_RASPBERRY, REP_AVANCE, data, 1, true, 1, get_id_msg());
 8000ab8:	f000 fba8 	bl	800120c <get_id_msg>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f107 020c 	add.w	r2, r7, #12
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2301      	movs	r3, #1
 8000ace:	f44f 2101 	mov.w	r1, #528384	; 0x81000
 8000ad2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000ad6:	f7ff fc45 	bl	8000364 <send>
				HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_r_arr()[offsetAddr]), get_length()-1);
				set_deplacement_state(DECELERATION);
			}
		}
	}
}
 8000ada:	e055      	b.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
		else if(get_target() < get_length() * 2)
 8000adc:	f000 fc0a 	bl	80012f4 <get_target>
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	f000 fbaf 	bl	8001244 <get_length>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	429c      	cmp	r4, r3
 8000aec:	d226      	bcs.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x12c>
			if(get_steps() == get_steps_left())
 8000aee:	f000 fc37 	bl	8001360 <get_steps>
 8000af2:	4604      	mov	r4, r0
 8000af4:	f000 fc40 	bl	8001378 <get_steps_left>
 8000af8:	4603      	mov	r3, r0
 8000afa:	429c      	cmp	r4, r3
 8000afc:	d144      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
				uint32_t offsetAddr = LENGTH_ARR_MAX - (get_steps_left()-1);
 8000afe:	f000 fc3b 	bl	8001378 <get_steps_left>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 8000b08:	3302      	adds	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
				HAL_TIM_Base_Stop_DMA(&htim1);
 8000b0c:	4820      	ldr	r0, [pc, #128]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000b0e:	f002 ff4f 	bl	80039b0 <HAL_TIM_Base_Stop_DMA>
				HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_r_arr()[offsetAddr]), get_steps_left()-1);
 8000b12:	f000 fbbd 	bl	8001290 <get_r_arr>
 8000b16:	4602      	mov	r2, r0
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	18d4      	adds	r4, r2, r3
 8000b1e:	f000 fc2b 	bl	8001378 <get_steps_left>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000b30:	f002 feb6 	bl	80038a0 <HAL_TIM_Base_Start_DMA>
				set_deplacement_state(DECELERATION);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 fbcd 	bl	80012d4 <set_deplacement_state>
}
 8000b3a:	e025      	b.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
			if (get_length() == get_steps_left())
 8000b3c:	f000 fb82 	bl	8001244 <get_length>
 8000b40:	4604      	mov	r4, r0
 8000b42:	f000 fc19 	bl	8001378 <get_steps_left>
 8000b46:	4603      	mov	r3, r0
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	d11d      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x178>
				uint32_t offsetAddr = LENGTH_ARR_MAX - (get_length()-1);
 8000b4c:	f000 fb7a 	bl	8001244 <get_length>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 8000b56:	3302      	adds	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
				HAL_TIM_Base_Stop_DMA(&htim1);
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000b5c:	f002 ff28 	bl	80039b0 <HAL_TIM_Base_Stop_DMA>
				HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_r_arr()[offsetAddr]), get_length()-1);
 8000b60:	f000 fb96 	bl	8001290 <get_r_arr>
 8000b64:	4602      	mov	r2, r0
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	18d4      	adds	r4, r2, r3
 8000b6c:	f000 fb6a 	bl	8001244 <get_length>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4621      	mov	r1, r4
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000b7e:	f002 fe8f 	bl	80038a0 <HAL_TIM_Base_Start_DMA>
				set_deplacement_state(DECELERATION);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 fba6 	bl	80012d4 <set_deplacement_state>
}
 8000b88:	bf00      	nop
 8000b8a:	371c      	adds	r7, #28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	2000233c 	.word	0x2000233c
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000020 	.word	0x20000020
 8000b9c:	20000040 	.word	0x20000040

08000ba0 <start_generate>:
/*
 * @brief démarre les interruptions et le DMA (accélère)
 * @param None
 * @retval None
 */
void start_generate(void){
 8000ba0:	b598      	push	{r3, r4, r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <start_generate+0x40>)
 8000ba8:	f002 ff34 	bl	8003a14 <HAL_TIM_OC_Start>
    HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_arr()[0]), get_length());
 8000bac:	f000 fb66 	bl	800127c <get_arr>
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	f000 fb47 	bl	8001244 <get_length>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <start_generate+0x40>)
 8000bc0:	f002 fe6e 	bl	80038a0 <HAL_TIM_Base_Start_DMA>
    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <start_generate+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <start_generate+0x40>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 0201 	orr.w	r2, r2, #1
 8000bd2:	60da      	str	r2, [r3, #12]
    set_deplacement_state(ACCELERATION);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 fb7d 	bl	80012d4 <set_deplacement_state>
}
 8000bda:	bf00      	nop
 8000bdc:	bd98      	pop	{r3, r4, r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000233c 	.word	0x2000233c

08000be4 <stop>:
/*
 * @brief s'arrête en décélérant, enregistre le nombre de pas qui aura était effectué une fois le robot arrêté
 * @param None
 * @retval None
 */
void stop(void){
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af04      	add	r7, sp, #16
	set_step_saved(get_steps() + (LENGTH_ARR_MAX - (get_length()-1)));
 8000bea:	f000 fbb9 	bl	8001360 <get_steps>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	f000 fb28 	bl	8001244 <get_length>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	1ae3      	subs	r3, r4, r3
 8000bf8:	f203 4352 	addw	r3, r3, #1106	; 0x452
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fbd9 	bl	80013b4 <set_step_saved>
	Trame_Moteur_t trameSaved;
	trameSaved.fields.nb_steps = get_step_saved();
 8000c02:	f000 fbcb 	bl	800139c <get_step_saved>
 8000c06:	4603      	mov	r3, r0
 8000c08:	603b      	str	r3, [r7, #0]
	trameSaved.fields.div0 = motor1.diviseur;
 8000c0a:	4b38      	ldr	r3, [pc, #224]	; (8000cec <stop+0x108>)
 8000c0c:	791b      	ldrb	r3, [r3, #4]
 8000c0e:	713b      	strb	r3, [r7, #4]
	trameSaved.fields.div1 = motor2.diviseur;
 8000c10:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <stop+0x10c>)
 8000c12:	791b      	ldrb	r3, [r3, #4]
 8000c14:	717b      	strb	r3, [r7, #5]
	trameSaved.fields.div2 = motor3.diviseur;
 8000c16:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <stop+0x110>)
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	71bb      	strb	r3, [r7, #6]
	trameSaved.fields.dir0 = motor1.pinDirState;
 8000c1c:	4b33      	ldr	r3, [pc, #204]	; (8000cec <stop+0x108>)
 8000c1e:	7f5b      	ldrb	r3, [r3, #29]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f362 0300 	bfi	r3, r2, #0, #1
 8000c30:	71fb      	strb	r3, [r7, #7]
	trameSaved.fields.dir1 = motor2.pinDirState;
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <stop+0x10c>)
 8000c34:	7f5b      	ldrb	r3, [r3, #29]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf14      	ite	ne
 8000c3a:	2301      	movne	r3, #1
 8000c3c:	2300      	moveq	r3, #0
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f362 0341 	bfi	r3, r2, #1, #1
 8000c46:	71fb      	strb	r3, [r7, #7]
	trameSaved.fields.dir2 = motor3.pinDirState;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <stop+0x110>)
 8000c4a:	7f5b      	ldrb	r3, [r3, #29]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf14      	ite	ne
 8000c50:	2301      	movne	r3, #1
 8000c52:	2300      	moveq	r3, #0
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f362 0382 	bfi	r3, r2, #2, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
	send(CAN_ADDR_RASPBERRY, REP_AVANCE, trameSaved.raw_data, 8, true, 8, 50);
 8000c5e:	463a      	mov	r2, r7
 8000c60:	2332      	movs	r3, #50	; 0x32
 8000c62:	9302      	str	r3, [sp, #8]
 8000c64:	2308      	movs	r3, #8
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	f44f 2101 	mov.w	r1, #528384	; 0x81000
 8000c72:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000c76:	f7ff fb75 	bl	8000364 <send>
	set_target(calcul_deceleration(get_tim_arr()));
 8000c7a:	f000 fb13 	bl	80012a4 <get_tim_arr>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fcbd 	bl	8000600 <calcul_deceleration>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fb3f 	bl	800130c <set_target>
	set_length(calcul_deceleration(get_tim_arr()));
 8000c8e:	f000 fb09 	bl	80012a4 <get_tim_arr>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fcb3 	bl	8000600 <calcul_deceleration>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fadd 	bl	800125c <set_length>
	uint32_t offsetAddr = LENGTH_ARR_MAX - (get_length()-1);
 8000ca2:	f000 facf 	bl	8001244 <get_length>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 8000cac:	3302      	adds	r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Base_Stop_DMA(&htim1);
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <stop+0x114>)
 8000cb2:	f002 fe7d 	bl	80039b0 <HAL_TIM_Base_Stop_DMA>
	HAL_TIM_Base_Start_DMA(&htim1, (uint32_t *)&(get_r_arr()[offsetAddr]), (get_length()-1));
 8000cb6:	f000 faeb 	bl	8001290 <get_r_arr>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	18d4      	adds	r4, r2, r3
 8000cc2:	f000 fabf 	bl	8001244 <get_length>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <stop+0x114>)
 8000cd4:	f002 fde4 	bl	80038a0 <HAL_TIM_Base_Start_DMA>
	reset_steps();
 8000cd8:	f000 fb28 	bl	800132c <reset_steps>
	set_deplacement_state(DECELERATION);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 faf9 	bl	80012d4 <set_deplacement_state>
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd90      	pop	{r4, r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000020 	.word	0x20000020
 8000cf4:	20000040 	.word	0x20000040
 8000cf8:	2000233c 	.word	0x2000233c

08000cfc <emergency_stop>:
/*
 * @brief s'arrête net sans décélérer
 * @param None
 * @retval None
 */
void emergency_stop(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af04      	add	r7, sp, #16
	HAL_TIM_Base_Stop_DMA(&htim1);
 8000d02:	481d      	ldr	r0, [pc, #116]	; (8000d78 <emergency_stop+0x7c>)
 8000d04:	f002 fe54 	bl	80039b0 <HAL_TIM_Base_Stop_DMA>
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	481b      	ldr	r0, [pc, #108]	; (8000d78 <emergency_stop+0x7c>)
 8000d0c:	f002 ff60 	bl	8003bd0 <HAL_TIM_OC_Stop>
	motor1.pinStepState = RESET;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <emergency_stop+0x80>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	771a      	strb	r2, [r3, #28]
	motor2.pinStepState = RESET;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <emergency_stop+0x84>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	771a      	strb	r2, [r3, #28]
	motor3.pinStepState = RESET;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <emergency_stop+0x88>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	771a      	strb	r2, [r3, #28]
	motor_step(&motor1);
 8000d22:	4816      	ldr	r0, [pc, #88]	; (8000d7c <emergency_stop+0x80>)
 8000d24:	f000 f861 	bl	8000dea <motor_step>
	motor_step(&motor2);
 8000d28:	4815      	ldr	r0, [pc, #84]	; (8000d80 <emergency_stop+0x84>)
 8000d2a:	f000 f85e 	bl	8000dea <motor_step>
	motor_step(&motor3);
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <emergency_stop+0x88>)
 8000d30:	f000 f85b 	bl	8000dea <motor_step>
    motor1.cnt = 0;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <emergency_stop+0x80>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
    motor2.cnt = 0;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <emergency_stop+0x84>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
    motor3.cnt = 0;
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <emergency_stop+0x88>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
	set_deplacement_state(ARRET);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fac4 	bl	80012d4 <set_deplacement_state>
	uint8_t data[1];
	data[0] = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	713b      	strb	r3, [r7, #4]
	send(CAN_ADDR_RASPBERRY, REP_AVANCE, data, 1, true, 1, get_id_msg());
 8000d50:	f000 fa5c 	bl	800120c <get_id_msg>
 8000d54:	4603      	mov	r3, r0
 8000d56:	1d3a      	adds	r2, r7, #4
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2301      	movs	r3, #1
 8000d64:	f44f 2101 	mov.w	r1, #528384	; 0x81000
 8000d68:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000d6c:	f7ff fafa 	bl	8000364 <send>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000233c 	.word	0x2000233c
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000020 	.word	0x20000020
 8000d84:	20000040 	.word	0x20000040

08000d88 <avance>:
 * @brief incrémente le compteur du moteur
 * @param &motor adresse du motor
 * @retval ARRET_MOTOR le moteur est à l'arrêt
 * @retval MARCHE_MOTOR le moteur peut avancer
 */
Motor_State_t avance(Motor_t *motor){
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	Motor_State_t CR;
	if(motor->diviseur==0){
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d105      	bne.n	8000da4 <avance+0x1c>
		motor->pinStepState = RESET;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	771a      	strb	r2, [r3, #28]
		CR = ARRET_MOTOR;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e01b      	b.n	8000ddc <avance+0x54>
	}
	else{
	    motor->cnt++;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	601a      	str	r2, [r3, #0]
	    motor->cnt %= motor->diviseur;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	7912      	ldrb	r2, [r2, #4]
 8000db6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000dba:	fb01 f202 	mul.w	r2, r1, r2
 8000dbe:	1a9a      	subs	r2, r3, r2
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	601a      	str	r2, [r3, #0]
	    motor->pinStepState = motor->cnt == 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	771a      	strb	r2, [r3, #28]
	    CR = MARCHE_MOTOR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
	}
    return CR;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <motor_step>:
/*
 * @brief ecris sur la pin step du motor
 * @param &motor adresse du motor
 * @retval None
 */
void motor_step(Motor_t *motor){
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->PIN_STEP_TYPE, motor->PIN_STEP, motor->pinStepState);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6958      	ldr	r0, [r3, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	8a19      	ldrh	r1, [r3, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7f1b      	ldrb	r3, [r3, #28]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f001 fe7a 	bl	8002af8 <HAL_GPIO_WritePin>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <motor_dir>:
/*
 * @brief ecris sur la pin dir du motor
 * @param &motor adresse du motor
 * @retval None
 */
void motor_dir(Motor_t *motor){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->PIN_DIR_TYPE, motor->PIN_DIR, motor->pinDirState);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6998      	ldr	r0, [r3, #24]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	8a59      	ldrh	r1, [r3, #18]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7f5b      	ldrb	r3, [r3, #29]
 8000e20:	461a      	mov	r2, r3
 8000e22:	f001 fe69 	bl	8002af8 <HAL_GPIO_WritePin>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <motor_en>:
 * @brief ecris sur la pin enable de chaque motor
 * @param SET moteurs non clampés
 * @param RESET moteurs clampés
 * @retval None
 */
void motor_en(GPIO_PinState state){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, state);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2108      	movs	r1, #8
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <motor_en+0x20>)
 8000e42:	f001 fe59 	bl	8002af8 <HAL_GPIO_WritePin>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	48000400 	.word	0x48000400

08000e54 <motor_micro_step>:
 * @param RESET, SET 4 microsteps (quarter speed)
 * @param SET, RESET 2 microsteps (half speed)
 * @param SET, SET 16 microsteps
 * @retval None
 */
void motor_micro_step(GPIO_PinState MS1state, GPIO_PinState MS2state){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, MS1state);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	461a      	mov	r2, r3
 8000e68:	2110      	movs	r1, #16
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <motor_micro_step+0x30>)
 8000e6c:	f001 fe44 	bl	8002af8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, MS2state);
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	461a      	mov	r2, r3
 8000e74:	2120      	movs	r1, #32
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <motor_micro_step+0x30>)
 8000e78:	f001 fe3e 	bl	8002af8 <HAL_GPIO_WritePin>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	48000400 	.word	0x48000400

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_MspInit+0x44>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_MspInit+0x44>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x44>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_CAN_MspInit+0xc0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d149      	bne.n	8000f86 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <HAL_CAN_MspInit+0xc4>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <HAL_CAN_MspInit+0xc4>)
 8000ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <HAL_CAN_MspInit+0xc4>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_CAN_MspInit+0xc4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <HAL_CAN_MspInit+0xc4>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <HAL_CAN_MspInit+0xc4>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f34:	2309      	movs	r3, #9
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f001 fc6f 	bl	8002824 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2013      	movs	r0, #19
 8000f4c:	f001 f9fb 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f50:	2013      	movs	r0, #19
 8000f52:	f001 fa14 	bl	800237e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2014      	movs	r0, #20
 8000f5c:	f001 f9f3 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f60:	2014      	movs	r0, #20
 8000f62:	f001 fa0c 	bl	800237e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2015      	movs	r0, #21
 8000f6c:	f001 f9eb 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f70:	2015      	movs	r0, #21
 8000f72:	f001 fa04 	bl	800237e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2016      	movs	r0, #22
 8000f7c:	f001 f9e3 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f80:	2016      	movs	r0, #22
 8000f82:	f001 f9fc 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40006400 	.word	0x40006400
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a2e      	ldr	r2, [pc, #184]	; (8001060 <HAL_TIM_Base_MspInit+0xc8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d156      	bne.n	8001058 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <HAL_TIM_Base_MspInit+0xcc>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fae:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <HAL_TIM_Base_MspInit+0xcc>)
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <HAL_TIM_Base_MspInit+0xcc>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel6;
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000fc4:	4a29      	ldr	r2, [pc, #164]	; (800106c <HAL_TIM_Base_MspInit+0xd4>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_7;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000fca:	2207      	movs	r2, #7
 8000fcc:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe6:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fee:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000ffc:	481a      	ldr	r0, [pc, #104]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8000ffe:	f001 f9d9 	bl	80023b4 <HAL_DMA_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001008:	f7ff fcfc 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8001010:	621a      	str	r2, [r3, #32]
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <HAL_TIM_Base_MspInit+0xd0>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2018      	movs	r0, #24
 800101e:	f001 f992 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001022:	2018      	movs	r0, #24
 8001024:	f001 f9ab 	bl	800237e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2019      	movs	r0, #25
 800102e:	f001 f98a 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001032:	2019      	movs	r0, #25
 8001034:	f001 f9a3 	bl	800237e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	201a      	movs	r0, #26
 800103e:	f001 f982 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001042:	201a      	movs	r0, #26
 8001044:	f001 f99b 	bl	800237e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	201b      	movs	r0, #27
 800104e:	f001 f97a 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001052:	201b      	movs	r0, #27
 8001054:	f001 f993 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40012c00 	.word	0x40012c00
 8001064:	40021000 	.word	0x40021000
 8001068:	20002388 	.word	0x20002388
 800106c:	4002006c 	.word	0x4002006c

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_TIM_MspPostInit+0x68>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11d      	bne.n	80010ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010bc:	2301      	movs	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f001 fbab 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40012c00 	.word	0x40012c00
 80010dc:	40021000 	.word	0x40021000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f9d0 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <DMA1_Channel6_IRQHandler+0x10>)
 800113a:	f001 fa94 	bl	8002666 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20002388 	.word	0x20002388

08001148 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <CAN1_TX_IRQHandler+0x10>)
 800114e:	f000 fdf0 	bl	8001d32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20002314 	.word	0x20002314

0800115c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <CAN1_RX0_IRQHandler+0x10>)
 8001162:	f000 fde6 	bl	8001d32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20002314 	.word	0x20002314

08001170 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <CAN1_RX1_IRQHandler+0x10>)
 8001176:	f000 fddc 	bl	8001d32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20002314 	.word	0x20002314

08001184 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <CAN1_SCE_IRQHandler+0x10>)
 800118a:	f000 fdd2 	bl	8001d32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20002314 	.word	0x20002314

08001198 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800119e:	f002 fe00 	bl	8003da2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000233c 	.word	0x2000233c

080011ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011b2:	f002 fdf6 	bl	8003da2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000233c 	.word	0x2000233c

080011c0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80011c6:	f002 fdec 	bl	8003da2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000233c 	.word	0x2000233c

080011d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM1_CC_IRQHandler+0x10>)
 80011da:	f002 fde2 	bl	8003da2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000233c 	.word	0x2000233c

080011e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <get_id_msg>:
/*
 * @brief récupère l'identifiant du message Raspy
 * @param None
 * @retval idMsg
 */
uint8_t get_id_msg(void){
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return idMsg;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <get_id_msg+0x14>)
 8001212:	781b      	ldrb	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200023f9 	.word	0x200023f9

08001224 <set_id_msg>:
/*
 * @brief modifie idMsg
 * @param id du message de la Raspy
 * @retval None
 */
void set_id_msg(uint8_t id){
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	idMsg = id;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <set_id_msg+0x1c>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	7013      	strb	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	200023f9 	.word	0x200023f9

08001244 <get_length>:
/*
 * @brief récupère la longueur des accélèlérations/décélérations
 * @param None
 * @retval lenght
 */
uint32_t get_length(void){
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return length;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <get_length+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200022ec 	.word	0x200022ec

0800125c <set_length>:
/*
 * @brief modifie lenght, la longueur des accélèlérations/décélérations
 * @param l longueur
 * @retval None
 */
void set_length(uint32_t l){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	length = l;
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <set_length+0x1c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200022ec 	.word	0x200022ec

0800127c <get_arr>:
/*
 * @brief récupère le pointeur du tableau d'accélération
 * @param None
 * @retval arr
 */
uint32_t* get_arr(void){
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	return arr;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <get_arr+0x10>)
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	20000064 	.word	0x20000064

08001290 <get_r_arr>:
/*
 * @brief récupère le pointeur du tableau de décélèration
 * @param None
 * @retval rArr
 */
uint32_t* get_r_arr(void){
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	return rArr;
 8001294:	4b02      	ldr	r3, [pc, #8]	; (80012a0 <get_r_arr+0x10>)
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	200011a8 	.word	0x200011a8

080012a4 <get_tim_arr>:
/*
 * @brief récupère l'ARR actuel du timer
 * @param None
 * @retval ARR
 */
uint32_t get_tim_arr(void){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	return htim1.Instance->ARR;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <get_tim_arr+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	2000233c 	.word	0x2000233c

080012bc <get_deplacement_state>:
 * @retval {ARRET}
 * @retval {ACCELERATION}
 * @retval {MAINTIENT}
 * @retval {DECELERATION}
 */
Deplacement_State_t get_deplacement_state(void){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return deplacementState;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <get_deplacement_state+0x14>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20002408 	.word	0x20002408

080012d4 <set_deplacement_state>:
 * @param {ACCELERATION}
 * @param {MAINTIENT}
 * @param {DECELERATION}
 * @retval None
 */
void set_deplacement_state(Deplacement_State_t state){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	deplacementState = state;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <set_deplacement_state+0x1c>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	7013      	strb	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20002408 	.word	0x20002408

080012f4 <get_target>:
/*
 * @brief récupère le nombre de pas à effectuer
 * @param None
 * @retval target
 */
uint32_t get_target(void){
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	return target;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <get_target+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200023fc 	.word	0x200023fc

0800130c <set_target>:
/*
 * @brief modifie le nombre de pas a effectuer
 * @param t nombre de pas a effectuer
 * @retval None
 */
void set_target(uint32_t t){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	target = t;
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <set_target+0x1c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200023fc 	.word	0x200023fc

0800132c <reset_steps>:
/*
 * @brief réinitialise le nombre de steps effectués
 * @param None
 * @retval None
 */
void reset_steps(void){
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	steps = 0;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <reset_steps+0x14>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20002400 	.word	0x20002400

08001344 <count_steps>:
/*
 * @brief incrémente de 1 le nombre de steps effectués
 * @param None
 * @retval None
 */
void count_steps(void){
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	steps++;
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <count_steps+0x18>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a03      	ldr	r2, [pc, #12]	; (800135c <count_steps+0x18>)
 8001350:	6013      	str	r3, [r2, #0]
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20002400 	.word	0x20002400

08001360 <get_steps>:
/*
 * @brief récupère le nombre de steps effectués
 * @param None
 * @retval steps
 */
uint32_t get_steps(void){
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return steps;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <get_steps+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20002400 	.word	0x20002400

08001378 <get_steps_left>:
/*
 * @brief récupère le nombre de steps qu'il faut effectuer pouru atteindre le nombre de pas cible
 * @param None
 * @retval stepsLeft
 */
uint32_t get_steps_left(void){
 8001378:	b598      	push	{r3, r4, r7, lr}
 800137a:	af00      	add	r7, sp, #0
	stepsLeft = get_target() - get_steps();
 800137c:	f7ff ffba 	bl	80012f4 <get_target>
 8001380:	4604      	mov	r4, r0
 8001382:	f7ff ffed 	bl	8001360 <get_steps>
 8001386:	4603      	mov	r3, r0
 8001388:	1ae3      	subs	r3, r4, r3
 800138a:	4a03      	ldr	r2, [pc, #12]	; (8001398 <get_steps_left+0x20>)
 800138c:	6013      	str	r3, [r2, #0]
	return stepsLeft;
 800138e:	4b02      	ldr	r3, [pc, #8]	; (8001398 <get_steps_left+0x20>)
 8001390:	681b      	ldr	r3, [r3, #0]
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd98      	pop	{r3, r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	20002404 	.word	0x20002404

0800139c <get_step_saved>:
/*
 * @brief récupère le nombre de steps enregistrés
 * @param None
 * @retval stepSaved
 */
uint32_t get_step_saved(void){
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	return stepSaved;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <get_step_saved+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000240c 	.word	0x2000240c

080013b4 <set_step_saved>:
/*
 * @brief modifie le nombre de steps enregistrés
 * @param stepSaved
 * @retval None
 */
void set_step_saved(uint32_t s){
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	stepSaved = s;
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <set_step_saved+0x1c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	2000240c 	.word	0x2000240c

080013d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d8:	f7ff ff06 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	; (8001420 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001402:	f003 fd13 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001406:	f7ff f919 	bl	800063c <main>

0800140a <LoopForever>:

LoopForever:
    b LoopForever
 800140a:	e7fe      	b.n	800140a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800140c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	200022f8 	.word	0x200022f8
  ldr r2, =_sidata
 8001418:	08004ee4 	.word	0x08004ee4
  ldr r2, =_sbss
 800141c:	200022f8 	.word	0x200022f8
  ldr r4, =_ebss
 8001420:	20002414 	.word	0x20002414

08001424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_IRQHandler>

08001426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 ff7d 	bl	8002330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f80e 	bl	8001458 <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e001      	b.n	800144c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001448:	f7ff fd1e 	bl	8000e88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_InitTick+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_InitTick+0x70>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_InitTick+0x6c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 ff89 	bl	800239a <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d809      	bhi.n	80014a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 ff53 	bl	8002346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_InitTick+0x74>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e007      	b.n	80014b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e004      	b.n	80014b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e001      	b.n	80014b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200022f4 	.word	0x200022f4
 80014c8:	20000060 	.word	0x20000060
 80014cc:	200022f0 	.word	0x200022f0

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200022f4 	.word	0x200022f4
 80014f4:	20002410 	.word	0x20002410

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20002410 	.word	0x20002410

08001510 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e0ed      	b.n	80016fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fcce 	bl	8000ed0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001544:	f7ff ffd8 	bl	80014f8 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800154a:	e012      	b.n	8001572 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800154c:	f7ff ffd4 	bl	80014f8 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b0a      	cmp	r3, #10
 8001558:	d90b      	bls.n	8001572 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2205      	movs	r2, #5
 800156a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0c5      	b.n	80016fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0e5      	beq.n	800154c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0202 	bic.w	r2, r2, #2
 800158e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001590:	f7ff ffb2 	bl	80014f8 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001596:	e012      	b.n	80015be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001598:	f7ff ffae 	bl	80014f8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b0a      	cmp	r3, #10
 80015a4:	d90b      	bls.n	80015be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2205      	movs	r2, #5
 80015b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e09f      	b.n	80016fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e5      	bne.n	8001598 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7e1b      	ldrb	r3, [r3, #24]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d108      	bne.n	80015e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e007      	b.n	80015f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7e5b      	ldrb	r3, [r3, #25]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d108      	bne.n	8001610 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e007      	b.n	8001620 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800161e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e9b      	ldrb	r3, [r3, #26]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0220 	orr.w	r2, r2, #32
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0220 	bic.w	r2, r2, #32
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7edb      	ldrb	r3, [r3, #27]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0210 	bic.w	r2, r2, #16
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e007      	b.n	8001674 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0210 	orr.w	r2, r2, #16
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7f1b      	ldrb	r3, [r3, #28]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0208 	orr.w	r2, r2, #8
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0208 	bic.w	r2, r2, #8
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7f5b      	ldrb	r3, [r3, #29]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0204 	orr.w	r2, r2, #4
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0204 	bic.w	r2, r2, #4
 80016c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	ea42 0103 	orr.w	r1, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	1e5a      	subs	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001706:	b480      	push	{r7}
 8001708:	b087      	sub	sp, #28
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800171e:	7cfb      	ldrb	r3, [r7, #19]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d003      	beq.n	800172c <HAL_CAN_ConfigFilter+0x26>
 8001724:	7cfb      	ldrb	r3, [r7, #19]
 8001726:	2b02      	cmp	r3, #2
 8001728:	f040 80aa 	bne.w	8001880 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001732:	f043 0201 	orr.w	r2, r3, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2201      	movs	r2, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d123      	bne.n	80017ae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	401a      	ands	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001788:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3248      	adds	r2, #72	; 0x48
 800178e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	3348      	adds	r3, #72	; 0x48
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d122      	bne.n	80017fc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3248      	adds	r2, #72	; 0x48
 80017dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017f2:	6979      	ldr	r1, [r7, #20]
 80017f4:	3348      	adds	r3, #72	; 0x48
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001816:	e007      	b.n	8001828 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	431a      	orrs	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001842:	e007      	b.n	8001854 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d107      	bne.n	800186c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001872:	f023 0201 	bic.w	r2, r3, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	e006      	b.n	800188e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
  }
}
 800188e:	4618      	mov	r0, r3
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d12e      	bne.n	800190c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2202      	movs	r2, #2
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018c6:	f7ff fe17 	bl	80014f8 <HAL_GetTick>
 80018ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018cc:	e012      	b.n	80018f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ce:	f7ff fe13 	bl	80014f8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b0a      	cmp	r3, #10
 80018da:	d90b      	bls.n	80018f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2205      	movs	r2, #5
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e012      	b.n	800191a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1e5      	bne.n	80018ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e006      	b.n	800191a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001922:	b480      	push	{r7}
 8001924:	b089      	sub	sp, #36	; 0x24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001936:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d003      	beq.n	800194e <HAL_CAN_AddTxMessage+0x2c>
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f040 80ad 	bne.w	8001aa8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10a      	bne.n	800196e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8095 	beq.w	8001a98 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	0e1b      	lsrs	r3, r3, #24
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001978:	2201      	movs	r2, #1
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	409a      	lsls	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10d      	bne.n	80019a6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001994:	68f9      	ldr	r1, [r7, #12]
 8001996:	6809      	ldr	r1, [r1, #0]
 8001998:	431a      	orrs	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3318      	adds	r3, #24
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	440b      	add	r3, r1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e00f      	b.n	80019c6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3318      	adds	r3, #24
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	440b      	add	r3, r1
 80019c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3318      	adds	r3, #24
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	440b      	add	r3, r1
 80019d6:	3304      	adds	r3, #4
 80019d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	7d1b      	ldrb	r3, [r3, #20]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d111      	bne.n	8001a06 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3318      	adds	r3, #24
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	6811      	ldr	r1, [r2, #0]
 80019f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3318      	adds	r3, #24
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	440b      	add	r3, r1
 8001a02:	3304      	adds	r3, #4
 8001a04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3307      	adds	r3, #7
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3306      	adds	r3, #6
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	041b      	lsls	r3, r3, #16
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3305      	adds	r3, #5
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	4313      	orrs	r3, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	3204      	adds	r2, #4
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	4610      	mov	r0, r2
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	6811      	ldr	r1, [r2, #0]
 8001a2e:	ea43 0200 	orr.w	r2, r3, r0
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	440b      	add	r3, r1
 8001a38:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3303      	adds	r3, #3
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	061a      	lsls	r2, r3, #24
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3302      	adds	r3, #2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3301      	adds	r3, #1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	7812      	ldrb	r2, [r2, #0]
 8001a5e:	4610      	mov	r0, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	6811      	ldr	r1, [r2, #0]
 8001a64:	ea43 0200 	orr.w	r2, r3, r0
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3318      	adds	r3, #24
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4413      	add	r3, r2
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	6811      	ldr	r1, [r2, #0]
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3318      	adds	r3, #24
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	440b      	add	r3, r1
 8001a92:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e00e      	b.n	8001ab6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e006      	b.n	8001ab6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b087      	sub	sp, #28
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d003      	beq.n	8001ae6 <HAL_CAN_GetRxMessage+0x24>
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	f040 80f3 	bne.w	8001ccc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10e      	bne.n	8001b0a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0e7      	b.n	8001cda <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d107      	bne.n	8001b28 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0d8      	b.n	8001cda <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	331b      	adds	r3, #27
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0204 	and.w	r2, r3, #4
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	331b      	adds	r3, #27
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0d5b      	lsrs	r3, r3, #21
 8001b56:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e00b      	b.n	8001b78 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	331b      	adds	r3, #27
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	331b      	adds	r3, #27
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0202 	and.w	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	331b      	adds	r3, #27
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 020f 	and.w	r2, r3, #15
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	331b      	adds	r3, #27
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	331b      	adds	r3, #27
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0c1b      	lsrs	r3, r3, #16
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0a1a      	lsrs	r2, r3, #8
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0c1a      	lsrs	r2, r3, #16
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0e1a      	lsrs	r2, r3, #24
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3303      	adds	r3, #3
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0a1a      	lsrs	r2, r3, #8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3305      	adds	r3, #5
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0c1a      	lsrs	r2, r3, #16
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	3306      	adds	r3, #6
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e1a      	lsrs	r2, r3, #24
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0220 	orr.w	r2, r2, #32
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	e007      	b.n	8001cc8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0220 	orr.w	r2, r2, #32
 8001cc6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e006      	b.n	8001cda <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d002      	beq.n	8001d04 <HAL_CAN_ActivateNotification+0x1e>
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d109      	bne.n	8001d18 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6959      	ldr	r1, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e006      	b.n	8001d26 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
  }
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b08a      	sub	sp, #40	; 0x28
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d07c      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d023      	beq.n	8001dca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f983 	bl	80020a0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d9a:	e016      	b.n	8001dca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	e00c      	b.n	8001dca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	e002      	b.n	8001dca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f989 	bl	80020dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d024      	beq.n	8001e1e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ddc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f963 	bl	80020b4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001dee:	e016      	b.n	8001e1e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	e00c      	b.n	8001e1e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
 8001e16:	e002      	b.n	8001e1e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f969 	bl	80020f0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d024      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f943 	bl	80020c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e42:	e016      	b.n	8001e72 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	e00c      	b.n	8001e72 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6a:	e002      	b.n	8001e72 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f949 	bl	8002104 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2210      	movs	r2, #16
 8001e94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2208      	movs	r2, #8
 8001eb0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f930 	bl	8002118 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7fe f97b 	bl	80001cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00c      	beq.n	8001efa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00b      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2208      	movs	r2, #8
 8001f14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f912 	bl	8002140 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f8f9 	bl	800212c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2210      	movs	r2, #16
 8001f54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8fc 	bl	8002154 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2208      	movs	r2, #8
 8001f76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8f5 	bl	8002168 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d07b      	beq.n	8002080 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d072      	beq.n	8002078 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d043      	beq.n	8002078 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d03e      	beq.n	8002078 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002000:	2b60      	cmp	r3, #96	; 0x60
 8002002:	d02b      	beq.n	800205c <HAL_CAN_IRQHandler+0x32a>
 8002004:	2b60      	cmp	r3, #96	; 0x60
 8002006:	d82e      	bhi.n	8002066 <HAL_CAN_IRQHandler+0x334>
 8002008:	2b50      	cmp	r3, #80	; 0x50
 800200a:	d022      	beq.n	8002052 <HAL_CAN_IRQHandler+0x320>
 800200c:	2b50      	cmp	r3, #80	; 0x50
 800200e:	d82a      	bhi.n	8002066 <HAL_CAN_IRQHandler+0x334>
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d019      	beq.n	8002048 <HAL_CAN_IRQHandler+0x316>
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d826      	bhi.n	8002066 <HAL_CAN_IRQHandler+0x334>
 8002018:	2b30      	cmp	r3, #48	; 0x30
 800201a:	d010      	beq.n	800203e <HAL_CAN_IRQHandler+0x30c>
 800201c:	2b30      	cmp	r3, #48	; 0x30
 800201e:	d822      	bhi.n	8002066 <HAL_CAN_IRQHandler+0x334>
 8002020:	2b10      	cmp	r3, #16
 8002022:	d002      	beq.n	800202a <HAL_CAN_IRQHandler+0x2f8>
 8002024:	2b20      	cmp	r3, #32
 8002026:	d005      	beq.n	8002034 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002028:	e01d      	b.n	8002066 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	f043 0308 	orr.w	r3, r3, #8
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002032:	e019      	b.n	8002068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800203c:	e014      	b.n	8002068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002046:	e00f      	b.n	8002068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002050:	e00a      	b.n	8002068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800205a:	e005      	b.n	8002068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002064:	e000      	b.n	8002068 <HAL_CAN_IRQHandler+0x336>
            break;
 8002066:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002076:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2204      	movs	r2, #4
 800207e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f872 	bl	800217c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	; 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <__NVIC_GetPriorityGrouping+0x18>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0307 	and.w	r3, r3, #7
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	2b00      	cmp	r3, #0
 8002204:	db0b      	blt.n	800221e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	4907      	ldr	r1, [pc, #28]	; (800222c <__NVIC_EnableIRQ+0x38>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	2001      	movs	r0, #1
 8002216:	fa00 f202 	lsl.w	r2, r0, r2
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000e100 	.word	0xe000e100

08002230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	6039      	str	r1, [r7, #0]
 800223a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	db0a      	blt.n	800225a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	490c      	ldr	r1, [pc, #48]	; (800227c <__NVIC_SetPriority+0x4c>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	0112      	lsls	r2, r2, #4
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	440b      	add	r3, r1
 8002254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002258:	e00a      	b.n	8002270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4908      	ldr	r1, [pc, #32]	; (8002280 <__NVIC_SetPriority+0x50>)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3b04      	subs	r3, #4
 8002268:	0112      	lsls	r2, r2, #4
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	440b      	add	r3, r1
 800226e:	761a      	strb	r2, [r3, #24]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	; 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f1c3 0307 	rsb	r3, r3, #7
 800229e:	2b04      	cmp	r3, #4
 80022a0:	bf28      	it	cs
 80022a2:	2304      	movcs	r3, #4
 80022a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d902      	bls.n	80022b4 <NVIC_EncodePriority+0x30>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3b03      	subs	r3, #3
 80022b2:	e000      	b.n	80022b6 <NVIC_EncodePriority+0x32>
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	401a      	ands	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43d9      	mvns	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	4313      	orrs	r3, r2
         );
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022fc:	d301      	bcc.n	8002302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fe:	2301      	movs	r3, #1
 8002300:	e00f      	b.n	8002322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <SysTick_Config+0x40>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230a:	210f      	movs	r1, #15
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f7ff ff8e 	bl	8002230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <SysTick_Config+0x40>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <SysTick_Config+0x40>)
 800231c:	2207      	movs	r2, #7
 800231e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	e000e010 	.word	0xe000e010

08002330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff29 	bl	8002190 <__NVIC_SetPriorityGrouping>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002358:	f7ff ff3e 	bl	80021d8 <__NVIC_GetPriorityGrouping>
 800235c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	6978      	ldr	r0, [r7, #20]
 8002364:	f7ff ff8e 	bl	8002284 <NVIC_EncodePriority>
 8002368:	4602      	mov	r2, r0
 800236a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff5d 	bl	8002230 <__NVIC_SetPriority>
}
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff31 	bl	80021f4 <__NVIC_EnableIRQ>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ffa2 	bl	80022ec <SysTick_Config>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e098      	b.n	80024f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b4d      	ldr	r3, [pc, #308]	; (8002504 <HAL_DMA_Init+0x150>)
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d80f      	bhi.n	80023f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <HAL_DMA_Init+0x154>)
 80023da:	4413      	add	r3, r2
 80023dc:	4a4b      	ldr	r2, [pc, #300]	; (800250c <HAL_DMA_Init+0x158>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	009a      	lsls	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a48      	ldr	r2, [pc, #288]	; (8002510 <HAL_DMA_Init+0x15c>)
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
 80023f0:	e00e      	b.n	8002410 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_DMA_Init+0x160>)
 80023fa:	4413      	add	r3, r2
 80023fc:	4a43      	ldr	r2, [pc, #268]	; (800250c <HAL_DMA_Init+0x158>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a42      	ldr	r2, [pc, #264]	; (8002518 <HAL_DMA_Init+0x164>)
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002434:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002440:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246a:	d039      	beq.n	80024e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	4a27      	ldr	r2, [pc, #156]	; (8002510 <HAL_DMA_Init+0x15c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d11a      	bne.n	80024ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <HAL_DMA_Init+0x168>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f003 031c 	and.w	r3, r3, #28
 8002482:	210f      	movs	r1, #15
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	4924      	ldr	r1, [pc, #144]	; (800251c <HAL_DMA_Init+0x168>)
 800248c:	4013      	ands	r3, r2
 800248e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_DMA_Init+0x168>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f003 031c 	and.w	r3, r3, #28
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	491d      	ldr	r1, [pc, #116]	; (800251c <HAL_DMA_Init+0x168>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
 80024aa:	e019      	b.n	80024e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_DMA_Init+0x16c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f003 031c 	and.w	r3, r3, #28
 80024b8:	210f      	movs	r1, #15
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	4917      	ldr	r1, [pc, #92]	; (8002520 <HAL_DMA_Init+0x16c>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_DMA_Init+0x16c>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f003 031c 	and.w	r3, r3, #28
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	4911      	ldr	r1, [pc, #68]	; (8002520 <HAL_DMA_Init+0x16c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40020407 	.word	0x40020407
 8002508:	bffdfff8 	.word	0xbffdfff8
 800250c:	cccccccd 	.word	0xcccccccd
 8002510:	40020000 	.word	0x40020000
 8002514:	bffdfbf8 	.word	0xbffdfbf8
 8002518:	40020400 	.word	0x40020400
 800251c:	400200a8 	.word	0x400200a8
 8002520:	400204a8 	.word	0x400204a8

08002524 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_DMA_Start_IT+0x20>
 8002540:	2302      	movs	r3, #2
 8002542:	e04b      	b.n	80025dc <HAL_DMA_Start_IT+0xb8>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d13a      	bne.n	80025ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f921 	bl	80027c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 020e 	orr.w	r2, r2, #14
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e00f      	b.n	80025bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0204 	bic.w	r2, r2, #4
 80025aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 020a 	orr.w	r2, r2, #10
 80025ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e005      	b.n	80025da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
 80025d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025da:	7dfb      	ldrb	r3, [r7, #23]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d005      	beq.n	8002608 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2204      	movs	r2, #4
 8002600:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e029      	b.n	800265c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020e 	bic.w	r2, r2, #14
 8002616:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f003 021c 	and.w	r2, r3, #28
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
    }
  }
  return status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f003 031c 	and.w	r3, r3, #28
 8002686:	2204      	movs	r2, #4
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d026      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x7a>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d021      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0204 	bic.w	r2, r2, #4
 80026b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f003 021c 	and.w	r2, r3, #28
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2104      	movs	r1, #4
 80026c8:	fa01 f202 	lsl.w	r2, r1, r2
 80026cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d071      	beq.n	80027ba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80026de:	e06c      	b.n	80027ba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f003 031c 	and.w	r3, r3, #28
 80026e8:	2202      	movs	r2, #2
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02e      	beq.n	8002752 <HAL_DMA_IRQHandler+0xec>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d029      	beq.n	8002752 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 020a 	bic.w	r2, r2, #10
 800271a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	f003 021c 	and.w	r2, r3, #28
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2102      	movs	r1, #2
 8002732:	fa01 f202 	lsl.w	r2, r1, r2
 8002736:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d038      	beq.n	80027ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002750:	e033      	b.n	80027ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 031c 	and.w	r3, r3, #28
 800275a:	2208      	movs	r2, #8
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d02a      	beq.n	80027bc <HAL_DMA_IRQHandler+0x156>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d025      	beq.n	80027bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 020e 	bic.w	r2, r2, #14
 800277e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f003 021c 	and.w	r2, r3, #28
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027ba:	bf00      	nop
 80027bc:	bf00      	nop
}
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f003 021c 	and.w	r2, r3, #28
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d108      	bne.n	8002808 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002806:	e007      	b.n	8002818 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	60da      	str	r2, [r3, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002832:	e148      	b.n	8002ac6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 813a 	beq.w	8002ac0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d005      	beq.n	8002864 <HAL_GPIO_Init+0x40>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d130      	bne.n	80028c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800289a:	2201      	movs	r2, #1
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	f003 0201 	and.w	r2, r3, #1
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d017      	beq.n	8002902 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d123      	bne.n	8002956 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	08da      	lsrs	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3208      	adds	r2, #8
 8002950:	6939      	ldr	r1, [r7, #16]
 8002952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0203 	and.w	r2, r3, #3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8094 	beq.w	8002ac0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002998:	4b52      	ldr	r3, [pc, #328]	; (8002ae4 <HAL_GPIO_Init+0x2c0>)
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_GPIO_Init+0x2c0>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6613      	str	r3, [r2, #96]	; 0x60
 80029a4:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <HAL_GPIO_Init+0x2c0>)
 80029a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029b0:	4a4d      	ldr	r2, [pc, #308]	; (8002ae8 <HAL_GPIO_Init+0x2c4>)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029da:	d00d      	beq.n	80029f8 <HAL_GPIO_Init+0x1d4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a43      	ldr	r2, [pc, #268]	; (8002aec <HAL_GPIO_Init+0x2c8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <HAL_GPIO_Init+0x1d0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a42      	ldr	r2, [pc, #264]	; (8002af0 <HAL_GPIO_Init+0x2cc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_GPIO_Init+0x1cc>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e004      	b.n	80029fa <HAL_GPIO_Init+0x1d6>
 80029f0:	2307      	movs	r3, #7
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x1d6>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_GPIO_Init+0x1d6>
 80029f8:	2300      	movs	r3, #0
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	f002 0203 	and.w	r2, r2, #3
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	4093      	lsls	r3, r2
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a0a:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <HAL_GPIO_Init+0x2c4>)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a3c:	4a2d      	ldr	r2, [pc, #180]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a42:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a66:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a96:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_GPIO_Init+0x2d0>)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f aeaf 	bne.w	8002834 <HAL_GPIO_Init+0x10>
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	48000400 	.word	0x48000400
 8002af0:	48000800 	.word	0x48000800
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
 8002b04:	4613      	mov	r3, r2
 8002b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b08:	787b      	ldrb	r3, [r7, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40007000 	.word	0x40007000

08002b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b52:	d130      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b60:	d038      	beq.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2232      	movs	r2, #50	; 0x32
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9b      	lsrs	r3, r3, #18
 8002b84:	3301      	adds	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b88:	e002      	b.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	d102      	bne.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f2      	bne.n	8002b8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb0:	d110      	bne.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e00f      	b.n	8002bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc2:	d007      	beq.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc4:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bcc:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40007000 	.word	0x40007000
 8002be8:	20000060 	.word	0x20000060
 8002bec:	431bde83 	.word	0x431bde83

08002bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f000 bc02 	b.w	8003408 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c04:	4b96      	ldr	r3, [pc, #600]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c0e:	4b94      	ldr	r3, [pc, #592]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80e4 	beq.w	8002dee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4c>
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	f040 808b 	bne.w	8002d4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	f040 8087 	bne.w	8002d4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c3c:	4b88      	ldr	r3, [pc, #544]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_OscConfig+0x64>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e3d9      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_RCC_OscConfig+0x7e>
 8002c64:	4b7e      	ldr	r3, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6c:	e005      	b.n	8002c7a <HAL_RCC_OscConfig+0x8a>
 8002c6e:	4b7c      	ldr	r3, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d223      	bcs.n	8002cc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fd54 	bl	8003730 <RCC_SetFlashLatencyFromMSIRange>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e3ba      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c92:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a72      	ldr	r2, [pc, #456]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002c98:	f043 0308 	orr.w	r3, r3, #8
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	496d      	ldr	r1, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb0:	4b6b      	ldr	r3, [pc, #428]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	4968      	ldr	r1, [pc, #416]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
 8002cc4:	e025      	b.n	8002d12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc6:	4b66      	ldr	r3, [pc, #408]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4960      	ldr	r1, [pc, #384]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	495b      	ldr	r1, [pc, #364]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fd14 	bl	8003730 <RCC_SetFlashLatencyFromMSIRange>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e37a      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d12:	f000 fc81 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8002d16:	4602      	mov	r2, r0
 8002d18:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	4950      	ldr	r1, [pc, #320]	; (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d24:	5ccb      	ldrb	r3, [r1, r3]
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	4a4e      	ldr	r2, [pc, #312]	; (8002e68 <HAL_RCC_OscConfig+0x278>)
 8002d30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d32:	4b4e      	ldr	r3, [pc, #312]	; (8002e6c <HAL_RCC_OscConfig+0x27c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fb8e 	bl	8001458 <HAL_InitTick>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d052      	beq.n	8002dec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	e35e      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d032      	beq.n	8002db8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d52:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a42      	ldr	r2, [pc, #264]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fbcb 	bl	80014f8 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d66:	f7fe fbc7 	bl	80014f8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e347      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d78:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a35      	ldr	r2, [pc, #212]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4930      	ldr	r1, [pc, #192]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	492b      	ldr	r1, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
 8002db6:	e01a      	b.n	8002dee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002db8:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fb98 	bl	80014f8 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dcc:	f7fe fb94 	bl	80014f8 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e314      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x1dc>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d073      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_OscConfig+0x21c>
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d10e      	bne.n	8002e24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d063      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x2f0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d15f      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e2f1      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d106      	bne.n	8002e3c <HAL_RCC_OscConfig+0x24c>
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e025      	b.n	8002e88 <HAL_RCC_OscConfig+0x298>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e44:	d114      	bne.n	8002e70 <HAL_RCC_OscConfig+0x280>
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a02      	ldr	r2, [pc, #8]	; (8002e60 <HAL_RCC_OscConfig+0x270>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e013      	b.n	8002e88 <HAL_RCC_OscConfig+0x298>
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08004e9c 	.word	0x08004e9c
 8002e68:	20000060 	.word	0x20000060
 8002e6c:	200022f0 	.word	0x200022f0
 8002e70:	4ba0      	ldr	r3, [pc, #640]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a9f      	ldr	r2, [pc, #636]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b9d      	ldr	r3, [pc, #628]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a9c      	ldr	r2, [pc, #624]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d013      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fb32 	bl	80014f8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fb2e 	bl	80014f8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e2ae      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eaa:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2a8>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fb1e 	bl	80014f8 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe fb1a 	bl	80014f8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e29a      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed2:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2d0>
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d060      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_OscConfig+0x310>
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d119      	bne.n	8002f2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d116      	bne.n	8002f2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f00:	4b7c      	ldr	r3, [pc, #496]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_OscConfig+0x328>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e277      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f18:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	4973      	ldr	r1, [pc, #460]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2c:	e040      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d023      	beq.n	8002f7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f36:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6e      	ldr	r2, [pc, #440]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fe fad9 	bl	80014f8 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7fe fad5 	bl	80014f8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e255      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f5c:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4b62      	ldr	r3, [pc, #392]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	495f      	ldr	r1, [pc, #380]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
 8002f7c:	e018      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b5d      	ldr	r3, [pc, #372]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a5c      	ldr	r2, [pc, #368]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fab5 	bl	80014f8 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f92:	f7fe fab1 	bl	80014f8 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e231      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d03c      	beq.n	8003036 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc4:	4b4b      	ldr	r3, [pc, #300]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fca:	4a4a      	ldr	r2, [pc, #296]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fa90 	bl	80014f8 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fa8c 	bl	80014f8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e20c      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ef      	beq.n	8002fdc <HAL_RCC_OscConfig+0x3ec>
 8002ffc:	e01b      	b.n	8003036 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8003000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003004:	4a3b      	ldr	r2, [pc, #236]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe fa73 	bl	80014f8 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003016:	f7fe fa6f 	bl	80014f8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1ef      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003028:	4b32      	ldr	r3, [pc, #200]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ef      	bne.n	8003016 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80a6 	beq.w	8003190 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 800305a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305e:	6593      	str	r3, [r2, #88]	; 0x58
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306c:	2301      	movs	r3, #1
 800306e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003070:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_RCC_OscConfig+0x508>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d118      	bne.n	80030ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800307c:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <HAL_RCC_OscConfig+0x508>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_RCC_OscConfig+0x508>)
 8003082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003088:	f7fe fa36 	bl	80014f8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003090:	f7fe fa32 	bl	80014f8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1b2      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_RCC_OscConfig+0x508>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d108      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4d8>
 80030b6:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c6:	e029      	b.n	800311c <HAL_RCC_OscConfig+0x52c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b05      	cmp	r3, #5
 80030ce:	d115      	bne.n	80030fc <HAL_RCC_OscConfig+0x50c>
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <HAL_RCC_OscConfig+0x504>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f0:	e014      	b.n	800311c <HAL_RCC_OscConfig+0x52c>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40007000 	.word	0x40007000
 80030fc:	4b9a      	ldr	r3, [pc, #616]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	4a99      	ldr	r2, [pc, #612]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800310c:	4b96      	ldr	r3, [pc, #600]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	4a95      	ldr	r2, [pc, #596]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d016      	beq.n	8003152 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe f9e8 	bl	80014f8 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fe f9e4 	bl	80014f8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e162      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003142:	4b89      	ldr	r3, [pc, #548]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ed      	beq.n	800312c <HAL_RCC_OscConfig+0x53c>
 8003150:	e015      	b.n	800317e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7fe f9d1 	bl	80014f8 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003158:	e00a      	b.n	8003170 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7fe f9cd 	bl	80014f8 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f241 3288 	movw	r2, #5000	; 0x1388
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e14b      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003170:	4b7d      	ldr	r3, [pc, #500]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1ed      	bne.n	800315a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800317e:	7ffb      	ldrb	r3, [r7, #31]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d105      	bne.n	8003190 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003184:	4b78      	ldr	r3, [pc, #480]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	4a77      	ldr	r2, [pc, #476]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 800318a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d03c      	beq.n	8003216 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031a4:	4b70      	ldr	r3, [pc, #448]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80031a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031aa:	4a6f      	ldr	r2, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe f9a0 	bl	80014f8 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031bc:	f7fe f99c 	bl	80014f8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e11c      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ce:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80031d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ef      	beq.n	80031bc <HAL_RCC_OscConfig+0x5cc>
 80031dc:	e01b      	b.n	8003216 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031de:	4b62      	ldr	r3, [pc, #392]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80031e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e4:	4a60      	ldr	r2, [pc, #384]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe f983 	bl	80014f8 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f6:	f7fe f97f 	bl	80014f8 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0ff      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003208:	4b57      	ldr	r3, [pc, #348]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 800320a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ef      	bne.n	80031f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80f3 	beq.w	8003406 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	2b02      	cmp	r3, #2
 8003226:	f040 80c9 	bne.w	80033bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800322a:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0203 	and.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	429a      	cmp	r2, r3
 800323c:	d12c      	bne.n	8003298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	3b01      	subs	r3, #1
 800324a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d123      	bne.n	8003298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d11b      	bne.n	8003298 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d113      	bne.n	8003298 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d109      	bne.n	8003298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	3b01      	subs	r3, #1
 8003292:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d06b      	beq.n	8003370 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b0c      	cmp	r3, #12
 800329c:	d062      	beq.n	8003364 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0ac      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80032b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ba:	f7fe f91d 	bl	80014f8 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe f919 	bl	80014f8 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e099      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_RCC_OscConfig+0x77c>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032f0:	3a01      	subs	r2, #1
 80032f2:	0112      	lsls	r2, r2, #4
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032fa:	0212      	lsls	r2, r2, #8
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003302:	0852      	lsrs	r2, r2, #1
 8003304:	3a01      	subs	r2, #1
 8003306:	0552      	lsls	r2, r2, #21
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800330e:	0852      	lsrs	r2, r2, #1
 8003310:	3a01      	subs	r2, #1
 8003312:	0652      	lsls	r2, r2, #25
 8003314:	4311      	orrs	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800331a:	06d2      	lsls	r2, r2, #27
 800331c:	430a      	orrs	r2, r1
 800331e:	4912      	ldr	r1, [pc, #72]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003320:	4313      	orrs	r3, r2
 8003322:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003324:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800333c:	f7fe f8dc 	bl	80014f8 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fe f8d8 	bl	80014f8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e058      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <HAL_RCC_OscConfig+0x778>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003362:	e050      	b.n	8003406 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e04f      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
 8003368:	40021000 	.word	0x40021000
 800336c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d144      	bne.n	8003406 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 8003382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003386:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a20      	ldr	r2, [pc, #128]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 800338e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003392:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003394:	f7fe f8b0 	bl	80014f8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe f8ac 	bl	80014f8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e02c      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x7ac>
 80033ba:	e024      	b.n	8003406 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d01f      	beq.n	8003402 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a12      	ldr	r2, [pc, #72]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 80033c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe f893 	bl	80014f8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe f88f 	bl	80014f8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e00f      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	4905      	ldr	r1, [pc, #20]	; (8003410 <HAL_RCC_OscConfig+0x820>)
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_OscConfig+0x824>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	60cb      	str	r3, [r1, #12]
 8003400:	e001      	b.n	8003406 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	feeefffc 	.word	0xfeeefffc

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0e7      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b75      	ldr	r3, [pc, #468]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d910      	bls.n	800345c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	4970      	ldr	r1, [pc, #448]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b6e      	ldr	r3, [pc, #440]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0cf      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	4b66      	ldr	r3, [pc, #408]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003474:	429a      	cmp	r2, r3
 8003476:	d908      	bls.n	800348a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b63      	ldr	r3, [pc, #396]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4960      	ldr	r1, [pc, #384]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d04c      	beq.n	8003530 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d121      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0a6      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b6:	4b54      	ldr	r3, [pc, #336]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d115      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e09a      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ce:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e08e      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034de:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e086      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ee:	4b46      	ldr	r3, [pc, #280]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 0203 	bic.w	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4943      	ldr	r1, [pc, #268]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003500:	f7fd fffa 	bl	80014f8 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	e00a      	b.n	800351e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003508:	f7fd fff6 	bl	80014f8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e06e      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 020c 	and.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	429a      	cmp	r2, r3
 800352e:	d1eb      	bne.n	8003508 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003548:	429a      	cmp	r2, r3
 800354a:	d208      	bcs.n	800355e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	492b      	ldr	r1, [pc, #172]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d210      	bcs.n	800358e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 0207 	bic.w	r2, r3, #7
 8003574:	4923      	ldr	r1, [pc, #140]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d001      	beq.n	800358e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e036      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4918      	ldr	r1, [pc, #96]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4910      	ldr	r1, [pc, #64]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035cc:	f000 f824 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	490b      	ldr	r1, [pc, #44]	; (800360c <HAL_RCC_ClockConfig+0x1f4>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	4a09      	ldr	r2, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80035ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_ClockConfig+0x1fc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd ff31 	bl	8001458 <HAL_InitTick>
 80035f6:	4603      	mov	r3, r0
 80035f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80035fa:	7afb      	ldrb	r3, [r7, #11]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40022000 	.word	0x40022000
 8003608:	40021000 	.word	0x40021000
 800360c:	08004e9c 	.word	0x08004e9c
 8003610:	20000060 	.word	0x20000060
 8003614:	200022f0 	.word	0x200022f0

08003618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003626:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x34>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d121      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d11e      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d107      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e005      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003674:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10d      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d102      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <HAL_RCC_GetSysClockFreq+0x110>)
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	e004      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800369c:	4b23      	ldr	r3, [pc, #140]	; (800372c <HAL_RCC_GetSysClockFreq+0x114>)
 800369e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d134      	bne.n	8003710 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0xa6>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d003      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0xac>
 80036bc:	e005      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_RCC_GetSysClockFreq+0x110>)
 80036c0:	617b      	str	r3, [r7, #20]
      break;
 80036c2:	e005      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCC_GetSysClockFreq+0x114>)
 80036c6:	617b      	str	r3, [r7, #20]
      break;
 80036c8:	e002      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	617b      	str	r3, [r7, #20]
      break;
 80036ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	3301      	adds	r3, #1
 80036dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	fb03 f202 	mul.w	r2, r3, r2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	0e5b      	lsrs	r3, r3, #25
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	3301      	adds	r3, #1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003710:	69bb      	ldr	r3, [r7, #24]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	08004eac 	.word	0x08004eac
 8003728:	00f42400 	.word	0x00f42400
 800372c:	007a1200 	.word	0x007a1200

08003730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800373c:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003748:	f7ff f9ee 	bl	8002b28 <HAL_PWREx_GetVoltageRange>
 800374c:	6178      	str	r0, [r7, #20]
 800374e:	e014      	b.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	; 0x58
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003768:	f7ff f9de 	bl	8002b28 <HAL_PWREx_GetVoltageRange>
 800376c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003780:	d10b      	bne.n	800379a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d919      	bls.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2ba0      	cmp	r3, #160	; 0xa0
 800378c:	d902      	bls.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800378e:	2302      	movs	r3, #2
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	e013      	b.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003794:	2301      	movs	r3, #1
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	e010      	b.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b80      	cmp	r3, #128	; 0x80
 800379e:	d902      	bls.n	80037a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037a0:	2303      	movs	r3, #3
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	e00a      	b.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d102      	bne.n	80037b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037ac:	2302      	movs	r3, #2
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e004      	b.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b70      	cmp	r3, #112	; 0x70
 80037b6:	d101      	bne.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037b8:	2301      	movs	r3, #1
 80037ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 0207 	bic.w	r2, r3, #7
 80037c4:	4909      	ldr	r1, [pc, #36]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d001      	beq.n	80037de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40022000 	.word	0x40022000

080037f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e049      	b.n	8003896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd fbbe 	bl	8000f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f000 fe5e 	bl	80044f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d101      	bne.n	80038be <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
 80038bc:	e067      	b.n	800398e <HAL_TIM_Base_Start_DMA+0xee>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d125      	bne.n	8003916 <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) || (Length == 0U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_TIM_Base_Start_DMA+0x36>
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e059      	b.n	800398e <HAL_TIM_Base_Start_DMA+0xee>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4a2c      	ldr	r2, [pc, #176]	; (8003998 <HAL_TIM_Base_Start_DMA+0xf8>)
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_TIM_Base_Start_DMA+0xfc>)
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_TIM_Base_Start_DMA+0x100>)
 80038f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a18      	ldr	r0, [r3, #32]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	332c      	adds	r3, #44	; 0x2c
 8003906:	461a      	mov	r2, r3
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	f7fe fe0b 	bl	8002524 <HAL_DMA_Start_IT>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <HAL_TIM_Base_Start_DMA+0x7e>
 8003914:	e001      	b.n	800391a <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e039      	b.n	800398e <HAL_TIM_Base_Start_DMA+0xee>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e037      	b.n	800398e <HAL_TIM_Base_Start_DMA+0xee>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <HAL_TIM_Base_Start_DMA+0x104>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_TIM_Base_Start_DMA+0xac>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d004      	beq.n	800394c <HAL_TIM_Base_Start_DMA+0xac>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_TIM_Base_Start_DMA+0x108>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d115      	bne.n	8003978 <HAL_TIM_Base_Start_DMA+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	4b16      	ldr	r3, [pc, #88]	; (80039ac <HAL_TIM_Base_Start_DMA+0x10c>)
 8003954:	4013      	ands	r3, r2
 8003956:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b06      	cmp	r3, #6
 800395c:	d015      	beq.n	800398a <HAL_TIM_Base_Start_DMA+0xea>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d011      	beq.n	800398a <HAL_TIM_Base_Start_DMA+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	e008      	b.n	800398a <HAL_TIM_Base_Start_DMA+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e000      	b.n	800398c <HAL_TIM_Base_Start_DMA+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	080044a5 	.word	0x080044a5
 800399c:	080044d3 	.word	0x080044d3
 80039a0:	08004413 	.word	0x08004413
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40014000 	.word	0x40014000
 80039ac:	00010007 	.word	0x00010007

080039b0 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c6:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fe09 	bl	80025e4 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <HAL_TIM_Base_Stop_DMA+0x52>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a1a      	ldr	r2, [r3, #32]
 80039e8:	f240 4344 	movw	r3, #1092	; 0x444
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d107      	bne.n	8003a02 <HAL_TIM_Base_Stop_DMA+0x52>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_OC_Start+0x24>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e03c      	b.n	8003ab2 <HAL_TIM_OC_Start+0x9e>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d109      	bne.n	8003a52 <HAL_TIM_OC_Start+0x3e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e02f      	b.n	8003ab2 <HAL_TIM_OC_Start+0x9e>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d109      	bne.n	8003a6c <HAL_TIM_OC_Start+0x58>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e022      	b.n	8003ab2 <HAL_TIM_OC_Start+0x9e>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d109      	bne.n	8003a86 <HAL_TIM_OC_Start+0x72>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	e015      	b.n	8003ab2 <HAL_TIM_OC_Start+0x9e>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d109      	bne.n	8003aa0 <HAL_TIM_OC_Start+0x8c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e008      	b.n	8003ab2 <HAL_TIM_OC_Start+0x9e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e07e      	b.n	8003bb8 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_OC_Start+0xb6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac8:	e023      	b.n	8003b12 <HAL_TIM_OC_Start+0xfe>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_OC_Start+0xc6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad8:	e01b      	b.n	8003b12 <HAL_TIM_OC_Start+0xfe>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_OC_Start+0xd6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae8:	e013      	b.n	8003b12 <HAL_TIM_OC_Start+0xfe>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_OC_Start+0xe6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af8:	e00b      	b.n	8003b12 <HAL_TIM_OC_Start+0xfe>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d104      	bne.n	8003b0a <HAL_TIM_OC_Start+0xf6>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b08:	e003      	b.n	8003b12 <HAL_TIM_OC_Start+0xfe>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f864 	bl	8004be8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <HAL_TIM_OC_Start+0x1ac>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_TIM_OC_Start+0x12a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <HAL_TIM_OC_Start+0x1b0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_TIM_OC_Start+0x12a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <HAL_TIM_OC_Start+0x1b4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <HAL_TIM_OC_Start+0x12e>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_TIM_OC_Start+0x130>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_TIM_OC_Start+0x1ac>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_TIM_OC_Start+0x162>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6a:	d004      	beq.n	8003b76 <HAL_TIM_OC_Start+0x162>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <HAL_TIM_OC_Start+0x1b0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d115      	bne.n	8003ba2 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_TIM_OC_Start+0x1b8>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b06      	cmp	r3, #6
 8003b86:	d015      	beq.n	8003bb4 <HAL_TIM_OC_Start+0x1a0>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8e:	d011      	beq.n	8003bb4 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba0:	e008      	b.n	8003bb4 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e000      	b.n	8003bb6 <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	00010007 	.word	0x00010007

08003bd0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2200      	movs	r2, #0
 8003be0:	6839      	ldr	r1, [r7, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 f800 	bl	8004be8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a39      	ldr	r2, [pc, #228]	; (8003cd4 <HAL_TIM_OC_Stop+0x104>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIM_OC_Stop+0x36>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a38      	ldr	r2, [pc, #224]	; (8003cd8 <HAL_TIM_OC_Stop+0x108>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIM_OC_Stop+0x36>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a36      	ldr	r2, [pc, #216]	; (8003cdc <HAL_TIM_OC_Stop+0x10c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_OC_Stop+0x3a>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_OC_Stop+0x3c>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_TIM_OC_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10f      	bne.n	8003c40 <HAL_TIM_OC_Stop+0x70>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	f240 4344 	movw	r3, #1092	; 0x444
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_TIM_OC_Stop+0x70>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10f      	bne.n	8003c70 <HAL_TIM_OC_Stop+0xa0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	f240 4344 	movw	r3, #1092	; 0x444
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_OC_Stop+0xa0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <HAL_TIM_OC_Stop+0xb0>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7e:	e023      	b.n	8003cc8 <HAL_TIM_OC_Stop+0xf8>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d104      	bne.n	8003c90 <HAL_TIM_OC_Stop+0xc0>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c8e:	e01b      	b.n	8003cc8 <HAL_TIM_OC_Stop+0xf8>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d104      	bne.n	8003ca0 <HAL_TIM_OC_Stop+0xd0>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c9e:	e013      	b.n	8003cc8 <HAL_TIM_OC_Stop+0xf8>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d104      	bne.n	8003cb0 <HAL_TIM_OC_Stop+0xe0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cae:	e00b      	b.n	8003cc8 <HAL_TIM_OC_Stop+0xf8>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d104      	bne.n	8003cc0 <HAL_TIM_OC_Stop+0xf0>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cbe:	e003      	b.n	8003cc8 <HAL_TIM_OC_Stop+0xf8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400

08003ce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e049      	b.n	8003d86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f841 	bl	8003d8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f000 fbe6 	bl	80044f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d122      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d11b      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f06f 0202 	mvn.w	r2, #2
 8003dce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 faec 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8003dea:	e005      	b.n	8003df8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fade 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 faef 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d122      	bne.n	8003e52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d11b      	bne.n	8003e52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0204 	mvn.w	r2, #4
 8003e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fac2 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8003e3e:	e005      	b.n	8003e4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fab4 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fac5 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d122      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0208 	mvn.w	r2, #8
 8003e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa98 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8003e92:	e005      	b.n	8003ea0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fa8a 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fa9b 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d122      	bne.n	8003efa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d11b      	bne.n	8003efa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f06f 0210 	mvn.w	r2, #16
 8003eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2208      	movs	r2, #8
 8003ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fa6e 	bl	80043c2 <HAL_TIM_IC_CaptureCallback>
 8003ee6:	e005      	b.n	8003ef4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fa60 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa71 	bl	80043d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d10e      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d107      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0201 	mvn.w	r2, #1
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fc fd75 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d10e      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3e:	2b80      	cmp	r3, #128	; 0x80
 8003f40:	d107      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 ff59 	bl	8004e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b80      	cmp	r3, #128	; 0x80
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 ff4c 	bl	8004e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa1f 	bl	80043ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0220 	mvn.w	r2, #32
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 ff0c 	bl	8004df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e0ff      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b14      	cmp	r3, #20
 800400a:	f200 80f0 	bhi.w	80041ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004069 	.word	0x08004069
 8004018:	080041ef 	.word	0x080041ef
 800401c:	080041ef 	.word	0x080041ef
 8004020:	080041ef 	.word	0x080041ef
 8004024:	080040a9 	.word	0x080040a9
 8004028:	080041ef 	.word	0x080041ef
 800402c:	080041ef 	.word	0x080041ef
 8004030:	080041ef 	.word	0x080041ef
 8004034:	080040eb 	.word	0x080040eb
 8004038:	080041ef 	.word	0x080041ef
 800403c:	080041ef 	.word	0x080041ef
 8004040:	080041ef 	.word	0x080041ef
 8004044:	0800412b 	.word	0x0800412b
 8004048:	080041ef 	.word	0x080041ef
 800404c:	080041ef 	.word	0x080041ef
 8004050:	080041ef 	.word	0x080041ef
 8004054:	0800416d 	.word	0x0800416d
 8004058:	080041ef 	.word	0x080041ef
 800405c:	080041ef 	.word	0x080041ef
 8004060:	080041ef 	.word	0x080041ef
 8004064:	080041ad 	.word	0x080041ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 faa2 	bl	80045b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0208 	orr.w	r2, r2, #8
 8004082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0204 	bic.w	r2, r2, #4
 8004092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6999      	ldr	r1, [r3, #24]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	619a      	str	r2, [r3, #24]
      break;
 80040a6:	e0a5      	b.n	80041f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fafe 	bl	80046b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	021a      	lsls	r2, r3, #8
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	619a      	str	r2, [r3, #24]
      break;
 80040e8:	e084      	b.n	80041f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fb57 	bl	80047a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0208 	orr.w	r2, r2, #8
 8004104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0204 	bic.w	r2, r2, #4
 8004114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69d9      	ldr	r1, [r3, #28]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	61da      	str	r2, [r3, #28]
      break;
 8004128:	e064      	b.n	80041f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fbaf 	bl	8004894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69d9      	ldr	r1, [r3, #28]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	021a      	lsls	r2, r3, #8
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	61da      	str	r2, [r3, #28]
      break;
 800416a:	e043      	b.n	80041f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fbec 	bl	8004950 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0208 	orr.w	r2, r2, #8
 8004186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0204 	bic.w	r2, r2, #4
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041aa:	e023      	b.n	80041f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fc24 	bl	8004a00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	021a      	lsls	r2, r3, #8
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041ec:	e002      	b.n	80041f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
      break;
 80041f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop

08004208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_TIM_ConfigClockSource+0x1c>
 8004220:	2302      	movs	r3, #2
 8004222:	e0b6      	b.n	8004392 <HAL_TIM_ConfigClockSource+0x18a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004260:	d03e      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0xd8>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	f200 8087 	bhi.w	8004378 <HAL_TIM_ConfigClockSource+0x170>
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	f000 8086 	beq.w	800437e <HAL_TIM_ConfigClockSource+0x176>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d87f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004278:	2b70      	cmp	r3, #112	; 0x70
 800427a:	d01a      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0xaa>
 800427c:	2b70      	cmp	r3, #112	; 0x70
 800427e:	d87b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004280:	2b60      	cmp	r3, #96	; 0x60
 8004282:	d050      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x11e>
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d877      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004288:	2b50      	cmp	r3, #80	; 0x50
 800428a:	d03c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xfe>
 800428c:	2b50      	cmp	r3, #80	; 0x50
 800428e:	d873      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d058      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x13e>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d86f      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d064      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15e>
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d86b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d060      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15e>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d867      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05c      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15e>
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d05a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x15e>
 80042b0:	e062      	b.n	8004378 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6899      	ldr	r1, [r3, #8]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f000 fc71 	bl	8004ba8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	609a      	str	r2, [r3, #8]
      break;
 80042de:	e04f      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f000 fc5a 	bl	8004ba8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004302:	609a      	str	r2, [r3, #8]
      break;
 8004304:	e03c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 fbce 	bl	8004ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2150      	movs	r1, #80	; 0x50
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fc27 	bl	8004b72 <TIM_ITRx_SetConfig>
      break;
 8004324:	e02c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 fbed 	bl	8004b12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2160      	movs	r1, #96	; 0x60
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fc17 	bl	8004b72 <TIM_ITRx_SetConfig>
      break;
 8004344:	e01c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 fbae 	bl	8004ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fc07 	bl	8004b72 <TIM_ITRx_SetConfig>
      break;
 8004364:	e00c      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 fbfe 	bl	8004b72 <TIM_ITRx_SetConfig>
      break;
 8004376:	e003      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e000      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800437e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	429a      	cmp	r2, r3
 8004428:	d107      	bne.n	800443a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004438:	e02a      	b.n	8004490 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d107      	bne.n	8004454 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2202      	movs	r2, #2
 8004448:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004452:	e01d      	b.n	8004490 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d107      	bne.n	800446e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2204      	movs	r2, #4
 8004462:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	e010      	b.n	8004490 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	d107      	bne.n	8004488 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2208      	movs	r2, #8
 800447c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004486:	e003      	b.n	8004490 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff ffb4 	bl	80043fe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d103      	bne.n	80044c4 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7fc faa3 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff ff5a 	bl	800439a <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <TIM_Base_SetConfig+0xbc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0x20>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450e:	d108      	bne.n	8004522 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <TIM_Base_SetConfig+0xbc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0x52>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0x52>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <TIM_Base_SetConfig+0xc0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0x52>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <TIM_Base_SetConfig+0xc4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <TIM_Base_SetConfig+0xbc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <TIM_Base_SetConfig+0xa0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <TIM_Base_SetConfig+0xc0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_Base_SetConfig+0xa0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <TIM_Base_SetConfig+0xc4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	615a      	str	r2, [r3, #20]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400

080045b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0201 	bic.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 0302 	bic.w	r3, r3, #2
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <TIM_OC1_SetConfig+0xec>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_OC1_SetConfig+0x70>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a23      	ldr	r2, [pc, #140]	; (80046a8 <TIM_OC1_SetConfig+0xf0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_OC1_SetConfig+0x70>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a22      	ldr	r2, [pc, #136]	; (80046ac <TIM_OC1_SetConfig+0xf4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d10c      	bne.n	8004642 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f023 0308 	bic.w	r3, r3, #8
 800462e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <TIM_OC1_SetConfig+0xec>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d007      	beq.n	800465a <TIM_OC1_SetConfig+0xa2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <TIM_OC1_SetConfig+0xf0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d003      	beq.n	800465a <TIM_OC1_SetConfig+0xa2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a15      	ldr	r2, [pc, #84]	; (80046ac <TIM_OC1_SetConfig+0xf4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d111      	bne.n	800467e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
}
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400

080046b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0210 	bic.w	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0320 	bic.w	r3, r3, #32
 80046fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a22      	ldr	r2, [pc, #136]	; (8004798 <TIM_OC2_SetConfig+0xe8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d10d      	bne.n	8004730 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a19      	ldr	r2, [pc, #100]	; (8004798 <TIM_OC2_SetConfig+0xe8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <TIM_OC2_SetConfig+0x98>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a18      	ldr	r2, [pc, #96]	; (800479c <TIM_OC2_SetConfig+0xec>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_OC2_SetConfig+0x98>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <TIM_OC2_SetConfig+0xf0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d113      	bne.n	8004770 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800474e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400

080047a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a21      	ldr	r2, [pc, #132]	; (8004888 <TIM_OC3_SetConfig+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a18      	ldr	r2, [pc, #96]	; (8004888 <TIM_OC3_SetConfig+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <TIM_OC3_SetConfig+0x96>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a17      	ldr	r2, [pc, #92]	; (800488c <TIM_OC3_SetConfig+0xe8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_OC3_SetConfig+0x96>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a16      	ldr	r2, [pc, #88]	; (8004890 <TIM_OC3_SetConfig+0xec>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d113      	bne.n	8004862 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400

08004894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	031b      	lsls	r3, r3, #12
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a14      	ldr	r2, [pc, #80]	; (8004944 <TIM_OC4_SetConfig+0xb0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_OC4_SetConfig+0x74>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a13      	ldr	r2, [pc, #76]	; (8004948 <TIM_OC4_SetConfig+0xb4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC4_SetConfig+0x74>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <TIM_OC4_SetConfig+0xb8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d109      	bne.n	800491c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400

08004950 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004994:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <TIM_OC5_SetConfig+0xa4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_OC5_SetConfig+0x6a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <TIM_OC5_SetConfig+0xa8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_OC5_SetConfig+0x6a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a11      	ldr	r2, [pc, #68]	; (80049fc <TIM_OC5_SetConfig+0xac>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d109      	bne.n	80049ce <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400

08004a00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	051b      	lsls	r3, r3, #20
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <TIM_OC6_SetConfig+0xa8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_OC6_SetConfig+0x6c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a13      	ldr	r2, [pc, #76]	; (8004aac <TIM_OC6_SetConfig+0xac>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_OC6_SetConfig+0x6c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <TIM_OC6_SetConfig+0xb0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d109      	bne.n	8004a80 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400

08004ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f023 0201 	bic.w	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f023 030a 	bic.w	r3, r3, #10
 8004af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0210 	bic.w	r2, r3, #16
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	031b      	lsls	r3, r3, #12
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f043 0307 	orr.w	r3, r3, #7
 8004b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	609a      	str	r2, [r3, #8]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	021a      	lsls	r2, r3, #8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1a      	ldr	r2, [r3, #32]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a1a      	ldr	r2, [r3, #32]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e04f      	b.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d108      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a10      	ldr	r2, [pc, #64]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10c      	bne.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40014000 	.word	0x40014000

08004d00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e060      	b.n	8004dde <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a14      	ldr	r2, [pc, #80]	; (8004dec <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d115      	bne.n	8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	051b      	lsls	r3, r3, #20
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00

08004df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	; (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	; (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	; (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 f820 	bl	8004e84 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	08004edc 	.word	0x08004edc
 8004e68:	08004edc 	.word	0x08004edc
 8004e6c:	08004edc 	.word	0x08004edc
 8004e70:	08004ee0 	.word	0x08004ee0

08004e74 <memset>:
 8004e74:	4402      	add	r2, r0
 8004e76:	4603      	mov	r3, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
