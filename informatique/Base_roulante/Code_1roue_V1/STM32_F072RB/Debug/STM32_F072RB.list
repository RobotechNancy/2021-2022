
STM32_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003578  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003674  08003674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003674  08003674  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003674  08003674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800367c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08003688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003688  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f419  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5b  00000000  00000000  0002f44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  000310a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00031d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a283  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e917  00000000  00000000  0004cc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9ef  00000000  00000000  0005b55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea4  00000000  00000000  000f6f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003620 	.word	0x08003620

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003620 	.word	0x08003620

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CAN_Config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CAN_Config(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000226:	003b      	movs	r3, r7
 8000228:	2200      	movs	r2, #0
 800022a:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 800022c:	003b      	movs	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 8000232:	003b      	movs	r3, r7
 8000234:	2201      	movs	r2, #1
 8000236:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x325 << 5; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000238:	003b      	movs	r3, r7
 800023a:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <CAN_Config+0x88>)
 800023c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0; //
 800023e:	003b      	movs	r3, r7
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFF << 5; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000244:	003b      	movs	r3, r7
 8000246:	4a19      	ldr	r2, [pc, #100]	; (80002ac <CAN_Config+0x8c>)
 8000248:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800024a:	003b      	movs	r3, r7
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000256:	003b      	movs	r3, r7
 8000258:	2201      	movs	r2, #1
 800025a:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800025c:	003b      	movs	r3, r7
 800025e:	220e      	movs	r2, #14
 8000260:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000262:	003a      	movs	r2, r7
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <CAN_Config+0x90>)
 8000266:	0011      	movs	r1, r2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fcf9 	bl	8000c60 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <CAN_Config+0x90>)
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fde7 	bl	8000e44 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <CAN_Config+0x90>)
 8000278:	2102      	movs	r1, #2
 800027a:	0018      	movs	r0, r3
 800027c:	f001 f822 	bl	80012c4 <HAL_CAN_ActivateNotification>

	RxHeader.StdId = 0x324; //adresse dans l'en-tête du mesage reçu
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <CAN_Config+0x94>)
 8000282:	22c9      	movs	r2, #201	; 0xc9
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]
	RxHeader.FilterMatchIndex = 0; //degré de concordance entre l'entête et les informations renseignées.
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <CAN_Config+0x94>)
 800028a:	2200      	movs	r2, #0
 800028c:	619a      	str	r2, [r3, #24]
	RxHeader.DLC = 2; // taille de la donnée
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <CAN_Config+0x94>)
 8000290:	2202      	movs	r2, #2
 8000292:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD; //type d'identifieur can
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <CAN_Config+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA; //type de message (ici data)
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <CAN_Config+0x94>)
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]

	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)

}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b00a      	add	sp, #40	; 0x28
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	000064a0 	.word	0x000064a0
 80002ac:	0001ffe0 	.word	0x0001ffe0
 80002b0:	20000028 	.word	0x20000028
 80002b4:	2000014c 	.word	0x2000014c

080002b8 <HAL_CAN_RxFifo0MsgPendingCallback>:

//fct interrupt (qd stm reçoit msg)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b087      	sub	sp, #28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	//HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
	// Traitement des données
	uint8_t RxData[8];
	//réception du message
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80002c0:	2410      	movs	r4, #16
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	2100      	movs	r1, #0
 80002ca:	f000 fedf 	bl	800108c <HAL_CAN_GetRxMessage>

	//renvoie en uart à l'ordi
	HAL_UART_Transmit(&huart2, RxData, sizeof(RxData), 1000);
 80002ce:	23fa      	movs	r3, #250	; 0xfa
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	1939      	adds	r1, r7, r4
 80002d4:	4810      	ldr	r0, [pc, #64]	; (8000318 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80002d6:	2208      	movs	r2, #8
 80002d8:	f002 fd84 	bl	8002de4 <HAL_UART_Transmit>
	uint8_t msg[] = "\n";
 80002dc:	210c      	movs	r1, #12
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	220a      	movs	r2, #10
 80002e2:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 80002e4:	23fa      	movs	r3, #250	; 0xfa
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	480b      	ldr	r0, [pc, #44]	; (8000318 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80002ec:	2202      	movs	r2, #2
 80002ee:	f002 fd79 	bl	8002de4 <HAL_UART_Transmit>
	transmit(); //(accusé de réception)
 80002f2:	f000 f813 	bl	800031c <transmit>
	change_dir(RxData[0]);
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 f9b4 	bl	8000668 <change_dir>
	change_step(RxData[1]);
 8000300:	193b      	adds	r3, r7, r4
 8000302:	785b      	ldrb	r3, [r3, #1]
 8000304:	0018      	movs	r0, r3
 8000306:	f000 f9d9 	bl	80006bc <change_step>
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b007      	add	sp, #28
 8000310:	bd90      	pop	{r4, r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	2000014c 	.word	0x2000014c
 8000318:	20000068 	.word	0x20000068

0800031c <transmit>:

//accusé de réception
void transmit(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
	//Définition de l'en-tête de transmission:
	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 3; // taille des données à transmettre en octets
 8000322:	2008      	movs	r0, #8
 8000324:	183b      	adds	r3, r7, r0
 8000326:	2203      	movs	r2, #3
 8000328:	611a      	str	r2, [r3, #16]
	txHeader.StdId = 0x324; //adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage
 800032a:	183b      	adds	r3, r7, r0
 800032c:	22c9      	movs	r2, #201	; 0xc9
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_STD; //on choisit l'adressage standard
 8000332:	183b      	adds	r3, r7, r0
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 8000338:	183b      	adds	r3, r7, r0
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 800033e:	183b      	adds	r3, r7, r0
 8000340:	2200      	movs	r2, #0
 8000342:	751a      	strb	r2, [r3, #20]

	uint8_t data[3] = { 's', 'l', 't' }; // création du message
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4a07      	ldr	r2, [pc, #28]	; (8000364 <transmit+0x48>)
 8000348:	8811      	ldrh	r1, [r2, #0]
 800034a:	8019      	strh	r1, [r3, #0]
 800034c:	7892      	ldrb	r2, [r2, #2]
 800034e:	709a      	strb	r2, [r3, #2]

	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &TxMailbox); //Ajouter le message (avec en-tête) à l'une des mailbox (disponible).
 8000350:	003b      	movs	r3, r7
 8000352:	1d3a      	adds	r2, r7, #4
 8000354:	1839      	adds	r1, r7, r0
 8000356:	4804      	ldr	r0, [pc, #16]	; (8000368 <transmit+0x4c>)
 8000358:	f000 fdba 	bl	8000ed0 <HAL_CAN_AddTxMessage>

	//HAL_CAN_AddTxMessage(&hcan, (uint8_t*)data, sizeof(data), 1000);

}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b008      	add	sp, #32
 8000362:	bd80      	pop	{r7, pc}
 8000364:	08003638 	.word	0x08003638
 8000368:	20000028 	.word	0x20000028

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fb14 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f82a 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f000 f918 	bl	80005ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800037c:	f000 f8e6 	bl	800054c <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000380:	f000 f8be 	bl	8000500 <MX_TIM14_Init>
  MX_CAN_Init();
 8000384:	f000 f884 	bl	8000490 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config();
 8000388:	f7ff ff4a 	bl	8000220 <CAN_Config>
	//char *msg = "Start\n\r";
	//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);

    //start timer
    HAL_TIM_Base_Start_IT(&htim14);
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <main+0x5c>)
 800038e:	0018      	movs	r0, r3
 8000390:	f002 fab4 	bl	80028fc <HAL_TIM_Base_Start_IT>


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000394:	2390      	movs	r3, #144	; 0x90
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	2200      	movs	r2, #0
 800039a:	2120      	movs	r1, #32
 800039c:	0018      	movs	r0, r3
 800039e:	f001 fc25 	bl	8001bec <HAL_GPIO_WritePin>
    //Driver 1
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	0099      	lsls	r1, r3, #2
 80003a6:	2390      	movs	r3, #144	; 0x90
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	2200      	movs	r2, #0
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 fc1d 	bl	8001bec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80003b2:	2380      	movs	r3, #128	; 0x80
 80003b4:	00d9      	lsls	r1, r3, #3
 80003b6:	2390      	movs	r3, #144	; 0x90
 80003b8:	05db      	lsls	r3, r3, #23
 80003ba:	2200      	movs	r2, #0
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 fc15 	bl	8001bec <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    transmit();
 80003c2:	f7ff ffab 	bl	800031c <transmit>
    while (1)
 80003c6:	e7fe      	b.n	80003c6 <main+0x5a>
 80003c8:	200000ec 	.word	0x200000ec

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b099      	sub	sp, #100	; 0x64
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	242c      	movs	r4, #44	; 0x2c
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	0018      	movs	r0, r3
 80003d8:	2334      	movs	r3, #52	; 0x34
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f003 f917 	bl	8003610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e2:	231c      	movs	r3, #28
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	2310      	movs	r3, #16
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f003 f90f 	bl	8003610 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f2:	003b      	movs	r3, r7
 80003f4:	0018      	movs	r0, r3
 80003f6:	231c      	movs	r3, #28
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f003 f908 	bl	8003610 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000400:	0021      	movs	r1, r4
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2202      	movs	r2, #2
 8000406:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2201      	movs	r2, #1
 800040c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2210      	movs	r2, #16
 8000412:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2202      	movs	r2, #2
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	0212      	lsls	r2, r2, #8
 8000420:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2280      	movs	r2, #128	; 0x80
 8000426:	0352      	lsls	r2, r2, #13
 8000428:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2200      	movs	r2, #0
 800042e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000430:	187b      	adds	r3, r7, r1
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fc12 	bl	8001c5c <HAL_RCC_OscConfig>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800043c:	f000 f952 	bl	80006e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000440:	211c      	movs	r1, #28
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2207      	movs	r2, #7
 8000446:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2202      	movs	r2, #2
 800044c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2101      	movs	r1, #1
 800045e:	0018      	movs	r0, r3
 8000460:	f001 ff82 	bl	8002368 <HAL_RCC_ClockConfig>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000468:	f000 f93c 	bl	80006e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800046c:	003b      	movs	r3, r7
 800046e:	2202      	movs	r2, #2
 8000470:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000472:	003b      	movs	r3, r7
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000478:	003b      	movs	r3, r7
 800047a:	0018      	movs	r0, r3
 800047c:	f002 f8f0 	bl	8002660 <HAL_RCCEx_PeriphCLKConfig>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000484:	f000 f92e 	bl	80006e4 <Error_Handler>
  }
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b019      	add	sp, #100	; 0x64
 800048e:	bd90      	pop	{r4, r7, pc}

08000490 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_CAN_Init+0x68>)
 8000496:	4a19      	ldr	r2, [pc, #100]	; (80004fc <MX_CAN_Init+0x6c>)
 8000498:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_CAN_Init+0x68>)
 800049c:	220c      	movs	r2, #12
 800049e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_CAN_Init+0x68>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_CAN_Init+0x68>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_CAN_Init+0x68>)
 80004ae:	22e0      	movs	r2, #224	; 0xe0
 80004b0:	02d2      	lsls	r2, r2, #11
 80004b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <MX_CAN_Init+0x68>)
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0352      	lsls	r2, r2, #13
 80004ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_CAN_Init+0x68>)
 80004be:	2200      	movs	r2, #0
 80004c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <MX_CAN_Init+0x68>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_CAN_Init+0x68>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <MX_CAN_Init+0x68>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_CAN_Init+0x68>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <MX_CAN_Init+0x68>)
 80004dc:	2200      	movs	r2, #0
 80004de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <MX_CAN_Init+0x68>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fabe 	bl	8000a64 <HAL_CAN_Init>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004ec:	f000 f8fa 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	20000028 	.word	0x20000028
 80004fc:	40006400 	.word	0x40006400

08000500 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_TIM14_Init+0x40>)
 8000506:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <MX_TIM14_Init+0x44>)
 8000508:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800;
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <MX_TIM14_Init+0x40>)
 800050c:	2296      	movs	r2, #150	; 0x96
 800050e:	0152      	lsls	r2, r2, #5
 8000510:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_TIM14_Init+0x40>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_TIM14_Init+0x40>)
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <MX_TIM14_Init+0x48>)
 800051c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_TIM14_Init+0x40>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_TIM14_Init+0x40>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <MX_TIM14_Init+0x40>)
 800052c:	0018      	movs	r0, r3
 800052e:	f002 f995 	bl	800285c <HAL_TIM_Base_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000536:	f000 f8d5 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000ec 	.word	0x200000ec
 8000544:	40002000 	.word	0x40002000
 8000548:	0000ffff 	.word	0x0000ffff

0800054c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000552:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <MX_USART2_UART_Init+0x5c>)
 8000554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000558:	2296      	movs	r2, #150	; 0x96
 800055a:	0212      	lsls	r2, r2, #8
 800055c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000572:	220c      	movs	r2, #12
 8000574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000590:	0018      	movs	r0, r3
 8000592:	f002 fbd3 	bl	8002d3c <HAL_UART_Init>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800059a:	f000 f8a3 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000068 	.word	0x20000068
 80005a8:	40004400 	.word	0x40004400

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	240c      	movs	r4, #12
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	0018      	movs	r0, r3
 80005b8:	2314      	movs	r3, #20
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f003 f827 	bl	8003610 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <MX_GPIO_Init+0xb8>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b27      	ldr	r3, [pc, #156]	; (8000664 <MX_GPIO_Init+0xb8>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	03c9      	lsls	r1, r1, #15
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <MX_GPIO_Init+0xb8>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	03db      	lsls	r3, r3, #15
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_GPIO_Init+0xb8>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_GPIO_Init+0xb8>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	0289      	lsls	r1, r1, #10
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_GPIO_Init+0xb8>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	029b      	lsls	r3, r3, #10
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80005fa:	23c4      	movs	r3, #196	; 0xc4
 80005fc:	00d9      	lsls	r1, r3, #3
 80005fe:	2390      	movs	r3, #144	; 0x90
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2200      	movs	r2, #0
 8000604:	0018      	movs	r0, r3
 8000606:	f001 faf1 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2220      	movs	r2, #32
 800060e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2201      	movs	r2, #1
 8000614:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	193a      	adds	r2, r7, r4
 8000624:	2390      	movs	r3, #144	; 0x90
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f001 f966 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000630:	0021      	movs	r1, r4
 8000632:	187b      	adds	r3, r7, r1
 8000634:	22c0      	movs	r2, #192	; 0xc0
 8000636:	00d2      	lsls	r2, r2, #3
 8000638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2201      	movs	r2, #1
 800063e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2201      	movs	r2, #1
 8000644:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	187a      	adds	r2, r7, r1
 800064e:	2390      	movs	r3, #144	; 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f951 	bl	80018fc <HAL_GPIO_Init>

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b009      	add	sp, #36	; 0x24
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <change_dir>:
	timer_val = __HAL_TIM_GET_COUNTER(&htim14);
	if (timer_val == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
}*/

void change_dir(char dir){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	0002      	movs	r2, r0
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	701a      	strb	r2, [r3, #0]
	transmit();
 8000674:	f7ff fe52 	bl	800031c <transmit>
	if (dir=='0'){
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b30      	cmp	r3, #48	; 0x30
 800067e:	d10a      	bne.n	8000696 <change_dir+0x2e>
		transmit();
 8000680:	f7ff fe4c 	bl	800031c <transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	0099      	lsls	r1, r3, #2
 8000688:	2390      	movs	r3, #144	; 0x90
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	2200      	movs	r2, #0
 800068e:	0018      	movs	r0, r3
 8000690:	f001 faac 	bl	8001bec <HAL_GPIO_WritePin>
	}
	else if (dir=='1'){
		transmit();
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
	}
}
 8000694:	e00d      	b.n	80006b2 <change_dir+0x4a>
	else if (dir=='1'){
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b31      	cmp	r3, #49	; 0x31
 800069c:	d109      	bne.n	80006b2 <change_dir+0x4a>
		transmit();
 800069e:	f7ff fe3d 	bl	800031c <transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	0099      	lsls	r1, r3, #2
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2201      	movs	r2, #1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fa9d 	bl	8001bec <HAL_GPIO_WritePin>
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <change_step>:

void change_step(char f){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	701a      	strb	r2, [r3, #0]
	transmit();
 80006c8:	f7ff fe28 	bl	800031c <transmit>
	int freq = f;
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
	TIM14->ARR = freq;
 80006d2:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <change_step+0x24>)
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
		case '08': TIM14->ARR = 30000; break;
		case '09': TIM14->ARR = 20000; break;
		case '10': TIM14->ARR = 10000; break;
		case '11': TIM14->ARR = 1000; break;
	}*/
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b004      	add	sp, #16
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40002000 	.word	0x40002000

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	699a      	ldr	r2, [r3, #24]
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	69da      	ldr	r2, [r3, #28]
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0549      	lsls	r1, r1, #21
 8000718:	430a      	orrs	r2, r1
 800071a:	61da      	str	r2, [r3, #28]
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_MspInit+0x44>)
 800071e:	69da      	ldr	r2, [r3, #28]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	055b      	lsls	r3, r3, #21
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b08b      	sub	sp, #44	; 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	2414      	movs	r4, #20
 8000742:	193b      	adds	r3, r7, r4
 8000744:	0018      	movs	r0, r3
 8000746:	2314      	movs	r3, #20
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f002 ff60 	bl	8003610 <memset>
  if(hcan->Instance==CAN)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <HAL_CAN_MspInit+0xa4>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d13b      	bne.n	80007d2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <HAL_CAN_MspInit+0xa8>)
 800075c:	69da      	ldr	r2, [r3, #28]
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <HAL_CAN_MspInit+0xa8>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0489      	lsls	r1, r1, #18
 8000764:	430a      	orrs	r2, r1
 8000766:	61da      	str	r2, [r3, #28]
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <HAL_CAN_MspInit+0xa8>)
 800076a:	69da      	ldr	r2, [r3, #28]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	049b      	lsls	r3, r3, #18
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <HAL_CAN_MspInit+0xa8>)
 8000778:	695a      	ldr	r2, [r3, #20]
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_CAN_MspInit+0xa8>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	0289      	lsls	r1, r1, #10
 8000780:	430a      	orrs	r2, r1
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_CAN_MspInit+0xa8>)
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	029b      	lsls	r3, r3, #10
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	22c0      	movs	r2, #192	; 0xc0
 8000796:	0152      	lsls	r2, r2, #5
 8000798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	0021      	movs	r1, r4
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2202      	movs	r2, #2
 80007a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2203      	movs	r2, #3
 80007ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2204      	movs	r2, #4
 80007b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	187a      	adds	r2, r7, r1
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 f89d 	bl	80018fc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	201e      	movs	r0, #30
 80007c8:	f001 f866 	bl	8001898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80007cc:	201e      	movs	r0, #30
 80007ce:	f001 f878 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b00b      	add	sp, #44	; 0x2c
 80007d8:	bd90      	pop	{r4, r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	40006400 	.word	0x40006400
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_TIM_Base_MspInit+0x48>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d115      	bne.n	8000822 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_TIM_Base_MspInit+0x4c>)
 80007f8:	69da      	ldr	r2, [r3, #28]
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_TIM_Base_MspInit+0x4c>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0049      	lsls	r1, r1, #1
 8000800:	430a      	orrs	r2, r1
 8000802:	61da      	str	r2, [r3, #28]
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_TIM_Base_MspInit+0x4c>)
 8000806:	69da      	ldr	r2, [r3, #28]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4013      	ands	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2013      	movs	r0, #19
 8000818:	f001 f83e 	bl	8001898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800081c:	2013      	movs	r0, #19
 800081e:	f001 f850 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b004      	add	sp, #16
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40002000 	.word	0x40002000
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b08b      	sub	sp, #44	; 0x2c
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	2414      	movs	r4, #20
 800083e:	193b      	adds	r3, r7, r4
 8000840:	0018      	movs	r0, r3
 8000842:	2314      	movs	r3, #20
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f002 fee2 	bl	8003610 <memset>
  if(huart->Instance==USART2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_UART_MspInit+0x90>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d132      	bne.n	80008bc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <HAL_UART_MspInit+0x94>)
 8000858:	69da      	ldr	r2, [r3, #28]
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_UART_MspInit+0x94>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0289      	lsls	r1, r1, #10
 8000860:	430a      	orrs	r2, r1
 8000862:	61da      	str	r2, [r3, #28]
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0x94>)
 8000866:	69da      	ldr	r2, [r3, #28]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	029b      	lsls	r3, r3, #10
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0x94>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0x94>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0289      	lsls	r1, r1, #10
 800087c:	430a      	orrs	r2, r1
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_UART_MspInit+0x94>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	029b      	lsls	r3, r3, #10
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2202      	movs	r2, #2
 800089a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2203      	movs	r2, #3
 80008a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2201      	movs	r2, #1
 80008ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	187a      	adds	r2, r7, r1
 80008b0:	2390      	movs	r3, #144	; 0x90
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 f820 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b00b      	add	sp, #44	; 0x2c
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f89c 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <TIM14_IRQHandler+0x24>)
 8000902:	0018      	movs	r0, r3
 8000904:	f002 f84c 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	00da      	lsls	r2, r3, #3
 800090c:	2390      	movs	r3, #144	; 0x90
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f001 f987 	bl	8001c26 <HAL_GPIO_TogglePin>
  else{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
  }*/

  /* USER CODE END TIM14_IRQn 1 */
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	200000ec 	.word	0x200000ec

08000924 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <CEC_CAN_IRQHandler+0x14>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fcf4 	bl	8001318 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000028 	.word	0x20000028

0800093c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490e      	ldr	r1, [pc, #56]	; (8000988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0b      	ldr	r4, [pc, #44]	; (8000994 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000972:	f7ff ffe3 	bl	800093c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000976:	f002 fe27 	bl	80035c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097a:	f7ff fcf7 	bl	800036c <main>

0800097e <LoopForever>:

LoopForever:
    b LoopForever
 800097e:	e7fe      	b.n	800097e <LoopForever>
  ldr   r0, =_estack
 8000980:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800098c:	0800367c 	.word	0x0800367c
  ldr r2, =_sbss
 8000990:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000994:	2000016c 	.word	0x2000016c

08000998 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_COMP_IRQHandler>
	...

0800099c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_Init+0x24>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_Init+0x24>)
 80009a6:	2110      	movs	r1, #16
 80009a8:	430a      	orrs	r2, r1
 80009aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f809 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b2:	f7ff fe9d 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_InitTick+0x5c>)
 80009ce:	681c      	ldr	r4, [r3, #0]
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_InitTick+0x60>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	0019      	movs	r1, r3
 80009d6:	23fa      	movs	r3, #250	; 0xfa
 80009d8:	0098      	lsls	r0, r3, #2
 80009da:	f7ff fb95 	bl	8000108 <__udivsi3>
 80009de:	0003      	movs	r3, r0
 80009e0:	0019      	movs	r1, r3
 80009e2:	0020      	movs	r0, r4
 80009e4:	f7ff fb90 	bl	8000108 <__udivsi3>
 80009e8:	0003      	movs	r3, r0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 ff79 	bl	80018e2 <HAL_SYSTICK_Config>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e00f      	b.n	8000a18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d80b      	bhi.n	8000a16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2301      	movs	r3, #1
 8000a02:	425b      	negs	r3, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 ff46 	bl	8001898 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_InitTick+0x64>)
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b003      	add	sp, #12
 8000a1e:	bd90      	pop	{r4, r7, pc}
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	001a      	movs	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	18d2      	adds	r2, r2, r3
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000168 	.word	0x20000168

08000a50 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	20000168 	.word	0x20000168

08000a64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0f0      	b.n	8000c58 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2220      	movs	r2, #32
 8000a7a:	5c9b      	ldrb	r3, [r3, r2]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff fe57 	bl	8000738 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2101      	movs	r1, #1
 8000a96:	430a      	orrs	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a9a:	f7ff ffd9 	bl	8000a50 <HAL_GetTick>
 8000a9e:	0003      	movs	r3, r0
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aa2:	e013      	b.n	8000acc <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aa4:	f7ff ffd4 	bl	8000a50 <HAL_GetTick>
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b0a      	cmp	r3, #10
 8000ab0:	d90c      	bls.n	8000acc <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	0292      	lsls	r2, r2, #10
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	2105      	movs	r1, #5
 8000ac6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e0c5      	b.n	8000c58 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	d0e5      	beq.n	8000aa4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	438a      	bics	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae8:	f7ff ffb2 	bl	8000a50 <HAL_GetTick>
 8000aec:	0003      	movs	r3, r0
 8000aee:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000af0:	e013      	b.n	8000b1a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af2:	f7ff ffad 	bl	8000a50 <HAL_GetTick>
 8000af6:	0002      	movs	r2, r0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b0a      	cmp	r3, #10
 8000afe:	d90c      	bls.n	8000b1a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	0292      	lsls	r2, r2, #10
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2220      	movs	r2, #32
 8000b12:	2105      	movs	r1, #5
 8000b14:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e09e      	b.n	8000c58 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2202      	movs	r2, #2
 8000b22:	4013      	ands	r3, r2
 8000b24:	d1e5      	bne.n	8000af2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7e1b      	ldrb	r3, [r3, #24]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d108      	bne.n	8000b40 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e007      	b.n	8000b50 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2180      	movs	r1, #128	; 0x80
 8000b4c:	438a      	bics	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7e5b      	ldrb	r3, [r3, #25]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	430a      	orrs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2140      	movs	r1, #64	; 0x40
 8000b76:	438a      	bics	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7e9b      	ldrb	r3, [r3, #26]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	438a      	bics	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7edb      	ldrb	r3, [r3, #27]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	438a      	bics	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2110      	movs	r1, #16
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7f1b      	ldrb	r3, [r3, #28]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d108      	bne.n	8000be8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2108      	movs	r1, #8
 8000be2:	430a      	orrs	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7f5b      	ldrb	r3, [r3, #29]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d108      	bne.n	8000c12 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e007      	b.n	8000c22 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	438a      	bics	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	431a      	orrs	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	0011      	movs	r1, r2
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	1e5a      	subs	r2, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2220      	movs	r2, #32
 8000c52:	2101      	movs	r1, #1
 8000c54:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b004      	add	sp, #16
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c70:	2013      	movs	r0, #19
 8000c72:	183b      	adds	r3, r7, r0
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	2120      	movs	r1, #32
 8000c78:	5c52      	ldrb	r2, [r2, r1]
 8000c7a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	18bb      	adds	r3, r7, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d004      	beq.n	8000c90 <HAL_CAN_ConfigFilter+0x30>
 8000c86:	18bb      	adds	r3, r7, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d000      	beq.n	8000c90 <HAL_CAN_ConfigFilter+0x30>
 8000c8e:	e0cd      	b.n	8000e2c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	58d3      	ldr	r3, [r2, r3]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	221f      	movs	r2, #31
 8000cac:	4013      	ands	r3, r2
 8000cae:	2201      	movs	r2, #1
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	2387      	movs	r3, #135	; 0x87
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	58d3      	ldr	r3, [r2, r3]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	2387      	movs	r3, #135	; 0x87
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d129      	bne.n	8000d2a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	2383      	movs	r3, #131	; 0x83
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	58d3      	ldr	r3, [r2, r3]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	43d2      	mvns	r2, r2
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	2383      	movs	r3, #131	; 0x83
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	041b      	lsls	r3, r3, #16
 8000cfa:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d00:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3248      	adds	r2, #72	; 0x48
 8000d06:	00d2      	lsls	r2, r2, #3
 8000d08:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	041b      	lsls	r3, r3, #16
 8000d16:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d1e:	6979      	ldr	r1, [r7, #20]
 8000d20:	3348      	adds	r3, #72	; 0x48
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	18cb      	adds	r3, r1, r3
 8000d26:	3304      	adds	r3, #4
 8000d28:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d128      	bne.n	8000d84 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	2383      	movs	r3, #131	; 0x83
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	58d2      	ldr	r2, [r2, r3]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	0011      	movs	r1, r2
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	2383      	movs	r3, #131	; 0x83
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	041b      	lsls	r3, r3, #16
 8000d54:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d5a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3248      	adds	r2, #72	; 0x48
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	041b      	lsls	r3, r3, #16
 8000d70:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d78:	6979      	ldr	r1, [r7, #20]
 8000d7a:	3348      	adds	r3, #72	; 0x48
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	18cb      	adds	r3, r1, r3
 8000d80:	3304      	adds	r3, #4
 8000d82:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10c      	bne.n	8000da6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	2381      	movs	r3, #129	; 0x81
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	58d3      	ldr	r3, [r2, r3]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	43d2      	mvns	r2, r2
 8000d98:	401a      	ands	r2, r3
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	2381      	movs	r3, #129	; 0x81
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	50d1      	str	r1, [r2, r3]
 8000da4:	e00a      	b.n	8000dbc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	2381      	movs	r3, #129	; 0x81
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	58d2      	ldr	r2, [r2, r3]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	0011      	movs	r1, r2
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	2381      	movs	r3, #129	; 0x81
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10c      	bne.n	8000dde <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	2385      	movs	r3, #133	; 0x85
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	58d3      	ldr	r3, [r2, r3]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	43d2      	mvns	r2, r2
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	2385      	movs	r3, #133	; 0x85
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	50d1      	str	r1, [r2, r3]
 8000ddc:	e00a      	b.n	8000df4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	2385      	movs	r3, #133	; 0x85
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58d2      	ldr	r2, [r2, r3]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	0011      	movs	r1, r2
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	2385      	movs	r3, #133	; 0x85
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d10a      	bne.n	8000e12 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	2387      	movs	r3, #135	; 0x87
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	58d2      	ldr	r2, [r2, r3]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	431a      	orrs	r2, r3
 8000e08:	0011      	movs	r1, r2
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	2387      	movs	r3, #135	; 0x87
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	58d3      	ldr	r3, [r2, r3]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4393      	bics	r3, r2
 8000e1e:	0019      	movs	r1, r3
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e007      	b.n	8000e3c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	02d2      	lsls	r2, r2, #11
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
  }
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b006      	add	sp, #24
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2220      	movs	r2, #32
 8000e50:	5c9b      	ldrb	r3, [r3, r2]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d12f      	bne.n	8000eb8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	438a      	bics	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e70:	f7ff fdee 	bl	8000a50 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e78:	e013      	b.n	8000ea2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e7a:	f7ff fde9 	bl	8000a50 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b0a      	cmp	r3, #10
 8000e86:	d90c      	bls.n	8000ea2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0292      	lsls	r2, r2, #10
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2220      	movs	r2, #32
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e012      	b.n	8000ec8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d1e5      	bne.n	8000e7a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e007      	b.n	8000ec8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	0312      	lsls	r2, r2, #12
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
  }
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b004      	add	sp, #16
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ede:	201f      	movs	r0, #31
 8000ee0:	183b      	adds	r3, r7, r0
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	5c52      	ldrb	r2, [r2, r1]
 8000ee8:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d004      	beq.n	8000f04 <HAL_CAN_AddTxMessage+0x34>
 8000efa:	183b      	adds	r3, r7, r0
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d000      	beq.n	8000f04 <HAL_CAN_AddTxMessage+0x34>
 8000f02:	e0b7      	b.n	8001074 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	04db      	lsls	r3, r3, #19
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d10a      	bne.n	8000f24 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	051b      	lsls	r3, r3, #20
 8000f14:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f16:	d105      	bne.n	8000f24 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	055b      	lsls	r3, r3, #21
 8000f1e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f20:	d100      	bne.n	8000f24 <HAL_CAN_AddTxMessage+0x54>
 8000f22:	e09e      	b.n	8001062 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	0e1b      	lsrs	r3, r3, #24
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d908      	bls.n	8000f46 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0412      	lsls	r2, r2, #16
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e09e      	b.n	8001084 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d10c      	bne.n	8000f72 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4311      	orrs	r1, r2
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	3218      	adds	r2, #24
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	50d1      	str	r1, [r2, r3]
 8000f70:	e00f      	b.n	8000f92 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000f88:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	3218      	adds	r2, #24
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6819      	ldr	r1, [r3, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3318      	adds	r3, #24
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	18cb      	adds	r3, r1, r3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	7d1b      	ldrb	r3, [r3, #20]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d112      	bne.n	8000fd4 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3318      	adds	r3, #24
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	3304      	adds	r3, #4
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3318      	adds	r3, #24
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	18cb      	adds	r3, r1, r3
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3307      	adds	r3, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	061a      	lsls	r2, r3, #24
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3306      	adds	r3, #6
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3305      	adds	r3, #5
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	6979      	ldr	r1, [r7, #20]
 8001000:	23c6      	movs	r3, #198	; 0xc6
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	0109      	lsls	r1, r1, #4
 8001006:	1841      	adds	r1, r0, r1
 8001008:	18cb      	adds	r3, r1, r3
 800100a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3303      	adds	r3, #3
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	061a      	lsls	r2, r3, #24
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3302      	adds	r3, #2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	0019      	movs	r1, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	430a      	orrs	r2, r1
 8001034:	6979      	ldr	r1, [r7, #20]
 8001036:	23c4      	movs	r3, #196	; 0xc4
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	0109      	lsls	r1, r1, #4
 800103c:	1841      	adds	r1, r0, r1
 800103e:	18cb      	adds	r3, r1, r3
 8001040:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	3218      	adds	r2, #24
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	58d2      	ldr	r2, [r2, r3]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2101      	movs	r1, #1
 8001054:	4311      	orrs	r1, r2
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	3218      	adds	r2, #24
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e010      	b.n	8001084 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	0392      	lsls	r2, r2, #14
 800106a:	431a      	orrs	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e007      	b.n	8001084 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	02d2      	lsls	r2, r2, #11
 800107c:	431a      	orrs	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
  }
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b008      	add	sp, #32
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800109a:	2017      	movs	r0, #23
 800109c:	183b      	adds	r3, r7, r0
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	2120      	movs	r1, #32
 80010a2:	5c52      	ldrb	r2, [r2, r1]
 80010a4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010a6:	0002      	movs	r2, r0
 80010a8:	18bb      	adds	r3, r7, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d004      	beq.n	80010ba <HAL_CAN_GetRxMessage+0x2e>
 80010b0:	18bb      	adds	r3, r7, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d000      	beq.n	80010ba <HAL_CAN_GetRxMessage+0x2e>
 80010b8:	e0f8      	b.n	80012ac <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10e      	bne.n	80010de <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2203      	movs	r2, #3
 80010c8:	4013      	ands	r3, r2
 80010ca:	d117      	bne.n	80010fc <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	0392      	lsls	r2, r2, #14
 80010d4:	431a      	orrs	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0ee      	b.n	80012bc <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2203      	movs	r2, #3
 80010e6:	4013      	ands	r3, r2
 80010e8:	d108      	bne.n	80010fc <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	0392      	lsls	r2, r2, #14
 80010f2:	431a      	orrs	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0df      	b.n	80012bc <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	321b      	adds	r2, #27
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	58d3      	ldr	r3, [r2, r3]
 8001108:	2204      	movs	r2, #4
 800110a:	401a      	ands	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	321b      	adds	r2, #27
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	58d3      	ldr	r3, [r2, r3]
 8001124:	0d5b      	lsrs	r3, r3, #21
 8001126:	055b      	lsls	r3, r3, #21
 8001128:	0d5a      	lsrs	r2, r3, #21
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e00a      	b.n	8001146 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	321b      	adds	r2, #27
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	58d3      	ldr	r3, [r2, r3]
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	321b      	adds	r2, #27
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	58d3      	ldr	r3, [r2, r3]
 8001152:	2202      	movs	r2, #2
 8001154:	401a      	ands	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	331b      	adds	r3, #27
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	3304      	adds	r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	220f      	movs	r2, #15
 800116c:	401a      	ands	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	331b      	adds	r3, #27
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	18d3      	adds	r3, r2, r3
 800117e:	3304      	adds	r3, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	22ff      	movs	r2, #255	; 0xff
 8001186:	401a      	ands	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	331b      	adds	r3, #27
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	3304      	adds	r3, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	0c1a      	lsrs	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	23dc      	movs	r3, #220	; 0xdc
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	188a      	adds	r2, r1, r2
 80011b4:	18d3      	adds	r3, r2, r3
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	23dc      	movs	r3, #220	; 0xdc
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	188a      	adds	r2, r1, r2
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0a1a      	lsrs	r2, r3, #8
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	23dc      	movs	r3, #220	; 0xdc
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	188a      	adds	r2, r1, r2
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0c1a      	lsrs	r2, r3, #16
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3302      	adds	r3, #2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	23dc      	movs	r3, #220	; 0xdc
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	188a      	adds	r2, r1, r2
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0e1a      	lsrs	r2, r3, #24
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3303      	adds	r3, #3
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	23de      	movs	r3, #222	; 0xde
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	188a      	adds	r2, r1, r2
 8001220:	18d3      	adds	r3, r2, r3
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3304      	adds	r3, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6819      	ldr	r1, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	23de      	movs	r3, #222	; 0xde
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	188a      	adds	r2, r1, r2
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0a1a      	lsrs	r2, r3, #8
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3305      	adds	r3, #5
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6819      	ldr	r1, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	23de      	movs	r3, #222	; 0xde
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	188a      	adds	r2, r1, r2
 8001256:	18d3      	adds	r3, r2, r3
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0c1a      	lsrs	r2, r3, #16
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3306      	adds	r3, #6
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6819      	ldr	r1, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	23de      	movs	r3, #222	; 0xde
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	188a      	adds	r2, r1, r2
 8001272:	18d3      	adds	r3, r2, r3
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0e1a      	lsrs	r2, r3, #24
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3307      	adds	r3, #7
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d108      	bne.n	8001298 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2120      	movs	r1, #32
 8001292:	430a      	orrs	r2, r1
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	e007      	b.n	80012a8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2120      	movs	r1, #32
 80012a4:	430a      	orrs	r2, r1
 80012a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e007      	b.n	80012bc <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	02d2      	lsls	r2, r2, #11
 80012b4:	431a      	orrs	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
  }
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b006      	add	sp, #24
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ce:	200f      	movs	r0, #15
 80012d0:	183b      	adds	r3, r7, r0
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	2120      	movs	r1, #32
 80012d6:	5c52      	ldrb	r2, [r2, r1]
 80012d8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012da:	0002      	movs	r2, r0
 80012dc:	18bb      	adds	r3, r7, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <HAL_CAN_ActivateNotification+0x28>
 80012e4:	18bb      	adds	r3, r7, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d109      	bne.n	8001300 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6959      	ldr	r1, [r3, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e007      	b.n	8001310 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	02d2      	lsls	r2, r2, #11
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
  }
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2201      	movs	r2, #1
 8001358:	4013      	ands	r3, r2
 800135a:	d100      	bne.n	800135e <HAL_CAN_IRQHandler+0x46>
 800135c:	e084      	b.n	8001468 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	d024      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d004      	beq.n	8001380 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f000 f981 	bl	8001680 <HAL_CAN_TxMailbox0CompleteCallback>
 800137e:	e017      	b.n	80013b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2204      	movs	r2, #4
 8001384:	4013      	ands	r3, r2
 8001386:	d005      	beq.n	8001394 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	4313      	orrs	r3, r2
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	e00d      	b.n	80013b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2208      	movs	r2, #8
 8001398:	4013      	ands	r3, r2
 800139a:	d005      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	0152      	lsls	r2, r2, #5
 80013a2:	4313      	orrs	r3, r2
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	e003      	b.n	80013b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f980 	bl	80016b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	d028      	beq.n	800140c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0052      	lsls	r2, r2, #1
 80013c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d004      	beq.n	80013d8 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f000 f95d 	bl	8001690 <HAL_CAN_TxMailbox1CompleteCallback>
 80013d6:	e019      	b.n	800140c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	d005      	beq.n	80013ee <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	0192      	lsls	r2, r2, #6
 80013e8:	4313      	orrs	r3, r2
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
 80013ec:	e00e      	b.n	800140c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	d005      	beq.n	8001404 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	01d2      	lsls	r2, r2, #7
 80013fe:	4313      	orrs	r3, r2
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	e003      	b.n	800140c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	0018      	movs	r0, r3
 8001408:	f000 f95a 	bl	80016c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	4013      	ands	r3, r2
 8001414:	d028      	beq.n	8001468 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	0252      	lsls	r2, r2, #9
 800141e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	4013      	ands	r3, r2
 8001428:	d004      	beq.n	8001434 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f937 	bl	80016a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001432:	e019      	b.n	8001468 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	02db      	lsls	r3, r3, #11
 800143a:	4013      	ands	r3, r2
 800143c:	d005      	beq.n	800144a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	0212      	lsls	r2, r2, #8
 8001444:	4313      	orrs	r3, r2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	e00e      	b.n	8001468 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	031b      	lsls	r3, r3, #12
 8001450:	4013      	ands	r3, r2
 8001452:	d005      	beq.n	8001460 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	0252      	lsls	r2, r2, #9
 800145a:	4313      	orrs	r3, r2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e003      	b.n	8001468 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f934 	bl	80016d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	2208      	movs	r2, #8
 800146c:	4013      	ands	r3, r2
 800146e:	d00c      	beq.n	800148a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2210      	movs	r2, #16
 8001474:	4013      	ands	r3, r2
 8001476:	d008      	beq.n	800148a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4313      	orrs	r3, r2
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2210      	movs	r2, #16
 8001488:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	2204      	movs	r2, #4
 800148e:	4013      	ands	r3, r2
 8001490:	d00b      	beq.n	80014aa <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2208      	movs	r2, #8
 8001496:	4013      	ands	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2208      	movs	r2, #8
 80014a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 f91b 	bl	80016e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d009      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2203      	movs	r2, #3
 80014ba:	4013      	ands	r3, r2
 80014bc:	d003      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7fe fef9 	bl	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	2240      	movs	r2, #64	; 0x40
 80014ca:	4013      	ands	r3, r2
 80014cc:	d00c      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2210      	movs	r2, #16
 80014d2:	4013      	ands	r3, r2
 80014d4:	d008      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	00d2      	lsls	r2, r2, #3
 80014dc:	4313      	orrs	r3, r2
 80014de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2210      	movs	r2, #16
 80014e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	2220      	movs	r2, #32
 80014ec:	4013      	ands	r3, r2
 80014ee:	d00b      	beq.n	8001508 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2208      	movs	r2, #8
 80014f4:	4013      	ands	r3, r2
 80014f6:	d007      	beq.n	8001508 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0018      	movs	r0, r3
 8001504:	f000 f8fc 	bl	8001700 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	2210      	movs	r2, #16
 800150c:	4013      	ands	r3, r2
 800150e:	d009      	beq.n	8001524 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2203      	movs	r2, #3
 8001518:	4013      	ands	r3, r2
 800151a:	d003      	beq.n	8001524 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	0018      	movs	r0, r3
 8001520:	f000 f8e6 	bl	80016f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001524:	6a3a      	ldr	r2, [r7, #32]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d00b      	beq.n	8001546 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	2210      	movs	r2, #16
 8001532:	4013      	ands	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2210      	movs	r2, #16
 800153c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f000 f8e5 	bl	8001710 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001546:	6a3a      	ldr	r2, [r7, #32]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	025b      	lsls	r3, r3, #9
 800154c:	4013      	ands	r3, r2
 800154e:	d00b      	beq.n	8001568 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	2208      	movs	r2, #8
 8001554:	4013      	ands	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2208      	movs	r2, #8
 800155e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f8dc 	bl	8001720 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001568:	6a3a      	ldr	r2, [r7, #32]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_CAN_IRQHandler+0x25c>
 8001572:	e074      	b.n	800165e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2204      	movs	r2, #4
 8001578:	4013      	ands	r3, r2
 800157a:	d100      	bne.n	800157e <HAL_CAN_IRQHandler+0x266>
 800157c:	e06b      	b.n	8001656 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800157e:	6a3a      	ldr	r2, [r7, #32]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800158e:	d003      	beq.n	8001598 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	2201      	movs	r2, #1
 8001594:	4313      	orrs	r3, r2
 8001596:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001598:	6a3a      	ldr	r2, [r7, #32]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a8:	d003      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	2202      	movs	r2, #2
 80015ae:	4313      	orrs	r3, r2
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015b2:	6a3a      	ldr	r2, [r7, #32]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4013      	ands	r3, r2
 80015ba:	d007      	beq.n	80015cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c2:	d003      	beq.n	80015cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	2204      	movs	r2, #4
 80015c8:	4313      	orrs	r3, r2
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015cc:	6a3a      	ldr	r2, [r7, #32]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d03f      	beq.n	8001656 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2270      	movs	r2, #112	; 0x70
 80015da:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015dc:	d03b      	beq.n	8001656 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2270      	movs	r2, #112	; 0x70
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b60      	cmp	r3, #96	; 0x60
 80015e6:	d027      	beq.n	8001638 <HAL_CAN_IRQHandler+0x320>
 80015e8:	d82c      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x32c>
 80015ea:	2b50      	cmp	r3, #80	; 0x50
 80015ec:	d01f      	beq.n	800162e <HAL_CAN_IRQHandler+0x316>
 80015ee:	d829      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x32c>
 80015f0:	2b40      	cmp	r3, #64	; 0x40
 80015f2:	d017      	beq.n	8001624 <HAL_CAN_IRQHandler+0x30c>
 80015f4:	d826      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x32c>
 80015f6:	2b30      	cmp	r3, #48	; 0x30
 80015f8:	d00f      	beq.n	800161a <HAL_CAN_IRQHandler+0x302>
 80015fa:	d823      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x32c>
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d002      	beq.n	8001606 <HAL_CAN_IRQHandler+0x2ee>
 8001600:	2b20      	cmp	r3, #32
 8001602:	d005      	beq.n	8001610 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001604:	e01e      	b.n	8001644 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	2208      	movs	r2, #8
 800160a:	4313      	orrs	r3, r2
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800160e:	e01a      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	2210      	movs	r2, #16
 8001614:	4313      	orrs	r3, r2
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001618:	e015      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	2220      	movs	r2, #32
 800161e:	4313      	orrs	r3, r2
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001622:	e010      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	2240      	movs	r2, #64	; 0x40
 8001628:	4313      	orrs	r3, r2
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800162c:	e00b      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	4313      	orrs	r3, r2
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001636:	e006      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	4313      	orrs	r3, r2
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001642:	e000      	b.n	8001646 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001644:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2170      	movs	r1, #112	; 0x70
 8001652:	438a      	bics	r2, r1
 8001654:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	2b00      	cmp	r3, #0
 8001662:	d009      	beq.n	8001678 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0018      	movs	r0, r3
 8001674:	f000 f85c 	bl	8001730 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b00a      	add	sp, #40	; 0x28
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b002      	add	sp, #8
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	0002      	movs	r2, r0
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b7f      	cmp	r3, #127	; 0x7f
 8001752:	d809      	bhi.n	8001768 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	001a      	movs	r2, r3
 800175a:	231f      	movs	r3, #31
 800175c:	401a      	ands	r2, r3
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_EnableIRQ+0x30>)
 8001760:	2101      	movs	r1, #1
 8001762:	4091      	lsls	r1, r2
 8001764:	000a      	movs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
  }
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	0002      	movs	r2, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b7f      	cmp	r3, #127	; 0x7f
 8001788:	d828      	bhi.n	80017dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800178a:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <__NVIC_SetPriority+0xd4>)
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	33c0      	adds	r3, #192	; 0xc0
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	589b      	ldr	r3, [r3, r2]
 800179a:	1dfa      	adds	r2, r7, #7
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	0011      	movs	r1, r2
 80017a0:	2203      	movs	r2, #3
 80017a2:	400a      	ands	r2, r1
 80017a4:	00d2      	lsls	r2, r2, #3
 80017a6:	21ff      	movs	r1, #255	; 0xff
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	43d2      	mvns	r2, r2
 80017ae:	401a      	ands	r2, r3
 80017b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	401a      	ands	r2, r3
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	0018      	movs	r0, r3
 80017c0:	2303      	movs	r3, #3
 80017c2:	4003      	ands	r3, r0
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c8:	481f      	ldr	r0, [pc, #124]	; (8001848 <__NVIC_SetPriority+0xd4>)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	430a      	orrs	r2, r1
 80017d4:	33c0      	adds	r3, #192	; 0xc0
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017da:	e031      	b.n	8001840 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <__NVIC_SetPriority+0xd8>)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	0019      	movs	r1, r3
 80017e4:	230f      	movs	r3, #15
 80017e6:	400b      	ands	r3, r1
 80017e8:	3b08      	subs	r3, #8
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3306      	adds	r3, #6
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	3304      	adds	r3, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1dfa      	adds	r2, r7, #7
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	0011      	movs	r1, r2
 80017fc:	2203      	movs	r2, #3
 80017fe:	400a      	ands	r2, r1
 8001800:	00d2      	lsls	r2, r2, #3
 8001802:	21ff      	movs	r1, #255	; 0xff
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	43d2      	mvns	r2, r2
 800180a:	401a      	ands	r2, r3
 800180c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	22ff      	movs	r2, #255	; 0xff
 8001814:	401a      	ands	r2, r3
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	2303      	movs	r3, #3
 800181e:	4003      	ands	r3, r0
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <__NVIC_SetPriority+0xd8>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	001c      	movs	r4, r3
 800182c:	230f      	movs	r3, #15
 800182e:	4023      	ands	r3, r4
 8001830:	3b08      	subs	r3, #8
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	430a      	orrs	r2, r1
 8001836:	3306      	adds	r3, #6
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	18c3      	adds	r3, r0, r3
 800183c:	3304      	adds	r3, #4
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b003      	add	sp, #12
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1e5a      	subs	r2, r3, #1
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	045b      	lsls	r3, r3, #17
 8001860:	429a      	cmp	r2, r3
 8001862:	d301      	bcc.n	8001868 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001864:	2301      	movs	r3, #1
 8001866:	e010      	b.n	800188a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <SysTick_Config+0x44>)
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	3a01      	subs	r2, #1
 800186e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001870:	2301      	movs	r3, #1
 8001872:	425b      	negs	r3, r3
 8001874:	2103      	movs	r1, #3
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff ff7c 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x44>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x44>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	210f      	movs	r1, #15
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	1c02      	adds	r2, r0, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	0002      	movs	r2, r0
 80018ca:	1dfb      	adds	r3, r7, #7
 80018cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ff33 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff ffaf 	bl	8001850 <SysTick_Config>
 80018f2:	0003      	movs	r3, r0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e155      	b.n	8001bb8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4091      	lsls	r1, r2
 8001916:	000a      	movs	r2, r1
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <HAL_GPIO_Init+0x28>
 8001922:	e146      	b.n	8001bb2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2203      	movs	r2, #3
 800192a:	4013      	ands	r3, r2
 800192c:	2b01      	cmp	r3, #1
 800192e:	d005      	beq.n	800193c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2203      	movs	r2, #3
 8001936:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001938:	2b02      	cmp	r3, #2
 800193a:	d130      	bne.n	800199e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	409a      	lsls	r2, r3
 800194a:	0013      	movs	r3, r2
 800194c:	43da      	mvns	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	409a      	lsls	r2, r3
 800195e:	0013      	movs	r3, r2
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001972:	2201      	movs	r2, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	2201      	movs	r2, #1
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d017      	beq.n	80019da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	43da      	mvns	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2203      	movs	r2, #3
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	58d3      	ldr	r3, [r2, r3]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	43da      	mvns	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2107      	movs	r1, #7
 8001a12:	400b      	ands	r3, r1
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	6939      	ldr	r1, [r7, #16]
 8001a2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	029b      	lsls	r3, r3, #10
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <HAL_GPIO_Init+0x174>
 8001a6e:	e0a0      	b.n	8001bb2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	619a      	str	r2, [r3, #24]
 8001a7c:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	589b      	ldr	r3, [r3, r2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	2390      	movs	r3, #144	; 0x90
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x1ea>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_GPIO_Init+0x2e0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x1e6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <HAL_GPIO_Init+0x2e4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a44      	ldr	r2, [pc, #272]	; (8001be4 <HAL_GPIO_Init+0x2e8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x1de>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001ada:	2305      	movs	r3, #5
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x1f0>
 8001aea:	2300      	movs	r3, #0
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	2103      	movs	r1, #3
 8001af0:	400a      	ands	r2, r1
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001afc:	4935      	ldr	r1, [pc, #212]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43da      	mvns	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	025b      	lsls	r3, r3, #9
 8001b22:	4013      	ands	r3, r2
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	029b      	lsls	r3, r3, #10
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	035b      	lsls	r3, r3, #13
 8001b76:	4013      	ands	r3, r2
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43da      	mvns	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	039b      	lsls	r3, r3, #14
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	40da      	lsrs	r2, r3
 8001bc0:	1e13      	subs	r3, r2, #0
 8001bc2:	d000      	beq.n	8001bc6 <HAL_GPIO_Init+0x2ca>
 8001bc4:	e6a2      	b.n	800190c <HAL_GPIO_Init+0x10>
  } 
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b006      	add	sp, #24
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	48000800 	.word	0x48000800
 8001be0:	48000c00 	.word	0x48000c00
 8001be4:	48001000 	.word	0x48001000
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	1cbb      	adds	r3, r7, #2
 8001bfa:	1c02      	adds	r2, r0, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
 8001bfe:	1c7b      	adds	r3, r7, #1
 8001c00:	1c0a      	adds	r2, r1, #0
 8001c02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c04:	1c7b      	adds	r3, r7, #1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0c:	1cbb      	adds	r3, r7, #2
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c14:	e003      	b.n	8001c1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c16:	1cbb      	adds	r3, r7, #2
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	000a      	movs	r2, r1
 8001c30:	1cbb      	adds	r3, r7, #2
 8001c32:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c3a:	1cbb      	adds	r3, r7, #2
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	041a      	lsls	r2, r3, #16
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	1cb9      	adds	r1, r7, #2
 8001c4a:	8809      	ldrh	r1, [r1, #0]
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	619a      	str	r2, [r3, #24]
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b004      	add	sp, #16
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f000 fb76 	bl	800235c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4013      	ands	r3, r2
 8001c78:	d100      	bne.n	8001c7c <HAL_RCC_OscConfig+0x20>
 8001c7a:	e08e      	b.n	8001d9a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c7c:	4bc5      	ldr	r3, [pc, #788]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	220c      	movs	r2, #12
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d00e      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c88:	4bc2      	ldr	r3, [pc, #776]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d117      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x68>
 8001c94:	4bbf      	ldr	r3, [pc, #764]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	23c0      	movs	r3, #192	; 0xc0
 8001c9a:	025b      	lsls	r3, r3, #9
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	025b      	lsls	r3, r3, #9
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca6:	4bbb      	ldr	r3, [pc, #748]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	029b      	lsls	r3, r3, #10
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x58>
 8001cb2:	e071      	b.n	8001d98 <HAL_RCC_OscConfig+0x13c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d000      	beq.n	8001cbe <HAL_RCC_OscConfig+0x62>
 8001cbc:	e06c      	b.n	8001d98 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f000 fb4c 	bl	800235c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x80>
 8001ccc:	4bb1      	ldr	r3, [pc, #708]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4bb0      	ldr	r3, [pc, #704]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	0249      	lsls	r1, r1, #9
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e02f      	b.n	8001d3c <HAL_RCC_OscConfig+0xe0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0xa2>
 8001ce4:	4bab      	ldr	r3, [pc, #684]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4baa      	ldr	r3, [pc, #680]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001cea:	49ab      	ldr	r1, [pc, #684]	; (8001f98 <HAL_RCC_OscConfig+0x33c>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	4ba8      	ldr	r3, [pc, #672]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4ba7      	ldr	r3, [pc, #668]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	49a9      	ldr	r1, [pc, #676]	; (8001f9c <HAL_RCC_OscConfig+0x340>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e01e      	b.n	8001d3c <HAL_RCC_OscConfig+0xe0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d10e      	bne.n	8001d24 <HAL_RCC_OscConfig+0xc8>
 8001d06:	4ba3      	ldr	r3, [pc, #652]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4ba2      	ldr	r3, [pc, #648]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	02c9      	lsls	r1, r1, #11
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	4b9f      	ldr	r3, [pc, #636]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b9e      	ldr	r3, [pc, #632]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	0249      	lsls	r1, r1, #9
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xe0>
 8001d24:	4b9b      	ldr	r3, [pc, #620]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b9a      	ldr	r3, [pc, #616]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	499b      	ldr	r1, [pc, #620]	; (8001f98 <HAL_RCC_OscConfig+0x33c>)
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	4b98      	ldr	r3, [pc, #608]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b97      	ldr	r3, [pc, #604]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d36:	4999      	ldr	r1, [pc, #612]	; (8001f9c <HAL_RCC_OscConfig+0x340>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d014      	beq.n	8001d6e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe fe84 	bl	8000a50 <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4e:	f7fe fe7f 	bl	8000a50 <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	; 0x64
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e2fd      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d60:	4b8c      	ldr	r3, [pc, #560]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	029b      	lsls	r3, r3, #10
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0xf2>
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fe6f 	bl	8000a50 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d78:	f7fe fe6a 	bl	8000a50 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2e8      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b82      	ldr	r3, [pc, #520]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	029b      	lsls	r3, r3, #10
 8001d92:	4013      	ands	r3, r2
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x11c>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d100      	bne.n	8001da6 <HAL_RCC_OscConfig+0x14a>
 8001da4:	e06c      	b.n	8001e80 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001da6:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	220c      	movs	r2, #12
 8001dac:	4013      	ands	r3, r2
 8001dae:	d00e      	beq.n	8001dce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001db0:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	220c      	movs	r2, #12
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d11f      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1a0>
 8001dbc:	4b75      	ldr	r3, [pc, #468]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d116      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_OscConfig+0x188>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e2bb      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	22f8      	movs	r2, #248	; 0xf8
 8001dea:	4393      	bics	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00da      	lsls	r2, r3, #3
 8001df4:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	e041      	b.n	8001e80 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d024      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e04:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fe1e 	bl	8000a50 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fe19 	bl	8000a50 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e297      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2202      	movs	r2, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d0f1      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	22f8      	movs	r2, #248	; 0xf8
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00da      	lsls	r2, r3, #3
 8001e46:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e018      	b.n	8001e80 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	438a      	bics	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fdf9 	bl	8000a50 <HAL_GetTick>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e64:	f7fe fdf4 	bl	8000a50 <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e272      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d1f1      	bne.n	8001e64 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2208      	movs	r2, #8
 8001e86:	4013      	ands	r3, r2
 8001e88:	d036      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d019      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fdd7 	bl	8000a50 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7fe fdd2 	bl	8000a50 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e250      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d0f1      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x24c>
 8001ec4:	e018      	b.n	8001ef8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eca:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001ecc:	2101      	movs	r1, #1
 8001ece:	438a      	bics	r2, r1
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fdbd 	bl	8000a50 <HAL_GetTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001edc:	f7fe fdb8 	bl	8000a50 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e236      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d1f1      	bne.n	8001edc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2204      	movs	r2, #4
 8001efe:	4013      	ands	r3, r2
 8001f00:	d100      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2a8>
 8001f02:	e0b5      	b.n	8002070 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f04:	201f      	movs	r0, #31
 8001f06:	183b      	adds	r3, r7, r0
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	055b      	lsls	r3, r3, #21
 8001f14:	4013      	ands	r3, r2
 8001f16:	d110      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0549      	lsls	r1, r1, #21
 8001f22:	430a      	orrs	r2, r1
 8001f24:	61da      	str	r2, [r3, #28]
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	055b      	lsls	r3, r3, #21
 8001f2e:	4013      	ands	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f34:	183b      	adds	r3, r7, r0
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_OscConfig+0x344>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_RCC_OscConfig+0x344>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x344>)
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	0049      	lsls	r1, r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f54:	f7fe fd7c 	bl	8000a50 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7fe fd77 	bl	8000a50 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1f5      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_OscConfig+0x344>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10f      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x348>
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <HAL_RCC_OscConfig+0x338>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	621a      	str	r2, [r3, #32]
 8001f90:	e036      	b.n	8002000 <HAL_RCC_OscConfig+0x3a4>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	40021000 	.word	0x40021000
 8001f98:	fffeffff 	.word	0xfffeffff
 8001f9c:	fffbffff 	.word	0xfffbffff
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x36a>
 8001fac:	4bca      	ldr	r3, [pc, #808]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	6a1a      	ldr	r2, [r3, #32]
 8001fb0:	4bc9      	ldr	r3, [pc, #804]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	621a      	str	r2, [r3, #32]
 8001fb8:	4bc7      	ldr	r3, [pc, #796]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	6a1a      	ldr	r2, [r3, #32]
 8001fbc:	4bc6      	ldr	r3, [pc, #792]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	621a      	str	r2, [r3, #32]
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x3a4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x38c>
 8001fce:	4bc2      	ldr	r3, [pc, #776]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fd0:	6a1a      	ldr	r2, [r3, #32]
 8001fd2:	4bc1      	ldr	r3, [pc, #772]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	621a      	str	r2, [r3, #32]
 8001fda:	4bbf      	ldr	r3, [pc, #764]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	4bbe      	ldr	r3, [pc, #760]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	621a      	str	r2, [r3, #32]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0x3a4>
 8001fe8:	4bbb      	ldr	r3, [pc, #748]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fea:	6a1a      	ldr	r2, [r3, #32]
 8001fec:	4bba      	ldr	r3, [pc, #744]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	621a      	str	r2, [r3, #32]
 8001ff4:	4bb8      	ldr	r3, [pc, #736]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	4bb7      	ldr	r3, [pc, #732]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7fe fd22 	bl	8000a50 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e009      	b.n	8002026 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fd1d 	bl	8000a50 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	4aaf      	ldr	r2, [pc, #700]	; (80022dc <HAL_RCC_OscConfig+0x680>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e19a      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	4bac      	ldr	r3, [pc, #688]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x3b6>
 8002030:	e013      	b.n	800205a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7fe fd0d 	bl	8000a50 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203a:	e009      	b.n	8002050 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe fd08 	bl	8000a50 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4aa5      	ldr	r2, [pc, #660]	; (80022dc <HAL_RCC_OscConfig+0x680>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e185      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	4ba1      	ldr	r3, [pc, #644]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800205a:	231f      	movs	r3, #31
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	4b9b      	ldr	r3, [pc, #620]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800206a:	499d      	ldr	r1, [pc, #628]	; (80022e0 <HAL_RCC_OscConfig+0x684>)
 800206c:	400a      	ands	r2, r1
 800206e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2210      	movs	r2, #16
 8002076:	4013      	ands	r3, r2
 8002078:	d063      	beq.n	8002142 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d12a      	bne.n	80020d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002082:	4b95      	ldr	r3, [pc, #596]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002086:	4b94      	ldr	r3, [pc, #592]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002088:	2104      	movs	r1, #4
 800208a:	430a      	orrs	r2, r1
 800208c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800208e:	4b92      	ldr	r3, [pc, #584]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002092:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002094:	2101      	movs	r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe fcd9 	bl	8000a50 <HAL_GetTick>
 800209e:	0003      	movs	r3, r0
 80020a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020a4:	f7fe fcd4 	bl	8000a50 <HAL_GetTick>
 80020a8:	0002      	movs	r2, r0
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e152      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	2202      	movs	r2, #2
 80020bc:	4013      	ands	r3, r2
 80020be:	d0f1      	beq.n	80020a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020c0:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80020c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c4:	22f8      	movs	r2, #248	; 0xf8
 80020c6:	4393      	bics	r3, r2
 80020c8:	0019      	movs	r1, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	00da      	lsls	r2, r3, #3
 80020d0:	4b81      	ldr	r3, [pc, #516]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34
 80020d6:	e034      	b.n	8002142 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	3305      	adds	r3, #5
 80020de:	d111      	bne.n	8002104 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020e0:	4b7d      	ldr	r3, [pc, #500]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80020e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e4:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80020e6:	2104      	movs	r1, #4
 80020e8:	438a      	bics	r2, r1
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020ec:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	22f8      	movs	r2, #248	; 0xf8
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	00da      	lsls	r2, r3, #3
 80020fc:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
 8002102:	e01e      	b.n	8002142 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002104:	4b74      	ldr	r3, [pc, #464]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002108:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800210a:	2104      	movs	r1, #4
 800210c:	430a      	orrs	r2, r1
 800210e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002110:	4b71      	ldr	r3, [pc, #452]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002114:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002116:	2101      	movs	r1, #1
 8002118:	438a      	bics	r2, r1
 800211a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe fc98 	bl	8000a50 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002126:	f7fe fc93 	bl	8000a50 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e111      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002138:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	d1f1      	bne.n	8002126 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2220      	movs	r2, #32
 8002148:	4013      	ands	r3, r2
 800214a:	d05c      	beq.n	8002206 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800214c:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	220c      	movs	r2, #12
 8002152:	4013      	ands	r3, r2
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d00e      	beq.n	8002176 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002158:	4b5f      	ldr	r3, [pc, #380]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	220c      	movs	r2, #12
 800215e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002160:	2b08      	cmp	r3, #8
 8002162:	d114      	bne.n	800218e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002164:	4b5c      	ldr	r3, [pc, #368]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	23c0      	movs	r3, #192	; 0xc0
 800216a:	025b      	lsls	r3, r3, #9
 800216c:	401a      	ands	r2, r3
 800216e:	23c0      	movs	r3, #192	; 0xc0
 8002170:	025b      	lsls	r3, r3, #9
 8002172:	429a      	cmp	r2, r3
 8002174:	d10b      	bne.n	800218e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002176:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	025b      	lsls	r3, r3, #9
 800217e:	4013      	ands	r3, r2
 8002180:	d040      	beq.n	8002204 <HAL_RCC_OscConfig+0x5a8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d03c      	beq.n	8002204 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0e6      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01b      	beq.n	80021ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002196:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219a:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	0249      	lsls	r1, r1, #9
 80021a0:	430a      	orrs	r2, r1
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fc54 	bl	8000a50 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ae:	f7fe fc4f 	bl	8000a50 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0cd      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021c0:	4b45      	ldr	r3, [pc, #276]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80021c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	025b      	lsls	r3, r3, #9
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x552>
 80021cc:	e01b      	b.n	8002206 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021ce:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80021d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80021d4:	4943      	ldr	r1, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x688>)
 80021d6:	400a      	ands	r2, r1
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe fc39 	bl	8000a50 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e4:	f7fe fc34 	bl	8000a50 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0b2      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80021f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	025b      	lsls	r3, r3, #9
 80021fe:	4013      	ands	r3, r2
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x588>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002204:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d100      	bne.n	8002210 <HAL_RCC_OscConfig+0x5b4>
 800220e:	e0a4      	b.n	800235a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	220c      	movs	r2, #12
 8002216:	4013      	ands	r3, r2
 8002218:	2b08      	cmp	r3, #8
 800221a:	d100      	bne.n	800221e <HAL_RCC_OscConfig+0x5c2>
 800221c:	e078      	b.n	8002310 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b02      	cmp	r3, #2
 8002224:	d14c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800222c:	492e      	ldr	r1, [pc, #184]	; (80022e8 <HAL_RCC_OscConfig+0x68c>)
 800222e:	400a      	ands	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe fc0d 	bl	8000a50 <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fc08 	bl	8000a50 <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e086      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	049b      	lsls	r3, r3, #18
 8002256:	4013      	ands	r3, r2
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	220f      	movs	r2, #15
 8002260:	4393      	bics	r3, r2
 8002262:	0019      	movs	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800226a:	430a      	orrs	r2, r1
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_RCC_OscConfig+0x690>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	431a      	orrs	r2, r3
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	0449      	lsls	r1, r1, #17
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fbdb 	bl	8000a50 <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe fbd6 	bl	8000a50 <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e054      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	049b      	lsls	r3, r3, #18
 80022ba:	4013      	ands	r3, r2
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x644>
 80022be:	e04c      	b.n	800235a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_RCC_OscConfig+0x67c>)
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <HAL_RCC_OscConfig+0x68c>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7fe fbc0 	bl	8000a50 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x6a6>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	40021000 	.word	0x40021000
 80022dc:	00001388 	.word	0x00001388
 80022e0:	efffffff 	.word	0xefffffff
 80022e4:	fffeffff 	.word	0xfffeffff
 80022e8:	feffffff 	.word	0xfeffffff
 80022ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fbae 	bl	8000a50 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e02c      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_RCC_OscConfig+0x708>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	049b      	lsls	r3, r3, #18
 800230a:	4013      	ands	r3, r2
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x694>
 800230e:	e024      	b.n	800235a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e01f      	b.n	800235c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_OscConfig+0x708>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_RCC_OscConfig+0x708>)
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	23c0      	movs	r3, #192	; 0xc0
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	401a      	ands	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	429a      	cmp	r2, r3
 8002336:	d10e      	bne.n	8002356 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	220f      	movs	r2, #15
 800233c:	401a      	ands	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d107      	bne.n	8002356 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	23f0      	movs	r3, #240	; 0xf0
 800234a:	039b      	lsls	r3, r3, #14
 800234c:	401a      	ands	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b008      	add	sp, #32
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000

08002368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0bf      	b.n	80024fc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b61      	ldr	r3, [pc, #388]	; (8002504 <HAL_RCC_ClockConfig+0x19c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d911      	bls.n	80023ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b5e      	ldr	r3, [pc, #376]	; (8002504 <HAL_RCC_ClockConfig+0x19c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2201      	movs	r2, #1
 8002390:	4393      	bics	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	4b5b      	ldr	r3, [pc, #364]	; (8002504 <HAL_RCC_ClockConfig+0x19c>)
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239c:	4b59      	ldr	r3, [pc, #356]	; (8002504 <HAL_RCC_ClockConfig+0x19c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0a6      	b.n	80024fc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2202      	movs	r2, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d015      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2204      	movs	r2, #4
 80023be:	4013      	ands	r3, r2
 80023c0:	d006      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023c2:	4b51      	ldr	r3, [pc, #324]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 80023c8:	21e0      	movs	r1, #224	; 0xe0
 80023ca:	00c9      	lsls	r1, r1, #3
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b4d      	ldr	r3, [pc, #308]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	22f0      	movs	r2, #240	; 0xf0
 80023d6:	4393      	bics	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4013      	ands	r3, r2
 80023ec:	d04c      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b44      	ldr	r3, [pc, #272]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	4013      	ands	r3, r2
 8002400:	d120      	bne.n	8002444 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07a      	b.n	80024fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	049b      	lsls	r3, r3, #18
 8002416:	4013      	ands	r3, r2
 8002418:	d114      	bne.n	8002444 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06e      	b.n	80024fc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002426:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 8002428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	4013      	ands	r3, r2
 8002430:	d108      	bne.n	8002444 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e062      	b.n	80024fc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e05b      	b.n	80024fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	4393      	bics	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002458:	f7fe fafa 	bl	8000a50 <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002460:	e009      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002462:	f7fe faf5 	bl	8000a50 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_RCC_ClockConfig+0x1a4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e042      	b.n	80024fc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	220c      	movs	r2, #12
 800247c:	401a      	ands	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1ec      	bne.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_ClockConfig+0x19c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2201      	movs	r2, #1
 800248e:	4013      	ands	r3, r2
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d211      	bcs.n	80024ba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_ClockConfig+0x19c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	4393      	bics	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_RCC_ClockConfig+0x19c>)
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_RCC_ClockConfig+0x19c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2201      	movs	r2, #1
 80024ae:	4013      	ands	r3, r2
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e020      	b.n	80024fc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2204      	movs	r2, #4
 80024c0:	4013      	ands	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_RCC_ClockConfig+0x1a8>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024d8:	f000 f820 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024dc:	0001      	movs	r1, r0
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_RCC_ClockConfig+0x1a0>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	220f      	movs	r2, #15
 80024e6:	4013      	ands	r3, r2
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1ac>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	000a      	movs	r2, r1
 80024ee:	40da      	lsrs	r2, r3
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1b0>)
 80024f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024f4:	2003      	movs	r0, #3
 80024f6:	f7fe fa65 	bl	80009c4 <HAL_InitTick>
  
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40022000 	.word	0x40022000
 8002508:	40021000 	.word	0x40021000
 800250c:	00001388 	.word	0x00001388
 8002510:	fffff8ff 	.word	0xfffff8ff
 8002514:	0800365c 	.word	0x0800365c
 8002518:	20000000 	.word	0x20000000

0800251c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b08f      	sub	sp, #60	; 0x3c
 8002520:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002522:	2314      	movs	r3, #20
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	4a38      	ldr	r2, [pc, #224]	; (8002608 <HAL_RCC_GetSysClockFreq+0xec>)
 8002528:	ca13      	ldmia	r2!, {r0, r1, r4}
 800252a:	c313      	stmia	r3!, {r0, r1, r4}
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4a36      	ldr	r2, [pc, #216]	; (800260c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002536:	c313      	stmia	r3!, {r0, r1, r4}
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002540:	2300      	movs	r3, #0
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	220c      	movs	r2, #12
 800255a:	4013      	ands	r3, r2
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d047      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0xd4>
 8002560:	d849      	bhi.n	80025f6 <HAL_RCC_GetSysClockFreq+0xda>
 8002562:	2b04      	cmp	r3, #4
 8002564:	d002      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x50>
 8002566:	2b08      	cmp	r3, #8
 8002568:	d003      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0x56>
 800256a:	e044      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_RCC_GetSysClockFreq+0xf8>)
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002570:	e044      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	0c9b      	lsrs	r3, r3, #18
 8002576:	220f      	movs	r2, #15
 8002578:	4013      	ands	r3, r2
 800257a:	2214      	movs	r2, #20
 800257c:	18ba      	adds	r2, r7, r2
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	220f      	movs	r2, #15
 8002588:	4013      	ands	r3, r2
 800258a:	1d3a      	adds	r2, r7, #4
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002592:	23c0      	movs	r3, #192	; 0xc0
 8002594:	025b      	lsls	r3, r3, #9
 8002596:	401a      	ands	r2, r3
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	025b      	lsls	r3, r3, #9
 800259c:	429a      	cmp	r2, r3
 800259e:	d109      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a2:	481c      	ldr	r0, [pc, #112]	; (8002614 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a4:	f7fd fdb0 	bl	8000108 <__udivsi3>
 80025a8:	0003      	movs	r3, r0
 80025aa:	001a      	movs	r2, r3
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	4353      	muls	r3, r2
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
 80025b2:	e01a      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b6:	23c0      	movs	r3, #192	; 0xc0
 80025b8:	025b      	lsls	r3, r3, #9
 80025ba:	401a      	ands	r2, r3
 80025bc:	23c0      	movs	r3, #192	; 0xc0
 80025be:	025b      	lsls	r3, r3, #9
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d109      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c6:	4814      	ldr	r0, [pc, #80]	; (8002618 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025c8:	f7fd fd9e 	bl	8000108 <__udivsi3>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	4353      	muls	r3, r2
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
 80025d6:	e008      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025da:	4810      	ldr	r0, [pc, #64]	; (800261c <HAL_RCC_GetSysClockFreq+0x100>)
 80025dc:	f7fd fd94 	bl	8000108 <__udivsi3>
 80025e0:	0003      	movs	r3, r0
 80025e2:	001a      	movs	r2, r3
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	4353      	muls	r3, r2
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ee:	e005      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025f4:	e002      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_GetSysClockFreq+0x100>)
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b00f      	add	sp, #60	; 0x3c
 8002604:	bd90      	pop	{r4, r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	0800363c 	.word	0x0800363c
 800260c:	0800364c 	.word	0x0800364c
 8002610:	40021000 	.word	0x40021000
 8002614:	01e84800 	.word	0x01e84800
 8002618:	02dc6c00 	.word	0x02dc6c00
 800261c:	007a1200 	.word	0x007a1200

08002620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b02      	ldr	r3, [pc, #8]	; (8002630 <HAL_RCC_GetHCLKFreq+0x10>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	20000000 	.word	0x20000000

08002634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002638:	f7ff fff2 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 800263c:	0001      	movs	r1, r0
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	2207      	movs	r2, #7
 8002646:	4013      	ands	r3, r2
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_RCC_GetPCLK1Freq+0x28>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	40d9      	lsrs	r1, r3
 800264e:	000b      	movs	r3, r1
}    
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	40021000 	.word	0x40021000
 800265c:	0800366c 	.word	0x0800366c

08002660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	025b      	lsls	r3, r3, #9
 8002678:	4013      	ands	r3, r2
 800267a:	d100      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800267c:	e08e      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2017      	movs	r0, #23
 8002680:	183b      	adds	r3, r7, r0
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b6e      	ldr	r3, [pc, #440]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	055b      	lsls	r3, r3, #21
 800268e:	4013      	ands	r3, r2
 8002690:	d110      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b6b      	ldr	r3, [pc, #428]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0549      	lsls	r1, r1, #21
 800269c:	430a      	orrs	r2, r1
 800269e:	61da      	str	r2, [r3, #28]
 80026a0:	4b67      	ldr	r3, [pc, #412]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	055b      	lsls	r3, r3, #21
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d11a      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c0:	4b60      	ldr	r3, [pc, #384]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b5f      	ldr	r3, [pc, #380]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0049      	lsls	r1, r1, #1
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7fe f9bf 	bl	8000a50 <HAL_GetTick>
 80026d2:	0003      	movs	r3, r0
 80026d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	e008      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d8:	f7fe f9ba 	bl	8000a50 <HAL_GetTick>
 80026dc:	0002      	movs	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0a6      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b56      	ldr	r3, [pc, #344]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026f6:	4b52      	ldr	r3, [pc, #328]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	23c0      	movs	r3, #192	; 0xc0
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d034      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	23c0      	movs	r3, #192	; 0xc0
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4013      	ands	r3, r2
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d02c      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002718:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a4a      	ldr	r2, [pc, #296]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	0249      	lsls	r1, r1, #9
 800272c:	430a      	orrs	r2, r1
 800272e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002730:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	4b42      	ldr	r3, [pc, #264]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002736:	4945      	ldr	r1, [pc, #276]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002738:	400a      	ands	r2, r1
 800273a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800273c:	4b40      	ldr	r3, [pc, #256]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe f981 	bl	8000a50 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e009      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe f97c 	bl	8000a50 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e067      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	d0f0      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002772:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a34      	ldr	r2, [pc, #208]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002778:	4013      	ands	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002782:	430a      	orrs	r2, r1
 8002784:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002786:	2317      	movs	r3, #23
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002796:	492f      	ldr	r1, [pc, #188]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002798:	400a      	ands	r2, r1
 800279a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	2203      	movs	r2, #3
 80027ac:	4393      	bics	r3, r2
 80027ae:	0019      	movs	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027b6:	430a      	orrs	r2, r1
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2202      	movs	r2, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2220      	movs	r2, #32
 80027de:	4013      	ands	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	2210      	movs	r2, #16
 80027e8:	4393      	bics	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	029b      	lsls	r3, r3, #10
 80027fe:	4013      	ands	r3, r2
 8002800:	d009      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	4393      	bics	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002812:	430a      	orrs	r2, r1
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4013      	ands	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	4393      	bics	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002832:	430a      	orrs	r2, r1
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b006      	add	sp, #24
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	40007000 	.word	0x40007000
 8002848:	fffffcff 	.word	0xfffffcff
 800284c:	fffeffff 	.word	0xfffeffff
 8002850:	00001388 	.word	0x00001388
 8002854:	efffffff 	.word	0xefffffff
 8002858:	fffcffff 	.word	0xfffcffff

0800285c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e042      	b.n	80028f4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	223d      	movs	r2, #61	; 0x3d
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	223c      	movs	r2, #60	; 0x3c
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f7fd ffad 	bl	80007e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	223d      	movs	r2, #61	; 0x3d
 800288e:	2102      	movs	r1, #2
 8002890:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	0019      	movs	r1, r3
 800289c:	0010      	movs	r0, r2
 800289e:	f000 f9bd 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2246      	movs	r2, #70	; 0x46
 80028a6:	2101      	movs	r1, #1
 80028a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	223e      	movs	r2, #62	; 0x3e
 80028ae:	2101      	movs	r1, #1
 80028b0:	5499      	strb	r1, [r3, r2]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223f      	movs	r2, #63	; 0x3f
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2241      	movs	r2, #65	; 0x41
 80028c6:	2101      	movs	r1, #1
 80028c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2242      	movs	r2, #66	; 0x42
 80028ce:	2101      	movs	r1, #1
 80028d0:	5499      	strb	r1, [r3, r2]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2243      	movs	r2, #67	; 0x43
 80028d6:	2101      	movs	r1, #1
 80028d8:	5499      	strb	r1, [r3, r2]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2244      	movs	r2, #68	; 0x44
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2245      	movs	r2, #69	; 0x45
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	223d      	movs	r2, #61	; 0x3d
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	223d      	movs	r2, #61	; 0x3d
 8002908:	5c9b      	ldrb	r3, [r3, r2]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d001      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e03b      	b.n	800298c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	223d      	movs	r2, #61	; 0x3d
 8002918:	2102      	movs	r1, #2
 800291a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_TIM_Base_Start_IT+0x98>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00f      	beq.n	8002956 <HAL_TIM_Base_Start_IT+0x5a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	05db      	lsls	r3, r3, #23
 800293e:	429a      	cmp	r2, r3
 8002940:	d009      	beq.n	8002956 <HAL_TIM_Base_Start_IT+0x5a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a14      	ldr	r2, [pc, #80]	; (8002998 <HAL_TIM_Base_Start_IT+0x9c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_TIM_Base_Start_IT+0x5a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <HAL_TIM_Base_Start_IT+0xa0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d111      	bne.n	800297a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2207      	movs	r2, #7
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b06      	cmp	r3, #6
 8002966:	d010      	beq.n	800298a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2101      	movs	r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002978:	e007      	b.n	800298a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40000400 	.word	0x40000400
 800299c:	40014000 	.word	0x40014000

080029a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d124      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2202      	movs	r2, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d11d      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2203      	movs	r2, #3
 80029ca:	4252      	negs	r2, r2
 80029cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2203      	movs	r2, #3
 80029dc:	4013      	ands	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 f902 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 80029e8:	e007      	b.n	80029fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 f8f5 	bl	8002bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f901 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2204      	movs	r2, #4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d125      	bne.n	8002a5a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2204      	movs	r2, #4
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d11e      	bne.n	8002a5a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2205      	movs	r2, #5
 8002a22:	4252      	negs	r2, r2
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	23c0      	movs	r3, #192	; 0xc0
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 f8d5 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 8002a42:	e007      	b.n	8002a54 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 f8c8 	bl	8002bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f8d4 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2208      	movs	r2, #8
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d124      	bne.n	8002ab2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2208      	movs	r2, #8
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11d      	bne.n	8002ab2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2209      	movs	r2, #9
 8002a7c:	4252      	negs	r2, r2
 8002a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2204      	movs	r2, #4
 8002a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 f8a9 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 8002a9a:	e007      	b.n	8002aac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f89c 	bl	8002bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f8a8 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d125      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d11e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2211      	movs	r2, #17
 8002ad4:	4252      	negs	r2, r2
 8002ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2208      	movs	r2, #8
 8002adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	23c0      	movs	r3, #192	; 0xc0
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f87c 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 8002af4:	e007      	b.n	8002b06 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 f86f 	bl	8002bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 f87b 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2201      	movs	r2, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10f      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4252      	negs	r2, r2
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 f849 	bl	8002bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2280      	movs	r2, #128	; 0x80
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d10f      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b80      	cmp	r3, #128	; 0x80
 8002b54:	d108      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2281      	movs	r2, #129	; 0x81
 8002b5c:	4252      	negs	r2, r2
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f8e2 	bl	8002d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d10f      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d108      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2241      	movs	r2, #65	; 0x41
 8002b8a:	4252      	negs	r2, r2
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 f83b 	bl	8002c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d108      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	4252      	negs	r2, r2
 8002bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 f8ac 	bl	8002d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b002      	add	sp, #8
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a34      	ldr	r2, [pc, #208]	; (8002d00 <TIM_Base_SetConfig+0xe4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d008      	beq.n	8002c46 <TIM_Base_SetConfig+0x2a>
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d003      	beq.n	8002c46 <TIM_Base_SetConfig+0x2a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a30      	ldr	r2, [pc, #192]	; (8002d04 <TIM_Base_SetConfig+0xe8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d108      	bne.n	8002c58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2270      	movs	r2, #112	; 0x70
 8002c4a:	4393      	bics	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <TIM_Base_SetConfig+0xe4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <TIM_Base_SetConfig+0x76>
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d013      	beq.n	8002c92 <TIM_Base_SetConfig+0x76>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <TIM_Base_SetConfig+0xe8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00f      	beq.n	8002c92 <TIM_Base_SetConfig+0x76>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <TIM_Base_SetConfig+0xec>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00b      	beq.n	8002c92 <TIM_Base_SetConfig+0x76>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <TIM_Base_SetConfig+0xf0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <TIM_Base_SetConfig+0x76>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <TIM_Base_SetConfig+0xf4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d003      	beq.n	8002c92 <TIM_Base_SetConfig+0x76>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <TIM_Base_SetConfig+0xf8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <TIM_Base_SetConfig+0xfc>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	4393      	bics	r3, r2
 8002caa:	001a      	movs	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <TIM_Base_SetConfig+0xe4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <TIM_Base_SetConfig+0xce>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <TIM_Base_SetConfig+0xf0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <TIM_Base_SetConfig+0xce>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <TIM_Base_SetConfig+0xf4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_Base_SetConfig+0xce>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <TIM_Base_SetConfig+0xf8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d103      	bne.n	8002cf2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40002000 	.word	0x40002000
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	40014400 	.word	0x40014400
 8002d14:	40014800 	.word	0x40014800
 8002d18:	fffffcff 	.word	0xfffffcff

08002d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e044      	b.n	8002dd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d107      	bne.n	8002d66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2274      	movs	r2, #116	; 0x74
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7fd fd67 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2224      	movs	r2, #36	; 0x24
 8002d6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	438a      	bics	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 f8da 	bl	8002f38 <UART_SetConfig>
 8002d84:	0003      	movs	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e024      	b.n	8002dd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 fa55 	bl	8003248 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	490d      	ldr	r1, [pc, #52]	; (8002de0 <HAL_UART_Init+0xa4>)
 8002daa:	400a      	ands	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	212a      	movs	r1, #42	; 0x2a
 8002dba:	438a      	bics	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 faed 	bl	80033b0 <UART_CheckIdleState>
 8002dd6:	0003      	movs	r3, r0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	ffffb7ff 	.word	0xffffb7ff

08002de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	1dbb      	adds	r3, r7, #6
 8002df2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d000      	beq.n	8002dfe <HAL_UART_Transmit+0x1a>
 8002dfc:	e096      	b.n	8002f2c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_UART_Transmit+0x28>
 8002e04:	1dbb      	adds	r3, r7, #6
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e08e      	b.n	8002f2e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	015b      	lsls	r3, r3, #5
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d109      	bne.n	8002e30 <HAL_UART_Transmit+0x4c>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2201      	movs	r2, #1
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e07e      	b.n	8002f2e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2274      	movs	r2, #116	; 0x74
 8002e34:	5c9b      	ldrb	r3, [r3, r2]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Transmit+0x5a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e077      	b.n	8002f2e <HAL_UART_Transmit+0x14a>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2274      	movs	r2, #116	; 0x74
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e54:	f7fd fdfc 	bl	8000a50 <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1dba      	adds	r2, r7, #6
 8002e60:	2150      	movs	r1, #80	; 0x50
 8002e62:	8812      	ldrh	r2, [r2, #0]
 8002e64:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1dba      	adds	r2, r7, #6
 8002e6a:	2152      	movs	r1, #82	; 0x52
 8002e6c:	8812      	ldrh	r2, [r2, #0]
 8002e6e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	015b      	lsls	r3, r3, #5
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d108      	bne.n	8002e8e <HAL_UART_Transmit+0xaa>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	e003      	b.n	8002e96 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2274      	movs	r2, #116	; 0x74
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002e9e:	e02d      	b.n	8002efc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	f000 fac7 	bl	8003440 <UART_WaitOnFlagUntilTimeout>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e039      	b.n	8002f2e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	881a      	ldrh	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	05d2      	lsls	r2, r2, #23
 8002eca:	0dd2      	lsrs	r2, r2, #23
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	e008      	b.n	8002eea <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2252      	movs	r2, #82	; 0x52
 8002eee:	5a9b      	ldrh	r3, [r3, r2]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b299      	uxth	r1, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2252      	movs	r2, #82	; 0x52
 8002efa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2252      	movs	r2, #82	; 0x52
 8002f00:	5a9b      	ldrh	r3, [r3, r2]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1cb      	bne.n	8002ea0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	0013      	movs	r3, r2
 8002f12:	2200      	movs	r2, #0
 8002f14:	2140      	movs	r1, #64	; 0x40
 8002f16:	f000 fa93 	bl	8003440 <UART_WaitOnFlagUntilTimeout>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e005      	b.n	8002f2e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b008      	add	sp, #32
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f40:	231e      	movs	r3, #30
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4aaf      	ldr	r2, [pc, #700]	; (8003224 <UART_SetConfig+0x2ec>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4aaa      	ldr	r2, [pc, #680]	; (8003228 <UART_SetConfig+0x2f0>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4aa1      	ldr	r2, [pc, #644]	; (800322c <UART_SetConfig+0x2f4>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a9d      	ldr	r2, [pc, #628]	; (8003230 <UART_SetConfig+0x2f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d127      	bne.n	800300e <UART_SetConfig+0xd6>
 8002fbe:	4b9d      	ldr	r3, [pc, #628]	; (8003234 <UART_SetConfig+0x2fc>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d00d      	beq.n	8002fe6 <UART_SetConfig+0xae>
 8002fca:	d81b      	bhi.n	8003004 <UART_SetConfig+0xcc>
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d014      	beq.n	8002ffa <UART_SetConfig+0xc2>
 8002fd0:	d818      	bhi.n	8003004 <UART_SetConfig+0xcc>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <UART_SetConfig+0xa4>
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d00a      	beq.n	8002ff0 <UART_SetConfig+0xb8>
 8002fda:	e013      	b.n	8003004 <UART_SetConfig+0xcc>
 8002fdc:	231f      	movs	r3, #31
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e065      	b.n	80030b2 <UART_SetConfig+0x17a>
 8002fe6:	231f      	movs	r3, #31
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2202      	movs	r2, #2
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e060      	b.n	80030b2 <UART_SetConfig+0x17a>
 8002ff0:	231f      	movs	r3, #31
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e05b      	b.n	80030b2 <UART_SetConfig+0x17a>
 8002ffa:	231f      	movs	r3, #31
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2208      	movs	r2, #8
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e056      	b.n	80030b2 <UART_SetConfig+0x17a>
 8003004:	231f      	movs	r3, #31
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2210      	movs	r2, #16
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e051      	b.n	80030b2 <UART_SetConfig+0x17a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a89      	ldr	r2, [pc, #548]	; (8003238 <UART_SetConfig+0x300>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d134      	bne.n	8003082 <UART_SetConfig+0x14a>
 8003018:	4b86      	ldr	r3, [pc, #536]	; (8003234 <UART_SetConfig+0x2fc>)
 800301a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301c:	23c0      	movs	r3, #192	; 0xc0
 800301e:	029b      	lsls	r3, r3, #10
 8003020:	4013      	ands	r3, r2
 8003022:	22c0      	movs	r2, #192	; 0xc0
 8003024:	0292      	lsls	r2, r2, #10
 8003026:	4293      	cmp	r3, r2
 8003028:	d017      	beq.n	800305a <UART_SetConfig+0x122>
 800302a:	22c0      	movs	r2, #192	; 0xc0
 800302c:	0292      	lsls	r2, r2, #10
 800302e:	4293      	cmp	r3, r2
 8003030:	d822      	bhi.n	8003078 <UART_SetConfig+0x140>
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	0292      	lsls	r2, r2, #10
 8003036:	4293      	cmp	r3, r2
 8003038:	d019      	beq.n	800306e <UART_SetConfig+0x136>
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	0292      	lsls	r2, r2, #10
 800303e:	4293      	cmp	r3, r2
 8003040:	d81a      	bhi.n	8003078 <UART_SetConfig+0x140>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <UART_SetConfig+0x118>
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	0252      	lsls	r2, r2, #9
 800304a:	4293      	cmp	r3, r2
 800304c:	d00a      	beq.n	8003064 <UART_SetConfig+0x12c>
 800304e:	e013      	b.n	8003078 <UART_SetConfig+0x140>
 8003050:	231f      	movs	r3, #31
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e02b      	b.n	80030b2 <UART_SetConfig+0x17a>
 800305a:	231f      	movs	r3, #31
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	2202      	movs	r2, #2
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e026      	b.n	80030b2 <UART_SetConfig+0x17a>
 8003064:	231f      	movs	r3, #31
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2204      	movs	r2, #4
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e021      	b.n	80030b2 <UART_SetConfig+0x17a>
 800306e:	231f      	movs	r3, #31
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2208      	movs	r2, #8
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	e01c      	b.n	80030b2 <UART_SetConfig+0x17a>
 8003078:	231f      	movs	r3, #31
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2210      	movs	r2, #16
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e017      	b.n	80030b2 <UART_SetConfig+0x17a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6d      	ldr	r2, [pc, #436]	; (800323c <UART_SetConfig+0x304>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d104      	bne.n	8003096 <UART_SetConfig+0x15e>
 800308c:	231f      	movs	r3, #31
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e00d      	b.n	80030b2 <UART_SetConfig+0x17a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a69      	ldr	r2, [pc, #420]	; (8003240 <UART_SetConfig+0x308>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d104      	bne.n	80030aa <UART_SetConfig+0x172>
 80030a0:	231f      	movs	r3, #31
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e003      	b.n	80030b2 <UART_SetConfig+0x17a>
 80030aa:	231f      	movs	r3, #31
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	2210      	movs	r2, #16
 80030b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d15d      	bne.n	800317a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80030be:	231f      	movs	r3, #31
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d015      	beq.n	80030f4 <UART_SetConfig+0x1bc>
 80030c8:	dc18      	bgt.n	80030fc <UART_SetConfig+0x1c4>
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00d      	beq.n	80030ea <UART_SetConfig+0x1b2>
 80030ce:	dc15      	bgt.n	80030fc <UART_SetConfig+0x1c4>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <UART_SetConfig+0x1a2>
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d005      	beq.n	80030e4 <UART_SetConfig+0x1ac>
 80030d8:	e010      	b.n	80030fc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030da:	f7ff faab 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 80030de:	0003      	movs	r3, r0
 80030e0:	61bb      	str	r3, [r7, #24]
        break;
 80030e2:	e012      	b.n	800310a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e4:	4b57      	ldr	r3, [pc, #348]	; (8003244 <UART_SetConfig+0x30c>)
 80030e6:	61bb      	str	r3, [r7, #24]
        break;
 80030e8:	e00f      	b.n	800310a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ea:	f7ff fa17 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80030ee:	0003      	movs	r3, r0
 80030f0:	61bb      	str	r3, [r7, #24]
        break;
 80030f2:	e00a      	b.n	800310a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	61bb      	str	r3, [r7, #24]
        break;
 80030fa:	e006      	b.n	800310a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003100:	231e      	movs	r3, #30
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
        break;
 8003108:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d100      	bne.n	8003112 <UART_SetConfig+0x1da>
 8003110:	e07b      	b.n	800320a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	005a      	lsls	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	18d2      	adds	r2, r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f7fc ffef 	bl	8000108 <__udivsi3>
 800312a:	0003      	movs	r3, r0
 800312c:	b29b      	uxth	r3, r3
 800312e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b0f      	cmp	r3, #15
 8003134:	d91c      	bls.n	8003170 <UART_SetConfig+0x238>
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	025b      	lsls	r3, r3, #9
 800313c:	429a      	cmp	r2, r3
 800313e:	d217      	bcs.n	8003170 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	b29a      	uxth	r2, r3
 8003144:	200e      	movs	r0, #14
 8003146:	183b      	adds	r3, r7, r0
 8003148:	210f      	movs	r1, #15
 800314a:	438a      	bics	r2, r1
 800314c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	b29b      	uxth	r3, r3
 8003154:	2207      	movs	r2, #7
 8003156:	4013      	ands	r3, r2
 8003158:	b299      	uxth	r1, r3
 800315a:	183b      	adds	r3, r7, r0
 800315c:	183a      	adds	r2, r7, r0
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	183a      	adds	r2, r7, r0
 800316a:	8812      	ldrh	r2, [r2, #0]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	e04c      	b.n	800320a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003170:	231e      	movs	r3, #30
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e047      	b.n	800320a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800317a:	231f      	movs	r3, #31
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d015      	beq.n	80031b0 <UART_SetConfig+0x278>
 8003184:	dc18      	bgt.n	80031b8 <UART_SetConfig+0x280>
 8003186:	2b04      	cmp	r3, #4
 8003188:	d00d      	beq.n	80031a6 <UART_SetConfig+0x26e>
 800318a:	dc15      	bgt.n	80031b8 <UART_SetConfig+0x280>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <UART_SetConfig+0x25e>
 8003190:	2b02      	cmp	r3, #2
 8003192:	d005      	beq.n	80031a0 <UART_SetConfig+0x268>
 8003194:	e010      	b.n	80031b8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003196:	f7ff fa4d 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 800319a:	0003      	movs	r3, r0
 800319c:	61bb      	str	r3, [r7, #24]
        break;
 800319e:	e012      	b.n	80031c6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a0:	4b28      	ldr	r3, [pc, #160]	; (8003244 <UART_SetConfig+0x30c>)
 80031a2:	61bb      	str	r3, [r7, #24]
        break;
 80031a4:	e00f      	b.n	80031c6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a6:	f7ff f9b9 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80031aa:	0003      	movs	r3, r0
 80031ac:	61bb      	str	r3, [r7, #24]
        break;
 80031ae:	e00a      	b.n	80031c6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	61bb      	str	r3, [r7, #24]
        break;
 80031b6:	e006      	b.n	80031c6 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031bc:	231e      	movs	r3, #30
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
        break;
 80031c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01e      	beq.n	800320a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	085a      	lsrs	r2, r3, #1
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	18d2      	adds	r2, r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0019      	movs	r1, r3
 80031dc:	0010      	movs	r0, r2
 80031de:	f7fc ff93 	bl	8000108 <__udivsi3>
 80031e2:	0003      	movs	r3, r0
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	d909      	bls.n	8003202 <UART_SetConfig+0x2ca>
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d204      	bcs.n	8003202 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	e003      	b.n	800320a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003202:	231e      	movs	r3, #30
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003216:	231e      	movs	r3, #30
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b008      	add	sp, #32
 8003222:	bd80      	pop	{r7, pc}
 8003224:	efff69f3 	.word	0xefff69f3
 8003228:	ffffcfff 	.word	0xffffcfff
 800322c:	fffff4ff 	.word	0xfffff4ff
 8003230:	40013800 	.word	0x40013800
 8003234:	40021000 	.word	0x40021000
 8003238:	40004400 	.word	0x40004400
 800323c:	40004800 	.word	0x40004800
 8003240:	40004c00 	.word	0x40004c00
 8003244:	007a1200 	.word	0x007a1200

08003248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2201      	movs	r2, #1
 8003256:	4013      	ands	r3, r2
 8003258:	d00b      	beq.n	8003272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a4a      	ldr	r2, [pc, #296]	; (800338c <UART_AdvFeatureConfig+0x144>)
 8003262:	4013      	ands	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2202      	movs	r2, #2
 8003278:	4013      	ands	r3, r2
 800327a:	d00b      	beq.n	8003294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a43      	ldr	r2, [pc, #268]	; (8003390 <UART_AdvFeatureConfig+0x148>)
 8003284:	4013      	ands	r3, r2
 8003286:	0019      	movs	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2204      	movs	r2, #4
 800329a:	4013      	ands	r3, r2
 800329c:	d00b      	beq.n	80032b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a3b      	ldr	r2, [pc, #236]	; (8003394 <UART_AdvFeatureConfig+0x14c>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2208      	movs	r2, #8
 80032bc:	4013      	ands	r3, r2
 80032be:	d00b      	beq.n	80032d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a34      	ldr	r2, [pc, #208]	; (8003398 <UART_AdvFeatureConfig+0x150>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	2210      	movs	r2, #16
 80032de:	4013      	ands	r3, r2
 80032e0:	d00b      	beq.n	80032fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	; (800339c <UART_AdvFeatureConfig+0x154>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2220      	movs	r2, #32
 8003300:	4013      	ands	r3, r2
 8003302:	d00b      	beq.n	800331c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <UART_AdvFeatureConfig+0x158>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	4013      	ands	r3, r2
 8003324:	d01d      	beq.n	8003362 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <UART_AdvFeatureConfig+0x15c>)
 800332e:	4013      	ands	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	035b      	lsls	r3, r3, #13
 8003346:	429a      	cmp	r2, r3
 8003348:	d10b      	bne.n	8003362 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <UART_AdvFeatureConfig+0x160>)
 8003352:	4013      	ands	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	4013      	ands	r3, r2
 800336a:	d00b      	beq.n	8003384 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <UART_AdvFeatureConfig+0x164>)
 8003374:	4013      	ands	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]
  }
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}
 800338c:	fffdffff 	.word	0xfffdffff
 8003390:	fffeffff 	.word	0xfffeffff
 8003394:	fffbffff 	.word	0xfffbffff
 8003398:	ffff7fff 	.word	0xffff7fff
 800339c:	ffffefff 	.word	0xffffefff
 80033a0:	ffffdfff 	.word	0xffffdfff
 80033a4:	ffefffff 	.word	0xffefffff
 80033a8:	ff9fffff 	.word	0xff9fffff
 80033ac:	fff7ffff 	.word	0xfff7ffff

080033b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	2100      	movs	r1, #0
 80033be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033c0:	f7fd fb46 	bl	8000a50 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2208      	movs	r2, #8
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d10c      	bne.n	80033f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	0391      	lsls	r1, r2, #14
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <UART_CheckIdleState+0x8c>)
 80033e0:	9200      	str	r2, [sp, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f000 f82c 	bl	8003440 <UART_WaitOnFlagUntilTimeout>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d001      	beq.n	80033f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e021      	b.n	8003434 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2204      	movs	r2, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d10c      	bne.n	8003418 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	03d1      	lsls	r1, r2, #15
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4a0d      	ldr	r2, [pc, #52]	; (800343c <UART_CheckIdleState+0x8c>)
 8003408:	9200      	str	r2, [sp, #0]
 800340a:	2200      	movs	r2, #0
 800340c:	f000 f818 	bl	8003440 <UART_WaitOnFlagUntilTimeout>
 8003410:	1e03      	subs	r3, r0, #0
 8003412:	d001      	beq.n	8003418 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e00d      	b.n	8003434 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2274      	movs	r2, #116	; 0x74
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}
 800343c:	01ffffff 	.word	0x01ffffff

08003440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b094      	sub	sp, #80	; 0x50
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003450:	e0a3      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003454:	3301      	adds	r3, #1
 8003456:	d100      	bne.n	800345a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003458:	e09f      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345a:	f7fd faf9 	bl	8000a50 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003466:	429a      	cmp	r2, r3
 8003468:	d302      	bcc.n	8003470 <UART_WaitOnFlagUntilTimeout+0x30>
 800346a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800346c:	2b00      	cmp	r3, #0
 800346e:	d13d      	bne.n	80034ec <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003470:	f3ef 8310 	mrs	r3, PRIMASK
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
 800347a:	2301      	movs	r3, #1
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	494c      	ldr	r1, [pc, #304]	; (80035c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003492:	400a      	ands	r2, r1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a2:	f3ef 8310 	mrs	r3, PRIMASK
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80034a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40
 80034ac:	2301      	movs	r3, #1
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	f383 8810 	msr	PRIMASK, r3
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	438a      	bics	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ce:	f383 8810 	msr	PRIMASK, r3
}
 80034d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2274      	movs	r2, #116	; 0x74
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e067      	b.n	80035bc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2204      	movs	r2, #4
 80034f4:	4013      	ands	r3, r2
 80034f6:	d050      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	401a      	ands	r2, r3
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	429a      	cmp	r2, r3
 800350a:	d146      	bne.n	800359a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003516:	f3ef 8310 	mrs	r3, PRIMASK
 800351a:	613b      	str	r3, [r7, #16]
  return(result);
 800351c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003520:	2301      	movs	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4923      	ldr	r1, [pc, #140]	; (80035c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003538:	400a      	ands	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003548:	f3ef 8310 	mrs	r3, PRIMASK
 800354c:	61fb      	str	r3, [r7, #28]
  return(result);
 800354e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003550:	64bb      	str	r3, [r7, #72]	; 0x48
 8003552:	2301      	movs	r3, #1
 8003554:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f383 8810 	msr	PRIMASK, r3
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	438a      	bics	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f383 8810 	msr	PRIMASK, r3
}
 8003578:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	2120      	movs	r1, #32
 800358c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2274      	movs	r2, #116	; 0x74
 8003592:	2100      	movs	r1, #0
 8003594:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e010      	b.n	80035bc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	425a      	negs	r2, r3
 80035aa:	4153      	adcs	r3, r2
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	001a      	movs	r2, r3
 80035b0:	1dfb      	adds	r3, r7, #7
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d100      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0x17a>
 80035b8:	e74b      	b.n	8003452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b014      	add	sp, #80	; 0x50
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	fffffe5f 	.word	0xfffffe5f

080035c8 <__libc_init_array>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	2600      	movs	r6, #0
 80035cc:	4d0c      	ldr	r5, [pc, #48]	; (8003600 <__libc_init_array+0x38>)
 80035ce:	4c0d      	ldr	r4, [pc, #52]	; (8003604 <__libc_init_array+0x3c>)
 80035d0:	1b64      	subs	r4, r4, r5
 80035d2:	10a4      	asrs	r4, r4, #2
 80035d4:	42a6      	cmp	r6, r4
 80035d6:	d109      	bne.n	80035ec <__libc_init_array+0x24>
 80035d8:	2600      	movs	r6, #0
 80035da:	f000 f821 	bl	8003620 <_init>
 80035de:	4d0a      	ldr	r5, [pc, #40]	; (8003608 <__libc_init_array+0x40>)
 80035e0:	4c0a      	ldr	r4, [pc, #40]	; (800360c <__libc_init_array+0x44>)
 80035e2:	1b64      	subs	r4, r4, r5
 80035e4:	10a4      	asrs	r4, r4, #2
 80035e6:	42a6      	cmp	r6, r4
 80035e8:	d105      	bne.n	80035f6 <__libc_init_array+0x2e>
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	00b3      	lsls	r3, r6, #2
 80035ee:	58eb      	ldr	r3, [r5, r3]
 80035f0:	4798      	blx	r3
 80035f2:	3601      	adds	r6, #1
 80035f4:	e7ee      	b.n	80035d4 <__libc_init_array+0xc>
 80035f6:	00b3      	lsls	r3, r6, #2
 80035f8:	58eb      	ldr	r3, [r5, r3]
 80035fa:	4798      	blx	r3
 80035fc:	3601      	adds	r6, #1
 80035fe:	e7f2      	b.n	80035e6 <__libc_init_array+0x1e>
 8003600:	08003674 	.word	0x08003674
 8003604:	08003674 	.word	0x08003674
 8003608:	08003674 	.word	0x08003674
 800360c:	08003678 	.word	0x08003678

08003610 <memset>:
 8003610:	0003      	movs	r3, r0
 8003612:	1882      	adds	r2, r0, r2
 8003614:	4293      	cmp	r3, r2
 8003616:	d100      	bne.n	800361a <memset+0xa>
 8003618:	4770      	bx	lr
 800361a:	7019      	strb	r1, [r3, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	e7f9      	b.n	8003614 <memset+0x4>

08003620 <_init>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr

0800362c <_fini>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003632:	bc08      	pop	{r3}
 8003634:	469e      	mov	lr, r3
 8003636:	4770      	bx	lr
