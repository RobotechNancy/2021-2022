
STM32_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e4  080039e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080039e4  080039e4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039e4  080039e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080039ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  080039fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080039fc  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc6a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b69  00000000  00000000  0002bca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b9d  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbb1  00000000  00000000  000487c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e1f  00000000  00000000  00054376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb195  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  000eb1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800399c 	.word	0x0800399c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800399c 	.word	0x0800399c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CAN_Config>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */

void CAN_Config(CAN_HandleTypeDef hcan, int adresse) {
 8000220:	b084      	sub	sp, #16
 8000222:	b5b0      	push	{r4, r5, r7, lr}
 8000224:	b08a      	sub	sp, #40	; 0x28
 8000226:	af00      	add	r7, sp, #0
 8000228:	2538      	movs	r5, #56	; 0x38
 800022a:	197c      	adds	r4, r7, r5
 800022c:	6020      	str	r0, [r4, #0]
 800022e:	6061      	str	r1, [r4, #4]
 8000230:	60a2      	str	r2, [r4, #8]
 8000232:	60e3      	str	r3, [r4, #12]
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000234:	003b      	movs	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 800023a:	003b      	movs	r3, r7
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 8000240:	003b      	movs	r3, r7
 8000242:	2201      	movs	r2, #1
 8000244:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = adresse << 5; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000248:	015b      	lsls	r3, r3, #5
 800024a:	001a      	movs	r2, r3
 800024c:	003b      	movs	r3, r7
 800024e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0; //
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFF << 5; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000256:	003b      	movs	r3, r7
 8000258:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <CAN_Config+0x94>)
 800025a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800025c:	003b      	movs	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000262:	003b      	movs	r3, r7
 8000264:	2200      	movs	r2, #0
 8000266:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000268:	003b      	movs	r3, r7
 800026a:	2201      	movs	r2, #1
 800026c:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800026e:	003b      	movs	r3, r7
 8000270:	220e      	movs	r2, #14
 8000272:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000274:	003a      	movs	r2, r7
 8000276:	197b      	adds	r3, r7, r5
 8000278:	0011      	movs	r1, r2
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fd5a 	bl	8000d34 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 8000280:	197b      	adds	r3, r7, r5
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fe48 	bl	8000f18 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000288:	197b      	adds	r3, r7, r5
 800028a:	2102      	movs	r1, #2
 800028c:	0018      	movs	r0, r3
 800028e:	f001 f883 	bl	8001398 <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <CAN_Config+0x98>)
 8000294:	197a      	adds	r2, r7, r5
 8000296:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000298:	c313      	stmia	r3!, {r0, r1, r4}
 800029a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029c:	c313      	stmia	r3!, {r0, r1, r4}
 800029e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002a0:	c313      	stmia	r3!, {r0, r1, r4}
 80002a2:	6812      	ldr	r2, [r2, #0]
 80002a4:	601a      	str	r2, [r3, #0]
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)

}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	b00a      	add	sp, #40	; 0x28
 80002ac:	bcb0      	pop	{r4, r5, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	b004      	add	sp, #16
 80002b2:	4718      	bx	r3
 80002b4:	0001ffe0 	.word	0x0001ffe0
 80002b8:	2000002c 	.word	0x2000002c

080002bc <send_one>:

int send_one(int adr, uint8_t data){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	000a      	movs	r2, r1
 80002c6:	1cfb      	adds	r3, r7, #3
 80002c8:	701a      	strb	r2, [r3, #0]

	uint8_t msg[1] = {data};
 80002ca:	210c      	movs	r1, #12
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	1cfa      	adds	r2, r7, #3
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	701a      	strb	r2, [r3, #0]
	return send_can(adr, msg ,1);
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 f806 	bl	80002ec <send_can>
 80002e0:	0003      	movs	r3, r0
}
 80002e2:	0018      	movs	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b004      	add	sp, #16
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <send_can>:

int send_can(int adr, uint8_t msg[], int msg_size){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08c      	sub	sp, #48	; 0x30
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = msg_size; // taille des données à transmettre en octets
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	2118      	movs	r1, #24
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	611a      	str	r2, [r3, #16]
	txHeader.StdId = adr; //adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	187b      	adds	r3, r7, r1
 8000304:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_STD; //on choisit l'adressage standard
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	751a      	strb	r2, [r3, #20]

	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, msg, &TxMailbox);
 8000318:	2314      	movs	r3, #20
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	1879      	adds	r1, r7, r1
 8000320:	4803      	ldr	r0, [pc, #12]	; (8000330 <send_can+0x44>)
 8000322:	f000 fe3f 	bl	8000fa4 <HAL_CAN_AddTxMessage>
	return 0;
 8000326:	2300      	movs	r3, #0
}
 8000328:	0018      	movs	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	b00c      	add	sp, #48	; 0x30
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000002c 	.word	0x2000002c

08000334 <HAL_TIM_OC_DelayElapsedCallback>:
static void MX_CAN_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	int repetition=0;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
	if(repetition++>target){
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	60fa      	str	r2, [r7, #12]
 8000346:	4a06      	ldr	r2, [pc, #24]	; (8000360 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	4293      	cmp	r3, r2
 800034c:	dd04      	ble.n	8000358 <HAL_TIM_OC_DelayElapsedCallback+0x24>
		HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_3);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2108      	movs	r1, #8
 8000352:	0018      	movs	r0, r3
 8000354:	f002 fb5c 	bl	8002a10 <HAL_TIM_PWM_Stop_IT>
	}
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b004      	add	sp, #16
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000000 	.word	0x20000000

08000364 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//fct interrupt (qd stm reçoit msg)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	//HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
	// Traitement des données
	uint8_t RxData[8];
	//réception du message
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800036c:	2408      	movs	r4, #8
 800036e:	193b      	adds	r3, r7, r4
 8000370:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	2100      	movs	r1, #0
 8000376:	f000 fef3 	bl	8001160 <HAL_CAN_GetRxMessage>

	send_one(0x324, 00);
 800037a:	23c9      	movs	r3, #201	; 0xc9
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	2100      	movs	r1, #0
 8000380:	0018      	movs	r0, r3
 8000382:	f7ff ff9b 	bl	80002bc <send_one>

	//send_one(0x324, FF);
	stop(RxData[0]);
 8000386:	193b      	adds	r3, r7, r4
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	0018      	movs	r0, r3
 800038c:	f000 f9e8 	bl	8000760 <stop>
	change_dir(RxData[1]);
 8000390:	193b      	adds	r3, r7, r4
 8000392:	785b      	ldrb	r3, [r3, #1]
 8000394:	0018      	movs	r0, r3
 8000396:	f000 f9fb 	bl	8000790 <change_dir>
	change_step(RxData[2]);
 800039a:	193b      	adds	r3, r7, r4
 800039c:	789b      	ldrb	r3, [r3, #2]
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 fa16 	bl	80007d0 <change_step>
	//target = RxData[2];
	//cnt=0;

	send_one(0x324, TIM1->ARR);
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80003a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	23c9      	movs	r3, #201	; 0xc9
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	0011      	movs	r1, r2
 80003b0:	0018      	movs	r0, r3
 80003b2:	f7ff ff83 	bl	80002bc <send_one>
	//send_one(0x324, target);
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b005      	add	sp, #20
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	200000f4 	.word	0x200000f4
 80003cc:	40012c00 	.word	0x40012c00
 80003d0:	20000088 	.word	0x20000088

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b5b0      	push	{r4, r5, r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003da:	f000 fb49 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003de:	f000 f833 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e2:	f000 f96d 	bl	80006c0 <MX_GPIO_Init>
  MX_CAN_Init();
 80003e6:	f000 f87b 	bl	80004e0 <MX_CAN_Init>
  MX_TIM1_Init();
 80003ea:	f000 f8b1 	bl	8000550 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	CAN_Config(hcan, 0x325);
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <main+0x6c>)
 80003f0:	4a14      	ldr	r2, [pc, #80]	; (8000444 <main+0x70>)
 80003f2:	9206      	str	r2, [sp, #24]
 80003f4:	466a      	mov	r2, sp
 80003f6:	0011      	movs	r1, r2
 80003f8:	001a      	movs	r2, r3
 80003fa:	3210      	adds	r2, #16
 80003fc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80003fe:	c131      	stmia	r1!, {r0, r4, r5}
 8000400:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000402:	c131      	stmia	r1!, {r0, r4, r5}
 8000404:	6818      	ldr	r0, [r3, #0]
 8000406:	6859      	ldr	r1, [r3, #4]
 8000408:	689a      	ldr	r2, [r3, #8]
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	f7ff ff08 	bl	8000220 <CAN_Config>

	//start timer



	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000410:	2390      	movs	r3, #144	; 0x90
 8000412:	05db      	lsls	r3, r3, #23
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fc51 	bl	8001cc0 <HAL_GPIO_WritePin>
	//Driver 1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	0099      	lsls	r1, r3, #2
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2200      	movs	r2, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fc49 	bl	8001cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800042e:	2380      	movs	r3, #128	; 0x80
 8000430:	00d9      	lsls	r1, r3, #3
 8000432:	2390      	movs	r3, #144	; 0x90
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2200      	movs	r2, #0
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fc41 	bl	8001cc0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 800043e:	e7fe      	b.n	800043e <main+0x6a>
 8000440:	20000054 	.word	0x20000054
 8000444:	00000325 	.word	0x00000325

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	; 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2414      	movs	r4, #20
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2334      	movs	r3, #52	; 0x34
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f003 fa97 	bl	800398c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f003 fa90 	bl	800398c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046c:	0021      	movs	r1, r4
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2202      	movs	r2, #2
 8000472:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2201      	movs	r2, #1
 8000478:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2210      	movs	r2, #16
 800047e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2202      	movs	r2, #2
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2280      	movs	r2, #128	; 0x80
 800048a:	0212      	lsls	r2, r2, #8
 800048c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	0352      	lsls	r2, r2, #13
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	187b      	adds	r3, r7, r1
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 fc2c 	bl	8001cfc <HAL_RCC_OscConfig>
 80004a4:	1e03      	subs	r3, r0, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x64>
  {
    Error_Handler();
 80004a8:	f000 f954 	bl	8000754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2207      	movs	r2, #7
 80004b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2202      	movs	r2, #2
 80004b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2101      	movs	r1, #1
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 ff9d 	bl	8002408 <HAL_RCC_ClockConfig>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004d2:	f000 f93f 	bl	8000754 <Error_Handler>
  }
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b013      	add	sp, #76	; 0x4c
 80004dc:	bd90      	pop	{r4, r7, pc}
	...

080004e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_CAN_Init+0x68>)
 80004e6:	4a19      	ldr	r2, [pc, #100]	; (800054c <MX_CAN_Init+0x6c>)
 80004e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_CAN_Init+0x68>)
 80004ec:	220c      	movs	r2, #12
 80004ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_CAN_Init+0x68>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <MX_CAN_Init+0x68>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_CAN_Init+0x68>)
 80004fe:	22e0      	movs	r2, #224	; 0xe0
 8000500:	02d2      	lsls	r2, r2, #11
 8000502:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <MX_CAN_Init+0x68>)
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	0352      	lsls	r2, r2, #13
 800050a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_CAN_Init+0x68>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MX_CAN_Init+0x68>)
 8000514:	2200      	movs	r2, #0
 8000516:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_CAN_Init+0x68>)
 800051a:	2200      	movs	r2, #0
 800051c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MX_CAN_Init+0x68>)
 8000520:	2200      	movs	r2, #0
 8000522:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_CAN_Init+0x68>)
 8000526:	2200      	movs	r2, #0
 8000528:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <MX_CAN_Init+0x68>)
 800052c:	2200      	movs	r2, #0
 800052e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MX_CAN_Init+0x68>)
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fb00 	bl	8000b38 <HAL_CAN_Init>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800053c:	f000 f90a 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	20000054 	.word	0x20000054
 800054c:	40006400 	.word	0x40006400

08000550 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	; 0x58
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000556:	2348      	movs	r3, #72	; 0x48
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	0018      	movs	r0, r3
 800055c:	2310      	movs	r3, #16
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f003 fa13 	bl	800398c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000566:	2340      	movs	r3, #64	; 0x40
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	0018      	movs	r0, r3
 800056c:	2308      	movs	r3, #8
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f003 fa0b 	bl	800398c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000576:	2324      	movs	r3, #36	; 0x24
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	0018      	movs	r0, r3
 800057c:	231c      	movs	r3, #28
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f003 fa03 	bl	800398c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	0018      	movs	r0, r3
 800058a:	2320      	movs	r3, #32
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f003 f9fc 	bl	800398c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000594:	4b46      	ldr	r3, [pc, #280]	; (80006b0 <MX_TIM1_Init+0x160>)
 8000596:	4a47      	ldr	r2, [pc, #284]	; (80006b4 <MX_TIM1_Init+0x164>)
 8000598:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 800059a:	4b45      	ldr	r3, [pc, #276]	; (80006b0 <MX_TIM1_Init+0x160>)
 800059c:	4a46      	ldr	r2, [pc, #280]	; (80006b8 <MX_TIM1_Init+0x168>)
 800059e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a0:	4b43      	ldr	r3, [pc, #268]	; (80006b0 <MX_TIM1_Init+0x160>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80005a6:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <MX_TIM1_Init+0x160>)
 80005a8:	4a44      	ldr	r2, [pc, #272]	; (80006bc <MX_TIM1_Init+0x16c>)
 80005aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ac:	4b40      	ldr	r3, [pc, #256]	; (80006b0 <MX_TIM1_Init+0x160>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005b2:	4b3f      	ldr	r3, [pc, #252]	; (80006b0 <MX_TIM1_Init+0x160>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b8:	4b3d      	ldr	r3, [pc, #244]	; (80006b0 <MX_TIM1_Init+0x160>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005be:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <MX_TIM1_Init+0x160>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 f87d 	bl	80026c0 <HAL_TIM_Base_Init>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80005ca:	f000 f8c3 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ce:	2148      	movs	r1, #72	; 0x48
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	0152      	lsls	r2, r2, #5
 80005d6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005d8:	187a      	adds	r2, r7, r1
 80005da:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <MX_TIM1_Init+0x160>)
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fcb6 	bl	8002f50 <HAL_TIM_ConfigClockSource>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005e8:	f000 f8b4 	bl	8000754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005ec:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <MX_TIM1_Init+0x160>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 f8b6 	bl	8002760 <HAL_TIM_PWM_Init>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005f8:	f000 f8ac 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800060a:	187a      	adds	r2, r7, r1
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_TIM1_Init+0x160>)
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f003 f8cb 	bl	80037ac <HAL_TIMEx_MasterConfigSynchronization>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800061a:	f000 f89b 	bl	8000754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061e:	2124      	movs	r1, #36	; 0x24
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2260      	movs	r2, #96	; 0x60
 8000624:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	220a      	movs	r2, #10
 800062a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800064a:	1879      	adds	r1, r7, r1
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_TIM1_Init+0x160>)
 800064e:	2208      	movs	r2, #8
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fbb7 	bl	8002dc4 <HAL_TIM_PWM_ConfigChannel>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800065a:	f000 f87b 	bl	8000754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	0192      	lsls	r2, r2, #6
 8000682:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_TIM1_Init+0x160>)
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f003 f8e9 	bl	8003868 <HAL_TIMEx_ConfigBreakDeadTime>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800069a:	f000 f85b 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <MX_TIM1_Init+0x160>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 f945 	bl	8000930 <HAL_TIM_MspPostInit>

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b016      	add	sp, #88	; 0x58
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	20000088 	.word	0x20000088
 80006b4:	40012c00 	.word	0x40012c00
 80006b8:	000012bf 	.word	0x000012bf
 80006bc:	0000270f 	.word	0x0000270f

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	240c      	movs	r4, #12
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2314      	movs	r3, #20
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f003 f95b 	bl	800398c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d6:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_GPIO_Init+0x90>)
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_GPIO_Init+0x90>)
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	03c9      	lsls	r1, r1, #15
 80006e0:	430a      	orrs	r2, r1
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_GPIO_Init+0x90>)
 80006e6:	695a      	ldr	r2, [r3, #20]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	03db      	lsls	r3, r3, #15
 80006ec:	4013      	ands	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_GPIO_Init+0x90>)
 80006f4:	695a      	ldr	r2, [r3, #20]
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_GPIO_Init+0x90>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	0289      	lsls	r1, r1, #10
 80006fc:	430a      	orrs	r2, r1
 80006fe:	615a      	str	r2, [r3, #20]
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_GPIO_Init+0x90>)
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	029b      	lsls	r3, r3, #10
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 800070e:	2388      	movs	r3, #136	; 0x88
 8000710:	0099      	lsls	r1, r3, #2
 8000712:	2390      	movs	r3, #144	; 0x90
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	2200      	movs	r2, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fad1 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2288      	movs	r2, #136	; 0x88
 8000722:	0092      	lsls	r2, r2, #2
 8000724:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2201      	movs	r2, #1
 800072a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2201      	movs	r2, #1
 8000730:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	193a      	adds	r2, r7, r4
 800073a:	2390      	movs	r3, #144	; 0x90
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f945 	bl	80019d0 <HAL_GPIO_Init>

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40021000 	.word	0x40021000

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <stop>:
//extern int DC;
extern int target;
extern int cnt;


void stop(int s){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	if (s==1){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d105      	bne.n	800077a <stop+0x1a>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <stop+0x2c>)
 8000770:	2108      	movs	r1, #8
 8000772:	0018      	movs	r0, r3
 8000774:	f002 f84c 	bl	8002810 <HAL_TIM_PWM_Start_IT>
	}
	else{
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_3);
	}
}
 8000778:	e004      	b.n	8000784 <stop+0x24>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_3);
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <stop+0x2c>)
 800077c:	2108      	movs	r1, #8
 800077e:	0018      	movs	r0, r3
 8000780:	f002 f946 	bl	8002a10 <HAL_TIM_PWM_Stop_IT>
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000088 	.word	0x20000088

08000790 <change_dir>:


void change_dir(int dir){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	if (dir==0){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d108      	bne.n	80007b0 <change_dir+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	0099      	lsls	r1, r3, #2
 80007a2:	2390      	movs	r3, #144	; 0x90
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2200      	movs	r2, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fa89 	bl	8001cc0 <HAL_GPIO_WritePin>
	}
	else if (dir==1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
	}
}
 80007ae:	e00a      	b.n	80007c6 <change_dir+0x36>
	else if (dir==1){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d107      	bne.n	80007c6 <change_dir+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	0099      	lsls	r1, r3, #2
 80007ba:	2390      	movs	r3, #144	; 0x90
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	2201      	movs	r2, #1
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 fa7d 	bl	8001cc0 <HAL_GPIO_WritePin>
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <change_step>:

void change_step(int f){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	TIM1->ARR = f;
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <change_step+0x18>)
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40012c00 	.word	0x40012c00

080007ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	619a      	str	r2, [r3, #24]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	69da      	ldr	r2, [r3, #28]
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	0549      	lsls	r1, r1, #21
 8000814:	430a      	orrs	r2, r1
 8000816:	61da      	str	r2, [r3, #28]
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_MspInit+0x44>)
 800081a:	69da      	ldr	r2, [r3, #28]
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	055b      	lsls	r3, r3, #21
 8000820:	4013      	ands	r3, r2
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b08b      	sub	sp, #44	; 0x2c
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	2414      	movs	r4, #20
 800083e:	193b      	adds	r3, r7, r4
 8000840:	0018      	movs	r0, r3
 8000842:	2314      	movs	r3, #20
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f003 f8a0 	bl	800398c <memset>
  if(hcan->Instance==CAN)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <HAL_CAN_MspInit+0xa4>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d13b      	bne.n	80008ce <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <HAL_CAN_MspInit+0xa8>)
 8000858:	69da      	ldr	r2, [r3, #28]
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <HAL_CAN_MspInit+0xa8>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0489      	lsls	r1, r1, #18
 8000860:	430a      	orrs	r2, r1
 8000862:	61da      	str	r2, [r3, #28]
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <HAL_CAN_MspInit+0xa8>)
 8000866:	69da      	ldr	r2, [r3, #28]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	049b      	lsls	r3, r3, #18
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_CAN_MspInit+0xa8>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_CAN_MspInit+0xa8>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0289      	lsls	r1, r1, #10
 800087c:	430a      	orrs	r2, r1
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_CAN_MspInit+0xa8>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	029b      	lsls	r3, r3, #10
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	22c0      	movs	r2, #192	; 0xc0
 8000892:	0152      	lsls	r2, r2, #5
 8000894:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	0021      	movs	r1, r4
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2202      	movs	r2, #2
 800089c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2203      	movs	r2, #3
 80008a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2204      	movs	r2, #4
 80008ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	187a      	adds	r2, r7, r1
 80008b2:	2390      	movs	r3, #144	; 0x90
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 f889 	bl	80019d0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	201e      	movs	r0, #30
 80008c4:	f001 f852 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80008c8:	201e      	movs	r0, #30
 80008ca:	f001 f864 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b00b      	add	sp, #44	; 0x2c
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40006400 	.word	0x40006400
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_TIM_Base_MspInit+0x48>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d115      	bne.n	800091e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_TIM_Base_MspInit+0x4c>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_TIM_Base_MspInit+0x4c>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0109      	lsls	r1, r1, #4
 80008fc:	430a      	orrs	r2, r1
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_TIM_Base_MspInit+0x4c>)
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	200d      	movs	r0, #13
 8000914:	f001 f82a 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000918:	200d      	movs	r0, #13
 800091a:	f001 f83c 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b004      	add	sp, #16
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40012c00 	.word	0x40012c00
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	240c      	movs	r4, #12
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f003 f822 	bl	800398c <memset>
  if(htim->Instance==TIM1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_TIM_MspPostInit+0x78>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d125      	bne.n	800099e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_TIM_MspPostInit+0x7c>)
 8000954:	695a      	ldr	r2, [r3, #20]
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_TIM_MspPostInit+0x7c>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0289      	lsls	r1, r1, #10
 800095c:	430a      	orrs	r2, r1
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_TIM_MspPostInit+0x7c>)
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	029b      	lsls	r3, r3, #10
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	00d2      	lsls	r2, r2, #3
 8000974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	0021      	movs	r1, r4
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2202      	movs	r2, #2
 800097c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2202      	movs	r2, #2
 800098e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	187a      	adds	r2, r7, r1
 8000992:	2390      	movs	r3, #144	; 0x90
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f001 f819 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b009      	add	sp, #36	; 0x24
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40012c00 	.word	0x40012c00
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f894 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 f8d6 	bl	8002b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000088 	.word	0x20000088

080009f8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <CEC_CAN_IRQHandler+0x14>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fcf4 	bl	80013ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000054 	.word	0x20000054

08000a10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490e      	ldr	r1, [pc, #56]	; (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0b      	ldr	r4, [pc, #44]	; (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a46:	f7ff ffe3 	bl	8000a10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a4a:	f002 ff7b 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff fcc1 	bl	80003d4 <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   r0, =_estack
 8000a54:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a60:	080039ec 	.word	0x080039ec
  ldr r2, =_sbss
 8000a64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a68:	20000114 	.word	0x20000114

08000a6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_COMP_IRQHandler>
	...

08000a70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_Init+0x24>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_Init+0x24>)
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f809 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a86:	f7ff feb1 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_InitTick+0x5c>)
 8000aa2:	681c      	ldr	r4, [r3, #0]
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_InitTick+0x60>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	23fa      	movs	r3, #250	; 0xfa
 8000aac:	0098      	lsls	r0, r3, #2
 8000aae:	f7ff fb2b 	bl	8000108 <__udivsi3>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	f7ff fb26 	bl	8000108 <__udivsi3>
 8000abc:	0003      	movs	r3, r0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 ff79 	bl	80019b6 <HAL_SYSTICK_Config>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e00f      	b.n	8000aec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d80b      	bhi.n	8000aea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 ff46 	bl	800196c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_InitTick+0x64>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b003      	add	sp, #12
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	20000004 	.word	0x20000004
 8000af8:	2000000c 	.word	0x2000000c
 8000afc:	20000008 	.word	0x20000008

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	18d2      	adds	r2, r2, r3
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	2000000c 	.word	0x2000000c
 8000b20:	20000110 	.word	0x20000110

08000b24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000110 	.word	0x20000110

08000b38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e0f0      	b.n	8000d2c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	5c9b      	ldrb	r3, [r3, r2]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fe6b 	bl	8000834 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b6e:	f7ff ffd9 	bl	8000b24 <HAL_GetTick>
 8000b72:	0003      	movs	r3, r0
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b76:	e013      	b.n	8000ba0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b78:	f7ff ffd4 	bl	8000b24 <HAL_GetTick>
 8000b7c:	0002      	movs	r2, r0
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b0a      	cmp	r3, #10
 8000b84:	d90c      	bls.n	8000ba0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	0292      	lsls	r2, r2, #10
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2220      	movs	r2, #32
 8000b98:	2105      	movs	r1, #5
 8000b9a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e0c5      	b.n	8000d2c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d0e5      	beq.n	8000b78 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	438a      	bics	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bbc:	f7ff ffb2 	bl	8000b24 <HAL_GetTick>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bc4:	e013      	b.n	8000bee <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc6:	f7ff ffad 	bl	8000b24 <HAL_GetTick>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b0a      	cmp	r3, #10
 8000bd2:	d90c      	bls.n	8000bee <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	0292      	lsls	r2, r2, #10
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2220      	movs	r2, #32
 8000be6:	2105      	movs	r1, #5
 8000be8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e09e      	b.n	8000d2c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d1e5      	bne.n	8000bc6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7e1b      	ldrb	r3, [r3, #24]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d108      	bne.n	8000c14 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	438a      	bics	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7e5b      	ldrb	r3, [r3, #25]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d108      	bne.n	8000c3e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e007      	b.n	8000c4e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	438a      	bics	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7e9b      	ldrb	r3, [r3, #26]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d108      	bne.n	8000c68 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2120      	movs	r1, #32
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2120      	movs	r1, #32
 8000c74:	438a      	bics	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7edb      	ldrb	r3, [r3, #27]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d108      	bne.n	8000c92 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	e007      	b.n	8000ca2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7f1b      	ldrb	r3, [r3, #28]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d108      	bne.n	8000cbc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e007      	b.n	8000ccc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	438a      	bics	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7f5b      	ldrb	r3, [r3, #29]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d108      	bne.n	8000ce6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2104      	movs	r1, #4
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	e007      	b.n	8000cf6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2220      	movs	r2, #32
 8000d26:	2101      	movs	r1, #1
 8000d28:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b004      	add	sp, #16
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d44:	2013      	movs	r0, #19
 8000d46:	183b      	adds	r3, r7, r0
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	5c52      	ldrb	r2, [r2, r1]
 8000d4e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d50:	0002      	movs	r2, r0
 8000d52:	18bb      	adds	r3, r7, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d004      	beq.n	8000d64 <HAL_CAN_ConfigFilter+0x30>
 8000d5a:	18bb      	adds	r3, r7, r2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d000      	beq.n	8000d64 <HAL_CAN_ConfigFilter+0x30>
 8000d62:	e0cd      	b.n	8000f00 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	58d3      	ldr	r3, [r2, r3]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	0011      	movs	r1, r2
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	221f      	movs	r2, #31
 8000d80:	4013      	ands	r3, r2
 8000d82:	2201      	movs	r2, #1
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	2387      	movs	r3, #135	; 0x87
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	58d3      	ldr	r3, [r2, r3]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	401a      	ands	r2, r3
 8000d98:	0011      	movs	r1, r2
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	2387      	movs	r3, #135	; 0x87
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d129      	bne.n	8000dfe <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	2383      	movs	r3, #131	; 0x83
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	58d3      	ldr	r3, [r2, r3]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	401a      	ands	r2, r3
 8000db8:	0011      	movs	r1, r2
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	2383      	movs	r3, #131	; 0x83
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	041b      	lsls	r3, r3, #16
 8000dce:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dd4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3248      	adds	r2, #72	; 0x48
 8000dda:	00d2      	lsls	r2, r2, #3
 8000ddc:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000df0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000df2:	6979      	ldr	r1, [r7, #20]
 8000df4:	3348      	adds	r3, #72	; 0x48
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	18cb      	adds	r3, r1, r3
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d128      	bne.n	8000e58 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	2383      	movs	r3, #131	; 0x83
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	58d2      	ldr	r2, [r2, r3]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	0011      	movs	r1, r2
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	2383      	movs	r3, #131	; 0x83
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e2e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3248      	adds	r2, #72	; 0x48
 8000e34:	00d2      	lsls	r2, r2, #3
 8000e36:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	041b      	lsls	r3, r3, #16
 8000e44:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e4c:	6979      	ldr	r1, [r7, #20]
 8000e4e:	3348      	adds	r3, #72	; 0x48
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	18cb      	adds	r3, r1, r3
 8000e54:	3304      	adds	r3, #4
 8000e56:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10c      	bne.n	8000e7a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	2381      	movs	r3, #129	; 0x81
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	58d3      	ldr	r3, [r2, r3]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	43d2      	mvns	r2, r2
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	0011      	movs	r1, r2
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	2381      	movs	r3, #129	; 0x81
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	50d1      	str	r1, [r2, r3]
 8000e78:	e00a      	b.n	8000e90 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	2381      	movs	r3, #129	; 0x81
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	58d2      	ldr	r2, [r2, r3]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	0011      	movs	r1, r2
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	2381      	movs	r3, #129	; 0x81
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10c      	bne.n	8000eb2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	2385      	movs	r3, #133	; 0x85
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	58d3      	ldr	r3, [r2, r3]
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	43d2      	mvns	r2, r2
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	2385      	movs	r3, #133	; 0x85
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	50d1      	str	r1, [r2, r3]
 8000eb0:	e00a      	b.n	8000ec8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	2385      	movs	r3, #133	; 0x85
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	58d2      	ldr	r2, [r2, r3]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	2385      	movs	r3, #133	; 0x85
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d10a      	bne.n	8000ee6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	2387      	movs	r3, #135	; 0x87
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	58d2      	ldr	r2, [r2, r3]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	0011      	movs	r1, r2
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	2387      	movs	r3, #135	; 0x87
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	58d3      	ldr	r3, [r2, r3]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4393      	bics	r3, r2
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e007      	b.n	8000f10 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	02d2      	lsls	r2, r2, #11
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
  }
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b006      	add	sp, #24
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	5c9b      	ldrb	r3, [r3, r2]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d12f      	bne.n	8000f8c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	2102      	movs	r1, #2
 8000f32:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2101      	movs	r1, #1
 8000f40:	438a      	bics	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f44:	f7ff fdee 	bl	8000b24 <HAL_GetTick>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f4c:	e013      	b.n	8000f76 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f4e:	f7ff fde9 	bl	8000b24 <HAL_GetTick>
 8000f52:	0002      	movs	r2, r0
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b0a      	cmp	r3, #10
 8000f5a:	d90c      	bls.n	8000f76 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	0292      	lsls	r2, r2, #10
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2105      	movs	r1, #5
 8000f70:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e012      	b.n	8000f9c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d1e5      	bne.n	8000f4e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e007      	b.n	8000f9c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	0312      	lsls	r2, r2, #12
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
  }
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b004      	add	sp, #16
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb2:	201f      	movs	r0, #31
 8000fb4:	183b      	adds	r3, r7, r0
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	2120      	movs	r1, #32
 8000fba:	5c52      	ldrb	r2, [r2, r1]
 8000fbc:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc6:	183b      	adds	r3, r7, r0
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d004      	beq.n	8000fd8 <HAL_CAN_AddTxMessage+0x34>
 8000fce:	183b      	adds	r3, r7, r0
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d000      	beq.n	8000fd8 <HAL_CAN_AddTxMessage+0x34>
 8000fd6:	e0b7      	b.n	8001148 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	04db      	lsls	r3, r3, #19
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d10a      	bne.n	8000ff8 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	051b      	lsls	r3, r3, #20
 8000fe8:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fea:	d105      	bne.n	8000ff8 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	055b      	lsls	r3, r3, #21
 8000ff2:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ff4:	d100      	bne.n	8000ff8 <HAL_CAN_AddTxMessage+0x54>
 8000ff6:	e09e      	b.n	8001136 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	0e1b      	lsrs	r3, r3, #24
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	4013      	ands	r3, r2
 8001000:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d908      	bls.n	800101a <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0412      	lsls	r2, r2, #16
 8001010:	431a      	orrs	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e09e      	b.n	8001158 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800101a:	2201      	movs	r2, #1
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10c      	bne.n	8001046 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4311      	orrs	r1, r2
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	3218      	adds	r2, #24
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	50d1      	str	r1, [r2, r3]
 8001044:	e00f      	b.n	8001066 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001050:	431a      	orrs	r2, r3
 8001052:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 800105c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	3218      	adds	r2, #24
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3318      	adds	r3, #24
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	18cb      	adds	r3, r1, r3
 8001076:	3304      	adds	r3, #4
 8001078:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	7d1b      	ldrb	r3, [r3, #20]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d112      	bne.n	80010a8 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3318      	adds	r3, #24
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	3304      	adds	r3, #4
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6819      	ldr	r1, [r3, #0]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	431a      	orrs	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3318      	adds	r3, #24
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	18cb      	adds	r3, r1, r3
 80010a4:	3304      	adds	r3, #4
 80010a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3307      	adds	r3, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	061a      	lsls	r2, r3, #24
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3306      	adds	r3, #6
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3305      	adds	r3, #5
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3304      	adds	r3, #4
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0019      	movs	r1, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	6979      	ldr	r1, [r7, #20]
 80010d4:	23c6      	movs	r3, #198	; 0xc6
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	0109      	lsls	r1, r1, #4
 80010da:	1841      	adds	r1, r0, r1
 80010dc:	18cb      	adds	r3, r1, r3
 80010de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3303      	adds	r3, #3
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	061a      	lsls	r2, r3, #24
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3302      	adds	r3, #2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	041b      	lsls	r3, r3, #16
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3301      	adds	r3, #1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	0019      	movs	r1, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	6979      	ldr	r1, [r7, #20]
 800110a:	23c4      	movs	r3, #196	; 0xc4
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	0109      	lsls	r1, r1, #4
 8001110:	1841      	adds	r1, r0, r1
 8001112:	18cb      	adds	r3, r1, r3
 8001114:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	3218      	adds	r2, #24
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	58d2      	ldr	r2, [r2, r3]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2101      	movs	r1, #1
 8001128:	4311      	orrs	r1, r2
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	3218      	adds	r2, #24
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e010      	b.n	8001158 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	0392      	lsls	r2, r2, #14
 800113e:	431a      	orrs	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e007      	b.n	8001158 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	02d2      	lsls	r2, r2, #11
 8001150:	431a      	orrs	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
  }
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b008      	add	sp, #32
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800116e:	2017      	movs	r0, #23
 8001170:	183b      	adds	r3, r7, r0
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	2120      	movs	r1, #32
 8001176:	5c52      	ldrb	r2, [r2, r1]
 8001178:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800117a:	0002      	movs	r2, r0
 800117c:	18bb      	adds	r3, r7, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d004      	beq.n	800118e <HAL_CAN_GetRxMessage+0x2e>
 8001184:	18bb      	adds	r3, r7, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d000      	beq.n	800118e <HAL_CAN_GetRxMessage+0x2e>
 800118c:	e0f8      	b.n	8001380 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10e      	bne.n	80011b2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	d117      	bne.n	80011d0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	0392      	lsls	r2, r2, #14
 80011a8:	431a      	orrs	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0ee      	b.n	8001390 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2203      	movs	r2, #3
 80011ba:	4013      	ands	r3, r2
 80011bc:	d108      	bne.n	80011d0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	0392      	lsls	r2, r2, #14
 80011c6:	431a      	orrs	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0df      	b.n	8001390 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	321b      	adds	r2, #27
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	58d3      	ldr	r3, [r2, r3]
 80011dc:	2204      	movs	r2, #4
 80011de:	401a      	ands	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10b      	bne.n	8001204 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	321b      	adds	r2, #27
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	58d3      	ldr	r3, [r2, r3]
 80011f8:	0d5b      	lsrs	r3, r3, #21
 80011fa:	055b      	lsls	r3, r3, #21
 80011fc:	0d5a      	lsrs	r2, r3, #21
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e00a      	b.n	800121a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	321b      	adds	r2, #27
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	58d3      	ldr	r3, [r2, r3]
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	321b      	adds	r2, #27
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	58d3      	ldr	r3, [r2, r3]
 8001226:	2202      	movs	r2, #2
 8001228:	401a      	ands	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	331b      	adds	r3, #27
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	220f      	movs	r2, #15
 8001240:	401a      	ands	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	331b      	adds	r3, #27
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	18d3      	adds	r3, r2, r3
 8001252:	3304      	adds	r3, #4
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	22ff      	movs	r2, #255	; 0xff
 800125a:	401a      	ands	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	331b      	adds	r3, #27
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	18d3      	adds	r3, r2, r3
 800126c:	3304      	adds	r3, #4
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	041b      	lsls	r3, r3, #16
 8001274:	0c1a      	lsrs	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	23dc      	movs	r3, #220	; 0xdc
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	188a      	adds	r2, r1, r2
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6819      	ldr	r1, [r3, #0]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	23dc      	movs	r3, #220	; 0xdc
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	188a      	adds	r2, r1, r2
 80012a0:	18d3      	adds	r3, r2, r3
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0a1a      	lsrs	r2, r3, #8
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	23dc      	movs	r3, #220	; 0xdc
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	188a      	adds	r2, r1, r2
 80012bc:	18d3      	adds	r3, r2, r3
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0c1a      	lsrs	r2, r3, #16
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3302      	adds	r3, #2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	23dc      	movs	r3, #220	; 0xdc
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	188a      	adds	r2, r1, r2
 80012d8:	18d3      	adds	r3, r2, r3
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0e1a      	lsrs	r2, r3, #24
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3303      	adds	r3, #3
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6819      	ldr	r1, [r3, #0]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	23de      	movs	r3, #222	; 0xde
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	188a      	adds	r2, r1, r2
 80012f4:	18d3      	adds	r3, r2, r3
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	3304      	adds	r3, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	23de      	movs	r3, #222	; 0xde
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	188a      	adds	r2, r1, r2
 800130e:	18d3      	adds	r3, r2, r3
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0a1a      	lsrs	r2, r3, #8
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3305      	adds	r3, #5
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	23de      	movs	r3, #222	; 0xde
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	188a      	adds	r2, r1, r2
 800132a:	18d3      	adds	r3, r2, r3
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0c1a      	lsrs	r2, r3, #16
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3306      	adds	r3, #6
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	23de      	movs	r3, #222	; 0xde
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	188a      	adds	r2, r1, r2
 8001346:	18d3      	adds	r3, r2, r3
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	0e1a      	lsrs	r2, r3, #24
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3307      	adds	r3, #7
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2120      	movs	r1, #32
 8001366:	430a      	orrs	r2, r1
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	e007      	b.n	800137c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2120      	movs	r1, #32
 8001378:	430a      	orrs	r2, r1
 800137a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	e007      	b.n	8001390 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	02d2      	lsls	r2, r2, #11
 8001388:	431a      	orrs	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
  }
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b006      	add	sp, #24
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013a2:	200f      	movs	r0, #15
 80013a4:	183b      	adds	r3, r7, r0
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	2120      	movs	r1, #32
 80013aa:	5c52      	ldrb	r2, [r2, r1]
 80013ac:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ae:	0002      	movs	r2, r0
 80013b0:	18bb      	adds	r3, r7, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d003      	beq.n	80013c0 <HAL_CAN_ActivateNotification+0x28>
 80013b8:	18bb      	adds	r3, r7, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d109      	bne.n	80013d4 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6959      	ldr	r1, [r3, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	02d2      	lsls	r2, r2, #11
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
  }
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	2201      	movs	r2, #1
 800142c:	4013      	ands	r3, r2
 800142e:	d100      	bne.n	8001432 <HAL_CAN_IRQHandler+0x46>
 8001430:	e084      	b.n	800153c <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2201      	movs	r2, #1
 8001436:	4013      	ands	r3, r2
 8001438:	d024      	beq.n	8001484 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2201      	movs	r2, #1
 8001440:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	2202      	movs	r2, #2
 8001446:	4013      	ands	r3, r2
 8001448:	d004      	beq.n	8001454 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0018      	movs	r0, r3
 800144e:	f000 f981 	bl	8001754 <HAL_CAN_TxMailbox0CompleteCallback>
 8001452:	e017      	b.n	8001484 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2204      	movs	r2, #4
 8001458:	4013      	ands	r3, r2
 800145a:	d005      	beq.n	8001468 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	4313      	orrs	r3, r2
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	e00d      	b.n	8001484 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2208      	movs	r2, #8
 800146c:	4013      	ands	r3, r2
 800146e:	d005      	beq.n	800147c <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	0152      	lsls	r2, r2, #5
 8001476:	4313      	orrs	r3, r2
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
 800147a:	e003      	b.n	8001484 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f980 	bl	8001784 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4013      	ands	r3, r2
 800148c:	d028      	beq.n	80014e0 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	0052      	lsls	r2, r2, #1
 8001496:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4013      	ands	r3, r2
 80014a0:	d004      	beq.n	80014ac <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 f95d 	bl	8001764 <HAL_CAN_TxMailbox1CompleteCallback>
 80014aa:	e019      	b.n	80014e0 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4013      	ands	r3, r2
 80014b4:	d005      	beq.n	80014c2 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	0192      	lsls	r2, r2, #6
 80014bc:	4313      	orrs	r3, r2
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
 80014c0:	e00e      	b.n	80014e0 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4013      	ands	r3, r2
 80014ca:	d005      	beq.n	80014d8 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	01d2      	lsls	r2, r2, #7
 80014d2:	4313      	orrs	r3, r2
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
 80014d6:	e003      	b.n	80014e0 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0018      	movs	r0, r3
 80014dc:	f000 f95a 	bl	8001794 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4013      	ands	r3, r2
 80014e8:	d028      	beq.n	800153c <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	0252      	lsls	r2, r2, #9
 80014f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	029b      	lsls	r3, r3, #10
 80014fa:	4013      	ands	r3, r2
 80014fc:	d004      	beq.n	8001508 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0018      	movs	r0, r3
 8001502:	f000 f937 	bl	8001774 <HAL_CAN_TxMailbox2CompleteCallback>
 8001506:	e019      	b.n	800153c <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	02db      	lsls	r3, r3, #11
 800150e:	4013      	ands	r3, r2
 8001510:	d005      	beq.n	800151e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	0212      	lsls	r2, r2, #8
 8001518:	4313      	orrs	r3, r2
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
 800151c:	e00e      	b.n	800153c <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	031b      	lsls	r3, r3, #12
 8001524:	4013      	ands	r3, r2
 8001526:	d005      	beq.n	8001534 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0252      	lsls	r2, r2, #9
 800152e:	4313      	orrs	r3, r2
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
 8001532:	e003      	b.n	800153c <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f934 	bl	80017a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	2208      	movs	r2, #8
 8001540:	4013      	ands	r3, r2
 8001542:	d00c      	beq.n	800155e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2210      	movs	r2, #16
 8001548:	4013      	ands	r3, r2
 800154a:	d008      	beq.n	800155e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4313      	orrs	r3, r2
 8001554:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2210      	movs	r2, #16
 800155c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	2204      	movs	r2, #4
 8001562:	4013      	ands	r3, r2
 8001564:	d00b      	beq.n	800157e <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2208      	movs	r2, #8
 800156a:	4013      	ands	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2208      	movs	r2, #8
 8001574:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f000 f91b 	bl	80017b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d009      	beq.n	800159a <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2203      	movs	r2, #3
 800158e:	4013      	ands	r3, r2
 8001590:	d003      	beq.n	800159a <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7fe fee5 	bl	8000364 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	4013      	ands	r3, r2
 80015a0:	d00c      	beq.n	80015bc <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	2210      	movs	r2, #16
 80015a6:	4013      	ands	r3, r2
 80015a8:	d008      	beq.n	80015bc <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	00d2      	lsls	r2, r2, #3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2210      	movs	r2, #16
 80015ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	2220      	movs	r2, #32
 80015c0:	4013      	ands	r3, r2
 80015c2:	d00b      	beq.n	80015dc <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2208      	movs	r2, #8
 80015c8:	4013      	ands	r3, r2
 80015ca:	d007      	beq.n	80015dc <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2208      	movs	r2, #8
 80015d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 f8fc 	bl	80017d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	2210      	movs	r2, #16
 80015e0:	4013      	ands	r3, r2
 80015e2:	d009      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2203      	movs	r2, #3
 80015ec:	4013      	ands	r3, r2
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 f8e6 	bl	80017c4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	4013      	ands	r3, r2
 8001600:	d00b      	beq.n	800161a <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	2210      	movs	r2, #16
 8001606:	4013      	ands	r3, r2
 8001608:	d007      	beq.n	800161a <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2210      	movs	r2, #16
 8001610:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0018      	movs	r0, r3
 8001616:	f000 f8e5 	bl	80017e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800161a:	6a3a      	ldr	r2, [r7, #32]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	4013      	ands	r3, r2
 8001622:	d00b      	beq.n	800163c <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2208      	movs	r2, #8
 8001628:	4013      	ands	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2208      	movs	r2, #8
 8001632:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	0018      	movs	r0, r3
 8001638:	f000 f8dc 	bl	80017f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800163c:	6a3a      	ldr	r2, [r7, #32]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	4013      	ands	r3, r2
 8001644:	d100      	bne.n	8001648 <HAL_CAN_IRQHandler+0x25c>
 8001646:	e074      	b.n	8001732 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2204      	movs	r2, #4
 800164c:	4013      	ands	r3, r2
 800164e:	d100      	bne.n	8001652 <HAL_CAN_IRQHandler+0x266>
 8001650:	e06b      	b.n	800172a <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001652:	6a3a      	ldr	r2, [r7, #32]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4013      	ands	r3, r2
 800165a:	d007      	beq.n	800166c <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001662:	d003      	beq.n	800166c <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	2201      	movs	r2, #1
 8001668:	4313      	orrs	r3, r2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d007      	beq.n	8001686 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800167c:	d003      	beq.n	8001686 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	2202      	movs	r2, #2
 8001682:	4313      	orrs	r3, r2
 8001684:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001686:	6a3a      	ldr	r2, [r7, #32]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4013      	ands	r3, r2
 800168e:	d007      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2204      	movs	r2, #4
 8001694:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001696:	d003      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	2204      	movs	r2, #4
 800169c:	4313      	orrs	r3, r2
 800169e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016a0:	6a3a      	ldr	r2, [r7, #32]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	4013      	ands	r3, r2
 80016a8:	d03f      	beq.n	800172a <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2270      	movs	r2, #112	; 0x70
 80016ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016b0:	d03b      	beq.n	800172a <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2270      	movs	r2, #112	; 0x70
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b60      	cmp	r3, #96	; 0x60
 80016ba:	d027      	beq.n	800170c <HAL_CAN_IRQHandler+0x320>
 80016bc:	d82c      	bhi.n	8001718 <HAL_CAN_IRQHandler+0x32c>
 80016be:	2b50      	cmp	r3, #80	; 0x50
 80016c0:	d01f      	beq.n	8001702 <HAL_CAN_IRQHandler+0x316>
 80016c2:	d829      	bhi.n	8001718 <HAL_CAN_IRQHandler+0x32c>
 80016c4:	2b40      	cmp	r3, #64	; 0x40
 80016c6:	d017      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x30c>
 80016c8:	d826      	bhi.n	8001718 <HAL_CAN_IRQHandler+0x32c>
 80016ca:	2b30      	cmp	r3, #48	; 0x30
 80016cc:	d00f      	beq.n	80016ee <HAL_CAN_IRQHandler+0x302>
 80016ce:	d823      	bhi.n	8001718 <HAL_CAN_IRQHandler+0x32c>
 80016d0:	2b10      	cmp	r3, #16
 80016d2:	d002      	beq.n	80016da <HAL_CAN_IRQHandler+0x2ee>
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d005      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016d8:	e01e      	b.n	8001718 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	2208      	movs	r2, #8
 80016de:	4313      	orrs	r3, r2
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016e2:	e01a      	b.n	800171a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	2210      	movs	r2, #16
 80016e8:	4313      	orrs	r3, r2
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ec:	e015      	b.n	800171a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	2220      	movs	r2, #32
 80016f2:	4313      	orrs	r3, r2
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016f6:	e010      	b.n	800171a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	4313      	orrs	r3, r2
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001700:	e00b      	b.n	800171a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	4313      	orrs	r3, r2
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800170a:	e006      	b.n	800171a <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	0052      	lsls	r2, r2, #1
 8001712:	4313      	orrs	r3, r2
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001716:	e000      	b.n	800171a <HAL_CAN_IRQHandler+0x32e>
            break;
 8001718:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2170      	movs	r1, #112	; 0x70
 8001726:	438a      	bics	r2, r1
 8001728:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2204      	movs	r2, #4
 8001730:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	2b00      	cmp	r3, #0
 8001736:	d009      	beq.n	800174c <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f85c 	bl	8001804 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b00a      	add	sp, #40	; 0x28
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b002      	add	sp, #8
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	0002      	movs	r2, r0
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b7f      	cmp	r3, #127	; 0x7f
 8001826:	d809      	bhi.n	800183c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	231f      	movs	r3, #31
 8001830:	401a      	ands	r2, r3
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_EnableIRQ+0x30>)
 8001834:	2101      	movs	r1, #1
 8001836:	4091      	lsls	r1, r2
 8001838:	000a      	movs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
  }
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	0002      	movs	r2, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b7f      	cmp	r3, #127	; 0x7f
 800185c:	d828      	bhi.n	80018b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185e:	4a2f      	ldr	r2, [pc, #188]	; (800191c <__NVIC_SetPriority+0xd4>)
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	33c0      	adds	r3, #192	; 0xc0
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	589b      	ldr	r3, [r3, r2]
 800186e:	1dfa      	adds	r2, r7, #7
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	0011      	movs	r1, r2
 8001874:	2203      	movs	r2, #3
 8001876:	400a      	ands	r2, r1
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	21ff      	movs	r1, #255	; 0xff
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	43d2      	mvns	r2, r2
 8001882:	401a      	ands	r2, r3
 8001884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	401a      	ands	r2, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	2303      	movs	r3, #3
 8001896:	4003      	ands	r3, r0
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	481f      	ldr	r0, [pc, #124]	; (800191c <__NVIC_SetPriority+0xd4>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	430a      	orrs	r2, r1
 80018a8:	33c0      	adds	r3, #192	; 0xc0
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ae:	e031      	b.n	8001914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <__NVIC_SetPriority+0xd8>)
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0019      	movs	r1, r3
 80018b8:	230f      	movs	r3, #15
 80018ba:	400b      	ands	r3, r1
 80018bc:	3b08      	subs	r3, #8
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3306      	adds	r3, #6
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	3304      	adds	r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1dfa      	adds	r2, r7, #7
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	0011      	movs	r1, r2
 80018d0:	2203      	movs	r2, #3
 80018d2:	400a      	ands	r2, r1
 80018d4:	00d2      	lsls	r2, r2, #3
 80018d6:	21ff      	movs	r1, #255	; 0xff
 80018d8:	4091      	lsls	r1, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	43d2      	mvns	r2, r2
 80018de:	401a      	ands	r2, r3
 80018e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	401a      	ands	r2, r3
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	0018      	movs	r0, r3
 80018f0:	2303      	movs	r3, #3
 80018f2:	4003      	ands	r3, r0
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <__NVIC_SetPriority+0xd8>)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001c      	movs	r4, r3
 8001900:	230f      	movs	r3, #15
 8001902:	4023      	ands	r3, r4
 8001904:	3b08      	subs	r3, #8
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	430a      	orrs	r2, r1
 800190a:	3306      	adds	r3, #6
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	18c3      	adds	r3, r0, r3
 8001910:	3304      	adds	r3, #4
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b003      	add	sp, #12
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	045b      	lsls	r3, r3, #17
 8001934:	429a      	cmp	r2, r3
 8001936:	d301      	bcc.n	800193c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001938:	2301      	movs	r3, #1
 800193a:	e010      	b.n	800195e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <SysTick_Config+0x44>)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	3a01      	subs	r2, #1
 8001942:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001944:	2301      	movs	r3, #1
 8001946:	425b      	negs	r3, r3
 8001948:	2103      	movs	r1, #3
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff ff7c 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x44>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x44>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	210f      	movs	r1, #15
 8001978:	187b      	adds	r3, r7, r1
 800197a:	1c02      	adds	r2, r0, #0
 800197c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	187b      	adds	r3, r7, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b25b      	sxtb	r3, r3
 8001986:	0011      	movs	r1, r2
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	0002      	movs	r2, r0
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff ff33 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff ffaf 	bl	8001924 <SysTick_Config>
 80019c6:	0003      	movs	r3, r0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e155      	b.n	8001c8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4091      	lsls	r1, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d100      	bne.n	80019f8 <HAL_GPIO_Init+0x28>
 80019f6:	e146      	b.n	8001c86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2203      	movs	r2, #3
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d005      	beq.n	8001a10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d130      	bne.n	8001a72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	0013      	movs	r3, r2
 8001a20:	43da      	mvns	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	409a      	lsls	r2, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a46:	2201      	movs	r2, #1
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2203      	movs	r2, #3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d017      	beq.n	8001aae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d123      	bne.n	8001b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	58d3      	ldr	r3, [r2, r3]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2207      	movs	r2, #7
 8001acc:	4013      	ands	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2107      	movs	r1, #7
 8001ae6:	400b      	ands	r3, r1
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	409a      	lsls	r2, r3
 8001aec:	0013      	movs	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	6939      	ldr	r1, [r7, #16]
 8001b00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	0013      	movs	r3, r2
 8001b12:	43da      	mvns	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2203      	movs	r2, #3
 8001b20:	401a      	ands	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	23c0      	movs	r3, #192	; 0xc0
 8001b3c:	029b      	lsls	r3, r3, #10
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d100      	bne.n	8001b44 <HAL_GPIO_Init+0x174>
 8001b42:	e0a0      	b.n	8001c86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b44:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <HAL_GPIO_Init+0x2d4>)
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x2d4>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	619a      	str	r2, [r3, #24]
 8001b50:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <HAL_GPIO_Init+0x2d4>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x2d8>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	589b      	ldr	r3, [r3, r2]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	4013      	ands	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	409a      	lsls	r2, r3
 8001b76:	0013      	movs	r3, r2
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	2390      	movs	r3, #144	; 0x90
 8001b84:	05db      	lsls	r3, r3, #23
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_GPIO_Init+0x2dc>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x1ea>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a46      	ldr	r2, [pc, #280]	; (8001cb0 <HAL_GPIO_Init+0x2e0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x1e6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <HAL_GPIO_Init+0x2e4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x1e2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a44      	ldr	r2, [pc, #272]	; (8001cb8 <HAL_GPIO_Init+0x2e8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x1de>
 8001baa:	2304      	movs	r3, #4
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x1f0>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x1f0>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x1f0>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x1f0>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x1f0>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd0:	4935      	ldr	r1, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x2d8>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43da      	mvns	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43da      	mvns	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	4013      	ands	r3, r2
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	035b      	lsls	r3, r3, #13
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43da      	mvns	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	039b      	lsls	r3, r3, #14
 8001c74:	4013      	ands	r3, r2
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_GPIO_Init+0x2ec>)
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	40da      	lsrs	r2, r3
 8001c94:	1e13      	subs	r3, r2, #0
 8001c96:	d000      	beq.n	8001c9a <HAL_GPIO_Init+0x2ca>
 8001c98:	e6a2      	b.n	80019e0 <HAL_GPIO_Init+0x10>
  } 
}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b006      	add	sp, #24
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	48000c00 	.word	0x48000c00
 8001cb8:	48001000 	.word	0x48001000
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	0008      	movs	r0, r1
 8001cca:	0011      	movs	r1, r2
 8001ccc:	1cbb      	adds	r3, r7, #2
 8001cce:	1c02      	adds	r2, r0, #0
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	1c7b      	adds	r3, r7, #1
 8001cd4:	1c0a      	adds	r2, r1, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd8:	1c7b      	adds	r3, r7, #1
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ce0:	1cbb      	adds	r3, r7, #2
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce8:	e003      	b.n	8001cf2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cea:	1cbb      	adds	r3, r7, #2
 8001cec:	881a      	ldrh	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f000 fb76 	bl	80023fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	d100      	bne.n	8001d1c <HAL_RCC_OscConfig+0x20>
 8001d1a:	e08e      	b.n	8001e3a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d1c:	4bc5      	ldr	r3, [pc, #788]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	220c      	movs	r2, #12
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d00e      	beq.n	8001d46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d28:	4bc2      	ldr	r3, [pc, #776]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d117      	bne.n	8001d64 <HAL_RCC_OscConfig+0x68>
 8001d34:	4bbf      	ldr	r3, [pc, #764]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	23c0      	movs	r3, #192	; 0xc0
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d10e      	bne.n	8001d64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d46:	4bbb      	ldr	r3, [pc, #748]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d100      	bne.n	8001d54 <HAL_RCC_OscConfig+0x58>
 8001d52:	e071      	b.n	8001e38 <HAL_RCC_OscConfig+0x13c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d000      	beq.n	8001d5e <HAL_RCC_OscConfig+0x62>
 8001d5c:	e06c      	b.n	8001e38 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f000 fb4c 	bl	80023fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x80>
 8001d6c:	4bb1      	ldr	r3, [pc, #708]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4bb0      	ldr	r3, [pc, #704]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	0249      	lsls	r1, r1, #9
 8001d76:	430a      	orrs	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e02f      	b.n	8001ddc <HAL_RCC_OscConfig+0xe0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0xa2>
 8001d84:	4bab      	ldr	r3, [pc, #684]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4baa      	ldr	r3, [pc, #680]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d8a:	49ab      	ldr	r1, [pc, #684]	; (8002038 <HAL_RCC_OscConfig+0x33c>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	4ba8      	ldr	r3, [pc, #672]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4ba7      	ldr	r3, [pc, #668]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d96:	49a9      	ldr	r1, [pc, #676]	; (800203c <HAL_RCC_OscConfig+0x340>)
 8001d98:	400a      	ands	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e01e      	b.n	8001ddc <HAL_RCC_OscConfig+0xe0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d10e      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xc8>
 8001da6:	4ba3      	ldr	r3, [pc, #652]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4ba2      	ldr	r3, [pc, #648]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	02c9      	lsls	r1, r1, #11
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	4b9f      	ldr	r3, [pc, #636]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b9e      	ldr	r3, [pc, #632]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	0249      	lsls	r1, r1, #9
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xe0>
 8001dc4:	4b9b      	ldr	r3, [pc, #620]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b9a      	ldr	r3, [pc, #616]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dca:	499b      	ldr	r1, [pc, #620]	; (8002038 <HAL_RCC_OscConfig+0x33c>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	4b98      	ldr	r3, [pc, #608]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b97      	ldr	r3, [pc, #604]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dd6:	4999      	ldr	r1, [pc, #612]	; (800203c <HAL_RCC_OscConfig+0x340>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d014      	beq.n	8001e0e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe fe9e 	bl	8000b24 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dee:	f7fe fe99 	bl	8000b24 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e2fd      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e00:	4b8c      	ldr	r3, [pc, #560]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0xf2>
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe fe89 	bl	8000b24 <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e18:	f7fe fe84 	bl	8000b24 <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e2e8      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	4b82      	ldr	r3, [pc, #520]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	4013      	ands	r3, r2
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x11c>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCC_OscConfig+0x14a>
 8001e44:	e06c      	b.n	8001f20 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e46:	4b7b      	ldr	r3, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d00e      	beq.n	8001e6e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e50:	4b78      	ldr	r3, [pc, #480]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	220c      	movs	r2, #12
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d11f      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1a0>
 8001e5c:	4b75      	ldr	r3, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	401a      	ands	r2, r3
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b71      	ldr	r3, [pc, #452]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x188>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e2bb      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	22f8      	movs	r2, #248	; 0xf8
 8001e8a:	4393      	bics	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00da      	lsls	r2, r3, #3
 8001e94:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e041      	b.n	8001f20 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d024      	beq.n	8001eee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b62      	ldr	r3, [pc, #392]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fe38 	bl	8000b24 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eba:	f7fe fe33 	bl	8000b24 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e297      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d0f1      	beq.n	8001eba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	22f8      	movs	r2, #248	; 0xf8
 8001edc:	4393      	bics	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00da      	lsls	r2, r3, #3
 8001ee6:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e018      	b.n	8001f20 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b51      	ldr	r3, [pc, #324]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7fe fe13 	bl	8000b24 <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f04:	f7fe fe0e 	bl	8000b24 <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e272      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f1      	bne.n	8001f04 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2208      	movs	r2, #8
 8001f26:	4013      	ands	r3, r2
 8001f28:	d036      	beq.n	8001f98 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d019      	beq.n	8001f66 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f36:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f38:	2101      	movs	r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe fdf1 	bl	8000b24 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f48:	f7fe fdec 	bl	8000b24 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e250      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0f1      	beq.n	8001f48 <HAL_RCC_OscConfig+0x24c>
 8001f64:	e018      	b.n	8001f98 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	4b33      	ldr	r3, [pc, #204]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	438a      	bics	r2, r1
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7fe fdd7 	bl	8000b24 <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7fe fdd2 	bl	8000b24 <HAL_GetTick>
 8001f80:	0002      	movs	r2, r0
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e236      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8e:	4b29      	ldr	r3, [pc, #164]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d1f1      	bne.n	8001f7c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d100      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2a8>
 8001fa2:	e0b5      	b.n	8002110 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa4:	201f      	movs	r0, #31
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	055b      	lsls	r3, r3, #21
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d110      	bne.n	8001fda <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	0549      	lsls	r1, r1, #21
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	61da      	str	r2, [r3, #28]
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	055b      	lsls	r3, r3, #21
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fd4:	183b      	adds	r3, r7, r0
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_OscConfig+0x344>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d11a      	bne.n	800201c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_RCC_OscConfig+0x344>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_RCC_OscConfig+0x344>)
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	0049      	lsls	r1, r1, #1
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe fd96 	bl	8000b24 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7fe fd91 	bl	8000b24 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b64      	cmp	r3, #100	; 0x64
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1f5      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_OscConfig+0x344>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4013      	ands	r3, r2
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d10f      	bne.n	8002044 <HAL_RCC_OscConfig+0x348>
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_RCC_OscConfig+0x338>)
 800202a:	2101      	movs	r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	621a      	str	r2, [r3, #32]
 8002030:	e036      	b.n	80020a0 <HAL_RCC_OscConfig+0x3a4>
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	40021000 	.word	0x40021000
 8002038:	fffeffff 	.word	0xfffeffff
 800203c:	fffbffff 	.word	0xfffbffff
 8002040:	40007000 	.word	0x40007000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x36a>
 800204c:	4bca      	ldr	r3, [pc, #808]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	4bc9      	ldr	r3, [pc, #804]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002052:	2101      	movs	r1, #1
 8002054:	438a      	bics	r2, r1
 8002056:	621a      	str	r2, [r3, #32]
 8002058:	4bc7      	ldr	r3, [pc, #796]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	4bc6      	ldr	r3, [pc, #792]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800205e:	2104      	movs	r1, #4
 8002060:	438a      	bics	r2, r1
 8002062:	621a      	str	r2, [r3, #32]
 8002064:	e01c      	b.n	80020a0 <HAL_RCC_OscConfig+0x3a4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b05      	cmp	r3, #5
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x38c>
 800206e:	4bc2      	ldr	r3, [pc, #776]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	4bc1      	ldr	r3, [pc, #772]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002074:	2104      	movs	r1, #4
 8002076:	430a      	orrs	r2, r1
 8002078:	621a      	str	r2, [r3, #32]
 800207a:	4bbf      	ldr	r3, [pc, #764]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	4bbe      	ldr	r3, [pc, #760]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	621a      	str	r2, [r3, #32]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0x3a4>
 8002088:	4bbb      	ldr	r3, [pc, #748]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	4bba      	ldr	r3, [pc, #744]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800208e:	2101      	movs	r1, #1
 8002090:	438a      	bics	r2, r1
 8002092:	621a      	str	r2, [r3, #32]
 8002094:	4bb8      	ldr	r3, [pc, #736]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	4bb7      	ldr	r3, [pc, #732]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800209a:	2104      	movs	r1, #4
 800209c:	438a      	bics	r2, r1
 800209e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d014      	beq.n	80020d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fd3c 	bl	8000b24 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe fd37 	bl	8000b24 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4aaf      	ldr	r2, [pc, #700]	; (800237c <HAL_RCC_OscConfig+0x680>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e19a      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c6:	4bac      	ldr	r3, [pc, #688]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x3b6>
 80020d0:	e013      	b.n	80020fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fd27 	bl	8000b24 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	e009      	b.n	80020f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe fd22 	bl	8000b24 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	4aa5      	ldr	r2, [pc, #660]	; (800237c <HAL_RCC_OscConfig+0x680>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e185      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	4ba1      	ldr	r3, [pc, #644]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020fa:	231f      	movs	r3, #31
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4b9c      	ldr	r3, [pc, #624]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	4b9b      	ldr	r3, [pc, #620]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800210a:	499d      	ldr	r1, [pc, #628]	; (8002380 <HAL_RCC_OscConfig+0x684>)
 800210c:	400a      	ands	r2, r1
 800210e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2210      	movs	r2, #16
 8002116:	4013      	ands	r3, r2
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12a      	bne.n	8002178 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002122:	4b95      	ldr	r3, [pc, #596]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002126:	4b94      	ldr	r3, [pc, #592]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002128:	2104      	movs	r1, #4
 800212a:	430a      	orrs	r2, r1
 800212c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800212e:	4b92      	ldr	r3, [pc, #584]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002132:	4b91      	ldr	r3, [pc, #580]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002134:	2101      	movs	r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe fcf3 	bl	8000b24 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002144:	f7fe fcee 	bl	8000b24 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e152      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002156:	4b88      	ldr	r3, [pc, #544]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d0f1      	beq.n	8002144 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002160:	4b85      	ldr	r3, [pc, #532]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	22f8      	movs	r2, #248	; 0xf8
 8002166:	4393      	bics	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	00da      	lsls	r2, r3, #3
 8002170:	4b81      	ldr	r3, [pc, #516]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002172:	430a      	orrs	r2, r1
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
 8002176:	e034      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	3305      	adds	r3, #5
 800217e:	d111      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002180:	4b7d      	ldr	r3, [pc, #500]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002186:	2104      	movs	r1, #4
 8002188:	438a      	bics	r2, r1
 800218a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800218c:	4b7a      	ldr	r3, [pc, #488]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002190:	22f8      	movs	r2, #248	; 0xf8
 8002192:	4393      	bics	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	00da      	lsls	r2, r3, #3
 800219c:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
 80021a2:	e01e      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021a4:	4b74      	ldr	r3, [pc, #464]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a8:	4b73      	ldr	r3, [pc, #460]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	2104      	movs	r1, #4
 80021ac:	430a      	orrs	r2, r1
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80021b0:	4b71      	ldr	r3, [pc, #452]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b4:	4b70      	ldr	r3, [pc, #448]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021b6:	2101      	movs	r1, #1
 80021b8:	438a      	bics	r2, r1
 80021ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fcb2 	bl	8000b24 <HAL_GetTick>
 80021c0:	0003      	movs	r3, r0
 80021c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021c6:	f7fe fcad 	bl	8000b24 <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e111      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021d8:	4b67      	ldr	r3, [pc, #412]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	2202      	movs	r2, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	d1f1      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2220      	movs	r2, #32
 80021e8:	4013      	ands	r3, r2
 80021ea:	d05c      	beq.n	80022a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80021ec:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	220c      	movs	r2, #12
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b0c      	cmp	r3, #12
 80021f6:	d00e      	beq.n	8002216 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80021f8:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	220c      	movs	r2, #12
 80021fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002200:	2b08      	cmp	r3, #8
 8002202:	d114      	bne.n	800222e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002204:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	23c0      	movs	r3, #192	; 0xc0
 800220a:	025b      	lsls	r3, r3, #9
 800220c:	401a      	ands	r2, r3
 800220e:	23c0      	movs	r3, #192	; 0xc0
 8002210:	025b      	lsls	r3, r3, #9
 8002212:	429a      	cmp	r2, r3
 8002214:	d10b      	bne.n	800222e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002216:	4b58      	ldr	r3, [pc, #352]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	025b      	lsls	r3, r3, #9
 800221e:	4013      	ands	r3, r2
 8002220:	d040      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5a8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d03c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0e6      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01b      	beq.n	800226e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002236:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223a:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0249      	lsls	r1, r1, #9
 8002240:	430a      	orrs	r2, r1
 8002242:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe fc6e 	bl	8000b24 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800224e:	f7fe fc69 	bl	8000b24 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0cd      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002260:	4b45      	ldr	r3, [pc, #276]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	4013      	ands	r3, r2
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x552>
 800226c:	e01b      	b.n	80022a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800226e:	4b42      	ldr	r3, [pc, #264]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002274:	4943      	ldr	r1, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x688>)
 8002276:	400a      	ands	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fc53 	bl	8000b24 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002284:	f7fe fc4e 	bl	8000b24 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0b2      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	025b      	lsls	r3, r3, #9
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x588>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80022a4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d100      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5b4>
 80022ae:	e0a4      	b.n	80023fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b0:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	220c      	movs	r2, #12
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d100      	bne.n	80022be <HAL_RCC_OscConfig+0x5c2>
 80022bc:	e078      	b.n	80023b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d14c      	bne.n	8002360 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022cc:	492e      	ldr	r1, [pc, #184]	; (8002388 <HAL_RCC_OscConfig+0x68c>)
 80022ce:	400a      	ands	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7fe fc27 	bl	8000b24 <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fc22 	bl	8000b24 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e086      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	049b      	lsls	r3, r3, #18
 80022f6:	4013      	ands	r3, r2
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	220f      	movs	r2, #15
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800230a:	430a      	orrs	r2, r1
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_RCC_OscConfig+0x690>)
 8002314:	4013      	ands	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	431a      	orrs	r2, r3
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002324:	430a      	orrs	r2, r1
 8002326:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0449      	lsls	r1, r1, #17
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe fbf5 	bl	8000b24 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fbf0 	bl	8000b24 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e054      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	4013      	ands	r3, r2
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x644>
 800235e:	e04c      	b.n	80023fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <HAL_RCC_OscConfig+0x68c>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fbda 	bl	8000b24 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x6a6>
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	40021000 	.word	0x40021000
 800237c:	00001388 	.word	0x00001388
 8002380:	efffffff 	.word	0xefffffff
 8002384:	fffeffff 	.word	0xfffeffff
 8002388:	feffffff 	.word	0xfeffffff
 800238c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fbc8 	bl	8000b24 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e02c      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_RCC_OscConfig+0x708>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	049b      	lsls	r3, r3, #18
 80023aa:	4013      	ands	r3, r2
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x694>
 80023ae:	e024      	b.n	80023fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e01f      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_RCC_OscConfig+0x708>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_OscConfig+0x708>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	23c0      	movs	r3, #192	; 0xc0
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10e      	bne.n	80023f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	220f      	movs	r2, #15
 80023dc:	401a      	ands	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	23f0      	movs	r3, #240	; 0xf0
 80023ea:	039b      	lsls	r3, r3, #14
 80023ec:	401a      	ands	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b008      	add	sp, #32
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0bf      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d911      	bls.n	800244e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b5e      	ldr	r3, [pc, #376]	; (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4393      	bics	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	4b5b      	ldr	r3, [pc, #364]	; (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243c:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0a6      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d015      	beq.n	8002484 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2204      	movs	r2, #4
 800245e:	4013      	ands	r3, r2
 8002460:	d006      	beq.n	8002470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002462:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002468:	21e0      	movs	r1, #224	; 0xe0
 800246a:	00c9      	lsls	r1, r1, #3
 800246c:	430a      	orrs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	22f0      	movs	r2, #240	; 0xf0
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d04c      	beq.n	8002528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	029b      	lsls	r3, r3, #10
 800249e:	4013      	ands	r3, r2
 80024a0:	d120      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07a      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	049b      	lsls	r3, r3, #18
 80024b6:	4013      	ands	r3, r2
 80024b8:	d114      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06e      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	025b      	lsls	r3, r3, #9
 80024ce:	4013      	ands	r3, r2
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e062      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	4013      	ands	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e05b      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	4393      	bics	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f8:	f7fe fb14 	bl	8000b24 <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002500:	e009      	b.n	8002516 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002502:	f7fe fb0f 	bl	8000b24 <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <HAL_RCC_ClockConfig+0x1a4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e042      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	220c      	movs	r2, #12
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1ec      	bne.n	8002502 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d211      	bcs.n	800255a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2201      	movs	r2, #1
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e020      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2204      	movs	r2, #4
 8002560:	4013      	ands	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <HAL_RCC_ClockConfig+0x1a8>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002578:	f000 f820 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257c:	0001      	movs	r1, r0
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	220f      	movs	r2, #15
 8002586:	4013      	ands	r3, r2
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <HAL_RCC_ClockConfig+0x1ac>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	000a      	movs	r2, r1
 800258e:	40da      	lsrs	r2, r3
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002592:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002594:	2003      	movs	r0, #3
 8002596:	f7fe fa7f 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	00001388 	.word	0x00001388
 80025b0:	fffff8ff 	.word	0xfffff8ff
 80025b4:	080039d4 	.word	0x080039d4
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b08f      	sub	sp, #60	; 0x3c
 80025c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80025c2:	2314      	movs	r3, #20
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	4a38      	ldr	r2, [pc, #224]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xec>)
 80025c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ca:	c313      	stmia	r3!, {r0, r1, r4}
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	4a36      	ldr	r2, [pc, #216]	; (80026ac <HAL_RCC_GetSysClockFreq+0xf0>)
 80025d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025d6:	c313      	stmia	r3!, {r0, r1, r4}
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e0:	2300      	movs	r3, #0
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	220c      	movs	r2, #12
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	d047      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0xd4>
 8002600:	d849      	bhi.n	8002696 <HAL_RCC_GetSysClockFreq+0xda>
 8002602:	2b04      	cmp	r3, #4
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x50>
 8002606:	2b08      	cmp	r3, #8
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x56>
 800260a:	e044      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002610:	e044      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	0c9b      	lsrs	r3, r3, #18
 8002616:	220f      	movs	r2, #15
 8002618:	4013      	ands	r3, r2
 800261a:	2214      	movs	r2, #20
 800261c:	18ba      	adds	r2, r7, r2
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	220f      	movs	r2, #15
 8002628:	4013      	ands	r3, r2
 800262a:	1d3a      	adds	r2, r7, #4
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002632:	23c0      	movs	r3, #192	; 0xc0
 8002634:	025b      	lsls	r3, r3, #9
 8002636:	401a      	ands	r2, r3
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	025b      	lsls	r3, r3, #9
 800263c:	429a      	cmp	r2, r3
 800263e:	d109      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002642:	481c      	ldr	r0, [pc, #112]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002644:	f7fd fd60 	bl	8000108 <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	001a      	movs	r2, r3
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	4353      	muls	r3, r2
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
 8002652:	e01a      	b.n	800268a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002656:	23c0      	movs	r3, #192	; 0xc0
 8002658:	025b      	lsls	r3, r3, #9
 800265a:	401a      	ands	r2, r3
 800265c:	23c0      	movs	r3, #192	; 0xc0
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	429a      	cmp	r2, r3
 8002662:	d109      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002666:	4814      	ldr	r0, [pc, #80]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002668:	f7fd fd4e 	bl	8000108 <__udivsi3>
 800266c:	0003      	movs	r3, r0
 800266e:	001a      	movs	r2, r3
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	4353      	muls	r3, r2
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
 8002676:	e008      	b.n	800268a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267a:	4810      	ldr	r0, [pc, #64]	; (80026bc <HAL_RCC_GetSysClockFreq+0x100>)
 800267c:	f7fd fd44 	bl	8000108 <__udivsi3>
 8002680:	0003      	movs	r3, r0
 8002682:	001a      	movs	r2, r3
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	4353      	muls	r3, r2
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800268e:	e005      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002694:	e002      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_GetSysClockFreq+0x100>)
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800269a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b00f      	add	sp, #60	; 0x3c
 80026a4:	bd90      	pop	{r4, r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	080039b4 	.word	0x080039b4
 80026ac:	080039c4 	.word	0x080039c4
 80026b0:	40021000 	.word	0x40021000
 80026b4:	01e84800 	.word	0x01e84800
 80026b8:	02dc6c00 	.word	0x02dc6c00
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e042      	b.n	8002758 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223d      	movs	r2, #61	; 0x3d
 80026d6:	5c9b      	ldrb	r3, [r3, r2]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d107      	bne.n	80026ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	223c      	movs	r2, #60	; 0x3c
 80026e2:	2100      	movs	r1, #0
 80026e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7fe f8f9 	bl	80008e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	223d      	movs	r2, #61	; 0x3d
 80026f2:	2102      	movs	r1, #2
 80026f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f000 fd19 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2246      	movs	r2, #70	; 0x46
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	223e      	movs	r2, #62	; 0x3e
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	223f      	movs	r2, #63	; 0x3f
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2240      	movs	r2, #64	; 0x40
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2241      	movs	r2, #65	; 0x41
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2242      	movs	r2, #66	; 0x42
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2243      	movs	r2, #67	; 0x43
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2244      	movs	r2, #68	; 0x44
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2245      	movs	r2, #69	; 0x45
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	223d      	movs	r2, #61	; 0x3d
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e042      	b.n	80027f8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223d      	movs	r2, #61	; 0x3d
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223c      	movs	r2, #60	; 0x3c
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f839 	bl	8002800 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223d      	movs	r2, #61	; 0x3d
 8002792:	2102      	movs	r1, #2
 8002794:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	0019      	movs	r1, r3
 80027a0:	0010      	movs	r0, r2
 80027a2:	f000 fcc9 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2246      	movs	r2, #70	; 0x46
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	223e      	movs	r2, #62	; 0x3e
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	223f      	movs	r2, #63	; 0x3f
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2240      	movs	r2, #64	; 0x40
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2241      	movs	r2, #65	; 0x41
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2242      	movs	r2, #66	; 0x42
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2243      	movs	r2, #67	; 0x43
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2244      	movs	r2, #68	; 0x44
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2245      	movs	r2, #69	; 0x45
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223d      	movs	r2, #61	; 0x3d
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	230f      	movs	r3, #15
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d108      	bne.n	800283a <HAL_TIM_PWM_Start_IT+0x2a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	223e      	movs	r2, #62	; 0x3e
 800282c:	5c9b      	ldrb	r3, [r3, r2]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	4193      	sbcs	r3, r2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	e01f      	b.n	800287a <HAL_TIM_PWM_Start_IT+0x6a>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d108      	bne.n	8002852 <HAL_TIM_PWM_Start_IT+0x42>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	223f      	movs	r2, #63	; 0x3f
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	1e5a      	subs	r2, r3, #1
 800284c:	4193      	sbcs	r3, r2
 800284e:	b2db      	uxtb	r3, r3
 8002850:	e013      	b.n	800287a <HAL_TIM_PWM_Start_IT+0x6a>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d108      	bne.n	800286a <HAL_TIM_PWM_Start_IT+0x5a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	1e5a      	subs	r2, r3, #1
 8002864:	4193      	sbcs	r3, r2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e007      	b.n	800287a <HAL_TIM_PWM_Start_IT+0x6a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2241      	movs	r2, #65	; 0x41
 800286e:	5c9b      	ldrb	r3, [r3, r2]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	4193      	sbcs	r3, r2
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0b7      	b.n	80029f2 <HAL_TIM_PWM_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <HAL_TIM_PWM_Start_IT+0x82>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223e      	movs	r2, #62	; 0x3e
 800288c:	2102      	movs	r1, #2
 800288e:	5499      	strb	r1, [r3, r2]
 8002890:	e013      	b.n	80028ba <HAL_TIM_PWM_Start_IT+0xaa>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Start_IT+0x92>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	2102      	movs	r1, #2
 800289e:	5499      	strb	r1, [r3, r2]
 80028a0:	e00b      	b.n	80028ba <HAL_TIM_PWM_Start_IT+0xaa>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Start_IT+0xa2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	2102      	movs	r1, #2
 80028ae:	5499      	strb	r1, [r3, r2]
 80028b0:	e003      	b.n	80028ba <HAL_TIM_PWM_Start_IT+0xaa>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2241      	movs	r2, #65	; 0x41
 80028b6:	2102      	movs	r1, #2
 80028b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	d02a      	beq.n	8002916 <HAL_TIM_PWM_Start_IT+0x106>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d830      	bhi.n	8002928 <HAL_TIM_PWM_Start_IT+0x118>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d01b      	beq.n	8002904 <HAL_TIM_PWM_Start_IT+0xf4>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d82a      	bhi.n	8002928 <HAL_TIM_PWM_Start_IT+0x118>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_TIM_PWM_Start_IT+0xd0>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d009      	beq.n	80028f2 <HAL_TIM_PWM_Start_IT+0xe2>
 80028de:	e023      	b.n	8002928 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2102      	movs	r1, #2
 80028ec:	430a      	orrs	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]
      break;
 80028f0:	e01f      	b.n	8002932 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2104      	movs	r1, #4
 80028fe:	430a      	orrs	r2, r1
 8002900:	60da      	str	r2, [r3, #12]
      break;
 8002902:	e016      	b.n	8002932 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2108      	movs	r1, #8
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]
      break;
 8002914:	e00d      	b.n	8002932 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2110      	movs	r1, #16
 8002922:	430a      	orrs	r2, r1
 8002924:	60da      	str	r2, [r3, #12]
      break;
 8002926:	e004      	b.n	8002932 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8002928:	230f      	movs	r3, #15
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
      break;
 8002930:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002932:	230f      	movs	r3, #15
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d157      	bne.n	80029ec <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	2201      	movs	r2, #1
 8002944:	0018      	movs	r0, r3
 8002946:	f000 ff0d 	bl	8003764 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_TIM_PWM_Start_IT+0x162>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_TIM_PWM_Start_IT+0x1f0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_TIM_PWM_Start_IT+0x162>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_TIM_PWM_Start_IT+0x162>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_TIM_PWM_Start_IT+0x166>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_TIM_PWM_Start_IT+0x168>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	0209      	lsls	r1, r1, #8
 800298a:	430a      	orrs	r2, r1
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00f      	beq.n	80029b8 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	05db      	lsls	r3, r3, #23
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d009      	beq.n	80029b8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <HAL_TIM_PWM_Start_IT+0x1fc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d111      	bne.n	80029dc <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2207      	movs	r2, #7
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d010      	beq.n	80029ec <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	e007      	b.n	80029ec <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2101      	movs	r1, #1
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40014000 	.word	0x40014000
 8002a04:	40014400 	.word	0x40014400
 8002a08:	40014800 	.word	0x40014800
 8002a0c:	40000400 	.word	0x40000400

08002a10 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	230f      	movs	r3, #15
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d02a      	beq.n	8002a7e <HAL_TIM_PWM_Stop_IT+0x6e>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d830      	bhi.n	8002a90 <HAL_TIM_PWM_Stop_IT+0x80>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d01b      	beq.n	8002a6c <HAL_TIM_PWM_Stop_IT+0x5c>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d82a      	bhi.n	8002a90 <HAL_TIM_PWM_Stop_IT+0x80>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_TIM_PWM_Stop_IT+0x38>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d009      	beq.n	8002a5a <HAL_TIM_PWM_Stop_IT+0x4a>
 8002a46:	e023      	b.n	8002a90 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2102      	movs	r1, #2
 8002a54:	438a      	bics	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]
      break;
 8002a58:	e01f      	b.n	8002a9a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2104      	movs	r1, #4
 8002a66:	438a      	bics	r2, r1
 8002a68:	60da      	str	r2, [r3, #12]
      break;
 8002a6a:	e016      	b.n	8002a9a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2108      	movs	r1, #8
 8002a78:	438a      	bics	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]
      break;
 8002a7c:	e00d      	b.n	8002a9a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2110      	movs	r1, #16
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	60da      	str	r2, [r3, #12]
      break;
 8002a8e:	e004      	b.n	8002a9a <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002a90:	230f      	movs	r3, #15
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
      break;
 8002a98:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002a9a:	230f      	movs	r3, #15
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d000      	beq.n	8002aa6 <HAL_TIM_PWM_Stop_IT+0x96>
 8002aa4:	e063      	b.n	8002b6e <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6839      	ldr	r1, [r7, #0]
 8002aac:	2200      	movs	r2, #0
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 fe58 	bl	8003764 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a30      	ldr	r2, [pc, #192]	; (8002b7c <HAL_TIM_PWM_Stop_IT+0x16c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00e      	beq.n	8002adc <HAL_TIM_PWM_Stop_IT+0xcc>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2f      	ldr	r2, [pc, #188]	; (8002b80 <HAL_TIM_PWM_Stop_IT+0x170>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_TIM_PWM_Stop_IT+0xcc>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <HAL_TIM_PWM_Stop_IT+0x174>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <HAL_TIM_PWM_Stop_IT+0xcc>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2c      	ldr	r2, [pc, #176]	; (8002b88 <HAL_TIM_PWM_Stop_IT+0x178>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_PWM_Stop_IT+0xd0>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_TIM_PWM_Stop_IT+0xd2>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d013      	beq.n	8002b0e <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <HAL_TIM_PWM_Stop_IT+0x17c>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	d10d      	bne.n	8002b0e <HAL_TIM_PWM_Stop_IT+0xfe>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <HAL_TIM_PWM_Stop_IT+0x180>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_PWM_Stop_IT+0xfe>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4922      	ldr	r1, [pc, #136]	; (8002b94 <HAL_TIM_PWM_Stop_IT+0x184>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_TIM_PWM_Stop_IT+0x17c>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	d10d      	bne.n	8002b36 <HAL_TIM_PWM_Stop_IT+0x126>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_TIM_PWM_Stop_IT+0x180>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_PWM_Stop_IT+0x126>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	438a      	bics	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_PWM_Stop_IT+0x136>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223e      	movs	r2, #62	; 0x3e
 8002b40:	2101      	movs	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]
 8002b44:	e013      	b.n	8002b6e <HAL_TIM_PWM_Stop_IT+0x15e>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Stop_IT+0x146>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	223f      	movs	r2, #63	; 0x3f
 8002b50:	2101      	movs	r1, #1
 8002b52:	5499      	strb	r1, [r3, r2]
 8002b54:	e00b      	b.n	8002b6e <HAL_TIM_PWM_Stop_IT+0x15e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Stop_IT+0x156>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	2101      	movs	r1, #1
 8002b62:	5499      	strb	r1, [r3, r2]
 8002b64:	e003      	b.n	8002b6e <HAL_TIM_PWM_Stop_IT+0x15e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2241      	movs	r2, #65	; 0x41
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002b6e:	230f      	movs	r3, #15
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	781b      	ldrb	r3, [r3, #0]
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b004      	add	sp, #16
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40014000 	.word	0x40014000
 8002b84:	40014400 	.word	0x40014400
 8002b88:	40014800 	.word	0x40014800
 8002b8c:	00001111 	.word	0x00001111
 8002b90:	00000444 	.word	0x00000444
 8002b94:	ffff7fff 	.word	0xffff7fff

08002b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d124      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d11d      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	4252      	negs	r2, r2
 8002bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 fa94 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e007      	b.n	8002bf2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7fd fba5 	bl	8000334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fa93 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d125      	bne.n	8002c52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d11e      	bne.n	8002c52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2205      	movs	r2, #5
 8002c1a:	4252      	negs	r2, r2
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	23c0      	movs	r3, #192	; 0xc0
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 fa67 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002c3a:	e007      	b.n	8002c4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fd fb78 	bl	8000334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fa66 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2208      	movs	r2, #8
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d124      	bne.n	8002caa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2208      	movs	r2, #8
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d11d      	bne.n	8002caa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2209      	movs	r2, #9
 8002c74:	4252      	negs	r2, r2
 8002c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2203      	movs	r2, #3
 8002c86:	4013      	ands	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 fa3b 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002c92:	e007      	b.n	8002ca4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fd fb4c 	bl	8000334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fa3a 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d125      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d11e      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2211      	movs	r2, #17
 8002ccc:	4252      	negs	r2, r2
 8002cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	23c0      	movs	r3, #192	; 0xc0
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 fa0e 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e007      	b.n	8002cfe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fd fb1f 	bl	8000334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 fa0d 	bl	8003118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10f      	bne.n	8002d32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d108      	bne.n	8002d32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2202      	movs	r2, #2
 8002d26:	4252      	negs	r2, r2
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 f9e3 	bl	80030f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b80      	cmp	r3, #128	; 0x80
 8002d3e:	d10f      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d108      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2281      	movs	r2, #129	; 0x81
 8002d54:	4252      	negs	r2, r2
 8002d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 fdea 	bl	8003934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d10f      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2240      	movs	r2, #64	; 0x40
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d108      	bne.n	8002d8e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2241      	movs	r2, #65	; 0x41
 8002d82:	4252      	negs	r2, r2
 8002d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f9cd 	bl	8003128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2220      	movs	r2, #32
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d10f      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d108      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2221      	movs	r2, #33	; 0x21
 8002db0:	4252      	negs	r2, r2
 8002db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fdb4 	bl	8003924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2317      	movs	r3, #23
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	223c      	movs	r2, #60	; 0x3c
 8002ddc:	5c9b      	ldrb	r3, [r3, r2]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0ad      	b.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	223c      	movs	r2, #60	; 0x3c
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d100      	bne.n	8002df6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002df4:	e076      	b.n	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d900      	bls.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002dfc:	e095      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d04e      	beq.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d900      	bls.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0x48>
 8002e0a:	e08e      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d021      	beq.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002e18:	e087      	b.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	0011      	movs	r1, r2
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fa08 	bl	8003238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2108      	movs	r1, #8
 8002e34:	430a      	orrs	r2, r1
 8002e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2104      	movs	r1, #4
 8002e44:	438a      	bics	r2, r1
 8002e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6999      	ldr	r1, [r3, #24]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	619a      	str	r2, [r3, #24]
      break;
 8002e5a:	e06b      	b.n	8002f34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	0011      	movs	r1, r2
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 fa6f 	bl	8003348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0109      	lsls	r1, r1, #4
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4931      	ldr	r1, [pc, #196]	; (8002f4c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	021a      	lsls	r2, r3, #8
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	619a      	str	r2, [r3, #24]
      break;
 8002ea0:	e048      	b.n	8002f34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fad0 	bl	8003450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2108      	movs	r1, #8
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2104      	movs	r1, #4
 8002ecc:	438a      	bics	r2, r1
 8002ece:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69d9      	ldr	r1, [r3, #28]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	61da      	str	r2, [r3, #28]
      break;
 8002ee2:	e027      	b.n	8002f34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	0011      	movs	r1, r2
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 fb35 	bl	800355c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	0109      	lsls	r1, r1, #4
 8002f00:	430a      	orrs	r2, r1
 8002f02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	490f      	ldr	r1, [pc, #60]	; (8002f4c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69d9      	ldr	r1, [r3, #28]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	021a      	lsls	r2, r3, #8
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	61da      	str	r2, [r3, #28]
      break;
 8002f28:	e004      	b.n	8002f34 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002f2a:	2317      	movs	r3, #23
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
      break;
 8002f32:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	223c      	movs	r2, #60	; 0x3c
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]

  return status;
 8002f3c:	2317      	movs	r3, #23
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b006      	add	sp, #24
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	fffffbff 	.word	0xfffffbff

08002f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	230f      	movs	r3, #15
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	223c      	movs	r2, #60	; 0x3c
 8002f66:	5c9b      	ldrb	r3, [r3, r2]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIM_ConfigClockSource+0x20>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0bc      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x19a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	223c      	movs	r2, #60	; 0x3c
 8002f74:	2101      	movs	r1, #1
 8002f76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	223d      	movs	r2, #61	; 0x3d
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2277      	movs	r2, #119	; 0x77
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	0192      	lsls	r2, r2, #6
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d040      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xde>
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	0192      	lsls	r2, r2, #6
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d900      	bls.n	8002fb6 <HAL_TIM_ConfigClockSource+0x66>
 8002fb4:	e088      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	0152      	lsls	r2, r2, #5
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d100      	bne.n	8002fc0 <HAL_TIM_ConfigClockSource+0x70>
 8002fbe:	e088      	b.n	80030d2 <HAL_TIM_ConfigClockSource+0x182>
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	0152      	lsls	r2, r2, #5
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d900      	bls.n	8002fca <HAL_TIM_ConfigClockSource+0x7a>
 8002fc8:	e07e      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
 8002fca:	2b70      	cmp	r3, #112	; 0x70
 8002fcc:	d018      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0xb0>
 8002fce:	d900      	bls.n	8002fd2 <HAL_TIM_ConfigClockSource+0x82>
 8002fd0:	e07a      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
 8002fd2:	2b60      	cmp	r3, #96	; 0x60
 8002fd4:	d04f      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x126>
 8002fd6:	d900      	bls.n	8002fda <HAL_TIM_ConfigClockSource+0x8a>
 8002fd8:	e076      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
 8002fda:	2b50      	cmp	r3, #80	; 0x50
 8002fdc:	d03b      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x106>
 8002fde:	d900      	bls.n	8002fe2 <HAL_TIM_ConfigClockSource+0x92>
 8002fe0:	e072      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d057      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x146>
 8002fe6:	d900      	bls.n	8002fea <HAL_TIM_ConfigClockSource+0x9a>
 8002fe8:	e06e      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
 8002fea:	2b30      	cmp	r3, #48	; 0x30
 8002fec:	d063      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x166>
 8002fee:	d86b      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d060      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x166>
 8002ff4:	d868      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d05d      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x166>
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d05b      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x166>
 8002ffe:	e063      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f000 fb88 	bl	8003724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2277      	movs	r2, #119	; 0x77
 8003020:	4313      	orrs	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]
      break;
 800302c:	e052      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f000 fb71 	bl	8003724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	01c9      	lsls	r1, r1, #7
 8003050:	430a      	orrs	r2, r1
 8003052:	609a      	str	r2, [r3, #8]
      break;
 8003054:	e03e      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	001a      	movs	r2, r3
 8003064:	f000 fae4 	bl	8003630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2150      	movs	r1, #80	; 0x50
 800306e:	0018      	movs	r0, r3
 8003070:	f000 fb3e 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 8003074:	e02e      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	001a      	movs	r2, r3
 8003084:	f000 fb02 	bl	800368c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2160      	movs	r1, #96	; 0x60
 800308e:	0018      	movs	r0, r3
 8003090:	f000 fb2e 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 8003094:	e01e      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	001a      	movs	r2, r3
 80030a4:	f000 fac4 	bl	8003630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2140      	movs	r1, #64	; 0x40
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 fb1e 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e00e      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0019      	movs	r1, r3
 80030c0:	0010      	movs	r0, r2
 80030c2:	f000 fb15 	bl	80036f0 <TIM_ITRx_SetConfig>
      break;
 80030c6:	e005      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030c8:	230f      	movs	r3, #15
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
      break;
 80030d0:	e000      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030d2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	223d      	movs	r2, #61	; 0x3d
 80030d8:	2101      	movs	r1, #1
 80030da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	223c      	movs	r2, #60	; 0x3c
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]

  return status;
 80030e4:	230f      	movs	r3, #15
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	781b      	ldrb	r3, [r3, #0]
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b004      	add	sp, #16
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	ffff00ff 	.word	0xffff00ff

080030f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b002      	add	sp, #8
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a34      	ldr	r2, [pc, #208]	; (800321c <TIM_Base_SetConfig+0xe4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d008      	beq.n	8003162 <TIM_Base_SetConfig+0x2a>
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	05db      	lsls	r3, r3, #23
 8003156:	429a      	cmp	r2, r3
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0x2a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a30      	ldr	r2, [pc, #192]	; (8003220 <TIM_Base_SetConfig+0xe8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2270      	movs	r2, #112	; 0x70
 8003166:	4393      	bics	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a29      	ldr	r2, [pc, #164]	; (800321c <TIM_Base_SetConfig+0xe4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <TIM_Base_SetConfig+0x76>
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	05db      	lsls	r3, r3, #23
 8003182:	429a      	cmp	r2, r3
 8003184:	d013      	beq.n	80031ae <TIM_Base_SetConfig+0x76>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a25      	ldr	r2, [pc, #148]	; (8003220 <TIM_Base_SetConfig+0xe8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00f      	beq.n	80031ae <TIM_Base_SetConfig+0x76>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a24      	ldr	r2, [pc, #144]	; (8003224 <TIM_Base_SetConfig+0xec>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00b      	beq.n	80031ae <TIM_Base_SetConfig+0x76>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a23      	ldr	r2, [pc, #140]	; (8003228 <TIM_Base_SetConfig+0xf0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <TIM_Base_SetConfig+0x76>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a22      	ldr	r2, [pc, #136]	; (800322c <TIM_Base_SetConfig+0xf4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_Base_SetConfig+0x76>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a21      	ldr	r2, [pc, #132]	; (8003230 <TIM_Base_SetConfig+0xf8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d108      	bne.n	80031c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a20      	ldr	r2, [pc, #128]	; (8003234 <TIM_Base_SetConfig+0xfc>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	4393      	bics	r3, r2
 80031c6:	001a      	movs	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a0c      	ldr	r2, [pc, #48]	; (800321c <TIM_Base_SetConfig+0xe4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00b      	beq.n	8003206 <TIM_Base_SetConfig+0xce>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <TIM_Base_SetConfig+0xf0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <TIM_Base_SetConfig+0xce>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a0c      	ldr	r2, [pc, #48]	; (800322c <TIM_Base_SetConfig+0xf4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d003      	beq.n	8003206 <TIM_Base_SetConfig+0xce>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <TIM_Base_SetConfig+0xf8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d103      	bne.n	800320e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	615a      	str	r2, [r3, #20]
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b004      	add	sp, #16
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40002000 	.word	0x40002000
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	40014800 	.word	0x40014800
 8003234:	fffffcff 	.word	0xfffffcff

08003238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	2201      	movs	r2, #1
 8003248:	4393      	bics	r3, r2
 800324a:	001a      	movs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2270      	movs	r2, #112	; 0x70
 8003266:	4393      	bics	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2203      	movs	r2, #3
 800326e:	4393      	bics	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2202      	movs	r2, #2
 8003280:	4393      	bics	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <TIM_OC1_SetConfig+0xf8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_OC1_SetConfig+0x76>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <TIM_OC1_SetConfig+0xfc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC1_SetConfig+0x76>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a25      	ldr	r2, [pc, #148]	; (8003338 <TIM_OC1_SetConfig+0x100>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC1_SetConfig+0x76>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <TIM_OC1_SetConfig+0x104>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10c      	bne.n	80032c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2208      	movs	r2, #8
 80032b2:	4393      	bics	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2204      	movs	r2, #4
 80032c4:	4393      	bics	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a19      	ldr	r2, [pc, #100]	; (8003330 <TIM_OC1_SetConfig+0xf8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <TIM_OC1_SetConfig+0xb0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a18      	ldr	r2, [pc, #96]	; (8003334 <TIM_OC1_SetConfig+0xfc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <TIM_OC1_SetConfig+0xb0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a17      	ldr	r2, [pc, #92]	; (8003338 <TIM_OC1_SetConfig+0x100>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC1_SetConfig+0xb0>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a16      	ldr	r2, [pc, #88]	; (800333c <TIM_OC1_SetConfig+0x104>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d111      	bne.n	800330c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4a15      	ldr	r2, [pc, #84]	; (8003340 <TIM_OC1_SetConfig+0x108>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4a14      	ldr	r2, [pc, #80]	; (8003344 <TIM_OC1_SetConfig+0x10c>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b006      	add	sp, #24
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40014000 	.word	0x40014000
 8003338:	40014400 	.word	0x40014400
 800333c:	40014800 	.word	0x40014800
 8003340:	fffffeff 	.word	0xfffffeff
 8003344:	fffffdff 	.word	0xfffffdff

08003348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	2210      	movs	r2, #16
 8003358:	4393      	bics	r3, r2
 800335a:	001a      	movs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a2e      	ldr	r2, [pc, #184]	; (8003430 <TIM_OC2_SetConfig+0xe8>)
 8003376:	4013      	ands	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <TIM_OC2_SetConfig+0xec>)
 800337e:	4013      	ands	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2220      	movs	r2, #32
 8003392:	4393      	bics	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a24      	ldr	r2, [pc, #144]	; (8003438 <TIM_OC2_SetConfig+0xf0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10d      	bne.n	80033c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	4393      	bics	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	4393      	bics	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <TIM_OC2_SetConfig+0xf0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <TIM_OC2_SetConfig+0x9e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1a      	ldr	r2, [pc, #104]	; (800343c <TIM_OC2_SetConfig+0xf4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_OC2_SetConfig+0x9e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <TIM_OC2_SetConfig+0xf8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_OC2_SetConfig+0x9e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <TIM_OC2_SetConfig+0xfc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d113      	bne.n	800340e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <TIM_OC2_SetConfig+0x100>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4a16      	ldr	r2, [pc, #88]	; (800344c <TIM_OC2_SetConfig+0x104>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	621a      	str	r2, [r3, #32]
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b006      	add	sp, #24
 800342e:	bd80      	pop	{r7, pc}
 8003430:	ffff8fff 	.word	0xffff8fff
 8003434:	fffffcff 	.word	0xfffffcff
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40014000 	.word	0x40014000
 8003440:	40014400 	.word	0x40014400
 8003444:	40014800 	.word	0x40014800
 8003448:	fffffbff 	.word	0xfffffbff
 800344c:	fffff7ff 	.word	0xfffff7ff

08003450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a35      	ldr	r2, [pc, #212]	; (8003534 <TIM_OC3_SetConfig+0xe4>)
 8003460:	401a      	ands	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2270      	movs	r2, #112	; 0x70
 800347c:	4393      	bics	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2203      	movs	r2, #3
 8003484:	4393      	bics	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	4a28      	ldr	r2, [pc, #160]	; (8003538 <TIM_OC3_SetConfig+0xe8>)
 8003496:	4013      	ands	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a24      	ldr	r2, [pc, #144]	; (800353c <TIM_OC3_SetConfig+0xec>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10d      	bne.n	80034ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4a23      	ldr	r2, [pc, #140]	; (8003540 <TIM_OC3_SetConfig+0xf0>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <TIM_OC3_SetConfig+0xf4>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1b      	ldr	r2, [pc, #108]	; (800353c <TIM_OC3_SetConfig+0xec>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00b      	beq.n	80034ea <TIM_OC3_SetConfig+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <TIM_OC3_SetConfig+0xf8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_OC3_SetConfig+0x9a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <TIM_OC3_SetConfig+0xfc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_OC3_SetConfig+0x9a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <TIM_OC3_SetConfig+0x100>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d113      	bne.n	8003512 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <TIM_OC3_SetConfig+0x104>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <TIM_OC3_SetConfig+0x108>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	621a      	str	r2, [r3, #32]
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	b006      	add	sp, #24
 8003532:	bd80      	pop	{r7, pc}
 8003534:	fffffeff 	.word	0xfffffeff
 8003538:	fffffdff 	.word	0xfffffdff
 800353c:	40012c00 	.word	0x40012c00
 8003540:	fffff7ff 	.word	0xfffff7ff
 8003544:	fffffbff 	.word	0xfffffbff
 8003548:	40014000 	.word	0x40014000
 800354c:	40014400 	.word	0x40014400
 8003550:	40014800 	.word	0x40014800
 8003554:	ffffefff 	.word	0xffffefff
 8003558:	ffffdfff 	.word	0xffffdfff

0800355c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a28      	ldr	r2, [pc, #160]	; (800360c <TIM_OC4_SetConfig+0xb0>)
 800356c:	401a      	ands	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a22      	ldr	r2, [pc, #136]	; (8003610 <TIM_OC4_SetConfig+0xb4>)
 8003588:	4013      	ands	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <TIM_OC4_SetConfig+0xb8>)
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <TIM_OC4_SetConfig+0xbc>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a19      	ldr	r2, [pc, #100]	; (800361c <TIM_OC4_SetConfig+0xc0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <TIM_OC4_SetConfig+0x78>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <TIM_OC4_SetConfig+0xc4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_OC4_SetConfig+0x78>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <TIM_OC4_SetConfig+0xc8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_OC4_SetConfig+0x78>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a16      	ldr	r2, [pc, #88]	; (8003628 <TIM_OC4_SetConfig+0xcc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d109      	bne.n	80035e8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	4a15      	ldr	r2, [pc, #84]	; (800362c <TIM_OC4_SetConfig+0xd0>)
 80035d8:	4013      	ands	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b006      	add	sp, #24
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	ffffefff 	.word	0xffffefff
 8003610:	ffff8fff 	.word	0xffff8fff
 8003614:	fffffcff 	.word	0xfffffcff
 8003618:	ffffdfff 	.word	0xffffdfff
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	ffffbfff 	.word	0xffffbfff

08003630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	2201      	movs	r2, #1
 8003648:	4393      	bics	r3, r2
 800364a:	001a      	movs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	22f0      	movs	r2, #240	; 0xf0
 800365a:	4393      	bics	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	220a      	movs	r2, #10
 800366c:	4393      	bics	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	621a      	str	r2, [r3, #32]
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b006      	add	sp, #24
 800368a:	bd80      	pop	{r7, pc}

0800368c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	2210      	movs	r2, #16
 800369e:	4393      	bics	r3, r2
 80036a0:	001a      	movs	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <TIM_TI2_ConfigInputStage+0x60>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	031b      	lsls	r3, r3, #12
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	22a0      	movs	r2, #160	; 0xa0
 80036c8:	4393      	bics	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b006      	add	sp, #24
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	ffff0fff 	.word	0xffff0fff

080036f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2270      	movs	r2, #112	; 0x70
 8003704:	4393      	bics	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	2207      	movs	r2, #7
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <TIM_ETR_SetConfig+0x3c>)
 800373c:	4013      	ands	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	021a      	lsls	r2, r3, #8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	ffff00ff 	.word	0xffff00ff

08003764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	221f      	movs	r2, #31
 8003774:	4013      	ands	r3, r2
 8003776:	2201      	movs	r2, #1
 8003778:	409a      	lsls	r2, r3
 800377a:	0013      	movs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	43d2      	mvns	r2, r2
 8003786:	401a      	ands	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	211f      	movs	r1, #31
 8003794:	400b      	ands	r3, r1
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4099      	lsls	r1, r3
 800379a:	000b      	movs	r3, r1
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b006      	add	sp, #24
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	223c      	movs	r2, #60	; 0x3c
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e047      	b.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	223c      	movs	r2, #60	; 0x3c
 80037c8:	2101      	movs	r1, #1
 80037ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	223d      	movs	r2, #61	; 0x3d
 80037d0:	2102      	movs	r1, #2
 80037d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2270      	movs	r2, #112	; 0x70
 80037e8:	4393      	bics	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a16      	ldr	r2, [pc, #88]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00f      	beq.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	05db      	lsls	r3, r3, #23
 8003810:	429a      	cmp	r2, r3
 8003812:	d009      	beq.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a11      	ldr	r2, [pc, #68]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10c      	bne.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	4393      	bics	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223d      	movs	r2, #61	; 0x3d
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	223c      	movs	r2, #60	; 0x3c
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40000400 	.word	0x40000400
 8003864:	40014000 	.word	0x40014000

08003868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	223c      	movs	r2, #60	; 0x3c
 800387a:	5c9b      	ldrb	r3, [r3, r2]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003880:	2302      	movs	r3, #2
 8003882:	e03e      	b.n	8003902 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	223c      	movs	r2, #60	; 0x3c
 8003888:	2101      	movs	r1, #1
 800388a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	22ff      	movs	r2, #255	; 0xff
 8003890:	4393      	bics	r3, r2
 8003892:	001a      	movs	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80038a0:	401a      	ands	r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80038ae:	401a      	ands	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80038bc:	401a      	ands	r2, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a13      	ldr	r2, [pc, #76]	; (8003918 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80038ca:	401a      	ands	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80038d8:	401a      	ands	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80038e6:	401a      	ands	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	223c      	movs	r2, #60	; 0x3c
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b004      	add	sp, #16
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	fffffcff 	.word	0xfffffcff
 8003910:	fffffbff 	.word	0xfffffbff
 8003914:	fffff7ff 	.word	0xfffff7ff
 8003918:	ffffefff 	.word	0xffffefff
 800391c:	ffffdfff 	.word	0xffffdfff
 8003920:	ffffbfff 	.word	0xffffbfff

08003924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	2600      	movs	r6, #0
 8003948:	4d0c      	ldr	r5, [pc, #48]	; (800397c <__libc_init_array+0x38>)
 800394a:	4c0d      	ldr	r4, [pc, #52]	; (8003980 <__libc_init_array+0x3c>)
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	10a4      	asrs	r4, r4, #2
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	2600      	movs	r6, #0
 8003956:	f000 f821 	bl	800399c <_init>
 800395a:	4d0a      	ldr	r5, [pc, #40]	; (8003984 <__libc_init_array+0x40>)
 800395c:	4c0a      	ldr	r4, [pc, #40]	; (8003988 <__libc_init_array+0x44>)
 800395e:	1b64      	subs	r4, r4, r5
 8003960:	10a4      	asrs	r4, r4, #2
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	00b3      	lsls	r3, r6, #2
 800396a:	58eb      	ldr	r3, [r5, r3]
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	00b3      	lsls	r3, r6, #2
 8003974:	58eb      	ldr	r3, [r5, r3]
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	080039e4 	.word	0x080039e4
 8003980:	080039e4 	.word	0x080039e4
 8003984:	080039e4 	.word	0x080039e4
 8003988:	080039e8 	.word	0x080039e8

0800398c <memset>:
 800398c:	0003      	movs	r3, r0
 800398e:	1882      	adds	r2, r0, r2
 8003990:	4293      	cmp	r3, r2
 8003992:	d100      	bne.n	8003996 <memset+0xa>
 8003994:	4770      	bx	lr
 8003996:	7019      	strb	r1, [r3, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	e7f9      	b.n	8003990 <memset+0x4>

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
