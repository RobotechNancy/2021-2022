
STM32_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003a5c  08003a5c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a5c  08003a5c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000014  08003a78  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003a78  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc34  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b57  00000000  00000000  0002bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bb1  00000000  00000000  0002ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbd6  00000000  00000000  00048791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e18  00000000  00000000  00054367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb17f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  000eb1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a14 	.word	0x08003a14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003a14 	.word	0x08003a14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CAN_Config>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */

void CAN_Config(CAN_HandleTypeDef hcan, int adresse) {
 8000220:	b084      	sub	sp, #16
 8000222:	b5b0      	push	{r4, r5, r7, lr}
 8000224:	b08a      	sub	sp, #40	; 0x28
 8000226:	af00      	add	r7, sp, #0
 8000228:	2538      	movs	r5, #56	; 0x38
 800022a:	197c      	adds	r4, r7, r5
 800022c:	6020      	str	r0, [r4, #0]
 800022e:	6061      	str	r1, [r4, #4]
 8000230:	60a2      	str	r2, [r4, #8]
 8000232:	60e3      	str	r3, [r4, #12]
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000234:	003b      	movs	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 800023a:	003b      	movs	r3, r7
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 8000240:	003b      	movs	r3, r7
 8000242:	2201      	movs	r2, #1
 8000244:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = adresse << 5; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000248:	015b      	lsls	r3, r3, #5
 800024a:	001a      	movs	r2, r3
 800024c:	003b      	movs	r3, r7
 800024e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0; //
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFF << 5; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000256:	003b      	movs	r3, r7
 8000258:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <CAN_Config+0x94>)
 800025a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800025c:	003b      	movs	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000262:	003b      	movs	r3, r7
 8000264:	2200      	movs	r2, #0
 8000266:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000268:	003b      	movs	r3, r7
 800026a:	2201      	movs	r2, #1
 800026c:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800026e:	003b      	movs	r3, r7
 8000270:	220e      	movs	r2, #14
 8000272:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000274:	003a      	movs	r2, r7
 8000276:	197b      	adds	r3, r7, r5
 8000278:	0011      	movs	r1, r2
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fd96 	bl	8000dac <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 8000280:	197b      	adds	r3, r7, r5
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fe84 	bl	8000f90 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000288:	197b      	adds	r3, r7, r5
 800028a:	2102      	movs	r1, #2
 800028c:	0018      	movs	r0, r3
 800028e:	f001 f8bf 	bl	8001410 <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <CAN_Config+0x98>)
 8000294:	197a      	adds	r2, r7, r5
 8000296:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000298:	c313      	stmia	r3!, {r0, r1, r4}
 800029a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800029c:	c313      	stmia	r3!, {r0, r1, r4}
 800029e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002a0:	c313      	stmia	r3!, {r0, r1, r4}
 80002a2:	6812      	ldr	r2, [r2, #0]
 80002a4:	601a      	str	r2, [r3, #0]
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)

}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	b00a      	add	sp, #40	; 0x28
 80002ac:	bcb0      	pop	{r4, r5, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	b004      	add	sp, #16
 80002b2:	4718      	bx	r3
 80002b4:	0001ffe0 	.word	0x0001ffe0
 80002b8:	20000030 	.word	0x20000030

080002bc <send_one>:

int send_one(int adr, uint8_t data){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	000a      	movs	r2, r1
 80002c6:	1cfb      	adds	r3, r7, #3
 80002c8:	701a      	strb	r2, [r3, #0]

	uint8_t msg[1] = {data};
 80002ca:	210c      	movs	r1, #12
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	1cfa      	adds	r2, r7, #3
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	701a      	strb	r2, [r3, #0]
	return send_can(adr, msg ,1);
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2201      	movs	r2, #1
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 f806 	bl	80002ec <send_can>
 80002e0:	0003      	movs	r3, r0
}
 80002e2:	0018      	movs	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b004      	add	sp, #16
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <send_can>:

int send_can(int adr, uint8_t msg[], int msg_size){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08c      	sub	sp, #48	; 0x30
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = msg_size; // taille des données à transmettre en octets
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	2118      	movs	r1, #24
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	611a      	str	r2, [r3, #16]
	txHeader.StdId = adr; //adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	187b      	adds	r3, r7, r1
 8000304:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_STD; //on choisit l'adressage standard
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	751a      	strb	r2, [r3, #20]

	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, msg, &TxMailbox);
 8000318:	2314      	movs	r3, #20
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	68ba      	ldr	r2, [r7, #8]
 800031e:	1879      	adds	r1, r7, r1
 8000320:	4803      	ldr	r0, [pc, #12]	; (8000330 <send_can+0x44>)
 8000322:	f000 fe7b 	bl	800101c <HAL_CAN_AddTxMessage>
	return 0;
 8000326:	2300      	movs	r3, #0
}
 8000328:	0018      	movs	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	b00c      	add	sp, #48	; 0x30
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000030 	.word	0x20000030

08000334 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//fct interrupt (qd stm reçoit msg)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	//HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
	// Traitement des données
	uint8_t RxData[8];
	//réception du message
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800033c:	2408      	movs	r4, #8
 800033e:	193b      	adds	r3, r7, r4
 8000340:	4a14      	ldr	r2, [pc, #80]	; (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	2100      	movs	r1, #0
 8000346:	f000 ff47 	bl	80011d8 <HAL_CAN_GetRxMessage>

	send_one(0x324, 00);
 800034a:	23c9      	movs	r3, #201	; 0xc9
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	2100      	movs	r1, #0
 8000350:	0018      	movs	r0, r3
 8000352:	f7ff ffb3 	bl	80002bc <send_one>
	repetitions=1;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
	//send_one(0x324, FF);
	motor_stop(RxData[0]);
 800035c:	193b      	adds	r3, r7, r4
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fa0f 	bl	8000784 <motor_stop>
	motor_dir(RxData[1]);
 8000366:	193b      	adds	r3, r7, r4
 8000368:	785b      	ldrb	r3, [r3, #1]
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fa28 	bl	80007c0 <motor_dir>
	motor_step(RxData[2]);
 8000370:	193b      	adds	r3, r7, r4
 8000372:	789b      	ldrb	r3, [r3, #2]
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fa43 	bl	8000800 <motor_step>
	target = RxData[3];
 800037a:	193b      	adds	r3, r7, r4
 800037c:	78db      	ldrb	r3, [r3, #3]
 800037e:	001a      	movs	r2, r3
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000382:	601a      	str	r2, [r3, #0]

	//send_one(0x324, TIM1->ARR);
	//send_one(0x324, target);
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2200      	movs	r2, #0
 800038a:	625a      	str	r2, [r3, #36]	; 0x24

}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b005      	add	sp, #20
 8000392:	bd90      	pop	{r4, r7, pc}
 8000394:	200000f4 	.word	0x200000f4
 8000398:	20000004 	.word	0x20000004
 800039c:	20000000 	.word	0x20000000
 80003a0:	20000088 	.word	0x20000088

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b5b0      	push	{r4, r5, r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003aa:	f000 fb79 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ae:	f000 f833 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b2:	f000 f96d 	bl	8000690 <MX_GPIO_Init>
  MX_CAN_Init();
 80003b6:	f000 f87b 	bl	80004b0 <MX_CAN_Init>
  MX_TIM1_Init();
 80003ba:	f000 f8b1 	bl	8000520 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	CAN_Config(hcan, 0x325);
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <main+0x68>)
 80003c0:	4a13      	ldr	r2, [pc, #76]	; (8000410 <main+0x6c>)
 80003c2:	9206      	str	r2, [sp, #24]
 80003c4:	466a      	mov	r2, sp
 80003c6:	0011      	movs	r1, r2
 80003c8:	001a      	movs	r2, r3
 80003ca:	3210      	adds	r2, #16
 80003cc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80003ce:	c131      	stmia	r1!, {r0, r4, r5}
 80003d0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80003d2:	c131      	stmia	r1!, {r0, r4, r5}
 80003d4:	6818      	ldr	r0, [r3, #0]
 80003d6:	6859      	ldr	r1, [r3, #4]
 80003d8:	689a      	ldr	r2, [r3, #8]
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	f7ff ff20 	bl	8000220 <CAN_Config>

	//start timer
	motor_stop(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 f9cf 	bl	8000784 <motor_stop>
	motor_step(0xFF);
 80003e6:	20ff      	movs	r0, #255	; 0xff
 80003e8:	f000 fa0a 	bl	8000800 <motor_step>
	target=2;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <main+0x70>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	601a      	str	r2, [r3, #0]
	HAL_Delay(2000);
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fbb6 	bl	8000b68 <HAL_Delay>
	motor_stop(0);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f9c1 	bl	8000784 <motor_stop>
	target=0;
 8000402:	4b04      	ldr	r3, [pc, #16]	; (8000414 <main+0x70>)
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000408:	e7fe      	b.n	8000408 <main+0x64>
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	20000058 	.word	0x20000058
 8000410:	00000325 	.word	0x00000325
 8000414:	20000000 	.word	0x20000000

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b093      	sub	sp, #76	; 0x4c
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	2414      	movs	r4, #20
 8000420:	193b      	adds	r3, r7, r4
 8000422:	0018      	movs	r0, r3
 8000424:	2334      	movs	r3, #52	; 0x34
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f003 faeb 	bl	8003a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	0018      	movs	r0, r3
 8000432:	2310      	movs	r3, #16
 8000434:	001a      	movs	r2, r3
 8000436:	2100      	movs	r1, #0
 8000438:	f003 fae4 	bl	8003a04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043c:	0021      	movs	r1, r4
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2202      	movs	r2, #2
 8000442:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2201      	movs	r2, #1
 8000448:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2210      	movs	r2, #16
 800044e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2202      	movs	r2, #2
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2280      	movs	r2, #128	; 0x80
 800045a:	0212      	lsls	r2, r2, #8
 800045c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2280      	movs	r2, #128	; 0x80
 8000462:	0352      	lsls	r2, r2, #13
 8000464:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	187b      	adds	r3, r7, r1
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fc80 	bl	8001d74 <HAL_RCC_OscConfig>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000478:	f000 f954 	bl	8000724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2207      	movs	r2, #7
 8000480:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2202      	movs	r2, #2
 8000486:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2101      	movs	r1, #1
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fff1 	bl	8002480 <HAL_RCC_ClockConfig>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004a2:	f000 f93f 	bl	8000724 <Error_Handler>
  }
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b013      	add	sp, #76	; 0x4c
 80004ac:	bd90      	pop	{r4, r7, pc}
	...

080004b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <MX_CAN_Init+0x68>)
 80004b6:	4a19      	ldr	r2, [pc, #100]	; (800051c <MX_CAN_Init+0x6c>)
 80004b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <MX_CAN_Init+0x68>)
 80004bc:	220c      	movs	r2, #12
 80004be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <MX_CAN_Init+0x68>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004c6:	4b14      	ldr	r3, [pc, #80]	; (8000518 <MX_CAN_Init+0x68>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <MX_CAN_Init+0x68>)
 80004ce:	22e0      	movs	r2, #224	; 0xe0
 80004d0:	02d2      	lsls	r2, r2, #11
 80004d2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_CAN_Init+0x68>)
 80004d6:	2280      	movs	r2, #128	; 0x80
 80004d8:	0352      	lsls	r2, r2, #13
 80004da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_CAN_Init+0x68>)
 80004de:	2200      	movs	r2, #0
 80004e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <MX_CAN_Init+0x68>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <MX_CAN_Init+0x68>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <MX_CAN_Init+0x68>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_CAN_Init+0x68>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <MX_CAN_Init+0x68>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <MX_CAN_Init+0x68>)
 8000502:	0018      	movs	r0, r3
 8000504:	f000 fb54 	bl	8000bb0 <HAL_CAN_Init>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800050c:	f000 f90a 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	20000058 	.word	0x20000058
 800051c:	40006400 	.word	0x40006400

08000520 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b096      	sub	sp, #88	; 0x58
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000526:	2348      	movs	r3, #72	; 0x48
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	0018      	movs	r0, r3
 800052c:	2310      	movs	r3, #16
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f003 fa67 	bl	8003a04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000536:	2340      	movs	r3, #64	; 0x40
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	0018      	movs	r0, r3
 800053c:	2308      	movs	r3, #8
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f003 fa5f 	bl	8003a04 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000546:	2324      	movs	r3, #36	; 0x24
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	0018      	movs	r0, r3
 800054c:	231c      	movs	r3, #28
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f003 fa57 	bl	8003a04 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	0018      	movs	r0, r3
 800055a:	2320      	movs	r3, #32
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f003 fa50 	bl	8003a04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000564:	4b46      	ldr	r3, [pc, #280]	; (8000680 <MX_TIM1_Init+0x160>)
 8000566:	4a47      	ldr	r2, [pc, #284]	; (8000684 <MX_TIM1_Init+0x164>)
 8000568:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 800056a:	4b45      	ldr	r3, [pc, #276]	; (8000680 <MX_TIM1_Init+0x160>)
 800056c:	4a46      	ldr	r2, [pc, #280]	; (8000688 <MX_TIM1_Init+0x168>)
 800056e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	4b43      	ldr	r3, [pc, #268]	; (8000680 <MX_TIM1_Init+0x160>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000576:	4b42      	ldr	r3, [pc, #264]	; (8000680 <MX_TIM1_Init+0x160>)
 8000578:	4a44      	ldr	r2, [pc, #272]	; (800068c <MX_TIM1_Init+0x16c>)
 800057a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057c:	4b40      	ldr	r3, [pc, #256]	; (8000680 <MX_TIM1_Init+0x160>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000582:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <MX_TIM1_Init+0x160>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000588:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <MX_TIM1_Init+0x160>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800058e:	4b3c      	ldr	r3, [pc, #240]	; (8000680 <MX_TIM1_Init+0x160>)
 8000590:	0018      	movs	r0, r3
 8000592:	f002 f8d1 	bl	8002738 <HAL_TIM_Base_Init>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800059a:	f000 f8c3 	bl	8000724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	2148      	movs	r1, #72	; 0x48
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0152      	lsls	r2, r2, #5
 80005a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005a8:	187a      	adds	r2, r7, r1
 80005aa:	4b35      	ldr	r3, [pc, #212]	; (8000680 <MX_TIM1_Init+0x160>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f002 fd0a 	bl	8002fc8 <HAL_TIM_ConfigClockSource>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005b8:	f000 f8b4 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <MX_TIM1_Init+0x160>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f002 f90a 	bl	80027d8 <HAL_TIM_PWM_Init>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005c8:	f000 f8ac 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005da:	187a      	adds	r2, r7, r1
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <MX_TIM1_Init+0x160>)
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f003 f91f 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80005ea:	f000 f89b 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ee:	2124      	movs	r1, #36	; 0x24
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2260      	movs	r2, #96	; 0x60
 80005f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	220a      	movs	r2, #10
 80005fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800061a:	1879      	adds	r1, r7, r1
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_TIM1_Init+0x160>)
 800061e:	2208      	movs	r2, #8
 8000620:	0018      	movs	r0, r3
 8000622:	f002 fc0b 	bl	8002e3c <HAL_TIM_PWM_ConfigChannel>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800062a:	f000 f87b 	bl	8000724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	0192      	lsls	r2, r2, #6
 8000652:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800065a:	1d3a      	adds	r2, r7, #4
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_TIM1_Init+0x160>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f003 f93d 	bl	80038e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800066a:	f000 f85b 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <MX_TIM1_Init+0x160>)
 8000670:	0018      	movs	r0, r3
 8000672:	f000 f975 	bl	8000960 <HAL_TIM_MspPostInit>

}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b016      	add	sp, #88	; 0x58
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000088 	.word	0x20000088
 8000684:	40012c00 	.word	0x40012c00
 8000688:	000012bf 	.word	0x000012bf
 800068c:	0000270f 	.word	0x0000270f

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b089      	sub	sp, #36	; 0x24
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	240c      	movs	r4, #12
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2314      	movs	r3, #20
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f003 f9af 	bl	8003a04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_GPIO_Init+0x90>)
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_GPIO_Init+0x90>)
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	03c9      	lsls	r1, r1, #15
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_GPIO_Init+0x90>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	03db      	lsls	r3, r3, #15
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_GPIO_Init+0x90>)
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_GPIO_Init+0x90>)
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	0289      	lsls	r1, r1, #10
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_GPIO_Init+0x90>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80006de:	2388      	movs	r3, #136	; 0x88
 80006e0:	0099      	lsls	r1, r3, #2
 80006e2:	2390      	movs	r3, #144	; 0x90
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	2200      	movs	r2, #0
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fb25 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2288      	movs	r2, #136	; 0x88
 80006f2:	0092      	lsls	r2, r2, #2
 80006f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2201      	movs	r2, #1
 80006fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2201      	movs	r2, #1
 8000700:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	193a      	adds	r2, r7, r4
 800070a:	2390      	movs	r3, #144	; 0x90
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f001 f999 	bl	8001a48 <HAL_GPIO_Init>

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b009      	add	sp, #36	; 0x24
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40021000 	.word	0x40021000

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_TIM_OC_DelayElapsedCallback>:

//User
extern int target;
extern int repetitions;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	if(htim==&htim1){
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 800073c:	429a      	cmp	r2, r3
 800073e:	d116      	bne.n	800076e <HAL_TIM_OC_DelayElapsedCallback+0x3e>
		if(repetitions>=target){
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	db02      	blt.n	8000752 <HAL_TIM_OC_DelayElapsedCallback+0x22>
			motor_stop(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f819 	bl	8000784 <motor_stop>
		}
		send_one(0x324, repetitions);
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	23c9      	movs	r3, #201	; 0xc9
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	0011      	movs	r1, r2
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff fdac 	bl	80002bc <send_one>
		repetitions++;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 800076c:	601a      	str	r2, [r3, #0]
	}
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000088 	.word	0x20000088
 800077c:	20000004 	.word	0x20000004
 8000780:	20000000 	.word	0x20000000

08000784 <motor_stop>:

void motor_stop(int s){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	if (s==1){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d10b      	bne.n	80007aa <motor_stop+0x26>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <motor_stop+0x38>)
 8000794:	2108      	movs	r1, #8
 8000796:	0018      	movs	r0, r3
 8000798:	f002 f876 	bl	8002888 <HAL_TIM_PWM_Start_IT>
		send_one(0x324, 0xAA);
 800079c:	23c9      	movs	r3, #201	; 0xc9
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	21aa      	movs	r1, #170	; 0xaa
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff fd8a 	bl	80002bc <send_one>
	}
	else{
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_3);
	}
}
 80007a8:	e004      	b.n	80007b4 <motor_stop+0x30>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_3);
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <motor_stop+0x38>)
 80007ac:	2108      	movs	r1, #8
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 f96a 	bl	8002a88 <HAL_TIM_PWM_Stop_IT>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000088 	.word	0x20000088

080007c0 <motor_dir>:


void motor_dir(int dir){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if (dir==0){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d108      	bne.n	80007e0 <motor_dir+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	0099      	lsls	r1, r3, #2
 80007d2:	2390      	movs	r3, #144	; 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2200      	movs	r2, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f001 faad 	bl	8001d38 <HAL_GPIO_WritePin>
	}
	else if (dir==1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
	}
}
 80007de:	e00a      	b.n	80007f6 <motor_dir+0x36>
	else if (dir==1){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d107      	bne.n	80007f6 <motor_dir+0x36>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	0099      	lsls	r1, r3, #2
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2201      	movs	r2, #1
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 faa1 	bl	8001d38 <HAL_GPIO_WritePin>
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <motor_step>:

void motor_step(int f){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	TIM1->ARR = f;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <motor_step+0x18>)
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40012c00 	.word	0x40012c00

0800081c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	699a      	ldr	r2, [r3, #24]
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	619a      	str	r2, [r3, #24]
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	69da      	ldr	r2, [r3, #28]
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0549      	lsls	r1, r1, #21
 8000844:	430a      	orrs	r2, r1
 8000846:	61da      	str	r2, [r3, #28]
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_MspInit+0x44>)
 800084a:	69da      	ldr	r2, [r3, #28]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	055b      	lsls	r3, r3, #21
 8000850:	4013      	ands	r3, r2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b08b      	sub	sp, #44	; 0x2c
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	2414      	movs	r4, #20
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	2314      	movs	r3, #20
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f003 f8c4 	bl	8003a04 <memset>
  if(hcan->Instance==CAN)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <HAL_CAN_MspInit+0xa4>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d13b      	bne.n	80008fe <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_CAN_MspInit+0xa8>)
 8000888:	69da      	ldr	r2, [r3, #28]
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_CAN_MspInit+0xa8>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	0489      	lsls	r1, r1, #18
 8000890:	430a      	orrs	r2, r1
 8000892:	61da      	str	r2, [r3, #28]
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <HAL_CAN_MspInit+0xa8>)
 8000896:	69da      	ldr	r2, [r3, #28]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	049b      	lsls	r3, r3, #18
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <HAL_CAN_MspInit+0xa8>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_CAN_MspInit+0xa8>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0289      	lsls	r1, r1, #10
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_CAN_MspInit+0xa8>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	22c0      	movs	r2, #192	; 0xc0
 80008c2:	0152      	lsls	r2, r2, #5
 80008c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	0021      	movs	r1, r4
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2202      	movs	r2, #2
 80008cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2203      	movs	r2, #3
 80008d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2204      	movs	r2, #4
 80008de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	187a      	adds	r2, r7, r1
 80008e2:	2390      	movs	r3, #144	; 0x90
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 f8ad 	bl	8001a48 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	201e      	movs	r0, #30
 80008f4:	f001 f876 	bl	80019e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80008f8:	201e      	movs	r0, #30
 80008fa:	f001 f888 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b00b      	add	sp, #44	; 0x2c
 8000904:	bd90      	pop	{r4, r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40006400 	.word	0x40006400
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_TIM_Base_MspInit+0x48>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d115      	bne.n	800094e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_TIM_Base_MspInit+0x4c>)
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_TIM_Base_MspInit+0x4c>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0109      	lsls	r1, r1, #4
 800092c:	430a      	orrs	r2, r1
 800092e:	619a      	str	r2, [r3, #24]
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_TIM_Base_MspInit+0x4c>)
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	200e      	movs	r0, #14
 8000944:	f001 f84e 	bl	80019e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000948:	200e      	movs	r0, #14
 800094a:	f001 f860 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40012c00 	.word	0x40012c00
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	240c      	movs	r4, #12
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	2314      	movs	r3, #20
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f003 f846 	bl	8003a04 <memset>
  if(htim->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_TIM_MspPostInit+0x78>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d125      	bne.n	80009ce <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <HAL_TIM_MspPostInit+0x7c>)
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_TIM_MspPostInit+0x7c>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0289      	lsls	r1, r1, #10
 800098c:	430a      	orrs	r2, r1
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_TIM_MspPostInit+0x7c>)
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	029b      	lsls	r3, r3, #10
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	00d2      	lsls	r2, r2, #3
 80009a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	0021      	movs	r1, r4
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2202      	movs	r2, #2
 80009ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2202      	movs	r2, #2
 80009be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	187a      	adds	r2, r7, r1
 80009c2:	2390      	movs	r3, #144	; 0x90
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 f83d 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b009      	add	sp, #36	; 0x24
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40012c00 	.word	0x40012c00
 80009dc:	40021000 	.word	0x40021000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f894 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <TIM1_CC_IRQHandler+0x14>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 f8fa 	bl	8002c10 <HAL_TIM_IRQHandler>
//	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_3);
//	send_one(0x324, 0xAA);
//  }
//  repetitions++;
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000088 	.word	0x20000088

08000a28 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <CEC_CAN_IRQHandler+0x14>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fd18 	bl	8001464 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000058 	.word	0x20000058

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a54:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a68:	4c0b      	ldr	r4, [pc, #44]	; (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a76:	f7ff ffe3 	bl	8000a40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a7a:	f002 ff9f 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff fc91 	bl	80003a4 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a90:	08003a64 	.word	0x08003a64
  ldr r2, =_sbss
 8000a94:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a98:	20000114 	.word	0x20000114

08000a9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_COMP_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_Init+0x24>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_Init+0x24>)
 8000aaa:	2110      	movs	r1, #16
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f809 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab6:	f7ff feb1 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_InitTick+0x5c>)
 8000ad2:	681c      	ldr	r4, [r3, #0]
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_InitTick+0x60>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	0019      	movs	r1, r3
 8000ada:	23fa      	movs	r3, #250	; 0xfa
 8000adc:	0098      	lsls	r0, r3, #2
 8000ade:	f7ff fb13 	bl	8000108 <__udivsi3>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f7ff fb0e 	bl	8000108 <__udivsi3>
 8000aec:	0003      	movs	r3, r0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 ff9d 	bl	8001a2e <HAL_SYSTICK_Config>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e00f      	b.n	8000b1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d80b      	bhi.n	8000b1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2301      	movs	r3, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 ff6a 	bl	80019e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_InitTick+0x64>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b003      	add	sp, #12
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000010 	.word	0x20000010
 8000b2c:	2000000c 	.word	0x2000000c

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	001a      	movs	r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	18d2      	adds	r2, r2, r3
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_IncTick+0x20>)
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	20000110 	.word	0x20000110

08000b54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <HAL_GetTick+0x10>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	20000110 	.word	0x20000110

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff fff0 	bl	8000b54 <HAL_GetTick>
 8000b74:	0003      	movs	r3, r0
 8000b76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001a      	movs	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	189b      	adds	r3, r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	f7ff ffe0 	bl	8000b54 <HAL_GetTick>
 8000b94:	0002      	movs	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	20000010 	.word	0x20000010

08000bb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e0f0      	b.n	8000da4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	5c9b      	ldrb	r3, [r3, r2]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff fe47 	bl	8000864 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000be6:	f7ff ffb5 	bl	8000b54 <HAL_GetTick>
 8000bea:	0003      	movs	r3, r0
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bee:	e013      	b.n	8000c18 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf0:	f7ff ffb0 	bl	8000b54 <HAL_GetTick>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	d90c      	bls.n	8000c18 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	0292      	lsls	r2, r2, #10
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2105      	movs	r1, #5
 8000c12:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e0c5      	b.n	8000da4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4013      	ands	r3, r2
 8000c22:	d0e5      	beq.n	8000bf0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2102      	movs	r1, #2
 8000c30:	438a      	bics	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c34:	f7ff ff8e 	bl	8000b54 <HAL_GetTick>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c3c:	e013      	b.n	8000c66 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c3e:	f7ff ff89 	bl	8000b54 <HAL_GetTick>
 8000c42:	0002      	movs	r2, r0
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b0a      	cmp	r3, #10
 8000c4a:	d90c      	bls.n	8000c66 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	0292      	lsls	r2, r2, #10
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	2105      	movs	r1, #5
 8000c60:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e09e      	b.n	8000da4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d1e5      	bne.n	8000c3e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7e1b      	ldrb	r3, [r3, #24]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d108      	bne.n	8000c8c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	430a      	orrs	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e007      	b.n	8000c9c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	438a      	bics	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7e5b      	ldrb	r3, [r3, #25]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d108      	bne.n	8000cb6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e007      	b.n	8000cc6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	438a      	bics	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7e9b      	ldrb	r3, [r3, #26]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d108      	bne.n	8000ce0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2120      	movs	r1, #32
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e007      	b.n	8000cf0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2120      	movs	r1, #32
 8000cec:	438a      	bics	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7edb      	ldrb	r3, [r3, #27]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d108      	bne.n	8000d0a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2110      	movs	r1, #16
 8000d04:	438a      	bics	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	e007      	b.n	8000d1a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2110      	movs	r1, #16
 8000d16:	430a      	orrs	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7f1b      	ldrb	r3, [r3, #28]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d108      	bne.n	8000d34 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e007      	b.n	8000d44 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2108      	movs	r1, #8
 8000d40:	438a      	bics	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7f5b      	ldrb	r3, [r3, #29]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d108      	bne.n	8000d5e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2104      	movs	r1, #4
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e007      	b.n	8000d6e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2104      	movs	r1, #4
 8000d6a:	438a      	bics	r2, r1
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	0011      	movs	r1, r2
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	2101      	movs	r1, #1
 8000da0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b004      	add	sp, #16
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dbc:	2013      	movs	r0, #19
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	5c52      	ldrb	r2, [r2, r1]
 8000dc6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dc8:	0002      	movs	r2, r0
 8000dca:	18bb      	adds	r3, r7, r2
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d004      	beq.n	8000ddc <HAL_CAN_ConfigFilter+0x30>
 8000dd2:	18bb      	adds	r3, r7, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d000      	beq.n	8000ddc <HAL_CAN_ConfigFilter+0x30>
 8000dda:	e0cd      	b.n	8000f78 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	58d3      	ldr	r3, [r2, r3]
 8000de4:	2201      	movs	r2, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	0011      	movs	r1, r2
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	221f      	movs	r2, #31
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	2387      	movs	r3, #135	; 0x87
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	58d3      	ldr	r3, [r2, r3]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	43d2      	mvns	r2, r2
 8000e0e:	401a      	ands	r2, r3
 8000e10:	0011      	movs	r1, r2
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	2387      	movs	r3, #135	; 0x87
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d129      	bne.n	8000e76 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	2383      	movs	r3, #131	; 0x83
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	58d3      	ldr	r3, [r2, r3]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	43d2      	mvns	r2, r2
 8000e2e:	401a      	ands	r2, r3
 8000e30:	0011      	movs	r1, r2
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	2383      	movs	r3, #131	; 0x83
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	041b      	lsls	r3, r3, #16
 8000e46:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e4c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3248      	adds	r2, #72	; 0x48
 8000e52:	00d2      	lsls	r2, r2, #3
 8000e54:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	041b      	lsls	r3, r3, #16
 8000e62:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e6a:	6979      	ldr	r1, [r7, #20]
 8000e6c:	3348      	adds	r3, #72	; 0x48
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	18cb      	adds	r3, r1, r3
 8000e72:	3304      	adds	r3, #4
 8000e74:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d128      	bne.n	8000ed0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	2383      	movs	r3, #131	; 0x83
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	58d2      	ldr	r2, [r2, r3]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	2383      	movs	r3, #131	; 0x83
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	041b      	lsls	r3, r3, #16
 8000ea0:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ea6:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3248      	adds	r2, #72	; 0x48
 8000eac:	00d2      	lsls	r2, r2, #3
 8000eae:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	041b      	lsls	r3, r3, #16
 8000ebc:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ec2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ec4:	6979      	ldr	r1, [r7, #20]
 8000ec6:	3348      	adds	r3, #72	; 0x48
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	18cb      	adds	r3, r1, r3
 8000ecc:	3304      	adds	r3, #4
 8000ece:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10c      	bne.n	8000ef2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	2381      	movs	r3, #129	; 0x81
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	58d3      	ldr	r3, [r2, r3]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	43d2      	mvns	r2, r2
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	2381      	movs	r3, #129	; 0x81
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	50d1      	str	r1, [r2, r3]
 8000ef0:	e00a      	b.n	8000f08 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	2381      	movs	r3, #129	; 0x81
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	58d2      	ldr	r2, [r2, r3]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	0011      	movs	r1, r2
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	2381      	movs	r3, #129	; 0x81
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10c      	bne.n	8000f2a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	2385      	movs	r3, #133	; 0x85
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	58d3      	ldr	r3, [r2, r3]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	43d2      	mvns	r2, r2
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	0011      	movs	r1, r2
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	2385      	movs	r3, #133	; 0x85
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	50d1      	str	r1, [r2, r3]
 8000f28:	e00a      	b.n	8000f40 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	2385      	movs	r3, #133	; 0x85
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	58d2      	ldr	r2, [r2, r3]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	0011      	movs	r1, r2
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	2385      	movs	r3, #133	; 0x85
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10a      	bne.n	8000f5e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	2387      	movs	r3, #135	; 0x87
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	58d2      	ldr	r2, [r2, r3]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	0011      	movs	r1, r2
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	2387      	movs	r3, #135	; 0x87
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	58d3      	ldr	r3, [r2, r3]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4393      	bics	r3, r2
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e007      	b.n	8000f88 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	02d2      	lsls	r2, r2, #11
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
  }
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	5c9b      	ldrb	r3, [r3, r2]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d12f      	bne.n	8001004 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	2102      	movs	r1, #2
 8000faa:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	438a      	bics	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fbc:	f7ff fdca 	bl	8000b54 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fc4:	e013      	b.n	8000fee <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc6:	f7ff fdc5 	bl	8000b54 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b0a      	cmp	r3, #10
 8000fd2:	d90c      	bls.n	8000fee <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	0292      	lsls	r2, r2, #10
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e012      	b.n	8001014 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d1e5      	bne.n	8000fc6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	e007      	b.n	8001014 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	0312      	lsls	r2, r2, #12
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
  }
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b004      	add	sp, #16
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800102a:	201f      	movs	r0, #31
 800102c:	183b      	adds	r3, r7, r0
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	2120      	movs	r1, #32
 8001032:	5c52      	ldrb	r2, [r2, r1]
 8001034:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800103e:	183b      	adds	r3, r7, r0
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d004      	beq.n	8001050 <HAL_CAN_AddTxMessage+0x34>
 8001046:	183b      	adds	r3, r7, r0
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d000      	beq.n	8001050 <HAL_CAN_AddTxMessage+0x34>
 800104e:	e0b7      	b.n	80011c0 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	04db      	lsls	r3, r3, #19
 8001056:	4013      	ands	r3, r2
 8001058:	d10a      	bne.n	8001070 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	051b      	lsls	r3, r3, #20
 8001060:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001062:	d105      	bne.n	8001070 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	055b      	lsls	r3, r3, #21
 800106a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800106c:	d100      	bne.n	8001070 <HAL_CAN_AddTxMessage+0x54>
 800106e:	e09e      	b.n	80011ae <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	0e1b      	lsrs	r3, r3, #24
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
 8001078:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d908      	bls.n	8001092 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	0412      	lsls	r2, r2, #16
 8001088:	431a      	orrs	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e09e      	b.n	80011d0 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001092:	2201      	movs	r2, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10c      	bne.n	80010be <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4311      	orrs	r1, r2
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	3218      	adds	r2, #24
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	50d1      	str	r1, [r2, r3]
 80010bc:	e00f      	b.n	80010de <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010c8:	431a      	orrs	r2, r3
 80010ca:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80010d4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	3218      	adds	r2, #24
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6819      	ldr	r1, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3318      	adds	r3, #24
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	18cb      	adds	r3, r1, r3
 80010ee:	3304      	adds	r3, #4
 80010f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	7d1b      	ldrb	r3, [r3, #20]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d112      	bne.n	8001120 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3318      	adds	r3, #24
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	18d3      	adds	r3, r2, r3
 8001106:	3304      	adds	r3, #4
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6819      	ldr	r1, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	431a      	orrs	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3318      	adds	r3, #24
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	18cb      	adds	r3, r1, r3
 800111c:	3304      	adds	r3, #4
 800111e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3307      	adds	r3, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	061a      	lsls	r2, r3, #24
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3306      	adds	r3, #6
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	041b      	lsls	r3, r3, #16
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3305      	adds	r3, #5
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3304      	adds	r3, #4
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	0019      	movs	r1, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	6979      	ldr	r1, [r7, #20]
 800114c:	23c6      	movs	r3, #198	; 0xc6
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	0109      	lsls	r1, r1, #4
 8001152:	1841      	adds	r1, r0, r1
 8001154:	18cb      	adds	r3, r1, r3
 8001156:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3303      	adds	r3, #3
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	061a      	lsls	r2, r3, #24
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3302      	adds	r3, #2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	041b      	lsls	r3, r3, #16
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	0019      	movs	r1, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	6979      	ldr	r1, [r7, #20]
 8001182:	23c4      	movs	r3, #196	; 0xc4
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	0109      	lsls	r1, r1, #4
 8001188:	1841      	adds	r1, r0, r1
 800118a:	18cb      	adds	r3, r1, r3
 800118c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	3218      	adds	r2, #24
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	58d2      	ldr	r2, [r2, r3]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2101      	movs	r1, #1
 80011a0:	4311      	orrs	r1, r2
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	3218      	adds	r2, #24
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e010      	b.n	80011d0 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	0392      	lsls	r2, r2, #14
 80011b6:	431a      	orrs	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e007      	b.n	80011d0 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	02d2      	lsls	r2, r2, #11
 80011c8:	431a      	orrs	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
  }
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b008      	add	sp, #32
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e6:	2017      	movs	r0, #23
 80011e8:	183b      	adds	r3, r7, r0
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	2120      	movs	r1, #32
 80011ee:	5c52      	ldrb	r2, [r2, r1]
 80011f0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011f2:	0002      	movs	r2, r0
 80011f4:	18bb      	adds	r3, r7, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d004      	beq.n	8001206 <HAL_CAN_GetRxMessage+0x2e>
 80011fc:	18bb      	adds	r3, r7, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d000      	beq.n	8001206 <HAL_CAN_GetRxMessage+0x2e>
 8001204:	e0f8      	b.n	80013f8 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10e      	bne.n	800122a <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2203      	movs	r2, #3
 8001214:	4013      	ands	r3, r2
 8001216:	d117      	bne.n	8001248 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0392      	lsls	r2, r2, #14
 8001220:	431a      	orrs	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0ee      	b.n	8001408 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	d108      	bne.n	8001248 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	0392      	lsls	r2, r2, #14
 800123e:	431a      	orrs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0df      	b.n	8001408 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	321b      	adds	r2, #27
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	58d3      	ldr	r3, [r2, r3]
 8001254:	2204      	movs	r2, #4
 8001256:	401a      	ands	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10b      	bne.n	800127c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	321b      	adds	r2, #27
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	58d3      	ldr	r3, [r2, r3]
 8001270:	0d5b      	lsrs	r3, r3, #21
 8001272:	055b      	lsls	r3, r3, #21
 8001274:	0d5a      	lsrs	r2, r3, #21
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e00a      	b.n	8001292 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	321b      	adds	r2, #27
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	58d3      	ldr	r3, [r2, r3]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	321b      	adds	r2, #27
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	58d3      	ldr	r3, [r2, r3]
 800129e:	2202      	movs	r2, #2
 80012a0:	401a      	ands	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	331b      	adds	r3, #27
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	220f      	movs	r2, #15
 80012b8:	401a      	ands	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	331b      	adds	r3, #27
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	3304      	adds	r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	401a      	ands	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	331b      	adds	r3, #27
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	18d3      	adds	r3, r2, r3
 80012e4:	3304      	adds	r3, #4
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	041b      	lsls	r3, r3, #16
 80012ec:	0c1a      	lsrs	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	23dc      	movs	r3, #220	; 0xdc
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	188a      	adds	r2, r1, r2
 8001300:	18d3      	adds	r3, r2, r3
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	23dc      	movs	r3, #220	; 0xdc
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	188a      	adds	r2, r1, r2
 8001318:	18d3      	adds	r3, r2, r3
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0a1a      	lsrs	r2, r3, #8
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6819      	ldr	r1, [r3, #0]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	23dc      	movs	r3, #220	; 0xdc
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	188a      	adds	r2, r1, r2
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0c1a      	lsrs	r2, r3, #16
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3302      	adds	r3, #2
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	23dc      	movs	r3, #220	; 0xdc
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	188a      	adds	r2, r1, r2
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0e1a      	lsrs	r2, r3, #24
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3303      	adds	r3, #3
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6819      	ldr	r1, [r3, #0]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	23de      	movs	r3, #222	; 0xde
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	188a      	adds	r2, r1, r2
 800136c:	18d3      	adds	r3, r2, r3
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3304      	adds	r3, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	23de      	movs	r3, #222	; 0xde
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	188a      	adds	r2, r1, r2
 8001386:	18d3      	adds	r3, r2, r3
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	0a1a      	lsrs	r2, r3, #8
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3305      	adds	r3, #5
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6819      	ldr	r1, [r3, #0]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	23de      	movs	r3, #222	; 0xde
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	188a      	adds	r2, r1, r2
 80013a2:	18d3      	adds	r3, r2, r3
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0c1a      	lsrs	r2, r3, #16
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3306      	adds	r3, #6
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	23de      	movs	r3, #222	; 0xde
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	188a      	adds	r2, r1, r2
 80013be:	18d3      	adds	r3, r2, r3
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	0e1a      	lsrs	r2, r3, #24
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3307      	adds	r3, #7
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d108      	bne.n	80013e4 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2120      	movs	r1, #32
 80013de:	430a      	orrs	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	e007      	b.n	80013f4 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2120      	movs	r1, #32
 80013f0:	430a      	orrs	r2, r1
 80013f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e007      	b.n	8001408 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	02d2      	lsls	r2, r2, #11
 8001400:	431a      	orrs	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
  }
}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b006      	add	sp, #24
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800141a:	200f      	movs	r0, #15
 800141c:	183b      	adds	r3, r7, r0
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	2120      	movs	r1, #32
 8001422:	5c52      	ldrb	r2, [r2, r1]
 8001424:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001426:	0002      	movs	r2, r0
 8001428:	18bb      	adds	r3, r7, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d003      	beq.n	8001438 <HAL_CAN_ActivateNotification+0x28>
 8001430:	18bb      	adds	r3, r7, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d109      	bne.n	800144c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6959      	ldr	r1, [r3, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	e007      	b.n	800145c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	02d2      	lsls	r2, r2, #11
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
  }
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b004      	add	sp, #16
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d100      	bne.n	80014aa <HAL_CAN_IRQHandler+0x46>
 80014a8:	e084      	b.n	80015b4 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	d024      	beq.n	80014fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2201      	movs	r2, #1
 80014b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d004      	beq.n	80014cc <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 f981 	bl	80017cc <HAL_CAN_TxMailbox0CompleteCallback>
 80014ca:	e017      	b.n	80014fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2204      	movs	r2, #4
 80014d0:	4013      	ands	r3, r2
 80014d2:	d005      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	4313      	orrs	r3, r2
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
 80014de:	e00d      	b.n	80014fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2208      	movs	r2, #8
 80014e4:	4013      	ands	r3, r2
 80014e6:	d005      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	0152      	lsls	r2, r2, #5
 80014ee:	4313      	orrs	r3, r2
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
 80014f2:	e003      	b.n	80014fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 f980 	bl	80017fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4013      	ands	r3, r2
 8001504:	d028      	beq.n	8001558 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	0052      	lsls	r2, r2, #1
 800150e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d004      	beq.n	8001524 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0018      	movs	r0, r3
 800151e:	f000 f95d 	bl	80017dc <HAL_CAN_TxMailbox1CompleteCallback>
 8001522:	e019      	b.n	8001558 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4013      	ands	r3, r2
 800152c:	d005      	beq.n	800153a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	0192      	lsls	r2, r2, #6
 8001534:	4313      	orrs	r3, r2
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
 8001538:	e00e      	b.n	8001558 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4013      	ands	r3, r2
 8001542:	d005      	beq.n	8001550 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	01d2      	lsls	r2, r2, #7
 800154a:	4313      	orrs	r3, r2
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e003      	b.n	8001558 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0018      	movs	r0, r3
 8001554:	f000 f95a 	bl	800180c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	4013      	ands	r3, r2
 8001560:	d028      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0252      	lsls	r2, r2, #9
 800156a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	029b      	lsls	r3, r3, #10
 8001572:	4013      	ands	r3, r2
 8001574:	d004      	beq.n	8001580 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f000 f937 	bl	80017ec <HAL_CAN_TxMailbox2CompleteCallback>
 800157e:	e019      	b.n	80015b4 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	02db      	lsls	r3, r3, #11
 8001586:	4013      	ands	r3, r2
 8001588:	d005      	beq.n	8001596 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0212      	lsls	r2, r2, #8
 8001590:	4313      	orrs	r3, r2
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
 8001594:	e00e      	b.n	80015b4 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	031b      	lsls	r3, r3, #12
 800159c:	4013      	ands	r3, r2
 800159e:	d005      	beq.n	80015ac <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	0252      	lsls	r2, r2, #9
 80015a6:	4313      	orrs	r3, r2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
 80015aa:	e003      	b.n	80015b4 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 f934 	bl	800181c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	2208      	movs	r2, #8
 80015b8:	4013      	ands	r3, r2
 80015ba:	d00c      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2210      	movs	r2, #16
 80015c0:	4013      	ands	r3, r2
 80015c2:	d008      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4313      	orrs	r3, r2
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2210      	movs	r2, #16
 80015d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	2204      	movs	r2, #4
 80015da:	4013      	ands	r3, r2
 80015dc:	d00b      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2208      	movs	r2, #8
 80015e2:	4013      	ands	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2208      	movs	r2, #8
 80015ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 f91b 	bl	800182c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d009      	beq.n	8001612 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2203      	movs	r2, #3
 8001606:	4013      	ands	r3, r2
 8001608:	d003      	beq.n	8001612 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	0018      	movs	r0, r3
 800160e:	f7fe fe91 	bl	8000334 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	2240      	movs	r2, #64	; 0x40
 8001616:	4013      	ands	r3, r2
 8001618:	d00c      	beq.n	8001634 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2210      	movs	r2, #16
 800161e:	4013      	ands	r3, r2
 8001620:	d008      	beq.n	8001634 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	00d2      	lsls	r2, r2, #3
 8001628:	4313      	orrs	r3, r2
 800162a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	2220      	movs	r2, #32
 8001638:	4013      	ands	r3, r2
 800163a:	d00b      	beq.n	8001654 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2208      	movs	r2, #8
 8001640:	4013      	ands	r3, r2
 8001642:	d007      	beq.n	8001654 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2208      	movs	r2, #8
 800164a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	0018      	movs	r0, r3
 8001650:	f000 f8fc 	bl	800184c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	2210      	movs	r2, #16
 8001658:	4013      	ands	r3, r2
 800165a:	d009      	beq.n	8001670 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2203      	movs	r2, #3
 8001664:	4013      	ands	r3, r2
 8001666:	d003      	beq.n	8001670 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f8e6 	bl	800183c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001670:	6a3a      	ldr	r2, [r7, #32]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	4013      	ands	r3, r2
 8001678:	d00b      	beq.n	8001692 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	2210      	movs	r2, #16
 800167e:	4013      	ands	r3, r2
 8001680:	d007      	beq.n	8001692 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2210      	movs	r2, #16
 8001688:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	0018      	movs	r0, r3
 800168e:	f000 f8e5 	bl	800185c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001692:	6a3a      	ldr	r2, [r7, #32]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	025b      	lsls	r3, r3, #9
 8001698:	4013      	ands	r3, r2
 800169a:	d00b      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2208      	movs	r2, #8
 80016a0:	4013      	ands	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2208      	movs	r2, #8
 80016aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 f8dc 	bl	800186c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016b4:	6a3a      	ldr	r2, [r7, #32]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	4013      	ands	r3, r2
 80016bc:	d100      	bne.n	80016c0 <HAL_CAN_IRQHandler+0x25c>
 80016be:	e074      	b.n	80017aa <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2204      	movs	r2, #4
 80016c4:	4013      	ands	r3, r2
 80016c6:	d100      	bne.n	80016ca <HAL_CAN_IRQHandler+0x266>
 80016c8:	e06b      	b.n	80017a2 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016ca:	6a3a      	ldr	r2, [r7, #32]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d007      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016da:	d003      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	2201      	movs	r2, #1
 80016e0:	4313      	orrs	r3, r2
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016e4:	6a3a      	ldr	r2, [r7, #32]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016f4:	d003      	beq.n	80016fe <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	2202      	movs	r2, #2
 80016fa:	4313      	orrs	r3, r2
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016fe:	6a3a      	ldr	r2, [r7, #32]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4013      	ands	r3, r2
 8001706:	d007      	beq.n	8001718 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800170e:	d003      	beq.n	8001718 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	2204      	movs	r2, #4
 8001714:	4313      	orrs	r3, r2
 8001716:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	4013      	ands	r3, r2
 8001720:	d03f      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2270      	movs	r2, #112	; 0x70
 8001726:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001728:	d03b      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2270      	movs	r2, #112	; 0x70
 800172e:	4013      	ands	r3, r2
 8001730:	2b60      	cmp	r3, #96	; 0x60
 8001732:	d027      	beq.n	8001784 <HAL_CAN_IRQHandler+0x320>
 8001734:	d82c      	bhi.n	8001790 <HAL_CAN_IRQHandler+0x32c>
 8001736:	2b50      	cmp	r3, #80	; 0x50
 8001738:	d01f      	beq.n	800177a <HAL_CAN_IRQHandler+0x316>
 800173a:	d829      	bhi.n	8001790 <HAL_CAN_IRQHandler+0x32c>
 800173c:	2b40      	cmp	r3, #64	; 0x40
 800173e:	d017      	beq.n	8001770 <HAL_CAN_IRQHandler+0x30c>
 8001740:	d826      	bhi.n	8001790 <HAL_CAN_IRQHandler+0x32c>
 8001742:	2b30      	cmp	r3, #48	; 0x30
 8001744:	d00f      	beq.n	8001766 <HAL_CAN_IRQHandler+0x302>
 8001746:	d823      	bhi.n	8001790 <HAL_CAN_IRQHandler+0x32c>
 8001748:	2b10      	cmp	r3, #16
 800174a:	d002      	beq.n	8001752 <HAL_CAN_IRQHandler+0x2ee>
 800174c:	2b20      	cmp	r3, #32
 800174e:	d005      	beq.n	800175c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001750:	e01e      	b.n	8001790 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	2208      	movs	r2, #8
 8001756:	4313      	orrs	r3, r2
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800175a:	e01a      	b.n	8001792 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	2210      	movs	r2, #16
 8001760:	4313      	orrs	r3, r2
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001764:	e015      	b.n	8001792 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	2220      	movs	r2, #32
 800176a:	4313      	orrs	r3, r2
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800176e:	e010      	b.n	8001792 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	4313      	orrs	r3, r2
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001778:	e00b      	b.n	8001792 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	4313      	orrs	r3, r2
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001782:	e006      	b.n	8001792 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	0052      	lsls	r2, r2, #1
 800178a:	4313      	orrs	r3, r2
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800178e:	e000      	b.n	8001792 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001790:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2170      	movs	r1, #112	; 0x70
 800179e:	438a      	bics	r2, r1
 80017a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2204      	movs	r2, #4
 80017a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0018      	movs	r0, r3
 80017c0:	f000 f85c 	bl	800187c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b00a      	add	sp, #40	; 0x28
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	0002      	movs	r2, r0
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001898:	1dfb      	adds	r3, r7, #7
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b7f      	cmp	r3, #127	; 0x7f
 800189e:	d809      	bhi.n	80018b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a0:	1dfb      	adds	r3, r7, #7
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	001a      	movs	r2, r3
 80018a6:	231f      	movs	r3, #31
 80018a8:	401a      	ands	r2, r3
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_EnableIRQ+0x30>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	4091      	lsls	r1, r2
 80018b0:	000a      	movs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
  }
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	0002      	movs	r2, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	1dfb      	adds	r3, r7, #7
 80018cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b7f      	cmp	r3, #127	; 0x7f
 80018d4:	d828      	bhi.n	8001928 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d6:	4a2f      	ldr	r2, [pc, #188]	; (8001994 <__NVIC_SetPriority+0xd4>)
 80018d8:	1dfb      	adds	r3, r7, #7
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	33c0      	adds	r3, #192	; 0xc0
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	589b      	ldr	r3, [r3, r2]
 80018e6:	1dfa      	adds	r2, r7, #7
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	0011      	movs	r1, r2
 80018ec:	2203      	movs	r2, #3
 80018ee:	400a      	ands	r2, r1
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	21ff      	movs	r1, #255	; 0xff
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	43d2      	mvns	r2, r2
 80018fa:	401a      	ands	r2, r3
 80018fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	401a      	ands	r2, r3
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	0018      	movs	r0, r3
 800190c:	2303      	movs	r3, #3
 800190e:	4003      	ands	r3, r0
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001914:	481f      	ldr	r0, [pc, #124]	; (8001994 <__NVIC_SetPriority+0xd4>)
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b25b      	sxtb	r3, r3
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	430a      	orrs	r2, r1
 8001920:	33c0      	adds	r3, #192	; 0xc0
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001926:	e031      	b.n	800198c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <__NVIC_SetPriority+0xd8>)
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	0019      	movs	r1, r3
 8001930:	230f      	movs	r3, #15
 8001932:	400b      	ands	r3, r1
 8001934:	3b08      	subs	r3, #8
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3306      	adds	r3, #6
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	3304      	adds	r3, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1dfa      	adds	r2, r7, #7
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	0011      	movs	r1, r2
 8001948:	2203      	movs	r2, #3
 800194a:	400a      	ands	r2, r1
 800194c:	00d2      	lsls	r2, r2, #3
 800194e:	21ff      	movs	r1, #255	; 0xff
 8001950:	4091      	lsls	r1, r2
 8001952:	000a      	movs	r2, r1
 8001954:	43d2      	mvns	r2, r2
 8001956:	401a      	ands	r2, r3
 8001958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	22ff      	movs	r2, #255	; 0xff
 8001960:	401a      	ands	r2, r3
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	0018      	movs	r0, r3
 8001968:	2303      	movs	r3, #3
 800196a:	4003      	ands	r3, r0
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001970:	4809      	ldr	r0, [pc, #36]	; (8001998 <__NVIC_SetPriority+0xd8>)
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	001c      	movs	r4, r3
 8001978:	230f      	movs	r3, #15
 800197a:	4023      	ands	r3, r4
 800197c:	3b08      	subs	r3, #8
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	430a      	orrs	r2, r1
 8001982:	3306      	adds	r3, #6
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	18c3      	adds	r3, r0, r3
 8001988:	3304      	adds	r3, #4
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b003      	add	sp, #12
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	1e5a      	subs	r2, r3, #1
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	045b      	lsls	r3, r3, #17
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d301      	bcc.n	80019b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b0:	2301      	movs	r3, #1
 80019b2:	e010      	b.n	80019d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <SysTick_Config+0x44>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	3a01      	subs	r2, #1
 80019ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019bc:	2301      	movs	r3, #1
 80019be:	425b      	negs	r3, r3
 80019c0:	2103      	movs	r1, #3
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7ff ff7c 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x44>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x44>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	210f      	movs	r1, #15
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	1c02      	adds	r2, r0, #0
 80019f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	0011      	movs	r1, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b004      	add	sp, #16
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	0002      	movs	r2, r0
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1a:	1dfb      	adds	r3, r7, #7
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ff33 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff ffaf 	bl	800199c <SysTick_Config>
 8001a3e:	0003      	movs	r3, r0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e155      	b.n	8001d04 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4091      	lsls	r1, r2
 8001a62:	000a      	movs	r2, r1
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d100      	bne.n	8001a70 <HAL_GPIO_Init+0x28>
 8001a6e:	e146      	b.n	8001cfe <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d005      	beq.n	8001a88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d130      	bne.n	8001aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	0013      	movs	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abe:	2201      	movs	r2, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d017      	beq.n	8001b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d123      	bne.n	8001b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	58d3      	ldr	r3, [r2, r3]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2107      	movs	r1, #7
 8001b5e:	400b      	ands	r3, r1
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	6939      	ldr	r1, [r7, #16]
 8001b78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	401a      	ands	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	23c0      	movs	r3, #192	; 0xc0
 8001bb4:	029b      	lsls	r3, r3, #10
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d100      	bne.n	8001bbc <HAL_GPIO_Init+0x174>
 8001bba:	e0a0      	b.n	8001cfe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbc:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_GPIO_Init+0x2d4>)
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_GPIO_Init+0x2d4>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <HAL_GPIO_Init+0x2d4>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_GPIO_Init+0x2d8>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	589b      	ldr	r3, [r3, r2]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	2390      	movs	r3, #144	; 0x90
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a47      	ldr	r2, [pc, #284]	; (8001d24 <HAL_GPIO_Init+0x2dc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x1ea>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a46      	ldr	r2, [pc, #280]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x1e6>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a45      	ldr	r2, [pc, #276]	; (8001d2c <HAL_GPIO_Init+0x2e4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x1e2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a44      	ldr	r2, [pc, #272]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x1de>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x1f0>
 8001c26:	2305      	movs	r3, #5
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x1f0>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x1f0>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x1f0>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x1f0>
 8001c36:	2300      	movs	r3, #0
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	2103      	movs	r1, #3
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c48:	4935      	ldr	r1, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x2d8>)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c56:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	025b      	lsls	r3, r3, #9
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	029b      	lsls	r3, r3, #10
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	035b      	lsls	r3, r3, #13
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	039b      	lsls	r3, r3, #14
 8001cec:	4013      	ands	r3, r2
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	40da      	lsrs	r2, r3
 8001d0c:	1e13      	subs	r3, r2, #0
 8001d0e:	d000      	beq.n	8001d12 <HAL_GPIO_Init+0x2ca>
 8001d10:	e6a2      	b.n	8001a58 <HAL_GPIO_Init+0x10>
  } 
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b006      	add	sp, #24
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	48000c00 	.word	0x48000c00
 8001d30:	48001000 	.word	0x48001000
 8001d34:	40010400 	.word	0x40010400

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	0008      	movs	r0, r1
 8001d42:	0011      	movs	r1, r2
 8001d44:	1cbb      	adds	r3, r7, #2
 8001d46:	1c02      	adds	r2, r0, #0
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	1c7b      	adds	r3, r7, #1
 8001d4c:	1c0a      	adds	r2, r1, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d50:	1c7b      	adds	r3, r7, #1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d58:	1cbb      	adds	r3, r7, #2
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d60:	e003      	b.n	8001d6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d62:	1cbb      	adds	r3, r7, #2
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f000 fb76 	bl	8002474 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d100      	bne.n	8001d94 <HAL_RCC_OscConfig+0x20>
 8001d92:	e08e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d94:	4bc5      	ldr	r3, [pc, #788]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	220c      	movs	r2, #12
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d00e      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da0:	4bc2      	ldr	r3, [pc, #776]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	220c      	movs	r2, #12
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d117      	bne.n	8001ddc <HAL_RCC_OscConfig+0x68>
 8001dac:	4bbf      	ldr	r3, [pc, #764]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	23c0      	movs	r3, #192	; 0xc0
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	401a      	ands	r2, r3
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	025b      	lsls	r3, r3, #9
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d10e      	bne.n	8001ddc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	4bbb      	ldr	r3, [pc, #748]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	029b      	lsls	r3, r3, #10
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d100      	bne.n	8001dcc <HAL_RCC_OscConfig+0x58>
 8001dca:	e071      	b.n	8001eb0 <HAL_RCC_OscConfig+0x13c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d000      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x62>
 8001dd4:	e06c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f000 fb4c 	bl	8002474 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_OscConfig+0x80>
 8001de4:	4bb1      	ldr	r3, [pc, #708]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4bb0      	ldr	r3, [pc, #704]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	0249      	lsls	r1, r1, #9
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e02f      	b.n	8001e54 <HAL_RCC_OscConfig+0xe0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0xa2>
 8001dfc:	4bab      	ldr	r3, [pc, #684]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4baa      	ldr	r3, [pc, #680]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e02:	49ab      	ldr	r1, [pc, #684]	; (80020b0 <HAL_RCC_OscConfig+0x33c>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	4ba8      	ldr	r3, [pc, #672]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4ba7      	ldr	r3, [pc, #668]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e0e:	49a9      	ldr	r1, [pc, #676]	; (80020b4 <HAL_RCC_OscConfig+0x340>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e01e      	b.n	8001e54 <HAL_RCC_OscConfig+0xe0>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10e      	bne.n	8001e3c <HAL_RCC_OscConfig+0xc8>
 8001e1e:	4ba3      	ldr	r3, [pc, #652]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4ba2      	ldr	r3, [pc, #648]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	02c9      	lsls	r1, r1, #11
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	4b9f      	ldr	r3, [pc, #636]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b9e      	ldr	r3, [pc, #632]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	0249      	lsls	r1, r1, #9
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0xe0>
 8001e3c:	4b9b      	ldr	r3, [pc, #620]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b9a      	ldr	r3, [pc, #616]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e42:	499b      	ldr	r1, [pc, #620]	; (80020b0 <HAL_RCC_OscConfig+0x33c>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	4b98      	ldr	r3, [pc, #608]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b97      	ldr	r3, [pc, #604]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e4e:	4999      	ldr	r1, [pc, #612]	; (80020b4 <HAL_RCC_OscConfig+0x340>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d014      	beq.n	8001e86 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fe7a 	bl	8000b54 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e66:	f7fe fe75 	bl	8000b54 <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b64      	cmp	r3, #100	; 0x64
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e2fd      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e78:	4b8c      	ldr	r3, [pc, #560]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	4013      	ands	r3, r2
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0xf2>
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe fe65 	bl	8000b54 <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e90:	f7fe fe60 	bl	8000b54 <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e2e8      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	4b82      	ldr	r3, [pc, #520]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	029b      	lsls	r3, r3, #10
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x11c>
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d100      	bne.n	8001ebe <HAL_RCC_OscConfig+0x14a>
 8001ebc:	e06c      	b.n	8001f98 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ebe:	4b7b      	ldr	r3, [pc, #492]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ec8:	4b78      	ldr	r3, [pc, #480]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	220c      	movs	r2, #12
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d11f      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1a0>
 8001ed4:	4b75      	ldr	r3, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	401a      	ands	r2, r3
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b71      	ldr	r3, [pc, #452]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x188>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e2bb      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	22f8      	movs	r2, #248	; 0xf8
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00da      	lsls	r2, r3, #3
 8001f0c:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e041      	b.n	8001f98 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d024      	beq.n	8001f66 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b62      	ldr	r3, [pc, #392]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7fe fe14 	bl	8000b54 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f32:	f7fe fe0f 	bl	8000b54 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e297      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d0f1      	beq.n	8001f32 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b57      	ldr	r3, [pc, #348]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	22f8      	movs	r2, #248	; 0xf8
 8001f54:	4393      	bics	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	00da      	lsls	r2, r3, #3
 8001f5e:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e018      	b.n	8001f98 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f66:	4b51      	ldr	r3, [pc, #324]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	438a      	bics	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe fdef 	bl	8000b54 <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7fe fdea 	bl	8000b54 <HAL_GetTick>
 8001f80:	0002      	movs	r2, r0
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e272      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d1f1      	bne.n	8001f7c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d019      	beq.n	8001fde <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fae:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fdcd 	bl	8000b54 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7fe fdc8 	bl	8000b54 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e250      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d0f1      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x24c>
 8001fdc:	e018      	b.n	8002010 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fde:	4b33      	ldr	r3, [pc, #204]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe2:	4b32      	ldr	r3, [pc, #200]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fdb3 	bl	8000b54 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fdae 	bl	8000b54 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e236      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002006:	4b29      	ldr	r3, [pc, #164]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d1f1      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2204      	movs	r2, #4
 8002016:	4013      	ands	r3, r2
 8002018:	d100      	bne.n	800201c <HAL_RCC_OscConfig+0x2a8>
 800201a:	e0b5      	b.n	8002188 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201c:	201f      	movs	r0, #31
 800201e:	183b      	adds	r3, r7, r0
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002024:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	055b      	lsls	r3, r3, #21
 800202c:	4013      	ands	r3, r2
 800202e:	d110      	bne.n	8002052 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0549      	lsls	r1, r1, #21
 800203a:	430a      	orrs	r2, r1
 800203c:	61da      	str	r2, [r3, #28]
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	055b      	lsls	r3, r3, #21
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800204c:	183b      	adds	r3, r7, r0
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_RCC_OscConfig+0x344>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d11a      	bne.n	8002094 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_RCC_OscConfig+0x344>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_RCC_OscConfig+0x344>)
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0049      	lsls	r1, r1, #1
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206c:	f7fe fd72 	bl	8000b54 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002076:	f7fe fd6d 	bl	8000b54 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	; 0x64
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1f5      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_OscConfig+0x344>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4013      	ands	r3, r2
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10f      	bne.n	80020bc <HAL_RCC_OscConfig+0x348>
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <HAL_RCC_OscConfig+0x338>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	621a      	str	r2, [r3, #32]
 80020a8:	e036      	b.n	8002118 <HAL_RCC_OscConfig+0x3a4>
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	40021000 	.word	0x40021000
 80020b0:	fffeffff 	.word	0xfffeffff
 80020b4:	fffbffff 	.word	0xfffbffff
 80020b8:	40007000 	.word	0x40007000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x36a>
 80020c4:	4bca      	ldr	r3, [pc, #808]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	4bc9      	ldr	r3, [pc, #804]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	2101      	movs	r1, #1
 80020cc:	438a      	bics	r2, r1
 80020ce:	621a      	str	r2, [r3, #32]
 80020d0:	4bc7      	ldr	r3, [pc, #796]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	4bc6      	ldr	r3, [pc, #792]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	2104      	movs	r1, #4
 80020d8:	438a      	bics	r2, r1
 80020da:	621a      	str	r2, [r3, #32]
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x3a4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x38c>
 80020e6:	4bc2      	ldr	r3, [pc, #776]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	4bc1      	ldr	r3, [pc, #772]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80020ec:	2104      	movs	r1, #4
 80020ee:	430a      	orrs	r2, r1
 80020f0:	621a      	str	r2, [r3, #32]
 80020f2:	4bbf      	ldr	r3, [pc, #764]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80020f4:	6a1a      	ldr	r2, [r3, #32]
 80020f6:	4bbe      	ldr	r3, [pc, #760]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	430a      	orrs	r2, r1
 80020fc:	621a      	str	r2, [r3, #32]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0x3a4>
 8002100:	4bbb      	ldr	r3, [pc, #748]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	4bba      	ldr	r3, [pc, #744]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002106:	2101      	movs	r1, #1
 8002108:	438a      	bics	r2, r1
 800210a:	621a      	str	r2, [r3, #32]
 800210c:	4bb8      	ldr	r3, [pc, #736]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	4bb7      	ldr	r3, [pc, #732]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002112:	2104      	movs	r1, #4
 8002114:	438a      	bics	r2, r1
 8002116:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d014      	beq.n	800214a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7fe fd18 	bl	8000b54 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	e009      	b.n	800213e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fd13 	bl	8000b54 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	4aaf      	ldr	r2, [pc, #700]	; (80023f4 <HAL_RCC_OscConfig+0x680>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e19a      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	4bac      	ldr	r3, [pc, #688]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x3b6>
 8002148:	e013      	b.n	8002172 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe fd03 	bl	8000b54 <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002152:	e009      	b.n	8002168 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe fcfe 	bl	8000b54 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	4aa5      	ldr	r2, [pc, #660]	; (80023f4 <HAL_RCC_OscConfig+0x680>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e185      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	4ba1      	ldr	r3, [pc, #644]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	2202      	movs	r2, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002172:	231f      	movs	r3, #31
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217c:	4b9c      	ldr	r3, [pc, #624]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	4b9b      	ldr	r3, [pc, #620]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002182:	499d      	ldr	r1, [pc, #628]	; (80023f8 <HAL_RCC_OscConfig+0x684>)
 8002184:	400a      	ands	r2, r1
 8002186:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2210      	movs	r2, #16
 800218e:	4013      	ands	r3, r2
 8002190:	d063      	beq.n	800225a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d12a      	bne.n	80021f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800219a:	4b95      	ldr	r3, [pc, #596]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800219c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219e:	4b94      	ldr	r3, [pc, #592]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80021a0:	2104      	movs	r1, #4
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021a6:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80021a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021aa:	4b91      	ldr	r3, [pc, #580]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80021ac:	2101      	movs	r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fccf 	bl	8000b54 <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021bc:	f7fe fcca 	bl	8000b54 <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e152      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021ce:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	2202      	movs	r2, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0f1      	beq.n	80021bc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021d8:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	22f8      	movs	r2, #248	; 0xf8
 80021de:	4393      	bics	r3, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	00da      	lsls	r2, r3, #3
 80021e8:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34
 80021ee:	e034      	b.n	800225a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	3305      	adds	r3, #5
 80021f6:	d111      	bne.n	800221c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021f8:	4b7d      	ldr	r3, [pc, #500]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fc:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80021fe:	2104      	movs	r1, #4
 8002200:	438a      	bics	r2, r1
 8002202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002204:	4b7a      	ldr	r3, [pc, #488]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	22f8      	movs	r2, #248	; 0xf8
 800220a:	4393      	bics	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	00da      	lsls	r2, r3, #3
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002216:	430a      	orrs	r2, r1
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
 800221a:	e01e      	b.n	800225a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800221c:	4b74      	ldr	r3, [pc, #464]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800221e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002220:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002222:	2104      	movs	r1, #4
 8002224:	430a      	orrs	r2, r1
 8002226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002228:	4b71      	ldr	r3, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800222a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222c:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800222e:	2101      	movs	r1, #1
 8002230:	438a      	bics	r2, r1
 8002232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002234:	f7fe fc8e 	bl	8000b54 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800223e:	f7fe fc89 	bl	8000b54 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e111      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002250:	4b67      	ldr	r3, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d1f1      	bne.n	800223e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2220      	movs	r2, #32
 8002260:	4013      	ands	r3, r2
 8002262:	d05c      	beq.n	800231e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002264:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	220c      	movs	r2, #12
 800226a:	4013      	ands	r3, r2
 800226c:	2b0c      	cmp	r3, #12
 800226e:	d00e      	beq.n	800228e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002270:	4b5f      	ldr	r3, [pc, #380]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	220c      	movs	r2, #12
 8002276:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002278:	2b08      	cmp	r3, #8
 800227a:	d114      	bne.n	80022a6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800227c:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	23c0      	movs	r3, #192	; 0xc0
 8002282:	025b      	lsls	r3, r3, #9
 8002284:	401a      	ands	r2, r3
 8002286:	23c0      	movs	r3, #192	; 0xc0
 8002288:	025b      	lsls	r3, r3, #9
 800228a:	429a      	cmp	r2, r3
 800228c:	d10b      	bne.n	80022a6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800228e:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	4013      	ands	r3, r2
 8002298:	d040      	beq.n	800231c <HAL_RCC_OscConfig+0x5a8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d03c      	beq.n	800231c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0e6      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d01b      	beq.n	80022e6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80022ae:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80022b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b2:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0249      	lsls	r1, r1, #9
 80022b8:	430a      	orrs	r2, r1
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fc4a 	bl	8000b54 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c6:	f7fe fc45 	bl	8000b54 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0cd      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80022da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	025b      	lsls	r3, r3, #9
 80022e0:	4013      	ands	r3, r2
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x552>
 80022e4:	e01b      	b.n	800231e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022e6:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80022e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80022ec:	4943      	ldr	r1, [pc, #268]	; (80023fc <HAL_RCC_OscConfig+0x688>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe fc2f 	bl	8000b54 <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022fc:	f7fe fc2a 	bl	8000b54 <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e0b2      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	4013      	ands	r3, r2
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x588>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800231c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2b00      	cmp	r3, #0
 8002324:	d100      	bne.n	8002328 <HAL_RCC_OscConfig+0x5b4>
 8002326:	e0a4      	b.n	8002472 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	220c      	movs	r2, #12
 800232e:	4013      	ands	r3, r2
 8002330:	2b08      	cmp	r3, #8
 8002332:	d100      	bne.n	8002336 <HAL_RCC_OscConfig+0x5c2>
 8002334:	e078      	b.n	8002428 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2b02      	cmp	r3, #2
 800233c:	d14c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002344:	492e      	ldr	r1, [pc, #184]	; (8002400 <HAL_RCC_OscConfig+0x68c>)
 8002346:	400a      	ands	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe fc03 	bl	8000b54 <HAL_GetTick>
 800234e:	0003      	movs	r3, r0
 8002350:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fbfe 	bl	8000b54 <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e086      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	049b      	lsls	r3, r3, #18
 800236e:	4013      	ands	r3, r2
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	220f      	movs	r2, #15
 8002378:	4393      	bics	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002382:	430a      	orrs	r2, r1
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <HAL_RCC_OscConfig+0x690>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	431a      	orrs	r2, r3
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0449      	lsls	r1, r1, #17
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fbd1 	bl	8000b54 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fbcc 	bl	8000b54 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e054      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	049b      	lsls	r3, r3, #18
 80023d2:	4013      	ands	r3, r2
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x644>
 80023d6:	e04c      	b.n	8002472 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_RCC_OscConfig+0x67c>)
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <HAL_RCC_OscConfig+0x68c>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fbb6 	bl	8000b54 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	e015      	b.n	800241a <HAL_RCC_OscConfig+0x6a6>
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	40021000 	.word	0x40021000
 80023f4:	00001388 	.word	0x00001388
 80023f8:	efffffff 	.word	0xefffffff
 80023fc:	fffeffff 	.word	0xfffeffff
 8002400:	feffffff 	.word	0xfeffffff
 8002404:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe fba4 	bl	8000b54 <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e02c      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_RCC_OscConfig+0x708>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	049b      	lsls	r3, r3, #18
 8002422:	4013      	ands	r3, r2
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x694>
 8002426:	e024      	b.n	8002472 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e01f      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_RCC_OscConfig+0x708>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_RCC_OscConfig+0x708>)
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	23c0      	movs	r3, #192	; 0xc0
 8002444:	025b      	lsls	r3, r3, #9
 8002446:	401a      	ands	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	429a      	cmp	r2, r3
 800244e:	d10e      	bne.n	800246e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	220f      	movs	r2, #15
 8002454:	401a      	ands	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d107      	bne.n	800246e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	23f0      	movs	r3, #240	; 0xf0
 8002462:	039b      	lsls	r3, r3, #14
 8002464:	401a      	ands	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b008      	add	sp, #32
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000

08002480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0bf      	b.n	8002614 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b61      	ldr	r3, [pc, #388]	; (800261c <HAL_RCC_ClockConfig+0x19c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	4013      	ands	r3, r2
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d911      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b5e      	ldr	r3, [pc, #376]	; (800261c <HAL_RCC_ClockConfig+0x19c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4393      	bics	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	4b5b      	ldr	r3, [pc, #364]	; (800261c <HAL_RCC_ClockConfig+0x19c>)
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCC_ClockConfig+0x19c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0a6      	b.n	8002614 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	d015      	beq.n	80024fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2204      	movs	r2, #4
 80024d6:	4013      	ands	r3, r2
 80024d8:	d006      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 80024e0:	21e0      	movs	r1, #224	; 0xe0
 80024e2:	00c9      	lsls	r1, r1, #3
 80024e4:	430a      	orrs	r2, r1
 80024e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	22f0      	movs	r2, #240	; 0xf0
 80024ee:	4393      	bics	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	d04c      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b44      	ldr	r3, [pc, #272]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	4013      	ands	r3, r2
 8002518:	d120      	bne.n	800255c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07a      	b.n	8002614 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	049b      	lsls	r3, r3, #18
 800252e:	4013      	ands	r3, r2
 8002530:	d114      	bne.n	800255c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06e      	b.n	8002614 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 8002540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	025b      	lsls	r3, r3, #9
 8002546:	4013      	ands	r3, r2
 8002548:	d108      	bne.n	800255c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e062      	b.n	8002614 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e05b      	b.n	8002614 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2203      	movs	r2, #3
 8002562:	4393      	bics	r3, r2
 8002564:	0019      	movs	r1, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002570:	f7fe faf0 	bl	8000b54 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002578:	e009      	b.n	800258e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257a:	f7fe faeb 	bl	8000b54 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	4a27      	ldr	r2, [pc, #156]	; (8002624 <HAL_RCC_ClockConfig+0x1a4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e042      	b.n	8002614 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	220c      	movs	r2, #12
 8002594:	401a      	ands	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	d1ec      	bne.n	800257a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_RCC_ClockConfig+0x19c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2201      	movs	r2, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d211      	bcs.n	80025d2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_RCC_ClockConfig+0x19c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2201      	movs	r2, #1
 80025b4:	4393      	bics	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_RCC_ClockConfig+0x19c>)
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_RCC_ClockConfig+0x19c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e020      	b.n	8002614 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2204      	movs	r2, #4
 80025d8:	4013      	ands	r3, r2
 80025da:	d009      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_RCC_ClockConfig+0x1a8>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025f0:	f000 f820 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80025f4:	0001      	movs	r1, r0
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x1a0>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	220f      	movs	r2, #15
 80025fe:	4013      	ands	r3, r2
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_RCC_ClockConfig+0x1ac>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	000a      	movs	r2, r1
 8002606:	40da      	lsrs	r2, r3
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1b0>)
 800260a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800260c:	2003      	movs	r0, #3
 800260e:	f7fe fa5b 	bl	8000ac8 <HAL_InitTick>
  
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b004      	add	sp, #16
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40022000 	.word	0x40022000
 8002620:	40021000 	.word	0x40021000
 8002624:	00001388 	.word	0x00001388
 8002628:	fffff8ff 	.word	0xfffff8ff
 800262c:	08003a4c 	.word	0x08003a4c
 8002630:	20000008 	.word	0x20000008

08002634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b08f      	sub	sp, #60	; 0x3c
 8002638:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800263a:	2314      	movs	r3, #20
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	4a38      	ldr	r2, [pc, #224]	; (8002720 <HAL_RCC_GetSysClockFreq+0xec>)
 8002640:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002642:	c313      	stmia	r3!, {r0, r1, r4}
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	4a36      	ldr	r2, [pc, #216]	; (8002724 <HAL_RCC_GetSysClockFreq+0xf0>)
 800264c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800264e:	c313      	stmia	r3!, {r0, r1, r4}
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
 800265c:	2300      	movs	r3, #0
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002668:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_RCC_GetSysClockFreq+0xf4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	220c      	movs	r2, #12
 8002672:	4013      	ands	r3, r2
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d047      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0xd4>
 8002678:	d849      	bhi.n	800270e <HAL_RCC_GetSysClockFreq+0xda>
 800267a:	2b04      	cmp	r3, #4
 800267c:	d002      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x50>
 800267e:	2b08      	cmp	r3, #8
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x56>
 8002682:	e044      	b.n	800270e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002688:	e044      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	220f      	movs	r2, #15
 8002690:	4013      	ands	r3, r2
 8002692:	2214      	movs	r2, #20
 8002694:	18ba      	adds	r2, r7, r2
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_RCC_GetSysClockFreq+0xf4>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	220f      	movs	r2, #15
 80026a0:	4013      	ands	r3, r2
 80026a2:	1d3a      	adds	r2, r7, #4
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	025b      	lsls	r3, r3, #9
 80026ae:	401a      	ands	r2, r3
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d109      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ba:	481c      	ldr	r0, [pc, #112]	; (800272c <HAL_RCC_GetSysClockFreq+0xf8>)
 80026bc:	f7fd fd24 	bl	8000108 <__udivsi3>
 80026c0:	0003      	movs	r3, r0
 80026c2:	001a      	movs	r2, r3
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	4353      	muls	r3, r2
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ca:	e01a      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80026cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ce:	23c0      	movs	r3, #192	; 0xc0
 80026d0:	025b      	lsls	r3, r3, #9
 80026d2:	401a      	ands	r2, r3
 80026d4:	23c0      	movs	r3, #192	; 0xc0
 80026d6:	025b      	lsls	r3, r3, #9
 80026d8:	429a      	cmp	r2, r3
 80026da:	d109      	bne.n	80026f0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026de:	4814      	ldr	r0, [pc, #80]	; (8002730 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026e0:	f7fd fd12 	bl	8000108 <__udivsi3>
 80026e4:	0003      	movs	r3, r0
 80026e6:	001a      	movs	r2, r3
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	4353      	muls	r3, r2
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
 80026ee:	e008      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026f2:	4810      	ldr	r0, [pc, #64]	; (8002734 <HAL_RCC_GetSysClockFreq+0x100>)
 80026f4:	f7fd fd08 	bl	8000108 <__udivsi3>
 80026f8:	0003      	movs	r3, r0
 80026fa:	001a      	movs	r2, r3
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	4353      	muls	r3, r2
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002706:	e005      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_GetSysClockFreq+0xfc>)
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800270c:	e002      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_GetSysClockFreq+0x100>)
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002712:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	b00f      	add	sp, #60	; 0x3c
 800271c:	bd90      	pop	{r4, r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	08003a2c 	.word	0x08003a2c
 8002724:	08003a3c 	.word	0x08003a3c
 8002728:	40021000 	.word	0x40021000
 800272c:	01e84800 	.word	0x01e84800
 8002730:	02dc6c00 	.word	0x02dc6c00
 8002734:	007a1200 	.word	0x007a1200

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e042      	b.n	80027d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	223d      	movs	r2, #61	; 0x3d
 800274e:	5c9b      	ldrb	r3, [r3, r2]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	223c      	movs	r2, #60	; 0x3c
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f7fe f8d5 	bl	8000910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	223d      	movs	r2, #61	; 0x3d
 800276a:	2102      	movs	r1, #2
 800276c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f000 fd19 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2246      	movs	r2, #70	; 0x46
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	223e      	movs	r2, #62	; 0x3e
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223f      	movs	r2, #63	; 0x3f
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2240      	movs	r2, #64	; 0x40
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2241      	movs	r2, #65	; 0x41
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2242      	movs	r2, #66	; 0x42
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2243      	movs	r2, #67	; 0x43
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2244      	movs	r2, #68	; 0x44
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2245      	movs	r2, #69	; 0x45
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223d      	movs	r2, #61	; 0x3d
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e042      	b.n	8002870 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	223d      	movs	r2, #61	; 0x3d
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223c      	movs	r2, #60	; 0x3c
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f000 f839 	bl	8002878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223d      	movs	r2, #61	; 0x3d
 800280a:	2102      	movs	r1, #2
 800280c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	0019      	movs	r1, r3
 8002818:	0010      	movs	r0, r2
 800281a:	f000 fcc9 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2246      	movs	r2, #70	; 0x46
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223e      	movs	r2, #62	; 0x3e
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	223f      	movs	r2, #63	; 0x3f
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2240      	movs	r2, #64	; 0x40
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2241      	movs	r2, #65	; 0x41
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2242      	movs	r2, #66	; 0x42
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2243      	movs	r2, #67	; 0x43
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2244      	movs	r2, #68	; 0x44
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2245      	movs	r2, #69	; 0x45
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223d      	movs	r2, #61	; 0x3d
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	230f      	movs	r3, #15
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d108      	bne.n	80028b2 <HAL_TIM_PWM_Start_IT+0x2a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	223e      	movs	r2, #62	; 0x3e
 80028a4:	5c9b      	ldrb	r3, [r3, r2]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	1e5a      	subs	r2, r3, #1
 80028ac:	4193      	sbcs	r3, r2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e01f      	b.n	80028f2 <HAL_TIM_PWM_Start_IT+0x6a>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d108      	bne.n	80028ca <HAL_TIM_PWM_Start_IT+0x42>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	223f      	movs	r2, #63	; 0x3f
 80028bc:	5c9b      	ldrb	r3, [r3, r2]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	4193      	sbcs	r3, r2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e013      	b.n	80028f2 <HAL_TIM_PWM_Start_IT+0x6a>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d108      	bne.n	80028e2 <HAL_TIM_PWM_Start_IT+0x5a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	5c9b      	ldrb	r3, [r3, r2]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	4193      	sbcs	r3, r2
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	e007      	b.n	80028f2 <HAL_TIM_PWM_Start_IT+0x6a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2241      	movs	r2, #65	; 0x41
 80028e6:	5c9b      	ldrb	r3, [r3, r2]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	4193      	sbcs	r3, r2
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0b7      	b.n	8002a6a <HAL_TIM_PWM_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <HAL_TIM_PWM_Start_IT+0x82>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	223e      	movs	r2, #62	; 0x3e
 8002904:	2102      	movs	r1, #2
 8002906:	5499      	strb	r1, [r3, r2]
 8002908:	e013      	b.n	8002932 <HAL_TIM_PWM_Start_IT+0xaa>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d104      	bne.n	800291a <HAL_TIM_PWM_Start_IT+0x92>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	223f      	movs	r2, #63	; 0x3f
 8002914:	2102      	movs	r1, #2
 8002916:	5499      	strb	r1, [r3, r2]
 8002918:	e00b      	b.n	8002932 <HAL_TIM_PWM_Start_IT+0xaa>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d104      	bne.n	800292a <HAL_TIM_PWM_Start_IT+0xa2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	2102      	movs	r1, #2
 8002926:	5499      	strb	r1, [r3, r2]
 8002928:	e003      	b.n	8002932 <HAL_TIM_PWM_Start_IT+0xaa>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2241      	movs	r2, #65	; 0x41
 800292e:	2102      	movs	r1, #2
 8002930:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d02a      	beq.n	800298e <HAL_TIM_PWM_Start_IT+0x106>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d830      	bhi.n	80029a0 <HAL_TIM_PWM_Start_IT+0x118>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d01b      	beq.n	800297c <HAL_TIM_PWM_Start_IT+0xf4>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d82a      	bhi.n	80029a0 <HAL_TIM_PWM_Start_IT+0x118>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_TIM_PWM_Start_IT+0xd0>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d009      	beq.n	800296a <HAL_TIM_PWM_Start_IT+0xe2>
 8002956:	e023      	b.n	80029a0 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2102      	movs	r1, #2
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]
      break;
 8002968:	e01f      	b.n	80029aa <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2104      	movs	r1, #4
 8002976:	430a      	orrs	r2, r1
 8002978:	60da      	str	r2, [r3, #12]
      break;
 800297a:	e016      	b.n	80029aa <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2108      	movs	r1, #8
 8002988:	430a      	orrs	r2, r1
 800298a:	60da      	str	r2, [r3, #12]
      break;
 800298c:	e00d      	b.n	80029aa <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2110      	movs	r1, #16
 800299a:	430a      	orrs	r2, r1
 800299c:	60da      	str	r2, [r3, #12]
      break;
 800299e:	e004      	b.n	80029aa <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 80029a0:	230f      	movs	r3, #15
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
      break;
 80029a8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80029aa:	230f      	movs	r3, #15
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d157      	bne.n	8002a64 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6839      	ldr	r1, [r7, #0]
 80029ba:	2201      	movs	r2, #1
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 ff0d 	bl	80037dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_TIM_PWM_Start_IT+0x162>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_TIM_PWM_Start_IT+0x162>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <HAL_TIM_PWM_Start_IT+0x1f4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_PWM_Start_IT+0x162>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_PWM_Start_IT+0x166>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_TIM_PWM_Start_IT+0x168>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	0209      	lsls	r1, r1, #8
 8002a02:	430a      	orrs	r2, r1
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00f      	beq.n	8002a30 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	05db      	lsls	r3, r3, #23
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d009      	beq.n	8002a30 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d111      	bne.n	8002a54 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2207      	movs	r2, #7
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d010      	beq.n	8002a64 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a52:	e007      	b.n	8002a64 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a64:	230f      	movs	r3, #15
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781b      	ldrb	r3, [r3, #0]
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40014000 	.word	0x40014000
 8002a7c:	40014400 	.word	0x40014400
 8002a80:	40014800 	.word	0x40014800
 8002a84:	40000400 	.word	0x40000400

08002a88 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	230f      	movs	r3, #15
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d02a      	beq.n	8002af6 <HAL_TIM_PWM_Stop_IT+0x6e>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d830      	bhi.n	8002b08 <HAL_TIM_PWM_Stop_IT+0x80>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d01b      	beq.n	8002ae4 <HAL_TIM_PWM_Stop_IT+0x5c>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d82a      	bhi.n	8002b08 <HAL_TIM_PWM_Stop_IT+0x80>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_TIM_PWM_Stop_IT+0x38>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d009      	beq.n	8002ad2 <HAL_TIM_PWM_Stop_IT+0x4a>
 8002abe:	e023      	b.n	8002b08 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2102      	movs	r1, #2
 8002acc:	438a      	bics	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]
      break;
 8002ad0:	e01f      	b.n	8002b12 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2104      	movs	r1, #4
 8002ade:	438a      	bics	r2, r1
 8002ae0:	60da      	str	r2, [r3, #12]
      break;
 8002ae2:	e016      	b.n	8002b12 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2108      	movs	r1, #8
 8002af0:	438a      	bics	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]
      break;
 8002af4:	e00d      	b.n	8002b12 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2110      	movs	r1, #16
 8002b02:	438a      	bics	r2, r1
 8002b04:	60da      	str	r2, [r3, #12]
      break;
 8002b06:	e004      	b.n	8002b12 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002b08:	230f      	movs	r3, #15
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
      break;
 8002b10:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002b12:	230f      	movs	r3, #15
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d000      	beq.n	8002b1e <HAL_TIM_PWM_Stop_IT+0x96>
 8002b1c:	e063      	b.n	8002be6 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	2200      	movs	r2, #0
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fe58 	bl	80037dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a30      	ldr	r2, [pc, #192]	; (8002bf4 <HAL_TIM_PWM_Stop_IT+0x16c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00e      	beq.n	8002b54 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <HAL_TIM_PWM_Stop_IT+0x170>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2d      	ldr	r2, [pc, #180]	; (8002bfc <HAL_TIM_PWM_Stop_IT+0x174>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2c      	ldr	r2, [pc, #176]	; (8002c00 <HAL_TIM_PWM_Stop_IT+0x178>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d101      	bne.n	8002b58 <HAL_TIM_PWM_Stop_IT+0xd0>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_TIM_PWM_Stop_IT+0xd2>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d013      	beq.n	8002b86 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	d10d      	bne.n	8002b86 <HAL_TIM_PWM_Stop_IT+0xfe>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <HAL_TIM_PWM_Stop_IT+0x180>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_PWM_Stop_IT+0xfe>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4922      	ldr	r1, [pc, #136]	; (8002c0c <HAL_TIM_PWM_Stop_IT+0x184>)
 8002b82:	400a      	ands	r2, r1
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d10d      	bne.n	8002bae <HAL_TIM_PWM_Stop_IT+0x126>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <HAL_TIM_PWM_Stop_IT+0x180>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d107      	bne.n	8002bae <HAL_TIM_PWM_Stop_IT+0x126>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	438a      	bics	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_TIM_PWM_Stop_IT+0x136>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	223e      	movs	r2, #62	; 0x3e
 8002bb8:	2101      	movs	r1, #1
 8002bba:	5499      	strb	r1, [r3, r2]
 8002bbc:	e013      	b.n	8002be6 <HAL_TIM_PWM_Stop_IT+0x15e>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d104      	bne.n	8002bce <HAL_TIM_PWM_Stop_IT+0x146>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	223f      	movs	r2, #63	; 0x3f
 8002bc8:	2101      	movs	r1, #1
 8002bca:	5499      	strb	r1, [r3, r2]
 8002bcc:	e00b      	b.n	8002be6 <HAL_TIM_PWM_Stop_IT+0x15e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_PWM_Stop_IT+0x156>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]
 8002bdc:	e003      	b.n	8002be6 <HAL_TIM_PWM_Stop_IT+0x15e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2241      	movs	r2, #65	; 0x41
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002be6:	230f      	movs	r3, #15
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	781b      	ldrb	r3, [r3, #0]
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800
 8002c04:	00001111 	.word	0x00001111
 8002c08:	00000444 	.word	0x00000444
 8002c0c:	ffff7fff 	.word	0xffff7fff

08002c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d124      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d11d      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 fa94 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002c58:	e007      	b.n	8002c6a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f7fd fd67 	bl	8000730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 fa93 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2204      	movs	r2, #4
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d125      	bne.n	8002cca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2204      	movs	r2, #4
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d11e      	bne.n	8002cca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2205      	movs	r2, #5
 8002c92:	4252      	negs	r2, r2
 8002c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 fa67 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002cb2:	e007      	b.n	8002cc4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7fd fd3a 	bl	8000730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f000 fa66 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d124      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2208      	movs	r2, #8
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d11d      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2209      	movs	r2, #9
 8002cec:	4252      	negs	r2, r2
 8002cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 fa3b 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002d0a:	e007      	b.n	8002d1c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7fd fd0e 	bl	8000730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 fa3a 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d125      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2210      	movs	r2, #16
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d11e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2211      	movs	r2, #17
 8002d44:	4252      	negs	r2, r2
 8002d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	23c0      	movs	r3, #192	; 0xc0
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 fa0e 	bl	8003180 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e007      	b.n	8002d76 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7fd fce1 	bl	8000730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 fa0d 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10f      	bne.n	8002daa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d108      	bne.n	8002daa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4252      	negs	r2, r2
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 f9e3 	bl	8003170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d10f      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b80      	cmp	r3, #128	; 0x80
 8002dc4:	d108      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2281      	movs	r2, #129	; 0x81
 8002dcc:	4252      	negs	r2, r2
 8002dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fdea 	bl	80039ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2240      	movs	r2, #64	; 0x40
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d10f      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d108      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2241      	movs	r2, #65	; 0x41
 8002dfa:	4252      	negs	r2, r2
 8002dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f9cd 	bl	80031a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d10f      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d108      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2221      	movs	r2, #33	; 0x21
 8002e28:	4252      	negs	r2, r2
 8002e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 fdb4 	bl	800399c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e48:	2317      	movs	r3, #23
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	223c      	movs	r2, #60	; 0x3c
 8002e54:	5c9b      	ldrb	r3, [r3, r2]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0ad      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	223c      	movs	r2, #60	; 0x3c
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d100      	bne.n	8002e6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e6c:	e076      	b.n	8002f5c <HAL_TIM_PWM_ConfigChannel+0x120>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d900      	bls.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002e74:	e095      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d04e      	beq.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d900      	bls.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002e82:	e08e      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d021      	beq.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002e90:	e087      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	0011      	movs	r1, r2
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f000 fa08 	bl	80032b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2108      	movs	r1, #8
 8002eac:	430a      	orrs	r2, r1
 8002eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2104      	movs	r1, #4
 8002ebc:	438a      	bics	r2, r1
 8002ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	619a      	str	r2, [r3, #24]
      break;
 8002ed2:	e06b      	b.n	8002fac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	0011      	movs	r1, r2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 fa6f 	bl	80033c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	0109      	lsls	r1, r1, #4
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4931      	ldr	r1, [pc, #196]	; (8002fc4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	619a      	str	r2, [r3, #24]
      break;
 8002f18:	e048      	b.n	8002fac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	0011      	movs	r1, r2
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 fad0 	bl	80034c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2108      	movs	r1, #8
 8002f34:	430a      	orrs	r2, r1
 8002f36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2104      	movs	r1, #4
 8002f44:	438a      	bics	r2, r1
 8002f46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69d9      	ldr	r1, [r3, #28]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	61da      	str	r2, [r3, #28]
      break;
 8002f5a:	e027      	b.n	8002fac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	0011      	movs	r1, r2
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 fb35 	bl	80035d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	0109      	lsls	r1, r1, #4
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	490f      	ldr	r1, [pc, #60]	; (8002fc4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f88:	400a      	ands	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69d9      	ldr	r1, [r3, #28]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
      break;
 8002fa0:	e004      	b.n	8002fac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002fa2:	2317      	movs	r3, #23
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
      break;
 8002faa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	223c      	movs	r2, #60	; 0x3c
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5499      	strb	r1, [r3, r2]

  return status;
 8002fb4:	2317      	movs	r3, #23
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	fffffbff 	.word	0xfffffbff

08002fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	230f      	movs	r3, #15
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	223c      	movs	r2, #60	; 0x3c
 8002fde:	5c9b      	ldrb	r3, [r3, r2]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIM_ConfigClockSource+0x20>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e0bc      	b.n	8003162 <HAL_TIM_ConfigClockSource+0x19a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	223c      	movs	r2, #60	; 0x3c
 8002fec:	2101      	movs	r1, #1
 8002fee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	223d      	movs	r2, #61	; 0x3d
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2277      	movs	r2, #119	; 0x77
 8003004:	4393      	bics	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_TIM_ConfigClockSource+0x1a4>)
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2280      	movs	r2, #128	; 0x80
 800301e:	0192      	lsls	r2, r2, #6
 8003020:	4293      	cmp	r3, r2
 8003022:	d040      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xde>
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	0192      	lsls	r2, r2, #6
 8003028:	4293      	cmp	r3, r2
 800302a:	d900      	bls.n	800302e <HAL_TIM_ConfigClockSource+0x66>
 800302c:	e088      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	0152      	lsls	r2, r2, #5
 8003032:	4293      	cmp	r3, r2
 8003034:	d100      	bne.n	8003038 <HAL_TIM_ConfigClockSource+0x70>
 8003036:	e088      	b.n	800314a <HAL_TIM_ConfigClockSource+0x182>
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0152      	lsls	r2, r2, #5
 800303c:	4293      	cmp	r3, r2
 800303e:	d900      	bls.n	8003042 <HAL_TIM_ConfigClockSource+0x7a>
 8003040:	e07e      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
 8003042:	2b70      	cmp	r3, #112	; 0x70
 8003044:	d018      	beq.n	8003078 <HAL_TIM_ConfigClockSource+0xb0>
 8003046:	d900      	bls.n	800304a <HAL_TIM_ConfigClockSource+0x82>
 8003048:	e07a      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
 800304a:	2b60      	cmp	r3, #96	; 0x60
 800304c:	d04f      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x126>
 800304e:	d900      	bls.n	8003052 <HAL_TIM_ConfigClockSource+0x8a>
 8003050:	e076      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
 8003052:	2b50      	cmp	r3, #80	; 0x50
 8003054:	d03b      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x106>
 8003056:	d900      	bls.n	800305a <HAL_TIM_ConfigClockSource+0x92>
 8003058:	e072      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d057      	beq.n	800310e <HAL_TIM_ConfigClockSource+0x146>
 800305e:	d900      	bls.n	8003062 <HAL_TIM_ConfigClockSource+0x9a>
 8003060:	e06e      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
 8003062:	2b30      	cmp	r3, #48	; 0x30
 8003064:	d063      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x166>
 8003066:	d86b      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
 8003068:	2b20      	cmp	r3, #32
 800306a:	d060      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x166>
 800306c:	d868      	bhi.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d05d      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x166>
 8003072:	2b10      	cmp	r3, #16
 8003074:	d05b      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x166>
 8003076:	e063      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f000 fb88 	bl	800379c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2277      	movs	r2, #119	; 0x77
 8003098:	4313      	orrs	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e052      	b.n	800314c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6899      	ldr	r1, [r3, #8]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f000 fb71 	bl	800379c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	01c9      	lsls	r1, r1, #7
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
      break;
 80030cc:	e03e      	b.n	800314c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	001a      	movs	r2, r3
 80030dc:	f000 fae4 	bl	80036a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2150      	movs	r1, #80	; 0x50
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 fb3e 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e02e      	b.n	800314c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	001a      	movs	r2, r3
 80030fc:	f000 fb02 	bl	8003704 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2160      	movs	r1, #96	; 0x60
 8003106:	0018      	movs	r0, r3
 8003108:	f000 fb2e 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 800310c:	e01e      	b.n	800314c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	001a      	movs	r2, r3
 800311c:	f000 fac4 	bl	80036a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	0018      	movs	r0, r3
 8003128:	f000 fb1e 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 800312c:	e00e      	b.n	800314c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	0019      	movs	r1, r3
 8003138:	0010      	movs	r0, r2
 800313a:	f000 fb15 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 800313e:	e005      	b.n	800314c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003140:	230f      	movs	r3, #15
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
      break;
 8003148:	e000      	b.n	800314c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800314a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	223d      	movs	r2, #61	; 0x3d
 8003150:	2101      	movs	r1, #1
 8003152:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	223c      	movs	r2, #60	; 0x3c
 8003158:	2100      	movs	r1, #0
 800315a:	5499      	strb	r1, [r3, r2]

  return status;
 800315c:	230f      	movs	r3, #15
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	781b      	ldrb	r3, [r3, #0]
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	ffff00ff 	.word	0xffff00ff

08003170 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b002      	add	sp, #8
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b002      	add	sp, #8
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a34      	ldr	r2, [pc, #208]	; (8003294 <TIM_Base_SetConfig+0xe4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d008      	beq.n	80031da <TIM_Base_SetConfig+0x2a>
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0x2a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a30      	ldr	r2, [pc, #192]	; (8003298 <TIM_Base_SetConfig+0xe8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2270      	movs	r2, #112	; 0x70
 80031de:	4393      	bics	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a29      	ldr	r2, [pc, #164]	; (8003294 <TIM_Base_SetConfig+0xe4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <TIM_Base_SetConfig+0x76>
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	05db      	lsls	r3, r3, #23
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0x76>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a25      	ldr	r2, [pc, #148]	; (8003298 <TIM_Base_SetConfig+0xe8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0x76>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a24      	ldr	r2, [pc, #144]	; (800329c <TIM_Base_SetConfig+0xec>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0x76>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a23      	ldr	r2, [pc, #140]	; (80032a0 <TIM_Base_SetConfig+0xf0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0x76>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <TIM_Base_SetConfig+0xf4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0x76>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <TIM_Base_SetConfig+0xf8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a20      	ldr	r2, [pc, #128]	; (80032ac <TIM_Base_SetConfig+0xfc>)
 800322a:	4013      	ands	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	4393      	bics	r3, r2
 800323e:	001a      	movs	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <TIM_Base_SetConfig+0xe4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <TIM_Base_SetConfig+0xce>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <TIM_Base_SetConfig+0xf0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <TIM_Base_SetConfig+0xce>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <TIM_Base_SetConfig+0xf4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <TIM_Base_SetConfig+0xce>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a0b      	ldr	r2, [pc, #44]	; (80032a8 <TIM_Base_SetConfig+0xf8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d103      	bne.n	8003286 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	615a      	str	r2, [r3, #20]
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b004      	add	sp, #16
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400
 800329c:	40002000 	.word	0x40002000
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800
 80032ac:	fffffcff 	.word	0xfffffcff

080032b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	2201      	movs	r2, #1
 80032c0:	4393      	bics	r3, r2
 80032c2:	001a      	movs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2270      	movs	r2, #112	; 0x70
 80032de:	4393      	bics	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2203      	movs	r2, #3
 80032e6:	4393      	bics	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2202      	movs	r2, #2
 80032f8:	4393      	bics	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <TIM_OC1_SetConfig+0xf8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00b      	beq.n	8003326 <TIM_OC1_SetConfig+0x76>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <TIM_OC1_SetConfig+0xfc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <TIM_OC1_SetConfig+0x76>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <TIM_OC1_SetConfig+0x100>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_OC1_SetConfig+0x76>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <TIM_OC1_SetConfig+0x104>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10c      	bne.n	8003340 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2208      	movs	r2, #8
 800332a:	4393      	bics	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2204      	movs	r2, #4
 800333c:	4393      	bics	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <TIM_OC1_SetConfig+0xf8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_OC1_SetConfig+0xb0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a18      	ldr	r2, [pc, #96]	; (80033ac <TIM_OC1_SetConfig+0xfc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <TIM_OC1_SetConfig+0xb0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <TIM_OC1_SetConfig+0x100>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_OC1_SetConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <TIM_OC1_SetConfig+0x104>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d111      	bne.n	8003384 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <TIM_OC1_SetConfig+0x108>)
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4a14      	ldr	r2, [pc, #80]	; (80033bc <TIM_OC1_SetConfig+0x10c>)
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	621a      	str	r2, [r3, #32]
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b006      	add	sp, #24
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	fffffeff 	.word	0xfffffeff
 80033bc:	fffffdff 	.word	0xfffffdff

080033c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	2210      	movs	r2, #16
 80033d0:	4393      	bics	r3, r2
 80033d2:	001a      	movs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a2e      	ldr	r2, [pc, #184]	; (80034a8 <TIM_OC2_SetConfig+0xe8>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <TIM_OC2_SetConfig+0xec>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2220      	movs	r2, #32
 800340a:	4393      	bics	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <TIM_OC2_SetConfig+0xf0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10d      	bne.n	800343e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	4393      	bics	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2240      	movs	r2, #64	; 0x40
 800343a:	4393      	bics	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <TIM_OC2_SetConfig+0xf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00b      	beq.n	800345e <TIM_OC2_SetConfig+0x9e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <TIM_OC2_SetConfig+0xf4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <TIM_OC2_SetConfig+0x9e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <TIM_OC2_SetConfig+0xf8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_OC2_SetConfig+0x9e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a18      	ldr	r2, [pc, #96]	; (80034bc <TIM_OC2_SetConfig+0xfc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d113      	bne.n	8003486 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <TIM_OC2_SetConfig+0x100>)
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <TIM_OC2_SetConfig+0x104>)
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b006      	add	sp, #24
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	ffff8fff 	.word	0xffff8fff
 80034ac:	fffffcff 	.word	0xfffffcff
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40014400 	.word	0x40014400
 80034bc:	40014800 	.word	0x40014800
 80034c0:	fffffbff 	.word	0xfffffbff
 80034c4:	fffff7ff 	.word	0xfffff7ff

080034c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a35      	ldr	r2, [pc, #212]	; (80035ac <TIM_OC3_SetConfig+0xe4>)
 80034d8:	401a      	ands	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2270      	movs	r2, #112	; 0x70
 80034f4:	4393      	bics	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2203      	movs	r2, #3
 80034fc:	4393      	bics	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	4a28      	ldr	r2, [pc, #160]	; (80035b0 <TIM_OC3_SetConfig+0xe8>)
 800350e:	4013      	ands	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a24      	ldr	r2, [pc, #144]	; (80035b4 <TIM_OC3_SetConfig+0xec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10d      	bne.n	8003542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <TIM_OC3_SetConfig+0xf0>)
 800352a:	4013      	ands	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <TIM_OC3_SetConfig+0xf4>)
 800353e:	4013      	ands	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <TIM_OC3_SetConfig+0xec>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00b      	beq.n	8003562 <TIM_OC3_SetConfig+0x9a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <TIM_OC3_SetConfig+0xf8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <TIM_OC3_SetConfig+0x9a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1b      	ldr	r2, [pc, #108]	; (80035c4 <TIM_OC3_SetConfig+0xfc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_OC3_SetConfig+0x9a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <TIM_OC3_SetConfig+0x100>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d113      	bne.n	800358a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <TIM_OC3_SetConfig+0x104>)
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <TIM_OC3_SetConfig+0x108>)
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b006      	add	sp, #24
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	fffffeff 	.word	0xfffffeff
 80035b0:	fffffdff 	.word	0xfffffdff
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	fffff7ff 	.word	0xfffff7ff
 80035bc:	fffffbff 	.word	0xfffffbff
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800
 80035cc:	ffffefff 	.word	0xffffefff
 80035d0:	ffffdfff 	.word	0xffffdfff

080035d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a28      	ldr	r2, [pc, #160]	; (8003684 <TIM_OC4_SetConfig+0xb0>)
 80035e4:	401a      	ands	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a22      	ldr	r2, [pc, #136]	; (8003688 <TIM_OC4_SetConfig+0xb4>)
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <TIM_OC4_SetConfig+0xb8>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <TIM_OC4_SetConfig+0xbc>)
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	031b      	lsls	r3, r3, #12
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a19      	ldr	r2, [pc, #100]	; (8003694 <TIM_OC4_SetConfig+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_OC4_SetConfig+0x78>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <TIM_OC4_SetConfig+0xc4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_OC4_SetConfig+0x78>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <TIM_OC4_SetConfig+0xc8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_OC4_SetConfig+0x78>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <TIM_OC4_SetConfig+0xcc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d109      	bne.n	8003660 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <TIM_OC4_SetConfig+0xd0>)
 8003650:	4013      	ands	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b006      	add	sp, #24
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	ffffefff 	.word	0xffffefff
 8003688:	ffff8fff 	.word	0xffff8fff
 800368c:	fffffcff 	.word	0xfffffcff
 8003690:	ffffdfff 	.word	0xffffdfff
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800
 80036a4:	ffffbfff 	.word	0xffffbfff

080036a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	2201      	movs	r2, #1
 80036c0:	4393      	bics	r3, r2
 80036c2:	001a      	movs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	22f0      	movs	r2, #240	; 0xf0
 80036d2:	4393      	bics	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	220a      	movs	r2, #10
 80036e4:	4393      	bics	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	621a      	str	r2, [r3, #32]
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b006      	add	sp, #24
 8003702:	bd80      	pop	{r7, pc}

08003704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	2210      	movs	r2, #16
 8003716:	4393      	bics	r3, r2
 8003718:	001a      	movs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <TIM_TI2_ConfigInputStage+0x60>)
 800372e:	4013      	ands	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	031b      	lsls	r3, r3, #12
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	22a0      	movs	r2, #160	; 0xa0
 8003740:	4393      	bics	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b006      	add	sp, #24
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	ffff0fff 	.word	0xffff0fff

08003768 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2270      	movs	r2, #112	; 0x70
 800377c:	4393      	bics	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	2207      	movs	r2, #7
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	609a      	str	r2, [r3, #8]
}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b004      	add	sp, #16
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <TIM_ETR_SetConfig+0x3c>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	021a      	lsls	r2, r3, #8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	431a      	orrs	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b006      	add	sp, #24
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	ffff00ff 	.word	0xffff00ff

080037dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	221f      	movs	r2, #31
 80037ec:	4013      	ands	r3, r2
 80037ee:	2201      	movs	r2, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	0013      	movs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	43d2      	mvns	r2, r2
 80037fe:	401a      	ands	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	211f      	movs	r1, #31
 800380c:	400b      	ands	r3, r1
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4099      	lsls	r1, r3
 8003812:	000b      	movs	r3, r1
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b006      	add	sp, #24
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	223c      	movs	r2, #60	; 0x3c
 8003832:	5c9b      	ldrb	r3, [r3, r2]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003838:	2302      	movs	r3, #2
 800383a:	e047      	b.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	223c      	movs	r2, #60	; 0x3c
 8003840:	2101      	movs	r1, #1
 8003842:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	223d      	movs	r2, #61	; 0x3d
 8003848:	2102      	movs	r1, #2
 800384a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2270      	movs	r2, #112	; 0x70
 8003860:	4393      	bics	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00f      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	05db      	lsls	r3, r3, #23
 8003888:	429a      	cmp	r2, r3
 800388a:	d009      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10c      	bne.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	4393      	bics	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223d      	movs	r2, #61	; 0x3d
 80038be:	2101      	movs	r1, #1
 80038c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	223c      	movs	r2, #60	; 0x3c
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40014000 	.word	0x40014000

080038e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	223c      	movs	r2, #60	; 0x3c
 80038f2:	5c9b      	ldrb	r3, [r3, r2]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e03e      	b.n	800397a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	223c      	movs	r2, #60	; 0x3c
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	22ff      	movs	r2, #255	; 0xff
 8003908:	4393      	bics	r3, r2
 800390a:	001a      	movs	r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003918:	401a      	ands	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003926:	401a      	ands	r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a16      	ldr	r2, [pc, #88]	; (800398c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003934:	401a      	ands	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a13      	ldr	r2, [pc, #76]	; (8003990 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003942:	401a      	ands	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a11      	ldr	r2, [pc, #68]	; (8003994 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003950:	401a      	ands	r2, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800395e:	401a      	ands	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	223c      	movs	r2, #60	; 0x3c
 8003974:	2100      	movs	r1, #0
 8003976:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b004      	add	sp, #16
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	fffffcff 	.word	0xfffffcff
 8003988:	fffffbff 	.word	0xfffffbff
 800398c:	fffff7ff 	.word	0xfffff7ff
 8003990:	ffffefff 	.word	0xffffefff
 8003994:	ffffdfff 	.word	0xffffdfff
 8003998:	ffffbfff 	.word	0xffffbfff

0800399c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a4:	46c0      	nop			; (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b002      	add	sp, #8
 80039ba:	bd80      	pop	{r7, pc}

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	2600      	movs	r6, #0
 80039c0:	4d0c      	ldr	r5, [pc, #48]	; (80039f4 <__libc_init_array+0x38>)
 80039c2:	4c0d      	ldr	r4, [pc, #52]	; (80039f8 <__libc_init_array+0x3c>)
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	2600      	movs	r6, #0
 80039ce:	f000 f821 	bl	8003a14 <_init>
 80039d2:	4d0a      	ldr	r5, [pc, #40]	; (80039fc <__libc_init_array+0x40>)
 80039d4:	4c0a      	ldr	r4, [pc, #40]	; (8003a00 <__libc_init_array+0x44>)
 80039d6:	1b64      	subs	r4, r4, r5
 80039d8:	10a4      	asrs	r4, r4, #2
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	00b3      	lsls	r3, r6, #2
 80039e2:	58eb      	ldr	r3, [r5, r3]
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	00b3      	lsls	r3, r6, #2
 80039ec:	58eb      	ldr	r3, [r5, r3]
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08003a5c 	.word	0x08003a5c
 80039f8:	08003a5c 	.word	0x08003a5c
 80039fc:	08003a5c 	.word	0x08003a5c
 8003a00:	08003a60 	.word	0x08003a60

08003a04 <memset>:
 8003a04:	0003      	movs	r3, r0
 8003a06:	1882      	adds	r2, r0, r2
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d100      	bne.n	8003a0e <memset+0xa>
 8003a0c:	4770      	bx	lr
 8003a0e:	7019      	strb	r1, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	e7f9      	b.n	8003a08 <memset+0x4>

08003a14 <_init>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	469e      	mov	lr, r3
 8003a1e:	4770      	bx	lr

08003a20 <_fini>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr
