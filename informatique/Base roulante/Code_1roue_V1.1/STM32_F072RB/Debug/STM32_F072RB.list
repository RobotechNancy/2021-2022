
STM32_F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac4  08002ac4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ac4  08002ac4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ac4  08002ac4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac8  08002ac8  00012ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08002ad8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002ad8  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9bb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ea  00000000  00000000  0002a9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f1  00000000  00000000  0002d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adb0  00000000  00000000  00046d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096da9  00000000  00000000  00051b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e88e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b8  00000000  00000000  000e8938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a78 	.word	0x08002a78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002a78 	.word	0x08002a78

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CAN_Config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CAN_Config(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000226:	003b      	movs	r3, r7
 8000228:	2200      	movs	r2, #0
 800022a:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 800022c:	003b      	movs	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 8000232:	003b      	movs	r3, r7
 8000234:	2201      	movs	r2, #1
 8000236:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x325 << 5; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000238:	003b      	movs	r3, r7
 800023a:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <CAN_Config+0x88>)
 800023c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0; //
 800023e:	003b      	movs	r3, r7
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFF << 5; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000244:	003b      	movs	r3, r7
 8000246:	4a19      	ldr	r2, [pc, #100]	; (80002ac <CAN_Config+0x8c>)
 8000248:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800024a:	003b      	movs	r3, r7
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000256:	003b      	movs	r3, r7
 8000258:	2201      	movs	r2, #1
 800025a:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 800025c:	003b      	movs	r3, r7
 800025e:	220e      	movs	r2, #14
 8000260:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000262:	003a      	movs	r2, r7
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <CAN_Config+0x90>)
 8000266:	0011      	movs	r1, r2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fc89 	bl	8000b80 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <CAN_Config+0x90>)
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fd77 	bl	8000d64 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <CAN_Config+0x90>)
 8000278:	2102      	movs	r1, #2
 800027a:	0018      	movs	r0, r3
 800027c:	f000 ffb2 	bl	80011e4 <HAL_CAN_ActivateNotification>

	RxHeader.StdId = 0x324; //adresse dans l'en-tête du mesage reçu
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <CAN_Config+0x94>)
 8000282:	22c9      	movs	r2, #201	; 0xc9
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]
	RxHeader.FilterMatchIndex = 0; //degré de concordance entre l'entête et les informations renseignées.
 8000288:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <CAN_Config+0x94>)
 800028a:	2200      	movs	r2, #0
 800028c:	619a      	str	r2, [r3, #24]
	RxHeader.DLC = 2; // taille de la donnée
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <CAN_Config+0x94>)
 8000290:	2202      	movs	r2, #2
 8000292:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD; //type d'identifieur can
 8000294:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <CAN_Config+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA; //type de message (ici data)
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <CAN_Config+0x94>)
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]

	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)

}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b00a      	add	sp, #40	; 0x28
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	000064a0 	.word	0x000064a0
 80002ac:	0001ffe0 	.word	0x0001ffe0
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	200000cc 	.word	0x200000cc

080002b8 <HAL_CAN_RxFifo0MsgPendingCallback>:

//fct interrupt (qd stm reçoit msg)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	//HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
	// Traitement des données
	uint8_t RxData[8];
	//réception du message
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80002c0:	2408      	movs	r4, #8
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	2100      	movs	r1, #0
 80002ca:	f000 fe6f 	bl	8000fac <HAL_CAN_GetRxMessage>

	transmit(); //(accusé de réception)
 80002ce:	f000 f815 	bl	80002fc <transmit>

	stop(RxData[0]);
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 f986 	bl	80005e8 <stop>
	change_dir(RxData[1]);
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	785b      	ldrb	r3, [r3, #1]
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 f999 	bl	8000618 <change_dir>
	change_step(RxData[2]);
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	789b      	ldrb	r3, [r3, #2]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f9b6 	bl	800065c <change_step>
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b005      	add	sp, #20
 80002f6:	bd90      	pop	{r4, r7, pc}
 80002f8:	200000cc 	.word	0x200000cc

080002fc <transmit>:

//accusé de réception
void transmit(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
	//Définition de l'en-tête de transmission:
	CAN_TxHeaderTypeDef txHeader;

	txHeader.DLC = 3; // taille des données à transmettre en octets
 8000302:	2008      	movs	r0, #8
 8000304:	183b      	adds	r3, r7, r0
 8000306:	2203      	movs	r2, #3
 8000308:	611a      	str	r2, [r3, #16]
	txHeader.StdId = 0x324; //adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage
 800030a:	183b      	adds	r3, r7, r0
 800030c:	22c9      	movs	r2, #201	; 0xc9
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	601a      	str	r2, [r3, #0]
	txHeader.IDE = CAN_ID_STD; //on choisit l'adressage standard
 8000312:	183b      	adds	r3, r7, r0
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 8000318:	183b      	adds	r3, r7, r0
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 800031e:	183b      	adds	r3, r7, r0
 8000320:	2200      	movs	r2, #0
 8000322:	751a      	strb	r2, [r3, #20]

	uint8_t data[3] = { 's', 'l', 't' }; // création du message
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <transmit+0x48>)
 8000328:	8811      	ldrh	r1, [r2, #0]
 800032a:	8019      	strh	r1, [r3, #0]
 800032c:	7892      	ldrb	r2, [r2, #2]
 800032e:	709a      	strb	r2, [r3, #2]

	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &TxMailbox); //Ajouter le message (avec en-tête) à l'une des mailbox (disponible).
 8000330:	003b      	movs	r3, r7
 8000332:	1d3a      	adds	r2, r7, #4
 8000334:	1839      	adds	r1, r7, r0
 8000336:	4804      	ldr	r0, [pc, #16]	; (8000348 <transmit+0x4c>)
 8000338:	f000 fd5a 	bl	8000df0 <HAL_CAN_AddTxMessage>

	//HAL_CAN_AddTxMessage(&hcan, (uint8_t*)data, sizeof(data), 1000);

}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b008      	add	sp, #32
 8000342:	bd80      	pop	{r7, pc}
 8000344:	08002a90 	.word	0x08002a90
 8000348:	2000002c 	.word	0x2000002c

0800034c <transmit2>:
void transmit2(int msg) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	//Définition de l'en-tête de transmission:
		CAN_TxHeaderTypeDef txHeader;

		txHeader.DLC = 3; // taille des données à transmettre en octets
 8000354:	2110      	movs	r1, #16
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2203      	movs	r2, #3
 800035a:	611a      	str	r2, [r3, #16]
		txHeader.StdId = 0x324; //adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage
 800035c:	187b      	adds	r3, r7, r1
 800035e:	22c9      	movs	r2, #201	; 0xc9
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	601a      	str	r2, [r3, #0]
		txHeader.IDE = CAN_ID_STD; //on choisit l'adressage standard
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
		txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
		txHeader.TransmitGlobalTime = DISABLE;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	751a      	strb	r2, [r3, #20]

		uint8_t data[3] = { 0x00, 0, msg }; // création du message
 8000376:	200c      	movs	r0, #12
 8000378:	183b      	adds	r3, r7, r0
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
 800037e:	183b      	adds	r3, r7, r0
 8000380:	2200      	movs	r2, #0
 8000382:	705a      	strb	r2, [r3, #1]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	183b      	adds	r3, r7, r0
 800038a:	709a      	strb	r2, [r3, #2]

		uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

		HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &TxMailbox); //Ajouter le message (avec en-tête) à l'une des mailbox (disponible).
 800038c:	2308      	movs	r3, #8
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	183a      	adds	r2, r7, r0
 8000392:	1879      	adds	r1, r7, r1
 8000394:	4803      	ldr	r0, [pc, #12]	; (80003a4 <transmit2+0x58>)
 8000396:	f000 fd2b 	bl	8000df0 <HAL_CAN_AddTxMessage>

		//HAL_CAN_AddTxMessage(&hcan, (uint8_t*)data, sizeof(data), 1000);


}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b00a      	add	sp, #40	; 0x28
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	2000002c 	.word	0x2000002c

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fa86 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f826 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f000 f8ce 	bl	8000554 <MX_GPIO_Init>
  MX_TIM14_Init();
 80003b8:	f000 f8a6 	bl	8000508 <MX_TIM14_Init>
  MX_CAN_Init();
 80003bc:	f000 f86c 	bl	8000498 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config();
 80003c0:	f7ff ff2e 	bl	8000220 <CAN_Config>

    //start timer
    HAL_TIM_Base_Start_IT(&htim14);
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <main+0x54>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f002 f90a 	bl	80025e0 <HAL_TIM_Base_Start_IT>


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80003cc:	2390      	movs	r3, #144	; 0x90
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	2200      	movs	r2, #0
 80003d2:	2120      	movs	r1, #32
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 fb99 	bl	8001b0c <HAL_GPIO_WritePin>
    //Driver 1
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 80003da:	2380      	movs	r3, #128	; 0x80
 80003dc:	0099      	lsls	r1, r3, #2
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	2200      	movs	r2, #0
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fb91 	bl	8001b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	00d9      	lsls	r1, r3, #3
 80003ee:	2390      	movs	r3, #144	; 0x90
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	2200      	movs	r2, #0
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 fb89 	bl	8001b0c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    //transmit();
    while (1)
 80003fa:	e7fe      	b.n	80003fa <main+0x52>
 80003fc:	2000006c 	.word	0x2000006c

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b093      	sub	sp, #76	; 0x4c
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	2414      	movs	r4, #20
 8000408:	193b      	adds	r3, r7, r4
 800040a:	0018      	movs	r0, r3
 800040c:	2334      	movs	r3, #52	; 0x34
 800040e:	001a      	movs	r2, r3
 8000410:	2100      	movs	r1, #0
 8000412:	f002 fb29 	bl	8002a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	0018      	movs	r0, r3
 800041a:	2310      	movs	r3, #16
 800041c:	001a      	movs	r2, r3
 800041e:	2100      	movs	r1, #0
 8000420:	f002 fb22 	bl	8002a68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	0021      	movs	r1, r4
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2202      	movs	r2, #2
 800042a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2201      	movs	r2, #1
 8000430:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2210      	movs	r2, #16
 8000436:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2202      	movs	r2, #2
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0212      	lsls	r2, r2, #8
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2280      	movs	r2, #128	; 0x80
 800044a:	0352      	lsls	r2, r2, #13
 800044c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	187b      	adds	r3, r7, r1
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fb90 	bl	8001b7c <HAL_RCC_OscConfig>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000460:	f000 f90e 	bl	8000680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2207      	movs	r2, #7
 8000468:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2202      	movs	r2, #2
 800046e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2101      	movs	r1, #1
 8000480:	0018      	movs	r0, r3
 8000482:	f001 ff01 	bl	8002288 <HAL_RCC_ClockConfig>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800048a:	f000 f8f9 	bl	8000680 <Error_Handler>
  }
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b013      	add	sp, #76	; 0x4c
 8000494:	bd90      	pop	{r4, r7, pc}
	...

08000498 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_CAN_Init+0x68>)
 800049e:	4a19      	ldr	r2, [pc, #100]	; (8000504 <MX_CAN_Init+0x6c>)
 80004a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <MX_CAN_Init+0x68>)
 80004a4:	220c      	movs	r2, #12
 80004a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_CAN_Init+0x68>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_CAN_Init+0x68>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_CAN_Init+0x68>)
 80004b6:	22e0      	movs	r2, #224	; 0xe0
 80004b8:	02d2      	lsls	r2, r2, #11
 80004ba:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_CAN_Init+0x68>)
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	0352      	lsls	r2, r2, #13
 80004c2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_CAN_Init+0x68>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <MX_CAN_Init+0x68>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_CAN_Init+0x68>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MX_CAN_Init+0x68>)
 80004d8:	2200      	movs	r2, #0
 80004da:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_CAN_Init+0x68>)
 80004de:	2200      	movs	r2, #0
 80004e0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <MX_CAN_Init+0x68>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <MX_CAN_Init+0x68>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fa4a 	bl	8000984 <HAL_CAN_Init>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004f4:	f000 f8c4 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	2000002c 	.word	0x2000002c
 8000504:	40006400 	.word	0x40006400

08000508 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_TIM14_Init+0x40>)
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <MX_TIM14_Init+0x44>)
 8000510:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800;
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MX_TIM14_Init+0x40>)
 8000514:	2296      	movs	r2, #150	; 0x96
 8000516:	0152      	lsls	r2, r2, #5
 8000518:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_TIM14_Init+0x40>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_TIM14_Init+0x40>)
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MX_TIM14_Init+0x48>)
 8000524:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_TIM14_Init+0x40>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MX_TIM14_Init+0x40>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MX_TIM14_Init+0x40>)
 8000534:	0018      	movs	r0, r3
 8000536:	f002 f803 	bl	8002540 <HAL_TIM_Base_Init>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800053e:	f000 f89f 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000006c 	.word	0x2000006c
 800054c:	40002000 	.word	0x40002000
 8000550:	0000ffff 	.word	0x0000ffff

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	240c      	movs	r4, #12
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2314      	movs	r3, #20
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 fa7f 	bl	8002a68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056a:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_GPIO_Init+0x90>)
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0x90>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	03c9      	lsls	r1, r1, #15
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0x90>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	03db      	lsls	r3, r3, #15
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_GPIO_Init+0x90>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_GPIO_Init+0x90>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0289      	lsls	r1, r1, #10
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_GPIO_Init+0x90>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	029b      	lsls	r3, r3, #10
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80005a2:	23c4      	movs	r3, #196	; 0xc4
 80005a4:	00d9      	lsls	r1, r3, #3
 80005a6:	2390      	movs	r3, #144	; 0x90
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	2200      	movs	r2, #0
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 faad 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	22c4      	movs	r2, #196	; 0xc4
 80005b6:	00d2      	lsls	r2, r2, #3
 80005b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2201      	movs	r2, #1
 80005be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2201      	movs	r2, #1
 80005c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	193a      	adds	r2, r7, r4
 80005ce:	2390      	movs	r3, #144	; 0x90
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 f921 	bl	800181c <HAL_GPIO_Init>

}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b009      	add	sp, #36	; 0x24
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000

080005e8 <stop>:

/* USER CODE BEGIN 4 */
void stop(int s){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	if (s==0){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d103      	bne.n	80005fe <stop+0x16>
		arret = 0;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <stop+0x2c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
	}
	else if (s==1){
		arret = 1;
	}
}
 80005fc:	e005      	b.n	800060a <stop+0x22>
	else if (s==1){
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d102      	bne.n	800060a <stop+0x22>
		arret = 1;
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <stop+0x2c>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	20000028 	.word	0x20000028

08000618 <change_dir>:

void change_dir(int dir){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if (dir==0){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d108      	bne.n	8000638 <change_dir+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	0099      	lsls	r1, r3, #2
 800062a:	2390      	movs	r3, #144	; 0x90
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2200      	movs	r2, #0
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fa6b 	bl	8001b0c <HAL_GPIO_WritePin>
	}
	else if (dir==1){
		transmit();
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
	}
}
 8000636:	e00c      	b.n	8000652 <change_dir+0x3a>
	else if (dir==1){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d109      	bne.n	8000652 <change_dir+0x3a>
		transmit();
 800063e:	f7ff fe5d 	bl	80002fc <transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	0099      	lsls	r1, r3, #2
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2201      	movs	r2, #1
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fa5d 	bl	8001b0c <HAL_GPIO_WritePin>
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <change_step>:

void change_step(int f){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	transmit2(f);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff fe70 	bl	800034c <transmit2>
	//int freq = f;
	TIM14->ARR = f;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <change_step+0x20>)
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40002000 	.word	0x40002000

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_MspInit+0x44>)
 8000694:	699a      	ldr	r2, [r3, #24]
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_MspInit+0x44>)
 8000698:	2101      	movs	r1, #1
 800069a:	430a      	orrs	r2, r1
 800069c:	619a      	str	r2, [r3, #24]
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <HAL_MspInit+0x44>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	2201      	movs	r2, #1
 80006a4:	4013      	ands	r3, r2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_MspInit+0x44>)
 80006ac:	69da      	ldr	r2, [r3, #28]
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HAL_MspInit+0x44>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0549      	lsls	r1, r1, #21
 80006b4:	430a      	orrs	r2, r1
 80006b6:	61da      	str	r2, [r3, #28]
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_MspInit+0x44>)
 80006ba:	69da      	ldr	r2, [r3, #28]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	055b      	lsls	r3, r3, #21
 80006c0:	4013      	ands	r3, r2
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b08b      	sub	sp, #44	; 0x2c
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	2414      	movs	r4, #20
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	0018      	movs	r0, r3
 80006e2:	2314      	movs	r3, #20
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f002 f9be 	bl	8002a68 <memset>
  if(hcan->Instance==CAN)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <HAL_CAN_MspInit+0xa4>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d13b      	bne.n	800076e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <HAL_CAN_MspInit+0xa8>)
 80006f8:	69da      	ldr	r2, [r3, #28]
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <HAL_CAN_MspInit+0xa8>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0489      	lsls	r1, r1, #18
 8000700:	430a      	orrs	r2, r1
 8000702:	61da      	str	r2, [r3, #28]
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <HAL_CAN_MspInit+0xa8>)
 8000706:	69da      	ldr	r2, [r3, #28]
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	049b      	lsls	r3, r3, #18
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <HAL_CAN_MspInit+0xa8>)
 8000714:	695a      	ldr	r2, [r3, #20]
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_CAN_MspInit+0xa8>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0289      	lsls	r1, r1, #10
 800071c:	430a      	orrs	r2, r1
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_CAN_MspInit+0xa8>)
 8000722:	695a      	ldr	r2, [r3, #20]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	029b      	lsls	r3, r3, #10
 8000728:	4013      	ands	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	22c0      	movs	r2, #192	; 0xc0
 8000732:	0152      	lsls	r2, r2, #5
 8000734:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2202      	movs	r2, #2
 800073c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2203      	movs	r2, #3
 8000748:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2204      	movs	r2, #4
 800074e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	187a      	adds	r2, r7, r1
 8000752:	2390      	movs	r3, #144	; 0x90
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f001 f85f 	bl	800181c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	201e      	movs	r0, #30
 8000764:	f001 f828 	bl	80017b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000768:	201e      	movs	r0, #30
 800076a:	f001 f83a 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b00b      	add	sp, #44	; 0x2c
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40006400 	.word	0x40006400
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_TIM_Base_MspInit+0x48>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d115      	bne.n	80007be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_TIM_Base_MspInit+0x4c>)
 8000794:	69da      	ldr	r2, [r3, #28]
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_TIM_Base_MspInit+0x4c>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0049      	lsls	r1, r1, #1
 800079c:	430a      	orrs	r2, r1
 800079e:	61da      	str	r2, [r3, #28]
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_TIM_Base_MspInit+0x4c>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2013      	movs	r0, #19
 80007b4:	f001 f800 	bl	80017b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80007b8:	2013      	movs	r0, #19
 80007ba:	f001 f812 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b004      	add	sp, #16
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40002000 	.word	0x40002000
 80007cc:	40021000 	.word	0x40021000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f8aa 	bl	800094c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <TIM14_IRQHandler+0x3c>)
 8000806:	0018      	movs	r0, r3
 8000808:	f001 ff3c 	bl	8002684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);

  if (arret==0){
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <TIM14_IRQHandler+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d108      	bne.n	8000826 <TIM14_IRQHandler+0x26>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	00d9      	lsls	r1, r3, #3
 8000818:	2390      	movs	r3, #144	; 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2200      	movs	r2, #0
 800081e:	0018      	movs	r0, r3
 8000820:	f001 f974 	bl	8001b0c <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
  }


  /* USER CODE END TIM14_IRQn 1 */
}
 8000824:	e007      	b.n	8000836 <TIM14_IRQHandler+0x36>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	00da      	lsls	r2, r3, #3
 800082a:	2390      	movs	r3, #144	; 0x90
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 f988 	bl	8001b46 <HAL_GPIO_TogglePin>
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000006c 	.word	0x2000006c
 8000840:	20000028 	.word	0x20000028

08000844 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <CEC_CAN_IRQHandler+0x14>)
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fcf4 	bl	8001238 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	2000002c 	.word	0x2000002c

0800085c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800086a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800086e:	490e      	ldr	r1, [pc, #56]	; (80008a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <LoopForever+0xe>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000884:	4c0b      	ldr	r4, [pc, #44]	; (80008b4 <LoopForever+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000892:	f7ff ffe3 	bl	800085c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000896:	f002 f8c3 	bl	8002a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089a:	f7ff fd85 	bl	80003a8 <main>

0800089e <LoopForever>:

LoopForever:
    b LoopForever
 800089e:	e7fe      	b.n	800089e <LoopForever>
  ldr   r0, =_estack
 80008a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008ac:	08002acc 	.word	0x08002acc
  ldr r2, =_sbss
 80008b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b4:	200000ec 	.word	0x200000ec

080008b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_COMP_IRQHandler>
	...

080008bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <HAL_Init+0x24>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_Init+0x24>)
 80008c6:	2110      	movs	r1, #16
 80008c8:	430a      	orrs	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f809 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d2:	f7ff fedb 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_InitTick+0x5c>)
 80008ee:	681c      	ldr	r4, [r3, #0]
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_InitTick+0x60>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	0019      	movs	r1, r3
 80008f6:	23fa      	movs	r3, #250	; 0xfa
 80008f8:	0098      	lsls	r0, r3, #2
 80008fa:	f7ff fc05 	bl	8000108 <__udivsi3>
 80008fe:	0003      	movs	r3, r0
 8000900:	0019      	movs	r1, r3
 8000902:	0020      	movs	r0, r4
 8000904:	f7ff fc00 	bl	8000108 <__udivsi3>
 8000908:	0003      	movs	r3, r0
 800090a:	0018      	movs	r0, r3
 800090c:	f000 ff79 	bl	8001802 <HAL_SYSTICK_Config>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	e00f      	b.n	8000938 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d80b      	bhi.n	8000936 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	2301      	movs	r3, #1
 8000922:	425b      	negs	r3, r3
 8000924:	2200      	movs	r2, #0
 8000926:	0018      	movs	r0, r3
 8000928:	f000 ff46 	bl	80017b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_InitTick+0x64>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	b003      	add	sp, #12
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	20000000 	.word	0x20000000
 8000944:	20000008 	.word	0x20000008
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x1c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	001a      	movs	r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_IncTick+0x20>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	18d2      	adds	r2, r2, r3
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_IncTick+0x20>)
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000008 	.word	0x20000008
 800096c:	200000e8 	.word	0x200000e8

08000970 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b02      	ldr	r3, [pc, #8]	; (8000980 <HAL_GetTick+0x10>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	200000e8 	.word	0x200000e8

08000984 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e0f0      	b.n	8000b78 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2220      	movs	r2, #32
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fe95 	bl	80006d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	430a      	orrs	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ba:	f7ff ffd9 	bl	8000970 <HAL_GetTick>
 80009be:	0003      	movs	r3, r0
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009c2:	e013      	b.n	80009ec <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009c4:	f7ff ffd4 	bl	8000970 <HAL_GetTick>
 80009c8:	0002      	movs	r2, r0
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b0a      	cmp	r3, #10
 80009d0:	d90c      	bls.n	80009ec <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	0292      	lsls	r2, r2, #10
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2220      	movs	r2, #32
 80009e4:	2105      	movs	r1, #5
 80009e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e0c5      	b.n	8000b78 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2201      	movs	r2, #1
 80009f4:	4013      	ands	r3, r2
 80009f6:	d0e5      	beq.n	80009c4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2102      	movs	r1, #2
 8000a04:	438a      	bics	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a08:	f7ff ffb2 	bl	8000970 <HAL_GetTick>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a10:	e013      	b.n	8000a3a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a12:	f7ff ffad 	bl	8000970 <HAL_GetTick>
 8000a16:	0002      	movs	r2, r0
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b0a      	cmp	r3, #10
 8000a1e:	d90c      	bls.n	8000a3a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	0292      	lsls	r2, r2, #10
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2220      	movs	r2, #32
 8000a32:	2105      	movs	r1, #5
 8000a34:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e09e      	b.n	8000b78 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2202      	movs	r2, #2
 8000a42:	4013      	ands	r3, r2
 8000a44:	d1e5      	bne.n	8000a12 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7e1b      	ldrb	r3, [r3, #24]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d108      	bne.n	8000a60 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	e007      	b.n	8000a70 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	438a      	bics	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7e5b      	ldrb	r3, [r3, #25]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d108      	bne.n	8000a8a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	e007      	b.n	8000a9a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	438a      	bics	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7e9b      	ldrb	r3, [r3, #26]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d108      	bne.n	8000ab4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2120      	movs	r1, #32
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e007      	b.n	8000ac4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2120      	movs	r1, #32
 8000ac0:	438a      	bics	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7edb      	ldrb	r3, [r3, #27]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d108      	bne.n	8000ade <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	438a      	bics	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e007      	b.n	8000aee <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2110      	movs	r1, #16
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7f1b      	ldrb	r3, [r3, #28]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d108      	bne.n	8000b08 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2108      	movs	r1, #8
 8000b02:	430a      	orrs	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e007      	b.n	8000b18 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2108      	movs	r1, #8
 8000b14:	438a      	bics	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7f5b      	ldrb	r3, [r3, #29]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d108      	bne.n	8000b32 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e007      	b.n	8000b42 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	438a      	bics	r2, r1
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	431a      	orrs	r2, r3
 8000b58:	0011      	movs	r1, r2
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2220      	movs	r2, #32
 8000b72:	2101      	movs	r1, #1
 8000b74:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b90:	2013      	movs	r0, #19
 8000b92:	183b      	adds	r3, r7, r0
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	2120      	movs	r1, #32
 8000b98:	5c52      	ldrb	r2, [r2, r1]
 8000b9a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	18bb      	adds	r3, r7, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d004      	beq.n	8000bb0 <HAL_CAN_ConfigFilter+0x30>
 8000ba6:	18bb      	adds	r3, r7, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d000      	beq.n	8000bb0 <HAL_CAN_ConfigFilter+0x30>
 8000bae:	e0cd      	b.n	8000d4c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	58d3      	ldr	r3, [r2, r3]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	221f      	movs	r2, #31
 8000bcc:	4013      	ands	r3, r2
 8000bce:	2201      	movs	r2, #1
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	2387      	movs	r3, #135	; 0x87
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	58d3      	ldr	r3, [r2, r3]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	401a      	ands	r2, r3
 8000be4:	0011      	movs	r1, r2
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	2387      	movs	r3, #135	; 0x87
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d129      	bne.n	8000c4a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	2383      	movs	r3, #131	; 0x83
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	58d3      	ldr	r3, [r2, r3]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	43d2      	mvns	r2, r2
 8000c02:	401a      	ands	r2, r3
 8000c04:	0011      	movs	r1, r2
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	2383      	movs	r3, #131	; 0x83
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	041b      	lsls	r3, r3, #16
 8000c1a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c20:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3248      	adds	r2, #72	; 0x48
 8000c26:	00d2      	lsls	r2, r2, #3
 8000c28:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	041b      	lsls	r3, r3, #16
 8000c36:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c3e:	6979      	ldr	r1, [r7, #20]
 8000c40:	3348      	adds	r3, #72	; 0x48
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	18cb      	adds	r3, r1, r3
 8000c46:	3304      	adds	r3, #4
 8000c48:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d128      	bne.n	8000ca4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	2383      	movs	r3, #131	; 0x83
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	58d2      	ldr	r2, [r2, r3]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	0011      	movs	r1, r2
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	2383      	movs	r3, #131	; 0x83
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	041b      	lsls	r3, r3, #16
 8000c74:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c7a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3248      	adds	r2, #72	; 0x48
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	041b      	lsls	r3, r3, #16
 8000c90:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c98:	6979      	ldr	r1, [r7, #20]
 8000c9a:	3348      	adds	r3, #72	; 0x48
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	18cb      	adds	r3, r1, r3
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10c      	bne.n	8000cc6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	2381      	movs	r3, #129	; 0x81
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	58d3      	ldr	r3, [r2, r3]
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	43d2      	mvns	r2, r2
 8000cb8:	401a      	ands	r2, r3
 8000cba:	0011      	movs	r1, r2
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	2381      	movs	r3, #129	; 0x81
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	50d1      	str	r1, [r2, r3]
 8000cc4:	e00a      	b.n	8000cdc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	2381      	movs	r3, #129	; 0x81
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	58d2      	ldr	r2, [r2, r3]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	2381      	movs	r3, #129	; 0x81
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10c      	bne.n	8000cfe <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	2385      	movs	r3, #133	; 0x85
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	58d3      	ldr	r3, [r2, r3]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	43d2      	mvns	r2, r2
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	2385      	movs	r3, #133	; 0x85
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	50d1      	str	r1, [r2, r3]
 8000cfc:	e00a      	b.n	8000d14 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	2385      	movs	r3, #133	; 0x85
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	58d2      	ldr	r2, [r2, r3]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	2385      	movs	r3, #133	; 0x85
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d10a      	bne.n	8000d32 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	2387      	movs	r3, #135	; 0x87
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	58d2      	ldr	r2, [r2, r3]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	0011      	movs	r1, r2
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	2387      	movs	r3, #135	; 0x87
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	58d3      	ldr	r3, [r2, r3]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4393      	bics	r3, r2
 8000d3e:	0019      	movs	r1, r3
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e007      	b.n	8000d5c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	02d2      	lsls	r2, r2, #11
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
  }
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b006      	add	sp, #24
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2220      	movs	r2, #32
 8000d70:	5c9b      	ldrb	r3, [r3, r2]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d12f      	bne.n	8000dd8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d90:	f7ff fdee 	bl	8000970 <HAL_GetTick>
 8000d94:	0003      	movs	r3, r0
 8000d96:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d98:	e013      	b.n	8000dc2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d9a:	f7ff fde9 	bl	8000970 <HAL_GetTick>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	d90c      	bls.n	8000dc2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	0292      	lsls	r2, r2, #10
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2220      	movs	r2, #32
 8000dba:	2105      	movs	r1, #5
 8000dbc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e012      	b.n	8000de8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d1e5      	bne.n	8000d9a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e007      	b.n	8000de8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	0312      	lsls	r2, r2, #12
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
  }
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b004      	add	sp, #16
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dfe:	201f      	movs	r0, #31
 8000e00:	183b      	adds	r3, r7, r0
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	2120      	movs	r1, #32
 8000e06:	5c52      	ldrb	r2, [r2, r1]
 8000e08:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e12:	183b      	adds	r3, r7, r0
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d004      	beq.n	8000e24 <HAL_CAN_AddTxMessage+0x34>
 8000e1a:	183b      	adds	r3, r7, r0
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d000      	beq.n	8000e24 <HAL_CAN_AddTxMessage+0x34>
 8000e22:	e0b7      	b.n	8000f94 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	04db      	lsls	r3, r3, #19
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d10a      	bne.n	8000e44 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	051b      	lsls	r3, r3, #20
 8000e34:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e36:	d105      	bne.n	8000e44 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	055b      	lsls	r3, r3, #21
 8000e3e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e40:	d100      	bne.n	8000e44 <HAL_CAN_AddTxMessage+0x54>
 8000e42:	e09e      	b.n	8000f82 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	0e1b      	lsrs	r3, r3, #24
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d908      	bls.n	8000e66 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	0412      	lsls	r2, r2, #16
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e09e      	b.n	8000fa4 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e66:	2201      	movs	r2, #1
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10c      	bne.n	8000e92 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4311      	orrs	r1, r2
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	3218      	adds	r2, #24
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	50d1      	str	r1, [r2, r3]
 8000e90:	e00f      	b.n	8000eb2 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000ea8:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	3218      	adds	r2, #24
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6819      	ldr	r1, [r3, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3318      	adds	r3, #24
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	18cb      	adds	r3, r1, r3
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	7d1b      	ldrb	r3, [r3, #20]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d112      	bne.n	8000ef4 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	3304      	adds	r3, #4
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6819      	ldr	r1, [r3, #0]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3318      	adds	r3, #24
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	18cb      	adds	r3, r1, r3
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3307      	adds	r3, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	061a      	lsls	r2, r3, #24
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3306      	adds	r3, #6
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	041b      	lsls	r3, r3, #16
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3305      	adds	r3, #5
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3304      	adds	r3, #4
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	0019      	movs	r1, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	6979      	ldr	r1, [r7, #20]
 8000f20:	23c6      	movs	r3, #198	; 0xc6
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	0109      	lsls	r1, r1, #4
 8000f26:	1841      	adds	r1, r0, r1
 8000f28:	18cb      	adds	r3, r1, r3
 8000f2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3303      	adds	r3, #3
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	061a      	lsls	r2, r3, #24
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3302      	adds	r3, #2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3301      	adds	r3, #1
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	6979      	ldr	r1, [r7, #20]
 8000f56:	23c4      	movs	r3, #196	; 0xc4
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	0109      	lsls	r1, r1, #4
 8000f5c:	1841      	adds	r1, r0, r1
 8000f5e:	18cb      	adds	r3, r1, r3
 8000f60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	3218      	adds	r2, #24
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	58d2      	ldr	r2, [r2, r3]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2101      	movs	r1, #1
 8000f74:	4311      	orrs	r1, r2
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	3218      	adds	r2, #24
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e010      	b.n	8000fa4 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	0392      	lsls	r2, r2, #14
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e007      	b.n	8000fa4 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	02d2      	lsls	r2, r2, #11
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
  }
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b008      	add	sp, #32
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fba:	2017      	movs	r0, #23
 8000fbc:	183b      	adds	r3, r7, r0
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	5c52      	ldrb	r2, [r2, r1]
 8000fc4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	18bb      	adds	r3, r7, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d004      	beq.n	8000fda <HAL_CAN_GetRxMessage+0x2e>
 8000fd0:	18bb      	adds	r3, r7, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d000      	beq.n	8000fda <HAL_CAN_GetRxMessage+0x2e>
 8000fd8:	e0f8      	b.n	80011cc <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d117      	bne.n	800101c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	0392      	lsls	r2, r2, #14
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0ee      	b.n	80011dc <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	2203      	movs	r2, #3
 8001006:	4013      	ands	r3, r2
 8001008:	d108      	bne.n	800101c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	0392      	lsls	r2, r2, #14
 8001012:	431a      	orrs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0df      	b.n	80011dc <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	321b      	adds	r2, #27
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	58d3      	ldr	r3, [r2, r3]
 8001028:	2204      	movs	r2, #4
 800102a:	401a      	ands	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10b      	bne.n	8001050 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	321b      	adds	r2, #27
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	58d3      	ldr	r3, [r2, r3]
 8001044:	0d5b      	lsrs	r3, r3, #21
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	0d5a      	lsrs	r2, r3, #21
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e00a      	b.n	8001066 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	321b      	adds	r2, #27
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	58d3      	ldr	r3, [r2, r3]
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	321b      	adds	r2, #27
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	58d3      	ldr	r3, [r2, r3]
 8001072:	2202      	movs	r2, #2
 8001074:	401a      	ands	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	331b      	adds	r3, #27
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	3304      	adds	r3, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	220f      	movs	r2, #15
 800108c:	401a      	ands	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	331b      	adds	r3, #27
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	3304      	adds	r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	22ff      	movs	r2, #255	; 0xff
 80010a6:	401a      	ands	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	331b      	adds	r3, #27
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	18d3      	adds	r3, r2, r3
 80010b8:	3304      	adds	r3, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c1b      	lsrs	r3, r3, #16
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	0c1a      	lsrs	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	23dc      	movs	r3, #220	; 0xdc
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	188a      	adds	r2, r1, r2
 80010d4:	18d3      	adds	r3, r2, r3
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6819      	ldr	r1, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	23dc      	movs	r3, #220	; 0xdc
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	188a      	adds	r2, r1, r2
 80010ec:	18d3      	adds	r3, r2, r3
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0a1a      	lsrs	r2, r3, #8
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6819      	ldr	r1, [r3, #0]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	23dc      	movs	r3, #220	; 0xdc
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	188a      	adds	r2, r1, r2
 8001108:	18d3      	adds	r3, r2, r3
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0c1a      	lsrs	r2, r3, #16
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	23dc      	movs	r3, #220	; 0xdc
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	188a      	adds	r2, r1, r2
 8001124:	18d3      	adds	r3, r2, r3
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0e1a      	lsrs	r2, r3, #24
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3303      	adds	r3, #3
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	23de      	movs	r3, #222	; 0xde
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	188a      	adds	r2, r1, r2
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3304      	adds	r3, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	23de      	movs	r3, #222	; 0xde
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	188a      	adds	r2, r1, r2
 800115a:	18d3      	adds	r3, r2, r3
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	0a1a      	lsrs	r2, r3, #8
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3305      	adds	r3, #5
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6819      	ldr	r1, [r3, #0]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	23de      	movs	r3, #222	; 0xde
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	188a      	adds	r2, r1, r2
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0c1a      	lsrs	r2, r3, #16
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3306      	adds	r3, #6
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	23de      	movs	r3, #222	; 0xde
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	188a      	adds	r2, r1, r2
 8001192:	18d3      	adds	r3, r2, r3
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	0e1a      	lsrs	r2, r3, #24
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	3307      	adds	r3, #7
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2120      	movs	r1, #32
 80011b2:	430a      	orrs	r2, r1
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	e007      	b.n	80011c8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2120      	movs	r1, #32
 80011c4:	430a      	orrs	r2, r1
 80011c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e007      	b.n	80011dc <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	02d2      	lsls	r2, r2, #11
 80011d4:	431a      	orrs	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
  }
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b006      	add	sp, #24
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ee:	200f      	movs	r0, #15
 80011f0:	183b      	adds	r3, r7, r0
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	2120      	movs	r1, #32
 80011f6:	5c52      	ldrb	r2, [r2, r1]
 80011f8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011fa:	0002      	movs	r2, r0
 80011fc:	18bb      	adds	r3, r7, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <HAL_CAN_ActivateNotification+0x28>
 8001204:	18bb      	adds	r3, r7, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d109      	bne.n	8001220 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6959      	ldr	r1, [r3, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	e007      	b.n	8001230 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	02d2      	lsls	r2, r2, #11
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
  }
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b004      	add	sp, #16
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	2201      	movs	r2, #1
 8001278:	4013      	ands	r3, r2
 800127a:	d100      	bne.n	800127e <HAL_CAN_IRQHandler+0x46>
 800127c:	e084      	b.n	8001388 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	d024      	beq.n	80012d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d004      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0018      	movs	r0, r3
 800129a:	f000 f981 	bl	80015a0 <HAL_CAN_TxMailbox0CompleteCallback>
 800129e:	e017      	b.n	80012d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2204      	movs	r2, #4
 80012a4:	4013      	ands	r3, r2
 80012a6:	d005      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	4313      	orrs	r3, r2
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
 80012b2:	e00d      	b.n	80012d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2208      	movs	r2, #8
 80012b8:	4013      	ands	r3, r2
 80012ba:	d005      	beq.n	80012c8 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	0152      	lsls	r2, r2, #5
 80012c2:	4313      	orrs	r3, r2
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
 80012c6:	e003      	b.n	80012d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 f980 	bl	80015d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	d028      	beq.n	800132c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0052      	lsls	r2, r2, #1
 80012e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d004      	beq.n	80012f8 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 f95d 	bl	80015b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80012f6:	e019      	b.n	800132c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4013      	ands	r3, r2
 8001300:	d005      	beq.n	800130e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	0192      	lsls	r2, r2, #6
 8001308:	4313      	orrs	r3, r2
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
 800130c:	e00e      	b.n	800132c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d005      	beq.n	8001324 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	01d2      	lsls	r2, r2, #7
 800131e:	4313      	orrs	r3, r2
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
 8001322:	e003      	b.n	800132c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f95a 	bl	80015e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	4013      	ands	r3, r2
 8001334:	d028      	beq.n	8001388 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0252      	lsls	r2, r2, #9
 800133e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	029b      	lsls	r3, r3, #10
 8001346:	4013      	ands	r3, r2
 8001348:	d004      	beq.n	8001354 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0018      	movs	r0, r3
 800134e:	f000 f937 	bl	80015c0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001352:	e019      	b.n	8001388 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	02db      	lsls	r3, r3, #11
 800135a:	4013      	ands	r3, r2
 800135c:	d005      	beq.n	800136a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	0212      	lsls	r2, r2, #8
 8001364:	4313      	orrs	r3, r2
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
 8001368:	e00e      	b.n	8001388 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	031b      	lsls	r3, r3, #12
 8001370:	4013      	ands	r3, r2
 8001372:	d005      	beq.n	8001380 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	0252      	lsls	r2, r2, #9
 800137a:	4313      	orrs	r3, r2
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	e003      	b.n	8001388 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0018      	movs	r0, r3
 8001384:	f000 f934 	bl	80015f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2208      	movs	r2, #8
 800138c:	4013      	ands	r3, r2
 800138e:	d00c      	beq.n	80013aa <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2210      	movs	r2, #16
 8001394:	4013      	ands	r3, r2
 8001396:	d008      	beq.n	80013aa <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4313      	orrs	r3, r2
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2210      	movs	r2, #16
 80013a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	d00b      	beq.n	80013ca <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2208      	movs	r2, #8
 80013b6:	4013      	ands	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2208      	movs	r2, #8
 80013c0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f000 f91b 	bl	8001600 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d009      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2203      	movs	r2, #3
 80013da:	4013      	ands	r3, r2
 80013dc:	d003      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7fe ff69 	bl	80002b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	2240      	movs	r2, #64	; 0x40
 80013ea:	4013      	ands	r3, r2
 80013ec:	d00c      	beq.n	8001408 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	2210      	movs	r2, #16
 80013f2:	4013      	ands	r3, r2
 80013f4:	d008      	beq.n	8001408 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	00d2      	lsls	r2, r2, #3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2210      	movs	r2, #16
 8001406:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	2220      	movs	r2, #32
 800140c:	4013      	ands	r3, r2
 800140e:	d00b      	beq.n	8001428 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2208      	movs	r2, #8
 8001414:	4013      	ands	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2208      	movs	r2, #8
 800141e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	0018      	movs	r0, r3
 8001424:	f000 f8fc 	bl	8001620 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	2210      	movs	r2, #16
 800142c:	4013      	ands	r3, r2
 800142e:	d009      	beq.n	8001444 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2203      	movs	r2, #3
 8001438:	4013      	ands	r3, r2
 800143a:	d003      	beq.n	8001444 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	0018      	movs	r0, r3
 8001440:	f000 f8e6 	bl	8001610 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001444:	6a3a      	ldr	r2, [r7, #32]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	029b      	lsls	r3, r3, #10
 800144a:	4013      	ands	r3, r2
 800144c:	d00b      	beq.n	8001466 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	2210      	movs	r2, #16
 8001452:	4013      	ands	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2210      	movs	r2, #16
 800145c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0018      	movs	r0, r3
 8001462:	f000 f8e5 	bl	8001630 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001466:	6a3a      	ldr	r2, [r7, #32]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	4013      	ands	r3, r2
 800146e:	d00b      	beq.n	8001488 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	2208      	movs	r2, #8
 8001474:	4013      	ands	r3, r2
 8001476:	d007      	beq.n	8001488 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2208      	movs	r2, #8
 800147e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	0018      	movs	r0, r3
 8001484:	f000 f8dc 	bl	8001640 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001488:	6a3a      	ldr	r2, [r7, #32]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	4013      	ands	r3, r2
 8001490:	d100      	bne.n	8001494 <HAL_CAN_IRQHandler+0x25c>
 8001492:	e074      	b.n	800157e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2204      	movs	r2, #4
 8001498:	4013      	ands	r3, r2
 800149a:	d100      	bne.n	800149e <HAL_CAN_IRQHandler+0x266>
 800149c:	e06b      	b.n	8001576 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800149e:	6a3a      	ldr	r2, [r7, #32]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014ae:	d003      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	2201      	movs	r2, #1
 80014b4:	4313      	orrs	r3, r2
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014b8:	6a3a      	ldr	r2, [r7, #32]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2202      	movs	r2, #2
 80014c6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014c8:	d003      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	2202      	movs	r2, #2
 80014ce:	4313      	orrs	r3, r2
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	d007      	beq.n	80014ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2204      	movs	r2, #4
 80014e0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014e2:	d003      	beq.n	80014ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	2204      	movs	r2, #4
 80014e8:	4313      	orrs	r3, r2
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ec:	6a3a      	ldr	r2, [r7, #32]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4013      	ands	r3, r2
 80014f4:	d03f      	beq.n	8001576 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2270      	movs	r2, #112	; 0x70
 80014fa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014fc:	d03b      	beq.n	8001576 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2270      	movs	r2, #112	; 0x70
 8001502:	4013      	ands	r3, r2
 8001504:	2b60      	cmp	r3, #96	; 0x60
 8001506:	d027      	beq.n	8001558 <HAL_CAN_IRQHandler+0x320>
 8001508:	d82c      	bhi.n	8001564 <HAL_CAN_IRQHandler+0x32c>
 800150a:	2b50      	cmp	r3, #80	; 0x50
 800150c:	d01f      	beq.n	800154e <HAL_CAN_IRQHandler+0x316>
 800150e:	d829      	bhi.n	8001564 <HAL_CAN_IRQHandler+0x32c>
 8001510:	2b40      	cmp	r3, #64	; 0x40
 8001512:	d017      	beq.n	8001544 <HAL_CAN_IRQHandler+0x30c>
 8001514:	d826      	bhi.n	8001564 <HAL_CAN_IRQHandler+0x32c>
 8001516:	2b30      	cmp	r3, #48	; 0x30
 8001518:	d00f      	beq.n	800153a <HAL_CAN_IRQHandler+0x302>
 800151a:	d823      	bhi.n	8001564 <HAL_CAN_IRQHandler+0x32c>
 800151c:	2b10      	cmp	r3, #16
 800151e:	d002      	beq.n	8001526 <HAL_CAN_IRQHandler+0x2ee>
 8001520:	2b20      	cmp	r3, #32
 8001522:	d005      	beq.n	8001530 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001524:	e01e      	b.n	8001564 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	2208      	movs	r2, #8
 800152a:	4313      	orrs	r3, r2
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152e:	e01a      	b.n	8001566 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	2210      	movs	r2, #16
 8001534:	4313      	orrs	r3, r2
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001538:	e015      	b.n	8001566 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	2220      	movs	r2, #32
 800153e:	4313      	orrs	r3, r2
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001542:	e010      	b.n	8001566 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	4313      	orrs	r3, r2
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800154c:	e00b      	b.n	8001566 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	4313      	orrs	r3, r2
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001556:	e006      	b.n	8001566 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	0052      	lsls	r2, r2, #1
 800155e:	4313      	orrs	r3, r2
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001562:	e000      	b.n	8001566 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001564:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699a      	ldr	r2, [r3, #24]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2170      	movs	r1, #112	; 0x70
 8001572:	438a      	bics	r2, r1
 8001574:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2204      	movs	r2, #4
 800157c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	0018      	movs	r0, r3
 8001594:	f000 f85c 	bl	8001650 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b00a      	add	sp, #40	; 0x28
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b002      	add	sp, #8
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b002      	add	sp, #8
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b002      	add	sp, #8
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	0002      	movs	r2, r0
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800166c:	1dfb      	adds	r3, r7, #7
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b7f      	cmp	r3, #127	; 0x7f
 8001672:	d809      	bhi.n	8001688 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001674:	1dfb      	adds	r3, r7, #7
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	001a      	movs	r2, r3
 800167a:	231f      	movs	r3, #31
 800167c:	401a      	ands	r2, r3
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_EnableIRQ+0x30>)
 8001680:	2101      	movs	r1, #1
 8001682:	4091      	lsls	r1, r2
 8001684:	000a      	movs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]
  }
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	0002      	movs	r2, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b7f      	cmp	r3, #127	; 0x7f
 80016a8:	d828      	bhi.n	80016fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016aa:	4a2f      	ldr	r2, [pc, #188]	; (8001768 <__NVIC_SetPriority+0xd4>)
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	33c0      	adds	r3, #192	; 0xc0
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	589b      	ldr	r3, [r3, r2]
 80016ba:	1dfa      	adds	r2, r7, #7
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	0011      	movs	r1, r2
 80016c0:	2203      	movs	r2, #3
 80016c2:	400a      	ands	r2, r1
 80016c4:	00d2      	lsls	r2, r2, #3
 80016c6:	21ff      	movs	r1, #255	; 0xff
 80016c8:	4091      	lsls	r1, r2
 80016ca:	000a      	movs	r2, r1
 80016cc:	43d2      	mvns	r2, r2
 80016ce:	401a      	ands	r2, r3
 80016d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	22ff      	movs	r2, #255	; 0xff
 80016d8:	401a      	ands	r2, r3
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	0018      	movs	r0, r3
 80016e0:	2303      	movs	r3, #3
 80016e2:	4003      	ands	r3, r0
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e8:	481f      	ldr	r0, [pc, #124]	; (8001768 <__NVIC_SetPriority+0xd4>)
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	430a      	orrs	r2, r1
 80016f4:	33c0      	adds	r3, #192	; 0xc0
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016fa:	e031      	b.n	8001760 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <__NVIC_SetPriority+0xd8>)
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	0019      	movs	r1, r3
 8001704:	230f      	movs	r3, #15
 8001706:	400b      	ands	r3, r1
 8001708:	3b08      	subs	r3, #8
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3306      	adds	r3, #6
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	3304      	adds	r3, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1dfa      	adds	r2, r7, #7
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	0011      	movs	r1, r2
 800171c:	2203      	movs	r2, #3
 800171e:	400a      	ands	r2, r1
 8001720:	00d2      	lsls	r2, r2, #3
 8001722:	21ff      	movs	r1, #255	; 0xff
 8001724:	4091      	lsls	r1, r2
 8001726:	000a      	movs	r2, r1
 8001728:	43d2      	mvns	r2, r2
 800172a:	401a      	ands	r2, r3
 800172c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	401a      	ands	r2, r3
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	0018      	movs	r0, r3
 800173c:	2303      	movs	r3, #3
 800173e:	4003      	ands	r3, r0
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001744:	4809      	ldr	r0, [pc, #36]	; (800176c <__NVIC_SetPriority+0xd8>)
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	001c      	movs	r4, r3
 800174c:	230f      	movs	r3, #15
 800174e:	4023      	ands	r3, r4
 8001750:	3b08      	subs	r3, #8
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	430a      	orrs	r2, r1
 8001756:	3306      	adds	r3, #6
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	18c3      	adds	r3, r0, r3
 800175c:	3304      	adds	r3, #4
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b003      	add	sp, #12
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	045b      	lsls	r3, r3, #17
 8001780:	429a      	cmp	r2, r3
 8001782:	d301      	bcc.n	8001788 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001784:	2301      	movs	r3, #1
 8001786:	e010      	b.n	80017aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <SysTick_Config+0x44>)
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	3a01      	subs	r2, #1
 800178e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001790:	2301      	movs	r3, #1
 8001792:	425b      	negs	r3, r3
 8001794:	2103      	movs	r1, #3
 8001796:	0018      	movs	r0, r3
 8001798:	f7ff ff7c 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x44>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x44>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	210f      	movs	r1, #15
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	1c02      	adds	r2, r0, #0
 80017c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	0011      	movs	r1, r2
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	0002      	movs	r2, r0
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff ff33 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff ffaf 	bl	8001770 <SysTick_Config>
 8001812:	0003      	movs	r3, r0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	e155      	b.n	8001ad8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d100      	bne.n	8001844 <HAL_GPIO_Init+0x28>
 8001842:	e146      	b.n	8001ad2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2203      	movs	r2, #3
 800184a:	4013      	ands	r3, r2
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2203      	movs	r2, #3
 8001856:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	409a      	lsls	r2, r3
 800186a:	0013      	movs	r3, r2
 800186c:	43da      	mvns	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	409a      	lsls	r2, r3
 800187e:	0013      	movs	r3, r2
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	43da      	mvns	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	2201      	movs	r2, #1
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
 80018b0:	0013      	movs	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2203      	movs	r2, #3
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	409a      	lsls	r2, r3
 80018d8:	0013      	movs	r3, r2
 80018da:	43da      	mvns	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2203      	movs	r2, #3
 8001900:	4013      	ands	r3, r2
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	58d3      	ldr	r3, [r2, r3]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2207      	movs	r2, #7
 8001918:	4013      	ands	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	43da      	mvns	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2107      	movs	r1, #7
 8001932:	400b      	ands	r3, r1
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	6939      	ldr	r1, [r7, #16]
 800194c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2203      	movs	r2, #3
 800196c:	401a      	ands	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	23c0      	movs	r3, #192	; 0xc0
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	4013      	ands	r3, r2
 800198c:	d100      	bne.n	8001990 <HAL_GPIO_Init+0x174>
 800198e:	e0a0      	b.n	8001ad2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_GPIO_Init+0x2d4>)
 8001992:	699a      	ldr	r2, [r3, #24]
 8001994:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_GPIO_Init+0x2d4>)
 8001996:	2101      	movs	r1, #1
 8001998:	430a      	orrs	r2, r1
 800199a:	619a      	str	r2, [r3, #24]
 800199c:	4b54      	ldr	r3, [pc, #336]	; (8001af0 <HAL_GPIO_Init+0x2d4>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_GPIO_Init+0x2d8>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	589b      	ldr	r3, [r3, r2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2203      	movs	r2, #3
 80019ba:	4013      	ands	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	409a      	lsls	r2, r3
 80019c2:	0013      	movs	r3, r2
 80019c4:	43da      	mvns	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	2390      	movs	r3, #144	; 0x90
 80019d0:	05db      	lsls	r3, r3, #23
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x1ee>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a47      	ldr	r2, [pc, #284]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x1ea>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a46      	ldr	r2, [pc, #280]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x1e6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a45      	ldr	r2, [pc, #276]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a44      	ldr	r2, [pc, #272]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x1de>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e008      	b.n	8001a0c <HAL_GPIO_Init+0x1f0>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x1f0>
 80019fe:	2303      	movs	r3, #3
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x1f0>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x1f0>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x1f0>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	2103      	movs	r1, #3
 8001a10:	400a      	ands	r2, r1
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a1c:	4935      	ldr	r1, [pc, #212]	; (8001af4 <HAL_GPIO_Init+0x2d8>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	025b      	lsls	r3, r3, #9
 8001a42:	4013      	ands	r3, r2
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a54:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43da      	mvns	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	035b      	lsls	r3, r3, #13
 8001a96:	4013      	ands	r3, r2
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	039b      	lsls	r3, r3, #14
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	40da      	lsrs	r2, r3
 8001ae0:	1e13      	subs	r3, r2, #0
 8001ae2:	d000      	beq.n	8001ae6 <HAL_GPIO_Init+0x2ca>
 8001ae4:	e6a2      	b.n	800182c <HAL_GPIO_Init+0x10>
  } 
}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b006      	add	sp, #24
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	48000400 	.word	0x48000400
 8001afc:	48000800 	.word	0x48000800
 8001b00:	48000c00 	.word	0x48000c00
 8001b04:	48001000 	.word	0x48001000
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	0008      	movs	r0, r1
 8001b16:	0011      	movs	r1, r2
 8001b18:	1cbb      	adds	r3, r7, #2
 8001b1a:	1c02      	adds	r2, r0, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	1c7b      	adds	r3, r7, #1
 8001b20:	1c0a      	adds	r2, r1, #0
 8001b22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b24:	1c7b      	adds	r3, r7, #1
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b2c:	1cbb      	adds	r3, r7, #2
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b36:	1cbb      	adds	r3, r7, #2
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	000a      	movs	r2, r1
 8001b50:	1cbb      	adds	r3, r7, #2
 8001b52:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b5a:	1cbb      	adds	r3, r7, #2
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	041a      	lsls	r2, r3, #16
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	1cb9      	adds	r1, r7, #2
 8001b6a:	8809      	ldrh	r1, [r1, #0]
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b004      	add	sp, #16
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f000 fb76 	bl	800227c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	d100      	bne.n	8001b9c <HAL_RCC_OscConfig+0x20>
 8001b9a:	e08e      	b.n	8001cba <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b9c:	4bc5      	ldr	r3, [pc, #788]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d00e      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba8:	4bc2      	ldr	r3, [pc, #776]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	220c      	movs	r2, #12
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d117      	bne.n	8001be4 <HAL_RCC_OscConfig+0x68>
 8001bb4:	4bbf      	ldr	r3, [pc, #764]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	23c0      	movs	r3, #192	; 0xc0
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	025b      	lsls	r3, r3, #9
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d10e      	bne.n	8001be4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	4bbb      	ldr	r3, [pc, #748]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d100      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x58>
 8001bd2:	e071      	b.n	8001cb8 <HAL_RCC_OscConfig+0x13c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d000      	beq.n	8001bde <HAL_RCC_OscConfig+0x62>
 8001bdc:	e06c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f000 fb4c 	bl	800227c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_OscConfig+0x80>
 8001bec:	4bb1      	ldr	r3, [pc, #708]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4bb0      	ldr	r3, [pc, #704]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	0249      	lsls	r1, r1, #9
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e02f      	b.n	8001c5c <HAL_RCC_OscConfig+0xe0>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_OscConfig+0xa2>
 8001c04:	4bab      	ldr	r3, [pc, #684]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4baa      	ldr	r3, [pc, #680]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c0a:	49ab      	ldr	r1, [pc, #684]	; (8001eb8 <HAL_RCC_OscConfig+0x33c>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	4ba8      	ldr	r3, [pc, #672]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4ba7      	ldr	r3, [pc, #668]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c16:	49a9      	ldr	r1, [pc, #676]	; (8001ebc <HAL_RCC_OscConfig+0x340>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e01e      	b.n	8001c5c <HAL_RCC_OscConfig+0xe0>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d10e      	bne.n	8001c44 <HAL_RCC_OscConfig+0xc8>
 8001c26:	4ba3      	ldr	r3, [pc, #652]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4ba2      	ldr	r3, [pc, #648]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	02c9      	lsls	r1, r1, #11
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	4b9f      	ldr	r3, [pc, #636]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b9e      	ldr	r3, [pc, #632]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0249      	lsls	r1, r1, #9
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0xe0>
 8001c44:	4b9b      	ldr	r3, [pc, #620]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b9a      	ldr	r3, [pc, #616]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	499b      	ldr	r1, [pc, #620]	; (8001eb8 <HAL_RCC_OscConfig+0x33c>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	4b98      	ldr	r3, [pc, #608]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b97      	ldr	r3, [pc, #604]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c56:	4999      	ldr	r1, [pc, #612]	; (8001ebc <HAL_RCC_OscConfig+0x340>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d014      	beq.n	8001c8e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7fe fe84 	bl	8000970 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6e:	f7fe fe7f 	bl	8000970 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b64      	cmp	r3, #100	; 0x64
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e2fd      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c80:	4b8c      	ldr	r3, [pc, #560]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0xf2>
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fe6f 	bl	8000970 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7fe fe6a 	bl	8000970 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e2e8      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	4b82      	ldr	r3, [pc, #520]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x11c>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x14a>
 8001cc4:	e06c      	b.n	8001da0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cc6:	4b7b      	ldr	r3, [pc, #492]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	220c      	movs	r2, #12
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d00e      	beq.n	8001cee <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cd0:	4b78      	ldr	r3, [pc, #480]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d11f      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1a0>
 8001cdc:	4b75      	ldr	r3, [pc, #468]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	23c0      	movs	r3, #192	; 0xc0
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d116      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	4b71      	ldr	r3, [pc, #452]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x188>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e2bb      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	22f8      	movs	r2, #248	; 0xf8
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00da      	lsls	r2, r3, #3
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	e041      	b.n	8001da0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d024      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d24:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fe1e 	bl	8000970 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7fe fe19 	bl	8000970 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e297      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4c:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d0f1      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	22f8      	movs	r2, #248	; 0xf8
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	00da      	lsls	r2, r3, #3
 8001d66:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e018      	b.n	8001da0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	438a      	bics	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fdf9 	bl	8000970 <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d84:	f7fe fdf4 	bl	8000970 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e272      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d1f1      	bne.n	8001d84 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2208      	movs	r2, #8
 8001da6:	4013      	ands	r3, r2
 8001da8:	d036      	beq.n	8001e18 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db6:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe fdd7 	bl	8000970 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fdd2 	bl	8000970 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e250      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d0f1      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
 8001de4:	e018      	b.n	8001e18 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dea:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	438a      	bics	r2, r1
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7fe fdbd 	bl	8000970 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7fe fdb8 	bl	8000970 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e236      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0e:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1f1      	bne.n	8001dfc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d100      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2a8>
 8001e22:	e0b5      	b.n	8001f90 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e24:	201f      	movs	r0, #31
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001e2e:	69da      	ldr	r2, [r3, #28]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	055b      	lsls	r3, r3, #21
 8001e34:	4013      	ands	r3, r2
 8001e36:	d110      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0549      	lsls	r1, r1, #21
 8001e42:	430a      	orrs	r2, r1
 8001e44:	61da      	str	r2, [r3, #28]
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	055b      	lsls	r3, r3, #21
 8001e4e:	4013      	ands	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_OscConfig+0x344>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	d11a      	bne.n	8001e9c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_RCC_OscConfig+0x344>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_RCC_OscConfig+0x344>)
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	0049      	lsls	r1, r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e74:	f7fe fd7c 	bl	8000970 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7fe fd77 	bl	8000970 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	; 0x64
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e1f5      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_OscConfig+0x344>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10f      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x348>
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_RCC_OscConfig+0x338>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	621a      	str	r2, [r3, #32]
 8001eb0:	e036      	b.n	8001f20 <HAL_RCC_OscConfig+0x3a4>
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	fffeffff 	.word	0xfffeffff
 8001ebc:	fffbffff 	.word	0xfffbffff
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x36a>
 8001ecc:	4bca      	ldr	r3, [pc, #808]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	4bc9      	ldr	r3, [pc, #804]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	621a      	str	r2, [r3, #32]
 8001ed8:	4bc7      	ldr	r3, [pc, #796]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	4bc6      	ldr	r3, [pc, #792]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001ede:	2104      	movs	r1, #4
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	621a      	str	r2, [r3, #32]
 8001ee4:	e01c      	b.n	8001f20 <HAL_RCC_OscConfig+0x3a4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x38c>
 8001eee:	4bc2      	ldr	r3, [pc, #776]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	4bc1      	ldr	r3, [pc, #772]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	621a      	str	r2, [r3, #32]
 8001efa:	4bbf      	ldr	r3, [pc, #764]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001efc:	6a1a      	ldr	r2, [r3, #32]
 8001efe:	4bbe      	ldr	r3, [pc, #760]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f00:	2101      	movs	r1, #1
 8001f02:	430a      	orrs	r2, r1
 8001f04:	621a      	str	r2, [r3, #32]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0x3a4>
 8001f08:	4bbb      	ldr	r3, [pc, #748]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	4bba      	ldr	r3, [pc, #744]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f0e:	2101      	movs	r1, #1
 8001f10:	438a      	bics	r2, r1
 8001f12:	621a      	str	r2, [r3, #32]
 8001f14:	4bb8      	ldr	r3, [pc, #736]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	4bb7      	ldr	r3, [pc, #732]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	438a      	bics	r2, r1
 8001f1e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d014      	beq.n	8001f52 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7fe fd22 	bl	8000970 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	e009      	b.n	8001f46 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe fd1d 	bl	8000970 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	4aaf      	ldr	r2, [pc, #700]	; (80021fc <HAL_RCC_OscConfig+0x680>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e19a      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f46:	4bac      	ldr	r3, [pc, #688]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3b6>
 8001f50:	e013      	b.n	8001f7a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7fe fd0d 	bl	8000970 <HAL_GetTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fd08 	bl	8000970 <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	4aa5      	ldr	r2, [pc, #660]	; (80021fc <HAL_RCC_OscConfig+0x680>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e185      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	4ba1      	ldr	r3, [pc, #644]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	2202      	movs	r2, #2
 8001f76:	4013      	ands	r3, r2
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f84:	4b9c      	ldr	r3, [pc, #624]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	4b9b      	ldr	r3, [pc, #620]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001f8a:	499d      	ldr	r1, [pc, #628]	; (8002200 <HAL_RCC_OscConfig+0x684>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2210      	movs	r2, #16
 8001f96:	4013      	ands	r3, r2
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12a      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fa2:	4b95      	ldr	r3, [pc, #596]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa6:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	2104      	movs	r1, #4
 8001faa:	430a      	orrs	r2, r1
 8001fac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001fae:	4b92      	ldr	r3, [pc, #584]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb2:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7fe fcd9 	bl	8000970 <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fc4:	f7fe fcd4 	bl	8000970 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e152      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d0f1      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fe0:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	22f8      	movs	r2, #248	; 0xf8
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	00da      	lsls	r2, r3, #3
 8001ff0:	4b81      	ldr	r3, [pc, #516]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff6:	e034      	b.n	8002062 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	3305      	adds	r3, #5
 8001ffe:	d111      	bne.n	8002024 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002000:	4b7d      	ldr	r3, [pc, #500]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002004:	4b7c      	ldr	r3, [pc, #496]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002006:	2104      	movs	r1, #4
 8002008:	438a      	bics	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800200c:	4b7a      	ldr	r3, [pc, #488]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	22f8      	movs	r2, #248	; 0xf8
 8002012:	4393      	bics	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	00da      	lsls	r2, r3, #3
 800201c:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800201e:	430a      	orrs	r2, r1
 8002020:	635a      	str	r2, [r3, #52]	; 0x34
 8002022:	e01e      	b.n	8002062 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002024:	4b74      	ldr	r3, [pc, #464]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002028:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800202a:	2104      	movs	r1, #4
 800202c:	430a      	orrs	r2, r1
 800202e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002030:	4b71      	ldr	r3, [pc, #452]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002036:	2101      	movs	r1, #1
 8002038:	438a      	bics	r2, r1
 800203a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7fe fc98 	bl	8000970 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002046:	f7fe fc93 	bl	8000970 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e111      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002058:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	2202      	movs	r2, #2
 800205e:	4013      	ands	r3, r2
 8002060:	d1f1      	bne.n	8002046 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2220      	movs	r2, #32
 8002068:	4013      	ands	r3, r2
 800206a:	d05c      	beq.n	8002126 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800206c:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	220c      	movs	r2, #12
 8002072:	4013      	ands	r3, r2
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d00e      	beq.n	8002096 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002078:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	220c      	movs	r2, #12
 800207e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002080:	2b08      	cmp	r3, #8
 8002082:	d114      	bne.n	80020ae <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002084:	4b5c      	ldr	r3, [pc, #368]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	23c0      	movs	r3, #192	; 0xc0
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	401a      	ands	r2, r3
 800208e:	23c0      	movs	r3, #192	; 0xc0
 8002090:	025b      	lsls	r3, r3, #9
 8002092:	429a      	cmp	r2, r3
 8002094:	d10b      	bne.n	80020ae <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002096:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	4013      	ands	r3, r2
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_OscConfig+0x5a8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d03c      	beq.n	8002124 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0e6      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01b      	beq.n	80020ee <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020b6:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80020b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ba:	4b4f      	ldr	r3, [pc, #316]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	0249      	lsls	r1, r1, #9
 80020c0:	430a      	orrs	r2, r1
 80020c2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7fe fc54 	bl	8000970 <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ce:	f7fe fc4f 	bl	8000970 <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0cd      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80020e0:	4b45      	ldr	r3, [pc, #276]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80020e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	4013      	ands	r3, r2
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x552>
 80020ec:	e01b      	b.n	8002126 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020ee:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80020f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80020f4:	4943      	ldr	r1, [pc, #268]	; (8002204 <HAL_RCC_OscConfig+0x688>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe fc39 	bl	8000970 <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002104:	f7fe fc34 	bl	8000970 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0b2      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	025b      	lsls	r3, r3, #9
 800211e:	4013      	ands	r3, r2
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x588>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002124:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d100      	bne.n	8002130 <HAL_RCC_OscConfig+0x5b4>
 800212e:	e0a4      	b.n	800227a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	220c      	movs	r2, #12
 8002136:	4013      	ands	r3, r2
 8002138:	2b08      	cmp	r3, #8
 800213a:	d100      	bne.n	800213e <HAL_RCC_OscConfig+0x5c2>
 800213c:	e078      	b.n	8002230 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2b02      	cmp	r3, #2
 8002144:	d14c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800214c:	492e      	ldr	r1, [pc, #184]	; (8002208 <HAL_RCC_OscConfig+0x68c>)
 800214e:	400a      	ands	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fc0d 	bl	8000970 <HAL_GetTick>
 8002156:	0003      	movs	r3, r0
 8002158:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe fc08 	bl	8000970 <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e086      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	049b      	lsls	r3, r3, #18
 8002176:	4013      	ands	r3, r2
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	220f      	movs	r2, #15
 8002180:	4393      	bics	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 800218a:	430a      	orrs	r2, r1
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_RCC_OscConfig+0x690>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	431a      	orrs	r2, r3
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	0449      	lsls	r1, r1, #17
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7fe fbdb 	bl	8000970 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe fbd6 	bl	8000970 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e054      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	049b      	lsls	r3, r3, #18
 80021da:	4013      	ands	r3, r2
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x644>
 80021de:	e04c      	b.n	800227a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <HAL_RCC_OscConfig+0x67c>)
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <HAL_RCC_OscConfig+0x68c>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fbc0 	bl	8000970 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x6a6>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40021000 	.word	0x40021000
 80021fc:	00001388 	.word	0x00001388
 8002200:	efffffff 	.word	0xefffffff
 8002204:	fffeffff 	.word	0xfffeffff
 8002208:	feffffff 	.word	0xfeffffff
 800220c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe fbae 	bl	8000970 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e02c      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_RCC_OscConfig+0x708>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	049b      	lsls	r3, r3, #18
 800222a:	4013      	ands	r3, r2
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x694>
 800222e:	e024      	b.n	800227a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e01f      	b.n	800227c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_RCC_OscConfig+0x708>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_OscConfig+0x708>)
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	025b      	lsls	r3, r3, #9
 800224e:	401a      	ands	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	429a      	cmp	r2, r3
 8002256:	d10e      	bne.n	8002276 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	220f      	movs	r2, #15
 800225c:	401a      	ands	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d107      	bne.n	8002276 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	23f0      	movs	r3, #240	; 0xf0
 800226a:	039b      	lsls	r3, r3, #14
 800226c:	401a      	ands	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b008      	add	sp, #32
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0bf      	b.n	800241c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800229c:	4b61      	ldr	r3, [pc, #388]	; (8002424 <HAL_RCC_ClockConfig+0x19c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d911      	bls.n	80022ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b5e      	ldr	r3, [pc, #376]	; (8002424 <HAL_RCC_ClockConfig+0x19c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4393      	bics	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	4b5b      	ldr	r3, [pc, #364]	; (8002424 <HAL_RCC_ClockConfig+0x19c>)
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022bc:	4b59      	ldr	r3, [pc, #356]	; (8002424 <HAL_RCC_ClockConfig+0x19c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0a6      	b.n	800241c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2202      	movs	r2, #2
 80022d4:	4013      	ands	r3, r2
 80022d6:	d015      	beq.n	8002304 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2204      	movs	r2, #4
 80022de:	4013      	ands	r3, r2
 80022e0:	d006      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022e2:	4b51      	ldr	r3, [pc, #324]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4b50      	ldr	r3, [pc, #320]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 80022e8:	21e0      	movs	r1, #224	; 0xe0
 80022ea:	00c9      	lsls	r1, r1, #3
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f0:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	22f0      	movs	r2, #240	; 0xf0
 80022f6:	4393      	bics	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002300:	430a      	orrs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	4013      	ands	r3, r2
 800230c:	d04c      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b44      	ldr	r3, [pc, #272]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	4013      	ands	r3, r2
 8002320:	d120      	bne.n	8002364 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e07a      	b.n	800241c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	049b      	lsls	r3, r3, #18
 8002336:	4013      	ands	r3, r2
 8002338:	d114      	bne.n	8002364 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06e      	b.n	800241c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	4013      	ands	r3, r2
 8002350:	d108      	bne.n	8002364 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e062      	b.n	800241c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e05b      	b.n	800241c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	4393      	bics	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002378:	f7fe fafa 	bl	8000970 <HAL_GetTick>
 800237c:	0003      	movs	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002380:	e009      	b.n	8002396 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002382:	f7fe faf5 	bl	8000970 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_RCC_ClockConfig+0x1a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e042      	b.n	800241c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	220c      	movs	r2, #12
 800239c:	401a      	ands	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1ec      	bne.n	8002382 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_ClockConfig+0x19c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d211      	bcs.n	80023da <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_ClockConfig+0x19c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_RCC_ClockConfig+0x19c>)
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_RCC_ClockConfig+0x19c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e020      	b.n	800241c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_RCC_ClockConfig+0x1a8>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023f8:	f000 f820 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023fc:	0001      	movs	r1, r0
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x1a0>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	220f      	movs	r2, #15
 8002406:	4013      	ands	r3, r2
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x1ac>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	000a      	movs	r2, r1
 800240e:	40da      	lsrs	r2, r3
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1b0>)
 8002412:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002414:	2003      	movs	r0, #3
 8002416:	f7fe fa65 	bl	80008e4 <HAL_InitTick>
  
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
 800242c:	00001388 	.word	0x00001388
 8002430:	fffff8ff 	.word	0xfffff8ff
 8002434:	08002ab4 	.word	0x08002ab4
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b08f      	sub	sp, #60	; 0x3c
 8002440:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002442:	2314      	movs	r3, #20
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_RCC_GetSysClockFreq+0xec>)
 8002448:	ca13      	ldmia	r2!, {r0, r1, r4}
 800244a:	c313      	stmia	r3!, {r0, r1, r4}
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4a36      	ldr	r2, [pc, #216]	; (800252c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002454:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002456:	c313      	stmia	r3!, {r0, r1, r4}
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	220c      	movs	r2, #12
 800247a:	4013      	ands	r3, r2
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d047      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0xd4>
 8002480:	d849      	bhi.n	8002516 <HAL_RCC_GetSysClockFreq+0xda>
 8002482:	2b04      	cmp	r3, #4
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x50>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x56>
 800248a:	e044      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002490:	e044      	b.n	800251c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	0c9b      	lsrs	r3, r3, #18
 8002496:	220f      	movs	r2, #15
 8002498:	4013      	ands	r3, r2
 800249a:	2214      	movs	r2, #20
 800249c:	18ba      	adds	r2, r7, r2
 800249e:	5cd3      	ldrb	r3, [r2, r3]
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024a2:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	220f      	movs	r2, #15
 80024a8:	4013      	ands	r3, r2
 80024aa:	1d3a      	adds	r2, r7, #4
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b2:	23c0      	movs	r3, #192	; 0xc0
 80024b4:	025b      	lsls	r3, r3, #9
 80024b6:	401a      	ands	r2, r3
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	025b      	lsls	r3, r3, #9
 80024bc:	429a      	cmp	r2, r3
 80024be:	d109      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024c2:	481c      	ldr	r0, [pc, #112]	; (8002534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c4:	f7fd fe20 	bl	8000108 <__udivsi3>
 80024c8:	0003      	movs	r3, r0
 80024ca:	001a      	movs	r2, r3
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	4353      	muls	r3, r2
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
 80024d2:	e01a      	b.n	800250a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80024d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d6:	23c0      	movs	r3, #192	; 0xc0
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	401a      	ands	r2, r3
 80024dc:	23c0      	movs	r3, #192	; 0xc0
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d109      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e6:	4814      	ldr	r0, [pc, #80]	; (8002538 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024e8:	f7fd fe0e 	bl	8000108 <__udivsi3>
 80024ec:	0003      	movs	r3, r0
 80024ee:	001a      	movs	r2, r3
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	4353      	muls	r3, r2
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	e008      	b.n	800250a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024fa:	4810      	ldr	r0, [pc, #64]	; (800253c <HAL_RCC_GetSysClockFreq+0x100>)
 80024fc:	f7fd fe04 	bl	8000108 <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	001a      	movs	r2, r3
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	4353      	muls	r3, r2
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800250e:	e005      	b.n	800251c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002514:	e002      	b.n	800251c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_GetSysClockFreq+0x100>)
 8002518:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800251a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b00f      	add	sp, #60	; 0x3c
 8002524:	bd90      	pop	{r4, r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	08002a94 	.word	0x08002a94
 800252c:	08002aa4 	.word	0x08002aa4
 8002530:	40021000 	.word	0x40021000
 8002534:	01e84800 	.word	0x01e84800
 8002538:	02dc6c00 	.word	0x02dc6c00
 800253c:	007a1200 	.word	0x007a1200

08002540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e042      	b.n	80025d8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223d      	movs	r2, #61	; 0x3d
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	223c      	movs	r2, #60	; 0x3c
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f7fe f909 	bl	8000780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	223d      	movs	r2, #61	; 0x3d
 8002572:	2102      	movs	r1, #2
 8002574:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	0019      	movs	r1, r3
 8002580:	0010      	movs	r0, r2
 8002582:	f000 f9bd 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2246      	movs	r2, #70	; 0x46
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	223e      	movs	r2, #62	; 0x3e
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	223f      	movs	r2, #63	; 0x3f
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	2101      	movs	r1, #1
 80025a4:	5499      	strb	r1, [r3, r2]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2241      	movs	r2, #65	; 0x41
 80025aa:	2101      	movs	r1, #1
 80025ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2242      	movs	r2, #66	; 0x42
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2243      	movs	r2, #67	; 0x43
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2244      	movs	r2, #68	; 0x44
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2245      	movs	r2, #69	; 0x45
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	223d      	movs	r2, #61	; 0x3d
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	223d      	movs	r2, #61	; 0x3d
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d001      	beq.n	80025f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e03b      	b.n	8002670 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	223d      	movs	r2, #61	; 0x3d
 80025fc:	2102      	movs	r1, #2
 80025fe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2101      	movs	r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <HAL_TIM_Base_Start_IT+0x98>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00f      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x5a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	429a      	cmp	r2, r3
 8002624:	d009      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x5a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a14      	ldr	r2, [pc, #80]	; (800267c <HAL_TIM_Base_Start_IT+0x9c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x5a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a12      	ldr	r2, [pc, #72]	; (8002680 <HAL_TIM_Base_Start_IT+0xa0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d111      	bne.n	800265e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2207      	movs	r2, #7
 8002642:	4013      	ands	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b06      	cmp	r3, #6
 800264a:	d010      	beq.n	800266e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2101      	movs	r1, #1
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265c:	e007      	b.n	800266e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	b004      	add	sp, #16
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40000400 	.word	0x40000400
 8002680:	40014000 	.word	0x40014000

08002684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2202      	movs	r2, #2
 8002694:	4013      	ands	r3, r2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d124      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2202      	movs	r2, #2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d11d      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2203      	movs	r2, #3
 80026ae:	4252      	negs	r2, r2
 80026b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2203      	movs	r2, #3
 80026c0:	4013      	ands	r3, r2
 80026c2:	d004      	beq.n	80026ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 f902 	bl	80028d0 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e007      	b.n	80026de <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 f8f5 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f901 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2204      	movs	r2, #4
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d125      	bne.n	800273e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2204      	movs	r2, #4
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d11e      	bne.n	800273e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2205      	movs	r2, #5
 8002706:	4252      	negs	r2, r2
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	23c0      	movs	r3, #192	; 0xc0
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d004      	beq.n	8002728 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 f8d5 	bl	80028d0 <HAL_TIM_IC_CaptureCallback>
 8002726:	e007      	b.n	8002738 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 f8c8 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0018      	movs	r0, r3
 8002734:	f000 f8d4 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2208      	movs	r2, #8
 8002746:	4013      	ands	r3, r2
 8002748:	2b08      	cmp	r3, #8
 800274a:	d124      	bne.n	8002796 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2208      	movs	r2, #8
 8002754:	4013      	ands	r3, r2
 8002756:	2b08      	cmp	r3, #8
 8002758:	d11d      	bne.n	8002796 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2209      	movs	r2, #9
 8002760:	4252      	negs	r2, r2
 8002762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2204      	movs	r2, #4
 8002768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	2203      	movs	r2, #3
 8002772:	4013      	ands	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f8a9 	bl	80028d0 <HAL_TIM_IC_CaptureCallback>
 800277e:	e007      	b.n	8002790 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	0018      	movs	r0, r3
 8002784:	f000 f89c 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	0018      	movs	r0, r3
 800278c:	f000 f8a8 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2210      	movs	r2, #16
 800279e:	4013      	ands	r3, r2
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d125      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2210      	movs	r2, #16
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d11e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2211      	movs	r2, #17
 80027b8:	4252      	negs	r2, r2
 80027ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2208      	movs	r2, #8
 80027c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	23c0      	movs	r3, #192	; 0xc0
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f87c 	bl	80028d0 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e007      	b.n	80027ea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 f86f 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f87b 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d10f      	bne.n	800281e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	2b01      	cmp	r3, #1
 800280a:	d108      	bne.n	800281e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2202      	movs	r2, #2
 8002812:	4252      	negs	r2, r2
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0018      	movs	r0, r3
 800281a:	f000 f849 	bl	80028b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	4013      	ands	r3, r2
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d10f      	bne.n	800284c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	4013      	ands	r3, r2
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d108      	bne.n	800284c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2281      	movs	r2, #129	; 0x81
 8002840:	4252      	negs	r2, r2
 8002842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0018      	movs	r0, r3
 8002848:	f000 f8e2 	bl	8002a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	4013      	ands	r3, r2
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d10f      	bne.n	800287a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2240      	movs	r2, #64	; 0x40
 8002862:	4013      	ands	r3, r2
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d108      	bne.n	800287a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2241      	movs	r2, #65	; 0x41
 800286e:	4252      	negs	r2, r2
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f000 f83b 	bl	80028f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2220      	movs	r2, #32
 8002882:	4013      	ands	r3, r2
 8002884:	2b20      	cmp	r3, #32
 8002886:	d10f      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	4013      	ands	r3, r2
 8002892:	2b20      	cmp	r3, #32
 8002894:	d108      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2221      	movs	r2, #33	; 0x21
 800289c:	4252      	negs	r2, r2
 800289e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f8ac 	bl	8002a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b002      	add	sp, #8
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b002      	add	sp, #8
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a34      	ldr	r2, [pc, #208]	; (80029e4 <TIM_Base_SetConfig+0xe4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d008      	beq.n	800292a <TIM_Base_SetConfig+0x2a>
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	05db      	lsls	r3, r3, #23
 800291e:	429a      	cmp	r2, r3
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x2a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <TIM_Base_SetConfig+0xe8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2270      	movs	r2, #112	; 0x70
 800292e:	4393      	bics	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <TIM_Base_SetConfig+0xe4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d018      	beq.n	8002976 <TIM_Base_SetConfig+0x76>
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	05db      	lsls	r3, r3, #23
 800294a:	429a      	cmp	r2, r3
 800294c:	d013      	beq.n	8002976 <TIM_Base_SetConfig+0x76>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a25      	ldr	r2, [pc, #148]	; (80029e8 <TIM_Base_SetConfig+0xe8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00f      	beq.n	8002976 <TIM_Base_SetConfig+0x76>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a24      	ldr	r2, [pc, #144]	; (80029ec <TIM_Base_SetConfig+0xec>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00b      	beq.n	8002976 <TIM_Base_SetConfig+0x76>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <TIM_Base_SetConfig+0xf0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d007      	beq.n	8002976 <TIM_Base_SetConfig+0x76>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <TIM_Base_SetConfig+0xf4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d003      	beq.n	8002976 <TIM_Base_SetConfig+0x76>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <TIM_Base_SetConfig+0xf8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d108      	bne.n	8002988 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a20      	ldr	r2, [pc, #128]	; (80029fc <TIM_Base_SetConfig+0xfc>)
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	4393      	bics	r3, r2
 800298e:	001a      	movs	r2, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <TIM_Base_SetConfig+0xe4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00b      	beq.n	80029ce <TIM_Base_SetConfig+0xce>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <TIM_Base_SetConfig+0xf0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <TIM_Base_SetConfig+0xce>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <TIM_Base_SetConfig+0xf4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d003      	beq.n	80029ce <TIM_Base_SetConfig+0xce>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <TIM_Base_SetConfig+0xf8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d103      	bne.n	80029d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	615a      	str	r2, [r3, #20]
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b004      	add	sp, #16
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40002000 	.word	0x40002000
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40014400 	.word	0x40014400
 80029f8:	40014800 	.word	0x40014800
 80029fc:	fffffcff 	.word	0xfffffcff

08002a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <__libc_init_array>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	2600      	movs	r6, #0
 8002a24:	4d0c      	ldr	r5, [pc, #48]	; (8002a58 <__libc_init_array+0x38>)
 8002a26:	4c0d      	ldr	r4, [pc, #52]	; (8002a5c <__libc_init_array+0x3c>)
 8002a28:	1b64      	subs	r4, r4, r5
 8002a2a:	10a4      	asrs	r4, r4, #2
 8002a2c:	42a6      	cmp	r6, r4
 8002a2e:	d109      	bne.n	8002a44 <__libc_init_array+0x24>
 8002a30:	2600      	movs	r6, #0
 8002a32:	f000 f821 	bl	8002a78 <_init>
 8002a36:	4d0a      	ldr	r5, [pc, #40]	; (8002a60 <__libc_init_array+0x40>)
 8002a38:	4c0a      	ldr	r4, [pc, #40]	; (8002a64 <__libc_init_array+0x44>)
 8002a3a:	1b64      	subs	r4, r4, r5
 8002a3c:	10a4      	asrs	r4, r4, #2
 8002a3e:	42a6      	cmp	r6, r4
 8002a40:	d105      	bne.n	8002a4e <__libc_init_array+0x2e>
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	00b3      	lsls	r3, r6, #2
 8002a46:	58eb      	ldr	r3, [r5, r3]
 8002a48:	4798      	blx	r3
 8002a4a:	3601      	adds	r6, #1
 8002a4c:	e7ee      	b.n	8002a2c <__libc_init_array+0xc>
 8002a4e:	00b3      	lsls	r3, r6, #2
 8002a50:	58eb      	ldr	r3, [r5, r3]
 8002a52:	4798      	blx	r3
 8002a54:	3601      	adds	r6, #1
 8002a56:	e7f2      	b.n	8002a3e <__libc_init_array+0x1e>
 8002a58:	08002ac4 	.word	0x08002ac4
 8002a5c:	08002ac4 	.word	0x08002ac4
 8002a60:	08002ac4 	.word	0x08002ac4
 8002a64:	08002ac8 	.word	0x08002ac8

08002a68 <memset>:
 8002a68:	0003      	movs	r3, r0
 8002a6a:	1882      	adds	r2, r0, r2
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	7019      	strb	r1, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <_init>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr

08002a84 <_fini>:
 8002a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8a:	bc08      	pop	{r3}
 8002a8c:	469e      	mov	lr, r3
 8002a8e:	4770      	bx	lr
