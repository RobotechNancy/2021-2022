
automate_grand_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005154  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800530c  0800530c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800530c  0800530c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800530c  0800530c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000158  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000164  20000164  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb34  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f40  00000000  00000000  0002cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  0002eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ab8  00000000  00000000  0002f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7d9  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000daab  00000000  00000000  0004b8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2ce1  00000000  00000000  0005939c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fc07d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003104  00000000  00000000  000fc0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052c4 	.word	0x080052c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080052c4 	.word	0x080052c4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \param isRep vrai si c'est une reponse a une requete, faux sinon
 * \param RepId indique le nombre de reponse atendu pour une requete et le num de la reponse pour une reponse
 * \param dataLen frame payload length in byte (0 .. 8) aka data length code
 * \param data CAN frame payload (up to 8 byte)
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b09c      	sub	sp, #112	; 0x70
 80007d8:	af06      	add	r7, sp, #24
 80007da:	6078      	str	r0, [r7, #4]
	// traitement et mise en forme de la trame
	/////////////////////////////////////////////////////////////////////////
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80007dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f001 f99e 	bl	8001b28 <HAL_CAN_GetRxMessage>

	struct CanResponse_t msg;
	msg = traitement_trame( RxHeader, RxData);
 80007ec:	f107 050c 	add.w	r5, r7, #12
 80007f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007f4:	9304      	str	r3, [sp, #16]
 80007f6:	466c      	mov	r4, sp
 80007f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000808:	4628      	mov	r0, r5
 800080a:	f000 f8e9 	bl	80009e0 <traitement_trame>
	/////////////////////////////////////////////////////////////////////////
	switch(msg.codeFct){
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
 8000814:	d009      	beq.n	800082a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 8000816:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
 800081a:	d85c      	bhi.n	80008d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
 800081c:	f5b3 2fc4 	cmp.w	r3, #401408	; 0x62000
 8000820:	d023      	beq.n	800086a <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
 8000822:	f5b3 2fc6 	cmp.w	r3, #405504	; 0x63000
 8000826:	d03b      	beq.n	80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			data[0] = CR;
			send(CAN_ADDR_RASPBERRY,ACCUSER_RECPETION,data,1,true,1,msg.idMessage);
			break;
	default :

	break;
 8000828:	e055      	b.n	80008d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
			CR=pompe(msg.data[0]);
 800082a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fde7 	bl	800140c <pompe>
 800083e:	4603      	mov	r3, r0
 8000840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			data[0] = CR;
 8000844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000848:	723b      	strb	r3, [r7, #8]
			send(CAN_ADDR_RASPBERRY,ACCUSER_RECPETION,data,1,true,1,msg.idMessage);
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	f107 0208 	add.w	r2, r7, #8
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2301      	movs	r3, #1
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	f44f 217f 	mov.w	r1, #1044480	; 0xff000
 8000860:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000864:	f000 f884 	bl	8000970 <send>
			break;
 8000868:	e036      	b.n	80008d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			CR=deplacement_servo_courroie(msg.data[0]);
 800086a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fbd2 	bl	8001018 <deplacement_servo_courroie>
 8000874:	4603      	mov	r3, r0
 8000876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			data[0] = CR;
 800087a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800087e:	723b      	strb	r3, [r7, #8]
			send(CAN_ADDR_RASPBERRY,ACCUSER_RECPETION,data,1,true,1,msg.idMessage);
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	f107 0208 	add.w	r2, r7, #8
 8000886:	9302      	str	r3, [sp, #8]
 8000888:	2301      	movs	r3, #1
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	2301      	movs	r3, #1
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	f44f 217f 	mov.w	r1, #1044480	; 0xff000
 8000896:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800089a:	f000 f869 	bl	8000970 <send>
			break;
 800089e:	e01b      	b.n	80008d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			CR=deplacement_servo_ventouse(msg.data[0]);
 80008a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fb83 	bl	8000fb0 <deplacement_servo_ventouse>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			data[0] = CR;
 80008b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80008b4:	723b      	strb	r3, [r7, #8]
			send(CAN_ADDR_RASPBERRY,ACCUSER_RECPETION,data,1,true,1,msg.idMessage);
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	f107 0208 	add.w	r2, r7, #8
 80008bc:	9302      	str	r3, [sp, #8]
 80008be:	2301      	movs	r3, #1
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2301      	movs	r3, #1
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2301      	movs	r3, #1
 80008c8:	f44f 217f 	mov.w	r1, #1044480	; 0xff000
 80008cc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80008d0:	f000 f84e 	bl	8000970 <send>
			break;
 80008d4:	e000      	b.n	80008d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
	break;
 80008d6:	bf00      	nop


	//renvoi un msg sur le bus can
	//uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
	//send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5, ) ;
}
 80008d8:	bf00      	nop
 80008da:	3758      	adds	r7, #88	; 0x58
 80008dc:	46bd      	mov	sp, r7
 80008de:	bdb0      	pop	{r4, r5, r7, pc}

080008e0 <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR adresse) {
 80008e0:	b084      	sub	sp, #16
 80008e2:	b5b0      	push	{r4, r5, r7, lr}
 80008e4:	b08a      	sub	sp, #40	; 0x28
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80008ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0b010000000000000; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0; //
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0b111100000000000; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000906:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800090a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 8000918:	230e      	movs	r3, #14
 800091a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000924:	f000 ff17 	bl	8001756 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 8000928:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800092c:	f000 ffdd 	bl	80018ea <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000930:	2102      	movs	r1, #2
 8000932:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000936:	f001 fa09 	bl	8001d4c <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <CAN_Config+0x88>)
 800093c:	461d      	mov	r5, r3
 800093e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800094a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800094e:	e885 0003 	stmia.w	r5, {r0, r1}
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)
	CanAdresse = adresse;
 8000952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <CAN_Config+0x8c>)
 8000958:	701a      	strb	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000964:	b004      	add	sp, #16
 8000966:	4770      	bx	lr
 8000968:	20000134 	.word	0x20000134
 800096c:	2000015c 	.word	0x2000015c

08000970 <send>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_WRITE_ERROR} une erreur à eu lieu lors de l'envoie du message
*/
int send(CAN_ADDR addr, CAN_CODE_FCT codeFct , uint8_t data[], uint dataLen, bool isRep, uint repLenght, uint idMessage){
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]

	if (dataLen >8){
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2b08      	cmp	r3, #8
 8000982:	d901      	bls.n	8000988 <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <send+0x68>)
 8000986:	e022      	b.n	80009ce <send+0x5e>
	//if(!is_valid_addr(addr)) return CAN_E_UNKNOW_ADDR;
	//if(!is_valid_code_fct(codeFct)) return CAN_E_UNKNOW_CODE_FCT;


	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dataLen; // taille des données à transmettre en octets
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28

	//adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage

	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | codeFct | repLenght | idMessage << CAN_DECALAGE_ID_MSG | isRep << CAN_DECALAGE_IS_REP | repLenght;
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	431a      	orrs	r2, r3
 8000992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000994:	431a      	orrs	r2, r3
 8000996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	4313      	orrs	r3, r2
 800099c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80009a0:	00d2      	lsls	r2, r2, #3
 80009a2:	431a      	orrs	r2, r3
 80009a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009a6:	4313      	orrs	r3, r2
 80009a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ac:	61fb      	str	r3, [r7, #28]
	//txHeader.ExtId = 0b11101100100100000010000011111;
	//1 111 0001 0000 10010000 00000000 1 001
	//1011 0001 00001001 00000000 0000 1 001000000011001
	txHeader.IDE = CAN_ID_EXT; //on choisit l'adressage étendue
 80009ae:	2304      	movs	r3, #4
 80009b0:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	f107 0118 	add.w	r1, r7, #24
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <send+0x6c>)
 80009c8:	f000 ffd3 	bl	8001972 <HAL_CAN_AddTxMessage>

	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	fffffe02 	.word	0xfffffe02
 80009dc:	20000134 	.word	0x20000134

080009e0 <traitement_trame>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_READ_ERROR} erreur dans la lecture de la trame depuis le buffer
*/
struct CanResponse_t traitement_trame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 80009e0:	b084      	sub	sp, #16
 80009e2:	b4b0      	push	{r4, r5, r7}
 80009e4:	b08d      	sub	sp, #52	; 0x34
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		struct CanResponse_t rep;
		//rep.ExtID.champId = frame.ExtId;

		rep.addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR)  ;
 80009f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80009f8:	60bb      	str	r3, [r7, #8]
		rep.emetteur = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR) ;
 80009fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000a00:	60fb      	str	r3, [r7, #12]
		rep.codeFct = (frame.ExtId & CAN_FILTER_CODE_FCT);
 8000a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a04:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8000a08:	613b      	str	r3, [r7, #16]
		rep.isRep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 8000a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf14      	ite	ne
 8000a16:	2301      	movne	r3, #1
 8000a18:	2300      	moveq	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	763b      	strb	r3, [r7, #24]
		rep.RepId = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 8000a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	61fb      	str	r3, [r7, #28]
		rep.idMessage = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 8000a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a28:	091b      	lsrs	r3, r3, #4
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	617b      	str	r3, [r7, #20]
        if(!is_valid_addr(rep.addr)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_addr(rep.emetteur)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_code_fct(rep.codeFct)) return CAN_E_UNKNOW_CODE_FCT;
        if (frame.DLC >8)  return CAN_E_DATA_SIZE_TOO_LONG;*/

        rep.dataLen = frame.DLC;
 8000a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a30:	623b      	str	r3, [r7, #32]


        for (int i = 0; i < frame.DLC; i++){
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a36:	e00c      	b.n	8000a52 <traitement_trame+0x72>
            //if(data[i] <0 || data[i] > 255) return CAN_E_OOB_DATA;
            rep.data[i] = data[i];
 8000a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a3c:	4413      	add	r3, r2
 8000a3e:	7819      	ldrb	r1, [r3, #0]
 8000a40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a46:	4413      	add	r3, r2
 8000a48:	460a      	mov	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < frame.DLC; i++){
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	3301      	adds	r3, #1
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d8ee      	bhi.n	8000a38 <traitement_trame+0x58>
        }


    return rep;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	461d      	mov	r5, r3
 8000a5e:	f107 0408 	add.w	r4, r7, #8
 8000a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	602b      	str	r3, [r5, #0]
}
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	3734      	adds	r7, #52	; 0x34
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bcb0      	pop	{r4, r5, r7}
 8000a76:	b004      	add	sp, #16
 8000a78:	4770      	bx	lr
	...

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	; 0x34
 8000a80:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f000 fd07 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f835 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fa19 	bl	8000ec0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a8e:	f000 f8bb 	bl	8000c08 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a92:	f000 f965 	bl	8000d60 <MX_TIM3_Init>
  MX_CAN_Init();
 8000a96:	f000 f881 	bl	8000b9c <MX_CAN_Init>
  MX_TIM6_Init();
 8000a9a:	f000 f9d9 	bl	8000e50 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config(hcan, CAN_ADDR_ACTIONNEUR_E);
 8000a9e:	4e14      	ldr	r6, [pc, #80]	; (8000af0 <main+0x74>)
 8000aa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa4:	9306      	str	r3, [sp, #24]
 8000aa6:	466d      	mov	r5, sp
 8000aa8:	f106 0410 	add.w	r4, r6, #16
 8000aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ab4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ab8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000abc:	f7ff ff10 	bl	80008e0 <CAN_Config>

  //float b = a[0];


  //test deplacement validation
  float x1=0;
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  float y1=0;
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
  float *pointx1 = &x1;
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	60fb      	str	r3, [r7, #12]
  float *pointy1 = &y1;
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	60bb      	str	r3, [r7, #8]

  pompe_on();
 8000ad4:	f000 fc82 	bl	80013dc <pompe_on>
  attendre(2000);
 8000ad8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000adc:	f000 fad0 	bl	8001080 <attendre>
  pompe_off();
 8000ae0:	f000 fc88 	bl	80013f4 <pompe_off>
  attendre(2000);
 8000ae4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ae8:	f000 faca 	bl	8001080 <attendre>
//  deplacement_servo_courroie(140);
//  deplacement_servo_courroie(0);

  //int a = test_resistance();
  //deplacement_servo_resistance(0);
  while (1)
 8000aec:	e7fe      	b.n	8000aec <main+0x70>
 8000aee:	bf00      	nop
 8000af0:	20000028 	.word	0x20000028

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b096      	sub	sp, #88	; 0x58
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afe:	2228      	movs	r2, #40	; 0x28
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fbd6 	bl	80052b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b30:	2310      	movs	r3, #16
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fdf7 	bl	8002730 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b48:	f000 fa04 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fe20 	bl	80037ac <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b72:	f000 f9ef 	bl	8000f54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fff8 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b8e:	f000 f9e1 	bl	8000f54 <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3758      	adds	r7, #88	; 0x58
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_CAN_Init+0x64>)
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_CAN_Init+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_CAN_Init+0x64>)
 8000ba8:	2204      	movs	r2, #4
 8000baa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bbe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bc2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000bc6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_CAN_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_CAN_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_CAN_Init+0x64>)
 8000bee:	f000 fcb7 	bl	8001560 <HAL_CAN_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000bf8:	f000 f9ac 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000028 	.word	0x20000028
 8000c04:	40006400 	.word	0x40006400

08000c08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09a      	sub	sp, #104	; 0x68
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	222c      	movs	r2, #44	; 0x2c
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fb36 	bl	80052b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c48:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c4a:	4a44      	ldr	r2, [pc, #272]	; (8000d5c <MX_TIM1_Init+0x154>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000c4e:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c50:	224f      	movs	r2, #79	; 0x4f
 8000c52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c5c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c68:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c74:	4838      	ldr	r0, [pc, #224]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c76:	f003 f8a5 	bl	8003dc4 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f000 f968 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4831      	ldr	r0, [pc, #196]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000c92:	f003 fc33 	bl	80044fc <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c9c:	f000 f95a 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ca0:	482d      	ldr	r0, [pc, #180]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000ca2:	f003 f93b 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000cac:	f000 f952 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4825      	ldr	r0, [pc, #148]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000cc4:	f004 f9c6 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000cce:	f000 f941 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd2:	2360      	movs	r3, #96	; 0x60
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 20;
 8000cd6:	2314      	movs	r3, #20
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4818      	ldr	r0, [pc, #96]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000cf8:	f003 faec 	bl	80042d4 <HAL_TIM_PWM_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d02:	f000 f927 	bl	8000f54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000d3c:	f004 f9f8 	bl	8005130 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000d46:	f000 f905 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <MX_TIM1_Init+0x150>)
 8000d4c:	f000 fa84 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000d50:	bf00      	nop
 8000d52:	3768      	adds	r7, #104	; 0x68
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000050 	.word	0x20000050
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000d94:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000d9a:	224f      	movs	r2, #79	; 0x4f
 8000d9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000da6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000daa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db8:	4823      	ldr	r0, [pc, #140]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000dba:	f003 f803 	bl	8003dc4 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000dc4:	f000 f8c6 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000dd6:	f003 fb91 	bl	80044fc <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000de0:	f000 f8b8 	bl	8000f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000de6:	f003 f899 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000df0:	f000 f8b0 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000e04:	f004 f926 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e0e:	f000 f8a1 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8000e16:	2314      	movs	r3, #20
 8000e18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	220c      	movs	r2, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000e2a:	f003 fa53 	bl	80042d4 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e34:	f000 f88e 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM3_Init+0xe8>)
 8000e3a:	f000 fa0d 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3738      	adds	r7, #56	; 0x38
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000009c 	.word	0x2000009c
 8000e4c:	40000400 	.word	0x40000400

08000e50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM6_Init+0x68>)
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <MX_TIM6_Init+0x6c>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_TIM6_Init+0x68>)
 8000e68:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_TIM6_Init+0x68>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_TIM6_Init+0x68>)
 8000e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_TIM6_Init+0x68>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_TIM6_Init+0x68>)
 8000e84:	f002 ff9e 	bl	8003dc4 <HAL_TIM_Base_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e8e:	f000 f861 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_TIM6_Init+0x68>)
 8000ea0:	f004 f8d8 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000eaa:	f000 f853 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000e8 	.word	0x200000e8
 8000ebc:	40001000 	.word	0x40001000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000edc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_GPIO_Init+0x8c>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pompe_GPIO_Port, pompe_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2140      	movs	r1, #64	; 0x40
 8000f22:	480b      	ldr	r0, [pc, #44]	; (8000f50 <MX_GPIO_Init+0x90>)
 8000f24:	f001 fbec 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : pompe_Pin */
  GPIO_InitStruct.Pin = pompe_Pin;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(pompe_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_GPIO_Init+0x90>)
 8000f40:	f001 fa6c 	bl	800241c <HAL_GPIO_Init>

}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000400 	.word	0x48000400

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <servo1Start>:
#include "actionneurs_define.h"
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim6;

void servo1Start() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000f64:	210c      	movs	r1, #12
 8000f66:	4802      	ldr	r0, [pc, #8]	; (8000f70 <servo1Start+0x10>)
 8000f68:	f003 f83a 	bl	8003fe0 <HAL_TIM_PWM_Start>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000009c 	.word	0x2000009c

08000f74 <servo1Stop>:

void servo1Stop() {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8000f78:	210c      	movs	r1, #12
 8000f7a:	4802      	ldr	r0, [pc, #8]	; (8000f84 <servo1Stop+0x10>)
 8000f7c:	f003 f91c 	bl	80041b8 <HAL_TIM_PWM_Stop>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000009c 	.word	0x2000009c

08000f88 <servo2Start>:

void servo2Start() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4802      	ldr	r0, [pc, #8]	; (8000f98 <servo2Start+0x10>)
 8000f90:	f003 ff5c 	bl	8004e4c <HAL_TIMEx_PWMN_Start>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000050 	.word	0x20000050

08000f9c <servo2Stop>:

void servo2Stop() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	4802      	ldr	r0, [pc, #8]	; (8000fac <servo2Stop+0x10>)
 8000fa4:	f003 fff8 	bl	8004f98 <HAL_TIMEx_PWMN_Stop>

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000050 	.word	0x20000050

08000fb0 <deplacement_servo_ventouse>:

int deplacement_servo_ventouse(int angle) {
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	servo1Start();
 8000fb8:	f7ff ffd2 	bl	8000f60 <servo1Start>

	TIM3-> CCR4=ANGLE_VENTOUSE_REFERENCE-angle*PAS_SERVO_VENTOUSE;
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fb7f 	bl	80006c0 <__aeabi_i2d>
 8000fc2:	a313      	add	r3, pc, #76	; (adr r3, 8001010 <deplacement_servo_ventouse+0x60>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff f8fe 	bl	80001c8 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	f04f 0000 	mov.w	r0, #0
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <deplacement_servo_ventouse+0x58>)
 8000fd6:	f7ff fa25 	bl	8000424 <__aeabi_dsub>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4c0b      	ldr	r4, [pc, #44]	; (800100c <deplacement_servo_ventouse+0x5c>)
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fbd6 	bl	8000794 <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	6423      	str	r3, [r4, #64]	; 0x40
	attendre(TEMPS_ACTION_VENTOUSE);
 8000fec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff0:	f000 f846 	bl	8001080 <attendre>
	servo1Stop();
 8000ff4:	f7ff ffbe 	bl	8000f74 <servo1Stop>
	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	406d0000 	.word	0x406d0000
 800100c:	40000400 	.word	0x40000400
 8001010:	8f5c28f6 	.word	0x8f5c28f6
 8001014:	3ff0f5c2 	.word	0x3ff0f5c2

08001018 <deplacement_servo_courroie>:

int deplacement_servo_courroie(int angle) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	servo2Start();
 8001020:	f7ff ffb2 	bl	8000f88 <servo2Start>

	TIM1-> CCR3=ANGLE_COURROIE_REFERENCE-angle*PAS_SERVO_COURROIE;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fb4b 	bl	80006c0 <__aeabi_i2d>
 800102a:	a313      	add	r3, pc, #76	; (adr r3, 8001078 <deplacement_servo_courroie+0x60>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff f8ca 	bl	80001c8 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	f04f 0000 	mov.w	r0, #0
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <deplacement_servo_courroie+0x58>)
 800103e:	f7ff f9f1 	bl	8000424 <__aeabi_dsub>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <deplacement_servo_courroie+0x5c>)
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fba2 	bl	8000794 <__aeabi_d2uiz>
 8001050:	4603      	mov	r3, r0
 8001052:	63e3      	str	r3, [r4, #60]	; 0x3c
	attendre(TEMPS_ACTION_COURROIE);
 8001054:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001058:	f000 f812 	bl	8001080 <attendre>
	servo2Stop();
 800105c:	f7ff ff9e 	bl	8000f9c <servo2Stop>
	return 0;
 8001060:	2300      	movs	r3, #0
	//pas plus de 140
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	406d4000 	.word	0x406d4000
 8001074:	40012c00 	.word	0x40012c00
 8001078:	318fc505 	.word	0x318fc505
 800107c:	3ff02d77 	.word	0x3ff02d77

08001080 <attendre>:


void attendre(int temps){ //temps en ms durant lequel la commande reste active
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim6);
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <attendre+0x34>)
 800108a:	f002 fef3 	bl	8003e74 <HAL_TIM_Base_Start>
	uint32_t start = __HAL_TIM_GET_COUNTER(&htim6);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <attendre+0x34>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	60fb      	str	r3, [r7, #12]
	//uint32_t start=HAL_GetTick();

	while((__HAL_TIM_GET_COUNTER(&htim6)-start)<temps) {
 8001096:	bf00      	nop
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <attendre+0x34>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad2      	subs	r2, r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d3f7      	bcc.n	8001098 <attendre+0x18>
	//	while((HAL_GetTick()-start)<temps) {
		}
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000e8 	.word	0x200000e8

080010b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x44>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x44>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x44>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x44>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x44>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <HAL_CAN_MspInit+0xc0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d149      	bne.n	80011b6 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <HAL_CAN_MspInit+0xc4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <HAL_CAN_MspInit+0xc4>)
 8001128:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_CAN_MspInit+0xc4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_CAN_MspInit+0xc4>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_CAN_MspInit+0xc4>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_CAN_MspInit+0xc4>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001152:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001164:	2309      	movs	r3, #9
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f001 f953 	bl	800241c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2013      	movs	r0, #19
 800117c:	f001 f917 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8001180:	2013      	movs	r0, #19
 8001182:	f001 f930 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2014      	movs	r0, #20
 800118c:	f001 f90f 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001190:	2014      	movs	r0, #20
 8001192:	f001 f928 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2015      	movs	r0, #21
 800119c:	f001 f907 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80011a0:	2015      	movs	r0, #21
 80011a2:	f001 f920 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2016      	movs	r0, #22
 80011ac:	f001 f8ff 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80011b0:	2016      	movs	r0, #22
 80011b2:	f001 f918 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40006400 	.word	0x40006400
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <HAL_TIM_Base_MspInit+0x80>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10c      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 80011e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80011f2:	e022      	b.n	800123a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_TIM_Base_MspInit+0x88>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10c      	bne.n	8001218 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
}
 8001216:	e010      	b.n	800123a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <HAL_TIM_Base_MspInit+0x8c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10b      	bne.n	800123a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_TIM_Base_MspInit+0x84>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	bf00      	nop
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40012c00 	.word	0x40012c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40000400 	.word	0x40000400
 8001254:	40001000 	.word	0x40001000

08001258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a22      	ldr	r2, [pc, #136]	; (8001300 <HAL_TIM_MspPostInit+0xa8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d11c      	bne.n	80012b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_TIM_MspPostInit+0xac>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a21      	ldr	r2, [pc, #132]	; (8001304 <HAL_TIM_MspPostInit+0xac>)
 8001280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_TIM_MspPostInit+0xac>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0 / OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = servo2_Pin;
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012a2:	2306      	movs	r3, #6
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo2_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <HAL_TIM_MspPostInit+0xb0>)
 80012ae:	f001 f8b5 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012b2:	e020      	b.n	80012f6 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_TIM_MspPostInit+0xb4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d11b      	bne.n	80012f6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_TIM_MspPostInit+0xac>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_TIM_MspPostInit+0xac>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6153      	str	r3, [r2, #20]
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_TIM_MspPostInit+0xac>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = servo1_Pin;
 80012d6:	2302      	movs	r3, #2
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e6:	2302      	movs	r3, #2
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo1_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <HAL_TIM_MspPostInit+0xb8>)
 80012f2:	f001 f893 	bl	800241c <HAL_GPIO_Init>
}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40012c00 	.word	0x40012c00
 8001304:	40021000 	.word	0x40021000
 8001308:	48001400 	.word	0x48001400
 800130c:	40000400 	.word	0x40000400
 8001310:	48000400 	.word	0x48000400

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f8de 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <CAN_TX_IRQHandler+0x10>)
 800136e:	f000 fd13 	bl	8001d98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000028 	.word	0x20000028

0800137c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <CAN_RX0_IRQHandler+0x10>)
 8001382:	f000 fd09 	bl	8001d98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000028 	.word	0x20000028

08001390 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <CAN_RX1_IRQHandler+0x10>)
 8001396:	f000 fcff 	bl	8001d98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000028 	.word	0x20000028

080013a4 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <CAN_SCE_IRQHandler+0x10>)
 80013aa:	f000 fcf5 	bl	8001d98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000028 	.word	0x20000028

080013b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <pompe_on>:
#include "tor.h"
#include "actionneurs_define.h"
#include "main.h"
#include <stdbool.h>

int pompe_on() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pompe_GPIO_Port, pompe_Pin, RESET); //modifie la valeur du pin a 0 pour activer la pompe
 80013e0:	2200      	movs	r2, #0
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <pompe_on+0x14>)
 80013e6:	f001 f98b 	bl	8002700 <HAL_GPIO_WritePin>
	return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	48000400 	.word	0x48000400

080013f4 <pompe_off>:

int pompe_off() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pompe_GPIO_Port, pompe_Pin, SET);  //modifie la valeur du pin a 1 pour activer la pompe
 80013f8:	2201      	movs	r2, #1
 80013fa:	2140      	movs	r1, #64	; 0x40
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <pompe_off+0x14>)
 80013fe:	f001 f97f 	bl	8002700 <HAL_GPIO_WritePin>
	return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	48000400 	.word	0x48000400

0800140c <pompe>:


uint8_t pompe(bool ordre) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	if (ordre==ON) {
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <pompe+0x18>
		pompe_on();
 800141c:	f7ff ffde 	bl	80013dc <pompe_on>
		return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e009      	b.n	8001438 <pompe+0x2c>
	}
	else if (ordre==OFF) {
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f083 0301 	eor.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <pompe+0x2c>
		pompe_off();
 8001430:	f7ff ffe0 	bl	80013f4 <pompe_off>
		return 0;
 8001434:	2300      	movs	r3, #0
 8001436:	e7ff      	b.n	8001438 <pompe+0x2c>
	}
	else {

	}
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490e      	ldr	r1, [pc, #56]	; (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0b      	ldr	r4, [pc, #44]	; (800148c <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800146a:	f7ff ffa5 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146e:	f003 fefd 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7ff fb03 	bl	8000a7c <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001478:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001484:	08005314 	.word	0x08005314
  ldr r2, =_sbss
 8001488:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800148c:	20000164 	.word	0x20000164

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 ff77 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fe02 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 ff8f 	bl	8002402 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014fc:	f000 ff57 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	20000160 	.word	0x20000160

08001548 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;  
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000160 	.word	0x20000160

08001560 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0ed      	b.n	800174e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fdbe 	bl	8001100 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001594:	f7ff ffd8 	bl	8001548 <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800159a:	e012      	b.n	80015c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800159c:	f7ff ffd4 	bl	8001548 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b0a      	cmp	r3, #10
 80015a8:	d90b      	bls.n	80015c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2205      	movs	r2, #5
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0c5      	b.n	800174e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0e5      	beq.n	800159c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0202 	bic.w	r2, r2, #2
 80015de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e0:	f7ff ffb2 	bl	8001548 <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015e6:	e012      	b.n	800160e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e8:	f7ff ffae 	bl	8001548 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b0a      	cmp	r3, #10
 80015f4:	d90b      	bls.n	800160e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2205      	movs	r2, #5
 8001606:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e09f      	b.n	800174e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e5      	bne.n	80015e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7e1b      	ldrb	r3, [r3, #24]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d108      	bne.n	8001636 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e007      	b.n	8001646 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7e5b      	ldrb	r3, [r3, #25]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e007      	b.n	8001670 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e9b      	ldrb	r3, [r3, #26]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d108      	bne.n	800168a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0220 	orr.w	r2, r2, #32
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e007      	b.n	800169a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0220 	bic.w	r2, r2, #32
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7edb      	ldrb	r3, [r3, #27]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d108      	bne.n	80016b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0210 	bic.w	r2, r2, #16
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e007      	b.n	80016c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0210 	orr.w	r2, r2, #16
 80016c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7f1b      	ldrb	r3, [r3, #28]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d108      	bne.n	80016de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0208 	orr.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e007      	b.n	80016ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0208 	bic.w	r2, r2, #8
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7f5b      	ldrb	r3, [r3, #29]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0204 	orr.w	r2, r2, #4
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e007      	b.n	8001718 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0204 	bic.w	r2, r2, #4
 8001716:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	ea42 0103 	orr.w	r1, r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001756:	b480      	push	{r7}
 8001758:	b087      	sub	sp, #28
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800176e:	7cfb      	ldrb	r3, [r7, #19]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d003      	beq.n	800177c <HAL_CAN_ConfigFilter+0x26>
 8001774:	7cfb      	ldrb	r3, [r7, #19]
 8001776:	2b02      	cmp	r3, #2
 8001778:	f040 80aa 	bne.w	80018d0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2201      	movs	r2, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d123      	bne.n	80017fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43db      	mvns	r3, r3
 80017c0:	401a      	ands	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3248      	adds	r2, #72	; 0x48
 80017de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017f4:	6979      	ldr	r1, [r7, #20]
 80017f6:	3348      	adds	r3, #72	; 0x48
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d122      	bne.n	800184c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	431a      	orrs	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001826:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3248      	adds	r2, #72	; 0x48
 800182c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001840:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	3348      	adds	r3, #72	; 0x48
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001866:	e007      	b.n	8001878 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	431a      	orrs	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001892:	e007      	b.n	80018a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	431a      	orrs	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018c2:	f023 0201 	bic.w	r2, r3, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e006      	b.n	80018de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
  }
}
 80018de:	4618      	mov	r0, r3
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d12e      	bne.n	800195c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2202      	movs	r2, #2
 8001902:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001916:	f7ff fe17 	bl	8001548 <HAL_GetTick>
 800191a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800191c:	e012      	b.n	8001944 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800191e:	f7ff fe13 	bl	8001548 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b0a      	cmp	r3, #10
 800192a:	d90b      	bls.n	8001944 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2205      	movs	r2, #5
 800193c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e012      	b.n	800196a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e5      	bne.n	800191e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e006      	b.n	800196a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001972:	b480      	push	{r7}
 8001974:	b089      	sub	sp, #36	; 0x24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001986:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d003      	beq.n	800199e <HAL_CAN_AddTxMessage+0x2c>
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	2b02      	cmp	r3, #2
 800199a:	f040 80b8 	bne.w	8001b0e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10a      	bne.n	80019be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80a0 	beq.w	8001afe <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	0e1b      	lsrs	r3, r3, #24
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d907      	bls.n	80019de <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e09e      	b.n	8001b1c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019de:	2201      	movs	r2, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10d      	bne.n	8001a0c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019fa:	68f9      	ldr	r1, [r7, #12]
 80019fc:	6809      	ldr	r1, [r1, #0]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3318      	adds	r3, #24
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	440b      	add	r3, r1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e00f      	b.n	8001a2c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3318      	adds	r3, #24
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	440b      	add	r3, r1
 8001a2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3318      	adds	r3, #24
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	7d1b      	ldrb	r3, [r3, #20]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d111      	bne.n	8001a6c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3318      	adds	r3, #24
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6811      	ldr	r1, [r2, #0]
 8001a5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3318      	adds	r3, #24
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	440b      	add	r3, r1
 8001a68:	3304      	adds	r3, #4
 8001a6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3307      	adds	r3, #7
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	061a      	lsls	r2, r3, #24
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3306      	adds	r3, #6
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3305      	adds	r3, #5
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	4313      	orrs	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	3204      	adds	r2, #4
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	4610      	mov	r0, r2
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	6811      	ldr	r1, [r2, #0]
 8001a94:	ea43 0200 	orr.w	r2, r3, r0
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001aa2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3303      	adds	r3, #3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	061a      	lsls	r2, r3, #24
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	7812      	ldrb	r2, [r2, #0]
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	6811      	ldr	r1, [r2, #0]
 8001aca:	ea43 0200 	orr.w	r2, r3, r0
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ad8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3318      	adds	r3, #24
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	4413      	add	r3, r2
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	6811      	ldr	r1, [r2, #0]
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3318      	adds	r3, #24
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	440b      	add	r3, r1
 8001af8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e00e      	b.n	8001b1c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e006      	b.n	8001b1c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
  }
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3724      	adds	r7, #36	; 0x24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d003      	beq.n	8001b4c <HAL_CAN_GetRxMessage+0x24>
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	f040 80f3 	bne.w	8001d32 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10e      	bne.n	8001b70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d116      	bne.n	8001b8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0e7      	b.n	8001d40 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0d8      	b.n	8001d40 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	331b      	adds	r3, #27
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0204 	and.w	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	331b      	adds	r3, #27
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0d5b      	lsrs	r3, r3, #21
 8001bbc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e00b      	b.n	8001bde <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	331b      	adds	r3, #27
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	331b      	adds	r3, #27
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	4413      	add	r3, r2
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0202 	and.w	r2, r3, #2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	331b      	adds	r3, #27
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	3304      	adds	r3, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 020f 	and.w	r2, r3, #15
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	331b      	adds	r3, #27
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	4413      	add	r3, r2
 8001c18:	3304      	adds	r3, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	331b      	adds	r3, #27
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0a1a      	lsrs	r2, r3, #8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0c1a      	lsrs	r2, r3, #16
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	3302      	adds	r3, #2
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e1a      	lsrs	r2, r3, #24
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3303      	adds	r3, #3
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0a1a      	lsrs	r2, r3, #8
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3305      	adds	r3, #5
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	0c1a      	lsrs	r2, r3, #16
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3306      	adds	r3, #6
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0e1a      	lsrs	r2, r3, #24
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	3307      	adds	r3, #7
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d108      	bne.n	8001d1e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	e007      	b.n	8001d2e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0220 	orr.w	r2, r2, #32
 8001d2c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e006      	b.n	8001d40 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
  }
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d002      	beq.n	8001d6a <HAL_CAN_ActivateNotification+0x1e>
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d109      	bne.n	8001d7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6959      	ldr	r1, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e006      	b.n	8001d8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
  }
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d07c      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f983 	bl	8002106 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e00:	e016      	b.n	8001e30 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
 8001e14:	e00c      	b.n	8001e30 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	e002      	b.n	8001e30 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f989 	bl	8002142 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d024      	beq.n	8001e84 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f963 	bl	800211a <HAL_CAN_TxMailbox1CompleteCallback>
 8001e54:	e016      	b.n	8001e84 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	e00c      	b.n	8001e84 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7c:	e002      	b.n	8001e84 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f969 	bl	8002156 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d024      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f943 	bl	800212e <HAL_CAN_TxMailbox2CompleteCallback>
 8001ea8:	e016      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	e00c      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	e002      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f949 	bl	800216a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2210      	movs	r2, #16
 8001efa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2208      	movs	r2, #8
 8001f16:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f930 	bl	800217e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fc4c 	bl	80007d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f912 	bl	80021a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8f9 	bl	8002192 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8fc 	bl	80021ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2208      	movs	r2, #8
 8001fdc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8f5 	bl	80021ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d07b      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d072      	beq.n	80020de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002052:	2b00      	cmp	r3, #0
 8002054:	d043      	beq.n	80020de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03e      	beq.n	80020de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002066:	2b60      	cmp	r3, #96	; 0x60
 8002068:	d02b      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x32a>
 800206a:	2b60      	cmp	r3, #96	; 0x60
 800206c:	d82e      	bhi.n	80020cc <HAL_CAN_IRQHandler+0x334>
 800206e:	2b50      	cmp	r3, #80	; 0x50
 8002070:	d022      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x320>
 8002072:	2b50      	cmp	r3, #80	; 0x50
 8002074:	d82a      	bhi.n	80020cc <HAL_CAN_IRQHandler+0x334>
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d019      	beq.n	80020ae <HAL_CAN_IRQHandler+0x316>
 800207a:	2b40      	cmp	r3, #64	; 0x40
 800207c:	d826      	bhi.n	80020cc <HAL_CAN_IRQHandler+0x334>
 800207e:	2b30      	cmp	r3, #48	; 0x30
 8002080:	d010      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x30c>
 8002082:	2b30      	cmp	r3, #48	; 0x30
 8002084:	d822      	bhi.n	80020cc <HAL_CAN_IRQHandler+0x334>
 8002086:	2b10      	cmp	r3, #16
 8002088:	d002      	beq.n	8002090 <HAL_CAN_IRQHandler+0x2f8>
 800208a:	2b20      	cmp	r3, #32
 800208c:	d005      	beq.n	800209a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800208e:	e01d      	b.n	80020cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002098:	e019      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f043 0310 	orr.w	r3, r3, #16
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020a2:	e014      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020ac:	e00f      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020b6:	e00a      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020c0:	e005      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020ca:	e000      	b.n	80020ce <HAL_CAN_IRQHandler+0x336>
            break;
 80020cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f872 	bl	80021e2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242a:	e14e      	b.n	80026ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8140 	beq.w	80026c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x40>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d017      	beq.n	80024fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d123      	bne.n	800254e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	08da      	lsrs	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3208      	adds	r2, #8
 800250e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	6939      	ldr	r1, [r7, #16]
 800254a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0203 	and.w	r2, r3, #3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 809a 	beq.w	80026c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002590:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <HAL_GPIO_Init+0x2cc>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a54      	ldr	r2, [pc, #336]	; (80026e8 <HAL_GPIO_Init+0x2cc>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b52      	ldr	r3, [pc, #328]	; (80026e8 <HAL_GPIO_Init+0x2cc>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025a8:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_GPIO_Init+0x2d0>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025d2:	d013      	beq.n	80025fc <HAL_GPIO_Init+0x1e0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a46      	ldr	r2, [pc, #280]	; (80026f0 <HAL_GPIO_Init+0x2d4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00d      	beq.n	80025f8 <HAL_GPIO_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a45      	ldr	r2, [pc, #276]	; (80026f4 <HAL_GPIO_Init+0x2d8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <HAL_GPIO_Init+0x1d8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a44      	ldr	r2, [pc, #272]	; (80026f8 <HAL_GPIO_Init+0x2dc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_GPIO_Init+0x1d4>
 80025ec:	2303      	movs	r3, #3
 80025ee:	e006      	b.n	80025fe <HAL_GPIO_Init+0x1e2>
 80025f0:	2305      	movs	r3, #5
 80025f2:	e004      	b.n	80025fe <HAL_GPIO_Init+0x1e2>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_Init+0x1e2>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_GPIO_Init+0x1e2>
 80025fc:	2300      	movs	r3, #0
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	f002 0203 	and.w	r2, r2, #3
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	4093      	lsls	r3, r2
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800260e:	4937      	ldr	r1, [pc, #220]	; (80026ec <HAL_GPIO_Init+0x2d0>)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261c:	4b37      	ldr	r3, [pc, #220]	; (80026fc <HAL_GPIO_Init+0x2e0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002640:	4a2e      	ldr	r2, [pc, #184]	; (80026fc <HAL_GPIO_Init+0x2e0>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_GPIO_Init+0x2e0>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800266a:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_GPIO_Init+0x2e0>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_GPIO_Init+0x2e0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002694:	4a19      	ldr	r2, [pc, #100]	; (80026fc <HAL_GPIO_Init+0x2e0>)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_GPIO_Init+0x2e0>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026be:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_GPIO_Init+0x2e0>)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f47f aea9 	bne.w	800242c <HAL_GPIO_Init+0x10>
  }
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40010000 	.word	0x40010000
 80026f0:	48000400 	.word	0x48000400
 80026f4:	48000800 	.word	0x48000800
 80026f8:	48000c00 	.word	0x48000c00
 80026fc:	40010400 	.word	0x40010400

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800271c:	e002      	b.n	8002724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002736:	af00      	add	r7, sp, #0
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002740:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	f001 b823 	b.w	800379c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 817d 	beq.w	8002a66 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800276c:	4bbc      	ldr	r3, [pc, #752]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00c      	beq.n	8002792 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002778:	4bb9      	ldr	r3, [pc, #740]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d15c      	bne.n	800283e <HAL_RCC_OscConfig+0x10e>
 8002784:	4bb6      	ldr	r3, [pc, #728]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d155      	bne.n	800283e <HAL_RCC_OscConfig+0x10e>
 8002792:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002796:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d102      	bne.n	80027c4 <HAL_RCC_OscConfig+0x94>
 80027be:	4ba8      	ldr	r3, [pc, #672]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	e015      	b.n	80027f0 <HAL_RCC_OscConfig+0xc0>
 80027c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80027ec:	4b9c      	ldr	r3, [pc, #624]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027fc:	fa92 f2a2 	rbit	r2, r2
 8002800:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002804:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002808:	fab2 f282 	clz	r2, r2
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f002 021f 	and.w	r2, r2, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 811f 	beq.w	8002a64 <HAL_RCC_OscConfig+0x334>
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 8116 	bne.w	8002a64 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f000 bfaf 	b.w	800379c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x12e>
 8002850:	4b83      	ldr	r3, [pc, #524]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a82      	ldr	r2, [pc, #520]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e036      	b.n	80028cc <HAL_RCC_OscConfig+0x19c>
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x158>
 800286e:	4b7c      	ldr	r3, [pc, #496]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7b      	ldr	r2, [pc, #492]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b79      	ldr	r3, [pc, #484]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a78      	ldr	r2, [pc, #480]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e021      	b.n	80028cc <HAL_RCC_OscConfig+0x19c>
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x184>
 800289a:	4b71      	ldr	r3, [pc, #452]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a70      	ldr	r2, [pc, #448]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b6e      	ldr	r3, [pc, #440]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6d      	ldr	r2, [pc, #436]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0x19c>
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a69      	ldr	r2, [pc, #420]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a66      	ldr	r2, [pc, #408]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028cc:	4b64      	ldr	r3, [pc, #400]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f023 020f 	bic.w	r2, r3, #15
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	495f      	ldr	r1, [pc, #380]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d059      	beq.n	80029aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe fe27 	bl	8001548 <HAL_GetTick>
 80028fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002900:	f7fe fe22 	bl	8001548 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d902      	bls.n	8002916 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	f000 bf43 	b.w	800379c <HAL_RCC_OscConfig+0x106c>
 8002916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800292a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d102      	bne.n	8002948 <HAL_RCC_OscConfig+0x218>
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e015      	b.n	8002974 <HAL_RCC_OscConfig+0x244>
 8002948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800295c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002960:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002964:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002970:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002978:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800297c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002980:	fa92 f2a2 	rbit	r2, r2
 8002984:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002988:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ab      	beq.n	8002900 <HAL_RCC_OscConfig+0x1d0>
 80029a8:	e05d      	b.n	8002a66 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fdcd 	bl	8001548 <HAL_GetTick>
 80029ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fdc8 	bl	8001548 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	; 0x64
 80029c2:	d902      	bls.n	80029ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	f000 bee9 	b.w	800379c <HAL_RCC_OscConfig+0x106c>
 80029ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0x2cc>
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e015      	b.n	8002a28 <HAL_RCC_OscConfig+0x2f8>
 80029fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a00:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a14:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a18:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a24:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_RCC_OscConfig+0x330>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a2c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a30:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a34:	fa92 f2a2 	rbit	r2, r2
 8002a38:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a3c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f042 0220 	orr.w	r2, r2, #32
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f002 021f 	and.w	r2, r2, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ab      	bne.n	80029b4 <HAL_RCC_OscConfig+0x284>
 8002a5c:	e003      	b.n	8002a66 <HAL_RCC_OscConfig+0x336>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 817d 	beq.w	8002d76 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a7c:	4ba6      	ldr	r3, [pc, #664]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a88:	4ba3      	ldr	r3, [pc, #652]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d172      	bne.n	8002b7a <HAL_RCC_OscConfig+0x44a>
 8002a94:	4ba0      	ldr	r3, [pc, #640]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d16c      	bne.n	8002b7a <HAL_RCC_OscConfig+0x44a>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ab2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x3a0>
 8002aca:	4b93      	ldr	r3, [pc, #588]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e013      	b.n	8002af8 <HAL_RCC_OscConfig+0x3c8>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ae8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002af4:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2202      	movs	r2, #2
 8002afa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002afe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b02:	fa92 f2a2 	rbit	r2, r2
 8002b06:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b0a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b0e:	fab2 f282 	clz	r2, r2
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	f042 0220 	orr.w	r2, r2, #32
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	f002 021f 	and.w	r2, r2, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f202 	lsl.w	r2, r1, r2
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCC_OscConfig+0x410>
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f000 be2e 	b.w	800379c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b75      	ldr	r3, [pc, #468]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	21f8      	movs	r1, #248	; 0xf8
 8002b56:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b5e:	fa91 f1a1 	rbit	r1, r1
 8002b62:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b66:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b6a:	fab1 f181 	clz	r1, r1
 8002b6e:	b2c9      	uxtb	r1, r1
 8002b70:	408b      	lsls	r3, r1
 8002b72:	4969      	ldr	r1, [pc, #420]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b78:	e0fd      	b.n	8002d76 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8088 	beq.w	8002c9c <HAL_RCC_OscConfig+0x56c>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b9e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fcc6 	bl	8001548 <HAL_GetTick>
 8002bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fcc1 	bl	8001548 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d902      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	f000 bde2 	b.w	800379c <HAL_RCC_OscConfig+0x106c>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002bea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4d8>
 8002c02:	4b45      	ldr	r3, [pc, #276]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	e013      	b.n	8002c30 <HAL_RCC_OscConfig+0x500>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c20:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2202      	movs	r2, #2
 8002c32:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c36:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c3a:	fa92 f2a2 	rbit	r2, r2
 8002c3e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c42:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c46:	fab2 f282 	clz	r2, r2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f002 021f 	and.w	r2, r2, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0af      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	21f8      	movs	r1, #248	; 0xf8
 8002c78:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c80:	fa91 f1a1 	rbit	r1, r1
 8002c84:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c88:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c8c:	fab1 f181 	clz	r1, r1
 8002c90:	b2c9      	uxtb	r1, r1
 8002c92:	408b      	lsls	r3, r1
 8002c94:	4920      	ldr	r1, [pc, #128]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
 8002c9a:	e06c      	b.n	8002d76 <HAL_RCC_OscConfig+0x646>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fc3e 	bl	8001548 <HAL_GetTick>
 8002ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fc39 	bl	8001548 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	f000 bd5a 	b.w	800379c <HAL_RCC_OscConfig+0x106c>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d104      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5ec>
 8002d12:	4b01      	ldr	r3, [pc, #4]	; (8002d18 <HAL_RCC_OscConfig+0x5e8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e015      	b.n	8002d44 <HAL_RCC_OscConfig+0x614>
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d2e:	2302      	movs	r3, #2
 8002d30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d40:	4bc8      	ldr	r3, [pc, #800]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2202      	movs	r2, #2
 8002d46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d4e:	fa92 f2a2 	rbit	r2, r2
 8002d52:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d56:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d5a:	fab2 f282 	clz	r2, r2
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	f042 0220 	orr.w	r2, r2, #32
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	f002 021f 	and.w	r2, r2, #31
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ad      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8110 	beq.w	8002fac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d079      	beq.n	8002e90 <HAL_RCC_OscConfig+0x760>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	4bab      	ldr	r3, [pc, #684]	; (8003068 <HAL_RCC_OscConfig+0x938>)
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fbbf 	bl	8001548 <HAL_GetTick>
 8002dca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fbba 	bl	8001548 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d902      	bls.n	8002de6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	f000 bcdb 	b.w	800379c <HAL_RCC_OscConfig+0x106c>
 8002de6:	2302      	movs	r3, #2
 8002de8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e00:	2202      	movs	r2, #2
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	fa93 f2a3 	rbit	r2, r3
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e40:	4b88      	ldr	r3, [pc, #544]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 8002e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	6019      	str	r1, [r3, #0]
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	fa93 f1a3 	rbit	r1, r3
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e66:	6019      	str	r1, [r3, #0]
  return result;
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0a0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x6a0>
 8002e8e:	e08d      	b.n	8002fac <HAL_RCC_OscConfig+0x87c>
 8002e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	fa93 f2a3 	rbit	r2, r3
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eb2:	601a      	str	r2, [r3, #0]
  return result;
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ebc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b68      	ldr	r3, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x938>)
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fb39 	bl	8001548 <HAL_GetTick>
 8002ed6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fe fb34 	bl	8001548 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d902      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	f000 bc55 	b.w	800379c <HAL_RCC_OscConfig+0x106c>
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f1e:	2202      	movs	r2, #2
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f42:	2202      	movs	r2, #2
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 8002f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f6a:	2102      	movs	r1, #2
 8002f6c:	6019      	str	r1, [r3, #0]
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fa93 f1a3 	rbit	r1, r3
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f84:	6019      	str	r1, [r3, #0]
  return result;
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d197      	bne.n	8002edc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 81a1 	beq.w	8003304 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d116      	bne.n	8003002 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ffa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCC_OscConfig+0x93c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11a      	bne.n	8003044 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_RCC_OscConfig+0x93c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <HAL_RCC_OscConfig+0x93c>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fa95 	bl	8001548 <HAL_GetTick>
 800301e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	e009      	b.n	8003038 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003024:	f7fe fa90 	bl	8001548 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b64      	cmp	r3, #100	; 0x64
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e3b1      	b.n	800379c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_OscConfig+0x93c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ef      	beq.n	8003024 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10d      	bne.n	8003070 <HAL_RCC_OscConfig+0x940>
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a02      	ldr	r2, [pc, #8]	; (8003064 <HAL_RCC_OscConfig+0x934>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	e03c      	b.n	80030dc <HAL_RCC_OscConfig+0x9ac>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	10908120 	.word	0x10908120
 800306c:	40007000 	.word	0x40007000
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x96a>
 8003080:	4bc1      	ldr	r3, [pc, #772]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4ac0      	ldr	r2, [pc, #768]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	4bbe      	ldr	r3, [pc, #760]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4abd      	ldr	r2, [pc, #756]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 8003092:	f023 0304 	bic.w	r3, r3, #4
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e020      	b.n	80030dc <HAL_RCC_OscConfig+0x9ac>
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x994>
 80030aa:	4bb7      	ldr	r3, [pc, #732]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4ab6      	ldr	r2, [pc, #728]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6213      	str	r3, [r2, #32]
 80030b6:	4bb4      	ldr	r3, [pc, #720]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	4ab3      	ldr	r2, [pc, #716]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6213      	str	r3, [r2, #32]
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0x9ac>
 80030c4:	4bb0      	ldr	r3, [pc, #704]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4aaf      	ldr	r2, [pc, #700]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	4bad      	ldr	r3, [pc, #692]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4aac      	ldr	r2, [pc, #688]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80030d6:	f023 0304 	bic.w	r3, r3, #4
 80030da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8081 	beq.w	80031f0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fa2b 	bl	8001548 <HAL_GetTick>
 80030f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7fe fa26 	bl	8001548 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e345      	b.n	800379c <HAL_RCC_OscConfig+0x106c>
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003118:	2202      	movs	r2, #2
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800313c:	2202      	movs	r2, #2
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003156:	601a      	str	r2, [r3, #0]
  return result;
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003160:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d102      	bne.n	800317c <HAL_RCC_OscConfig+0xa4c>
 8003176:	4b84      	ldr	r3, [pc, #528]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	e013      	b.n	80031a4 <HAL_RCC_OscConfig+0xa74>
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031ac:	2102      	movs	r1, #2
 80031ae:	6011      	str	r1, [r2, #0]
 80031b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	fa92 f1a2 	rbit	r1, r2
 80031be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031c6:	6011      	str	r1, [r2, #0]
  return result;
 80031c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031cc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	fab2 f282 	clz	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	f002 021f 	and.w	r2, r2, #31
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d084      	beq.n	80030f8 <HAL_RCC_OscConfig+0x9c8>
 80031ee:	e07f      	b.n	80032f0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fe f9aa 	bl	8001548 <HAL_GetTick>
 80031f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe f9a5 	bl	8001548 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e2c4      	b.n	800379c <HAL_RCC_OscConfig+0x106c>
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800321a:	2202      	movs	r2, #2
 800321c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003230:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003258:	601a      	str	r2, [r3, #0]
  return result;
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003262:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d102      	bne.n	800327e <HAL_RCC_OscConfig+0xb4e>
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	e013      	b.n	80032a6 <HAL_RCC_OscConfig+0xb76>
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003286:	2202      	movs	r2, #2
 8003288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032ae:	2102      	movs	r1, #2
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	fa92 f1a2 	rbit	r1, r2
 80032c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032c8:	6011      	str	r1, [r2, #0]
  return result;
 80032ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	fab2 f282 	clz	r2, r2
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f002 021f 	and.w	r2, r2, #31
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d184      	bne.n	80031fa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 80032fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003302:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8242 	beq.w	800379a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_RCC_OscConfig+0xc58>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b08      	cmp	r3, #8
 8003320:	f000 8213 	beq.w	800374a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b02      	cmp	r3, #2
 8003332:	f040 8162 	bne.w	80035fa <HAL_RCC_OscConfig+0xeca>
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800333e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	fa93 f2a3 	rbit	r2, r3
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800335a:	601a      	str	r2, [r3, #0]
  return result;
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003364:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	2300      	movs	r3, #0
 800337a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe f8e4 	bl	8001548 <HAL_GetTick>
 8003380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003384:	e00c      	b.n	80033a0 <HAL_RCC_OscConfig+0xc70>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338c:	f7fe f8dc 	bl	8001548 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1fd      	b.n	800379c <HAL_RCC_OscConfig+0x106c>
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	fa93 f2a3 	rbit	r2, r3
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033c4:	601a      	str	r2, [r3, #0]
  return result;
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d102      	bne.n	80033ea <HAL_RCC_OscConfig+0xcba>
 80033e4:	4bb0      	ldr	r3, [pc, #704]	; (80036a8 <HAL_RCC_OscConfig+0xf78>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	e027      	b.n	800343a <HAL_RCC_OscConfig+0xd0a>
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f2a3 	rbit	r2, r3
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	4b9c      	ldr	r3, [pc, #624]	; (80036a8 <HAL_RCC_OscConfig+0xf78>)
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800343e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003442:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003446:	6011      	str	r1, [r2, #0]
 8003448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800344c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	fa92 f1a2 	rbit	r1, r2
 8003456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800345a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800345e:	6011      	str	r1, [r2, #0]
  return result;
 8003460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003464:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	fab2 f282 	clz	r2, r2
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	f042 0220 	orr.w	r2, r2, #32
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	f002 021f 	and.w	r2, r2, #31
 800347a:	2101      	movs	r1, #1
 800347c:	fa01 f202 	lsl.w	r2, r1, r2
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d182      	bne.n	800338c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003486:	4b88      	ldr	r3, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0xf78>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	430b      	orrs	r3, r1
 80034a8:	497f      	ldr	r1, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0xf78>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034d2:	601a      	str	r2, [r3, #0]
  return result;
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	461a      	mov	r2, r3
 80034f0:	2301      	movs	r3, #1
 80034f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe f828 	bl	8001548 <HAL_GetTick>
 80034f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034fc:	e009      	b.n	8003512 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fe f823 	bl	8001548 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e144      	b.n	800379c <HAL_RCC_OscConfig+0x106c>
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800351a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f2a3 	rbit	r2, r3
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003536:	601a      	str	r2, [r3, #0]
  return result;
 8003538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003540:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d102      	bne.n	800355c <HAL_RCC_OscConfig+0xe2c>
 8003556:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_RCC_OscConfig+0xf78>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	e027      	b.n	80035ac <HAL_RCC_OscConfig+0xe7c>
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800358a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_OscConfig+0xf78>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035b8:	6011      	str	r1, [r2, #0]
 80035ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	fa92 f1a2 	rbit	r1, r2
 80035c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035d0:	6011      	str	r1, [r2, #0]
  return result;
 80035d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	fab2 f282 	clz	r2, r2
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	f042 0220 	orr.w	r2, r2, #32
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	f002 021f 	and.w	r2, r2, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f202 	lsl.w	r2, r1, r2
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d082      	beq.n	80034fe <HAL_RCC_OscConfig+0xdce>
 80035f8:	e0cf      	b.n	800379a <HAL_RCC_OscConfig+0x106a>
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003602:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800361e:	601a      	str	r2, [r3, #0]
  return result;
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003628:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	461a      	mov	r2, r3
 800363c:	2300      	movs	r3, #0
 800363e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fd ff82 	bl	8001548 <HAL_GetTick>
 8003644:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003648:	e009      	b.n	800365e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364a:	f7fd ff7d 	bl	8001548 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e09e      	b.n	800379c <HAL_RCC_OscConfig+0x106c>
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003670:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003682:	601a      	str	r2, [r3, #0]
  return result;
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800368c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d104      	bne.n	80036ac <HAL_RCC_OscConfig+0xf7c>
 80036a2:	4b01      	ldr	r3, [pc, #4]	; (80036a8 <HAL_RCC_OscConfig+0xf78>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	e029      	b.n	80036fc <HAL_RCC_OscConfig+0xfcc>
 80036a8:	40021000 	.word	0x40021000
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	fa93 f2a3 	rbit	r2, r3
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	fa93 f2a3 	rbit	r2, r3
 80036ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_OscConfig+0x1078>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003700:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003704:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003708:	6011      	str	r1, [r2, #0]
 800370a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	fa92 f1a2 	rbit	r1, r2
 8003718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800371c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003720:	6011      	str	r1, [r2, #0]
  return result;
 8003722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003726:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	fab2 f282 	clz	r2, r2
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	f042 0220 	orr.w	r2, r2, #32
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f002 021f 	and.w	r2, r2, #31
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f202 	lsl.w	r2, r1, r2
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d180      	bne.n	800364a <HAL_RCC_OscConfig+0xf1a>
 8003748:	e027      	b.n	800379a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e01e      	b.n	800379c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_OscConfig+0x1078>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003766:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800376a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	429a      	cmp	r2, r3
 800377c:	d10b      	bne.n	8003796 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800377e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003782:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003792:	429a      	cmp	r2, r3
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b09e      	sub	sp, #120	; 0x78
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e162      	b.n	8003a8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b90      	ldr	r3, [pc, #576]	; (8003a08 <HAL_RCC_ClockConfig+0x25c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d910      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b8d      	ldr	r3, [pc, #564]	; (8003a08 <HAL_RCC_ClockConfig+0x25c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 0207 	bic.w	r2, r3, #7
 80037da:	498b      	ldr	r1, [pc, #556]	; (8003a08 <HAL_RCC_ClockConfig+0x25c>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b89      	ldr	r3, [pc, #548]	; (8003a08 <HAL_RCC_ClockConfig+0x25c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e14a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b82      	ldr	r3, [pc, #520]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	497f      	ldr	r1, [pc, #508]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80dc 	beq.w	80039d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d13c      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xf6>
 8003828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800382c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d102      	bne.n	8003852 <HAL_RCC_ClockConfig+0xa6>
 800384c:	4b6f      	ldr	r3, [pc, #444]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	e00f      	b.n	8003872 <HAL_RCC_ClockConfig+0xc6>
 8003852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003856:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	667b      	str	r3, [r7, #100]	; 0x64
 8003860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003864:	663b      	str	r3, [r7, #96]	; 0x60
 8003866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800386e:	4b67      	ldr	r3, [pc, #412]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003876:	65ba      	str	r2, [r7, #88]	; 0x58
 8003878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800387a:	fa92 f2a2 	rbit	r2, r2
 800387e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003880:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003882:	fab2 f282 	clz	r2, r2
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	f042 0220 	orr.w	r2, r2, #32
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f002 021f 	and.w	r2, r2, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f202 	lsl.w	r2, r1, r2
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d17b      	bne.n	8003996 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0f3      	b.n	8003a8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d13c      	bne.n	8003924 <HAL_RCC_ClockConfig+0x178>
 80038aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x128>
 80038ce:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	e00f      	b.n	80038f4 <HAL_RCC_ClockConfig+0x148>
 80038d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	647b      	str	r3, [r7, #68]	; 0x44
 80038e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40
 80038e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f0:	4b46      	ldr	r3, [pc, #280]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80038fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038fc:	fa92 f2a2 	rbit	r2, r2
 8003900:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003904:	fab2 f282 	clz	r2, r2
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	f042 0220 	orr.w	r2, r2, #32
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f002 021f 	and.w	r2, r2, #31
 8003914:	2101      	movs	r1, #1
 8003916:	fa01 f202 	lsl.w	r2, r1, r2
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d13a      	bne.n	8003996 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b2      	b.n	8003a8a <HAL_RCC_ClockConfig+0x2de>
 8003924:	2302      	movs	r3, #2
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <HAL_RCC_ClockConfig+0x1a0>
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	e00d      	b.n	8003968 <HAL_RCC_ClockConfig+0x1bc>
 800394c:	2302      	movs	r3, #2
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	2302      	movs	r3, #2
 800395a:	623b      	str	r3, [r7, #32]
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2202      	movs	r2, #2
 800396a:	61ba      	str	r2, [r7, #24]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	fa92 f2a2 	rbit	r2, r2
 8003972:	617a      	str	r2, [r7, #20]
  return result;
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	fab2 f282 	clz	r2, r2
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	f042 0220 	orr.w	r2, r2, #32
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	f002 021f 	and.w	r2, r2, #31
 8003986:	2101      	movs	r1, #1
 8003988:	fa01 f202 	lsl.w	r2, r1, r2
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e079      	b.n	8003a8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	491a      	ldr	r1, [pc, #104]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a8:	f7fd fdce 	bl	8001548 <HAL_GetTick>
 80039ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fd fdca 	bl	8001548 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e061      	b.n	8003a8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <HAL_RCC_ClockConfig+0x260>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 020c 	and.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1eb      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_ClockConfig+0x25c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d214      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_RCC_ClockConfig+0x25c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 0207 	bic.w	r2, r3, #7
 80039ee:	4906      	ldr	r1, [pc, #24]	; (8003a08 <HAL_RCC_ClockConfig+0x25c>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <HAL_RCC_ClockConfig+0x25c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e040      	b.n	8003a8a <HAL_RCC_ClockConfig+0x2de>
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_RCC_ClockConfig+0x2e8>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	491a      	ldr	r1, [pc, #104]	; (8003a94 <HAL_RCC_ClockConfig+0x2e8>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_RCC_ClockConfig+0x2e8>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4912      	ldr	r1, [pc, #72]	; (8003a94 <HAL_RCC_ClockConfig+0x2e8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a4e:	f000 f829 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a52:	4601      	mov	r1, r0
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_RCC_ClockConfig+0x2e8>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a5c:	22f0      	movs	r2, #240	; 0xf0
 8003a5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	fa92 f2a2 	rbit	r2, r2
 8003a66:	60fa      	str	r2, [r7, #12]
  return result;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	fab2 f282 	clz	r2, r2
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	40d3      	lsrs	r3, r2
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x2ec>)
 8003a74:	5cd3      	ldrb	r3, [r2, r3]
 8003a76:	fa21 f303 	lsr.w	r3, r1, r3
 8003a7a:	4a08      	ldr	r2, [pc, #32]	; (8003a9c <HAL_RCC_ClockConfig+0x2f0>)
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <HAL_RCC_ClockConfig+0x2f4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd fd1c 	bl	80014c0 <HAL_InitTick>
  
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3778      	adds	r7, #120	; 0x78
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	080052dc 	.word	0x080052dc
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	20000004 	.word	0x20000004

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b08b      	sub	sp, #44	; 0x2c
 8003aa8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d002      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x30>
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x36>
 8003ad2:	e03c      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ad6:	623b      	str	r3, [r7, #32]
      break;
 8003ad8:	e03c      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ae0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ae4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	fa92 f2a2 	rbit	r2, r2
 8003aec:	607a      	str	r2, [r7, #4]
  return result;
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	fab2 f282 	clz	r2, r2
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	40d3      	lsrs	r3, r2
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003afe:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	220f      	movs	r2, #15
 8003b08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	fa92 f2a2 	rbit	r2, r2
 8003b10:	60fa      	str	r2, [r7, #12]
  return result;
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	fab2 f282 	clz	r2, r2
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	40d3      	lsrs	r3, r2
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b2c:	4a0e      	ldr	r2, [pc, #56]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	e004      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	623b      	str	r3, [r7, #32]
      break;
 8003b4c:	e002      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b50:	623b      	str	r3, [r7, #32]
      break;
 8003b52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b54:	6a3b      	ldr	r3, [r7, #32]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	372c      	adds	r7, #44	; 0x2c
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	007a1200 	.word	0x007a1200
 8003b6c:	080052ec 	.word	0x080052ec
 8003b70:	080052fc 	.word	0x080052fc
 8003b74:	003d0900 	.word	0x003d0900

08003b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b092      	sub	sp, #72	; 0x48
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80cd 	beq.w	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9c:	4b86      	ldr	r3, [pc, #536]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10e      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b83      	ldr	r3, [pc, #524]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a82      	ldr	r2, [pc, #520]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	61d3      	str	r3, [r2, #28]
 8003bb4:	4b80      	ldr	r3, [pc, #512]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	4b7d      	ldr	r3, [pc, #500]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d118      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd2:	4b7a      	ldr	r3, [pc, #488]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a79      	ldr	r2, [pc, #484]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bde:	f7fd fcb3 	bl	8001548 <HAL_GetTick>
 8003be2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	e008      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be6:	f7fd fcaf 	bl	8001548 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b64      	cmp	r3, #100	; 0x64
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0db      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c04:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d07d      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d076      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c30:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3c:	fab3 f383 	clz	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b5e      	ldr	r3, [pc, #376]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2300      	movs	r3, #0
 8003c72:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c74:	4a50      	ldr	r2, [pc, #320]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c78:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d045      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fd fc60 	bl	8001548 <HAL_GetTick>
 8003c88:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fd fc5c 	bl	8001548 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e086      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	2302      	movs	r3, #2
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003cba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003cd0:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	e007      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	613a      	str	r2, [r7, #16]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	fa92 f2a2 	rbit	r2, r2
 8003cf0:	60fa      	str	r2, [r7, #12]
  return result;
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	fab2 f282 	clz	r2, r2
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	f002 021f 	and.w	r2, r2, #31
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0bd      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d10:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4926      	ldr	r1, [pc, #152]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d34:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	491a      	ldr	r1, [pc, #104]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d60:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	f023 0210 	bic.w	r2, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4912      	ldr	r1, [pc, #72]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	490b      	ldr	r1, [pc, #44]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3748      	adds	r7, #72	; 0x48
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	10908100 	.word	0x10908100

08003dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e049      	b.n	8003e6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd f9ec 	bl	80011c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f000 fc44 	bl	8004690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d001      	beq.n	8003e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e038      	b.n	8003efe <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <HAL_TIM_Base_Start+0x98>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_TIM_Base_Start+0x48>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea6:	d009      	beq.n	8003ebc <HAL_TIM_Base_Start+0x48>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_TIM_Base_Start+0x9c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_TIM_Base_Start+0x48>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_TIM_Base_Start+0xa0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d115      	bne.n	8003ee8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_TIM_Base_Start+0xa4>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d015      	beq.n	8003efa <HAL_TIM_Base_Start+0x86>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d011      	beq.n	8003efa <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	e008      	b.n	8003efa <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e000      	b.n	8003efc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	00010007 	.word	0x00010007

08003f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e049      	b.n	8003fc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f841 	bl	8003fca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f000 fb98 	bl	8004690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_TIM_PWM_Start+0x24>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e03c      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d109      	bne.n	800401e <HAL_TIM_PWM_Start+0x3e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e02f      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d109      	bne.n	8004038 <HAL_TIM_PWM_Start+0x58>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	e022      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d109      	bne.n	8004052 <HAL_TIM_PWM_Start+0x72>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	bf14      	ite	ne
 800404a:	2301      	movne	r3, #1
 800404c:	2300      	moveq	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	e015      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b10      	cmp	r3, #16
 8004056:	d109      	bne.n	800406c <HAL_TIM_PWM_Start+0x8c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	bf14      	ite	ne
 8004064:	2301      	movne	r3, #1
 8004066:	2300      	moveq	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e008      	b.n	800407e <HAL_TIM_PWM_Start+0x9e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e088      	b.n	8004198 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Start+0xb6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	e023      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Start+0xc6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	e01b      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Start+0xd6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	e013      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0xe6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c4:	e00b      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0xf6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	e003      	b.n	80040de <HAL_TIM_PWM_Start+0xfe>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fe8a 	bl	8004e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2b      	ldr	r2, [pc, #172]	; (80041a0 <HAL_TIM_PWM_Start+0x1c0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_TIM_PWM_Start+0x134>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2a      	ldr	r2, [pc, #168]	; (80041a4 <HAL_TIM_PWM_Start+0x1c4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_TIM_PWM_Start+0x134>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a28      	ldr	r2, [pc, #160]	; (80041a8 <HAL_TIM_PWM_Start+0x1c8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIM_PWM_Start+0x134>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a27      	ldr	r2, [pc, #156]	; (80041ac <HAL_TIM_PWM_Start+0x1cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_TIM_PWM_Start+0x138>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_TIM_PWM_Start+0x13a>
 8004118:	2300      	movs	r3, #0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_TIM_PWM_Start+0x1c0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_TIM_PWM_Start+0x176>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d009      	beq.n	8004156 <HAL_TIM_PWM_Start+0x176>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1a      	ldr	r2, [pc, #104]	; (80041b0 <HAL_TIM_PWM_Start+0x1d0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_TIM_PWM_Start+0x176>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <HAL_TIM_PWM_Start+0x1c4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d115      	bne.n	8004182 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_TIM_PWM_Start+0x1d4>)
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b06      	cmp	r3, #6
 8004166:	d015      	beq.n	8004194 <HAL_TIM_PWM_Start+0x1b4>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d011      	beq.n	8004194 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	e008      	b.n	8004194 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e000      	b.n	8004196 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004194:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800
 80041b0:	40000400 	.word	0x40000400
 80041b4:	00010007 	.word	0x00010007

080041b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fe18 	bl	8004e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <HAL_TIM_PWM_Stop+0x10c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <HAL_TIM_PWM_Stop+0x40>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <HAL_TIM_PWM_Stop+0x110>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <HAL_TIM_PWM_Stop+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a38      	ldr	r2, [pc, #224]	; (80042cc <HAL_TIM_PWM_Stop+0x114>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_TIM_PWM_Stop+0x40>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a37      	ldr	r2, [pc, #220]	; (80042d0 <HAL_TIM_PWM_Stop+0x118>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_PWM_Stop+0x44>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_TIM_PWM_Stop+0x46>
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d017      	beq.n	8004232 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	f241 1311 	movw	r3, #4369	; 0x1111
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <HAL_TIM_PWM_Stop+0x7a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	f240 4344 	movw	r3, #1092	; 0x444
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_TIM_PWM_Stop+0x7a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	f241 1311 	movw	r3, #4369	; 0x1111
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10f      	bne.n	8004262 <HAL_TIM_PWM_Stop+0xaa>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	f240 4344 	movw	r3, #1092	; 0x444
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <HAL_TIM_PWM_Stop+0xaa>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Stop+0xba>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	e023      	b.n	80042ba <HAL_TIM_PWM_Stop+0x102>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d104      	bne.n	8004282 <HAL_TIM_PWM_Stop+0xca>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004280:	e01b      	b.n	80042ba <HAL_TIM_PWM_Stop+0x102>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d104      	bne.n	8004292 <HAL_TIM_PWM_Stop+0xda>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004290:	e013      	b.n	80042ba <HAL_TIM_PWM_Stop+0x102>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b0c      	cmp	r3, #12
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_PWM_Stop+0xea>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a0:	e00b      	b.n	80042ba <HAL_TIM_PWM_Stop+0x102>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_PWM_Stop+0xfa>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b0:	e003      	b.n	80042ba <HAL_TIM_PWM_Stop+0x102>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0ff      	b.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b14      	cmp	r3, #20
 80042fe:	f200 80f0 	bhi.w	80044e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	0800435d 	.word	0x0800435d
 800430c:	080044e3 	.word	0x080044e3
 8004310:	080044e3 	.word	0x080044e3
 8004314:	080044e3 	.word	0x080044e3
 8004318:	0800439d 	.word	0x0800439d
 800431c:	080044e3 	.word	0x080044e3
 8004320:	080044e3 	.word	0x080044e3
 8004324:	080044e3 	.word	0x080044e3
 8004328:	080043df 	.word	0x080043df
 800432c:	080044e3 	.word	0x080044e3
 8004330:	080044e3 	.word	0x080044e3
 8004334:	080044e3 	.word	0x080044e3
 8004338:	0800441f 	.word	0x0800441f
 800433c:	080044e3 	.word	0x080044e3
 8004340:	080044e3 	.word	0x080044e3
 8004344:	080044e3 	.word	0x080044e3
 8004348:	08004461 	.word	0x08004461
 800434c:	080044e3 	.word	0x080044e3
 8004350:	080044e3 	.word	0x080044e3
 8004354:	080044e3 	.word	0x080044e3
 8004358:	080044a1 	.word	0x080044a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fa0c 	bl	8004780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6999      	ldr	r1, [r3, #24]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	619a      	str	r2, [r3, #24]
      break;
 800439a:	e0a5      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fa72 	bl	800488c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	021a      	lsls	r2, r3, #8
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	619a      	str	r2, [r3, #24]
      break;
 80043dc:	e084      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fad1 	bl	800498c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0208 	orr.w	r2, r2, #8
 80043f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0204 	bic.w	r2, r2, #4
 8004408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69d9      	ldr	r1, [r3, #28]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	61da      	str	r2, [r3, #28]
      break;
 800441c:	e064      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fb2f 	bl	8004a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69d9      	ldr	r1, [r3, #28]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	021a      	lsls	r2, r3, #8
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	61da      	str	r2, [r3, #28]
      break;
 800445e:	e043      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fb72 	bl	8004b50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0208 	orr.w	r2, r2, #8
 800447a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800449e:	e023      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fbb0 	bl	8004c0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	021a      	lsls	r2, r3, #8
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044e0:	e002      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
      break;
 80044e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop

080044fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIM_ConfigClockSource+0x1c>
 8004514:	2302      	movs	r3, #2
 8004516:	e0b6      	b.n	8004686 <HAL_TIM_ConfigClockSource+0x18a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004554:	d03e      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0xd8>
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455a:	f200 8087 	bhi.w	800466c <HAL_TIM_ConfigClockSource+0x170>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004562:	f000 8086 	beq.w	8004672 <HAL_TIM_ConfigClockSource+0x176>
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	d87f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800456c:	2b70      	cmp	r3, #112	; 0x70
 800456e:	d01a      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xaa>
 8004570:	2b70      	cmp	r3, #112	; 0x70
 8004572:	d87b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004574:	2b60      	cmp	r3, #96	; 0x60
 8004576:	d050      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x11e>
 8004578:	2b60      	cmp	r3, #96	; 0x60
 800457a:	d877      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800457c:	2b50      	cmp	r3, #80	; 0x50
 800457e:	d03c      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0xfe>
 8004580:	2b50      	cmp	r3, #80	; 0x50
 8004582:	d873      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d058      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x13e>
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d86f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d064      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 8004590:	2b30      	cmp	r3, #48	; 0x30
 8004592:	d86b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d060      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d867      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d05a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 80045a4:	e062      	b.n	800466c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f000 fc03 	bl	8004dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	609a      	str	r2, [r3, #8]
      break;
 80045d2:	e04f      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f000 fbec 	bl	8004dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f6:	609a      	str	r2, [r3, #8]
      break;
 80045f8:	e03c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fb60 	bl	8004ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2150      	movs	r1, #80	; 0x50
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fbb9 	bl	8004d8a <TIM_ITRx_SetConfig>
      break;
 8004618:	e02c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fb7f 	bl	8004d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2160      	movs	r1, #96	; 0x60
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fba9 	bl	8004d8a <TIM_ITRx_SetConfig>
      break;
 8004638:	e01c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fb40 	bl	8004ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2140      	movs	r1, #64	; 0x40
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fb99 	bl	8004d8a <TIM_ITRx_SetConfig>
      break;
 8004658:	e00c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 fb90 	bl	8004d8a <TIM_ITRx_SetConfig>
      break;
 800466a:	e003      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e000      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a32      	ldr	r2, [pc, #200]	; (800476c <TIM_Base_SetConfig+0xdc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_Base_SetConfig+0x28>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ae:	d003      	beq.n	80046b8 <TIM_Base_SetConfig+0x28>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a2f      	ldr	r2, [pc, #188]	; (8004770 <TIM_Base_SetConfig+0xe0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a27      	ldr	r2, [pc, #156]	; (800476c <TIM_Base_SetConfig+0xdc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <TIM_Base_SetConfig+0x6a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d00f      	beq.n	80046fa <TIM_Base_SetConfig+0x6a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a24      	ldr	r2, [pc, #144]	; (8004770 <TIM_Base_SetConfig+0xe0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x6a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a23      	ldr	r2, [pc, #140]	; (8004774 <TIM_Base_SetConfig+0xe4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x6a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a22      	ldr	r2, [pc, #136]	; (8004778 <TIM_Base_SetConfig+0xe8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x6a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a21      	ldr	r2, [pc, #132]	; (800477c <TIM_Base_SetConfig+0xec>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a0e      	ldr	r2, [pc, #56]	; (800476c <TIM_Base_SetConfig+0xdc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00b      	beq.n	8004750 <TIM_Base_SetConfig+0xc0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <TIM_Base_SetConfig+0xe4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d007      	beq.n	8004750 <TIM_Base_SetConfig+0xc0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <TIM_Base_SetConfig+0xe8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_Base_SetConfig+0xc0>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a0c      	ldr	r2, [pc, #48]	; (800477c <TIM_Base_SetConfig+0xec>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d103      	bne.n	8004758 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	615a      	str	r2, [r3, #20]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40000400 	.word	0x40000400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800

08004780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 0302 	bic.w	r3, r3, #2
 80047cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a28      	ldr	r2, [pc, #160]	; (800487c <TIM_OC1_SetConfig+0xfc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_OC1_SetConfig+0x78>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a27      	ldr	r2, [pc, #156]	; (8004880 <TIM_OC1_SetConfig+0x100>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_OC1_SetConfig+0x78>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a26      	ldr	r2, [pc, #152]	; (8004884 <TIM_OC1_SetConfig+0x104>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_OC1_SetConfig+0x78>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a25      	ldr	r2, [pc, #148]	; (8004888 <TIM_OC1_SetConfig+0x108>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10c      	bne.n	8004812 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0308 	bic.w	r3, r3, #8
 80047fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a19      	ldr	r2, [pc, #100]	; (800487c <TIM_OC1_SetConfig+0xfc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00b      	beq.n	8004832 <TIM_OC1_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a18      	ldr	r2, [pc, #96]	; (8004880 <TIM_OC1_SetConfig+0x100>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <TIM_OC1_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a17      	ldr	r2, [pc, #92]	; (8004884 <TIM_OC1_SetConfig+0x104>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_OC1_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a16      	ldr	r2, [pc, #88]	; (8004888 <TIM_OC1_SetConfig+0x108>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d111      	bne.n	8004856 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0210 	bic.w	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0320 	bic.w	r3, r3, #32
 80048da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a24      	ldr	r2, [pc, #144]	; (800497c <TIM_OC2_SetConfig+0xf0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10d      	bne.n	800490c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a1b      	ldr	r2, [pc, #108]	; (800497c <TIM_OC2_SetConfig+0xf0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_OC2_SetConfig+0xa0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <TIM_OC2_SetConfig+0xf4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_OC2_SetConfig+0xa0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a19      	ldr	r2, [pc, #100]	; (8004984 <TIM_OC2_SetConfig+0xf8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_OC2_SetConfig+0xa0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a18      	ldr	r2, [pc, #96]	; (8004988 <TIM_OC2_SetConfig+0xfc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d113      	bne.n	8004954 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004932:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800493a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40014000 	.word	0x40014000
 8004984:	40014400 	.word	0x40014400
 8004988:	40014800 	.word	0x40014800

0800498c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <TIM_OC3_SetConfig+0xec>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d10d      	bne.n	8004a0a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a08:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a1a      	ldr	r2, [pc, #104]	; (8004a78 <TIM_OC3_SetConfig+0xec>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_OC3_SetConfig+0x9e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <TIM_OC3_SetConfig+0xf0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_OC3_SetConfig+0x9e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <TIM_OC3_SetConfig+0xf4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_OC3_SetConfig+0x9e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <TIM_OC3_SetConfig+0xf8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d113      	bne.n	8004a52 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800

08004a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <TIM_OC4_SetConfig+0xb8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00b      	beq.n	8004b04 <TIM_OC4_SetConfig+0x7c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <TIM_OC4_SetConfig+0xbc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <TIM_OC4_SetConfig+0x7c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <TIM_OC4_SetConfig+0xc0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC4_SetConfig+0x7c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <TIM_OC4_SetConfig+0xc4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d109      	bne.n	8004b18 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	019b      	lsls	r3, r3, #6
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800

08004b50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <TIM_OC5_SetConfig+0xac>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x72>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <TIM_OC5_SetConfig+0xb0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x72>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <TIM_OC5_SetConfig+0xb4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x72>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a12      	ldr	r2, [pc, #72]	; (8004c08 <TIM_OC5_SetConfig+0xb8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d109      	bne.n	8004bd6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800

08004c0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	051b      	lsls	r3, r3, #20
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <TIM_OC6_SetConfig+0xb0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00b      	beq.n	8004c80 <TIM_OC6_SetConfig+0x74>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <TIM_OC6_SetConfig+0xb4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d007      	beq.n	8004c80 <TIM_OC6_SetConfig+0x74>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <TIM_OC6_SetConfig+0xb8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_OC6_SetConfig+0x74>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <TIM_OC6_SetConfig+0xbc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d109      	bne.n	8004c94 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	029b      	lsls	r3, r3, #10
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40014400 	.word	0x40014400
 8004cc8:	40014800 	.word	0x40014800

08004ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 030a 	bic.w	r3, r3, #10
 8004d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b087      	sub	sp, #28
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0210 	bic.w	r2, r3, #16
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	031b      	lsls	r3, r3, #12
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f043 0307 	orr.w	r3, r3, #7
 8004dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	021a      	lsls	r2, r3, #8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	609a      	str	r2, [r3, #8]
}
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2201      	movs	r2, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_TIMEx_PWMN_Start+0x24>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	e022      	b.n	8004eb6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d109      	bne.n	8004e8a <HAL_TIMEx_PWMN_Start+0x3e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	bf14      	ite	ne
 8004e82:	2301      	movne	r3, #1
 8004e84:	2300      	moveq	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	e015      	b.n	8004eb6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d109      	bne.n	8004ea4 <HAL_TIMEx_PWMN_Start+0x58>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e008      	b.n	8004eb6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e05f      	b.n	8004f7e <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <HAL_TIMEx_PWMN_Start+0x82>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ecc:	e013      	b.n	8004ef6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d104      	bne.n	8004ede <HAL_TIMEx_PWMN_Start+0x92>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004edc:	e00b      	b.n	8004ef6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d104      	bne.n	8004eee <HAL_TIMEx_PWMN_Start+0xa2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eec:	e003      	b.n	8004ef6 <HAL_TIMEx_PWMN_Start+0xaa>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2204      	movs	r2, #4
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f98e 	bl	8005220 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <HAL_TIMEx_PWMN_Start+0x13c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_TIMEx_PWMN_Start+0xf0>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d009      	beq.n	8004f3c <HAL_TIMEx_PWMN_Start+0xf0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_TIMEx_PWMN_Start+0x140>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIMEx_PWMN_Start+0xf0>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <HAL_TIMEx_PWMN_Start+0x144>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d115      	bne.n	8004f68 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <HAL_TIMEx_PWMN_Start+0x148>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d015      	beq.n	8004f7a <HAL_TIMEx_PWMN_Start+0x12e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d011      	beq.n	8004f7a <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	e008      	b.n	8004f7a <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e000      	b.n	8004f7c <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40012c00 	.word	0x40012c00
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	00010007 	.word	0x00010007

08004f98 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f938 	bl	8005220 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <HAL_TIMEx_PWMN_Stop+0x48>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	f240 4344 	movw	r3, #1092	; 0x444
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d107      	bne.n	8004fe0 <HAL_TIMEx_PWMN_Stop+0x48>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a1a      	ldr	r2, [r3, #32]
 8004fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10f      	bne.n	8005010 <HAL_TIMEx_PWMN_Stop+0x78>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <HAL_TIMEx_PWMN_Stop+0x78>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_TIMEx_PWMN_Stop+0x88>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501e:	e013      	b.n	8005048 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b04      	cmp	r3, #4
 8005024:	d104      	bne.n	8005030 <HAL_TIMEx_PWMN_Stop+0x98>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800502e:	e00b      	b.n	8005048 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b08      	cmp	r3, #8
 8005034:	d104      	bne.n	8005040 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800503e:	e003      	b.n	8005048 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005068:	2302      	movs	r3, #2
 800506a:	e054      	b.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a24      	ldr	r2, [pc, #144]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800509c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a17      	ldr	r2, [pc, #92]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d009      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a13      	ldr	r2, [pc, #76]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a11      	ldr	r2, [pc, #68]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d10c      	bne.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40000400 	.word	0x40000400
 800512c:	40014000 	.word	0x40014000

08005130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005148:	2302      	movs	r3, #2
 800514a:	e060      	b.n	800520e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	041b      	lsls	r3, r3, #16
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a14      	ldr	r2, [pc, #80]	; (800521c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d115      	bne.n	80051fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	051b      	lsls	r3, r3, #20
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40012c00 	.word	0x40012c00

08005220 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	2204      	movs	r2, #4
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	43db      	mvns	r3, r3
 8005242:	401a      	ands	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1a      	ldr	r2, [r3, #32]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	fa01 f303 	lsl.w	r3, r1, r3
 8005258:	431a      	orrs	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	; (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	; (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	; (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	; (80052b0 <__libc_init_array+0x44>)
 8005280:	f000 f820 	bl	80052c4 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	0800530c 	.word	0x0800530c
 80052a8:	0800530c 	.word	0x0800530c
 80052ac:	0800530c 	.word	0x0800530c
 80052b0:	08005310 	.word	0x08005310

080052b4 <memset>:
 80052b4:	4402      	add	r2, r0
 80052b6:	4603      	mov	r3, r0
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d100      	bne.n	80052be <memset+0xa>
 80052bc:	4770      	bx	lr
 80052be:	f803 1b01 	strb.w	r1, [r3], #1
 80052c2:	e7f9      	b.n	80052b8 <memset+0x4>

080052c4 <_init>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	bf00      	nop
 80052c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ca:	bc08      	pop	{r3}
 80052cc:	469e      	mov	lr, r3
 80052ce:	4770      	bx	lr

080052d0 <_fini>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr
