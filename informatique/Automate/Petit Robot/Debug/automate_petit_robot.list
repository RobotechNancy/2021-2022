
automate_petit_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007340  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  000222c8  2**0
                  CONTENTS
  4 .ARM          00000000  080074f8  080074f8  000222c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074f8  080074f8  000222c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000022c8  20000000  08007500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000222c8  2**0
                  CONTENTS
 10 .bss          000001fc  200022c8  200022c8  000222c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200024c4  200024c4  000222c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000222c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117f6  00000000  00000000  000222f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a0f  00000000  00000000  00033aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00036500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  00037400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc0c  00000000  00000000  000381c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001254b  00000000  00000000  00054dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab2c9  00000000  00000000  0006731f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001125e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f0c  00000000  00000000  00112638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200022c8 	.word	0x200022c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080074b0 	.word	0x080074b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200022cc 	.word	0x200022cc
 80001c4:	080074b0 	.word	0x080074b0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \param isRep vrai si c'est une reponse a une requete, faux sinon
 * \param RepId indique le nombre de reponse atendu pour une requete et le num de la reponse pour une reponse
 * \param dataLen frame payload length in byte (0 .. 8) aka data length code
 * \param data CAN frame payload (up to 8 byte)
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b09c      	sub	sp, #112	; 0x70
 8000a48:	af06      	add	r7, sp, #24
 8000a4a:	6078      	str	r0, [r7, #4]
	// traitement et mise en forme de la trame
	/////////////////////////////////////////////////////////////////////////
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000a4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f002 fd08 	bl	800346c <HAL_CAN_GetRxMessage>

	struct CanResponse_t msg;
	msg = traitement_trame( RxHeader, RxData);
 8000a5c:	f107 050c 	add.w	r5, r7, #12
 8000a60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a64:	9304      	str	r3, [sp, #16]
 8000a66:	466c      	mov	r4, sp
 8000a68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a78:	4628      	mov	r0, r5
 8000a7a:	f000 f919 	bl	8000cb0 <traitement_trame>
	/////////////////////////////////////////////////////////////////////////
	switch(msg.codeFct){
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f5b3 2fce 	cmp.w	r3, #421888	; 0x67000
 8000a84:	d035      	beq.n	8000af2 <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
 8000a86:	f5b3 2fce 	cmp.w	r3, #421888	; 0x67000
 8000a8a:	f200 808c 	bhi.w	8000ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
 8000a8e:	f5b3 2fcc 	cmp.w	r3, #417792	; 0x66000
 8000a92:	d067      	beq.n	8000b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 8000a94:	f5b3 2fcc 	cmp.w	r3, #417792	; 0x66000
 8000a98:	f200 8085 	bhi.w	8000ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
 8000a9c:	f5b3 2fc2 	cmp.w	r3, #397312	; 0x61000
 8000aa0:	d003      	beq.n	8000aaa <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8000aa2:	f5b3 2fca 	cmp.w	r3, #413696	; 0x65000
 8000aa6:	d03d      	beq.n	8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
		        }
		send(CAN_ADDR_RASPBERRY,VALEUR_RESISTANCE,data,1,true,1,msg.idMessage);
		break;
	default :

	break;
 8000aa8:	e07d      	b.n	8000ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
        CR=deplacement_servo_resistance(msg.data[0]);
 8000aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fdda 	bl	8001668 <deplacement_servo_resistance>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        data[0] = CR;
 8000aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000abe:	723b      	strb	r3, [r7, #8]
        while (get_fin()!=1) {
 8000ac0:	bf00      	nop
 8000ac2:	f001 f907 	bl	8001cd4 <get_fin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f083 0301 	eor.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f7      	bne.n	8000ac2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
		send(CAN_ADDR_RASPBERRY,ACCUSER_RECPETION,data,1,true,1,msg.idMessage);
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	f107 0208 	add.w	r2, r7, #8
 8000ad8:	9302      	str	r3, [sp, #8]
 8000ada:	2301      	movs	r3, #1
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f44f 217f 	mov.w	r1, #1044480	; 0xff000
 8000ae8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000aec:	f000 f8a8 	bl	8000c40 <send>
		break;
 8000af0:	e05a      	b.n	8000ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		go_position(msg.data[0]);
 8000af2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f928 	bl	8000d4c <go_position>
		start_generate();
 8000afc:	f000 fcfc 	bl	80014f8 <start_generate>
		data[0]= 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	723b      	strb	r3, [r7, #8]
		send(CAN_ADDR_RASPBERRY,ACCUSER_RECPETION,data,1,true,1,msg.idMessage);
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	f107 0208 	add.w	r2, r7, #8
 8000b0a:	9302      	str	r3, [sp, #8]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	2301      	movs	r3, #1
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2301      	movs	r3, #1
 8000b16:	f44f 217f 	mov.w	r1, #1044480	; 0xff000
 8000b1a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000b1e:	f000 f88f 	bl	8000c40 <send>
		break;
 8000b22:	e041      	b.n	8000ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		CR=aimant(msg.data[0]);
 8000b24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf14      	ite	ne
 8000b2c:	2301      	movne	r3, #1
 8000b2e:	2300      	moveq	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fea2 	bl	800187c <aimant>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		data[0]=CR;
 8000b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b42:	723b      	strb	r3, [r7, #8]
		send(CAN_ADDR_RASPBERRY,ACCUSER_RECPETION,data,1,true,1,msg.idMessage);
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	f107 0208 	add.w	r2, r7, #8
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	2301      	movs	r3, #1
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2301      	movs	r3, #1
 8000b56:	f44f 217f 	mov.w	r1, #1044480	; 0xff000
 8000b5a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000b5e:	f000 f86f 	bl	8000c40 <send>
		break;
 8000b62:	e021      	b.n	8000ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		CR=test_resistance();
 8000b64:	f000 fdb4 	bl	80016d0 <test_resistance>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		data[0]=CR;
 8000b6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b72:	723b      	strb	r3, [r7, #8]
		 while (get_fin()!=1) {
 8000b74:	bf00      	nop
 8000b76:	f001 f8ad 	bl	8001cd4 <get_fin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f083 0301 	eor.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f7      	bne.n	8000b76 <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
		send(CAN_ADDR_RASPBERRY,VALEUR_RESISTANCE,data,1,true,1,msg.idMessage);
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	f107 0208 	add.w	r2, r7, #8
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	2301      	movs	r3, #1
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2301      	movs	r3, #1
 8000b98:	f44f 2166 	mov.w	r1, #942080	; 0xe6000
 8000b9c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000ba0:	f000 f84e 	bl	8000c40 <send>
		break;
 8000ba4:	e000      	b.n	8000ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
	break;
 8000ba6:	bf00      	nop


	//renvoi un msg sur le bus can
	//uint8_t data[8] = {0x01,0x02,0xFF,0x34,0x45};
	//send(CAN_ADDR_RASPBERRY, AVANCE, data, 5, true, 5, ) ;
}
 8000ba8:	bf00      	nop
 8000baa:	3758      	adds	r7, #88	; 0x58
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bdb0      	pop	{r4, r5, r7, pc}

08000bb0 <CAN_Config>:
 *          This parameter can be one of the GPIO_PinState enum values:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void CAN_Config(CAN_HandleTypeDef hcan, CAN_EMIT_ADDR adresse) {
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	b5b0      	push	{r4, r5, r7, lr}
 8000bb4:	b08a      	sub	sp, #40	; 0x28
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK; //Mode de filtrage choisit (avec maqsque ou liste d'adresses)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //1 filtre de 32 bits ou 1 de 16 bits
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0b010000000000000; //Adresse de l'émetteur à filtrer (ou du groupe) sur les bits de poids fort
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0; //
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0b111100000000000; //Masque utilisé (FFF pour une adresse unique) sur les bits de poids fort
 8000bd6:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000bda:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; //File utilisée (3 disponibles, donc potentiellement 3 filtres configurables sur chacune)
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14; // choix du filtre dans la banque
 8000be8:	230e      	movs	r3, #14
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig); //configuration du filtre sur le controleur can
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000bf4:	f002 fa51 	bl	800309a <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);                         // Démarre le périphérique CAN
 8000bf8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000bfc:	f002 fb17 	bl	800322e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Active le mode interruption
 8000c00:	2102      	movs	r1, #2
 8000c02:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000c06:	f002 fd43 	bl	8003690 <HAL_CAN_ActivateNotification>
	hcan_p = hcan;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <CAN_Config+0x88>)
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c1e:	e885 0003 	stmia.w	r5, {r0, r1}
	//TxData[0] = valeur; // Vous pouvez changer toutes les valeurs de Txdata[0] à Txdata[TxHeader.DLC - 1] (TxHeader.DLC étant défini ci dessus)
	CanAdresse = adresse;
 8000c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <CAN_Config+0x8c>)
 8000c28:	701a      	strb	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr
 8000c38:	20002484 	.word	0x20002484
 8000c3c:	200024ac 	.word	0x200024ac

08000c40 <send>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_WRITE_ERROR} une erreur à eu lieu lors de l'envoie du message
*/
int send(CAN_ADDR addr, CAN_CODE_FCT codeFct , uint8_t data[], uint dataLen, bool isRep, uint repLenght, uint idMessage){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]

	if (dataLen >8){
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	2b08      	cmp	r3, #8
 8000c52:	d901      	bls.n	8000c58 <send+0x18>
		return CAN_E_DATA_SIZE_TOO_LONG;
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <send+0x68>)
 8000c56:	e022      	b.n	8000c9e <send+0x5e>
	//if(!is_valid_addr(addr)) return CAN_E_UNKNOW_ADDR;
	//if(!is_valid_code_fct(codeFct)) return CAN_E_UNKNOW_CODE_FCT;


	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dataLen; // taille des données à transmettre en octets
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28

	//adresse à mettre en en-tête du message (adresse de l'émetteur), qui servira pour l'arbitrage

	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | codeFct | repLenght | idMessage << CAN_DECALAGE_ID_MSG | isRep << CAN_DECALAGE_IS_REP | repLenght;
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c64:	431a      	orrs	r2, r3
 8000c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	431a      	orrs	r2, r3
 8000c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c76:	4313      	orrs	r3, r2
 8000c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7c:	61fb      	str	r3, [r7, #28]
	//txHeader.ExtId = 0b11101100100100000010000011111;
	//1 111 0001 0000 10010000 00000000 1 001
	//1011 0001 00001001 00000000 0000 1 001000000011001
	txHeader.IDE = CAN_ID_EXT; //on choisit l'adressage étendue
 8000c7e:	2304      	movs	r3, #4
 8000c80:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA; // On choisit quel type de message envoyer (requête ou data)
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t TxMailbox; //création d'un message pour avoir le numéro de la mailbox dans laquelle est stocké le message (afin de suivre son évolution jusqu'à l'envoi)

	HAL_CAN_AddTxMessage(&hcan_p, &txHeader, data, &TxMailbox);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	f107 0118 	add.w	r1, r7, #24
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <send+0x6c>)
 8000c98:	f002 fb0d 	bl	80032b6 <HAL_CAN_AddTxMessage>

	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	fffffe02 	.word	0xfffffe02
 8000cac:	20002484 	.word	0x20002484

08000cb0 <traitement_trame>:
 *  \retval {CAN_E_OOB_DATA} au moins une des donnés n'est pas dans les valeurs possible (0 - 255)
 *  \retval {CAN_E_UNKNOW_ADDR} l'adresse n'est pas dans le #define
 *  \retval {CAN_E_UNKNOW_CODE_FCT} le code fonction n'est pas dans le #define
 *  \retval {CAN_E_READ_ERROR} erreur dans la lecture de la trame depuis le buffer
*/
struct CanResponse_t traitement_trame(CAN_RxHeaderTypeDef frame, uint8_t data[]){
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	b4b0      	push	{r4, r5, r7}
 8000cb4:	b08d      	sub	sp, #52	; 0x34
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		struct CanResponse_t rep;
		//rep.ExtID.champId = frame.ExtId;

		rep.addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR)  ;
 8000cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cc4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000cc8:	60bb      	str	r3, [r7, #8]
		rep.emetteur = (frame.ExtId &  CAN_FILTER_ADDR_RECEPTEUR) ;
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	60fb      	str	r3, [r7, #12]
		rep.codeFct = (frame.ExtId & CAN_FILTER_CODE_FCT);
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8000cd8:	613b      	str	r3, [r7, #16]
		rep.isRep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 8000cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf14      	ite	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	2300      	moveq	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	763b      	strb	r3, [r7, #24]
		rep.RepId = (frame.ExtId & CAN_FILTER_REP_NBR) ;
 8000cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	61fb      	str	r3, [r7, #28]
		rep.idMessage = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 8000cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf8:	091b      	lsrs	r3, r3, #4
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	617b      	str	r3, [r7, #20]
        if(!is_valid_addr(rep.addr)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_addr(rep.emetteur)) return CAN_E_UNKNOW_ADDR;
        if(!is_valid_code_fct(rep.codeFct)) return CAN_E_UNKNOW_CODE_FCT;
        if (frame.DLC >8)  return CAN_E_DATA_SIZE_TOO_LONG;*/

        rep.dataLen = frame.DLC;
 8000cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d00:	623b      	str	r3, [r7, #32]


        for (int i = 0; i < frame.DLC; i++){
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d06:	e00c      	b.n	8000d22 <traitement_trame+0x72>
            //if(data[i] <0 || data[i] > 255) return CAN_E_OOB_DATA;
            rep.data[i] = data[i];
 8000d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d0c:	4413      	add	r3, r2
 8000d0e:	7819      	ldrb	r1, [r3, #0]
 8000d10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	4413      	add	r3, r2
 8000d18:	460a      	mov	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < frame.DLC; i++){
 8000d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1e:	3301      	adds	r3, #1
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d8ee      	bhi.n	8000d08 <traitement_trame+0x58>
        }


    return rep;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	461d      	mov	r5, r3
 8000d2e:	f107 0408 	add.w	r4, r7, #8
 8000d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	602b      	str	r3, [r5, #0]
}
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	3734      	adds	r7, #52	; 0x34
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bcb0      	pop	{r4, r5, r7}
 8000d46:	b004      	add	sp, #16
 8000d48:	4770      	bx	lr
	...

08000d4c <go_position>:
#include "deplacementActionneur.h"
#include "motorActionneur.h"

extern Motor_t motor;

void go_position(Position_t pos){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	if (get_deplacement_state() == ARRET){
 8000d56:	f000 fff9 	bl	8001d4c <get_deplacement_state>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d134      	bne.n	8000dca <go_position+0x7e>
		if (get_position() != pos){
 8000d60:	f001 f810 	bl	8001d84 <get_position>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d025      	beq.n	8000dba <go_position+0x6e>
			reset_steps();
 8000d6e:	f001 f85d 	bl	8001e2c <reset_steps>
			switch(get_position()){
 8000d72:	f001 f807 	bl	8001d84 <get_position>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d002      	beq.n	8000d82 <go_position+0x36>
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d00e      	beq.n	8000d9e <go_position+0x52>
				motor_dir(&motor);
				set_target(NB_STEPS);
				set_fin(0);
				break;
			default:
			break;
 8000d80:	e01c      	b.n	8000dbc <go_position+0x70>
				motor.pinDirState = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <go_position+0x88>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
				motor_dir(&motor);
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <go_position+0x88>)
 8000d8a:	f000 fc1a 	bl	80015c2 <motor_dir>
				set_target(NB_STEPS);
 8000d8e:	f645 10d8 	movw	r0, #23000	; 0x59d8
 8000d92:	f001 f83b 	bl	8001e0c <set_target>
				set_fin(0);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 ffa8 	bl	8001cec <set_fin>
				break;
 8000d9c:	e00e      	b.n	8000dbc <go_position+0x70>
				motor.pinDirState = 1;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <go_position+0x88>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	621a      	str	r2, [r3, #32]
				motor_dir(&motor);
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <go_position+0x88>)
 8000da6:	f000 fc0c 	bl	80015c2 <motor_dir>
				set_target(NB_STEPS);
 8000daa:	f645 10d8 	movw	r0, #23000	; 0x59d8
 8000dae:	f001 f82d 	bl	8001e0c <set_target>
				set_fin(0);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 ff9a 	bl	8001cec <set_fin>
				break;
 8000db8:	e000      	b.n	8000dbc <go_position+0x70>
			}
		}
 8000dba:	bf00      	nop
		set_next_position(pos);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 f808 	bl	8001dd4 <set_next_position>
		motor.diviseur = 40;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <go_position+0x88>)
 8000dc6:	2228      	movs	r2, #40	; 0x28
 8000dc8:	601a      	str	r2, [r3, #0]

	}
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dde:	f001 f887 	bl	8001ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de2:	f000 f82f 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f000 fa6f 	bl	80012c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dea:	f000 f883 	bl	8000ef4 <MX_ADC1_Init>
  MX_DMA_Init();
 8000dee:	f000 fa4d 	bl	800128c <MX_DMA_Init>
  MX_TIM2_Init();
 8000df2:	f000 f925 	bl	8001040 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000df6:	f000 f999 	bl	800112c <MX_TIM3_Init>
  MX_CAN_Init();
 8000dfa:	f000 f8eb 	bl	8000fd4 <MX_CAN_Init>
  MX_TIM6_Init();
 8000dfe:	f000 fa0d 	bl	800121c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  CAN_Config(hcan,CAN_ADDR_ACTIONNEUR);
 8000e02:	4e0e      	ldr	r6, [pc, #56]	; (8000e3c <main+0x64>)
 8000e04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e08:	9306      	str	r3, [sp, #24]
 8000e0a:	466d      	mov	r5, sp
 8000e0c:	f106 0410 	add.w	r4, r6, #16
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e20:	f7ff fec6 	bl	8000bb0 <CAN_Config>


//	Initialiation Moteur PAP
  	  motor_en(RESET); //RESET = actif
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 fbde 	bl	80015e6 <motor_en>
      motor_micro_step(SET, RESET); //1/2 step
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 fbeb 	bl	8001608 <motor_micro_step>

//	 deplacementTest(0);
//	 attendre(2000);
//	 deplacementTest(90);
//	 attendre(2000);
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e32:	210c      	movs	r1, #12
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <main+0x68>)
 8000e36:	f005 f983 	bl	8006140 <HAL_TIM_PWM_Start>
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <main+0x62>
 8000e3c:	20002334 	.word	0x20002334
 8000e40:	200023a8 	.word	0x200023a8

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b096      	sub	sp, #88	; 0x58
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e4e:	2228      	movs	r2, #40	; 0x28
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 fb24 	bl	80074a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
 8000e76:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e80:	2310      	movs	r3, #16
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000e8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fac0 	bl	800441c <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ea2:	f000 fa87 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 fae9 	bl	8005498 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ecc:	f000 fa72 	bl	80013b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fcc1 	bl	8005864 <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000ee8:	f000 fa64 	bl	80013b4 <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3758      	adds	r7, #88	; 0x58
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f16:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f2a:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f60:	2204      	movs	r2, #4
 8000f62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f70:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f72:	f001 f823 	bl	8001fbc <HAL_ADC_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f7c:	f000 fa1a 	bl	80013b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000f8c:	f001 fdfa 	bl	8002b84 <HAL_ADCEx_MultiModeConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f96:	f000 fa0d 	bl	80013b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f9a:	230b      	movs	r3, #11
 8000f9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_ADC1_Init+0xdc>)
 8000fb8:	f001 fb24 	bl	8002604 <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000fc2:	f000 f9f7 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200022e4 	.word	0x200022e4

08000fd4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_CAN_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <MX_CAN_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_CAN_Init+0x64>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_CAN_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_CAN_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_CAN_Init+0x64>)
 8000ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_CAN_Init+0x64>)
 8000ffa:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000ffe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <MX_CAN_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_CAN_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_CAN_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_CAN_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_CAN_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_CAN_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_CAN_Init+0x64>)
 8001026:	f001 ff3d 	bl	8002ea4 <HAL_CAN_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001030:	f000 f9c0 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20002334 	.word	0x20002334
 800103c:	40006400 	.word	0x40006400

08001040 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001074:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001078:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_TIM2_Init+0xe8>)
 800107c:	2207      	movs	r2, #7
 800107e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001088:	2263      	movs	r2, #99	; 0x63
 800108a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_TIM2_Init+0xe8>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001098:	4823      	ldr	r0, [pc, #140]	; (8001128 <MX_TIM2_Init+0xe8>)
 800109a:	f004 fd09 	bl	8005ab0 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010a4:	f000 f986 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b2:	4619      	mov	r1, r3
 80010b4:	481c      	ldr	r0, [pc, #112]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010b6:	f005 fbf1 	bl	800689c <HAL_TIM_ConfigClockSource>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010c0:	f000 f978 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c4:	4818      	ldr	r0, [pc, #96]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010c6:	f004 ffd9 	bl	800607c <HAL_TIM_PWM_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010d0:	f000 f970 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010e4:	f006 f92c 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010ee:	f000 f961 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f2:	2360      	movs	r3, #96	; 0x60
 80010f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_TIM2_Init+0xe8>)
 800110a:	f005 fab3 	bl	8006674 <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001114:	f000 f94e 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_TIM2_Init+0xe8>)
 800111a:	f000 fd09 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 800111e:	bf00      	nop
 8001120:	3738      	adds	r7, #56	; 0x38
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000235c 	.word	0x2000235c

0800112c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
 800115a:	615a      	str	r2, [r3, #20]
 800115c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001160:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <MX_TIM3_Init+0xec>)
 8001162:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001166:	229f      	movs	r2, #159	; 0x9f
 8001168:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_TIM3_Init+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001172:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001176:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_TIM3_Init+0xe8>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001184:	4823      	ldr	r0, [pc, #140]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001186:	f004 fc93 	bl	8005ab0 <HAL_TIM_Base_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001190:	f000 f910 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800119a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119e:	4619      	mov	r1, r3
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <MX_TIM3_Init+0xe8>)
 80011a2:	f005 fb7b 	bl	800689c <HAL_TIM_ConfigClockSource>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011ac:	f000 f902 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011b0:	4818      	ldr	r0, [pc, #96]	; (8001214 <MX_TIM3_Init+0xe8>)
 80011b2:	f004 ff63 	bl	800607c <HAL_TIM_PWM_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011bc:	f000 f8fa 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <MX_TIM3_Init+0xe8>)
 80011d0:	f006 f8b6 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011da:	f000 f8eb 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011de:	2360      	movs	r3, #96	; 0x60
 80011e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	220c      	movs	r2, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM3_Init+0xe8>)
 80011f6:	f005 fa3d 	bl	8006674 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001200:	f000 f8d8 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM3_Init+0xe8>)
 8001206:	f000 fc93 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 800120a:	bf00      	nop
 800120c:	3738      	adds	r7, #56	; 0x38
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200023a8 	.word	0x200023a8
 8001218:	40000400 	.word	0x40000400

0800121c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_TIM6_Init+0x68>)
 800122e:	4a16      	ldr	r2, [pc, #88]	; (8001288 <MX_TIM6_Init+0x6c>)
 8001230:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_TIM6_Init+0x68>)
 8001234:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001238:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_TIM6_Init+0x68>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_TIM6_Init+0x68>)
 8001242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001246:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_TIM6_Init+0x68>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_TIM6_Init+0x68>)
 8001250:	f004 fc2e 	bl	8005ab0 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800125a:	f000 f8ab 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_TIM6_Init+0x68>)
 800126c:	f006 f868 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001276:	f000 f89d 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200023f4 	.word	0x200023f4
 8001288:	40001000 	.word	0x40001000

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DMA_Init+0x38>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MX_DMA_Init+0x38>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6153      	str	r3, [r2, #20]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x38>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	200c      	movs	r0, #12
 80012b0:	f002 fd1f 	bl	8003cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012b4:	200c      	movs	r0, #12
 80012b6:	f002 fd38 	bl	8003d2a <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <MX_GPIO_Init+0xe0>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <MX_GPIO_Init+0xe0>)
 80012e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e8:	6153      	str	r3, [r2, #20]
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <MX_GPIO_Init+0xe0>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <MX_GPIO_Init+0xe0>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <MX_GPIO_Init+0xe0>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <MX_GPIO_Init+0xe0>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <MX_GPIO_Init+0xe0>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <MX_GPIO_Init+0xe0>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <MX_GPIO_Init+0xe0>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MS2_Pin|MS1_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2103      	movs	r1, #3
 800132a:	4820      	ldr	r0, [pc, #128]	; (80013ac <MX_GPIO_Init+0xe4>)
 800132c:	f003 f85e 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f003 f857 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(aimant_GPIO_Port, aimant_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	481b      	ldr	r0, [pc, #108]	; (80013b0 <MX_GPIO_Init+0xe8>)
 8001344:	f003 f852 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MS2_Pin MS1_Pin */
  GPIO_InitStruct.Pin = MS2_Pin|MS1_Pin;
 8001348:	2303      	movs	r3, #3
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4619      	mov	r1, r3
 800135e:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_GPIO_Init+0xe4>)
 8001360:	f002 fed2 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = EN_Pin|DIR_Pin|STEP_Pin;
 8001364:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f002 fec2 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : aimant_Pin */
  GPIO_InitStruct.Pin = aimant_Pin;
 8001384:	2340      	movs	r3, #64	; 0x40
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(aimant_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_GPIO_Init+0xe8>)
 800139c:	f002 feb4 	bl	8004108 <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48001400 	.word	0x48001400
 80013b0:	48000400 	.word	0x48000400

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>
	...

080013c0 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim2;

extern Motor_t motor;

//Fonctions
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if (htim==&htim2){ //condition d'interruption du timer X
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a49      	ldr	r2, [pc, #292]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f040 808b 	bne.w	80014e8 <HAL_TIM_PeriodElapsedCallback+0x128>
//		motor_step puis avance ou avance puis motor_step
		count_steps();
 80013d2:	f000 fd37 	bl	8001e44 <count_steps>
		avance(&motor);
 80013d6:	4847      	ldr	r0, [pc, #284]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013d8:	f000 f8b0 	bl	800153c <avance>
		motor_step(&motor);
 80013dc:	4845      	ldr	r0, [pc, #276]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013de:	f000 f8de 	bl	800159e <motor_step>
		if (get_steps() == get_length()){
 80013e2:	f000 fd3d 	bl	8001e60 <get_steps>
 80013e6:	4604      	mov	r4, r0
 80013e8:	f000 fc90 	bl	8001d0c <get_length>
 80013ec:	4603      	mov	r3, r0
 80013ee:	429c      	cmp	r4, r3
 80013f0:	d102      	bne.n	80013f8 <HAL_TIM_PeriodElapsedCallback+0x38>
			set_deplacement_state(MAINTIENT);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f000 fcb6 	bl	8001d64 <set_deplacement_state>
		}
		if(get_steps_left() <= 0)
 80013f8:	f000 fd3e 	bl	8001e78 <get_steps_left>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d11c      	bne.n	800143c <HAL_TIM_PeriodElapsedCallback+0x7c>
		{
			HAL_TIM_Base_Stop_DMA(&htim2);
 8001402:	483b      	ldr	r0, [pc, #236]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001404:	f004 fc8e 	bl	8005d24 <HAL_TIM_Base_Stop_DMA>
			HAL_TIM_OC_Stop(&htim2, TIM_CHANNEL_1);
 8001408:	2100      	movs	r1, #0
 800140a:	4839      	ldr	r0, [pc, #228]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800140c:	f004 fda8 	bl	8005f60 <HAL_TIM_OC_Stop>

			motor.pinStepState = RESET;
 8001410:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
			motor_step(&motor);
 8001416:	4837      	ldr	r0, [pc, #220]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001418:	f000 f8c1 	bl	800159e <motor_step>
		    motor.cnt = 0;
 800141c:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
			set_deplacement_state(ARRET);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 fc9e 	bl	8001d64 <set_deplacement_state>
			set_position(get_next_position());
 8001428:	f000 fcc8 	bl	8001dbc <get_next_position>
 800142c:	4603      	mov	r3, r0
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fcb4 	bl	8001d9c <set_position>
			set_fin(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f000 fc59 	bl	8001cec <set_fin>
				HAL_TIM_Base_Start_DMA(&htim2, (uint32_t *)&(get_r_arr()[offsetAddr]), get_length()-1);
				set_deplacement_state(DECELERATION);
			}
		}
	}
}
 800143a:	e055      	b.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x128>
		else if(get_target() < get_length() * 2)
 800143c:	f000 fcda 	bl	8001df4 <get_target>
 8001440:	4604      	mov	r4, r0
 8001442:	f000 fc63 	bl	8001d0c <get_length>
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	429c      	cmp	r4, r3
 800144c:	d226      	bcs.n	800149c <HAL_TIM_PeriodElapsedCallback+0xdc>
			if(get_steps() == get_steps_left())
 800144e:	f000 fd07 	bl	8001e60 <get_steps>
 8001452:	4604      	mov	r4, r0
 8001454:	f000 fd10 	bl	8001e78 <get_steps_left>
 8001458:	4603      	mov	r3, r0
 800145a:	429c      	cmp	r4, r3
 800145c:	d144      	bne.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x128>
				uint32_t offsetAddr = LENGTH_ARR_MAX - (get_steps_left()-1);
 800145e:	f000 fd0b 	bl	8001e78 <get_steps_left>
 8001462:	4603      	mov	r3, r0
 8001464:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 8001468:	3302      	adds	r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
				HAL_TIM_Base_Stop_DMA(&htim2);
 800146c:	4820      	ldr	r0, [pc, #128]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800146e:	f004 fc59 	bl	8005d24 <HAL_TIM_Base_Stop_DMA>
				HAL_TIM_Base_Start_DMA(&htim2, (uint32_t *)&(get_r_arr()[offsetAddr]), get_steps_left()-1);
 8001472:	f000 fc61 	bl	8001d38 <get_r_arr>
 8001476:	4602      	mov	r2, r0
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	18d4      	adds	r4, r2, r3
 800147e:	f000 fcfb 	bl	8001e78 <get_steps_left>
 8001482:	4603      	mov	r3, r0
 8001484:	b29b      	uxth	r3, r3
 8001486:	3b01      	subs	r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	4621      	mov	r1, r4
 800148e:	4818      	ldr	r0, [pc, #96]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001490:	f004 fbba 	bl	8005c08 <HAL_TIM_Base_Start_DMA>
				set_deplacement_state(DECELERATION);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 fc65 	bl	8001d64 <set_deplacement_state>
}
 800149a:	e025      	b.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x128>
			if (get_length() == get_steps_left())
 800149c:	f000 fc36 	bl	8001d0c <get_length>
 80014a0:	4604      	mov	r4, r0
 80014a2:	f000 fce9 	bl	8001e78 <get_steps_left>
 80014a6:	4603      	mov	r3, r0
 80014a8:	429c      	cmp	r4, r3
 80014aa:	d11d      	bne.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x128>
				uint32_t offsetAddr = LENGTH_ARR_MAX - (get_length()-1);
 80014ac:	f000 fc2e 	bl	8001d0c <get_length>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f5c3 638a 	rsb	r3, r3, #1104	; 0x450
 80014b6:	3302      	adds	r3, #2
 80014b8:	60fb      	str	r3, [r7, #12]
				HAL_TIM_Base_Stop_DMA(&htim2);
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014bc:	f004 fc32 	bl	8005d24 <HAL_TIM_Base_Stop_DMA>
				HAL_TIM_Base_Start_DMA(&htim2, (uint32_t *)&(get_r_arr()[offsetAddr]), get_length()-1);
 80014c0:	f000 fc3a 	bl	8001d38 <get_r_arr>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	18d4      	adds	r4, r2, r3
 80014cc:	f000 fc1e 	bl	8001d0c <get_length>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4621      	mov	r1, r4
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014de:	f004 fb93 	bl	8005c08 <HAL_TIM_Base_Start_DMA>
				set_deplacement_state(DECELERATION);
 80014e2:	2003      	movs	r0, #3
 80014e4:	f000 fc3e 	bl	8001d64 <set_deplacement_state>
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	2000235c 	.word	0x2000235c
 80014f4:	20000000 	.word	0x20000000

080014f8 <start_generate>:


void start_generate(void){
 80014f8:	b598      	push	{r3, r4, r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <start_generate+0x40>)
 8001500:	f004 fc42 	bl	8005d88 <HAL_TIM_OC_Start>
    HAL_TIM_Base_Start_DMA(&htim2, (uint32_t *)&(get_arr()[0]), get_length());
 8001504:	f000 fc0e 	bl	8001d24 <get_arr>
 8001508:	4604      	mov	r4, r0
 800150a:	f000 fbff 	bl	8001d0c <get_length>
 800150e:	4603      	mov	r3, r0
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	4621      	mov	r1, r4
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <start_generate+0x40>)
 8001518:	f004 fb76 	bl	8005c08 <HAL_TIM_Base_Start_DMA>
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <start_generate+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <start_generate+0x40>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	60da      	str	r2, [r3, #12]
    set_deplacement_state(ACCELERATION);
 800152c:	2001      	movs	r0, #1
 800152e:	f000 fc19 	bl	8001d64 <set_deplacement_state>
}
 8001532:	bf00      	nop
 8001534:	bd98      	pop	{r3, r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	2000235c 	.word	0x2000235c

0800153c <avance>:
	set_deplacement_state(ARRET);
	set_position(INCONNUE);
	set_fin(1);
}

int avance(Motor_t *motor){
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	int err;
	if(motor->diviseur==0){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <avance+0x1c>
		motor->pinStepState = RESET;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
		err = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e01b      	b.n	8001590 <avance+0x54>
	}
	else{
	    motor->cnt++;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	605a      	str	r2, [r3, #4]
	    motor->cnt %= motor->diviseur;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	fb93 f1f2 	sdiv	r1, r3, r2
 800156e:	fb01 f202 	mul.w	r2, r1, r2
 8001572:	1a9a      	subs	r2, r3, r2
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	605a      	str	r2, [r3, #4]
	    motor->pinStepState = motor->cnt == 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	61da      	str	r2, [r3, #28]
	    err = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
	}
    return err;
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <motor_step>:

void motor_step(Motor_t *motor){
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->PIN_STEP_TYPE, motor->PIN_STEP, motor->pinStepState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6918      	ldr	r0, [r3, #16]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	8919      	ldrh	r1, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	f002 ff19 	bl	80043ec <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <motor_dir>:

void motor_dir(Motor_t *motor){
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->PIN_DIR_TYPE, motor->PIN_DIR, motor->pinDirState);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6958      	ldr	r0, [r3, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	8959      	ldrh	r1, [r3, #10]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	f002 ff07 	bl	80043ec <HAL_GPIO_WritePin>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <motor_en>:

void motor_en(GPIO_PinState state){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, state);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	461a      	mov	r2, r3
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f002 fef6 	bl	80043ec <HAL_GPIO_WritePin>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <motor_micro_step>:

void motor_micro_step(GPIO_PinState MS1state, GPIO_PinState MS2state){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	71fb      	strb	r3, [r7, #7]
 8001614:	4613      	mov	r3, r2
 8001616:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, MS1state);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	461a      	mov	r2, r3
 800161c:	2102      	movs	r1, #2
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <motor_micro_step+0x30>)
 8001620:	f002 fee4 	bl	80043ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, MS2state);
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	461a      	mov	r2, r3
 8001628:	2101      	movs	r1, #1
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <motor_micro_step+0x30>)
 800162c:	f002 fede 	bl	80043ec <HAL_GPIO_WritePin>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	48001400 	.word	0x48001400

0800163c <servo3Start>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim6;
extern ADC_HandleTypeDef hadc1;


void servo3Start() {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001640:	210c      	movs	r1, #12
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <servo3Start+0x10>)
 8001644:	f004 fd7c 	bl	8006140 <HAL_TIM_PWM_Start>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200023a8 	.word	0x200023a8

08001650 <servo3Stop>:
void servo3Stop() {
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001654:	210c      	movs	r1, #12
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <servo3Stop+0x10>)
 8001658:	f004 fe5e 	bl	8006318 <HAL_TIM_PWM_Stop>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200023a8 	.word	0x200023a8
 8001664:	00000000 	.word	0x00000000

08001668 <deplacement_servo_resistance>:
	servo3Start();
	attendre(2000);
	servo3Stop();
	return 0;
}
uint8_t deplacement_servo_resistance(int angle) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]


	TIM3-> CCR4=ANGLE_RESISTANCE_REFERENCE+angle*PAS_SERVO_RESISTANCE;
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7fe fefb 	bl	800046c <__aeabi_i2d>
 8001676:	a314      	add	r3, pc, #80	; (adr r3, 80016c8 <deplacement_servo_resistance+0x60>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ff60 	bl	8000540 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <deplacement_servo_resistance+0x58>)
 800168e:	f7fe fda1 	bl	80001d4 <__adddf3>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4c0b      	ldr	r4, [pc, #44]	; (80016c4 <deplacement_servo_resistance+0x5c>)
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff f962 	bl	8000964 <__aeabi_d2uiz>
 80016a0:	4603      	mov	r3, r0
 80016a2:	6423      	str	r3, [r4, #64]	; 0x40
	servo3Start();
 80016a4:	f7ff ffca 	bl	800163c <servo3Start>
	attendre(TEMPS_ACTION_RESISTANCE);
 80016a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016ac:	f000 f8b2 	bl	8001814 <attendre>
	servo3Stop();
 80016b0:	f7ff ffce 	bl	8001650 <servo3Stop>
	return 1;
 80016b4:	2301      	movs	r3, #1
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	40418000 	.word	0x40418000
 80016c4:	40000400 	.word	0x40000400
 80016c8:	d70a3d71 	.word	0xd70a3d71
 80016cc:	3fdd70a3 	.word	0x3fdd70a3

080016d0 <test_resistance>:


RESISTANCE_VALEUR test_resistance() {
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0

	deplacement_servo_resistance(90);
 80016d6:	205a      	movs	r0, #90	; 0x5a
 80016d8:	f7ff ffc6 	bl	8001668 <deplacement_servo_resistance>

	HAL_ADC_Start(&hadc1); // definit les port et les informations dont STM à besoin
 80016dc:	4846      	ldr	r0, [pc, #280]	; (80017f8 <test_resistance+0x128>)
 80016de:	f000 fdff 	bl	80022e0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 300);
 80016e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80016e6:	4844      	ldr	r0, [pc, #272]	; (80017f8 <test_resistance+0x128>)
 80016e8:	f000 feb0 	bl	800244c <HAL_ADC_PollForConversion>

	float raw = HAL_ADC_GetValue(&hadc1); //récupère la valeur en bit, valeur comprise entre 0 et 4096
 80016ec:	4842      	ldr	r0, [pc, #264]	; (80017f8 <test_resistance+0x128>)
 80016ee:	f000 ff7b 	bl	80025e8 <HAL_ADC_GetValue>
 80016f2:	ee07 0a90 	vmov	s15, r0
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	edc7 7a03 	vstr	s15, [r7, #12]
	float vin = raw*(3.3/4096); //passe la valeur récupéré précédemment en  tension
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7fe fec6 	bl	8000490 <__aeabi_f2d>
 8001704:	a338      	add	r3, pc, #224	; (adr r3, 80017e8 <test_resistance+0x118>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe ff19 	bl	8000540 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f945 	bl	80009a4 <__aeabi_d2f>
 800171a:	4603      	mov	r3, r0
 800171c:	60bb      	str	r3, [r7, #8]
	float resistance_a_tester = vin*RESISTANCE_REF/(RESISTANCE_MAX-vin); // calcul la valeur de la résistance testée grâce à un pont diviseur de tension
 800171e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001722:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80017fc <test_resistance+0x12c>
 8001726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172a:	ee17 0a90 	vmov	r0, s15
 800172e:	f7fe feaf 	bl	8000490 <__aeabi_f2d>
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f7fe feaa 	bl	8000490 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	a12b      	add	r1, pc, #172	; (adr r1, 80017f0 <test_resistance+0x120>)
 8001742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001746:	f7fe fd43 	bl	80001d0 <__aeabi_dsub>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7ff f81f 	bl	8000794 <__aeabi_ddiv>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f921 	bl	80009a4 <__aeabi_d2f>
 8001762:	4603      	mov	r3, r0
 8001764:	607b      	str	r3, [r7, #4]

	if (resistance_a_tester > 300 && resistance_a_tester < 640){   // en fonction de la valeur obtenue, renvoie différente valeur
 8001766:	edd7 7a01 	vldr	s15, [r7, #4]
 800176a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001800 <test_resistance+0x130>
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	dd0a      	ble.n	800178e <test_resistance+0xbe>
 8001778:	edd7 7a01 	vldr	s15, [r7, #4]
 800177c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001804 <test_resistance+0x134>
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d501      	bpl.n	800178e <test_resistance+0xbe>
		return JAUNE;
 800178a:	2300      	movs	r3, #0
 800178c:	e028      	b.n	80017e0 <test_resistance+0x110>
	}
	else if (resistance_a_tester > 640 && resistance_a_tester < 1360) {
 800178e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001792:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001804 <test_resistance+0x134>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	dd0a      	ble.n	80017b6 <test_resistance+0xe6>
 80017a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001808 <test_resistance+0x138>
 80017a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d501      	bpl.n	80017b6 <test_resistance+0xe6>
		return VIOLET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e014      	b.n	80017e0 <test_resistance+0x110>
	}
	else if (resistance_a_tester >3000 && resistance_a_tester < 6400){
 80017b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800180c <test_resistance+0x13c>
 80017be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	dd0a      	ble.n	80017de <test_resistance+0x10e>
 80017c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017cc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001810 <test_resistance+0x140>
 80017d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d501      	bpl.n	80017de <test_resistance+0x10e>
		return INTERDIT;
 80017da:	2302      	movs	r3, #2
 80017dc:	e000      	b.n	80017e0 <test_resistance+0x110>
	}
	else {
		return ERREUR;
 80017de:	2303      	movs	r3, #3
	}

}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	66666666 	.word	0x66666666
 80017ec:	3f4a6666 	.word	0x3f4a6666
 80017f0:	66666666 	.word	0x66666666
 80017f4:	400a6666 	.word	0x400a6666
 80017f8:	200022e4 	.word	0x200022e4
 80017fc:	447a0000 	.word	0x447a0000
 8001800:	43960000 	.word	0x43960000
 8001804:	44200000 	.word	0x44200000
 8001808:	44aa0000 	.word	0x44aa0000
 800180c:	453b8000 	.word	0x453b8000
 8001810:	45c80000 	.word	0x45c80000

08001814 <attendre>:


void attendre(int temps){ //temps en ms durant lequel la commande reste active
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim6);
 800181c:	480a      	ldr	r0, [pc, #40]	; (8001848 <attendre+0x34>)
 800181e:	f004 f99f 	bl	8005b60 <HAL_TIM_Base_Start>
	uint32_t start = __HAL_TIM_GET_COUNTER(&htim6);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <attendre+0x34>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	60fb      	str	r3, [r7, #12]
	//uint32_t start=HAL_GetTick();

	while((__HAL_TIM_GET_COUNTER(&htim6)-start)<temps) {
 800182a:	bf00      	nop
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <attendre+0x34>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad2      	subs	r2, r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	d3f7      	bcc.n	800182c <attendre+0x18>
	//	while((HAL_GetTick()-start)<temps) {
		}
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200023f4 	.word	0x200023f4

0800184c <aimant_off>:

int aimant_off() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(aimant_GPIO_Port, aimant_Pin, RESET); //modifie la valeur du pin a 0 pour activer l'aimant
 8001850:	2200      	movs	r2, #0
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <aimant_off+0x14>)
 8001856:	f002 fdc9 	bl	80043ec <HAL_GPIO_WritePin>
	return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}
 8001860:	48000400 	.word	0x48000400

08001864 <aimant_on>:

int aimant_on() {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(aimant_GPIO_Port, aimant_Pin, SET);  // modifie la valeur du pin a 1 pour desactiver l'aimant
 8001868:	2201      	movs	r2, #1
 800186a:	2140      	movs	r1, #64	; 0x40
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <aimant_on+0x14>)
 800186e:	f002 fdbd 	bl	80043ec <HAL_GPIO_WritePin>
	return 0;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	48000400 	.word	0x48000400

0800187c <aimant>:

uint8_t aimant(bool ordre) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	if (ordre==1) {
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <aimant+0x18>
		aimant_on();
 800188c:	f7ff ffea 	bl	8001864 <aimant_on>
		return 1;
 8001890:	2301      	movs	r3, #1
 8001892:	e00a      	b.n	80018aa <aimant+0x2e>
	}
	else if (ordre==0) {
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <aimant+0x2c>
		aimant_off();
 80018a0:	f7ff ffd4 	bl	800184c <aimant_off>
		return 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <aimant+0x2e>
	}
	else {
		return 3;
 80018a8:	2303      	movs	r3, #3
	}
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_MspInit+0x44>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_MspInit+0x44>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_MspInit+0x44>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_MspInit+0x44>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_MspInit+0x44>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_MspInit+0x44>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800191c:	d123      	bne.n	8001966 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_ADC_MspInit+0x74>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_ADC_MspInit+0x74>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_ADC_MspInit+0x74>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_ADC_MspInit+0x74>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_ADC_MspInit+0x74>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6153      	str	r3, [r2, #20]
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_ADC_MspInit+0x74>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800194e:	2301      	movs	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001952:	2303      	movs	r3, #3
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <HAL_ADC_MspInit+0x78>)
 8001962:	f002 fbd1 	bl	8004108 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400

08001978 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <HAL_CAN_MspInit+0xc0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d149      	bne.n	8001a2e <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_CAN_MspInit+0xc4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <HAL_CAN_MspInit+0xc4>)
 80019a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_CAN_MspInit+0xc4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_CAN_MspInit+0xc4>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <HAL_CAN_MspInit+0xc4>)
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	6153      	str	r3, [r2, #20]
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_CAN_MspInit+0xc4>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80019dc:	2309      	movs	r3, #9
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f002 fb8d 	bl	8004108 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	2013      	movs	r0, #19
 80019f4:	f002 f97d 	bl	8003cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80019f8:	2013      	movs	r0, #19
 80019fa:	f002 f996 	bl	8003d2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2014      	movs	r0, #20
 8001a04:	f002 f975 	bl	8003cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001a08:	2014      	movs	r0, #20
 8001a0a:	f002 f98e 	bl	8003d2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	2015      	movs	r0, #21
 8001a14:	f002 f96d 	bl	8003cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001a18:	2015      	movs	r0, #21
 8001a1a:	f002 f986 	bl	8003d2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2016      	movs	r0, #22
 8001a24:	f002 f965 	bl	8003cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8001a28:	2016      	movs	r0, #22
 8001a2a:	f002 f97e 	bl	8003d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	; 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40006400 	.word	0x40006400
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a50:	d13c      	bne.n	8001acc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001a6c:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <HAL_TIM_Base_MspInit+0xe4>)
 8001a6e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001a72:	2210      	movs	r2, #16
 8001a74:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a88:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a90:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8001a9e:	4820      	ldr	r0, [pc, #128]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001aa0:	f002 f95d 	bl	8003d5e <HAL_DMA_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001aaa:	f7ff fc83 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001ab2:	621a      	str	r2, [r3, #32]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_TIM_Base_MspInit+0xe0>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201c      	movs	r0, #28
 8001ac0:	f002 f917 	bl	8003cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac4:	201c      	movs	r0, #28
 8001ac6:	f002 f930 	bl	8003d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001aca:	e022      	b.n	8001b12 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_TIM_Base_MspInit+0xe8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10c      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
}
 8001aee:	e010      	b.n	8001b12 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM6)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_TIM_Base_MspInit+0xec>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10b      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001b00:	f043 0310 	orr.w	r3, r3, #16
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_TIM_Base_MspInit+0xdc>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	20002440 	.word	0x20002440
 8001b24:	4002001c 	.word	0x4002001c
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40001000 	.word	0x40001000

08001b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b50:	d11d      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_TIM_MspPostInit+0xa8>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_TIM_MspPostInit+0xa8>)
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	6153      	str	r3, [r2, #20]
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_TIM_MspPostInit+0xa8>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f002 fabe 	bl	8004108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b8c:	e020      	b.n	8001bd0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d11b      	bne.n	8001bd0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_TIM_MspPostInit+0xa8>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_TIM_MspPostInit+0xa8>)
 8001b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba2:	6153      	str	r3, [r2, #20]
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_TIM_MspPostInit+0xa8>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_TIM_MspPostInit+0xb0>)
 8001bcc:	f002 fa9c 	bl	8004108 <HAL_GPIO_Init>
}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	; 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	48000400 	.word	0x48000400

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f9a4 	bl	8001f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA1_Channel2_IRQHandler+0x10>)
 8001c3e:	f002 f972 	bl	8003f26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20002440 	.word	0x20002440

08001c4c <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <CAN_TX_IRQHandler+0x10>)
 8001c52:	f001 fd43 	bl	80036dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20002334 	.word	0x20002334

08001c60 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <CAN_RX0_IRQHandler+0x10>)
 8001c66:	f001 fd39 	bl	80036dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20002334 	.word	0x20002334

08001c74 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <CAN_RX1_IRQHandler+0x10>)
 8001c7a:	f001 fd2f 	bl	80036dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20002334 	.word	0x20002334

08001c88 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <CAN_SCE_IRQHandler+0x10>)
 8001c8e:	f001 fd25 	bl	80036dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20002334 	.word	0x20002334

08001c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <TIM2_IRQHandler+0x10>)
 8001ca2:	f004 fbc7 	bl	8006434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000235c 	.word	0x2000235c

08001cb0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <get_fin>:
uint32_t stepsLeft = 0;
Deplacement_State_t deplacementState = ARRET;
Position_t position = AIMANT;
Position_t nextPosition;

bool get_fin(void){
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
    return fin;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <get_fin+0x14>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200022b4 	.word	0x200022b4

08001cec <set_fin>:

void set_fin(bool f){
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
    fin = f;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <set_fin+0x1c>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	7013      	strb	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	200022b4 	.word	0x200022b4

08001d0c <get_length>:

uint32_t get_length(void){
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	return length;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <get_length+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200022b8 	.word	0x200022b8

08001d24 <get_arr>:

void set_length(uint32_t l){
	length = l;
}

uint32_t* get_arr(void){
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	return arr;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <get_arr+0x10>)
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	2000002c 	.word	0x2000002c

08001d38 <get_r_arr>:

uint32_t* get_r_arr(void){
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
	return rArr;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <get_r_arr+0x10>)
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	20001170 	.word	0x20001170

08001d4c <get_deplacement_state>:

uint32_t get_tim_arr(void){
	return htim1.Instance->ARR;
}

Deplacement_State_t get_deplacement_state(void){
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
	return deplacementState;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <get_deplacement_state+0x14>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	200024bc 	.word	0x200024bc

08001d64 <set_deplacement_state>:

void set_deplacement_state(Deplacement_State_t state){
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	deplacementState = state;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <set_deplacement_state+0x1c>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	7013      	strb	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	200024bc 	.word	0x200024bc

08001d84 <get_position>:

Position_t get_position(void){
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
	return position;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <get_position+0x14>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200022bc 	.word	0x200022bc

08001d9c <set_position>:

void set_position(Deplacement_State_t pos){
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	position = pos;
 8001da6:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <set_position+0x1c>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	7013      	strb	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	200022bc 	.word	0x200022bc

08001dbc <get_next_position>:

Position_t get_next_position(void){
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
	return nextPosition;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <get_next_position+0x14>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200024bd 	.word	0x200024bd

08001dd4 <set_next_position>:
void set_next_position(Deplacement_State_t pos){
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	nextPosition = pos;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <set_next_position+0x1c>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	7013      	strb	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	200024bd 	.word	0x200024bd

08001df4 <get_target>:

uint32_t get_target(void){
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
	return target;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <get_target+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	200024b0 	.word	0x200024b0

08001e0c <set_target>:

void set_target(uint32_t t){
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	target = t;
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <set_target+0x1c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200024b0 	.word	0x200024b0

08001e2c <reset_steps>:

void reset_steps(void){
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
	steps = 0;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <reset_steps+0x14>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	200024b4 	.word	0x200024b4

08001e44 <count_steps>:

void count_steps(void){
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	steps++;
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <count_steps+0x18>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <count_steps+0x18>)
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	200024b4 	.word	0x200024b4

08001e60 <get_steps>:

uint32_t get_steps(void){
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return steps;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <get_steps+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200024b4 	.word	0x200024b4

08001e78 <get_steps_left>:

uint32_t get_steps_left(void){
 8001e78:	b598      	push	{r3, r4, r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	stepsLeft = get_target() - get_steps();
 8001e7c:	f7ff ffba 	bl	8001df4 <get_target>
 8001e80:	4604      	mov	r4, r0
 8001e82:	f7ff ffed 	bl	8001e60 <get_steps>
 8001e86:	4603      	mov	r3, r0
 8001e88:	1ae3      	subs	r3, r4, r3
 8001e8a:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <get_steps_left+0x20>)
 8001e8c:	6013      	str	r3, [r2, #0]
	return stepsLeft;
 8001e8e:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <get_steps_left+0x20>)
 8001e90:	681b      	ldr	r3, [r3, #0]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd98      	pop	{r3, r4, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200024b8 	.word	0x200024b8

08001e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ea2:	490e      	ldr	r1, [pc, #56]	; (8001edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <LoopForever+0xe>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ee8 <LoopForever+0x16>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ec6:	f7ff fef3 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eca:	f005 fac5 	bl	8007458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ece:	f7fe ff83 	bl	8000dd8 <main>

08001ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ed2:	e7fe      	b.n	8001ed2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ed4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	200022c8 	.word	0x200022c8
  ldr r2, =_sidata
 8001ee0:	08007500 	.word	0x08007500
  ldr r2, =_sbss
 8001ee4:	200022c8 	.word	0x200022c8
  ldr r4, =_ebss
 8001ee8:	200024c4 	.word	0x200024c4

08001eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC1_2_IRQHandler>
	...

08001ef0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_Init+0x28>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_Init+0x28>)
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f001 feeb 	bl	8003cdc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f808 	bl	8001f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f0c:	f7ff fcd2 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_InitTick+0x54>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 ff03 	bl	8003d46 <HAL_SYSTICK_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00e      	b.n	8001f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0f      	cmp	r3, #15
 8001f4e:	d80a      	bhi.n	8001f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f50:	2200      	movs	r2, #0
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f58:	f001 fecb 	bl	8003cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f5c:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <HAL_InitTick+0x5c>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000028 	.word	0x20000028
 8001f74:	200022c4 	.word	0x200022c4
 8001f78:	200022c0 	.word	0x200022c0

08001f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_IncTick+0x20>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x24>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_IncTick+0x24>)
 8001f8e:	6013      	str	r3, [r2, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200022c4 	.word	0x200022c4
 8001fa0:	200024c0 	.word	0x200024c0

08001fa4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_GetTick+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200024c0 	.word	0x200024c0

08001fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09a      	sub	sp, #104	; 0x68
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e172      	b.n	80022c2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d176      	bne.n	80020dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d152      	bne.n	800209c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fc73 	bl	80018fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d13b      	bne.n	800209c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fed7 	bl	8002dd8 <ADC_Disable>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d12f      	bne.n	800209c <HAL_ADC_Init+0xe0>
 800203c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002040:	2b00      	cmp	r3, #0
 8002042:	d12b      	bne.n	800209c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800204c:	f023 0302 	bic.w	r3, r3, #2
 8002050:	f043 0202 	orr.w	r2, r3, #2
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002066:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002076:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002078:	4b94      	ldr	r3, [pc, #592]	; (80022cc <HAL_ADC_Init+0x310>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a94      	ldr	r2, [pc, #592]	; (80022d0 <HAL_ADC_Init+0x314>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9a      	lsrs	r2, r3, #18
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800208e:	e002      	b.n	8002096 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3b01      	subs	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b8:	d110      	bne.n	80020dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f023 0312 	bic.w	r3, r3, #18
 80020c2:	f043 0210 	orr.w	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 80df 	bne.w	80022a8 <HAL_ADC_Init+0x2ec>
 80020ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 80da 	bne.w	80022a8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 80d2 	bne.w	80022a8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800210c:	f043 0202 	orr.w	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_ADC_Init+0x318>)
 8002116:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002120:	d102      	bne.n	8002128 <HAL_ADC_Init+0x16c>
 8002122:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_ADC_Init+0x31c>)
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e002      	b.n	800212e <HAL_ADC_Init+0x172>
 8002128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800212c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_ADC_Init+0x192>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADC_Init+0x192>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_ADC_Init+0x194>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11c      	bne.n	800218e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002154:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002156:	2b00      	cmp	r3, #0
 8002158:	d010      	beq.n	800217c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_ADC_Init+0x1ba>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Init+0x1ba>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_ADC_Init+0x1bc>
 8002176:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002178:	2b00      	cmp	r3, #0
 800217a:	d108      	bne.n	800218e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800217c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	431a      	orrs	r2, r3
 800218a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7e5b      	ldrb	r3, [r3, #25]
 8002192:	035b      	lsls	r3, r3, #13
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002198:	2a01      	cmp	r2, #1
 800219a:	d002      	beq.n	80021a2 <HAL_ADC_Init+0x1e6>
 800219c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_Init+0x1e8>
 80021a2:	2200      	movs	r2, #0
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021b4:	4313      	orrs	r3, r2
 80021b6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d11b      	bne.n	80021fa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7e5b      	ldrb	r3, [r3, #25]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	3b01      	subs	r3, #1
 80021d0:	045a      	lsls	r2, r3, #17
 80021d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	663b      	str	r3, [r7, #96]	; 0x60
 80021dc:	e00d      	b.n	80021fa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80021e6:	f043 0220 	orr.w	r2, r3, #32
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d007      	beq.n	8002212 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	4313      	orrs	r3, r2
 800220c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800220e:	4313      	orrs	r3, r2
 8002210:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b00      	cmp	r3, #0
 800221e:	d114      	bne.n	800224a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800222e:	f023 0302 	bic.w	r3, r3, #2
 8002232:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e1b      	ldrb	r3, [r3, #24]
 8002238:	039a      	lsls	r2, r3, #14
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4313      	orrs	r3, r2
 8002244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002246:	4313      	orrs	r3, r2
 8002248:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <HAL_ADC_Init+0x320>)
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800225a:	430b      	orrs	r3, r1
 800225c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10c      	bne.n	8002280 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f023 010f 	bic.w	r1, r3, #15
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
 800227e:	e007      	b.n	8002290 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 020f 	bic.w	r2, r2, #15
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
 80022a6:	e00a      	b.n	80022be <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f023 0312 	bic.w	r3, r3, #18
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80022be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3768      	adds	r7, #104	; 0x68
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000028 	.word	0x20000028
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	50000300 	.word	0x50000300
 80022d8:	50000100 	.word	0x50000100
 80022dc:	fff0c007 	.word	0xfff0c007

080022e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 809c 	bne.w	8002434 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_Start+0x2a>
 8002306:	2302      	movs	r3, #2
 8002308:	e097      	b.n	800243a <HAL_ADC_Start+0x15a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fcfc 	bl	8002d10 <ADC_Enable>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8083 	bne.w	800242a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_ADC_Start+0x164>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_ADC_Start+0x6e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800234c:	d115      	bne.n	800237a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d027      	beq.n	80023b8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002370:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002378:	e01e      	b.n	80023b8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238e:	d004      	beq.n	800239a <HAL_ADC_Start+0xba>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <HAL_ADC_Start+0x168>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_ADC_Start+0xd8>
 800239a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c4:	d106      	bne.n	80023d4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f023 0206 	bic.w	r2, r3, #6
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
 80023d2:	e002      	b.n	80023da <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	221c      	movs	r2, #28
 80023e8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_ADC_Start+0x164>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d010      	beq.n	8002418 <HAL_ADC_Start+0x138>
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_ADC_Start+0x164>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d00a      	beq.n	8002418 <HAL_ADC_Start+0x138>
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_ADC_Start+0x164>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2b09      	cmp	r3, #9
 800240c:	d004      	beq.n	8002418 <HAL_ADC_Start+0x138>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002416:	d10f      	bne.n	8002438 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0204 	orr.w	r2, r2, #4
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e006      	b.n	8002438 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002432:	e001      	b.n	8002438 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002434:	2302      	movs	r3, #2
 8002436:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	50000300 	.word	0x50000300
 8002448:	50000100 	.word	0x50000100

0800244c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b08      	cmp	r3, #8
 8002460:	d102      	bne.n	8002468 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002462:	2308      	movs	r3, #8
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e02e      	b.n	80024c6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002468:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <HAL_ADC_PollForConversion+0x198>)
 800246a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2b00      	cmp	r3, #0
 8002476:	d112      	bne.n	800249e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d11d      	bne.n	80024c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f043 0220 	orr.w	r2, r3, #32
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e09d      	b.n	80025da <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f043 0220 	orr.w	r2, r3, #32
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e08b      	b.n	80025da <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80024c2:	230c      	movs	r3, #12
 80024c4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_ADC_PollForConversion+0x198>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_ADC_PollForConversion+0x90>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024da:	d104      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	e003      	b.n	80024ee <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80024e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80024ee:	f7ff fd59 	bl	8001fa4 <HAL_GetTick>
 80024f2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024f4:	e021      	b.n	800253a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024fc:	d01d      	beq.n	800253a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_ADC_PollForConversion+0xc8>
 8002504:	f7ff fd4e 	bl	8001fa4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d212      	bcs.n	800253a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e04f      	b.n	80025da <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0d6      	beq.n	80024f6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800255e:	2b00      	cmp	r3, #0
 8002560:	d131      	bne.n	80025c6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002568:	2b00      	cmp	r3, #0
 800256a:	d12c      	bne.n	80025c6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d125      	bne.n	80025c6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d112      	bne.n	80025ae <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d112      	bne.n	80025c6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f043 0201 	orr.w	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
 80025ac:	e00b      	b.n	80025c6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	50000300 	.word	0x50000300

080025e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002604:	b480      	push	{r7}
 8002606:	b09b      	sub	sp, #108	; 0x6c
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x22>
 8002622:	2302      	movs	r3, #2
 8002624:	e2a4      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x56c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 8288 	bne.w	8002b4e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d81c      	bhi.n	8002680 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	461a      	mov	r2, r3
 800265a:	231f      	movs	r3, #31
 800265c:	4093      	lsls	r3, r2
 800265e:	43db      	mvns	r3, r3
 8002660:	4019      	ands	r1, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa00 f203 	lsl.w	r2, r0, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
 800267e:	e063      	b.n	8002748 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d81e      	bhi.n	80026c6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	3b1e      	subs	r3, #30
 800269c:	221f      	movs	r2, #31
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4019      	ands	r1, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	3b1e      	subs	r3, #30
 80026b8:	fa00 f203 	lsl.w	r2, r0, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
 80026c4:	e040      	b.n	8002748 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b0e      	cmp	r3, #14
 80026cc:	d81e      	bhi.n	800270c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	3b3c      	subs	r3, #60	; 0x3c
 80026e2:	221f      	movs	r2, #31
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4019      	ands	r1, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	3b3c      	subs	r3, #60	; 0x3c
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
 800270a:	e01d      	b.n	8002748 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	3b5a      	subs	r3, #90	; 0x5a
 8002720:	221f      	movs	r2, #31
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	4019      	ands	r1, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	3b5a      	subs	r3, #90	; 0x5a
 800273c:	fa00 f203 	lsl.w	r2, r0, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80e5 	bne.w	8002922 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b09      	cmp	r3, #9
 800275e:	d91c      	bls.n	800279a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6999      	ldr	r1, [r3, #24]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	3b1e      	subs	r3, #30
 8002772:	2207      	movs	r2, #7
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	4019      	ands	r1, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6898      	ldr	r0, [r3, #8]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	3b1e      	subs	r3, #30
 800278c:	fa00 f203 	lsl.w	r2, r0, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	619a      	str	r2, [r3, #24]
 8002798:	e019      	b.n	80027ce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6959      	ldr	r1, [r3, #20]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	2207      	movs	r2, #7
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	4019      	ands	r1, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6898      	ldr	r0, [r3, #8]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	fa00 f203 	lsl.w	r2, r0, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d84f      	bhi.n	8002890 <HAL_ADC_ConfigChannel+0x28c>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <HAL_ADC_ConfigChannel+0x1f4>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	08002809 	.word	0x08002809
 80027fc:	0800282b 	.word	0x0800282b
 8002800:	0800284d 	.word	0x0800284d
 8002804:	0800286f 	.word	0x0800286f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800280e:	4b94      	ldr	r3, [pc, #592]	; (8002a60 <HAL_ADC_ConfigChannel+0x45c>)
 8002810:	4013      	ands	r3, r2
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	0691      	lsls	r1, r2, #26
 8002818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800281a:	430a      	orrs	r2, r1
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002826:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002828:	e07e      	b.n	8002928 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002830:	4b8b      	ldr	r3, [pc, #556]	; (8002a60 <HAL_ADC_ConfigChannel+0x45c>)
 8002832:	4013      	ands	r3, r2
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	0691      	lsls	r1, r2, #26
 800283a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800283c:	430a      	orrs	r2, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002848:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800284a:	e06d      	b.n	8002928 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002852:	4b83      	ldr	r3, [pc, #524]	; (8002a60 <HAL_ADC_ConfigChannel+0x45c>)
 8002854:	4013      	ands	r3, r2
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	0691      	lsls	r1, r2, #26
 800285c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800285e:	430a      	orrs	r2, r1
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800286a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800286c:	e05c      	b.n	8002928 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002874:	4b7a      	ldr	r3, [pc, #488]	; (8002a60 <HAL_ADC_ConfigChannel+0x45c>)
 8002876:	4013      	ands	r3, r2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	0691      	lsls	r1, r2, #26
 800287e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002880:	430a      	orrs	r2, r1
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800288c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800288e:	e04b      	b.n	8002928 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	069b      	lsls	r3, r3, #26
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d107      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028b2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	069b      	lsls	r3, r3, #26
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028d6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	069b      	lsls	r3, r3, #26
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028fa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	429a      	cmp	r2, r3
 800290e:	d10a      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800291e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002920:	e001      	b.n	8002926 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002926:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d108      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x344>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x344>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_ADC_ConfigChannel+0x346>
 8002948:	2300      	movs	r3, #0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 810a 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d00f      	beq.n	8002978 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	400a      	ands	r2, r1
 8002972:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002976:	e049      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	409a      	lsls	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b09      	cmp	r3, #9
 8002998:	d91c      	bls.n	80029d4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6999      	ldr	r1, [r3, #24]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	3b1b      	subs	r3, #27
 80029ac:	2207      	movs	r2, #7
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4019      	ands	r1, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6898      	ldr	r0, [r3, #8]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	3b1b      	subs	r3, #27
 80029c6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	619a      	str	r2, [r3, #24]
 80029d2:	e01b      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6959      	ldr	r1, [r3, #20]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	2207      	movs	r2, #7
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	4019      	ands	r1, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6898      	ldr	r0, [r3, #8]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	fa00 f203 	lsl.w	r2, r0, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_ADC_ConfigChannel+0x460>)
 8002a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d105      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a28:	2b11      	cmp	r3, #17
 8002a2a:	d105      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a3c:	2b12      	cmp	r3, #18
 8002a3e:	f040 8091 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 808a 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a58:	d108      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x468>
 8002a5a:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_ADC_ConfigChannel+0x464>)
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e008      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x46e>
 8002a60:	83fff000 	.word	0x83fff000
 8002a64:	50000300 	.word	0x50000300
 8002a68:	50000100 	.word	0x50000100
 8002a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a70:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d108      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x48e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x48e>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x490>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d150      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d010      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x4b6>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x4b6>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_ADC_ConfigChannel+0x4b8>
 8002aba:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d13c      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d11d      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x500>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad0:	d118      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002adc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ade:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_ADC_ConfigChannel+0x578>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <HAL_ADC_ConfigChannel+0x57c>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	0c9a      	lsrs	r2, r3, #18
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002af4:	e002      	b.n	8002afc <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f9      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b02:	e02e      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b11      	cmp	r3, #17
 8002b0a:	d10b      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x520>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b14:	d106      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b22:	e01e      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b12      	cmp	r3, #18
 8002b2a:	d11a      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b36:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b38:	e013      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b4c:	e00a      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b60:	e000      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b62:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	376c      	adds	r7, #108	; 0x6c
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	20000028 	.word	0x20000028
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b099      	sub	sp, #100	; 0x64
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b9c:	d102      	bne.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002b9e:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	e002      	b.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002ba4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ba8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0a2      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e09b      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d17f      	bne.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d179      	bne.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be4:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002be6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d040      	beq.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c02:	035b      	lsls	r3, r3, #13
 8002c04:	430b      	orrs	r3, r1
 8002c06:	431a      	orrs	r2, r3
 8002c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c0a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d15c      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002c4e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d14b      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c5c:	f023 030f 	bic.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	6811      	ldr	r1, [r2, #0]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	6892      	ldr	r2, [r2, #8]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c70:	e03c      	b.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c7c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d123      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d107      	bne.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002cc0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d112      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cce:	f023 030f 	bic.w	r3, r3, #15
 8002cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cd4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd6:	e009      	b.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cea:	e000      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cec:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3764      	adds	r7, #100	; 0x64
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	50000100 	.word	0x50000100
 8002d0c:	50000300 	.word	0x50000300

08002d10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <ADC_Enable+0x2c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <ADC_Enable+0x2c>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <ADC_Enable+0x2e>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d143      	bne.n	8002dca <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <ADC_Enable+0xc4>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0210 	orr.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e02f      	b.n	8002dcc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002d7c:	f7ff f912 	bl	8001fa4 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d82:	e01b      	b.n	8002dbc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d84:	f7ff f90e 	bl	8001fa4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d914      	bls.n	8002dbc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d00d      	beq.n	8002dbc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0210 	orr.w	r2, r3, #16
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e007      	b.n	8002dcc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d1dc      	bne.n	8002d84 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	8000003f 	.word	0x8000003f

08002dd8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d108      	bne.n	8002e04 <ADC_Disable+0x2c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <ADC_Disable+0x2c>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <ADC_Disable+0x2e>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d047      	beq.n	8002e9a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030d 	and.w	r3, r3, #13
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10f      	bne.n	8002e38 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0202 	orr.w	r2, r2, #2
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e30:	f7ff f8b8 	bl	8001fa4 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e36:	e029      	b.n	8002e8c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f043 0210 	orr.w	r2, r3, #16
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e023      	b.n	8002e9c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e54:	f7ff f8a6 	bl	8001fa4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d914      	bls.n	8002e8c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10d      	bne.n	8002e8c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f043 0210 	orr.w	r2, r3, #16
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e007      	b.n	8002e9c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d0dc      	beq.n	8002e54 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0ed      	b.n	8003092 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe fd58 	bl	8001978 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed8:	f7ff f864 	bl	8001fa4 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ede:	e012      	b.n	8002f06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ee0:	f7ff f860 	bl	8001fa4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b0a      	cmp	r3, #10
 8002eec:	d90b      	bls.n	8002f06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2205      	movs	r2, #5
 8002efe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0c5      	b.n	8003092 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0e5      	beq.n	8002ee0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0202 	bic.w	r2, r2, #2
 8002f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f24:	f7ff f83e 	bl	8001fa4 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f2a:	e012      	b.n	8002f52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f2c:	f7ff f83a 	bl	8001fa4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b0a      	cmp	r3, #10
 8002f38:	d90b      	bls.n	8002f52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2205      	movs	r2, #5
 8002f4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e09f      	b.n	8003092 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e5      	bne.n	8002f2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7e1b      	ldrb	r3, [r3, #24]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d108      	bne.n	8002f7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e007      	b.n	8002f8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7e5b      	ldrb	r3, [r3, #25]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d108      	bne.n	8002fa4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e007      	b.n	8002fb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7e9b      	ldrb	r3, [r3, #26]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d108      	bne.n	8002fce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0220 	orr.w	r2, r2, #32
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e007      	b.n	8002fde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0220 	bic.w	r2, r2, #32
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7edb      	ldrb	r3, [r3, #27]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d108      	bne.n	8002ff8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0210 	bic.w	r2, r2, #16
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e007      	b.n	8003008 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0210 	orr.w	r2, r2, #16
 8003006:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7f1b      	ldrb	r3, [r3, #28]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d108      	bne.n	8003022 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0208 	orr.w	r2, r2, #8
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e007      	b.n	8003032 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0208 	bic.w	r2, r2, #8
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7f5b      	ldrb	r3, [r3, #29]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d108      	bne.n	800304c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0204 	orr.w	r2, r2, #4
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e007      	b.n	800305c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	ea42 0103 	orr.w	r1, r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800309a:	b480      	push	{r7}
 800309c:	b087      	sub	sp, #28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d003      	beq.n	80030c0 <HAL_CAN_ConfigFilter+0x26>
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	f040 80aa 	bne.w	8003214 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2201      	movs	r2, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d123      	bne.n	8003142 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	401a      	ands	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800311c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3248      	adds	r2, #72	; 0x48
 8003122:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003136:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	3348      	adds	r3, #72	; 0x48
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d122      	bne.n	8003190 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	431a      	orrs	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800316a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3248      	adds	r2, #72	; 0x48
 8003170:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003184:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	3348      	adds	r3, #72	; 0x48
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	401a      	ands	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031aa:	e007      	b.n	80031bc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80031d6:	e007      	b.n	80031e8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d107      	bne.n	8003200 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003206:	f023 0201 	bic.w	r2, r3, #1
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e006      	b.n	8003222 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d12e      	bne.n	80032a0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800325a:	f7fe fea3 	bl	8001fa4 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003260:	e012      	b.n	8003288 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003262:	f7fe fe9f 	bl	8001fa4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b0a      	cmp	r3, #10
 800326e:	d90b      	bls.n	8003288 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2205      	movs	r2, #5
 8003280:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e012      	b.n	80032ae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e5      	bne.n	8003262 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e006      	b.n	80032ae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b089      	sub	sp, #36	; 0x24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032d4:	7ffb      	ldrb	r3, [r7, #31]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d003      	beq.n	80032e2 <HAL_CAN_AddTxMessage+0x2c>
 80032da:	7ffb      	ldrb	r3, [r7, #31]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	f040 80b8 	bne.w	8003452 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a0 	beq.w	8003442 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	0e1b      	lsrs	r3, r3, #24
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d907      	bls.n	8003322 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e09e      	b.n	8003460 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003322:	2201      	movs	r2, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	6809      	ldr	r1, [r1, #0]
 8003342:	431a      	orrs	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3318      	adds	r3, #24
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	440b      	add	r3, r1
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e00f      	b.n	8003370 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800335a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003360:	68f9      	ldr	r1, [r7, #12]
 8003362:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003364:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3318      	adds	r3, #24
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	440b      	add	r3, r1
 800336e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3318      	adds	r3, #24
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	440b      	add	r3, r1
 8003380:	3304      	adds	r3, #4
 8003382:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	7d1b      	ldrb	r3, [r3, #20]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d111      	bne.n	80033b0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3318      	adds	r3, #24
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	6811      	ldr	r1, [r2, #0]
 80033a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3318      	adds	r3, #24
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	440b      	add	r3, r1
 80033ac:	3304      	adds	r3, #4
 80033ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3307      	adds	r3, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	061a      	lsls	r2, r3, #24
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3306      	adds	r3, #6
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3305      	adds	r3, #5
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	4313      	orrs	r3, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	3204      	adds	r2, #4
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	4610      	mov	r0, r2
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	6811      	ldr	r1, [r2, #0]
 80033d8:	ea43 0200 	orr.w	r2, r3, r0
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	440b      	add	r3, r1
 80033e2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80033e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3303      	adds	r3, #3
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	061a      	lsls	r2, r3, #24
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3302      	adds	r3, #2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3301      	adds	r3, #1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	4313      	orrs	r3, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	7812      	ldrb	r2, [r2, #0]
 8003408:	4610      	mov	r0, r2
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	6811      	ldr	r1, [r2, #0]
 800340e:	ea43 0200 	orr.w	r2, r3, r0
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	440b      	add	r3, r1
 8003418:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800341c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3318      	adds	r3, #24
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	4413      	add	r3, r2
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	6811      	ldr	r1, [r2, #0]
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	3318      	adds	r3, #24
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	440b      	add	r3, r1
 800343c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e00e      	b.n	8003460 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e006      	b.n	8003460 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
  }
}
 8003460:	4618      	mov	r0, r3
 8003462:	3724      	adds	r7, #36	; 0x24
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003480:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d003      	beq.n	8003490 <HAL_CAN_GetRxMessage+0x24>
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b02      	cmp	r3, #2
 800348c:	f040 80f3 	bne.w	8003676 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d116      	bne.n	80034d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0e7      	b.n	8003684 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d107      	bne.n	80034d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0d8      	b.n	8003684 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	331b      	adds	r3, #27
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	4413      	add	r3, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0204 	and.w	r2, r3, #4
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10c      	bne.n	800350a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	331b      	adds	r3, #27
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	4413      	add	r3, r2
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	0d5b      	lsrs	r3, r3, #21
 8003500:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e00b      	b.n	8003522 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	331b      	adds	r3, #27
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	4413      	add	r3, r2
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	08db      	lsrs	r3, r3, #3
 800351a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	331b      	adds	r3, #27
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	4413      	add	r3, r2
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0202 	and.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	331b      	adds	r3, #27
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	331b      	adds	r3, #27
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	b2da      	uxtb	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	331b      	adds	r3, #27
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4413      	add	r3, r2
 8003574:	3304      	adds	r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	b29a      	uxth	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	4413      	add	r3, r2
 80035a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0a1a      	lsrs	r2, r3, #8
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0c1a      	lsrs	r2, r3, #16
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	3302      	adds	r3, #2
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0e1a      	lsrs	r2, r3, #24
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	3303      	adds	r3, #3
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	3304      	adds	r3, #4
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	4413      	add	r3, r2
 8003606:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0a1a      	lsrs	r2, r3, #8
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3305      	adds	r3, #5
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	4413      	add	r3, r2
 8003620:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0c1a      	lsrs	r2, r3, #16
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	3306      	adds	r3, #6
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4413      	add	r3, r2
 800363a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0e1a      	lsrs	r2, r3, #24
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	3307      	adds	r3, #7
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d108      	bne.n	8003662 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0220 	orr.w	r2, r2, #32
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e007      	b.n	8003672 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0220 	orr.w	r2, r2, #32
 8003670:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e006      	b.n	8003684 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d002      	beq.n	80036ae <HAL_CAN_ActivateNotification+0x1e>
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d109      	bne.n	80036c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6959      	ldr	r1, [r3, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e006      	b.n	80036d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
  }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d07c      	beq.n	800381c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f983 	bl	8003a4a <HAL_CAN_TxMailbox0CompleteCallback>
 8003744:	e016      	b.n	8003774 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
 8003758:	e00c      	b.n	8003774 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
 800376c:	e002      	b.n	8003774 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f989 	bl	8003a86 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d024      	beq.n	80037c8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003786:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f963 	bl	8003a5e <HAL_CAN_TxMailbox1CompleteCallback>
 8003798:	e016      	b.n	80037c8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e00c      	b.n	80037c8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	e002      	b.n	80037c8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f969 	bl	8003a9a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d024      	beq.n	800381c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f943 	bl	8003a72 <HAL_CAN_TxMailbox2CompleteCallback>
 80037ec:	e016      	b.n	800381c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	e00c      	b.n	800381c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
 8003814:	e002      	b.n	800381c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f949 	bl	8003aae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003836:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2210      	movs	r2, #16
 800383e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2208      	movs	r2, #8
 800385a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f930 	bl	8003ac2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd f8e2 	bl	8000a44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2210      	movs	r2, #16
 80038a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2208      	movs	r2, #8
 80038be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f912 	bl	8003aea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8f9 	bl	8003ad6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d006      	beq.n	8003906 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2210      	movs	r2, #16
 80038fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f8fc 	bl	8003afe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2208      	movs	r2, #8
 8003920:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8f5 	bl	8003b12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d07b      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d072      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f043 0302 	orr.w	r3, r3, #2
 8003972:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	f043 0304 	orr.w	r3, r3, #4
 800398e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003996:	2b00      	cmp	r3, #0
 8003998:	d043      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d03e      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039aa:	2b60      	cmp	r3, #96	; 0x60
 80039ac:	d02b      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x32a>
 80039ae:	2b60      	cmp	r3, #96	; 0x60
 80039b0:	d82e      	bhi.n	8003a10 <HAL_CAN_IRQHandler+0x334>
 80039b2:	2b50      	cmp	r3, #80	; 0x50
 80039b4:	d022      	beq.n	80039fc <HAL_CAN_IRQHandler+0x320>
 80039b6:	2b50      	cmp	r3, #80	; 0x50
 80039b8:	d82a      	bhi.n	8003a10 <HAL_CAN_IRQHandler+0x334>
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d019      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x316>
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d826      	bhi.n	8003a10 <HAL_CAN_IRQHandler+0x334>
 80039c2:	2b30      	cmp	r3, #48	; 0x30
 80039c4:	d010      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x30c>
 80039c6:	2b30      	cmp	r3, #48	; 0x30
 80039c8:	d822      	bhi.n	8003a10 <HAL_CAN_IRQHandler+0x334>
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d002      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x2f8>
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d005      	beq.n	80039de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039d2:	e01d      	b.n	8003a10 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039dc:	e019      	b.n	8003a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f043 0310 	orr.w	r3, r3, #16
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039e6:	e014      	b.n	8003a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	f043 0320 	orr.w	r3, r3, #32
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039f0:	e00f      	b.n	8003a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039fa:	e00a      	b.n	8003a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a04:	e005      	b.n	8003a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a0e:	e000      	b.n	8003a12 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a10:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a20:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2204      	movs	r2, #4
 8003a28:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f872 	bl	8003b26 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a42:	bf00      	nop
 8003a44:	3728      	adds	r7, #40	; 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <__NVIC_SetPriorityGrouping+0x44>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b6e:	4a04      	ldr	r2, [pc, #16]	; (8003b80 <__NVIC_SetPriorityGrouping+0x44>)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	60d3      	str	r3, [r2, #12]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <__NVIC_GetPriorityGrouping+0x18>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	f003 0307 	and.w	r3, r3, #7
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db0b      	blt.n	8003bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	f003 021f 	and.w	r2, r3, #31
 8003bb8:	4907      	ldr	r1, [pc, #28]	; (8003bd8 <__NVIC_EnableIRQ+0x38>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000e100 	.word	0xe000e100

08003bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	6039      	str	r1, [r7, #0]
 8003be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	db0a      	blt.n	8003c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	490c      	ldr	r1, [pc, #48]	; (8003c28 <__NVIC_SetPriority+0x4c>)
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c04:	e00a      	b.n	8003c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4908      	ldr	r1, [pc, #32]	; (8003c2c <__NVIC_SetPriority+0x50>)
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	3b04      	subs	r3, #4
 8003c14:	0112      	lsls	r2, r2, #4
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	440b      	add	r3, r1
 8003c1a:	761a      	strb	r2, [r3, #24]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000e100 	.word	0xe000e100
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f1c3 0307 	rsb	r3, r3, #7
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	bf28      	it	cs
 8003c4e:	2304      	movcs	r3, #4
 8003c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d902      	bls.n	8003c60 <NVIC_EncodePriority+0x30>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3b03      	subs	r3, #3
 8003c5e:	e000      	b.n	8003c62 <NVIC_EncodePriority+0x32>
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	401a      	ands	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	43d9      	mvns	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	4313      	orrs	r3, r2
         );
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca8:	d301      	bcc.n	8003cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00f      	b.n	8003cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cae:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <SysTick_Config+0x40>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cb6:	210f      	movs	r1, #15
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cbc:	f7ff ff8e 	bl	8003bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <SysTick_Config+0x40>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc6:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <SysTick_Config+0x40>)
 8003cc8:	2207      	movs	r2, #7
 8003cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	e000e010 	.word	0xe000e010

08003cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff29 	bl	8003b3c <__NVIC_SetPriorityGrouping>
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d04:	f7ff ff3e 	bl	8003b84 <__NVIC_GetPriorityGrouping>
 8003d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	6978      	ldr	r0, [r7, #20]
 8003d10:	f7ff ff8e 	bl	8003c30 <NVIC_EncodePriority>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff ff5d 	bl	8003bdc <__NVIC_SetPriority>
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff31 	bl	8003ba0 <__NVIC_EnableIRQ>
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ffa2 	bl	8003c98 <SysTick_Config>
 8003d54:	4603      	mov	r3, r0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e037      	b.n	8003de4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f97e 	bl	80040c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}  
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_DMA_Start_IT+0x20>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e04a      	b.n	8003ea2 <HAL_DMA_Start_IT+0xb6>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d13a      	bne.n	8003e94 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f912 	bl	800406c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 020e 	orr.w	r2, r2, #14
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e00f      	b.n	8003e82 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 020a 	orr.w	r2, r2, #10
 8003e70:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0204 	bic.w	r2, r2, #4
 8003e80:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e005      	b.n	8003ea0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d005      	beq.n	8003ecc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	e027      	b.n	8003f1c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 020e 	bic.w	r2, r2, #14
 8003eda:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
    } 
  }
  return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2204      	movs	r2, #4
 8003f44:	409a      	lsls	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d024      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x72>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01f      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d107      	bne.n	8003f76 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0204 	bic.w	r2, r2, #4
 8003f74:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	2104      	movs	r1, #4
 8003f80:	fa01 f202 	lsl.w	r2, r1, r2
 8003f84:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d06a      	beq.n	8004064 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003f96:	e065      	b.n	8004064 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02c      	beq.n	8004002 <HAL_DMA_IRQHandler+0xdc>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d027      	beq.n	8004002 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 020a 	bic.w	r2, r2, #10
 8003fce:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d035      	beq.n	8004064 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004000:	e030      	b.n	8004064 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2208      	movs	r2, #8
 8004008:	409a      	lsls	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d028      	beq.n	8004064 <HAL_DMA_IRQHandler+0x13e>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d023      	beq.n	8004064 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 020e 	bic.w	r2, r2, #14
 800402a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f202 	lsl.w	r2, r1, r2
 800403a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
    }
  }
}  
 8004062:	e7ff      	b.n	8004064 <HAL_DMA_IRQHandler+0x13e>
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b10      	cmp	r3, #16
 8004098:	d108      	bne.n	80040ac <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040aa:	e007      	b.n	80040bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <DMA_CalcBaseAndBitshift+0x34>)
 80040d8:	4413      	add	r3, r2
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <DMA_CalcBaseAndBitshift+0x38>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a06      	ldr	r2, [pc, #24]	; (8004104 <DMA_CalcBaseAndBitshift+0x3c>)
 80040ec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	bffdfff8 	.word	0xbffdfff8
 8004100:	cccccccd 	.word	0xcccccccd
 8004104:	40020000 	.word	0x40020000

08004108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004116:	e14e      	b.n	80043b6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	2101      	movs	r1, #1
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	4013      	ands	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8140 	beq.w	80043b0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d005      	beq.n	8004148 <HAL_GPIO_Init+0x40>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d130      	bne.n	80041aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	2203      	movs	r2, #3
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800417e:	2201      	movs	r2, #1
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 0201 	and.w	r2, r3, #1
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d017      	beq.n	80041e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d123      	bne.n	800423a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	08da      	lsrs	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3208      	adds	r2, #8
 80041fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	220f      	movs	r2, #15
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4013      	ands	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	08da      	lsrs	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3208      	adds	r2, #8
 8004234:	6939      	ldr	r1, [r7, #16]
 8004236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4013      	ands	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0203 	and.w	r2, r3, #3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 809a 	beq.w	80043b0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427c:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <HAL_GPIO_Init+0x2cc>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <HAL_GPIO_Init+0x2cc>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6193      	str	r3, [r2, #24]
 8004288:	4b52      	ldr	r3, [pc, #328]	; (80043d4 <HAL_GPIO_Init+0x2cc>)
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004294:	4a50      	ldr	r2, [pc, #320]	; (80043d8 <HAL_GPIO_Init+0x2d0>)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	3302      	adds	r3, #2
 800429c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	220f      	movs	r2, #15
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042be:	d013      	beq.n	80042e8 <HAL_GPIO_Init+0x1e0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a46      	ldr	r2, [pc, #280]	; (80043dc <HAL_GPIO_Init+0x2d4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00d      	beq.n	80042e4 <HAL_GPIO_Init+0x1dc>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a45      	ldr	r2, [pc, #276]	; (80043e0 <HAL_GPIO_Init+0x2d8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <HAL_GPIO_Init+0x1d8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a44      	ldr	r2, [pc, #272]	; (80043e4 <HAL_GPIO_Init+0x2dc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_GPIO_Init+0x1d4>
 80042d8:	2303      	movs	r3, #3
 80042da:	e006      	b.n	80042ea <HAL_GPIO_Init+0x1e2>
 80042dc:	2305      	movs	r3, #5
 80042de:	e004      	b.n	80042ea <HAL_GPIO_Init+0x1e2>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e002      	b.n	80042ea <HAL_GPIO_Init+0x1e2>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_GPIO_Init+0x1e2>
 80042e8:	2300      	movs	r3, #0
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	f002 0203 	and.w	r2, r2, #3
 80042f0:	0092      	lsls	r2, r2, #2
 80042f2:	4093      	lsls	r3, r2
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042fa:	4937      	ldr	r1, [pc, #220]	; (80043d8 <HAL_GPIO_Init+0x2d0>)
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	3302      	adds	r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004308:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <HAL_GPIO_Init+0x2e0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	43db      	mvns	r3, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4013      	ands	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800432c:	4a2e      	ldr	r2, [pc, #184]	; (80043e8 <HAL_GPIO_Init+0x2e0>)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004332:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <HAL_GPIO_Init+0x2e0>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004356:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <HAL_GPIO_Init+0x2e0>)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_GPIO_Init+0x2e0>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004380:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_GPIO_Init+0x2e0>)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <HAL_GPIO_Init+0x2e0>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	43db      	mvns	r3, r3
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043aa:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <HAL_GPIO_Init+0x2e0>)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3301      	adds	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f aea9 	bne.w	8004118 <HAL_GPIO_Init+0x10>
  }
}
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40010000 	.word	0x40010000
 80043dc:	48000400 	.word	0x48000400
 80043e0:	48000800 	.word	0x48000800
 80043e4:	48000c00 	.word	0x48000c00
 80043e8:	40010400 	.word	0x40010400

080043ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	807b      	strh	r3, [r7, #2]
 80043f8:	4613      	mov	r3, r2
 80043fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043fc:	787b      	ldrb	r3, [r7, #1]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004408:	e002      	b.n	8004410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800440a:	887a      	ldrh	r2, [r7, #2]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004422:	af00      	add	r7, sp, #0
 8004424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800442c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800442e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f001 b823 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 817d 	beq.w	8004752 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004458:	4bbc      	ldr	r3, [pc, #752]	; (800474c <HAL_RCC_OscConfig+0x330>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b04      	cmp	r3, #4
 8004462:	d00c      	beq.n	800447e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004464:	4bb9      	ldr	r3, [pc, #740]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b08      	cmp	r3, #8
 800446e:	d15c      	bne.n	800452a <HAL_RCC_OscConfig+0x10e>
 8004470:	4bb6      	ldr	r3, [pc, #728]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d155      	bne.n	800452a <HAL_RCC_OscConfig+0x10e>
 800447e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004482:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004492:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d102      	bne.n	80044b0 <HAL_RCC_OscConfig+0x94>
 80044aa:	4ba8      	ldr	r3, [pc, #672]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	e015      	b.n	80044dc <HAL_RCC_OscConfig+0xc0>
 80044b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80044c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80044cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80044d0:	fa93 f3a3 	rbit	r3, r3
 80044d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80044d8:	4b9c      	ldr	r3, [pc, #624]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80044e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80044e8:	fa92 f2a2 	rbit	r2, r2
 80044ec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80044f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f042 0220 	orr.w	r2, r2, #32
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f002 021f 	and.w	r2, r2, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 811f 	beq.w	8004750 <HAL_RCC_OscConfig+0x334>
 8004512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004516:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 8116 	bne.w	8004750 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f000 bfaf 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453a:	d106      	bne.n	800454a <HAL_RCC_OscConfig+0x12e>
 800453c:	4b83      	ldr	r3, [pc, #524]	; (800474c <HAL_RCC_OscConfig+0x330>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a82      	ldr	r2, [pc, #520]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	e036      	b.n	80045b8 <HAL_RCC_OscConfig+0x19c>
 800454a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x158>
 800455a:	4b7c      	ldr	r3, [pc, #496]	; (800474c <HAL_RCC_OscConfig+0x330>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a7b      	ldr	r2, [pc, #492]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b79      	ldr	r3, [pc, #484]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a78      	ldr	r2, [pc, #480]	; (800474c <HAL_RCC_OscConfig+0x330>)
 800456c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e021      	b.n	80045b8 <HAL_RCC_OscConfig+0x19c>
 8004574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004578:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x184>
 8004586:	4b71      	ldr	r3, [pc, #452]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a70      	ldr	r2, [pc, #448]	; (800474c <HAL_RCC_OscConfig+0x330>)
 800458c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b6e      	ldr	r3, [pc, #440]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6d      	ldr	r2, [pc, #436]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_OscConfig+0x19c>
 80045a0:	4b6a      	ldr	r3, [pc, #424]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a69      	ldr	r2, [pc, #420]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80045a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	4b67      	ldr	r3, [pc, #412]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a66      	ldr	r2, [pc, #408]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80045b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045b8:	4b64      	ldr	r3, [pc, #400]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	f023 020f 	bic.w	r2, r3, #15
 80045c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	495f      	ldr	r1, [pc, #380]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d059      	beq.n	8004696 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fd fcdf 	bl	8001fa4 <HAL_GetTick>
 80045e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd fcda 	bl	8001fa4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	; 0x64
 80045fa:	d902      	bls.n	8004602 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	f000 bf43 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>
 8004602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004606:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004616:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d102      	bne.n	8004634 <HAL_RCC_OscConfig+0x218>
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	e015      	b.n	8004660 <HAL_RCC_OscConfig+0x244>
 8004634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004638:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800464c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004650:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800465c:	4b3b      	ldr	r3, [pc, #236]	; (800474c <HAL_RCC_OscConfig+0x330>)
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004664:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004668:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800466c:	fa92 f2a2 	rbit	r2, r2
 8004670:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004674:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004678:	fab2 f282 	clz	r2, r2
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	f002 021f 	and.w	r2, r2, #31
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f202 	lsl.w	r2, r1, r2
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ab      	beq.n	80045ec <HAL_RCC_OscConfig+0x1d0>
 8004694:	e05d      	b.n	8004752 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fd fc85 	bl	8001fa4 <HAL_GetTick>
 800469a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a0:	f7fd fc80 	bl	8001fa4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b64      	cmp	r3, #100	; 0x64
 80046ae:	d902      	bls.n	80046b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	f000 bee9 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>
 80046b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80046ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2cc>
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_RCC_OscConfig+0x330>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	e015      	b.n	8004714 <HAL_RCC_OscConfig+0x2f8>
 80046e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80046fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004700:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004704:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004710:	4b0e      	ldr	r3, [pc, #56]	; (800474c <HAL_RCC_OscConfig+0x330>)
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004718:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800471c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004720:	fa92 f2a2 	rbit	r2, r2
 8004724:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004728:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800472c:	fab2 f282 	clz	r2, r2
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	f042 0220 	orr.w	r2, r2, #32
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	f002 021f 	and.w	r2, r2, #31
 800473c:	2101      	movs	r1, #1
 800473e:	fa01 f202 	lsl.w	r2, r1, r2
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ab      	bne.n	80046a0 <HAL_RCC_OscConfig+0x284>
 8004748:	e003      	b.n	8004752 <HAL_RCC_OscConfig+0x336>
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 817d 	beq.w	8004a62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004768:	4ba6      	ldr	r3, [pc, #664]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004774:	4ba3      	ldr	r3, [pc, #652]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d172      	bne.n	8004866 <HAL_RCC_OscConfig+0x44a>
 8004780:	4ba0      	ldr	r3, [pc, #640]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d16c      	bne.n	8004866 <HAL_RCC_OscConfig+0x44a>
 800478c:	2302      	movs	r3, #2
 800478e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800479e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d102      	bne.n	80047bc <HAL_RCC_OscConfig+0x3a0>
 80047b6:	4b93      	ldr	r3, [pc, #588]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	e013      	b.n	80047e4 <HAL_RCC_OscConfig+0x3c8>
 80047bc:	2302      	movs	r3, #2
 80047be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80047c6:	fa93 f3a3 	rbit	r3, r3
 80047ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80047ce:	2302      	movs	r3, #2
 80047d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80047d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80047e0:	4b88      	ldr	r3, [pc, #544]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2202      	movs	r2, #2
 80047e6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80047ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80047ee:	fa92 f2a2 	rbit	r2, r2
 80047f2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80047f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80047fa:	fab2 f282 	clz	r2, r2
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	f042 0220 	orr.w	r2, r2, #32
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	f002 021f 	and.w	r2, r2, #31
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f202 	lsl.w	r2, r1, r2
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCC_OscConfig+0x410>
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d002      	beq.n	800482c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f000 be2e 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b75      	ldr	r3, [pc, #468]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004838:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	21f8      	movs	r1, #248	; 0xf8
 8004842:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800484a:	fa91 f1a1 	rbit	r1, r1
 800484e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004852:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004856:	fab1 f181 	clz	r1, r1
 800485a:	b2c9      	uxtb	r1, r1
 800485c:	408b      	lsls	r3, r1
 800485e:	4969      	ldr	r1, [pc, #420]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004864:	e0fd      	b.n	8004a62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8088 	beq.w	8004988 <HAL_RCC_OscConfig+0x56c>
 8004878:	2301      	movs	r3, #1
 800487a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004882:	fa93 f3a3 	rbit	r3, r3
 8004886:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800488a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	461a      	mov	r2, r3
 80048a0:	2301      	movs	r3, #1
 80048a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a4:	f7fd fb7e 	bl	8001fa4 <HAL_GetTick>
 80048a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ae:	f7fd fb79 	bl	8001fa4 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d902      	bls.n	80048c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	f000 bde2 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>
 80048c4:	2302      	movs	r3, #2
 80048c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80048d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d102      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4d8>
 80048ee:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	e013      	b.n	800491c <HAL_RCC_OscConfig+0x500>
 80048f4:	2302      	movs	r3, #2
 80048f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004906:	2302      	movs	r3, #2
 8004908:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800490c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004918:	4b3a      	ldr	r3, [pc, #232]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	2202      	movs	r2, #2
 800491e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004922:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004926:	fa92 f2a2 	rbit	r2, r2
 800492a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800492e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004932:	fab2 f282 	clz	r2, r2
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	f042 0220 	orr.w	r2, r2, #32
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	f002 021f 	and.w	r2, r2, #31
 8004942:	2101      	movs	r1, #1
 8004944:	fa01 f202 	lsl.w	r2, r1, r2
 8004948:	4013      	ands	r3, r2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0af      	beq.n	80048ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494e:	4b2d      	ldr	r3, [pc, #180]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	21f8      	movs	r1, #248	; 0xf8
 8004964:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800496c:	fa91 f1a1 	rbit	r1, r1
 8004970:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004974:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004978:	fab1 f181 	clz	r1, r1
 800497c:	b2c9      	uxtb	r1, r1
 800497e:	408b      	lsls	r3, r1
 8004980:	4920      	ldr	r1, [pc, #128]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]
 8004986:	e06c      	b.n	8004a62 <HAL_RCC_OscConfig+0x646>
 8004988:	2301      	movs	r3, #1
 800498a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800499a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800499e:	fab3 f383 	clz	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	461a      	mov	r2, r3
 80049b0:	2300      	movs	r3, #0
 80049b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd faf6 	bl	8001fa4 <HAL_GetTick>
 80049b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049be:	f7fd faf1 	bl	8001fa4 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d902      	bls.n	80049d4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	f000 bd5a 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>
 80049d4:	2302      	movs	r3, #2
 80049d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80049e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d104      	bne.n	8004a08 <HAL_RCC_OscConfig+0x5ec>
 80049fe:	4b01      	ldr	r3, [pc, #4]	; (8004a04 <HAL_RCC_OscConfig+0x5e8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	e015      	b.n	8004a30 <HAL_RCC_OscConfig+0x614>
 8004a04:	40021000 	.word	0x40021000
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a2c:	4bc8      	ldr	r3, [pc, #800]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2202      	movs	r2, #2
 8004a32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004a36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004a3a:	fa92 f2a2 	rbit	r2, r2
 8004a3e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004a42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a46:	fab2 f282 	clz	r2, r2
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	f042 0220 	orr.w	r2, r2, #32
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	f002 021f 	and.w	r2, r2, #31
 8004a56:	2101      	movs	r1, #1
 8004a58:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ad      	bne.n	80049be <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8110 	beq.w	8004c98 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d079      	beq.n	8004b7c <HAL_RCC_OscConfig+0x760>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9e:	fab3 f383 	clz	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4bab      	ldr	r3, [pc, #684]	; (8004d54 <HAL_RCC_OscConfig+0x938>)
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	461a      	mov	r2, r3
 8004aae:	2301      	movs	r3, #1
 8004ab0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab2:	f7fd fa77 	bl	8001fa4 <HAL_GetTick>
 8004ab6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004abc:	f7fd fa72 	bl	8001fa4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	f000 bcdb 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004aec:	2202      	movs	r2, #2
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	fa93 f2a3 	rbit	r2, r3
 8004afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b10:	2202      	movs	r2, #2
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	fa93 f2a3 	rbit	r2, r3
 8004b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2c:	4b88      	ldr	r3, [pc, #544]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b38:	2102      	movs	r1, #2
 8004b3a:	6019      	str	r1, [r3, #0]
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	fa93 f1a3 	rbit	r1, r3
 8004b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b52:	6019      	str	r1, [r3, #0]
  return result;
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2101      	movs	r1, #1
 8004b70:	fa01 f303 	lsl.w	r3, r1, r3
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0a0      	beq.n	8004abc <HAL_RCC_OscConfig+0x6a0>
 8004b7a:	e08d      	b.n	8004c98 <HAL_RCC_OscConfig+0x87c>
 8004b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	fa93 f2a3 	rbit	r2, r3
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b9e:	601a      	str	r2, [r3, #0]
  return result;
 8004ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ba8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4b68      	ldr	r3, [pc, #416]	; (8004d54 <HAL_RCC_OscConfig+0x938>)
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bbe:	f7fd f9f1 	bl	8001fa4 <HAL_GetTick>
 8004bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc8:	f7fd f9ec 	bl	8001fa4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d902      	bls.n	8004bde <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	f000 bc55 	b.w	8005488 <HAL_RCC_OscConfig+0x106c>
 8004bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004be6:	2202      	movs	r2, #2
 8004be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	fa93 f2a3 	rbit	r2, r3
 8004bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	fa93 f2a3 	rbit	r2, r3
 8004c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c2e:	2202      	movs	r2, #2
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	fa93 f2a3 	rbit	r2, r3
 8004c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004c48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4a:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004c56:	2102      	movs	r1, #2
 8004c58:	6019      	str	r1, [r3, #0]
 8004c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	fa93 f1a3 	rbit	r1, r3
 8004c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c70:	6019      	str	r1, [r3, #0]
  return result;
 8004c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	fab3 f383 	clz	r3, r3
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d197      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 81a1 	beq.w	8004ff0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb4:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d116      	bne.n	8004cee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc0:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	61d3      	str	r3, [r2, #28]
 8004ccc:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ce6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cee:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <HAL_RCC_OscConfig+0x93c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d11a      	bne.n	8004d30 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cfa:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <HAL_RCC_OscConfig+0x93c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a16      	ldr	r2, [pc, #88]	; (8004d58 <HAL_RCC_OscConfig+0x93c>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d06:	f7fd f94d 	bl	8001fa4 <HAL_GetTick>
 8004d0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	e009      	b.n	8004d24 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7fd f948 	bl	8001fa4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b64      	cmp	r3, #100	; 0x64
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e3b1      	b.n	8005488 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_RCC_OscConfig+0x93c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ef      	beq.n	8004d10 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10d      	bne.n	8004d5c <HAL_RCC_OscConfig+0x940>
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	4a02      	ldr	r2, [pc, #8]	; (8004d50 <HAL_RCC_OscConfig+0x934>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	6213      	str	r3, [r2, #32]
 8004d4c:	e03c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x9ac>
 8004d4e:	bf00      	nop
 8004d50:	40021000 	.word	0x40021000
 8004d54:	10908120 	.word	0x10908120
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10c      	bne.n	8004d86 <HAL_RCC_OscConfig+0x96a>
 8004d6c:	4bc1      	ldr	r3, [pc, #772]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	4ac0      	ldr	r2, [pc, #768]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	6213      	str	r3, [r2, #32]
 8004d78:	4bbe      	ldr	r3, [pc, #760]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	4abd      	ldr	r2, [pc, #756]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004d7e:	f023 0304 	bic.w	r3, r3, #4
 8004d82:	6213      	str	r3, [r2, #32]
 8004d84:	e020      	b.n	8004dc8 <HAL_RCC_OscConfig+0x9ac>
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCC_OscConfig+0x994>
 8004d96:	4bb7      	ldr	r3, [pc, #732]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4ab6      	ldr	r2, [pc, #728]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004d9c:	f043 0304 	orr.w	r3, r3, #4
 8004da0:	6213      	str	r3, [r2, #32]
 8004da2:	4bb4      	ldr	r3, [pc, #720]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	4ab3      	ldr	r2, [pc, #716]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	6213      	str	r3, [r2, #32]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCC_OscConfig+0x9ac>
 8004db0:	4bb0      	ldr	r3, [pc, #704]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	4aaf      	ldr	r2, [pc, #700]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	6213      	str	r3, [r2, #32]
 8004dbc:	4bad      	ldr	r3, [pc, #692]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	4aac      	ldr	r2, [pc, #688]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004dc2:	f023 0304 	bic.w	r3, r3, #4
 8004dc6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8081 	beq.w	8004edc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dda:	f7fd f8e3 	bl	8001fa4 <HAL_GetTick>
 8004dde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	e00b      	b.n	8004dfc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd f8de 	bl	8001fa4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e345      	b.n	8005488 <HAL_RCC_OscConfig+0x106c>
 8004dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e04:	2202      	movs	r2, #2
 8004e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f2a3 	rbit	r2, r3
 8004e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004e28:	2202      	movs	r2, #2
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	fa93 f2a3 	rbit	r2, r3
 8004e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004e42:	601a      	str	r2, [r3, #0]
  return result;
 8004e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e48:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004e4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4e:	fab3 f383 	clz	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f043 0302 	orr.w	r3, r3, #2
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d102      	bne.n	8004e68 <HAL_RCC_OscConfig+0xa4c>
 8004e62:	4b84      	ldr	r3, [pc, #528]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	e013      	b.n	8004e90 <HAL_RCC_OscConfig+0xa74>
 8004e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e70:	2202      	movs	r2, #2
 8004e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	fa93 f2a3 	rbit	r2, r3
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	4b79      	ldr	r3, [pc, #484]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e94:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e98:	2102      	movs	r1, #2
 8004e9a:	6011      	str	r1, [r2, #0]
 8004e9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ea0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	fa92 f1a2 	rbit	r1, r2
 8004eaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004eb2:	6011      	str	r1, [r2, #0]
  return result;
 8004eb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eb8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	fab2 f282 	clz	r2, r2
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	f002 021f 	and.w	r2, r2, #31
 8004ece:	2101      	movs	r1, #1
 8004ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d084      	beq.n	8004de4 <HAL_RCC_OscConfig+0x9c8>
 8004eda:	e07f      	b.n	8004fdc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004edc:	f7fd f862 	bl	8001fa4 <HAL_GetTick>
 8004ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee4:	e00b      	b.n	8004efe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7fd f85d 	bl	8001fa4 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e2c4      	b.n	8005488 <HAL_RCC_OscConfig+0x106c>
 8004efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f02:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004f06:	2202      	movs	r2, #2
 8004f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	fa93 f2a3 	rbit	r2, r3
 8004f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f26:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f32:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	fa93 f2a3 	rbit	r2, r3
 8004f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f44:	601a      	str	r2, [r3, #0]
  return result;
 8004f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f50:	fab3 f383 	clz	r3, r3
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f043 0302 	orr.w	r3, r3, #2
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d102      	bne.n	8004f6a <HAL_RCC_OscConfig+0xb4e>
 8004f64:	4b43      	ldr	r3, [pc, #268]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	e013      	b.n	8004f92 <HAL_RCC_OscConfig+0xb76>
 8004f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f72:	2202      	movs	r2, #2
 8004f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	fa93 f2a3 	rbit	r2, r3
 8004f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f88:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	4b39      	ldr	r3, [pc, #228]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f96:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	6011      	str	r1, [r2, #0]
 8004f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fa2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	fa92 f1a2 	rbit	r1, r2
 8004fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fb0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004fb4:	6011      	str	r1, [r2, #0]
  return result;
 8004fb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	fab2 f282 	clz	r2, r2
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	f002 021f 	and.w	r2, r2, #31
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d184      	bne.n	8004ee6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fdc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe4:	4b23      	ldr	r3, [pc, #140]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	4a22      	ldr	r2, [pc, #136]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8004fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8242 	beq.w	8005486 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <HAL_RCC_OscConfig+0xc58>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b08      	cmp	r3, #8
 800500c:	f000 8213 	beq.w	8005436 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	2b02      	cmp	r3, #2
 800501e:	f040 8162 	bne.w	80052e6 <HAL_RCC_OscConfig+0xeca>
 8005022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005026:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800502a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800502e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005034:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	fa93 f2a3 	rbit	r2, r3
 800503e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005042:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005046:	601a      	str	r2, [r3, #0]
  return result;
 8005048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005050:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005052:	fab3 f383 	clz	r3, r3
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800505c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	461a      	mov	r2, r3
 8005064:	2300      	movs	r3, #0
 8005066:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fc ff9c 	bl	8001fa4 <HAL_GetTick>
 800506c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005070:	e00c      	b.n	800508c <HAL_RCC_OscConfig+0xc70>
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005078:	f7fc ff94 	bl	8001fa4 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e1fd      	b.n	8005488 <HAL_RCC_OscConfig+0x106c>
 800508c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005090:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	fa93 f2a3 	rbit	r2, r3
 80050a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80050b0:	601a      	str	r2, [r3, #0]
  return result;
 80050b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80050ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050bc:	fab3 f383 	clz	r3, r3
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d102      	bne.n	80050d6 <HAL_RCC_OscConfig+0xcba>
 80050d0:	4bb0      	ldr	r3, [pc, #704]	; (8005394 <HAL_RCC_OscConfig+0xf78>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	e027      	b.n	8005126 <HAL_RCC_OscConfig+0xd0a>
 80050d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80050de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	fa93 f2a3 	rbit	r2, r3
 80050f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005100:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	fa93 f2a3 	rbit	r2, r3
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	4b9c      	ldr	r3, [pc, #624]	; (8005394 <HAL_RCC_OscConfig+0xf78>)
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800512a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800512e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005132:	6011      	str	r1, [r2, #0]
 8005134:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005138:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	fa92 f1a2 	rbit	r1, r2
 8005142:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005146:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800514a:	6011      	str	r1, [r2, #0]
  return result;
 800514c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005150:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	fab2 f282 	clz	r2, r2
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	f042 0220 	orr.w	r2, r2, #32
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	f002 021f 	and.w	r2, r2, #31
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f202 	lsl.w	r2, r1, r2
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d182      	bne.n	8005078 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005172:	4b88      	ldr	r3, [pc, #544]	; (8005394 <HAL_RCC_OscConfig+0xf78>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800517a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	430b      	orrs	r3, r1
 8005194:	497f      	ldr	r1, [pc, #508]	; (8005394 <HAL_RCC_OscConfig+0xf78>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
 800519a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80051a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	fa93 f2a3 	rbit	r2, r3
 80051b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80051be:	601a      	str	r2, [r3, #0]
  return result;
 80051c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80051c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ca:	fab3 f383 	clz	r3, r3
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	461a      	mov	r2, r3
 80051dc:	2301      	movs	r3, #1
 80051de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e0:	f7fc fee0 	bl	8001fa4 <HAL_GetTick>
 80051e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051e8:	e009      	b.n	80051fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ea:	f7fc fedb 	bl	8001fa4 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e144      	b.n	8005488 <HAL_RCC_OscConfig+0x106c>
 80051fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005202:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005206:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800520a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005210:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	fa93 f2a3 	rbit	r2, r3
 800521a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005222:	601a      	str	r2, [r3, #0]
  return result;
 8005224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005228:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800522c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	b2db      	uxtb	r3, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d102      	bne.n	8005248 <HAL_RCC_OscConfig+0xe2c>
 8005242:	4b54      	ldr	r3, [pc, #336]	; (8005394 <HAL_RCC_OscConfig+0xf78>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	e027      	b.n	8005298 <HAL_RCC_OscConfig+0xe7c>
 8005248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	fa93 f2a3 	rbit	r2, r3
 8005264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005268:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005272:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005280:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	fa93 f2a3 	rbit	r2, r3
 800528a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	4b3f      	ldr	r3, [pc, #252]	; (8005394 <HAL_RCC_OscConfig+0xf78>)
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800529c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80052a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052a4:	6011      	str	r1, [r2, #0]
 80052a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	fa92 f1a2 	rbit	r1, r2
 80052b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80052bc:	6011      	str	r1, [r2, #0]
  return result;
 80052be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	fab2 f282 	clz	r2, r2
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	f042 0220 	orr.w	r2, r2, #32
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	f002 021f 	and.w	r2, r2, #31
 80052d8:	2101      	movs	r1, #1
 80052da:	fa01 f202 	lsl.w	r2, r1, r2
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d082      	beq.n	80051ea <HAL_RCC_OscConfig+0xdce>
 80052e4:	e0cf      	b.n	8005486 <HAL_RCC_OscConfig+0x106a>
 80052e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80052ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	fa93 f2a3 	rbit	r2, r3
 8005302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005306:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800530a:	601a      	str	r2, [r3, #0]
  return result;
 800530c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005310:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005314:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005316:	fab3 f383 	clz	r3, r3
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	461a      	mov	r2, r3
 8005328:	2300      	movs	r3, #0
 800532a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532c:	f7fc fe3a 	bl	8001fa4 <HAL_GetTick>
 8005330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005334:	e009      	b.n	800534a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005336:	f7fc fe35 	bl	8001fa4 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e09e      	b.n	8005488 <HAL_RCC_OscConfig+0x106c>
 800534a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	fa93 f2a3 	rbit	r2, r3
 8005366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800536a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800536e:	601a      	str	r2, [r3, #0]
  return result;
 8005370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005374:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005378:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d104      	bne.n	8005398 <HAL_RCC_OscConfig+0xf7c>
 800538e:	4b01      	ldr	r3, [pc, #4]	; (8005394 <HAL_RCC_OscConfig+0xf78>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	e029      	b.n	80053e8 <HAL_RCC_OscConfig+0xfcc>
 8005394:	40021000 	.word	0x40021000
 8005398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80053a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	fa93 f2a3 	rbit	r2, r3
 80053b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80053c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	fa93 f2a3 	rbit	r2, r3
 80053da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_RCC_OscConfig+0x1078>)
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80053f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	fa92 f1a2 	rbit	r1, r2
 8005404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005408:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800540c:	6011      	str	r1, [r2, #0]
  return result;
 800540e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005412:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	fab2 f282 	clz	r2, r2
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	f042 0220 	orr.w	r2, r2, #32
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	f002 021f 	and.w	r2, r2, #31
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f202 	lsl.w	r2, r1, r2
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d180      	bne.n	8005336 <HAL_RCC_OscConfig+0xf1a>
 8005434:	e027      	b.n	8005486 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e01e      	b.n	8005488 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_RCC_OscConfig+0x1078>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005452:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005456:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800545a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	429a      	cmp	r2, r3
 8005468:	d10b      	bne.n	8005482 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800546a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800546e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800547e:	429a      	cmp	r2, r3
 8005480:	d001      	beq.n	8005486 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000

08005498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b09e      	sub	sp, #120	; 0x78
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e162      	b.n	8005776 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b90      	ldr	r3, [pc, #576]	; (80056f4 <HAL_RCC_ClockConfig+0x25c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d910      	bls.n	80054e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b8d      	ldr	r3, [pc, #564]	; (80056f4 <HAL_RCC_ClockConfig+0x25c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 0207 	bic.w	r2, r3, #7
 80054c6:	498b      	ldr	r1, [pc, #556]	; (80056f4 <HAL_RCC_ClockConfig+0x25c>)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b89      	ldr	r3, [pc, #548]	; (80056f4 <HAL_RCC_ClockConfig+0x25c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e14a      	b.n	8005776 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b82      	ldr	r3, [pc, #520]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	497f      	ldr	r1, [pc, #508]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80dc 	beq.w	80056c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d13c      	bne.n	800558e <HAL_RCC_ClockConfig+0xf6>
 8005514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005518:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800551c:	fa93 f3a3 	rbit	r3, r3
 8005520:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005524:	fab3 f383 	clz	r3, r3
 8005528:	b2db      	uxtb	r3, r3
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d102      	bne.n	800553e <HAL_RCC_ClockConfig+0xa6>
 8005538:	4b6f      	ldr	r3, [pc, #444]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	e00f      	b.n	800555e <HAL_RCC_ClockConfig+0xc6>
 800553e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005542:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	667b      	str	r3, [r7, #100]	; 0x64
 800554c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005550:	663b      	str	r3, [r7, #96]	; 0x60
 8005552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005554:	fa93 f3a3 	rbit	r3, r3
 8005558:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555a:	4b67      	ldr	r3, [pc, #412]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005562:	65ba      	str	r2, [r7, #88]	; 0x58
 8005564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005566:	fa92 f2a2 	rbit	r2, r2
 800556a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800556c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800556e:	fab2 f282 	clz	r2, r2
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	f042 0220 	orr.w	r2, r2, #32
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	f002 021f 	and.w	r2, r2, #31
 800557e:	2101      	movs	r1, #1
 8005580:	fa01 f202 	lsl.w	r2, r1, r2
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d17b      	bne.n	8005682 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e0f3      	b.n	8005776 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d13c      	bne.n	8005610 <HAL_RCC_ClockConfig+0x178>
 8005596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800559a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559e:	fa93 f3a3 	rbit	r3, r3
 80055a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80055a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a6:	fab3 f383 	clz	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d102      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x128>
 80055ba:	4b4f      	ldr	r3, [pc, #316]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	e00f      	b.n	80055e0 <HAL_RCC_ClockConfig+0x148>
 80055c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c8:	fa93 f3a3 	rbit	r3, r3
 80055cc:	647b      	str	r3, [r7, #68]	; 0x44
 80055ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d2:	643b      	str	r3, [r7, #64]	; 0x40
 80055d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d6:	fa93 f3a3 	rbit	r3, r3
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055dc:	4b46      	ldr	r3, [pc, #280]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80055e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e8:	fa92 f2a2 	rbit	r2, r2
 80055ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80055ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f0:	fab2 f282 	clz	r2, r2
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	f042 0220 	orr.w	r2, r2, #32
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	f002 021f 	and.w	r2, r2, #31
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f202 	lsl.w	r2, r1, r2
 8005606:	4013      	ands	r3, r2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d13a      	bne.n	8005682 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0b2      	b.n	8005776 <HAL_RCC_ClockConfig+0x2de>
 8005610:	2302      	movs	r3, #2
 8005612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	fa93 f3a3 	rbit	r3, r3
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d102      	bne.n	8005638 <HAL_RCC_ClockConfig+0x1a0>
 8005632:	4b31      	ldr	r3, [pc, #196]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	e00d      	b.n	8005654 <HAL_RCC_ClockConfig+0x1bc>
 8005638:	2302      	movs	r3, #2
 800563a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
 8005644:	2302      	movs	r3, #2
 8005646:	623b      	str	r3, [r7, #32]
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	4b29      	ldr	r3, [pc, #164]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2202      	movs	r2, #2
 8005656:	61ba      	str	r2, [r7, #24]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	fa92 f2a2 	rbit	r2, r2
 800565e:	617a      	str	r2, [r7, #20]
  return result;
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	fab2 f282 	clz	r2, r2
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	f042 0220 	orr.w	r2, r2, #32
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	f002 021f 	and.w	r2, r2, #31
 8005672:	2101      	movs	r1, #1
 8005674:	fa01 f202 	lsl.w	r2, r1, r2
 8005678:	4013      	ands	r3, r2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e079      	b.n	8005776 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005682:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f023 0203 	bic.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	491a      	ldr	r1, [pc, #104]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 8005690:	4313      	orrs	r3, r2
 8005692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005694:	f7fc fc86 	bl	8001fa4 <HAL_GetTick>
 8005698:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569c:	f7fc fc82 	bl	8001fa4 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e061      	b.n	8005776 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <HAL_RCC_ClockConfig+0x260>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 020c 	and.w	r2, r3, #12
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d1eb      	bne.n	800569c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCC_ClockConfig+0x25c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d214      	bcs.n	80056fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <HAL_RCC_ClockConfig+0x25c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 0207 	bic.w	r2, r3, #7
 80056da:	4906      	ldr	r1, [pc, #24]	; (80056f4 <HAL_RCC_ClockConfig+0x25c>)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <HAL_RCC_ClockConfig+0x25c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e040      	b.n	8005776 <HAL_RCC_ClockConfig+0x2de>
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <HAL_RCC_ClockConfig+0x2e8>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	491a      	ldr	r1, [pc, #104]	; (8005780 <HAL_RCC_ClockConfig+0x2e8>)
 8005716:	4313      	orrs	r3, r2
 8005718:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005726:	4b16      	ldr	r3, [pc, #88]	; (8005780 <HAL_RCC_ClockConfig+0x2e8>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4912      	ldr	r1, [pc, #72]	; (8005780 <HAL_RCC_ClockConfig+0x2e8>)
 8005736:	4313      	orrs	r3, r2
 8005738:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800573a:	f000 f829 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 800573e:	4601      	mov	r1, r0
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <HAL_RCC_ClockConfig+0x2e8>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005748:	22f0      	movs	r2, #240	; 0xf0
 800574a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	fa92 f2a2 	rbit	r2, r2
 8005752:	60fa      	str	r2, [r7, #12]
  return result;
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	fab2 f282 	clz	r2, r2
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	40d3      	lsrs	r3, r2
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <HAL_RCC_ClockConfig+0x2ec>)
 8005760:	5cd3      	ldrb	r3, [r2, r3]
 8005762:	fa21 f303 	lsr.w	r3, r1, r3
 8005766:	4a08      	ldr	r2, [pc, #32]	; (8005788 <HAL_RCC_ClockConfig+0x2f0>)
 8005768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800576a:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_RCC_ClockConfig+0x2f4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fc fbd4 	bl	8001f1c <HAL_InitTick>
  
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3778      	adds	r7, #120	; 0x78
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	080074c8 	.word	0x080074c8
 8005788:	20000028 	.word	0x20000028
 800578c:	200022c0 	.word	0x200022c0

08005790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005790:	b480      	push	{r7}
 8005792:	b08b      	sub	sp, #44	; 0x2c
 8005794:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	2300      	movs	r3, #0
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	2300      	movs	r3, #0
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80057aa:	4b29      	ldr	r3, [pc, #164]	; (8005850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d002      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x30>
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0x36>
 80057be:	e03c      	b.n	800583a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057c0:	4b24      	ldr	r3, [pc, #144]	; (8005854 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057c2:	623b      	str	r3, [r7, #32]
      break;
 80057c4:	e03c      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80057cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80057d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	fa92 f2a2 	rbit	r2, r2
 80057d8:	607a      	str	r2, [r7, #4]
  return result;
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	fab2 f282 	clz	r2, r2
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	40d3      	lsrs	r3, r2
 80057e4:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80057ea:	4b19      	ldr	r3, [pc, #100]	; (8005850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	220f      	movs	r2, #15
 80057f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	fa92 f2a2 	rbit	r2, r2
 80057fc:	60fa      	str	r2, [r7, #12]
  return result;
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	fab2 f282 	clz	r2, r2
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	40d3      	lsrs	r3, r2
 8005808:	4a14      	ldr	r2, [pc, #80]	; (800585c <HAL_RCC_GetSysClockFreq+0xcc>)
 800580a:	5cd3      	ldrb	r3, [r2, r3]
 800580c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005818:	4a0e      	ldr	r2, [pc, #56]	; (8005854 <HAL_RCC_GetSysClockFreq+0xc4>)
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	fb02 f303 	mul.w	r3, r2, r3
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
 8005828:	e004      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4a0c      	ldr	r2, [pc, #48]	; (8005860 <HAL_RCC_GetSysClockFreq+0xd0>)
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	623b      	str	r3, [r7, #32]
      break;
 8005838:	e002      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_RCC_GetSysClockFreq+0xc4>)
 800583c:	623b      	str	r3, [r7, #32]
      break;
 800583e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005840:	6a3b      	ldr	r3, [r7, #32]
}
 8005842:	4618      	mov	r0, r3
 8005844:	372c      	adds	r7, #44	; 0x2c
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000
 8005854:	007a1200 	.word	0x007a1200
 8005858:	080074d8 	.word	0x080074d8
 800585c:	080074e8 	.word	0x080074e8
 8005860:	003d0900 	.word	0x003d0900

08005864 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b092      	sub	sp, #72	; 0x48
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005874:	2300      	movs	r3, #0
 8005876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80cd 	beq.w	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005888:	4b86      	ldr	r3, [pc, #536]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10e      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005894:	4b83      	ldr	r3, [pc, #524]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4a82      	ldr	r2, [pc, #520]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589e:	61d3      	str	r3, [r2, #28]
 80058a0:	4b80      	ldr	r3, [pc, #512]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b2:	4b7d      	ldr	r3, [pc, #500]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d118      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058be:	4b7a      	ldr	r3, [pc, #488]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a79      	ldr	r2, [pc, #484]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80058c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ca:	f7fc fb6b 	bl	8001fa4 <HAL_GetTick>
 80058ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	e008      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d2:	f7fc fb67 	bl	8001fa4 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b64      	cmp	r3, #100	; 0x64
 80058de:	d901      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0db      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	4b70      	ldr	r3, [pc, #448]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058f0:	4b6c      	ldr	r3, [pc, #432]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d07d      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800590a:	429a      	cmp	r2, r3
 800590c:	d076      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800590e:	4b65      	ldr	r3, [pc, #404]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	fa93 f3a3 	rbit	r3, r3
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005928:	fab3 f383 	clz	r3, r3
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	4b5e      	ldr	r3, [pc, #376]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	461a      	mov	r2, r3
 8005938:	2301      	movs	r3, #1
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	fa93 f3a3 	rbit	r3, r3
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800594c:	fab3 f383 	clz	r3, r3
 8005950:	b2db      	uxtb	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	4b55      	ldr	r3, [pc, #340]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	461a      	mov	r2, r3
 800595c:	2300      	movs	r3, #0
 800595e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005960:	4a50      	ldr	r2, [pc, #320]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005964:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d045      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005970:	f7fc fb18 	bl	8001fa4 <HAL_GetTick>
 8005974:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005976:	e00a      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005978:	f7fc fb14 	bl	8001fa4 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e086      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800598e:	2302      	movs	r3, #2
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	fa93 f3a3 	rbit	r3, r3
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
 800599a:	2302      	movs	r3, #2
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	fa93 f3a3 	rbit	r3, r3
 80059a4:	61fb      	str	r3, [r7, #28]
  return result;
 80059a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a8:	fab3 f383 	clz	r3, r3
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f043 0302 	orr.w	r3, r3, #2
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d102      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80059bc:	4b39      	ldr	r3, [pc, #228]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	e007      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80059c2:	2302      	movs	r3, #2
 80059c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	fa93 f3a3 	rbit	r3, r3
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	4b35      	ldr	r3, [pc, #212]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2202      	movs	r2, #2
 80059d4:	613a      	str	r2, [r7, #16]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	fa92 f2a2 	rbit	r2, r2
 80059dc:	60fa      	str	r2, [r7, #12]
  return result;
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	fab2 f282 	clz	r2, r2
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	f002 021f 	and.w	r2, r2, #31
 80059f0:	2101      	movs	r1, #1
 80059f2:	fa01 f202 	lsl.w	r2, r1, r2
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0bd      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80059fc:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4926      	ldr	r1, [pc, #152]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d105      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a16:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	4a22      	ldr	r2, [pc, #136]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a20:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	491a      	ldr	r1, [pc, #104]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a4c:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	f023 0210 	bic.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4912      	ldr	r1, [pc, #72]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a6a:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	490b      	ldr	r1, [pc, #44]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	4903      	ldr	r1, [pc, #12]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3748      	adds	r7, #72	; 0x48
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40007000 	.word	0x40007000
 8005aac:	10908100 	.word	0x10908100

08005ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e049      	b.n	8005b56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fb ffb2 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f001 f848 	bl	8006b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d001      	beq.n	8005b78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e038      	b.n	8005bea <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1c      	ldr	r2, [pc, #112]	; (8005bf8 <HAL_TIM_Base_Start+0x98>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00e      	beq.n	8005ba8 <HAL_TIM_Base_Start+0x48>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d009      	beq.n	8005ba8 <HAL_TIM_Base_Start+0x48>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a18      	ldr	r2, [pc, #96]	; (8005bfc <HAL_TIM_Base_Start+0x9c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <HAL_TIM_Base_Start+0x48>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <HAL_TIM_Base_Start+0xa0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d115      	bne.n	8005bd4 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <HAL_TIM_Base_Start+0xa4>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b06      	cmp	r3, #6
 8005bb8:	d015      	beq.n	8005be6 <HAL_TIM_Base_Start+0x86>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc0:	d011      	beq.n	8005be6 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	e008      	b.n	8005be6 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e000      	b.n	8005be8 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40014000 	.word	0x40014000
 8005c04:	00010007 	.word	0x00010007

08005c08 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
 8005c24:	e06c      	b.n	8005d00 <HAL_TIM_Base_Start_DMA+0xf8>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d125      	bne.n	8005c7e <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) && (Length > 0U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_Base_Start_DMA+0x3a>
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e05e      	b.n	8005d00 <HAL_TIM_Base_Start_DMA+0xf8>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	4a2e      	ldr	r2, [pc, #184]	; (8005d08 <HAL_TIM_Base_Start_DMA+0x100>)
 8005c50:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	4a2d      	ldr	r2, [pc, #180]	; (8005d0c <HAL_TIM_Base_Start_DMA+0x104>)
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	4a2c      	ldr	r2, [pc, #176]	; (8005d10 <HAL_TIM_Base_Start_DMA+0x108>)
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a18      	ldr	r0, [r3, #32]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	332c      	adds	r3, #44	; 0x2c
 8005c6e:	461a      	mov	r2, r3
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	f7fe f8bb 	bl	8003dec <HAL_DMA_Start_IT>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <HAL_TIM_Base_Start_DMA+0x7e>
 8005c7c:	e001      	b.n	8005c82 <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e03e      	b.n	8005d00 <HAL_TIM_Base_Start_DMA+0xf8>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e03c      	b.n	8005d00 <HAL_TIM_Base_Start_DMA+0xf8>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68da      	ldr	r2, [r3, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1e      	ldr	r2, [pc, #120]	; (8005d14 <HAL_TIM_Base_Start_DMA+0x10c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_TIM_Base_Start_DMA+0xb6>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca8:	d009      	beq.n	8005cbe <HAL_TIM_Base_Start_DMA+0xb6>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <HAL_TIM_Base_Start_DMA+0x110>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_TIM_Base_Start_DMA+0xb6>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <HAL_TIM_Base_Start_DMA+0x114>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d115      	bne.n	8005cea <HAL_TIM_Base_Start_DMA+0xe2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <HAL_TIM_Base_Start_DMA+0x118>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b06      	cmp	r3, #6
 8005cce:	d015      	beq.n	8005cfc <HAL_TIM_Base_Start_DMA+0xf4>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd6:	d011      	beq.n	8005cfc <HAL_TIM_Base_Start_DMA+0xf4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce8:	e008      	b.n	8005cfc <HAL_TIM_Base_Start_DMA+0xf4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e000      	b.n	8005cfe <HAL_TIM_Base_Start_DMA+0xf6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	08006b39 	.word	0x08006b39
 8005d0c:	08006b67 	.word	0x08006b67
 8005d10:	08006aa7 	.word	0x08006aa7
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	00010007 	.word	0x00010007

08005d24 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d3a:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fe f8b2 	bl	8003eaa <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a1a      	ldr	r2, [r3, #32]
 8005d4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10f      	bne.n	8005d76 <HAL_TIM_Base_Stop_DMA+0x52>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	f240 4344 	movw	r3, #1092	; 0x444
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <HAL_TIM_Base_Stop_DMA+0x52>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_TIM_OC_Start+0x24>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	bf14      	ite	ne
 8005da4:	2301      	movne	r3, #1
 8005da6:	2300      	moveq	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	e03c      	b.n	8005e26 <HAL_TIM_OC_Start+0x9e>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d109      	bne.n	8005dc6 <HAL_TIM_OC_Start+0x3e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	bf14      	ite	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	2300      	moveq	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	e02f      	b.n	8005e26 <HAL_TIM_OC_Start+0x9e>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d109      	bne.n	8005de0 <HAL_TIM_OC_Start+0x58>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	e022      	b.n	8005e26 <HAL_TIM_OC_Start+0x9e>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d109      	bne.n	8005dfa <HAL_TIM_OC_Start+0x72>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	bf14      	ite	ne
 8005df2:	2301      	movne	r3, #1
 8005df4:	2300      	moveq	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	e015      	b.n	8005e26 <HAL_TIM_OC_Start+0x9e>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d109      	bne.n	8005e14 <HAL_TIM_OC_Start+0x8c>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	bf14      	ite	ne
 8005e0c:	2301      	movne	r3, #1
 8005e0e:	2300      	moveq	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e008      	b.n	8005e26 <HAL_TIM_OC_Start+0x9e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	bf14      	ite	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	2300      	moveq	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e088      	b.n	8005f40 <HAL_TIM_OC_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_OC_Start+0xb6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e3c:	e023      	b.n	8005e86 <HAL_TIM_OC_Start+0xfe>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_OC_Start+0xc6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e4c:	e01b      	b.n	8005e86 <HAL_TIM_OC_Start+0xfe>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_OC_Start+0xd6>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e5c:	e013      	b.n	8005e86 <HAL_TIM_OC_Start+0xfe>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b0c      	cmp	r3, #12
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_OC_Start+0xe6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e6c:	e00b      	b.n	8005e86 <HAL_TIM_OC_Start+0xfe>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_OC_Start+0xf6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e7c:	e003      	b.n	8005e86 <HAL_TIM_OC_Start+0xfe>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fa30 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2b      	ldr	r2, [pc, #172]	; (8005f48 <HAL_TIM_OC_Start+0x1c0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00e      	beq.n	8005ebc <HAL_TIM_OC_Start+0x134>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	; (8005f4c <HAL_TIM_OC_Start+0x1c4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_TIM_OC_Start+0x134>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <HAL_TIM_OC_Start+0x1c8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <HAL_TIM_OC_Start+0x134>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <HAL_TIM_OC_Start+0x1cc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIM_OC_Start+0x138>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <HAL_TIM_OC_Start+0x13a>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <HAL_TIM_OC_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_TIM_OC_Start+0x1c0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00e      	beq.n	8005efe <HAL_TIM_OC_Start+0x176>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee8:	d009      	beq.n	8005efe <HAL_TIM_OC_Start+0x176>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <HAL_TIM_OC_Start+0x1d0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIM_OC_Start+0x176>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <HAL_TIM_OC_Start+0x1c4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d115      	bne.n	8005f2a <HAL_TIM_OC_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <HAL_TIM_OC_Start+0x1d4>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b06      	cmp	r3, #6
 8005f0e:	d015      	beq.n	8005f3c <HAL_TIM_OC_Start+0x1b4>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f16:	d011      	beq.n	8005f3c <HAL_TIM_OC_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f28:	e008      	b.n	8005f3c <HAL_TIM_OC_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e000      	b.n	8005f3e <HAL_TIM_OC_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	00010007 	.word	0x00010007

08005f60 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f9be 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3b      	ldr	r2, [pc, #236]	; (800606c <HAL_TIM_OC_Stop+0x10c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_TIM_OC_Stop+0x40>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a3a      	ldr	r2, [pc, #232]	; (8006070 <HAL_TIM_OC_Stop+0x110>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_TIM_OC_Stop+0x40>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a38      	ldr	r2, [pc, #224]	; (8006074 <HAL_TIM_OC_Stop+0x114>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIM_OC_Stop+0x40>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a37      	ldr	r2, [pc, #220]	; (8006078 <HAL_TIM_OC_Stop+0x118>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_TIM_OC_Stop+0x44>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <HAL_TIM_OC_Stop+0x46>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d017      	beq.n	8005fda <HAL_TIM_OC_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10f      	bne.n	8005fda <HAL_TIM_OC_Stop+0x7a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6a1a      	ldr	r2, [r3, #32]
 8005fc0:	f240 4344 	movw	r3, #1092	; 0x444
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d107      	bne.n	8005fda <HAL_TIM_OC_Stop+0x7a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6a1a      	ldr	r2, [r3, #32]
 8005fe0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10f      	bne.n	800600a <HAL_TIM_OC_Stop+0xaa>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <HAL_TIM_OC_Stop+0xaa>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <HAL_TIM_OC_Stop+0xba>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006018:	e023      	b.n	8006062 <HAL_TIM_OC_Stop+0x102>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d104      	bne.n	800602a <HAL_TIM_OC_Stop+0xca>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006028:	e01b      	b.n	8006062 <HAL_TIM_OC_Stop+0x102>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d104      	bne.n	800603a <HAL_TIM_OC_Stop+0xda>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006038:	e013      	b.n	8006062 <HAL_TIM_OC_Stop+0x102>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b0c      	cmp	r3, #12
 800603e:	d104      	bne.n	800604a <HAL_TIM_OC_Stop+0xea>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006048:	e00b      	b.n	8006062 <HAL_TIM_OC_Stop+0x102>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b10      	cmp	r3, #16
 800604e:	d104      	bne.n	800605a <HAL_TIM_OC_Stop+0xfa>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006058:	e003      	b.n	8006062 <HAL_TIM_OC_Stop+0x102>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800

0800607c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e049      	b.n	8006122 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f841 	bl	800612a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f000 fd62 	bl	8006b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x24>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e03c      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b04      	cmp	r3, #4
 8006168:	d109      	bne.n	800617e <HAL_TIM_PWM_Start+0x3e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e02f      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d109      	bne.n	8006198 <HAL_TIM_PWM_Start+0x58>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e022      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d109      	bne.n	80061b2 <HAL_TIM_PWM_Start+0x72>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	bf14      	ite	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	2300      	moveq	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	e015      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d109      	bne.n	80061cc <HAL_TIM_PWM_Start+0x8c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e008      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e088      	b.n	80062f8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_PWM_Start+0xb6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f4:	e023      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_PWM_Start+0xc6>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006204:	e01b      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d104      	bne.n	8006216 <HAL_TIM_PWM_Start+0xd6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006214:	e013      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d104      	bne.n	8006226 <HAL_TIM_PWM_Start+0xe6>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006224:	e00b      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b10      	cmp	r3, #16
 800622a:	d104      	bne.n	8006236 <HAL_TIM_PWM_Start+0xf6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006234:	e003      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f001 f854 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2b      	ldr	r2, [pc, #172]	; (8006300 <HAL_TIM_PWM_Start+0x1c0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <HAL_TIM_PWM_Start+0x134>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <HAL_TIM_PWM_Start+0x1c4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_TIM_PWM_Start+0x134>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <HAL_TIM_PWM_Start+0x1c8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_TIM_PWM_Start+0x134>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a27      	ldr	r2, [pc, #156]	; (800630c <HAL_TIM_PWM_Start+0x1cc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <HAL_TIM_PWM_Start+0x138>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_TIM_PWM_Start+0x13a>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800628c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1b      	ldr	r2, [pc, #108]	; (8006300 <HAL_TIM_PWM_Start+0x1c0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00e      	beq.n	80062b6 <HAL_TIM_PWM_Start+0x176>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d009      	beq.n	80062b6 <HAL_TIM_PWM_Start+0x176>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_TIM_PWM_Start+0x1d0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_TIM_PWM_Start+0x176>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <HAL_TIM_PWM_Start+0x1c4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d115      	bne.n	80062e2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	4b15      	ldr	r3, [pc, #84]	; (8006314 <HAL_TIM_PWM_Start+0x1d4>)
 80062be:	4013      	ands	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b06      	cmp	r3, #6
 80062c6:	d015      	beq.n	80062f4 <HAL_TIM_PWM_Start+0x1b4>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ce:	d011      	beq.n	80062f4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e0:	e008      	b.n	80062f4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e000      	b.n	80062f6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40014000 	.word	0x40014000
 8006308:	40014400 	.word	0x40014400
 800630c:	40014800 	.word	0x40014800
 8006310:	40000400 	.word	0x40000400
 8006314:	00010007 	.word	0x00010007

08006318 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2200      	movs	r2, #0
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ffe2 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a3b      	ldr	r2, [pc, #236]	; (8006424 <HAL_TIM_PWM_Stop+0x10c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00e      	beq.n	8006358 <HAL_TIM_PWM_Stop+0x40>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3a      	ldr	r2, [pc, #232]	; (8006428 <HAL_TIM_PWM_Stop+0x110>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d009      	beq.n	8006358 <HAL_TIM_PWM_Stop+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a38      	ldr	r2, [pc, #224]	; (800642c <HAL_TIM_PWM_Stop+0x114>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d004      	beq.n	8006358 <HAL_TIM_PWM_Stop+0x40>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a37      	ldr	r2, [pc, #220]	; (8006430 <HAL_TIM_PWM_Stop+0x118>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d101      	bne.n	800635c <HAL_TIM_PWM_Stop+0x44>
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <HAL_TIM_PWM_Stop+0x46>
 800635c:	2300      	movs	r3, #0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d017      	beq.n	8006392 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	f241 1311 	movw	r3, #4369	; 0x1111
 800636c:	4013      	ands	r3, r2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10f      	bne.n	8006392 <HAL_TIM_PWM_Stop+0x7a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	f240 4344 	movw	r3, #1092	; 0x444
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <HAL_TIM_PWM_Stop+0x7a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006390:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a1a      	ldr	r2, [r3, #32]
 8006398:	f241 1311 	movw	r3, #4369	; 0x1111
 800639c:	4013      	ands	r3, r2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10f      	bne.n	80063c2 <HAL_TIM_PWM_Stop+0xaa>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a1a      	ldr	r2, [r3, #32]
 80063a8:	f240 4344 	movw	r3, #1092	; 0x444
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d107      	bne.n	80063c2 <HAL_TIM_PWM_Stop+0xaa>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_PWM_Stop+0xba>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d0:	e023      	b.n	800641a <HAL_TIM_PWM_Stop+0x102>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d104      	bne.n	80063e2 <HAL_TIM_PWM_Stop+0xca>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e0:	e01b      	b.n	800641a <HAL_TIM_PWM_Stop+0x102>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d104      	bne.n	80063f2 <HAL_TIM_PWM_Stop+0xda>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f0:	e013      	b.n	800641a <HAL_TIM_PWM_Stop+0x102>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b0c      	cmp	r3, #12
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_PWM_Stop+0xea>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006400:	e00b      	b.n	800641a <HAL_TIM_PWM_Stop+0x102>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b10      	cmp	r3, #16
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Stop+0xfa>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006410:	e003      	b.n	800641a <HAL_TIM_PWM_Stop+0x102>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800

08006434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b02      	cmp	r3, #2
 8006448:	d122      	bne.n	8006490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b02      	cmp	r3, #2
 8006456:	d11b      	bne.n	8006490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0202 	mvn.w	r2, #2
 8006460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 faed 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
 800647c:	e005      	b.n	800648a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fadf 	bl	8006a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 faf0 	bl	8006a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b04      	cmp	r3, #4
 800649c:	d122      	bne.n	80064e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d11b      	bne.n	80064e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0204 	mvn.w	r2, #4
 80064b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fac3 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
 80064d0:	e005      	b.n	80064de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fab5 	bl	8006a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fac6 	bl	8006a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	d122      	bne.n	8006538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d11b      	bne.n	8006538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0208 	mvn.w	r2, #8
 8006508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2204      	movs	r2, #4
 800650e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa99 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
 8006524:	e005      	b.n	8006532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa8b 	bl	8006a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fa9c 	bl	8006a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b10      	cmp	r3, #16
 8006544:	d122      	bne.n	800658c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2b10      	cmp	r3, #16
 8006552:	d11b      	bne.n	800658c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0210 	mvn.w	r2, #16
 800655c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2208      	movs	r2, #8
 8006562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa6f 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
 8006578:	e005      	b.n	8006586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa61 	bl	8006a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa72 	bl	8006a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b01      	cmp	r3, #1
 8006598:	d10e      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d107      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0201 	mvn.w	r2, #1
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fa ff04 	bl	80013c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c2:	2b80      	cmp	r3, #128	; 0x80
 80065c4:	d10e      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d0:	2b80      	cmp	r3, #128	; 0x80
 80065d2:	d107      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 ff26 	bl	8007430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f2:	d10e      	bne.n	8006612 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d107      	bne.n	8006612 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 ff19 	bl	8007444 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d10e      	bne.n	800663e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d107      	bne.n	800663e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fa20 	bl	8006a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b20      	cmp	r3, #32
 800664a:	d10e      	bne.n	800666a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b20      	cmp	r3, #32
 8006658:	d107      	bne.n	800666a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f06f 0220 	mvn.w	r2, #32
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fed9 	bl	800741c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800668e:	2302      	movs	r3, #2
 8006690:	e0ff      	b.n	8006892 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b14      	cmp	r3, #20
 800669e:	f200 80f0 	bhi.w	8006882 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066fd 	.word	0x080066fd
 80066ac:	08006883 	.word	0x08006883
 80066b0:	08006883 	.word	0x08006883
 80066b4:	08006883 	.word	0x08006883
 80066b8:	0800673d 	.word	0x0800673d
 80066bc:	08006883 	.word	0x08006883
 80066c0:	08006883 	.word	0x08006883
 80066c4:	08006883 	.word	0x08006883
 80066c8:	0800677f 	.word	0x0800677f
 80066cc:	08006883 	.word	0x08006883
 80066d0:	08006883 	.word	0x08006883
 80066d4:	08006883 	.word	0x08006883
 80066d8:	080067bf 	.word	0x080067bf
 80066dc:	08006883 	.word	0x08006883
 80066e0:	08006883 	.word	0x08006883
 80066e4:	08006883 	.word	0x08006883
 80066e8:	08006801 	.word	0x08006801
 80066ec:	08006883 	.word	0x08006883
 80066f0:	08006883 	.word	0x08006883
 80066f4:	08006883 	.word	0x08006883
 80066f8:	08006841 	.word	0x08006841
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fab6 	bl	8006c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0208 	orr.w	r2, r2, #8
 8006716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0204 	bic.w	r2, r2, #4
 8006726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6999      	ldr	r1, [r3, #24]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	619a      	str	r2, [r3, #24]
      break;
 800673a:	e0a5      	b.n	8006888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fb1c 	bl	8006d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6999      	ldr	r1, [r3, #24]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	021a      	lsls	r2, r3, #8
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	619a      	str	r2, [r3, #24]
      break;
 800677c:	e084      	b.n	8006888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fb7b 	bl	8006e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0208 	orr.w	r2, r2, #8
 8006798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0204 	bic.w	r2, r2, #4
 80067a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69d9      	ldr	r1, [r3, #28]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	61da      	str	r2, [r3, #28]
      break;
 80067bc:	e064      	b.n	8006888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fbd9 	bl	8006f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69d9      	ldr	r1, [r3, #28]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	021a      	lsls	r2, r3, #8
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	61da      	str	r2, [r3, #28]
      break;
 80067fe:	e043      	b.n	8006888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fc1c 	bl	8007044 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0208 	orr.w	r2, r2, #8
 800681a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0204 	bic.w	r2, r2, #4
 800682a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	691a      	ldr	r2, [r3, #16]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800683e:	e023      	b.n	8006888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fc5a 	bl	8007100 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800685a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800686a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	021a      	lsls	r2, r3, #8
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006880:	e002      	b.n	8006888 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	75fb      	strb	r3, [r7, #23]
      break;
 8006886:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop

0800689c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_ConfigClockSource+0x1c>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e0b6      	b.n	8006a26 <HAL_TIM_ConfigClockSource+0x18a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d03e      	beq.n	8006974 <HAL_TIM_ConfigClockSource+0xd8>
 80068f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068fa:	f200 8087 	bhi.w	8006a0c <HAL_TIM_ConfigClockSource+0x170>
 80068fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006902:	f000 8086 	beq.w	8006a12 <HAL_TIM_ConfigClockSource+0x176>
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690a:	d87f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x170>
 800690c:	2b70      	cmp	r3, #112	; 0x70
 800690e:	d01a      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0xaa>
 8006910:	2b70      	cmp	r3, #112	; 0x70
 8006912:	d87b      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x170>
 8006914:	2b60      	cmp	r3, #96	; 0x60
 8006916:	d050      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x11e>
 8006918:	2b60      	cmp	r3, #96	; 0x60
 800691a:	d877      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x170>
 800691c:	2b50      	cmp	r3, #80	; 0x50
 800691e:	d03c      	beq.n	800699a <HAL_TIM_ConfigClockSource+0xfe>
 8006920:	2b50      	cmp	r3, #80	; 0x50
 8006922:	d873      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x170>
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d058      	beq.n	80069da <HAL_TIM_ConfigClockSource+0x13e>
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d86f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x170>
 800692c:	2b30      	cmp	r3, #48	; 0x30
 800692e:	d064      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15e>
 8006930:	2b30      	cmp	r3, #48	; 0x30
 8006932:	d86b      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x170>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d060      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15e>
 8006938:	2b20      	cmp	r3, #32
 800693a:	d867      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x170>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05c      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15e>
 8006940:	2b10      	cmp	r3, #16
 8006942:	d05a      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15e>
 8006944:	e062      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6899      	ldr	r1, [r3, #8]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f000 fcad 	bl	80072b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	609a      	str	r2, [r3, #8]
      break;
 8006972:	e04f      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	6899      	ldr	r1, [r3, #8]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f000 fc96 	bl	80072b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006996:	609a      	str	r2, [r3, #8]
      break;
 8006998:	e03c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6859      	ldr	r1, [r3, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f000 fc0a 	bl	80071c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2150      	movs	r1, #80	; 0x50
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fc63 	bl	800727e <TIM_ITRx_SetConfig>
      break;
 80069b8:	e02c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6859      	ldr	r1, [r3, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f000 fc29 	bl	800721e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2160      	movs	r1, #96	; 0x60
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fc53 	bl	800727e <TIM_ITRx_SetConfig>
      break;
 80069d8:	e01c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6859      	ldr	r1, [r3, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f000 fbea 	bl	80071c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fc43 	bl	800727e <TIM_ITRx_SetConfig>
      break;
 80069f8:	e00c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f000 fc3a 	bl	800727e <TIM_ITRx_SetConfig>
      break;
 8006a0a:	e003      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	e000      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d107      	bne.n	8006ace <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006acc:	e02a      	b.n	8006b24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d107      	bne.n	8006ae8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2202      	movs	r2, #2
 8006adc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae6:	e01d      	b.n	8006b24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d107      	bne.n	8006b02 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2204      	movs	r2, #4
 8006af6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	e010      	b.n	8006b24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d107      	bne.n	8006b1c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2208      	movs	r2, #8
 8006b10:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b1a:	e003      	b.n	8006b24 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff ffb4 	bl	8006a92 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	771a      	strb	r2, [r3, #28]
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d103      	bne.n	8006b58 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7fa fc31 	bl	80013c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff ff5a 	bl	8006a2e <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a32      	ldr	r2, [pc, #200]	; (8006c60 <TIM_Base_SetConfig+0xdc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_Base_SetConfig+0x28>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0x28>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a2f      	ldr	r2, [pc, #188]	; (8006c64 <TIM_Base_SetConfig+0xe0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d108      	bne.n	8006bbe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a27      	ldr	r2, [pc, #156]	; (8006c60 <TIM_Base_SetConfig+0xdc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <TIM_Base_SetConfig+0x6a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d00f      	beq.n	8006bee <TIM_Base_SetConfig+0x6a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a24      	ldr	r2, [pc, #144]	; (8006c64 <TIM_Base_SetConfig+0xe0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <TIM_Base_SetConfig+0x6a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a23      	ldr	r2, [pc, #140]	; (8006c68 <TIM_Base_SetConfig+0xe4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d007      	beq.n	8006bee <TIM_Base_SetConfig+0x6a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <TIM_Base_SetConfig+0xe8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_Base_SetConfig+0x6a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a21      	ldr	r2, [pc, #132]	; (8006c70 <TIM_Base_SetConfig+0xec>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d108      	bne.n	8006c00 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <TIM_Base_SetConfig+0xdc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00b      	beq.n	8006c44 <TIM_Base_SetConfig+0xc0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <TIM_Base_SetConfig+0xe4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d007      	beq.n	8006c44 <TIM_Base_SetConfig+0xc0>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a0d      	ldr	r2, [pc, #52]	; (8006c6c <TIM_Base_SetConfig+0xe8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_Base_SetConfig+0xc0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <TIM_Base_SetConfig+0xec>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d103      	bne.n	8006c4c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	615a      	str	r2, [r3, #20]
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40012c00 	.word	0x40012c00
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40014000 	.word	0x40014000
 8006c6c:	40014400 	.word	0x40014400
 8006c70:	40014800 	.word	0x40014800

08006c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f023 0201 	bic.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 0302 	bic.w	r3, r3, #2
 8006cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a28      	ldr	r2, [pc, #160]	; (8006d70 <TIM_OC1_SetConfig+0xfc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00b      	beq.n	8006cec <TIM_OC1_SetConfig+0x78>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <TIM_OC1_SetConfig+0x100>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d007      	beq.n	8006cec <TIM_OC1_SetConfig+0x78>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a26      	ldr	r2, [pc, #152]	; (8006d78 <TIM_OC1_SetConfig+0x104>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d003      	beq.n	8006cec <TIM_OC1_SetConfig+0x78>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <TIM_OC1_SetConfig+0x108>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d10c      	bne.n	8006d06 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f023 0308 	bic.w	r3, r3, #8
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 0304 	bic.w	r3, r3, #4
 8006d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <TIM_OC1_SetConfig+0xfc>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00b      	beq.n	8006d26 <TIM_OC1_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <TIM_OC1_SetConfig+0x100>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d007      	beq.n	8006d26 <TIM_OC1_SetConfig+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <TIM_OC1_SetConfig+0x104>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <TIM_OC1_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <TIM_OC1_SetConfig+0x108>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d111      	bne.n	8006d4a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	621a      	str	r2, [r3, #32]
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40012c00 	.word	0x40012c00
 8006d74:	40014000 	.word	0x40014000
 8006d78:	40014400 	.word	0x40014400
 8006d7c:	40014800 	.word	0x40014800

08006d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f023 0210 	bic.w	r2, r3, #16
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f023 0320 	bic.w	r3, r3, #32
 8006dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <TIM_OC2_SetConfig+0xf0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d10d      	bne.n	8006e00 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <TIM_OC2_SetConfig+0xf0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00b      	beq.n	8006e20 <TIM_OC2_SetConfig+0xa0>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <TIM_OC2_SetConfig+0xf4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <TIM_OC2_SetConfig+0xa0>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a19      	ldr	r2, [pc, #100]	; (8006e78 <TIM_OC2_SetConfig+0xf8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_OC2_SetConfig+0xa0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <TIM_OC2_SetConfig+0xfc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d113      	bne.n	8006e48 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e26:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e2e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800

08006e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a23      	ldr	r2, [pc, #140]	; (8006f6c <TIM_OC3_SetConfig+0xec>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d10d      	bne.n	8006efe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006efc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1a      	ldr	r2, [pc, #104]	; (8006f6c <TIM_OC3_SetConfig+0xec>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00b      	beq.n	8006f1e <TIM_OC3_SetConfig+0x9e>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a19      	ldr	r2, [pc, #100]	; (8006f70 <TIM_OC3_SetConfig+0xf0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d007      	beq.n	8006f1e <TIM_OC3_SetConfig+0x9e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a18      	ldr	r2, [pc, #96]	; (8006f74 <TIM_OC3_SetConfig+0xf4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_OC3_SetConfig+0x9e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <TIM_OC3_SetConfig+0xf8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d113      	bne.n	8006f46 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	40012c00 	.word	0x40012c00
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800

08006f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	031b      	lsls	r3, r3, #12
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a16      	ldr	r2, [pc, #88]	; (8007034 <TIM_OC4_SetConfig+0xb8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00b      	beq.n	8006ff8 <TIM_OC4_SetConfig+0x7c>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a15      	ldr	r2, [pc, #84]	; (8007038 <TIM_OC4_SetConfig+0xbc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d007      	beq.n	8006ff8 <TIM_OC4_SetConfig+0x7c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a14      	ldr	r2, [pc, #80]	; (800703c <TIM_OC4_SetConfig+0xc0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_OC4_SetConfig+0x7c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a13      	ldr	r2, [pc, #76]	; (8007040 <TIM_OC4_SetConfig+0xc4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d109      	bne.n	800700c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	019b      	lsls	r3, r3, #6
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	621a      	str	r2, [r3, #32]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40014000 	.word	0x40014000
 800703c:	40014400 	.word	0x40014400
 8007040:	40014800 	.word	0x40014800

08007044 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007088:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	041b      	lsls	r3, r3, #16
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a15      	ldr	r2, [pc, #84]	; (80070f0 <TIM_OC5_SetConfig+0xac>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_OC5_SetConfig+0x72>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <TIM_OC5_SetConfig+0xb0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <TIM_OC5_SetConfig+0x72>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a13      	ldr	r2, [pc, #76]	; (80070f8 <TIM_OC5_SetConfig+0xb4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_OC5_SetConfig+0x72>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a12      	ldr	r2, [pc, #72]	; (80070fc <TIM_OC5_SetConfig+0xb8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d109      	bne.n	80070ca <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800

08007100 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800712e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	051b      	lsls	r3, r3, #20
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a16      	ldr	r2, [pc, #88]	; (80071b0 <TIM_OC6_SetConfig+0xb0>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00b      	beq.n	8007174 <TIM_OC6_SetConfig+0x74>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <TIM_OC6_SetConfig+0xb4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_OC6_SetConfig+0x74>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <TIM_OC6_SetConfig+0xb8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC6_SetConfig+0x74>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a13      	ldr	r2, [pc, #76]	; (80071bc <TIM_OC6_SetConfig+0xbc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d109      	bne.n	8007188 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800

080071c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	f023 0201 	bic.w	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f023 030a 	bic.w	r3, r3, #10
 80071fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800721e:	b480      	push	{r7}
 8007220:	b087      	sub	sp, #28
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0210 	bic.w	r2, r3, #16
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	031b      	lsls	r3, r3, #12
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800725a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	621a      	str	r2, [r3, #32]
}
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	f043 0307 	orr.w	r3, r3, #7
 80072a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	609a      	str	r2, [r3, #8]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	021a      	lsls	r2, r3, #8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4313      	orrs	r3, r2
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	bf00      	nop
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	2201      	movs	r2, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1a      	ldr	r2, [r3, #32]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	43db      	mvns	r3, r3
 8007316:	401a      	ands	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1a      	ldr	r2, [r3, #32]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	fa01 f303 	lsl.w	r3, r1, r3
 800732c:	431a      	orrs	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007354:	2302      	movs	r3, #2
 8007356:	e054      	b.n	8007402 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a24      	ldr	r2, [pc, #144]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d108      	bne.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007388:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a17      	ldr	r2, [pc, #92]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00e      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c0:	d009      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a13      	ldr	r2, [pc, #76]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a11      	ldr	r2, [pc, #68]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d10c      	bne.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40012c00 	.word	0x40012c00
 8007414:	40000400 	.word	0x40000400
 8007418:	40014000 	.word	0x40014000

0800741c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <__libc_init_array>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	4d0d      	ldr	r5, [pc, #52]	; (8007490 <__libc_init_array+0x38>)
 800745c:	4c0d      	ldr	r4, [pc, #52]	; (8007494 <__libc_init_array+0x3c>)
 800745e:	1b64      	subs	r4, r4, r5
 8007460:	10a4      	asrs	r4, r4, #2
 8007462:	2600      	movs	r6, #0
 8007464:	42a6      	cmp	r6, r4
 8007466:	d109      	bne.n	800747c <__libc_init_array+0x24>
 8007468:	4d0b      	ldr	r5, [pc, #44]	; (8007498 <__libc_init_array+0x40>)
 800746a:	4c0c      	ldr	r4, [pc, #48]	; (800749c <__libc_init_array+0x44>)
 800746c:	f000 f820 	bl	80074b0 <_init>
 8007470:	1b64      	subs	r4, r4, r5
 8007472:	10a4      	asrs	r4, r4, #2
 8007474:	2600      	movs	r6, #0
 8007476:	42a6      	cmp	r6, r4
 8007478:	d105      	bne.n	8007486 <__libc_init_array+0x2e>
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007480:	4798      	blx	r3
 8007482:	3601      	adds	r6, #1
 8007484:	e7ee      	b.n	8007464 <__libc_init_array+0xc>
 8007486:	f855 3b04 	ldr.w	r3, [r5], #4
 800748a:	4798      	blx	r3
 800748c:	3601      	adds	r6, #1
 800748e:	e7f2      	b.n	8007476 <__libc_init_array+0x1e>
 8007490:	080074f8 	.word	0x080074f8
 8007494:	080074f8 	.word	0x080074f8
 8007498:	080074f8 	.word	0x080074f8
 800749c:	080074fc 	.word	0x080074fc

080074a0 <memset>:
 80074a0:	4402      	add	r2, r0
 80074a2:	4603      	mov	r3, r0
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d100      	bne.n	80074aa <memset+0xa>
 80074a8:	4770      	bx	lr
 80074aa:	f803 1b01 	strb.w	r1, [r3], #1
 80074ae:	e7f9      	b.n	80074a4 <memset+0x4>

080074b0 <_init>:
 80074b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b2:	bf00      	nop
 80074b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b6:	bc08      	pop	{r3}
 80074b8:	469e      	mov	lr, r3
 80074ba:	4770      	bx	lr

080074bc <_fini>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	bf00      	nop
 80074c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c2:	bc08      	pop	{r3}
 80074c4:	469e      	mov	lr, r3
 80074c6:	4770      	bx	lr
