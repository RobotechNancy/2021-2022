
PMW3091_Bis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800544c  0800544c  0001544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e4  080054e4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054ec  080054ec  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080054f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  2000007c  08005570  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08005570  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107ee  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f95  00000000  00000000  0003089a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00032830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  00033380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ad7  00000000  00000000  00033e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dec7  00000000  00000000  000548df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3cc0  00000000  00000000  000627a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126466  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  001264bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005434 	.word	0x08005434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005434 	.word	0x08005434

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96e 	b.w	8000bd0 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468c      	mov	ip, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8083 	bne.w	8000a22 <__udivmoddi4+0x116>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d947      	bls.n	80009b2 <__udivmoddi4+0xa6>
 8000922:	fab2 f282 	clz	r2, r2
 8000926:	b142      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000928:	f1c2 0020 	rsb	r0, r2, #32
 800092c:	fa24 f000 	lsr.w	r0, r4, r0
 8000930:	4091      	lsls	r1, r2
 8000932:	4097      	lsls	r7, r2
 8000934:	ea40 0c01 	orr.w	ip, r0, r1
 8000938:	4094      	lsls	r4, r2
 800093a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800093e:	0c23      	lsrs	r3, r4, #16
 8000940:	fbbc f6f8 	udiv	r6, ip, r8
 8000944:	fa1f fe87 	uxth.w	lr, r7
 8000948:	fb08 c116 	mls	r1, r8, r6, ip
 800094c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000950:	fb06 f10e 	mul.w	r1, r6, lr
 8000954:	4299      	cmp	r1, r3
 8000956:	d909      	bls.n	800096c <__udivmoddi4+0x60>
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	f106 30ff 	add.w	r0, r6, #4294967295
 800095e:	f080 8119 	bcs.w	8000b94 <__udivmoddi4+0x288>
 8000962:	4299      	cmp	r1, r3
 8000964:	f240 8116 	bls.w	8000b94 <__udivmoddi4+0x288>
 8000968:	3e02      	subs	r6, #2
 800096a:	443b      	add	r3, r7
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb3 f0f8 	udiv	r0, r3, r8
 8000974:	fb08 3310 	mls	r3, r8, r0, r3
 8000978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800097c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000980:	45a6      	cmp	lr, r4
 8000982:	d909      	bls.n	8000998 <__udivmoddi4+0x8c>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 33ff 	add.w	r3, r0, #4294967295
 800098a:	f080 8105 	bcs.w	8000b98 <__udivmoddi4+0x28c>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f240 8102 	bls.w	8000b98 <__udivmoddi4+0x28c>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800099c:	eba4 040e 	sub.w	r4, r4, lr
 80009a0:	2600      	movs	r6, #0
 80009a2:	b11d      	cbz	r5, 80009ac <__udivmoddi4+0xa0>
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	2300      	movs	r3, #0
 80009a8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	b902      	cbnz	r2, 80009b6 <__udivmoddi4+0xaa>
 80009b4:	deff      	udf	#255	; 0xff
 80009b6:	fab2 f282 	clz	r2, r2
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d150      	bne.n	8000a60 <__udivmoddi4+0x154>
 80009be:	1bcb      	subs	r3, r1, r7
 80009c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c4:	fa1f f887 	uxth.w	r8, r7
 80009c8:	2601      	movs	r6, #1
 80009ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ce:	0c21      	lsrs	r1, r4, #16
 80009d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d8:	fb08 f30c 	mul.w	r3, r8, ip
 80009dc:	428b      	cmp	r3, r1
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0xe4>
 80009e0:	1879      	adds	r1, r7, r1
 80009e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0xe2>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	f200 80e9 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 80009ee:	4684      	mov	ip, r0
 80009f0:	1ac9      	subs	r1, r1, r3
 80009f2:	b2a3      	uxth	r3, r4
 80009f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a00:	fb08 f800 	mul.w	r8, r8, r0
 8000a04:	45a0      	cmp	r8, r4
 8000a06:	d907      	bls.n	8000a18 <__udivmoddi4+0x10c>
 8000a08:	193c      	adds	r4, r7, r4
 8000a0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x10a>
 8000a10:	45a0      	cmp	r8, r4
 8000a12:	f200 80d9 	bhi.w	8000bc8 <__udivmoddi4+0x2bc>
 8000a16:	4618      	mov	r0, r3
 8000a18:	eba4 0408 	sub.w	r4, r4, r8
 8000a1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a20:	e7bf      	b.n	80009a2 <__udivmoddi4+0x96>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d909      	bls.n	8000a3a <__udivmoddi4+0x12e>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	f000 80b1 	beq.w	8000b8e <__udivmoddi4+0x282>
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a32:	4630      	mov	r0, r6
 8000a34:	4631      	mov	r1, r6
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	fab3 f683 	clz	r6, r3
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d14a      	bne.n	8000ad8 <__udivmoddi4+0x1cc>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d302      	bcc.n	8000a4c <__udivmoddi4+0x140>
 8000a46:	4282      	cmp	r2, r0
 8000a48:	f200 80b8 	bhi.w	8000bbc <__udivmoddi4+0x2b0>
 8000a4c:	1a84      	subs	r4, r0, r2
 8000a4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a52:	2001      	movs	r0, #1
 8000a54:	468c      	mov	ip, r1
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d0a8      	beq.n	80009ac <__udivmoddi4+0xa0>
 8000a5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a5e:	e7a5      	b.n	80009ac <__udivmoddi4+0xa0>
 8000a60:	f1c2 0320 	rsb	r3, r2, #32
 8000a64:	fa20 f603 	lsr.w	r6, r0, r3
 8000a68:	4097      	lsls	r7, r2
 8000a6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a72:	40d9      	lsrs	r1, r3
 8000a74:	4330      	orrs	r0, r6
 8000a76:	0c03      	lsrs	r3, r0, #16
 8000a78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a7c:	fa1f f887 	uxth.w	r8, r7
 8000a80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f108 	mul.w	r1, r6, r8
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x19c>
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a9a:	f080 808d 	bcs.w	8000bb8 <__udivmoddi4+0x2ac>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 808a 	bls.w	8000bb8 <__udivmoddi4+0x2ac>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	443b      	add	r3, r7
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b281      	uxth	r1, r0
 8000aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab8:	fb00 f308 	mul.w	r3, r0, r8
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x1c4>
 8000ac0:	1879      	adds	r1, r7, r1
 8000ac2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ac6:	d273      	bcs.n	8000bb0 <__udivmoddi4+0x2a4>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d971      	bls.n	8000bb0 <__udivmoddi4+0x2a4>
 8000acc:	3802      	subs	r0, #2
 8000ace:	4439      	add	r1, r7
 8000ad0:	1acb      	subs	r3, r1, r3
 8000ad2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ad6:	e778      	b.n	80009ca <__udivmoddi4+0xbe>
 8000ad8:	f1c6 0c20 	rsb	ip, r6, #32
 8000adc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ae0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ae4:	431c      	orrs	r4, r3
 8000ae6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aea:	fa01 f306 	lsl.w	r3, r1, r6
 8000aee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000af2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000af6:	431f      	orrs	r7, r3
 8000af8:	0c3b      	lsrs	r3, r7, #16
 8000afa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000afe:	fa1f f884 	uxth.w	r8, r4
 8000b02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b0e:	458a      	cmp	sl, r1
 8000b10:	fa02 f206 	lsl.w	r2, r2, r6
 8000b14:	fa00 f306 	lsl.w	r3, r0, r6
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x220>
 8000b1a:	1861      	adds	r1, r4, r1
 8000b1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b20:	d248      	bcs.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b22:	458a      	cmp	sl, r1
 8000b24:	d946      	bls.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b26:	f1a9 0902 	sub.w	r9, r9, #2
 8000b2a:	4421      	add	r1, r4
 8000b2c:	eba1 010a 	sub.w	r1, r1, sl
 8000b30:	b2bf      	uxth	r7, r7
 8000b32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b3e:	fb00 f808 	mul.w	r8, r0, r8
 8000b42:	45b8      	cmp	r8, r7
 8000b44:	d907      	bls.n	8000b56 <__udivmoddi4+0x24a>
 8000b46:	19e7      	adds	r7, r4, r7
 8000b48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4c:	d22e      	bcs.n	8000bac <__udivmoddi4+0x2a0>
 8000b4e:	45b8      	cmp	r8, r7
 8000b50:	d92c      	bls.n	8000bac <__udivmoddi4+0x2a0>
 8000b52:	3802      	subs	r0, #2
 8000b54:	4427      	add	r7, r4
 8000b56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b5a:	eba7 0708 	sub.w	r7, r7, r8
 8000b5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b62:	454f      	cmp	r7, r9
 8000b64:	46c6      	mov	lr, r8
 8000b66:	4649      	mov	r1, r9
 8000b68:	d31a      	bcc.n	8000ba0 <__udivmoddi4+0x294>
 8000b6a:	d017      	beq.n	8000b9c <__udivmoddi4+0x290>
 8000b6c:	b15d      	cbz	r5, 8000b86 <__udivmoddi4+0x27a>
 8000b6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b72:	eb67 0701 	sbc.w	r7, r7, r1
 8000b76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b7a:	40f2      	lsrs	r2, r6
 8000b7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b80:	40f7      	lsrs	r7, r6
 8000b82:	e9c5 2700 	strd	r2, r7, [r5]
 8000b86:	2600      	movs	r6, #0
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e70b      	b.n	80009ac <__udivmoddi4+0xa0>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e9      	b.n	800096c <__udivmoddi4+0x60>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6fd      	b.n	8000998 <__udivmoddi4+0x8c>
 8000b9c:	4543      	cmp	r3, r8
 8000b9e:	d2e5      	bcs.n	8000b6c <__udivmoddi4+0x260>
 8000ba0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ba4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7df      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bac:	4608      	mov	r0, r1
 8000bae:	e7d2      	b.n	8000b56 <__udivmoddi4+0x24a>
 8000bb0:	4660      	mov	r0, ip
 8000bb2:	e78d      	b.n	8000ad0 <__udivmoddi4+0x1c4>
 8000bb4:	4681      	mov	r9, r0
 8000bb6:	e7b9      	b.n	8000b2c <__udivmoddi4+0x220>
 8000bb8:	4666      	mov	r6, ip
 8000bba:	e775      	b.n	8000aa8 <__udivmoddi4+0x19c>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e74a      	b.n	8000a56 <__udivmoddi4+0x14a>
 8000bc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bc4:	4439      	add	r1, r7
 8000bc6:	e713      	b.n	80009f0 <__udivmoddi4+0xe4>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	e724      	b.n	8000a18 <__udivmoddi4+0x10c>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	0000      	movs	r0, r0
	...

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fb3b 	bl	8001256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f898 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 f966 	bl	8000eb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 f934 	bl	8000e54 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000bec:	f000 f8f4 	bl	8000dd8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Tx_len = sprintf (buffer, "init\r\n");
 8000bf0:	493b      	ldr	r1, [pc, #236]	; (8000ce0 <main+0x108>)
 8000bf2:	483c      	ldr	r0, [pc, #240]	; (8000ce4 <main+0x10c>)
 8000bf4:	f003 fff0 	bl	8004bd8 <siprintf>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <main+0x110>)
 8000bfe:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*) buffer, Tx_len, 100);
 8000c00:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <main+0x110>)
 8000c02:	881a      	ldrh	r2, [r3, #0]
 8000c04:	2364      	movs	r3, #100	; 0x64
 8000c06:	4937      	ldr	r1, [pc, #220]	; (8000ce4 <main+0x10c>)
 8000c08:	4838      	ldr	r0, [pc, #224]	; (8000cec <main+0x114>)
 8000c0a:	f002 feff 	bl	8003a0c <HAL_UART_Transmit>

  status = PMW3901_Init(&PMW3901_Descriptor);
 8000c0e:	4838      	ldr	r0, [pc, #224]	; (8000cf0 <main+0x118>)
 8000c10:	f003 fbf4 	bl	80043fc <PMW3901_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <main+0x11c>)
 8000c1a:	701a      	strb	r2, [r3, #0]
  Tx_len = sprintf (buffer, "init status = %d\r\n",status);
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <main+0x11c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4935      	ldr	r1, [pc, #212]	; (8000cf8 <main+0x120>)
 8000c24:	482f      	ldr	r0, [pc, #188]	; (8000ce4 <main+0x10c>)
 8000c26:	f003 ffd7 	bl	8004bd8 <siprintf>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <main+0x110>)
 8000c30:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100);
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <main+0x110>)
 8000c34:	881a      	ldrh	r2, [r3, #0]
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	492a      	ldr	r1, [pc, #168]	; (8000ce4 <main+0x10c>)
 8000c3a:	482c      	ldr	r0, [pc, #176]	; (8000cec <main+0x114>)
 8000c3c:	f002 fee6 	bl	8003a0c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status = PMW3901_Read_Variation(&var_x, &var_y);
 8000c40:	492e      	ldr	r1, [pc, #184]	; (8000cfc <main+0x124>)
 8000c42:	482f      	ldr	r0, [pc, #188]	; (8000d00 <main+0x128>)
 8000c44:	f003 ff40 	bl	8004ac8 <PMW3901_Read_Variation>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <main+0x11c>)
 8000c4e:	701a      	strb	r2, [r3, #0]

	  dx = COEF_CAPTEUR_BLEU_X * var_x;
 8000c50:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <main+0x128>)
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fd86 	bl	8000768 <__aeabi_i2d>
 8000c5c:	a31c      	add	r3, pc, #112	; (adr r3, 8000cd0 <main+0xf8>)
 8000c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c62:	f7ff fb05 	bl	8000270 <__aeabi_dmul>
 8000c66:	4602      	mov	r2, r0
 8000c68:	460b      	mov	r3, r1
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f7ff fde5 	bl	800083c <__aeabi_d2f>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <main+0x12c>)
 8000c76:	6013      	str	r3, [r2, #0]
	  posX = posX + dx;
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <main+0x130>)
 8000c7a:	ed93 7a00 	vldr	s14, [r3]
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <main+0x12c>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <main+0x130>)
 8000c8a:	edc3 7a00 	vstr	s15, [r3]

	  dy = COEF_CAPTEUR_BLEU_Y * var_y;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <main+0x124>)
 8000c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd67 	bl	8000768 <__aeabi_i2d>
 8000c9a:	a30f      	add	r3, pc, #60	; (adr r3, 8000cd8 <main+0x100>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	f7ff fae6 	bl	8000270 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4610      	mov	r0, r2
 8000caa:	4619      	mov	r1, r3
 8000cac:	f7ff fdc6 	bl	800083c <__aeabi_d2f>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <main+0x134>)
 8000cb4:	6013      	str	r3, [r2, #0]
	  posY = posY + dy;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <main+0x138>)
 8000cb8:	ed93 7a00 	vldr	s14, [r3]
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <main+0x134>)
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <main+0x138>)
 8000cc8:	edc3 7a00 	vstr	s15, [r3]
	  status = PMW3901_Read_Variation(&var_x, &var_y);
 8000ccc:	e7b8      	b.n	8000c40 <main+0x68>
 8000cce:	bf00      	nop
 8000cd0:	9096bb99 	.word	0x9096bb99
 8000cd4:	3fde7a0f 	.word	0x3fde7a0f
 8000cd8:	1cac0831 	.word	0x1cac0831
 8000cdc:	3fd3645a 	.word	0x3fd3645a
 8000ce0:	0800544c 	.word	0x0800544c
 8000ce4:	200000b8 	.word	0x200000b8
 8000ce8:	200000b4 	.word	0x200000b4
 8000cec:	20000520 	.word	0x20000520
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	200005a6 	.word	0x200005a6
 8000cf8:	08005454 	.word	0x08005454
 8000cfc:	200005a4 	.word	0x200005a4
 8000d00:	200004b8 	.word	0x200004b8
 8000d04:	200000a0 	.word	0x200000a0
 8000d08:	20000098 	.word	0x20000098
 8000d0c:	200000a4 	.word	0x200000a4
 8000d10:	2000009c 	.word	0x2000009c

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b096      	sub	sp, #88	; 0x58
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2244      	movs	r2, #68	; 0x44
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 ff50 	bl	8004bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d3a:	f000 fd87 	bl	800184c <HAL_PWREx_ControlVoltageScaling>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d44:	f000 f916 	bl	8000f74 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d48:	f000 fd62 	bl	8001810 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <SystemClock_Config+0xc0>)
 8000d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <SystemClock_Config+0xc0>)
 8000d54:	f023 0318 	bic.w	r3, r3, #24
 8000d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d5c:	2314      	movs	r3, #20
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d70:	2302      	movs	r3, #2
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d74:	2301      	movs	r3, #1
 8000d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d80:	2307      	movs	r3, #7
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fdb1 	bl	80018f8 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d9c:	f000 f8ea 	bl	8000f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2303      	movs	r3, #3
 8000da6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	2101      	movs	r1, #1
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 f9af 	bl	800211c <HAL_RCC_ClockConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dc4:	f000 f8d6 	bl	8000f74 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dc8:	f001 fdc0 	bl	800294c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dcc:	bf00      	nop
 8000dce:	3758      	adds	r7, #88	; 0x58
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000dde:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <MX_SPI1_Init+0x78>)
 8000de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000df2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000df6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e0e:	2238      	movs	r2, #56	; 0x38
 8000e10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e26:	2207      	movs	r2, #7
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e32:	2208      	movs	r2, #8
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_SPI1_Init+0x74>)
 8000e38:	f001 fe8a 	bl	8002b50 <HAL_SPI_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e42:	f000 f897 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200004bc 	.word	0x200004bc
 8000e50:	40013000 	.word	0x40013000

08000e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <MX_USART2_UART_Init+0x5c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USART2_UART_Init+0x58>)
 8000e98:	f002 fd6a 	bl	8003970 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea2:	f000 f867 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000520 	.word	0x20000520
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2110      	movs	r1, #16
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f000 fc61 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2108      	movs	r1, #8
 8000f22:	4813      	ldr	r0, [pc, #76]	; (8000f70 <MX_GPIO_Init+0xbc>)
 8000f24:	f000 fc5c 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f000 fae3 	bl	800150c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f46:	2308      	movs	r3, #8
 8000f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_GPIO_Init+0xbc>)
 8000f5e:	f000 fad5 	bl	800150c <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6613      	str	r3, [r2, #96]	; 0x60
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_SPI_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d128      	bne.n	800103c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800101a:	23e0      	movs	r3, #224	; 0xe0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102a:	2305      	movs	r3, #5
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 fa68 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40013000 	.word	0x40013000
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b09e      	sub	sp, #120	; 0x78
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	2254      	movs	r2, #84	; 0x54
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fdab 	bl	8004bc8 <memset>
  if(huart->Instance==USART2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a28      	ldr	r2, [pc, #160]	; (8001118 <HAL_UART_MspInit+0xcc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d148      	bne.n	800110e <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800107c:	2302      	movs	r3, #2
 800107e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fa6b 	bl	8002564 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001094:	f7ff ff6e 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_UART_MspInit+0xd0>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <HAL_UART_MspInit+0xd0>)
 800109e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a2:	6593      	str	r3, [r2, #88]	; 0x58
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_UART_MspInit+0xd0>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_UART_MspInit+0xd0>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_UART_MspInit+0xd0>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_UART_MspInit+0xd0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010c8:	2304      	movs	r3, #4
 80010ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d8:	2307      	movs	r3, #7
 80010da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f000 fa11 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010fc:	2303      	movs	r3, #3
 80010fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 f9ff 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3778      	adds	r7, #120	; 0x78
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004400 	.word	0x40004400
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f8c8 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f003 fce6 	bl	8004b74 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000c000 	.word	0x2000c000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	200000a8 	.word	0x200000a8
 80011dc:	200005c0 	.word	0x200005c0

080011e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001208:	f7ff ffea 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopForever+0x6>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopForever+0xe>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopForever+0x16>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001232:	f003 fca5 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001236:	f7ff fccf 	bl	8000bd8 <main>

0800123a <LoopForever>:

LoopForever:
    b LoopForever
 800123a:	e7fe      	b.n	800123a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800123c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001248:	080054f4 	.word	0x080054f4
  ldr r2, =_sbss
 800124c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001250:	200005c0 	.word	0x200005c0

08001254 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC1_IRQHandler>

08001256 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f91f 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f80e 	bl	8001288 <HAL_InitTick>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	e001      	b.n	800127c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001278:	f7ff fe82 	bl	8000f80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800127c:	79fb      	ldrb	r3, [r7, #7]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_InitTick+0x6c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d023      	beq.n	80012e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_InitTick+0x70>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_InitTick+0x6c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f91d 	bl	80014f2 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10f      	bne.n	80012de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d809      	bhi.n	80012d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 f8f5 	bl	80014ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_InitTick+0x74>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e007      	b.n	80012e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e004      	b.n	80012e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e001      	b.n	80012e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000014 	.word	0x20000014
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	20000010 	.word	0x20000010

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000014 	.word	0x20000014
 8001324:	200005a8 	.word	0x200005a8

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200005a8 	.word	0x200005a8

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff47 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff5c 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff8e 	bl	80013f8 <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffb0 	bl	8001460 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e148      	b.n	80017ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2101      	movs	r1, #1
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	4013      	ands	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 813a 	beq.w	80017a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d005      	beq.n	800154c <HAL_GPIO_Init+0x40>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d130      	bne.n	80015ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001582:	2201      	movs	r2, #1
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f003 0201 	and.w	r2, r3, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d017      	beq.n	80015ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d123      	bne.n	800163e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	6939      	ldr	r1, [r7, #16]
 800163a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0203 	and.w	r2, r3, #3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8094 	beq.w	80017a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	4b52      	ldr	r3, [pc, #328]	; (80017cc <HAL_GPIO_Init+0x2c0>)
 8001682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001684:	4a51      	ldr	r2, [pc, #324]	; (80017cc <HAL_GPIO_Init+0x2c0>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6613      	str	r3, [r2, #96]	; 0x60
 800168c:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <HAL_GPIO_Init+0x2c0>)
 800168e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001698:	4a4d      	ldr	r2, [pc, #308]	; (80017d0 <HAL_GPIO_Init+0x2c4>)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	220f      	movs	r2, #15
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016c2:	d00d      	beq.n	80016e0 <HAL_GPIO_Init+0x1d4>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a43      	ldr	r2, [pc, #268]	; (80017d4 <HAL_GPIO_Init+0x2c8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d007      	beq.n	80016dc <HAL_GPIO_Init+0x1d0>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a42      	ldr	r2, [pc, #264]	; (80017d8 <HAL_GPIO_Init+0x2cc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_GPIO_Init+0x1cc>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e004      	b.n	80016e2 <HAL_GPIO_Init+0x1d6>
 80016d8:	2307      	movs	r3, #7
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0x1d6>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_GPIO_Init+0x1d6>
 80016e0:	2300      	movs	r3, #0
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	f002 0203 	and.w	r2, r2, #3
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	4093      	lsls	r3, r2
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f2:	4937      	ldr	r1, [pc, #220]	; (80017d0 <HAL_GPIO_Init+0x2c4>)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001700:	4b36      	ldr	r3, [pc, #216]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001724:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001778:	4a18      	ldr	r2, [pc, #96]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f47f aeaf 	bne.w	800151c <HAL_GPIO_Init+0x10>
  }
}
 80017be:	bf00      	nop
 80017c0:	bf00      	nop
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000800 	.word	0x48000800
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40007000 	.word	0x40007000

08001830 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <HAL_PWREx_GetVoltageRange+0x18>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40007000 	.word	0x40007000

0800184c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800185a:	d130      	bne.n	80018be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001868:	d038      	beq.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001872:	4a1e      	ldr	r2, [pc, #120]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2232      	movs	r2, #50	; 0x32
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0c9b      	lsrs	r3, r3, #18
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001890:	e002      	b.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3b01      	subs	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a4:	d102      	bne.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f2      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	d110      	bne.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e00f      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ca:	d007      	beq.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018d4:	4a05      	ldr	r2, [pc, #20]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40007000 	.word	0x40007000
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	431bde83 	.word	0x431bde83

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e3fe      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190a:	4ba1      	ldr	r3, [pc, #644]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001914:	4b9e      	ldr	r3, [pc, #632]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80e4 	beq.w	8001af4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_RCC_OscConfig+0x4a>
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b0c      	cmp	r3, #12
 8001936:	f040 808b 	bne.w	8001a50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b01      	cmp	r3, #1
 800193e:	f040 8087 	bne.w	8001a50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001942:	4b93      	ldr	r3, [pc, #588]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_RCC_OscConfig+0x62>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e3d6      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	4b8c      	ldr	r3, [pc, #560]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <HAL_RCC_OscConfig+0x7c>
 800196a:	4b89      	ldr	r3, [pc, #548]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001972:	e005      	b.n	8001980 <HAL_RCC_OscConfig+0x88>
 8001974:	4b86      	ldr	r3, [pc, #536]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001980:	4293      	cmp	r3, r2
 8001982:	d223      	bcs.n	80019cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fd8b 	bl	80024a4 <RCC_SetFlashLatencyFromMSIRange>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e3b7      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001998:	4b7d      	ldr	r3, [pc, #500]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a7c      	ldr	r2, [pc, #496]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b7a      	ldr	r3, [pc, #488]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4977      	ldr	r1, [pc, #476]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b6:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	4972      	ldr	r1, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
 80019ca:	e025      	b.n	8001a18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019cc:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6f      	ldr	r2, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b6d      	ldr	r3, [pc, #436]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	496a      	ldr	r1, [pc, #424]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ea:	4b69      	ldr	r3, [pc, #420]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	4965      	ldr	r1, [pc, #404]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fd4b 	bl	80024a4 <RCC_SetFlashLatencyFromMSIRange>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e377      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a18:	f000 fc80 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b5c      	ldr	r3, [pc, #368]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	495a      	ldr	r1, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x29c>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_OscConfig+0x2a0>)
 8001a36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a38:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_OscConfig+0x2a4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc23 	bl	8001288 <HAL_InitTick>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d052      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	e35b      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d032      	beq.n	8001abe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a58:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a4c      	ldr	r2, [pc, #304]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc60 	bl	8001328 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fc5c 	bl	8001328 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e344      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7e:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a40      	ldr	r2, [pc, #256]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	493b      	ldr	r1, [pc, #236]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	4936      	ldr	r1, [pc, #216]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e01a      	b.n	8001af4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fc2d 	bl	8001328 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fc29 	bl	8001328 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e311      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x1da>
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001af2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d074      	beq.n	8001bea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x21a>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d10e      	bne.n	8001b2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d10b      	bne.n	8001b2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d064      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d160      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e2ee      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x24a>
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e01d      	b.n	8001b7e <HAL_RCC_OscConfig+0x286>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x26e>
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x286>
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_RCC_OscConfig+0x298>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff fbcf 	bl	8001328 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8c:	e011      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2ba>
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	08005468 	.word	0x08005468
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fbc2 	bl	8001328 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e2aa      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb2:	4baf      	ldr	r3, [pc, #700]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x2a8>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fbb2 	bl	8001328 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fbae 	bl	8001328 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e296      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bda:	4ba5      	ldr	r3, [pc, #660]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2d0>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d060      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_OscConfig+0x310>
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d119      	bne.n	8001c36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d116      	bne.n	8001c36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c08:	4b99      	ldr	r3, [pc, #612]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x328>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e273      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b93      	ldr	r3, [pc, #588]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	4990      	ldr	r1, [pc, #576]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c34:	e040      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d023      	beq.n	8001c86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3e:	4b8c      	ldr	r3, [pc, #560]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a8b      	ldr	r2, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fb6d 	bl	8001328 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff fb69 	bl	8001328 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e251      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c64:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b7f      	ldr	r3, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	497c      	ldr	r1, [pc, #496]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	e018      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b7a      	ldr	r3, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a79      	ldr	r2, [pc, #484]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff fb49 	bl	8001328 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fb45 	bl	8001328 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e22d      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cac:	4b70      	ldr	r3, [pc, #448]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d03c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fb24 	bl	8001328 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fb20 	bl	8001328 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e208      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf6:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ef      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x3ec>
 8001d04:	e01b      	b.n	8001d3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d06:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0c:	4a58      	ldr	r2, [pc, #352]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb07 	bl	8001328 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fb03 	bl	8001328 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1eb      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d30:	4b4f      	ldr	r3, [pc, #316]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ef      	bne.n	8001d1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80a6 	beq.w	8001e98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d50:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10d      	bne.n	8001d78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	4a43      	ldr	r2, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d66:	6593      	str	r3, [r2, #88]	; 0x58
 8001d68:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d74:	2301      	movs	r3, #1
 8001d76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d78:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_OscConfig+0x57c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d118      	bne.n	8001db6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d84:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_RCC_OscConfig+0x57c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3a      	ldr	r2, [pc, #232]	; (8001e74 <HAL_RCC_OscConfig+0x57c>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d90:	f7ff faca 	bl	8001328 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d98:	f7ff fac6 	bl	8001328 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1ae      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001daa:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_RCC_OscConfig+0x57c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4d8>
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc4:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dce:	e024      	b.n	8001e1a <HAL_RCC_OscConfig+0x522>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d110      	bne.n	8001dfa <HAL_RCC_OscConfig+0x502>
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df8:	e00f      	b.n	8001e1a <HAL_RCC_OscConfig+0x522>
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e00:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001e12:	f023 0304 	bic.w	r3, r3, #4
 8001e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff fa81 	bl	8001328 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fa7d 	bl	8001328 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e163      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x578>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ed      	beq.n	8001e2a <HAL_RCC_OscConfig+0x532>
 8001e4e:	e01a      	b.n	8001e86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fa6a 	bl	8001328 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e56:	e00f      	b.n	8001e78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7ff fa66 	bl	8001328 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d906      	bls.n	8001e78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e14c      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e78:	4ba5      	ldr	r3, [pc, #660]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1e8      	bne.n	8001e58 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e86:	7ffb      	ldrb	r3, [r7, #31]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8c:	4ba0      	ldr	r3, [pc, #640]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a9f      	ldr	r2, [pc, #636]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d03c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001eac:	4b98      	ldr	r3, [pc, #608]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb2:	4a97      	ldr	r2, [pc, #604]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fa34 	bl	8001328 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec4:	f7ff fa30 	bl	8001328 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e118      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ed6:	4b8e      	ldr	r3, [pc, #568]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5cc>
 8001ee4:	e01b      	b.n	8001f1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ee6:	4b8a      	ldr	r3, [pc, #552]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eec:	4a88      	ldr	r2, [pc, #544]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fa17 	bl	8001328 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001efe:	f7ff fa13 	bl	8001328 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0fb      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f10:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ef      	bne.n	8001efe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80ef 	beq.w	8002106 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	f040 80c5 	bne.w	80020bc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f32:	4b77      	ldr	r3, [pc, #476]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0203 	and.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d12c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	3b01      	subs	r3, #1
 8001f52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d123      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d11b      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d113      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d109      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d067      	beq.n	8002070 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d062      	beq.n	800206c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fa6:	4b5a      	ldr	r3, [pc, #360]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0a8      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a55      	ldr	r2, [pc, #340]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001fbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc2:	f7ff f9b1 	bl	8001328 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff f9ad 	bl	8001328 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e095      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x81c>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ff8:	3a01      	subs	r2, #1
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	4311      	orrs	r1, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002002:	0212      	lsls	r2, r2, #8
 8002004:	4311      	orrs	r1, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800200a:	0852      	lsrs	r2, r2, #1
 800200c:	3a01      	subs	r2, #1
 800200e:	0552      	lsls	r2, r2, #21
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002016:	0852      	lsrs	r2, r2, #1
 8002018:	3a01      	subs	r2, #1
 800201a:	0652      	lsls	r2, r2, #25
 800201c:	4311      	orrs	r1, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002022:	06d2      	lsls	r2, r2, #27
 8002024:	430a      	orrs	r2, r1
 8002026:	493a      	ldr	r1, [pc, #232]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8002028:	4313      	orrs	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a37      	ldr	r2, [pc, #220]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8002032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002036:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002042:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002044:	f7ff f970 	bl	8001328 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff f96c 	bl	8001328 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e054      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206a:	e04c      	b.n	8002106 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e04b      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d144      	bne.n	8002106 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a23      	ldr	r2, [pc, #140]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002088:	4b21      	ldr	r3, [pc, #132]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002092:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002094:	f7ff f948 	bl	8001328 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f944 	bl	8001328 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e02c      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x7a4>
 80020ba:	e024      	b.n	8002106 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d01f      	beq.n	8002102 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 80020c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7ff f92b 	bl	8001328 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff f927 	bl	8001328 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	4905      	ldr	r1, [pc, #20]	; (8002110 <HAL_RCC_OscConfig+0x818>)
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_OscConfig+0x820>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
 8002100:	e001      	b.n	8002106 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	019d808c 	.word	0x019d808c
 8002118:	feeefffc 	.word	0xfeeefffc

0800211c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0e7      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002130:	4b75      	ldr	r3, [pc, #468]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d910      	bls.n	8002160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b72      	ldr	r3, [pc, #456]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 0207 	bic.w	r2, r3, #7
 8002146:	4970      	ldr	r1, [pc, #448]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b6e      	ldr	r3, [pc, #440]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0cf      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d010      	beq.n	800218e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	4b66      	ldr	r3, [pc, #408]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002178:	429a      	cmp	r2, r3
 800217a:	d908      	bls.n	800218e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4960      	ldr	r1, [pc, #384]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d04c      	beq.n	8002234 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d121      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0a6      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	4b54      	ldr	r3, [pc, #336]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e09a      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d2:	4b4e      	ldr	r3, [pc, #312]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e08e      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e2:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e086      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4943      	ldr	r1, [pc, #268]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002204:	f7ff f890 	bl	8001328 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff f88c 	bl	8001328 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e06e      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b3a      	ldr	r3, [pc, #232]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d010      	beq.n	8002262 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800224c:	429a      	cmp	r2, r3
 800224e:	d208      	bcs.n	8002262 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	492b      	ldr	r1, [pc, #172]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d210      	bcs.n	8002292 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 0207 	bic.w	r2, r3, #7
 8002278:	4923      	ldr	r1, [pc, #140]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCC_ClockConfig+0x1ec>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e036      	b.n	8002300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4918      	ldr	r1, [pc, #96]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d009      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4910      	ldr	r1, [pc, #64]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022d0:	f000 f824 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	490b      	ldr	r1, [pc, #44]	; (8002310 <HAL_RCC_ClockConfig+0x1f4>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80022ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1fc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe ffc7 	bl	8001288 <HAL_InitTick>
 80022fa:	4603      	mov	r3, r0
 80022fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80022fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	08005468 	.word	0x08005468
 8002314:	2000000c 	.word	0x2000000c
 8002318:	20000010 	.word	0x20000010

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x34>
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d121      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d11e      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002350:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800235c:	4b31      	ldr	r3, [pc, #196]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e005      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002378:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <HAL_RCC_GetSysClockFreq+0x10c>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d102      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_GetSysClockFreq+0x110>)
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	e004      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a0:	4b23      	ldr	r3, [pc, #140]	; (8002430 <HAL_RCC_GetSysClockFreq+0x114>)
 80023a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d134      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d003      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0xac>
 80023c0:	e005      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_RCC_GetSysClockFreq+0x110>)
 80023c4:	617b      	str	r3, [r7, #20]
      break;
 80023c6:	e005      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ca:	617b      	str	r3, [r7, #20]
      break;
 80023cc:	e002      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	617b      	str	r3, [r7, #20]
      break;
 80023d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	3301      	adds	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	fb02 f203 	mul.w	r2, r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	0e5b      	lsrs	r3, r3, #25
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	3301      	adds	r3, #1
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002414:	69bb      	ldr	r3, [r7, #24]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	08005480 	.word	0x08005480
 800242c:	00f42400 	.word	0x00f42400
 8002430:	007a1200 	.word	0x007a1200

08002434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_RCC_GetHCLKFreq+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	2000000c 	.word	0x2000000c

0800244c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002450:	f7ff fff0 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4904      	ldr	r1, [pc, #16]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	08005478 	.word	0x08005478

08002478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800247c:	f7ff ffda 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0adb      	lsrs	r3, r3, #11
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	08005478 	.word	0x08005478

080024a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024b0:	4b2a      	ldr	r3, [pc, #168]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024bc:	f7ff f9b8 	bl	8001830 <HAL_PWREx_GetVoltageRange>
 80024c0:	6178      	str	r0, [r7, #20]
 80024c2:	e014      	b.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b25      	ldr	r3, [pc, #148]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a24      	ldr	r2, [pc, #144]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024dc:	f7ff f9a8 	bl	8001830 <HAL_PWREx_GetVoltageRange>
 80024e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	4a1d      	ldr	r2, [pc, #116]	; (800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d10b      	bne.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d919      	bls.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002500:	d902      	bls.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002502:	2302      	movs	r3, #2
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	e013      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002508:	2301      	movs	r3, #1
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	e010      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d902      	bls.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002514:	2303      	movs	r3, #3
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e00a      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d102      	bne.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002520:	2302      	movs	r3, #2
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e004      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b70      	cmp	r3, #112	; 0x70
 800252a:	d101      	bne.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800252c:	2301      	movs	r3, #1
 800252e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 0207 	bic.w	r2, r3, #7
 8002538:	4909      	ldr	r1, [pc, #36]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	40022000 	.word	0x40022000

08002564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800256c:	2300      	movs	r3, #0
 800256e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002570:	2300      	movs	r3, #0
 8002572:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	2b00      	cmp	r3, #0
 800257e:	d031      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002588:	d01a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800258a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800258e:	d814      	bhi.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002590:	2b00      	cmp	r3, #0
 8002592:	d009      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002598:	d10f      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800259a:	4bac      	ldr	r3, [pc, #688]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4aab      	ldr	r2, [pc, #684]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025a6:	e00c      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f9dc 	bl	800296c <RCCEx_PLLSAI1_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b8:	e003      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	74fb      	strb	r3, [r7, #19]
      break;
 80025be:	e000      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80025c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c8:	4ba0      	ldr	r3, [pc, #640]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	499d      	ldr	r1, [pc, #628]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025de:	e001      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8099 	beq.w	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025f6:	4b95      	ldr	r3, [pc, #596]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00d      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b8f      	ldr	r3, [pc, #572]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a8e      	ldr	r2, [pc, #568]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
 8002618:	4b8c      	ldr	r3, [pc, #560]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002624:	2301      	movs	r3, #1
 8002626:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002628:	4b89      	ldr	r3, [pc, #548]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a88      	ldr	r2, [pc, #544]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002632:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002634:	f7fe fe78 	bl	8001328 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800263a:	e009      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fe fe74 	bl	8001328 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d902      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	74fb      	strb	r3, [r7, #19]
        break;
 800264e:	e005      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002650:	4b7f      	ldr	r3, [pc, #508]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d155      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002662:	4b7a      	ldr	r3, [pc, #488]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01e      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	429a      	cmp	r2, r3
 800267c:	d019      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	4a6e      	ldr	r2, [pc, #440]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800269a:	4b6c      	ldr	r3, [pc, #432]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	4a6a      	ldr	r2, [pc, #424]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026aa:	4a68      	ldr	r2, [pc, #416]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d016      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fe34 	bl	8001328 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c2:	e00b      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7fe fe30 	bl	8001328 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d902      	bls.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	74fb      	strb	r3, [r7, #19]
            break;
 80026da:	e006      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026dc:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0ec      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fe:	4953      	ldr	r1, [pc, #332]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002706:	e004      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
 800270c:	e001      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002712:	7c7b      	ldrb	r3, [r7, #17]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002718:	4b4c      	ldr	r3, [pc, #304]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a4b      	ldr	r2, [pc, #300]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800271e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4943      	ldr	r1, [pc, #268]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002752:	4b3e      	ldr	r3, [pc, #248]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	f023 020c 	bic.w	r2, r3, #12
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	493a      	ldr	r1, [pc, #232]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	4932      	ldr	r1, [pc, #200]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	4929      	ldr	r1, [pc, #164]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	4921      	ldr	r1, [pc, #132]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4918      	ldr	r1, [pc, #96]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4910      	ldr	r1, [pc, #64]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d02c      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283c:	d10a      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283e:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	4a02      	ldr	r2, [pc, #8]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002848:	60d3      	str	r3, [r2, #12]
 800284a:	e015      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800285c:	d10c      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	2101      	movs	r1, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f881 	bl	800296c <RCCEx_PLLSAI1_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d028      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	492d      	ldr	r1, [pc, #180]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a27      	ldr	r2, [pc, #156]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ae:	60d3      	str	r3, [r2, #12]
 80028b0:	e011      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f852 	bl	800296c <RCCEx_PLLSAI1_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01c      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f0:	4915      	ldr	r1, [pc, #84]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002900:	d10c      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	2102      	movs	r1, #2
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f82f 	bl	800296c <RCCEx_PLLSAI1_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	4904      	ldr	r1, [pc, #16]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800293e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000

0800296c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800297a:	4b74      	ldr	r3, [pc, #464]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002986:	4b71      	ldr	r3, [pc, #452]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0203 	and.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d10d      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
       ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800299e:	4b6b      	ldr	r3, [pc, #428]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
       ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d047      	beq.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e044      	b.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d018      	beq.n	80029f2 <RCCEx_PLLSAI1_Config+0x86>
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d825      	bhi.n	8002a10 <RCCEx_PLLSAI1_Config+0xa4>
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d002      	beq.n	80029ce <RCCEx_PLLSAI1_Config+0x62>
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d009      	beq.n	80029e0 <RCCEx_PLLSAI1_Config+0x74>
 80029cc:	e020      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ce:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d11d      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029de:	e01a      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e0:	4b5a      	ldr	r3, [pc, #360]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f0:	e013      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029f2:	4b56      	ldr	r3, [pc, #344]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029fe:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a0e:	e006      	b.n	8002a1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e004      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	4943      	ldr	r1, [pc, #268]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d17c      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a48:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a3f      	ldr	r2, [pc, #252]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe fc68 	bl	8001328 <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a5a:	e009      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a5c:	f7fe fc64 	bl	8001328 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a6e:	e005      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a70:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ef      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d15f      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d110      	bne.n	8002aaa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a88:	4b30      	ldr	r3, [pc, #192]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	0211      	lsls	r1, r2, #8
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	06d2      	lsls	r2, r2, #27
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	492a      	ldr	r1, [pc, #168]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	610b      	str	r3, [r1, #16]
 8002aa8:	e027      	b.n	8002afa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d112      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ab8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	0211      	lsls	r1, r2, #8
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6912      	ldr	r2, [r2, #16]
 8002ac6:	0852      	lsrs	r2, r2, #1
 8002ac8:	3a01      	subs	r2, #1
 8002aca:	0552      	lsls	r2, r2, #21
 8002acc:	430a      	orrs	r2, r1
 8002ace:	491f      	ldr	r1, [pc, #124]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	610b      	str	r3, [r1, #16]
 8002ad4:	e011      	b.n	8002afa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ade:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6892      	ldr	r2, [r2, #8]
 8002ae6:	0211      	lsls	r1, r2, #8
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6952      	ldr	r2, [r2, #20]
 8002aec:	0852      	lsrs	r2, r2, #1
 8002aee:	3a01      	subs	r2, #1
 8002af0:	0652      	lsls	r2, r2, #25
 8002af2:	430a      	orrs	r2, r1
 8002af4:	4915      	ldr	r1, [pc, #84]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe fc0f 	bl	8001328 <HAL_GetTick>
 8002b0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b0c:	e009      	b.n	8002b22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b0e:	f7fe fc0b 	bl	8001328 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d902      	bls.n	8002b22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b20:	e005      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ef      	beq.n	8002b0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4903      	ldr	r1, [pc, #12]	; (8002b4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e095      	b.n	8002c8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b72:	d009      	beq.n	8002b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
 8002b7a:	e005      	b.n	8002b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fa10 	bl	8000fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bc8:	d902      	bls.n	8002bd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e002      	b.n	8002bd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bde:	d007      	beq.n	8002bf0 <HAL_SPI_Init+0xa0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002be8:	d002      	beq.n	8002bf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	ea42 0103 	orr.w	r1, r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	0c1b      	lsrs	r3, r3, #16
 8002c4c:	f003 0204 	and.w	r2, r3, #4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c6c:	ea42 0103 	orr.w	r1, r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b088      	sub	sp, #32
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_SPI_Transmit+0x22>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e158      	b.n	8002f6a <HAL_SPI_Transmit+0x2d4>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc0:	f7fe fb32 	bl	8001328 <HAL_GetTick>
 8002cc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cda:	e13d      	b.n	8002f58 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_SPI_Transmit+0x52>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cec:	e134      	b.n	8002f58 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d38:	d10f      	bne.n	8002d5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d007      	beq.n	8002d78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d80:	d94b      	bls.n	8002e1a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Transmit+0xfa>
 8002d8a:	8afb      	ldrh	r3, [r7, #22]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d13e      	bne.n	8002e0e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	881a      	ldrh	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002db4:	e02b      	b.n	8002e0e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d112      	bne.n	8002dea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002de8:	e011      	b.n	8002e0e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dea:	f7fe fa9d 	bl	8001328 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d803      	bhi.n	8002e02 <HAL_SPI_Transmit+0x16c>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d102      	bne.n	8002e08 <HAL_SPI_Transmit+0x172>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e0c:	e0a4      	b.n	8002f58 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ce      	bne.n	8002db6 <HAL_SPI_Transmit+0x120>
 8002e18:	e07c      	b.n	8002f14 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_SPI_Transmit+0x192>
 8002e22:	8afb      	ldrh	r3, [r7, #22]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d170      	bne.n	8002f0a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d912      	bls.n	8002e58 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	1c9a      	adds	r2, r3, #2
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b02      	subs	r3, #2
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e56:	e058      	b.n	8002f0a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	7812      	ldrb	r2, [r2, #0]
 8002e64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e7e:	e044      	b.n	8002f0a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d12b      	bne.n	8002ee6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d912      	bls.n	8002ebe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b02      	subs	r3, #2
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ebc:	e025      	b.n	8002f0a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ee4:	e011      	b.n	8002f0a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee6:	f7fe fa1f 	bl	8001328 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d803      	bhi.n	8002efe <HAL_SPI_Transmit+0x268>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d102      	bne.n	8002f04 <HAL_SPI_Transmit+0x26e>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f08:	e026      	b.n	8002f58 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1b5      	bne.n	8002e80 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	6839      	ldr	r1, [r7, #0]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fce3 	bl	80038e4 <SPI_EndRxTxTransaction>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e000      	b.n	8002f58 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002f56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b088      	sub	sp, #32
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f8e:	d112      	bne.n	8002fb6 <HAL_SPI_Receive+0x44>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10e      	bne.n	8002fb6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f910 	bl	80031d2 <HAL_SPI_TransmitReceive>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	e109      	b.n	80031ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_SPI_Receive+0x52>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e102      	b.n	80031ca <HAL_SPI_Receive+0x258>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fcc:	f7fe f9ac 	bl	8001328 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d002      	beq.n	8002fe4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fe2:	e0e9      	b.n	80031b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_SPI_Receive+0x7e>
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ff4:	e0e0      	b.n	80031b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003040:	d908      	bls.n	8003054 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	e007      	b.n	8003064 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003062:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306c:	d10f      	bne.n	800308e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d007      	beq.n	80030ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030b4:	d867      	bhi.n	8003186 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030b6:	e030      	b.n	800311a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d117      	bne.n	80030f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f103 020c 	add.w	r2, r3, #12
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80030f4:	e011      	b.n	800311a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f6:	f7fe f917 	bl	8001328 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d803      	bhi.n	800310e <HAL_SPI_Receive+0x19c>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d102      	bne.n	8003114 <HAL_SPI_Receive+0x1a2>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003118:	e04e      	b.n	80031b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1c8      	bne.n	80030b8 <HAL_SPI_Receive+0x146>
 8003126:	e034      	b.n	8003192 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d115      	bne.n	8003162 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	b292      	uxth	r2, r2
 8003142:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	1c9a      	adds	r2, r3, #2
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003160:	e011      	b.n	8003186 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003162:	f7fe f8e1 	bl	8001328 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d803      	bhi.n	800317a <HAL_SPI_Receive+0x208>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d102      	bne.n	8003180 <HAL_SPI_Receive+0x20e>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003184:	e018      	b.n	80031b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ca      	bne.n	8003128 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	6839      	ldr	r1, [r7, #0]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fb4c 	bl	8003834 <SPI_EndRxTransaction>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
 80031b4:	e000      	b.n	80031b8 <HAL_SPI_Receive+0x246>
  }

error :
 80031b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b08a      	sub	sp, #40	; 0x28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031e0:	2301      	movs	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x26>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e1fb      	b.n	80035f0 <HAL_SPI_TransmitReceive+0x41e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003200:	f7fe f892 	bl	8001328 <HAL_GetTick>
 8003204:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800320c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800321c:	7efb      	ldrb	r3, [r7, #27]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d00e      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x6e>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003228:	d106      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x66>
 8003232:	7efb      	ldrb	r3, [r7, #27]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d003      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003238:	2302      	movs	r3, #2
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800323e:	e1cd      	b.n	80035dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x80>
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003258:	e1c0      	b.n	80035dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b04      	cmp	r3, #4
 8003264:	d003      	beq.n	800326e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2205      	movs	r2, #5
 800326a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	887a      	ldrh	r2, [r7, #2]
 800327e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	887a      	ldrh	r2, [r7, #2]
 800329a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032b0:	d802      	bhi.n	80032b8 <HAL_SPI_TransmitReceive+0xe6>
 80032b2:	8a3b      	ldrh	r3, [r7, #16]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d908      	bls.n	80032ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	e007      	b.n	80032da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d007      	beq.n	80032f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003300:	d97c      	bls.n	80033fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x13e>
 800330a:	8a7b      	ldrh	r3, [r7, #18]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d169      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	881a      	ldrh	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	1c9a      	adds	r2, r3, #2
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003334:	e056      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d11b      	bne.n	800337c <HAL_SPI_TransmitReceive+0x1aa>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_SPI_TransmitReceive+0x1aa>
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	2b01      	cmp	r3, #1
 8003352:	d113      	bne.n	800337c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d11c      	bne.n	80033c4 <HAL_SPI_TransmitReceive+0x1f2>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	b292      	uxth	r2, r2
 80033a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033c0:	2301      	movs	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033c4:	f7fd ffb0 	bl	8001328 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d807      	bhi.n	80033e4 <HAL_SPI_TransmitReceive+0x212>
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033da:	d003      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033e2:	e0fb      	b.n	80035dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1a3      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x164>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d19d      	bne.n	8003336 <HAL_SPI_TransmitReceive+0x164>
 80033fa:	e0df      	b.n	80035bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_SPI_TransmitReceive+0x23a>
 8003404:	8a7b      	ldrh	r3, [r7, #18]
 8003406:	2b01      	cmp	r3, #1
 8003408:	f040 80cb 	bne.w	80035a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d912      	bls.n	800343c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	881a      	ldrh	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b02      	subs	r3, #2
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800343a:	e0b2      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003462:	e09e      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d134      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x30a>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02f      	beq.n	80034dc <HAL_SPI_TransmitReceive+0x30a>
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	2b01      	cmp	r3, #1
 8003480:	d12c      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d912      	bls.n	80034b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	881a      	ldrh	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	1c9a      	adds	r2, r3, #2
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b02      	subs	r3, #2
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034b0:	e012      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	7812      	ldrb	r2, [r2, #0]
 80034be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d148      	bne.n	800357c <HAL_SPI_TransmitReceive+0x3aa>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d042      	beq.n	800357c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d923      	bls.n	800354a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	b292      	uxth	r2, r2
 800350e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	1c9a      	adds	r2, r3, #2
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b02      	subs	r3, #2
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d81f      	bhi.n	8003578 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	e016      	b.n	8003578 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f103 020c 	add.w	r2, r3, #12
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	7812      	ldrb	r2, [r2, #0]
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003578:	2301      	movs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800357c:	f7fd fed4 	bl	8001328 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003588:	429a      	cmp	r2, r3
 800358a:	d803      	bhi.n	8003594 <HAL_SPI_TransmitReceive+0x3c2>
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d102      	bne.n	800359a <HAL_SPI_TransmitReceive+0x3c8>
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035a0:	e01c      	b.n	80035dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af5b 	bne.w	8003464 <HAL_SPI_TransmitReceive+0x292>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f47f af54 	bne.w	8003464 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f98f 	bl	80038e4 <SPI_EndRxTxTransaction>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d006      	beq.n	80035da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	661a      	str	r2, [r3, #96]	; 0x60
 80035d8:	e000      	b.n	80035dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80035da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003608:	f7fd fe8e 	bl	8001328 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	4413      	add	r3, r2
 8003616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003618:	f7fd fe86 	bl	8001328 <HAL_GetTick>
 800361c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800361e:	4b39      	ldr	r3, [pc, #228]	; (8003704 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	015b      	lsls	r3, r3, #5
 8003624:	0d1b      	lsrs	r3, r3, #20
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800362e:	e054      	b.n	80036da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d050      	beq.n	80036da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003638:	f7fd fe76 	bl	8001328 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	429a      	cmp	r2, r3
 8003646:	d902      	bls.n	800364e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d13d      	bne.n	80036ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800365c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003666:	d111      	bne.n	800368c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003670:	d004      	beq.n	800367c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d107      	bne.n	800368c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003694:	d10f      	bne.n	80036b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e017      	b.n	80036fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d19b      	bne.n	8003630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c

08003708 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800371a:	f7fd fe05 	bl	8001328 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	4413      	add	r3, r2
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800372a:	f7fd fdfd 	bl	8001328 <HAL_GetTick>
 800372e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003738:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00da      	lsls	r2, r3, #3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	0d1b      	lsrs	r3, r3, #20
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003750:	e060      	b.n	8003814 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003758:	d107      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0x62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003768:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d050      	beq.n	8003814 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003772:	f7fd fdd9 	bl	8001328 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d13d      	bne.n	8003804 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003796:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a0:	d111      	bne.n	80037c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037aa:	d004      	beq.n	80037b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d107      	bne.n	80037c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ce:	d10f      	bne.n	80037f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e010      	b.n	8003826 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3b01      	subs	r3, #1
 8003812:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d196      	bne.n	8003752 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3728      	adds	r7, #40	; 0x28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	2000000c 	.word	0x2000000c

08003834 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003848:	d111      	bne.n	800386e <SPI_EndRxTransaction+0x3a>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003852:	d004      	beq.n	800385e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385c:	d107      	bne.n	800386e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff febd 	bl	80035f8 <SPI_WaitFlagStateUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e023      	b.n	80038dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389c:	d11d      	bne.n	80038da <SPI_EndRxTransaction+0xa6>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a6:	d004      	beq.n	80038b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b0:	d113      	bne.n	80038da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7ff ff22 	bl	8003708 <SPI_WaitFifoStateUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e000      	b.n	80038dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7ff ff03 	bl	8003708 <SPI_WaitFifoStateUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e027      	b.n	8003968 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2200      	movs	r2, #0
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff fe68 	bl	80035f8 <SPI_WaitFlagStateUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e014      	b.n	8003968 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2200      	movs	r2, #0
 8003946:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f7ff fedc 	bl	8003708 <SPI_WaitFifoStateUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e000      	b.n	8003968 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e040      	b.n	8003a04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fb5a 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8c0 	bl	8003b34 <UART_SetConfig>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e022      	b.n	8003a04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fabe 	bl	8003f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fb45 	bl	800408c <UART_CheckIdleState>
 8003a02:	4603      	mov	r3, r0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	f040 8082 	bne.w	8003b2a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_UART_Transmit+0x26>
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07a      	b.n	8003b2c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Transmit+0x38>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e073      	b.n	8003b2c <HAL_UART_Transmit+0x120>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2221      	movs	r2, #33	; 0x21
 8003a58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fc65 	bl	8001328 <HAL_GetTick>
 8003a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a78:	d108      	bne.n	8003a8c <HAL_UART_Transmit+0x80>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	e003      	b.n	8003a94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a9c:	e02d      	b.n	8003afa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fb38 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e039      	b.n	8003b2c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	881a      	ldrh	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aca:	b292      	uxth	r2, r2
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	e008      	b.n	8003ae8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	b292      	uxth	r2, r2
 8003ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1cb      	bne.n	8003a9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2140      	movs	r1, #64	; 0x40
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fb04 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e005      	b.n	8003b2c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3720      	adds	r7, #32
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4baf      	ldr	r3, [pc, #700]	; (8003e1c <UART_SetConfig+0x2e8>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	69f9      	ldr	r1, [r7, #28]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4aa4      	ldr	r2, [pc, #656]	; (8003e20 <UART_SetConfig+0x2ec>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a9b      	ldr	r2, [pc, #620]	; (8003e24 <UART_SetConfig+0x2f0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d121      	bne.n	8003bfe <UART_SetConfig+0xca>
 8003bba:	4b9b      	ldr	r3, [pc, #620]	; (8003e28 <UART_SetConfig+0x2f4>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d817      	bhi.n	8003bf8 <UART_SetConfig+0xc4>
 8003bc8:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0x9c>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bed 	.word	0x08003bed
 8003bd8:	08003be7 	.word	0x08003be7
 8003bdc:	08003bf3 	.word	0x08003bf3
 8003be0:	2301      	movs	r3, #1
 8003be2:	76fb      	strb	r3, [r7, #27]
 8003be4:	e070      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003be6:	2302      	movs	r3, #2
 8003be8:	76fb      	strb	r3, [r7, #27]
 8003bea:	e06d      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003bec:	2304      	movs	r3, #4
 8003bee:	76fb      	strb	r3, [r7, #27]
 8003bf0:	e06a      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	76fb      	strb	r3, [r7, #27]
 8003bf6:	e067      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	76fb      	strb	r3, [r7, #27]
 8003bfc:	e064      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a8a      	ldr	r2, [pc, #552]	; (8003e2c <UART_SetConfig+0x2f8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d132      	bne.n	8003c6e <UART_SetConfig+0x13a>
 8003c08:	4b87      	ldr	r3, [pc, #540]	; (8003e28 <UART_SetConfig+0x2f4>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d828      	bhi.n	8003c68 <UART_SetConfig+0x134>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <UART_SetConfig+0xe8>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c69 	.word	0x08003c69
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003c5d 	.word	0x08003c5d
 8003c30:	08003c69 	.word	0x08003c69
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003c69 	.word	0x08003c69
 8003c3c:	08003c57 	.word	0x08003c57
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c69 	.word	0x08003c69
 8003c4c:	08003c63 	.word	0x08003c63
 8003c50:	2300      	movs	r3, #0
 8003c52:	76fb      	strb	r3, [r7, #27]
 8003c54:	e038      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003c56:	2302      	movs	r3, #2
 8003c58:	76fb      	strb	r3, [r7, #27]
 8003c5a:	e035      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	76fb      	strb	r3, [r7, #27]
 8003c60:	e032      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003c62:	2308      	movs	r3, #8
 8003c64:	76fb      	strb	r3, [r7, #27]
 8003c66:	e02f      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	76fb      	strb	r3, [r7, #27]
 8003c6c:	e02c      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6b      	ldr	r2, [pc, #428]	; (8003e20 <UART_SetConfig+0x2ec>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d125      	bne.n	8003cc4 <UART_SetConfig+0x190>
 8003c78:	4b6b      	ldr	r3, [pc, #428]	; (8003e28 <UART_SetConfig+0x2f4>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c86:	d017      	beq.n	8003cb8 <UART_SetConfig+0x184>
 8003c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c8c:	d817      	bhi.n	8003cbe <UART_SetConfig+0x18a>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d00b      	beq.n	8003cac <UART_SetConfig+0x178>
 8003c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c98:	d811      	bhi.n	8003cbe <UART_SetConfig+0x18a>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <UART_SetConfig+0x172>
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d006      	beq.n	8003cb2 <UART_SetConfig+0x17e>
 8003ca4:	e00b      	b.n	8003cbe <UART_SetConfig+0x18a>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	76fb      	strb	r3, [r7, #27]
 8003caa:	e00d      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003cac:	2302      	movs	r3, #2
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	e00a      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	76fb      	strb	r3, [r7, #27]
 8003cb6:	e007      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	76fb      	strb	r3, [r7, #27]
 8003cbc:	e004      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	76fb      	strb	r3, [r7, #27]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x194>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a54      	ldr	r2, [pc, #336]	; (8003e20 <UART_SetConfig+0x2ec>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d173      	bne.n	8003dba <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cd2:	7efb      	ldrb	r3, [r7, #27]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d824      	bhi.n	8003d22 <UART_SetConfig+0x1ee>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <UART_SetConfig+0x1ac>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d23 	.word	0x08003d23
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d13 	.word	0x08003d13
 8003cf4:	08003d23 	.word	0x08003d23
 8003cf8:	08003d23 	.word	0x08003d23
 8003cfc:	08003d23 	.word	0x08003d23
 8003d00:	08003d1b 	.word	0x08003d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7fe fba2 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8003d08:	6178      	str	r0, [r7, #20]
        break;
 8003d0a:	e00f      	b.n	8003d2c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b48      	ldr	r3, [pc, #288]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003d0e:	617b      	str	r3, [r7, #20]
        break;
 8003d10:	e00c      	b.n	8003d2c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7fe fb03 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003d16:	6178      	str	r0, [r7, #20]
        break;
 8003d18:	e008      	b.n	8003d2c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1e:	617b      	str	r3, [r7, #20]
        break;
 8003d20:	e004      	b.n	8003d2c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	76bb      	strb	r3, [r7, #26]
        break;
 8003d2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80fc 	beq.w	8003f2c <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d305      	bcc.n	8003d50 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d902      	bls.n	8003d56 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	76bb      	strb	r3, [r7, #26]
 8003d54:	e0ea      	b.n	8003f2c <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f04f 0100 	mov.w	r1, #0
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	020b      	lsls	r3, r1, #8
 8003d68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d6c:	0202      	lsls	r2, r0, #8
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	6849      	ldr	r1, [r1, #4]
 8003d72:	0849      	lsrs	r1, r1, #1
 8003d74:	4608      	mov	r0, r1
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	1814      	adds	r4, r2, r0
 8003d7c:	eb43 0501 	adc.w	r5, r3, r1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7fc fda5 	bl	80008dc <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4613      	mov	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da0:	d308      	bcc.n	8003db4 <UART_SetConfig+0x280>
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da8:	d204      	bcs.n	8003db4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	e0bb      	b.n	8003f2c <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	76bb      	strb	r3, [r7, #26]
 8003db8:	e0b8      	b.n	8003f2c <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc2:	d167      	bne.n	8003e94 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8003dc4:	7efb      	ldrb	r3, [r7, #27]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d834      	bhi.n	8003e34 <UART_SetConfig+0x300>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <UART_SetConfig+0x29c>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003e05 	.word	0x08003e05
 8003ddc:	08003e35 	.word	0x08003e35
 8003de0:	08003e0b 	.word	0x08003e0b
 8003de4:	08003e35 	.word	0x08003e35
 8003de8:	08003e35 	.word	0x08003e35
 8003dec:	08003e35 	.word	0x08003e35
 8003df0:	08003e13 	.word	0x08003e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df4:	f7fe fb2a 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8003df8:	6178      	str	r0, [r7, #20]
        break;
 8003dfa:	e020      	b.n	8003e3e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7fe fb3c 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8003e00:	6178      	str	r0, [r7, #20]
        break;
 8003e02:	e01c      	b.n	8003e3e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <UART_SetConfig+0x2fc>)
 8003e06:	617b      	str	r3, [r7, #20]
        break;
 8003e08:	e019      	b.n	8003e3e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0a:	f7fe fa87 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003e0e:	6178      	str	r0, [r7, #20]
        break;
 8003e10:	e015      	b.n	8003e3e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e16:	617b      	str	r3, [r7, #20]
        break;
 8003e18:	e011      	b.n	8003e3e <UART_SetConfig+0x30a>
 8003e1a:	bf00      	nop
 8003e1c:	efff69f3 	.word	0xefff69f3
 8003e20:	40008000 	.word	0x40008000
 8003e24:	40013800 	.word	0x40013800
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40004400 	.word	0x40004400
 8003e30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	76bb      	strb	r3, [r7, #26]
        break;
 8003e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d073      	beq.n	8003f2c <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	005a      	lsls	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b0f      	cmp	r3, #15
 8003e5e:	d916      	bls.n	8003e8e <UART_SetConfig+0x35a>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e66:	d212      	bcs.n	8003e8e <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f023 030f 	bic.w	r3, r3, #15
 8003e70:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	89fb      	ldrh	r3, [r7, #14]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	89fa      	ldrh	r2, [r7, #14]
 8003e8a:	60da      	str	r2, [r3, #12]
 8003e8c:	e04e      	b.n	8003f2c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	76bb      	strb	r3, [r7, #26]
 8003e92:	e04b      	b.n	8003f2c <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e94:	7efb      	ldrb	r3, [r7, #27]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d827      	bhi.n	8003eea <UART_SetConfig+0x3b6>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0x36c>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003ec5 	.word	0x08003ec5
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	08003eeb 	.word	0x08003eeb
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003eeb 	.word	0x08003eeb
 8003eb8:	08003eeb 	.word	0x08003eeb
 8003ebc:	08003eeb 	.word	0x08003eeb
 8003ec0:	08003ee3 	.word	0x08003ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f7fe fac2 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8003ec8:	6178      	str	r0, [r7, #20]
        break;
 8003eca:	e013      	b.n	8003ef4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ecc:	f7fe fad4 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8003ed0:	6178      	str	r0, [r7, #20]
        break;
 8003ed2:	e00f      	b.n	8003ef4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <UART_SetConfig+0x410>)
 8003ed6:	617b      	str	r3, [r7, #20]
        break;
 8003ed8:	e00c      	b.n	8003ef4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eda:	f7fe fa1f 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003ede:	6178      	str	r0, [r7, #20]
        break;
 8003ee0:	e008      	b.n	8003ef4 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee6:	617b      	str	r3, [r7, #20]
        break;
 8003ee8:	e004      	b.n	8003ef4 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	76bb      	strb	r3, [r7, #26]
        break;
 8003ef2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d018      	beq.n	8003f2c <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	085a      	lsrs	r2, r3, #1
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b0f      	cmp	r3, #15
 8003f12:	d909      	bls.n	8003f28 <UART_SetConfig+0x3f4>
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1a:	d205      	bcs.n	8003f28 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	e001      	b.n	8003f2c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f38:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bdb0      	pop	{r4, r5, r7, pc}
 8003f42:	bf00      	nop
 8003f44:	00f42400 	.word	0x00f42400

08003f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d10a      	bne.n	800405e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800409c:	f7fd f944 	bl	8001328 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d10e      	bne.n	80040ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f82d 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e023      	b.n	8004116 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d10e      	bne.n	80040fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f817 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e00d      	b.n	8004116 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b09c      	sub	sp, #112	; 0x70
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	e0a5      	b.n	800427c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	f000 80a1 	beq.w	800427c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fd f8f5 	bl	8001328 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <UART_WaitOnFlagUntilTimeout+0x32>
 800414a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414c:	2b00      	cmp	r3, #0
 800414e:	d13e      	bne.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004164:	667b      	str	r3, [r7, #100]	; 0x64
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004170:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800417c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e6      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	663b      	str	r3, [r7, #96]	; 0x60
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e067      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d04f      	beq.n	800427c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ea:	d147      	bne.n	800427c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800420a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
 8004216:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800421a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	613b      	str	r3, [r7, #16]
   return(result);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3308      	adds	r3, #8
 8004246:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004248:	623a      	str	r2, [r7, #32]
 800424a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	69f9      	ldr	r1, [r7, #28]
 800424e:	6a3a      	ldr	r2, [r7, #32]
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	61bb      	str	r3, [r7, #24]
   return(result);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e010      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	429a      	cmp	r2, r3
 8004298:	f43f af4a 	beq.w	8004130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3770      	adds	r7, #112	; 0x70
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <PMW3901_RegWrite>:

PMW3901_Descriptor_t *Descriptor;


PMW3901_Status_t PMW3901_RegWrite(uint8_t reg, uint8_t val)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	460a      	mov	r2, r1
 80042b2:	71fb      	strb	r3, [r7, #7]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef SPI_status;

	reg |= 0x80;
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042be:	71fb      	strb	r3, [r7, #7]
	uint8_t send[2]={reg,val};
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	733b      	strb	r3, [r7, #12]
 80042c4:	79bb      	ldrb	r3, [r7, #6]
 80042c6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <PMW3901_RegWrite+0x74>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6858      	ldr	r0, [r3, #4]
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <PMW3901_RegWrite+0x74>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	891b      	ldrh	r3, [r3, #8]
 80042d4:	2200      	movs	r2, #0
 80042d6:	4619      	mov	r1, r3
 80042d8:	f7fd fa82 	bl	80017e0 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, send, 2, 1000);
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <PMW3901_RegWrite+0x74>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	f107 010c 	add.w	r1, r7, #12
 80042e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ea:	2202      	movs	r2, #2
 80042ec:	f7fe fcd3 	bl	8002c96 <HAL_SPI_Transmit>
 80042f0:	4603      	mov	r3, r0
 80042f2:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <PMW3901_RegWrite+0x56>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e00a      	b.n	8004314 <PMW3901_RegWrite+0x6c>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <PMW3901_RegWrite+0x74>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6858      	ldr	r0, [r3, #4]
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <PMW3901_RegWrite+0x74>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	891b      	ldrh	r3, [r3, #8]
 800430a:	2201      	movs	r2, #1
 800430c:	4619      	mov	r1, r3
 800430e:	f7fd fa67 	bl	80017e0 <HAL_GPIO_WritePin>

	return PMW3901_SUCCESS;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200005ac 	.word	0x200005ac

08004320 <PMW3901_RegRead>:

PMW3901_Status_t PMW3901_RegRead(uint8_t reg, uint8_t *dest)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	6039      	str	r1, [r7, #0]
 800432a:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef SPI_status;

	uint8_t value;

	reg &= ~0x80;
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004332:	b2db      	uxtb	r3, r3
 8004334:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8004336:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <PMW3901_RegRead+0x90>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6858      	ldr	r0, [r3, #4]
 800433c:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <PMW3901_RegRead+0x90>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	891b      	ldrh	r3, [r3, #8]
 8004342:	2200      	movs	r2, #0
 8004344:	4619      	mov	r1, r3
 8004346:	f7fd fa4b 	bl	80017e0 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, &reg, 1, 1000);
 800434a:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <PMW3901_RegRead+0x90>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	1df9      	adds	r1, r7, #7
 8004352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004356:	2201      	movs	r2, #1
 8004358:	f7fe fc9d 	bl	8002c96 <HAL_SPI_Transmit>
 800435c:	4603      	mov	r3, r0
 800435e:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <PMW3901_RegRead+0x4a>
 8004366:	2302      	movs	r3, #2
 8004368:	e01e      	b.n	80043a8 <PMW3901_RegRead+0x88>

	SPI_status = HAL_SPI_Receive(HSPI, &value, 1, 1000);
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <PMW3901_RegRead+0x90>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	f107 010e 	add.w	r1, r7, #14
 8004374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004378:	2201      	movs	r2, #1
 800437a:	f7fe fdfa 	bl	8002f72 <HAL_SPI_Receive>
 800437e:	4603      	mov	r3, r0
 8004380:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <PMW3901_RegRead+0x6c>
 8004388:	2302      	movs	r3, #2
 800438a:	e00d      	b.n	80043a8 <PMW3901_RegRead+0x88>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <PMW3901_RegRead+0x90>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6858      	ldr	r0, [r3, #4]
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <PMW3901_RegRead+0x90>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	891b      	ldrh	r3, [r3, #8]
 8004398:	2201      	movs	r2, #1
 800439a:	4619      	mov	r1, r3
 800439c:	f7fd fa20 	bl	80017e0 <HAL_GPIO_WritePin>

	*dest = value;
 80043a0:	7bba      	ldrb	r2, [r7, #14]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	701a      	strb	r2, [r3, #0]

	return PMW3901_SUCCESS;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	200005ac 	.word	0x200005ac

080043b4 <PMW3901_SetLed>:

PMW3901_Status_t PMW3901_SetLed()
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
	PMW3901_Status_t status;

	status = PMW3901_RegWrite(0x7f, 0x14);
 80043ba:	2114      	movs	r1, #20
 80043bc:	207f      	movs	r0, #127	; 0x7f
 80043be:	f7ff ff73 	bl	80042a8 <PMW3901_RegWrite>
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <PMW3901_SetLed+0x1c>
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	e011      	b.n	80043f4 <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x6f, 0x1c);
 80043d0:	211c      	movs	r1, #28
 80043d2:	206f      	movs	r0, #111	; 0x6f
 80043d4:	f7ff ff68 	bl	80042a8 <PMW3901_RegWrite>
 80043d8:	4603      	mov	r3, r0
 80043da:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <PMW3901_SetLed+0x32>
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	e006      	b.n	80043f4 <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x7f, 0x00);
 80043e6:	2100      	movs	r1, #0
 80043e8:	207f      	movs	r0, #127	; 0x7f
 80043ea:	f7ff ff5d 	bl	80042a8 <PMW3901_RegWrite>
 80043ee:	4603      	mov	r3, r0
 80043f0:	71fb      	strb	r3, [r7, #7]
	return status;
 80043f2:	79fb      	ldrb	r3, [r7, #7]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <PMW3901_Init>:

PMW3901_Status_t PMW3901_Init(PMW3901_Descriptor_t *_Descriptor)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	PMW3901_Status_t status;

	uint8_t Product_ID;
	uint8_t Inverse_Product_ID;

	Descriptor = _Descriptor;
 8004404:	4ab8      	ldr	r2, [pc, #736]	; (80046e8 <PMW3901_Init+0x2ec>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6013      	str	r3, [r2, #0]

	status = PMW3901_RegRead(0x00, &Product_ID);
 800440a:	f107 030e 	add.w	r3, r7, #14
 800440e:	4619      	mov	r1, r3
 8004410:	2000      	movs	r0, #0
 8004412:	f7ff ff85 	bl	8004320 <PMW3901_RegRead>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <PMW3901_Init+0x28>
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	e34c      	b.n	8004abe <PMW3901_Init+0x6c2>

	if(Product_ID != PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	2b49      	cmp	r3, #73	; 0x49
 8004428:	d001      	beq.n	800442e <PMW3901_Init+0x32>
 800442a:	2301      	movs	r3, #1
 800442c:	e347      	b.n	8004abe <PMW3901_Init+0x6c2>

	status = PMW3901_RegRead(0x5F, &Inverse_Product_ID);
 800442e:	f107 030d 	add.w	r3, r7, #13
 8004432:	4619      	mov	r1, r3
 8004434:	205f      	movs	r0, #95	; 0x5f
 8004436:	f7ff ff73 	bl	8004320 <PMW3901_RegRead>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <PMW3901_Init+0x4c>
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	e33a      	b.n	8004abe <PMW3901_Init+0x6c2>

	if(Inverse_Product_ID != INVERSE_PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 8004448:	7b7b      	ldrb	r3, [r7, #13]
 800444a:	2bb6      	cmp	r3, #182	; 0xb6
 800444c:	d001      	beq.n	8004452 <PMW3901_Init+0x56>
 800444e:	2301      	movs	r3, #1
 8004450:	e335      	b.n	8004abe <PMW3901_Init+0x6c2>

	status = PMW3901_RegWrite(0x3A, 0x00); if(status) return status;
 8004452:	2100      	movs	r1, #0
 8004454:	203a      	movs	r0, #58	; 0x3a
 8004456:	f7ff ff27 	bl	80042a8 <PMW3901_RegWrite>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <PMW3901_Init+0x6c>
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	e32a      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8004468:	2100      	movs	r1, #0
 800446a:	207f      	movs	r0, #127	; 0x7f
 800446c:	f7ff ff1c 	bl	80042a8 <PMW3901_RegWrite>
 8004470:	4603      	mov	r3, r0
 8004472:	73fb      	strb	r3, [r7, #15]
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <PMW3901_Init+0x82>
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	e31f      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0xAD); if(status) return status;
 800447e:	21ad      	movs	r1, #173	; 0xad
 8004480:	2061      	movs	r0, #97	; 0x61
 8004482:	f7ff ff11 	bl	80042a8 <PMW3901_RegWrite>
 8004486:	4603      	mov	r3, r0
 8004488:	73fb      	strb	r3, [r7, #15]
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <PMW3901_Init+0x98>
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	e314      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x03); if(status) return status;
 8004494:	2103      	movs	r1, #3
 8004496:	207f      	movs	r0, #127	; 0x7f
 8004498:	f7ff ff06 	bl	80042a8 <PMW3901_RegWrite>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <PMW3901_Init+0xae>
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	e309      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x00); if(status) return status;
 80044aa:	2100      	movs	r1, #0
 80044ac:	2040      	movs	r0, #64	; 0x40
 80044ae:	f7ff fefb 	bl	80042a8 <PMW3901_RegWrite>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <PMW3901_Init+0xc4>
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	e2fe      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x05); if(status) return status;
 80044c0:	2105      	movs	r1, #5
 80044c2:	207f      	movs	r0, #127	; 0x7f
 80044c4:	f7ff fef0 	bl	80042a8 <PMW3901_RegWrite>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <PMW3901_Init+0xda>
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	e2f3      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0xB3); if(status) return status;
 80044d6:	21b3      	movs	r1, #179	; 0xb3
 80044d8:	2041      	movs	r0, #65	; 0x41
 80044da:	f7ff fee5 	bl	80042a8 <PMW3901_RegWrite>
 80044de:	4603      	mov	r3, r0
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <PMW3901_Init+0xf0>
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	e2e8      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0xF1); if(status) return status;
 80044ec:	21f1      	movs	r1, #241	; 0xf1
 80044ee:	2043      	movs	r0, #67	; 0x43
 80044f0:	f7ff feda 	bl	80042a8 <PMW3901_RegWrite>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <PMW3901_Init+0x106>
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	e2dd      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x14); if(status) return status;
 8004502:	2114      	movs	r1, #20
 8004504:	2045      	movs	r0, #69	; 0x45
 8004506:	f7ff fecf 	bl	80042a8 <PMW3901_RegWrite>
 800450a:	4603      	mov	r3, r0
 800450c:	73fb      	strb	r3, [r7, #15]
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <PMW3901_Init+0x11c>
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	e2d2      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x32); if(status) return status;
 8004518:	2132      	movs	r1, #50	; 0x32
 800451a:	205b      	movs	r0, #91	; 0x5b
 800451c:	f7ff fec4 	bl	80042a8 <PMW3901_RegWrite>
 8004520:	4603      	mov	r3, r0
 8004522:	73fb      	strb	r3, [r7, #15]
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <PMW3901_Init+0x132>
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	e2c7      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x34); if(status) return status;
 800452e:	2134      	movs	r1, #52	; 0x34
 8004530:	205f      	movs	r0, #95	; 0x5f
 8004532:	f7ff feb9 	bl	80042a8 <PMW3901_RegWrite>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <PMW3901_Init+0x148>
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	e2bc      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7B, 0x08); if(status) return status;
 8004544:	2108      	movs	r1, #8
 8004546:	207b      	movs	r0, #123	; 0x7b
 8004548:	f7ff feae 	bl	80042a8 <PMW3901_RegWrite>
 800454c:	4603      	mov	r3, r0
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <PMW3901_Init+0x15e>
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	e2b1      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 800455a:	2106      	movs	r1, #6
 800455c:	207f      	movs	r0, #127	; 0x7f
 800455e:	f7ff fea3 	bl	80042a8 <PMW3901_RegWrite>
 8004562:	4603      	mov	r3, r0
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <PMW3901_Init+0x174>
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	e2a6      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x1B); if(status) return status;
 8004570:	211b      	movs	r1, #27
 8004572:	2044      	movs	r0, #68	; 0x44
 8004574:	f7ff fe98 	bl	80042a8 <PMW3901_RegWrite>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <PMW3901_Init+0x18a>
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	e29b      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0xBF); if(status) return status;
 8004586:	21bf      	movs	r1, #191	; 0xbf
 8004588:	2040      	movs	r0, #64	; 0x40
 800458a:	f7ff fe8d 	bl	80042a8 <PMW3901_RegWrite>
 800458e:	4603      	mov	r3, r0
 8004590:	73fb      	strb	r3, [r7, #15]
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <PMW3901_Init+0x1a0>
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	e290      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0x3F); if(status) return status;
 800459c:	213f      	movs	r1, #63	; 0x3f
 800459e:	204e      	movs	r0, #78	; 0x4e
 80045a0:	f7ff fe82 	bl	80042a8 <PMW3901_RegWrite>
 80045a4:	4603      	mov	r3, r0
 80045a6:	73fb      	strb	r3, [r7, #15]
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <PMW3901_Init+0x1b6>
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	e285      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x08); if(status) return status;
 80045b2:	2108      	movs	r1, #8
 80045b4:	207f      	movs	r0, #127	; 0x7f
 80045b6:	f7ff fe77 	bl	80042a8 <PMW3901_RegWrite>
 80045ba:	4603      	mov	r3, r0
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <PMW3901_Init+0x1cc>
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	e27a      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x20); if(status) return status;
 80045c8:	2120      	movs	r1, #32
 80045ca:	2065      	movs	r0, #101	; 0x65
 80045cc:	f7ff fe6c 	bl	80042a8 <PMW3901_RegWrite>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <PMW3901_Init+0x1e2>
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	e26f      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6A, 0x18); if(status) return status;
 80045de:	2118      	movs	r1, #24
 80045e0:	206a      	movs	r0, #106	; 0x6a
 80045e2:	f7ff fe61 	bl	80042a8 <PMW3901_RegWrite>
 80045e6:	4603      	mov	r3, r0
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <PMW3901_Init+0x1f8>
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	e264      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x09); if(status) return status;
 80045f4:	2109      	movs	r1, #9
 80045f6:	207f      	movs	r0, #127	; 0x7f
 80045f8:	f7ff fe56 	bl	80042a8 <PMW3901_RegWrite>
 80045fc:	4603      	mov	r3, r0
 80045fe:	73fb      	strb	r3, [r7, #15]
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <PMW3901_Init+0x20e>
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	e259      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4F, 0xAF); if(status) return status;
 800460a:	21af      	movs	r1, #175	; 0xaf
 800460c:	204f      	movs	r0, #79	; 0x4f
 800460e:	f7ff fe4b 	bl	80042a8 <PMW3901_RegWrite>
 8004612:	4603      	mov	r3, r0
 8004614:	73fb      	strb	r3, [r7, #15]
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <PMW3901_Init+0x224>
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	e24e      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x40); if(status) return status;
 8004620:	2140      	movs	r1, #64	; 0x40
 8004622:	205f      	movs	r0, #95	; 0x5f
 8004624:	f7ff fe40 	bl	80042a8 <PMW3901_RegWrite>
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <PMW3901_Init+0x23a>
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	e243      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x80); if(status) return status;
 8004636:	2180      	movs	r1, #128	; 0x80
 8004638:	2048      	movs	r0, #72	; 0x48
 800463a:	f7ff fe35 	bl	80042a8 <PMW3901_RegWrite>
 800463e:	4603      	mov	r3, r0
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <PMW3901_Init+0x250>
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	e238      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x49, 0x80); if(status) return status;
 800464c:	2180      	movs	r1, #128	; 0x80
 800464e:	2049      	movs	r0, #73	; 0x49
 8004650:	f7ff fe2a 	bl	80042a8 <PMW3901_RegWrite>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <PMW3901_Init+0x266>
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	e22d      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x57, 0x77); if(status) return status;
 8004662:	2177      	movs	r1, #119	; 0x77
 8004664:	2057      	movs	r0, #87	; 0x57
 8004666:	f7ff fe1f 	bl	80042a8 <PMW3901_RegWrite>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <PMW3901_Init+0x27c>
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	e222      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x60, 0x78); if(status) return status;
 8004678:	2178      	movs	r1, #120	; 0x78
 800467a:	2060      	movs	r0, #96	; 0x60
 800467c:	f7ff fe14 	bl	80042a8 <PMW3901_RegWrite>
 8004680:	4603      	mov	r3, r0
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <PMW3901_Init+0x292>
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	e217      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0x78); if(status) return status;
 800468e:	2178      	movs	r1, #120	; 0x78
 8004690:	2061      	movs	r0, #97	; 0x61
 8004692:	f7ff fe09 	bl	80042a8 <PMW3901_RegWrite>
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <PMW3901_Init+0x2a8>
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	e20c      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0x08); if(status) return status;
 80046a4:	2108      	movs	r1, #8
 80046a6:	2062      	movs	r0, #98	; 0x62
 80046a8:	f7ff fdfe 	bl	80042a8 <PMW3901_RegWrite>
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <PMW3901_Init+0x2be>
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	e201      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x50); if(status) return status;
 80046ba:	2150      	movs	r1, #80	; 0x50
 80046bc:	2063      	movs	r0, #99	; 0x63
 80046be:	f7ff fdf3 	bl	80042a8 <PMW3901_RegWrite>
 80046c2:	4603      	mov	r3, r0
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <PMW3901_Init+0x2d4>
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	e1f6      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0A); if(status) return status;
 80046d0:	210a      	movs	r1, #10
 80046d2:	207f      	movs	r0, #127	; 0x7f
 80046d4:	f7ff fde8 	bl	80042a8 <PMW3901_RegWrite>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d004      	beq.n	80046ec <PMW3901_Init+0x2f0>
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	e1eb      	b.n	8004abe <PMW3901_Init+0x6c2>
 80046e6:	bf00      	nop
 80046e8:	200005ac 	.word	0x200005ac
	status = PMW3901_RegWrite(0x45, 0x60); if(status) return status;
 80046ec:	2160      	movs	r1, #96	; 0x60
 80046ee:	2045      	movs	r0, #69	; 0x45
 80046f0:	f7ff fdda 	bl	80042a8 <PMW3901_RegWrite>
 80046f4:	4603      	mov	r3, r0
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <PMW3901_Init+0x306>
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	e1dd      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8004702:	2100      	movs	r1, #0
 8004704:	207f      	movs	r0, #127	; 0x7f
 8004706:	f7ff fdcf 	bl	80042a8 <PMW3901_RegWrite>
 800470a:	4603      	mov	r3, r0
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <PMW3901_Init+0x31c>
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	e1d2      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4D, 0x11); if(status) return status;
 8004718:	2111      	movs	r1, #17
 800471a:	204d      	movs	r0, #77	; 0x4d
 800471c:	f7ff fdc4 	bl	80042a8 <PMW3901_RegWrite>
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <PMW3901_Init+0x332>
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	e1c7      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x55, 0x80); if(status) return status;
 800472e:	2180      	movs	r1, #128	; 0x80
 8004730:	2055      	movs	r0, #85	; 0x55
 8004732:	f7ff fdb9 	bl	80042a8 <PMW3901_RegWrite>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <PMW3901_Init+0x348>
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	e1bc      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x74, 0x1F); if(status) return status;
 8004744:	211f      	movs	r1, #31
 8004746:	2074      	movs	r0, #116	; 0x74
 8004748:	f7ff fdae 	bl	80042a8 <PMW3901_RegWrite>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <PMW3901_Init+0x35e>
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	e1b1      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x75, 0x1F); if(status) return status;
 800475a:	211f      	movs	r1, #31
 800475c:	2075      	movs	r0, #117	; 0x75
 800475e:	f7ff fda3 	bl	80042a8 <PMW3901_RegWrite>
 8004762:	4603      	mov	r3, r0
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <PMW3901_Init+0x374>
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	e1a6      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4A, 0x78); if(status) return status;
 8004770:	2178      	movs	r1, #120	; 0x78
 8004772:	204a      	movs	r0, #74	; 0x4a
 8004774:	f7ff fd98 	bl	80042a8 <PMW3901_RegWrite>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <PMW3901_Init+0x38a>
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	e19b      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x78); if(status) return status;
 8004786:	2178      	movs	r1, #120	; 0x78
 8004788:	204b      	movs	r0, #75	; 0x4b
 800478a:	f7ff fd8d 	bl	80042a8 <PMW3901_RegWrite>
 800478e:	4603      	mov	r3, r0
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <PMW3901_Init+0x3a0>
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	e190      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x08); if(status) return status;
 800479c:	2108      	movs	r1, #8
 800479e:	2044      	movs	r0, #68	; 0x44
 80047a0:	f7ff fd82 	bl	80042a8 <PMW3901_RegWrite>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <PMW3901_Init+0x3b6>
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	e185      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x50); if(status) return status;
 80047b2:	2150      	movs	r1, #80	; 0x50
 80047b4:	2045      	movs	r0, #69	; 0x45
 80047b6:	f7ff fd77 	bl	80042a8 <PMW3901_RegWrite>
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <PMW3901_Init+0x3cc>
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	e17a      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x64, 0xFF); if(status) return status;
 80047c8:	21ff      	movs	r1, #255	; 0xff
 80047ca:	2064      	movs	r0, #100	; 0x64
 80047cc:	f7ff fd6c 	bl	80042a8 <PMW3901_RegWrite>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <PMW3901_Init+0x3e2>
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	e16f      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x1F); if(status) return status;
 80047de:	211f      	movs	r1, #31
 80047e0:	2065      	movs	r0, #101	; 0x65
 80047e2:	f7ff fd61 	bl	80042a8 <PMW3901_RegWrite>
 80047e6:	4603      	mov	r3, r0
 80047e8:	73fb      	strb	r3, [r7, #15]
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <PMW3901_Init+0x3f8>
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	e164      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x14); if(status) return status;
 80047f4:	2114      	movs	r1, #20
 80047f6:	207f      	movs	r0, #127	; 0x7f
 80047f8:	f7ff fd56 	bl	80042a8 <PMW3901_RegWrite>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <PMW3901_Init+0x40e>
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	e159      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x60); if(status) return status;
 800480a:	2160      	movs	r1, #96	; 0x60
 800480c:	2065      	movs	r0, #101	; 0x65
 800480e:	f7ff fd4b 	bl	80042a8 <PMW3901_RegWrite>
 8004812:	4603      	mov	r3, r0
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <PMW3901_Init+0x424>
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	e14e      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x66, 0x08); if(status) return status;
 8004820:	2108      	movs	r1, #8
 8004822:	2066      	movs	r0, #102	; 0x66
 8004824:	f7ff fd40 	bl	80042a8 <PMW3901_RegWrite>
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <PMW3901_Init+0x43a>
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	e143      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x78); if(status) return status;
 8004836:	2178      	movs	r1, #120	; 0x78
 8004838:	2063      	movs	r0, #99	; 0x63
 800483a:	f7ff fd35 	bl	80042a8 <PMW3901_RegWrite>
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <PMW3901_Init+0x450>
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	e138      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x15); if(status) return status;
 800484c:	2115      	movs	r1, #21
 800484e:	207f      	movs	r0, #127	; 0x7f
 8004850:	f7ff fd2a 	bl	80042a8 <PMW3901_RegWrite>
 8004854:	4603      	mov	r3, r0
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <PMW3901_Init+0x466>
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	e12d      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x58); if(status) return status;
 8004862:	2158      	movs	r1, #88	; 0x58
 8004864:	2048      	movs	r0, #72	; 0x48
 8004866:	f7ff fd1f 	bl	80042a8 <PMW3901_RegWrite>
 800486a:	4603      	mov	r3, r0
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <PMW3901_Init+0x47c>
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	e122      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8004878:	2107      	movs	r1, #7
 800487a:	207f      	movs	r0, #127	; 0x7f
 800487c:	f7ff fd14 	bl	80042a8 <PMW3901_RegWrite>
 8004880:	4603      	mov	r3, r0
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <PMW3901_Init+0x492>
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	e117      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0x0D); if(status) return status;
 800488e:	210d      	movs	r1, #13
 8004890:	2041      	movs	r0, #65	; 0x41
 8004892:	f7ff fd09 	bl	80042a8 <PMW3901_RegWrite>
 8004896:	4603      	mov	r3, r0
 8004898:	73fb      	strb	r3, [r7, #15]
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <PMW3901_Init+0x4a8>
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	e10c      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0x14); if(status) return status;
 80048a4:	2114      	movs	r1, #20
 80048a6:	2043      	movs	r0, #67	; 0x43
 80048a8:	f7ff fcfe 	bl	80042a8 <PMW3901_RegWrite>
 80048ac:	4603      	mov	r3, r0
 80048ae:	73fb      	strb	r3, [r7, #15]
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <PMW3901_Init+0x4be>
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	e101      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x0E); if(status) return status;
 80048ba:	210e      	movs	r1, #14
 80048bc:	204b      	movs	r0, #75	; 0x4b
 80048be:	f7ff fcf3 	bl	80042a8 <PMW3901_RegWrite>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <PMW3901_Init+0x4d4>
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	e0f6      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x0F); if(status) return status;
 80048d0:	210f      	movs	r1, #15
 80048d2:	2045      	movs	r0, #69	; 0x45
 80048d4:	f7ff fce8 	bl	80042a8 <PMW3901_RegWrite>
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <PMW3901_Init+0x4ea>
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	e0eb      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x42); if(status) return status;
 80048e6:	2142      	movs	r1, #66	; 0x42
 80048e8:	2044      	movs	r0, #68	; 0x44
 80048ea:	f7ff fcdd 	bl	80042a8 <PMW3901_RegWrite>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <PMW3901_Init+0x500>
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	e0e0      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4C, 0x80); if(status) return status;
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	204c      	movs	r0, #76	; 0x4c
 8004900:	f7ff fcd2 	bl	80042a8 <PMW3901_RegWrite>
 8004904:	4603      	mov	r3, r0
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <PMW3901_Init+0x516>
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	e0d5      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x10); if(status) return status;
 8004912:	2110      	movs	r1, #16
 8004914:	207f      	movs	r0, #127	; 0x7f
 8004916:	f7ff fcc7 	bl	80042a8 <PMW3901_RegWrite>
 800491a:	4603      	mov	r3, r0
 800491c:	73fb      	strb	r3, [r7, #15]
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <PMW3901_Init+0x52c>
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	e0ca      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x02); if(status) return status;
 8004928:	2102      	movs	r1, #2
 800492a:	205b      	movs	r0, #91	; 0x5b
 800492c:	f7ff fcbc 	bl	80042a8 <PMW3901_RegWrite>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <PMW3901_Init+0x542>
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	e0bf      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 800493e:	2107      	movs	r1, #7
 8004940:	207f      	movs	r0, #127	; 0x7f
 8004942:	f7ff fcb1 	bl	80042a8 <PMW3901_RegWrite>
 8004946:	4603      	mov	r3, r0
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <PMW3901_Init+0x558>
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	e0b4      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x41); if(status) return status;
 8004954:	2141      	movs	r1, #65	; 0x41
 8004956:	2040      	movs	r0, #64	; 0x40
 8004958:	f7ff fca6 	bl	80042a8 <PMW3901_RegWrite>
 800495c:	4603      	mov	r3, r0
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <PMW3901_Init+0x56e>
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	e0a9      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x70, 0x00); if(status) return status;
 800496a:	2100      	movs	r1, #0
 800496c:	2070      	movs	r0, #112	; 0x70
 800496e:	f7ff fc9b 	bl	80042a8 <PMW3901_RegWrite>
 8004972:	4603      	mov	r3, r0
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <PMW3901_Init+0x584>
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	e09e      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x32, 0x44); if(status) return status;
 8004980:	2144      	movs	r1, #68	; 0x44
 8004982:	2032      	movs	r0, #50	; 0x32
 8004984:	f7ff fc90 	bl	80042a8 <PMW3901_RegWrite>
 8004988:	4603      	mov	r3, r0
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <PMW3901_Init+0x59a>
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	e093      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8004996:	2107      	movs	r1, #7
 8004998:	207f      	movs	r0, #127	; 0x7f
 800499a:	f7ff fc85 	bl	80042a8 <PMW3901_RegWrite>
 800499e:	4603      	mov	r3, r0
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <PMW3901_Init+0x5b0>
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	e088      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x40); if(status) return status;
 80049ac:	2140      	movs	r1, #64	; 0x40
 80049ae:	2040      	movs	r0, #64	; 0x40
 80049b0:	f7ff fc7a 	bl	80042a8 <PMW3901_RegWrite>
 80049b4:	4603      	mov	r3, r0
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <PMW3901_Init+0x5c6>
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	e07d      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 80049c2:	2106      	movs	r1, #6
 80049c4:	207f      	movs	r0, #127	; 0x7f
 80049c6:	f7ff fc6f 	bl	80042a8 <PMW3901_RegWrite>
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <PMW3901_Init+0x5dc>
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	e072      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0xf0); if(status) return status;
 80049d8:	21f0      	movs	r1, #240	; 0xf0
 80049da:	2062      	movs	r0, #98	; 0x62
 80049dc:	f7ff fc64 	bl	80042a8 <PMW3901_RegWrite>
 80049e0:	4603      	mov	r3, r0
 80049e2:	73fb      	strb	r3, [r7, #15]
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <PMW3901_Init+0x5f2>
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	e067      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x00); if(status) return status;
 80049ee:	2100      	movs	r1, #0
 80049f0:	2063      	movs	r0, #99	; 0x63
 80049f2:	f7ff fc59 	bl	80042a8 <PMW3901_RegWrite>
 80049f6:	4603      	mov	r3, r0
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <PMW3901_Init+0x608>
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	e05c      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0D); if(status) return status;
 8004a04:	210d      	movs	r1, #13
 8004a06:	207f      	movs	r0, #127	; 0x7f
 8004a08:	f7ff fc4e 	bl	80042a8 <PMW3901_RegWrite>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <PMW3901_Init+0x61e>
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	e051      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0xC0); if(status) return status;
 8004a1a:	21c0      	movs	r1, #192	; 0xc0
 8004a1c:	2048      	movs	r0, #72	; 0x48
 8004a1e:	f7ff fc43 	bl	80042a8 <PMW3901_RegWrite>
 8004a22:	4603      	mov	r3, r0
 8004a24:	73fb      	strb	r3, [r7, #15]
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <PMW3901_Init+0x634>
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	e046      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6F, 0xd5); if(status) return status;
 8004a30:	21d5      	movs	r1, #213	; 0xd5
 8004a32:	206f      	movs	r0, #111	; 0x6f
 8004a34:	f7ff fc38 	bl	80042a8 <PMW3901_RegWrite>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <PMW3901_Init+0x64a>
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	e03b      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8004a46:	2100      	movs	r1, #0
 8004a48:	207f      	movs	r0, #127	; 0x7f
 8004a4a:	f7ff fc2d 	bl	80042a8 <PMW3901_RegWrite>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <PMW3901_Init+0x660>
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	e030      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0xa0); if(status) return status;
 8004a5c:	21a0      	movs	r1, #160	; 0xa0
 8004a5e:	205b      	movs	r0, #91	; 0x5b
 8004a60:	f7ff fc22 	bl	80042a8 <PMW3901_RegWrite>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <PMW3901_Init+0x676>
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	e025      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0xA8); if(status) return status;
 8004a72:	21a8      	movs	r1, #168	; 0xa8
 8004a74:	204e      	movs	r0, #78	; 0x4e
 8004a76:	f7ff fc17 	bl	80042a8 <PMW3901_RegWrite>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <PMW3901_Init+0x68c>
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	e01a      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5A, 0x50); if(status) return status;
 8004a88:	2150      	movs	r1, #80	; 0x50
 8004a8a:	205a      	movs	r0, #90	; 0x5a
 8004a8c:	f7ff fc0c 	bl	80042a8 <PMW3901_RegWrite>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <PMW3901_Init+0x6a2>
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	e00f      	b.n	8004abe <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x80); if(status) return status;
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	2040      	movs	r0, #64	; 0x40
 8004aa2:	f7ff fc01 	bl	80042a8 <PMW3901_RegWrite>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <PMW3901_Init+0x6b8>
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	e004      	b.n	8004abe <PMW3901_Init+0x6c2>

	status = PMW3901_SetLed();
 8004ab4:	f7ff fc7e 	bl	80043b4 <PMW3901_SetLed>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]

	return status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop

08004ac8 <PMW3901_Read_Variation>:

PMW3901_Status_t PMW3901_Read_Variation(int16_t *var_x, int16_t *var_y)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]

	PMW3901_Status_t status;
	PMW3901_Unify_2x8_to_16_t data;
	uint8_t Motion;

	status = PMW3901_RegRead(0x02, &Motion);
 8004ad2:	f107 030b 	add.w	r3, r7, #11
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	2002      	movs	r0, #2
 8004ada:	f7ff fc21 	bl	8004320 <PMW3901_RegRead>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <PMW3901_Read_Variation+0x24>
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	e03e      	b.n	8004b6a <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_H, &data.raw[1]);
 8004aec:	f107 030c 	add.w	r3, r7, #12
 8004af0:	3301      	adds	r3, #1
 8004af2:	4619      	mov	r1, r3
 8004af4:	2004      	movs	r0, #4
 8004af6:	f7ff fc13 	bl	8004320 <PMW3901_RegRead>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <PMW3901_Read_Variation+0x40>
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	e030      	b.n	8004b6a <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_L, &data.raw[0]);
 8004b08:	f107 030c 	add.w	r3, r7, #12
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	2003      	movs	r0, #3
 8004b10:	f7ff fc06 	bl	8004320 <PMW3901_RegRead>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <PMW3901_Read_Variation+0x5a>
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	e023      	b.n	8004b6a <PMW3901_Read_Variation+0xa2>

	*var_x = data.unified;
 8004b22:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	801a      	strh	r2, [r3, #0]

	status = PMW3901_RegRead(DELTA_Y_H, &data.raw[1]);
 8004b2a:	f107 030c 	add.w	r3, r7, #12
 8004b2e:	3301      	adds	r3, #1
 8004b30:	4619      	mov	r1, r3
 8004b32:	2006      	movs	r0, #6
 8004b34:	f7ff fbf4 	bl	8004320 <PMW3901_RegRead>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <PMW3901_Read_Variation+0x7e>
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	e011      	b.n	8004b6a <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_Y_L, &data.raw[0]);
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	2005      	movs	r0, #5
 8004b4e:	f7ff fbe7 	bl	8004320 <PMW3901_RegRead>
 8004b52:	4603      	mov	r3, r0
 8004b54:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <PMW3901_Read_Variation+0x98>
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	e004      	b.n	8004b6a <PMW3901_Read_Variation+0xa2>

	*var_y = data.unified;
 8004b60:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	801a      	strh	r2, [r3, #0]

	return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <__errno>:
 8004b74:	4b01      	ldr	r3, [pc, #4]	; (8004b7c <__errno+0x8>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000018 	.word	0x20000018

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4d0d      	ldr	r5, [pc, #52]	; (8004bb8 <__libc_init_array+0x38>)
 8004b84:	4c0d      	ldr	r4, [pc, #52]	; (8004bbc <__libc_init_array+0x3c>)
 8004b86:	1b64      	subs	r4, r4, r5
 8004b88:	10a4      	asrs	r4, r4, #2
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	4d0b      	ldr	r5, [pc, #44]	; (8004bc0 <__libc_init_array+0x40>)
 8004b92:	4c0c      	ldr	r4, [pc, #48]	; (8004bc4 <__libc_init_array+0x44>)
 8004b94:	f000 fc4e 	bl	8005434 <_init>
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	080054ec 	.word	0x080054ec
 8004bbc:	080054ec 	.word	0x080054ec
 8004bc0:	080054ec 	.word	0x080054ec
 8004bc4:	080054f0 	.word	0x080054f0

08004bc8 <memset>:
 8004bc8:	4402      	add	r2, r0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <memset+0xa>
 8004bd0:	4770      	bx	lr
 8004bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd6:	e7f9      	b.n	8004bcc <memset+0x4>

08004bd8 <siprintf>:
 8004bd8:	b40e      	push	{r1, r2, r3}
 8004bda:	b500      	push	{lr}
 8004bdc:	b09c      	sub	sp, #112	; 0x70
 8004bde:	ab1d      	add	r3, sp, #116	; 0x74
 8004be0:	9002      	str	r0, [sp, #8]
 8004be2:	9006      	str	r0, [sp, #24]
 8004be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004be8:	4809      	ldr	r0, [pc, #36]	; (8004c10 <siprintf+0x38>)
 8004bea:	9107      	str	r1, [sp, #28]
 8004bec:	9104      	str	r1, [sp, #16]
 8004bee:	4909      	ldr	r1, [pc, #36]	; (8004c14 <siprintf+0x3c>)
 8004bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf4:	9105      	str	r1, [sp, #20]
 8004bf6:	6800      	ldr	r0, [r0, #0]
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	a902      	add	r1, sp, #8
 8004bfc:	f000 f868 	bl	8004cd0 <_svfiprintf_r>
 8004c00:	9b02      	ldr	r3, [sp, #8]
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	b01c      	add	sp, #112	; 0x70
 8004c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c0c:	b003      	add	sp, #12
 8004c0e:	4770      	bx	lr
 8004c10:	20000018 	.word	0x20000018
 8004c14:	ffff0208 	.word	0xffff0208

08004c18 <__ssputs_r>:
 8004c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	688e      	ldr	r6, [r1, #8]
 8004c1e:	429e      	cmp	r6, r3
 8004c20:	4682      	mov	sl, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	4690      	mov	r8, r2
 8004c26:	461f      	mov	r7, r3
 8004c28:	d838      	bhi.n	8004c9c <__ssputs_r+0x84>
 8004c2a:	898a      	ldrh	r2, [r1, #12]
 8004c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c30:	d032      	beq.n	8004c98 <__ssputs_r+0x80>
 8004c32:	6825      	ldr	r5, [r4, #0]
 8004c34:	6909      	ldr	r1, [r1, #16]
 8004c36:	eba5 0901 	sub.w	r9, r5, r1
 8004c3a:	6965      	ldr	r5, [r4, #20]
 8004c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c44:	3301      	adds	r3, #1
 8004c46:	444b      	add	r3, r9
 8004c48:	106d      	asrs	r5, r5, #1
 8004c4a:	429d      	cmp	r5, r3
 8004c4c:	bf38      	it	cc
 8004c4e:	461d      	movcc	r5, r3
 8004c50:	0553      	lsls	r3, r2, #21
 8004c52:	d531      	bpl.n	8004cb8 <__ssputs_r+0xa0>
 8004c54:	4629      	mov	r1, r5
 8004c56:	f000 fb47 	bl	80052e8 <_malloc_r>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	b950      	cbnz	r0, 8004c74 <__ssputs_r+0x5c>
 8004c5e:	230c      	movs	r3, #12
 8004c60:	f8ca 3000 	str.w	r3, [sl]
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c74:	6921      	ldr	r1, [r4, #16]
 8004c76:	464a      	mov	r2, r9
 8004c78:	f000 fabe 	bl	80051f8 <memcpy>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c86:	81a3      	strh	r3, [r4, #12]
 8004c88:	6126      	str	r6, [r4, #16]
 8004c8a:	6165      	str	r5, [r4, #20]
 8004c8c:	444e      	add	r6, r9
 8004c8e:	eba5 0509 	sub.w	r5, r5, r9
 8004c92:	6026      	str	r6, [r4, #0]
 8004c94:	60a5      	str	r5, [r4, #8]
 8004c96:	463e      	mov	r6, r7
 8004c98:	42be      	cmp	r6, r7
 8004c9a:	d900      	bls.n	8004c9e <__ssputs_r+0x86>
 8004c9c:	463e      	mov	r6, r7
 8004c9e:	4632      	mov	r2, r6
 8004ca0:	6820      	ldr	r0, [r4, #0]
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	f000 fab6 	bl	8005214 <memmove>
 8004ca8:	68a3      	ldr	r3, [r4, #8]
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	1b9b      	subs	r3, r3, r6
 8004cae:	4432      	add	r2, r6
 8004cb0:	60a3      	str	r3, [r4, #8]
 8004cb2:	6022      	str	r2, [r4, #0]
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e7db      	b.n	8004c70 <__ssputs_r+0x58>
 8004cb8:	462a      	mov	r2, r5
 8004cba:	f000 fb6f 	bl	800539c <_realloc_r>
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d1e1      	bne.n	8004c88 <__ssputs_r+0x70>
 8004cc4:	6921      	ldr	r1, [r4, #16]
 8004cc6:	4650      	mov	r0, sl
 8004cc8:	f000 fabe 	bl	8005248 <_free_r>
 8004ccc:	e7c7      	b.n	8004c5e <__ssputs_r+0x46>
	...

08004cd0 <_svfiprintf_r>:
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	4698      	mov	r8, r3
 8004cd6:	898b      	ldrh	r3, [r1, #12]
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	b09d      	sub	sp, #116	; 0x74
 8004cdc:	4607      	mov	r7, r0
 8004cde:	460d      	mov	r5, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	d50e      	bpl.n	8004d02 <_svfiprintf_r+0x32>
 8004ce4:	690b      	ldr	r3, [r1, #16]
 8004ce6:	b963      	cbnz	r3, 8004d02 <_svfiprintf_r+0x32>
 8004ce8:	2140      	movs	r1, #64	; 0x40
 8004cea:	f000 fafd 	bl	80052e8 <_malloc_r>
 8004cee:	6028      	str	r0, [r5, #0]
 8004cf0:	6128      	str	r0, [r5, #16]
 8004cf2:	b920      	cbnz	r0, 8004cfe <_svfiprintf_r+0x2e>
 8004cf4:	230c      	movs	r3, #12
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	e0d1      	b.n	8004ea2 <_svfiprintf_r+0x1d2>
 8004cfe:	2340      	movs	r3, #64	; 0x40
 8004d00:	616b      	str	r3, [r5, #20]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9309      	str	r3, [sp, #36]	; 0x24
 8004d06:	2320      	movs	r3, #32
 8004d08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d10:	2330      	movs	r3, #48	; 0x30
 8004d12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ebc <_svfiprintf_r+0x1ec>
 8004d16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d1a:	f04f 0901 	mov.w	r9, #1
 8004d1e:	4623      	mov	r3, r4
 8004d20:	469a      	mov	sl, r3
 8004d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d26:	b10a      	cbz	r2, 8004d2c <_svfiprintf_r+0x5c>
 8004d28:	2a25      	cmp	r2, #37	; 0x25
 8004d2a:	d1f9      	bne.n	8004d20 <_svfiprintf_r+0x50>
 8004d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d30:	d00b      	beq.n	8004d4a <_svfiprintf_r+0x7a>
 8004d32:	465b      	mov	r3, fp
 8004d34:	4622      	mov	r2, r4
 8004d36:	4629      	mov	r1, r5
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f7ff ff6d 	bl	8004c18 <__ssputs_r>
 8004d3e:	3001      	adds	r0, #1
 8004d40:	f000 80aa 	beq.w	8004e98 <_svfiprintf_r+0x1c8>
 8004d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d46:	445a      	add	r2, fp
 8004d48:	9209      	str	r2, [sp, #36]	; 0x24
 8004d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80a2 	beq.w	8004e98 <_svfiprintf_r+0x1c8>
 8004d54:	2300      	movs	r3, #0
 8004d56:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d5e:	f10a 0a01 	add.w	sl, sl, #1
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	9307      	str	r3, [sp, #28]
 8004d66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d6c:	4654      	mov	r4, sl
 8004d6e:	2205      	movs	r2, #5
 8004d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d74:	4851      	ldr	r0, [pc, #324]	; (8004ebc <_svfiprintf_r+0x1ec>)
 8004d76:	f7fb fa2b 	bl	80001d0 <memchr>
 8004d7a:	9a04      	ldr	r2, [sp, #16]
 8004d7c:	b9d8      	cbnz	r0, 8004db6 <_svfiprintf_r+0xe6>
 8004d7e:	06d0      	lsls	r0, r2, #27
 8004d80:	bf44      	itt	mi
 8004d82:	2320      	movmi	r3, #32
 8004d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d88:	0711      	lsls	r1, r2, #28
 8004d8a:	bf44      	itt	mi
 8004d8c:	232b      	movmi	r3, #43	; 0x2b
 8004d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d92:	f89a 3000 	ldrb.w	r3, [sl]
 8004d96:	2b2a      	cmp	r3, #42	; 0x2a
 8004d98:	d015      	beq.n	8004dc6 <_svfiprintf_r+0xf6>
 8004d9a:	9a07      	ldr	r2, [sp, #28]
 8004d9c:	4654      	mov	r4, sl
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f04f 0c0a 	mov.w	ip, #10
 8004da4:	4621      	mov	r1, r4
 8004da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004daa:	3b30      	subs	r3, #48	; 0x30
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	d94e      	bls.n	8004e4e <_svfiprintf_r+0x17e>
 8004db0:	b1b0      	cbz	r0, 8004de0 <_svfiprintf_r+0x110>
 8004db2:	9207      	str	r2, [sp, #28]
 8004db4:	e014      	b.n	8004de0 <_svfiprintf_r+0x110>
 8004db6:	eba0 0308 	sub.w	r3, r0, r8
 8004dba:	fa09 f303 	lsl.w	r3, r9, r3
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	9304      	str	r3, [sp, #16]
 8004dc2:	46a2      	mov	sl, r4
 8004dc4:	e7d2      	b.n	8004d6c <_svfiprintf_r+0x9c>
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	1d19      	adds	r1, r3, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	9103      	str	r1, [sp, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfbb      	ittet	lt
 8004dd2:	425b      	neglt	r3, r3
 8004dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8004dd8:	9307      	strge	r3, [sp, #28]
 8004dda:	9307      	strlt	r3, [sp, #28]
 8004ddc:	bfb8      	it	lt
 8004dde:	9204      	strlt	r2, [sp, #16]
 8004de0:	7823      	ldrb	r3, [r4, #0]
 8004de2:	2b2e      	cmp	r3, #46	; 0x2e
 8004de4:	d10c      	bne.n	8004e00 <_svfiprintf_r+0x130>
 8004de6:	7863      	ldrb	r3, [r4, #1]
 8004de8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dea:	d135      	bne.n	8004e58 <_svfiprintf_r+0x188>
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	9203      	str	r2, [sp, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bfb8      	it	lt
 8004df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dfc:	3402      	adds	r4, #2
 8004dfe:	9305      	str	r3, [sp, #20]
 8004e00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ecc <_svfiprintf_r+0x1fc>
 8004e04:	7821      	ldrb	r1, [r4, #0]
 8004e06:	2203      	movs	r2, #3
 8004e08:	4650      	mov	r0, sl
 8004e0a:	f7fb f9e1 	bl	80001d0 <memchr>
 8004e0e:	b140      	cbz	r0, 8004e22 <_svfiprintf_r+0x152>
 8004e10:	2340      	movs	r3, #64	; 0x40
 8004e12:	eba0 000a 	sub.w	r0, r0, sl
 8004e16:	fa03 f000 	lsl.w	r0, r3, r0
 8004e1a:	9b04      	ldr	r3, [sp, #16]
 8004e1c:	4303      	orrs	r3, r0
 8004e1e:	3401      	adds	r4, #1
 8004e20:	9304      	str	r3, [sp, #16]
 8004e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e26:	4826      	ldr	r0, [pc, #152]	; (8004ec0 <_svfiprintf_r+0x1f0>)
 8004e28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e2c:	2206      	movs	r2, #6
 8004e2e:	f7fb f9cf 	bl	80001d0 <memchr>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d038      	beq.n	8004ea8 <_svfiprintf_r+0x1d8>
 8004e36:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <_svfiprintf_r+0x1f4>)
 8004e38:	bb1b      	cbnz	r3, 8004e82 <_svfiprintf_r+0x1b2>
 8004e3a:	9b03      	ldr	r3, [sp, #12]
 8004e3c:	3307      	adds	r3, #7
 8004e3e:	f023 0307 	bic.w	r3, r3, #7
 8004e42:	3308      	adds	r3, #8
 8004e44:	9303      	str	r3, [sp, #12]
 8004e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e48:	4433      	add	r3, r6
 8004e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4c:	e767      	b.n	8004d1e <_svfiprintf_r+0x4e>
 8004e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e52:	460c      	mov	r4, r1
 8004e54:	2001      	movs	r0, #1
 8004e56:	e7a5      	b.n	8004da4 <_svfiprintf_r+0xd4>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	3401      	adds	r4, #1
 8004e5c:	9305      	str	r3, [sp, #20]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f04f 0c0a 	mov.w	ip, #10
 8004e64:	4620      	mov	r0, r4
 8004e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e6a:	3a30      	subs	r2, #48	; 0x30
 8004e6c:	2a09      	cmp	r2, #9
 8004e6e:	d903      	bls.n	8004e78 <_svfiprintf_r+0x1a8>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0c5      	beq.n	8004e00 <_svfiprintf_r+0x130>
 8004e74:	9105      	str	r1, [sp, #20]
 8004e76:	e7c3      	b.n	8004e00 <_svfiprintf_r+0x130>
 8004e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e7f0      	b.n	8004e64 <_svfiprintf_r+0x194>
 8004e82:	ab03      	add	r3, sp, #12
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	462a      	mov	r2, r5
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <_svfiprintf_r+0x1f8>)
 8004e8a:	a904      	add	r1, sp, #16
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	f3af 8000 	nop.w
 8004e92:	1c42      	adds	r2, r0, #1
 8004e94:	4606      	mov	r6, r0
 8004e96:	d1d6      	bne.n	8004e46 <_svfiprintf_r+0x176>
 8004e98:	89ab      	ldrh	r3, [r5, #12]
 8004e9a:	065b      	lsls	r3, r3, #25
 8004e9c:	f53f af2c 	bmi.w	8004cf8 <_svfiprintf_r+0x28>
 8004ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea2:	b01d      	add	sp, #116	; 0x74
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	ab03      	add	r3, sp, #12
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	462a      	mov	r2, r5
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <_svfiprintf_r+0x1f8>)
 8004eb0:	a904      	add	r1, sp, #16
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f000 f87a 	bl	8004fac <_printf_i>
 8004eb8:	e7eb      	b.n	8004e92 <_svfiprintf_r+0x1c2>
 8004eba:	bf00      	nop
 8004ebc:	080054b0 	.word	0x080054b0
 8004ec0:	080054ba 	.word	0x080054ba
 8004ec4:	00000000 	.word	0x00000000
 8004ec8:	08004c19 	.word	0x08004c19
 8004ecc:	080054b6 	.word	0x080054b6

08004ed0 <_printf_common>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	4699      	mov	r9, r3
 8004ed8:	688a      	ldr	r2, [r1, #8]
 8004eda:	690b      	ldr	r3, [r1, #16]
 8004edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bfb8      	it	lt
 8004ee4:	4613      	movlt	r3, r2
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eec:	4607      	mov	r7, r0
 8004eee:	460c      	mov	r4, r1
 8004ef0:	b10a      	cbz	r2, 8004ef6 <_printf_common+0x26>
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	6033      	str	r3, [r6, #0]
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	0699      	lsls	r1, r3, #26
 8004efa:	bf42      	ittt	mi
 8004efc:	6833      	ldrmi	r3, [r6, #0]
 8004efe:	3302      	addmi	r3, #2
 8004f00:	6033      	strmi	r3, [r6, #0]
 8004f02:	6825      	ldr	r5, [r4, #0]
 8004f04:	f015 0506 	ands.w	r5, r5, #6
 8004f08:	d106      	bne.n	8004f18 <_printf_common+0x48>
 8004f0a:	f104 0a19 	add.w	sl, r4, #25
 8004f0e:	68e3      	ldr	r3, [r4, #12]
 8004f10:	6832      	ldr	r2, [r6, #0]
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	42ab      	cmp	r3, r5
 8004f16:	dc26      	bgt.n	8004f66 <_printf_common+0x96>
 8004f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f1c:	1e13      	subs	r3, r2, #0
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	bf18      	it	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	0692      	lsls	r2, r2, #26
 8004f26:	d42b      	bmi.n	8004f80 <_printf_common+0xb0>
 8004f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	4638      	mov	r0, r7
 8004f30:	47c0      	blx	r8
 8004f32:	3001      	adds	r0, #1
 8004f34:	d01e      	beq.n	8004f74 <_printf_common+0xa4>
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	68e5      	ldr	r5, [r4, #12]
 8004f3a:	6832      	ldr	r2, [r6, #0]
 8004f3c:	f003 0306 	and.w	r3, r3, #6
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	bf08      	it	eq
 8004f44:	1aad      	subeq	r5, r5, r2
 8004f46:	68a3      	ldr	r3, [r4, #8]
 8004f48:	6922      	ldr	r2, [r4, #16]
 8004f4a:	bf0c      	ite	eq
 8004f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f50:	2500      	movne	r5, #0
 8004f52:	4293      	cmp	r3, r2
 8004f54:	bfc4      	itt	gt
 8004f56:	1a9b      	subgt	r3, r3, r2
 8004f58:	18ed      	addgt	r5, r5, r3
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	341a      	adds	r4, #26
 8004f5e:	42b5      	cmp	r5, r6
 8004f60:	d11a      	bne.n	8004f98 <_printf_common+0xc8>
 8004f62:	2000      	movs	r0, #0
 8004f64:	e008      	b.n	8004f78 <_printf_common+0xa8>
 8004f66:	2301      	movs	r3, #1
 8004f68:	4652      	mov	r2, sl
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	47c0      	blx	r8
 8004f70:	3001      	adds	r0, #1
 8004f72:	d103      	bne.n	8004f7c <_printf_common+0xac>
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7c:	3501      	adds	r5, #1
 8004f7e:	e7c6      	b.n	8004f0e <_printf_common+0x3e>
 8004f80:	18e1      	adds	r1, r4, r3
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	2030      	movs	r0, #48	; 0x30
 8004f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f8a:	4422      	add	r2, r4
 8004f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f94:	3302      	adds	r3, #2
 8004f96:	e7c7      	b.n	8004f28 <_printf_common+0x58>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	47c0      	blx	r8
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d0e6      	beq.n	8004f74 <_printf_common+0xa4>
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7d9      	b.n	8004f5e <_printf_common+0x8e>
	...

08004fac <_printf_i>:
 8004fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	4691      	mov	r9, r2
 8004fb4:	7e27      	ldrb	r7, [r4, #24]
 8004fb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fb8:	2f78      	cmp	r7, #120	; 0x78
 8004fba:	4680      	mov	r8, r0
 8004fbc:	469a      	mov	sl, r3
 8004fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc2:	d807      	bhi.n	8004fd4 <_printf_i+0x28>
 8004fc4:	2f62      	cmp	r7, #98	; 0x62
 8004fc6:	d80a      	bhi.n	8004fde <_printf_i+0x32>
 8004fc8:	2f00      	cmp	r7, #0
 8004fca:	f000 80d8 	beq.w	800517e <_printf_i+0x1d2>
 8004fce:	2f58      	cmp	r7, #88	; 0x58
 8004fd0:	f000 80a3 	beq.w	800511a <_printf_i+0x16e>
 8004fd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fdc:	e03a      	b.n	8005054 <_printf_i+0xa8>
 8004fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fe2:	2b15      	cmp	r3, #21
 8004fe4:	d8f6      	bhi.n	8004fd4 <_printf_i+0x28>
 8004fe6:	a001      	add	r0, pc, #4	; (adr r0, 8004fec <_printf_i+0x40>)
 8004fe8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fec:	08005045 	.word	0x08005045
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08004fd5 	.word	0x08004fd5
 8004ff8:	08004fd5 	.word	0x08004fd5
 8004ffc:	08004fd5 	.word	0x08004fd5
 8005000:	08004fd5 	.word	0x08004fd5
 8005004:	08005059 	.word	0x08005059
 8005008:	08004fd5 	.word	0x08004fd5
 800500c:	08004fd5 	.word	0x08004fd5
 8005010:	08004fd5 	.word	0x08004fd5
 8005014:	08004fd5 	.word	0x08004fd5
 8005018:	08005165 	.word	0x08005165
 800501c:	08005089 	.word	0x08005089
 8005020:	08005147 	.word	0x08005147
 8005024:	08004fd5 	.word	0x08004fd5
 8005028:	08004fd5 	.word	0x08004fd5
 800502c:	08005187 	.word	0x08005187
 8005030:	08004fd5 	.word	0x08004fd5
 8005034:	08005089 	.word	0x08005089
 8005038:	08004fd5 	.word	0x08004fd5
 800503c:	08004fd5 	.word	0x08004fd5
 8005040:	0800514f 	.word	0x0800514f
 8005044:	680b      	ldr	r3, [r1, #0]
 8005046:	1d1a      	adds	r2, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	600a      	str	r2, [r1, #0]
 800504c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005054:	2301      	movs	r3, #1
 8005056:	e0a3      	b.n	80051a0 <_printf_i+0x1f4>
 8005058:	6825      	ldr	r5, [r4, #0]
 800505a:	6808      	ldr	r0, [r1, #0]
 800505c:	062e      	lsls	r6, r5, #24
 800505e:	f100 0304 	add.w	r3, r0, #4
 8005062:	d50a      	bpl.n	800507a <_printf_i+0xce>
 8005064:	6805      	ldr	r5, [r0, #0]
 8005066:	600b      	str	r3, [r1, #0]
 8005068:	2d00      	cmp	r5, #0
 800506a:	da03      	bge.n	8005074 <_printf_i+0xc8>
 800506c:	232d      	movs	r3, #45	; 0x2d
 800506e:	426d      	negs	r5, r5
 8005070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005074:	485e      	ldr	r0, [pc, #376]	; (80051f0 <_printf_i+0x244>)
 8005076:	230a      	movs	r3, #10
 8005078:	e019      	b.n	80050ae <_printf_i+0x102>
 800507a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800507e:	6805      	ldr	r5, [r0, #0]
 8005080:	600b      	str	r3, [r1, #0]
 8005082:	bf18      	it	ne
 8005084:	b22d      	sxthne	r5, r5
 8005086:	e7ef      	b.n	8005068 <_printf_i+0xbc>
 8005088:	680b      	ldr	r3, [r1, #0]
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	1d18      	adds	r0, r3, #4
 800508e:	6008      	str	r0, [r1, #0]
 8005090:	0628      	lsls	r0, r5, #24
 8005092:	d501      	bpl.n	8005098 <_printf_i+0xec>
 8005094:	681d      	ldr	r5, [r3, #0]
 8005096:	e002      	b.n	800509e <_printf_i+0xf2>
 8005098:	0669      	lsls	r1, r5, #25
 800509a:	d5fb      	bpl.n	8005094 <_printf_i+0xe8>
 800509c:	881d      	ldrh	r5, [r3, #0]
 800509e:	4854      	ldr	r0, [pc, #336]	; (80051f0 <_printf_i+0x244>)
 80050a0:	2f6f      	cmp	r7, #111	; 0x6f
 80050a2:	bf0c      	ite	eq
 80050a4:	2308      	moveq	r3, #8
 80050a6:	230a      	movne	r3, #10
 80050a8:	2100      	movs	r1, #0
 80050aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ae:	6866      	ldr	r6, [r4, #4]
 80050b0:	60a6      	str	r6, [r4, #8]
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	bfa2      	ittt	ge
 80050b6:	6821      	ldrge	r1, [r4, #0]
 80050b8:	f021 0104 	bicge.w	r1, r1, #4
 80050bc:	6021      	strge	r1, [r4, #0]
 80050be:	b90d      	cbnz	r5, 80050c4 <_printf_i+0x118>
 80050c0:	2e00      	cmp	r6, #0
 80050c2:	d04d      	beq.n	8005160 <_printf_i+0x1b4>
 80050c4:	4616      	mov	r6, r2
 80050c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80050ca:	fb03 5711 	mls	r7, r3, r1, r5
 80050ce:	5dc7      	ldrb	r7, [r0, r7]
 80050d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050d4:	462f      	mov	r7, r5
 80050d6:	42bb      	cmp	r3, r7
 80050d8:	460d      	mov	r5, r1
 80050da:	d9f4      	bls.n	80050c6 <_printf_i+0x11a>
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d10b      	bne.n	80050f8 <_printf_i+0x14c>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	07df      	lsls	r7, r3, #31
 80050e4:	d508      	bpl.n	80050f8 <_printf_i+0x14c>
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	6861      	ldr	r1, [r4, #4]
 80050ea:	4299      	cmp	r1, r3
 80050ec:	bfde      	ittt	le
 80050ee:	2330      	movle	r3, #48	; 0x30
 80050f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050f8:	1b92      	subs	r2, r2, r6
 80050fa:	6122      	str	r2, [r4, #16]
 80050fc:	f8cd a000 	str.w	sl, [sp]
 8005100:	464b      	mov	r3, r9
 8005102:	aa03      	add	r2, sp, #12
 8005104:	4621      	mov	r1, r4
 8005106:	4640      	mov	r0, r8
 8005108:	f7ff fee2 	bl	8004ed0 <_printf_common>
 800510c:	3001      	adds	r0, #1
 800510e:	d14c      	bne.n	80051aa <_printf_i+0x1fe>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	b004      	add	sp, #16
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511a:	4835      	ldr	r0, [pc, #212]	; (80051f0 <_printf_i+0x244>)
 800511c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	680e      	ldr	r6, [r1, #0]
 8005124:	061f      	lsls	r7, r3, #24
 8005126:	f856 5b04 	ldr.w	r5, [r6], #4
 800512a:	600e      	str	r6, [r1, #0]
 800512c:	d514      	bpl.n	8005158 <_printf_i+0x1ac>
 800512e:	07d9      	lsls	r1, r3, #31
 8005130:	bf44      	itt	mi
 8005132:	f043 0320 	orrmi.w	r3, r3, #32
 8005136:	6023      	strmi	r3, [r4, #0]
 8005138:	b91d      	cbnz	r5, 8005142 <_printf_i+0x196>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	f023 0320 	bic.w	r3, r3, #32
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	2310      	movs	r3, #16
 8005144:	e7b0      	b.n	80050a8 <_printf_i+0xfc>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	f043 0320 	orr.w	r3, r3, #32
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	2378      	movs	r3, #120	; 0x78
 8005150:	4828      	ldr	r0, [pc, #160]	; (80051f4 <_printf_i+0x248>)
 8005152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005156:	e7e3      	b.n	8005120 <_printf_i+0x174>
 8005158:	065e      	lsls	r6, r3, #25
 800515a:	bf48      	it	mi
 800515c:	b2ad      	uxthmi	r5, r5
 800515e:	e7e6      	b.n	800512e <_printf_i+0x182>
 8005160:	4616      	mov	r6, r2
 8005162:	e7bb      	b.n	80050dc <_printf_i+0x130>
 8005164:	680b      	ldr	r3, [r1, #0]
 8005166:	6826      	ldr	r6, [r4, #0]
 8005168:	6960      	ldr	r0, [r4, #20]
 800516a:	1d1d      	adds	r5, r3, #4
 800516c:	600d      	str	r5, [r1, #0]
 800516e:	0635      	lsls	r5, r6, #24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	d501      	bpl.n	8005178 <_printf_i+0x1cc>
 8005174:	6018      	str	r0, [r3, #0]
 8005176:	e002      	b.n	800517e <_printf_i+0x1d2>
 8005178:	0671      	lsls	r1, r6, #25
 800517a:	d5fb      	bpl.n	8005174 <_printf_i+0x1c8>
 800517c:	8018      	strh	r0, [r3, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	6123      	str	r3, [r4, #16]
 8005182:	4616      	mov	r6, r2
 8005184:	e7ba      	b.n	80050fc <_printf_i+0x150>
 8005186:	680b      	ldr	r3, [r1, #0]
 8005188:	1d1a      	adds	r2, r3, #4
 800518a:	600a      	str	r2, [r1, #0]
 800518c:	681e      	ldr	r6, [r3, #0]
 800518e:	6862      	ldr	r2, [r4, #4]
 8005190:	2100      	movs	r1, #0
 8005192:	4630      	mov	r0, r6
 8005194:	f7fb f81c 	bl	80001d0 <memchr>
 8005198:	b108      	cbz	r0, 800519e <_printf_i+0x1f2>
 800519a:	1b80      	subs	r0, r0, r6
 800519c:	6060      	str	r0, [r4, #4]
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	2300      	movs	r3, #0
 80051a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a8:	e7a8      	b.n	80050fc <_printf_i+0x150>
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	4632      	mov	r2, r6
 80051ae:	4649      	mov	r1, r9
 80051b0:	4640      	mov	r0, r8
 80051b2:	47d0      	blx	sl
 80051b4:	3001      	adds	r0, #1
 80051b6:	d0ab      	beq.n	8005110 <_printf_i+0x164>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	079b      	lsls	r3, r3, #30
 80051bc:	d413      	bmi.n	80051e6 <_printf_i+0x23a>
 80051be:	68e0      	ldr	r0, [r4, #12]
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	4298      	cmp	r0, r3
 80051c4:	bfb8      	it	lt
 80051c6:	4618      	movlt	r0, r3
 80051c8:	e7a4      	b.n	8005114 <_printf_i+0x168>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4632      	mov	r2, r6
 80051ce:	4649      	mov	r1, r9
 80051d0:	4640      	mov	r0, r8
 80051d2:	47d0      	blx	sl
 80051d4:	3001      	adds	r0, #1
 80051d6:	d09b      	beq.n	8005110 <_printf_i+0x164>
 80051d8:	3501      	adds	r5, #1
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	9903      	ldr	r1, [sp, #12]
 80051de:	1a5b      	subs	r3, r3, r1
 80051e0:	42ab      	cmp	r3, r5
 80051e2:	dcf2      	bgt.n	80051ca <_printf_i+0x21e>
 80051e4:	e7eb      	b.n	80051be <_printf_i+0x212>
 80051e6:	2500      	movs	r5, #0
 80051e8:	f104 0619 	add.w	r6, r4, #25
 80051ec:	e7f5      	b.n	80051da <_printf_i+0x22e>
 80051ee:	bf00      	nop
 80051f0:	080054c1 	.word	0x080054c1
 80051f4:	080054d2 	.word	0x080054d2

080051f8 <memcpy>:
 80051f8:	440a      	add	r2, r1
 80051fa:	4291      	cmp	r1, r2
 80051fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005200:	d100      	bne.n	8005204 <memcpy+0xc>
 8005202:	4770      	bx	lr
 8005204:	b510      	push	{r4, lr}
 8005206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800520a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800520e:	4291      	cmp	r1, r2
 8005210:	d1f9      	bne.n	8005206 <memcpy+0xe>
 8005212:	bd10      	pop	{r4, pc}

08005214 <memmove>:
 8005214:	4288      	cmp	r0, r1
 8005216:	b510      	push	{r4, lr}
 8005218:	eb01 0402 	add.w	r4, r1, r2
 800521c:	d902      	bls.n	8005224 <memmove+0x10>
 800521e:	4284      	cmp	r4, r0
 8005220:	4623      	mov	r3, r4
 8005222:	d807      	bhi.n	8005234 <memmove+0x20>
 8005224:	1e43      	subs	r3, r0, #1
 8005226:	42a1      	cmp	r1, r4
 8005228:	d008      	beq.n	800523c <memmove+0x28>
 800522a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800522e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005232:	e7f8      	b.n	8005226 <memmove+0x12>
 8005234:	4402      	add	r2, r0
 8005236:	4601      	mov	r1, r0
 8005238:	428a      	cmp	r2, r1
 800523a:	d100      	bne.n	800523e <memmove+0x2a>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005246:	e7f7      	b.n	8005238 <memmove+0x24>

08005248 <_free_r>:
 8005248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800524a:	2900      	cmp	r1, #0
 800524c:	d048      	beq.n	80052e0 <_free_r+0x98>
 800524e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005252:	9001      	str	r0, [sp, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f1a1 0404 	sub.w	r4, r1, #4
 800525a:	bfb8      	it	lt
 800525c:	18e4      	addlt	r4, r4, r3
 800525e:	f000 f8d3 	bl	8005408 <__malloc_lock>
 8005262:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <_free_r+0x9c>)
 8005264:	9801      	ldr	r0, [sp, #4]
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	4615      	mov	r5, r2
 800526a:	b933      	cbnz	r3, 800527a <_free_r+0x32>
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	6014      	str	r4, [r2, #0]
 8005270:	b003      	add	sp, #12
 8005272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005276:	f000 b8cd 	b.w	8005414 <__malloc_unlock>
 800527a:	42a3      	cmp	r3, r4
 800527c:	d90b      	bls.n	8005296 <_free_r+0x4e>
 800527e:	6821      	ldr	r1, [r4, #0]
 8005280:	1862      	adds	r2, r4, r1
 8005282:	4293      	cmp	r3, r2
 8005284:	bf04      	itt	eq
 8005286:	681a      	ldreq	r2, [r3, #0]
 8005288:	685b      	ldreq	r3, [r3, #4]
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	bf04      	itt	eq
 800528e:	1852      	addeq	r2, r2, r1
 8005290:	6022      	streq	r2, [r4, #0]
 8005292:	602c      	str	r4, [r5, #0]
 8005294:	e7ec      	b.n	8005270 <_free_r+0x28>
 8005296:	461a      	mov	r2, r3
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	b10b      	cbz	r3, 80052a0 <_free_r+0x58>
 800529c:	42a3      	cmp	r3, r4
 800529e:	d9fa      	bls.n	8005296 <_free_r+0x4e>
 80052a0:	6811      	ldr	r1, [r2, #0]
 80052a2:	1855      	adds	r5, r2, r1
 80052a4:	42a5      	cmp	r5, r4
 80052a6:	d10b      	bne.n	80052c0 <_free_r+0x78>
 80052a8:	6824      	ldr	r4, [r4, #0]
 80052aa:	4421      	add	r1, r4
 80052ac:	1854      	adds	r4, r2, r1
 80052ae:	42a3      	cmp	r3, r4
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	d1dd      	bne.n	8005270 <_free_r+0x28>
 80052b4:	681c      	ldr	r4, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	6053      	str	r3, [r2, #4]
 80052ba:	4421      	add	r1, r4
 80052bc:	6011      	str	r1, [r2, #0]
 80052be:	e7d7      	b.n	8005270 <_free_r+0x28>
 80052c0:	d902      	bls.n	80052c8 <_free_r+0x80>
 80052c2:	230c      	movs	r3, #12
 80052c4:	6003      	str	r3, [r0, #0]
 80052c6:	e7d3      	b.n	8005270 <_free_r+0x28>
 80052c8:	6825      	ldr	r5, [r4, #0]
 80052ca:	1961      	adds	r1, r4, r5
 80052cc:	428b      	cmp	r3, r1
 80052ce:	bf04      	itt	eq
 80052d0:	6819      	ldreq	r1, [r3, #0]
 80052d2:	685b      	ldreq	r3, [r3, #4]
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	bf04      	itt	eq
 80052d8:	1949      	addeq	r1, r1, r5
 80052da:	6021      	streq	r1, [r4, #0]
 80052dc:	6054      	str	r4, [r2, #4]
 80052de:	e7c7      	b.n	8005270 <_free_r+0x28>
 80052e0:	b003      	add	sp, #12
 80052e2:	bd30      	pop	{r4, r5, pc}
 80052e4:	200000ac 	.word	0x200000ac

080052e8 <_malloc_r>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	1ccd      	adds	r5, r1, #3
 80052ec:	f025 0503 	bic.w	r5, r5, #3
 80052f0:	3508      	adds	r5, #8
 80052f2:	2d0c      	cmp	r5, #12
 80052f4:	bf38      	it	cc
 80052f6:	250c      	movcc	r5, #12
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	4606      	mov	r6, r0
 80052fc:	db01      	blt.n	8005302 <_malloc_r+0x1a>
 80052fe:	42a9      	cmp	r1, r5
 8005300:	d903      	bls.n	800530a <_malloc_r+0x22>
 8005302:	230c      	movs	r3, #12
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	2000      	movs	r0, #0
 8005308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800530a:	f000 f87d 	bl	8005408 <__malloc_lock>
 800530e:	4921      	ldr	r1, [pc, #132]	; (8005394 <_malloc_r+0xac>)
 8005310:	680a      	ldr	r2, [r1, #0]
 8005312:	4614      	mov	r4, r2
 8005314:	b99c      	cbnz	r4, 800533e <_malloc_r+0x56>
 8005316:	4f20      	ldr	r7, [pc, #128]	; (8005398 <_malloc_r+0xb0>)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	b923      	cbnz	r3, 8005326 <_malloc_r+0x3e>
 800531c:	4621      	mov	r1, r4
 800531e:	4630      	mov	r0, r6
 8005320:	f000 f862 	bl	80053e8 <_sbrk_r>
 8005324:	6038      	str	r0, [r7, #0]
 8005326:	4629      	mov	r1, r5
 8005328:	4630      	mov	r0, r6
 800532a:	f000 f85d 	bl	80053e8 <_sbrk_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d123      	bne.n	800537a <_malloc_r+0x92>
 8005332:	230c      	movs	r3, #12
 8005334:	6033      	str	r3, [r6, #0]
 8005336:	4630      	mov	r0, r6
 8005338:	f000 f86c 	bl	8005414 <__malloc_unlock>
 800533c:	e7e3      	b.n	8005306 <_malloc_r+0x1e>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	1b5b      	subs	r3, r3, r5
 8005342:	d417      	bmi.n	8005374 <_malloc_r+0x8c>
 8005344:	2b0b      	cmp	r3, #11
 8005346:	d903      	bls.n	8005350 <_malloc_r+0x68>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	441c      	add	r4, r3
 800534c:	6025      	str	r5, [r4, #0]
 800534e:	e004      	b.n	800535a <_malloc_r+0x72>
 8005350:	6863      	ldr	r3, [r4, #4]
 8005352:	42a2      	cmp	r2, r4
 8005354:	bf0c      	ite	eq
 8005356:	600b      	streq	r3, [r1, #0]
 8005358:	6053      	strne	r3, [r2, #4]
 800535a:	4630      	mov	r0, r6
 800535c:	f000 f85a 	bl	8005414 <__malloc_unlock>
 8005360:	f104 000b 	add.w	r0, r4, #11
 8005364:	1d23      	adds	r3, r4, #4
 8005366:	f020 0007 	bic.w	r0, r0, #7
 800536a:	1ac2      	subs	r2, r0, r3
 800536c:	d0cc      	beq.n	8005308 <_malloc_r+0x20>
 800536e:	1a1b      	subs	r3, r3, r0
 8005370:	50a3      	str	r3, [r4, r2]
 8005372:	e7c9      	b.n	8005308 <_malloc_r+0x20>
 8005374:	4622      	mov	r2, r4
 8005376:	6864      	ldr	r4, [r4, #4]
 8005378:	e7cc      	b.n	8005314 <_malloc_r+0x2c>
 800537a:	1cc4      	adds	r4, r0, #3
 800537c:	f024 0403 	bic.w	r4, r4, #3
 8005380:	42a0      	cmp	r0, r4
 8005382:	d0e3      	beq.n	800534c <_malloc_r+0x64>
 8005384:	1a21      	subs	r1, r4, r0
 8005386:	4630      	mov	r0, r6
 8005388:	f000 f82e 	bl	80053e8 <_sbrk_r>
 800538c:	3001      	adds	r0, #1
 800538e:	d1dd      	bne.n	800534c <_malloc_r+0x64>
 8005390:	e7cf      	b.n	8005332 <_malloc_r+0x4a>
 8005392:	bf00      	nop
 8005394:	200000ac 	.word	0x200000ac
 8005398:	200000b0 	.word	0x200000b0

0800539c <_realloc_r>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	4607      	mov	r7, r0
 80053a0:	4614      	mov	r4, r2
 80053a2:	460e      	mov	r6, r1
 80053a4:	b921      	cbnz	r1, 80053b0 <_realloc_r+0x14>
 80053a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053aa:	4611      	mov	r1, r2
 80053ac:	f7ff bf9c 	b.w	80052e8 <_malloc_r>
 80053b0:	b922      	cbnz	r2, 80053bc <_realloc_r+0x20>
 80053b2:	f7ff ff49 	bl	8005248 <_free_r>
 80053b6:	4625      	mov	r5, r4
 80053b8:	4628      	mov	r0, r5
 80053ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053bc:	f000 f830 	bl	8005420 <_malloc_usable_size_r>
 80053c0:	42a0      	cmp	r0, r4
 80053c2:	d20f      	bcs.n	80053e4 <_realloc_r+0x48>
 80053c4:	4621      	mov	r1, r4
 80053c6:	4638      	mov	r0, r7
 80053c8:	f7ff ff8e 	bl	80052e8 <_malloc_r>
 80053cc:	4605      	mov	r5, r0
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d0f2      	beq.n	80053b8 <_realloc_r+0x1c>
 80053d2:	4631      	mov	r1, r6
 80053d4:	4622      	mov	r2, r4
 80053d6:	f7ff ff0f 	bl	80051f8 <memcpy>
 80053da:	4631      	mov	r1, r6
 80053dc:	4638      	mov	r0, r7
 80053de:	f7ff ff33 	bl	8005248 <_free_r>
 80053e2:	e7e9      	b.n	80053b8 <_realloc_r+0x1c>
 80053e4:	4635      	mov	r5, r6
 80053e6:	e7e7      	b.n	80053b8 <_realloc_r+0x1c>

080053e8 <_sbrk_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d06      	ldr	r5, [pc, #24]	; (8005404 <_sbrk_r+0x1c>)
 80053ec:	2300      	movs	r3, #0
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fb febe 	bl	8001174 <_sbrk>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_sbrk_r+0x1a>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_sbrk_r+0x1a>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	200005b0 	.word	0x200005b0

08005408 <__malloc_lock>:
 8005408:	4801      	ldr	r0, [pc, #4]	; (8005410 <__malloc_lock+0x8>)
 800540a:	f000 b811 	b.w	8005430 <__retarget_lock_acquire_recursive>
 800540e:	bf00      	nop
 8005410:	200005b8 	.word	0x200005b8

08005414 <__malloc_unlock>:
 8005414:	4801      	ldr	r0, [pc, #4]	; (800541c <__malloc_unlock+0x8>)
 8005416:	f000 b80c 	b.w	8005432 <__retarget_lock_release_recursive>
 800541a:	bf00      	nop
 800541c:	200005b8 	.word	0x200005b8

08005420 <_malloc_usable_size_r>:
 8005420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005424:	1f18      	subs	r0, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfbc      	itt	lt
 800542a:	580b      	ldrlt	r3, [r1, r0]
 800542c:	18c0      	addlt	r0, r0, r3
 800542e:	4770      	bx	lr

08005430 <__retarget_lock_acquire_recursive>:
 8005430:	4770      	bx	lr

08005432 <__retarget_lock_release_recursive>:
 8005432:	4770      	bx	lr

08005434 <_init>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr

08005440 <_fini>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr
